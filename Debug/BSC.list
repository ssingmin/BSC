
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b41c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800b5ec  0800b5ec  0001b5ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6e8  0800b6e8  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6e8  0800b6e8  0001b6e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6f0  0800b6f0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6f4  0800b6f4  0001b6f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800b6f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000078  0800b770  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000059c  0800b770  0002059c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001968b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000377e  00000000  00000000  00039733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  0003ceb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001200  00000000  00000000  0003e208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002916d  00000000  00000000  0003f408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018993  00000000  00000000  00068575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb268  00000000  00000000  00080f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017c170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059cc  00000000  00000000  0017c1c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b5d4 	.word	0x0800b5d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800b5d4 	.word	0x0800b5d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		init_state();
 8000ef4:	f000 f802 	bl	8000efc <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <init_state>:

    UNLOCK();
    return nbits;
}

void init_state(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <init_state+0x74>)
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <init_state+0x74>)
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <init_state+0x74>)
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <init_state+0x74>)
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <init_state+0x74>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <init_state+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <init_state+0x78>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <init_state+0x78>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);//printf("HAL_TIM_Base_Stop_IT\n");  //timer.stop();
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <init_state+0x7c>)
 8000f3e:	f007 f9eb 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <init_state+0x80>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e008      	b.n	8000f60 <init_state+0x64>
        data.buffer[i] = 0;
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <init_state+0x78>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	3308      	adds	r3, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b3f      	cmp	r3, #63	; 0x3f
 8000f64:	d9f3      	bls.n	8000f4e <init_state+0x52>
    }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200000dc 	.word	0x200000dc
 8000f74:	20000094 	.word	0x20000094
 8000f78:	200003fc 	.word	0x200003fc
 8000f7c:	20000114 	.word	0x20000114

08000f80 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 8000f86:	4b96      	ldr	r3, [pc, #600]	; (80011e0 <isr_fall+0x260>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	f000 83cd 	beq.w	800172a <isr_fall+0x7aa>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f300 83cc 	bgt.w	800172e <isr_fall+0x7ae>
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <isr_fall+0x22>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f000 8224 	beq.w	80013e8 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8000fa0:	e3c5      	b.n	800172e <isr_fall+0x7ae>
            if (work.c1 < 0) {
 8000fa2:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <isr_fall+0x260>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da07      	bge.n	8000fba <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT\n");  //timer.start();
 8000faa:	488e      	ldr	r0, [pc, #568]	; (80011e4 <isr_fall+0x264>)
 8000fac:	f007 f93c 	bl	8008228 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8000fb0:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <isr_fall+0x268>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <isr_fall+0x260>)
 8000fb6:	6053      	str	r3, [r2, #4]
            break;
 8000fb8:	e3bc      	b.n	8001734 <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 8000fba:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <isr_fall+0x268>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a88      	ldr	r2, [pc, #544]	; (80011e0 <isr_fall+0x260>)
 8000fc0:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 8000fc2:	4b87      	ldr	r3, [pc, #540]	; (80011e0 <isr_fall+0x260>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b86      	ldr	r3, [pc, #536]	; (80011e0 <isr_fall+0x260>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 8000fce:	4b84      	ldr	r3, [pc, #528]	; (80011e0 <isr_fall+0x260>)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <isr_fall+0x260>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 8000fda:	f240 2332 	movw	r3, #562	; 0x232
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fab7 	bl	8000554 <__aeabi_i2d>
 8000fe6:	a37a      	add	r3, pc, #488	; (adr r3, 80011d0 <isr_fall+0x250>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff fb1c 	bl	8000628 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff faab 	bl	8000554 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fd81 	bl	8000b0c <__aeabi_dcmplt>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d056      	beq.n	80010be <isr_fall+0x13e>
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fa9f 	bl	8000554 <__aeabi_i2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	f240 2332 	movw	r3, #562	; 0x232
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa97 	bl	8000554 <__aeabi_i2d>
 8001026:	a36c      	add	r3, pc, #432	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fafc 	bl	8000628 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	f7ff fd68 	bl	8000b0c <__aeabi_dcmplt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03d      	beq.n	80010be <isr_fall+0x13e>
 8001042:	f240 2332 	movw	r3, #562	; 0x232
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa83 	bl	8000554 <__aeabi_i2d>
 800104e:	a360      	add	r3, pc, #384	; (adr r3, 80011d0 <isr_fall+0x250>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff fae8 	bl	8000628 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4614      	mov	r4, r2
 800105e:	461d      	mov	r5, r3
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff fa77 	bl	8000554 <__aeabi_i2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4620      	mov	r0, r4
 800106c:	4629      	mov	r1, r5
 800106e:	f7ff fd4d 	bl	8000b0c <__aeabi_dcmplt>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d022      	beq.n	80010be <isr_fall+0x13e>
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff fa6b 	bl	8000554 <__aeabi_i2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	f240 2332 	movw	r3, #562	; 0x232
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa63 	bl	8000554 <__aeabi_i2d>
 800108e:	a352      	add	r3, pc, #328	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fac8 	bl	8000628 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff fd34 	bl	8000b0c <__aeabi_dcmplt>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <isr_fall+0x13e>
                    data.format = NEC;
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <isr_fall+0x26c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <isr_fall+0x260>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <isr_fall+0x26c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	e193      	b.n	80013e6 <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 80010be:	f240 2332 	movw	r3, #562	; 0x232
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa45 	bl	8000554 <__aeabi_i2d>
 80010ca:	a341      	add	r3, pc, #260	; (adr r3, 80011d0 <isr_fall+0x250>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff faaa 	bl	8000628 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fa39 	bl	8000554 <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff fd0f 	bl	8000b0c <__aeabi_dcmplt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d07d      	beq.n	80011f0 <isr_fall+0x270>
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fa2d 	bl	8000554 <__aeabi_i2d>
 80010fa:	4604      	mov	r4, r0
 80010fc:	460d      	mov	r5, r1
 80010fe:	f240 2332 	movw	r3, #562	; 0x232
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa25 	bl	8000554 <__aeabi_i2d>
 800110a:	a333      	add	r3, pc, #204	; (adr r3, 80011d8 <isr_fall+0x258>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa8a 	bl	8000628 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff fcf6 	bl	8000b0c <__aeabi_dcmplt>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d064      	beq.n	80011f0 <isr_fall+0x270>
 8001126:	f240 2332 	movw	r3, #562	; 0x232
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa11 	bl	8000554 <__aeabi_i2d>
 8001132:	a327      	add	r3, pc, #156	; (adr r3, 80011d0 <isr_fall+0x250>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fa76 	bl	8000628 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f7ff fa05 	bl	8000554 <__aeabi_i2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fcdb 	bl	8000b0c <__aeabi_dcmplt>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d049      	beq.n	80011f0 <isr_fall+0x270>
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7ff f9f9 	bl	8000554 <__aeabi_i2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f240 2332 	movw	r3, #562	; 0x232
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f1 	bl	8000554 <__aeabi_i2d>
 8001172:	a319      	add	r3, pc, #100	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa56 	bl	8000628 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff fcc2 	bl	8000b0c <__aeabi_dcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d030      	beq.n	80011f0 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <isr_fall+0x26c>)
 8001190:	2202      	movs	r2, #2
 8001192:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <isr_fall+0x260>)
 8001196:	2202      	movs	r2, #2
 8001198:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <isr_fall+0x26c>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <isr_fall+0x260>)
 80011a2:	f04f 32ff 	mov.w	r2, #4294967295
 80011a6:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <isr_fall+0x260>)
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <isr_fall+0x260>)
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <isr_fall+0x260>)
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <isr_fall+0x260>)
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	e10d      	b.n	80013e6 <isr_fall+0x466>
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	66666666 	.word	0x66666666
 80011d4:	3fe66666 	.word	0x3fe66666
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	3ff4cccc 	.word	0x3ff4cccc
 80011e0:	200000dc 	.word	0x200000dc
 80011e4:	200003fc 	.word	0x200003fc
 80011e8:	20000114 	.word	0x20000114
 80011ec:	20000094 	.word	0x20000094
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 80011f0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ac 	bl	8000554 <__aeabi_i2d>
 80011fc:	a3de      	add	r3, pc, #888	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa11 	bl	8000628 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f9a0 	bl	8000554 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff fc76 	bl	8000b0c <__aeabi_dcmplt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d056      	beq.n	80012d4 <isr_fall+0x354>
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f994 	bl	8000554 <__aeabi_i2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f98c 	bl	8000554 <__aeabi_i2d>
 800123c:	a3d0      	add	r3, pc, #832	; (adr r3, 8001580 <isr_fall+0x600>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9f1 	bl	8000628 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff fc5d 	bl	8000b0c <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d03d      	beq.n	80012d4 <isr_fall+0x354>
 8001258:	f240 13a9 	movw	r3, #425	; 0x1a9
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f978 	bl	8000554 <__aeabi_i2d>
 8001264:	a3c4      	add	r3, pc, #784	; (adr r3, 8001578 <isr_fall+0x5f8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9dd 	bl	8000628 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4614      	mov	r4, r2
 8001274:	461d      	mov	r5, r3
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff f96c 	bl	8000554 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff fc42 	bl	8000b0c <__aeabi_dcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d022      	beq.n	80012d4 <isr_fall+0x354>
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f7ff f960 	bl	8000554 <__aeabi_i2d>
 8001294:	4604      	mov	r4, r0
 8001296:	460d      	mov	r5, r1
 8001298:	f240 13a9 	movw	r3, #425	; 0x1a9
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f958 	bl	8000554 <__aeabi_i2d>
 80012a4:	a3b6      	add	r3, pc, #728	; (adr r3, 8001580 <isr_fall+0x600>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4620      	mov	r0, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	f7ff fc29 	bl	8000b0c <__aeabi_dcmplt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d009      	beq.n	80012d4 <isr_fall+0x354>
                    data.format = AEHA;
 80012c0:	4bb1      	ldr	r3, [pc, #708]	; (8001588 <isr_fall+0x608>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80012c6:	4bb1      	ldr	r3, [pc, #708]	; (800158c <isr_fall+0x60c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80012cc:	4bae      	ldr	r3, [pc, #696]	; (8001588 <isr_fall+0x608>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e088      	b.n	80013e6 <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 80012d4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93a 	bl	8000554 <__aeabi_i2d>
 80012e0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f99f 	bl	8000628 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f92e 	bl	8000554 <__aeabi_i2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7ff fc04 	bl	8000b0c <__aeabi_dcmplt>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d06a      	beq.n	80013e0 <isr_fall+0x460>
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff f922 	bl	8000554 <__aeabi_i2d>
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
 8001314:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f91a 	bl	8000554 <__aeabi_i2d>
 8001320:	a397      	add	r3, pc, #604	; (adr r3, 8001580 <isr_fall+0x600>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f97f 	bl	8000628 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d051      	beq.n	80013e0 <isr_fall+0x460>
 800133c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f906 	bl	8000554 <__aeabi_i2d>
 8001348:	a38b      	add	r3, pc, #556	; (adr r3, 8001578 <isr_fall+0x5f8>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f96b 	bl	8000628 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f7ff f8fa 	bl	8000554 <__aeabi_i2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7ff fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d036      	beq.n	80013e0 <isr_fall+0x460>
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7ff f8ee 	bl	8000554 <__aeabi_i2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8e6 	bl	8000554 <__aeabi_i2d>
 8001388:	a37d      	add	r3, pc, #500	; (adr r3, 8001580 <isr_fall+0x600>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f94b 	bl	8000628 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff fbb7 	bl	8000b0c <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01d      	beq.n	80013e0 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 80013a4:	4b78      	ldr	r3, [pc, #480]	; (8001588 <isr_fall+0x608>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <isr_fall+0x60c>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80013b0:	4b75      	ldr	r3, [pc, #468]	; (8001588 <isr_fall+0x608>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <isr_fall+0x60c>)
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <isr_fall+0x60c>)
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <isr_fall+0x60c>)
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <isr_fall+0x60c>)
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <isr_fall+0x60c>)
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	e002      	b.n	80013e6 <isr_fall+0x466>
                    init_state();
 80013e0:	f7ff fd8c 	bl	8000efc <init_state>
            break;
 80013e4:	e1a6      	b.n	8001734 <isr_fall+0x7b4>
 80013e6:	e1a5      	b.n	8001734 <isr_fall+0x7b4>
            if (NEC == data.format) {
 80013e8:	4b67      	ldr	r3, [pc, #412]	; (8001588 <isr_fall+0x608>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 80d3 	bne.w	8001598 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <isr_fall+0x610>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a65      	ldr	r2, [pc, #404]	; (800158c <isr_fall+0x60c>)
 80013f8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <isr_fall+0x60c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <isr_fall+0x60c>)
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 8001406:	f240 2232 	movw	r2, #562	; 0x232
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f89f 	bl	8000554 <__aeabi_i2d>
 8001416:	a358      	add	r3, pc, #352	; (adr r3, 8001578 <isr_fall+0x5f8>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	461d      	mov	r5, r3
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff f893 	bl	8000554 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff fb69 	bl	8000b0c <__aeabi_dcmplt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03a      	beq.n	80014b6 <isr_fall+0x536>
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f887 	bl	8000554 <__aeabi_i2d>
 8001446:	4604      	mov	r4, r0
 8001448:	460d      	mov	r5, r1
 800144a:	f240 2232 	movw	r2, #562	; 0x232
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f87d 	bl	8000554 <__aeabi_i2d>
 800145a:	a349      	add	r3, pc, #292	; (adr r3, 8001580 <isr_fall+0x600>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8e2 	bl	8000628 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7ff fb4e 	bl	8000b0c <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01f      	beq.n	80014b6 <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <isr_fall+0x608>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	da00      	bge.n	8001480 <isr_fall+0x500>
 800147e:	3307      	adds	r3, #7
 8001480:	10db      	asrs	r3, r3, #3
 8001482:	461a      	mov	r2, r3
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <isr_fall+0x608>)
 8001486:	4413      	add	r3, r2
 8001488:	7a1b      	ldrb	r3, [r3, #8]
 800148a:	b259      	sxtb	r1, r3
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <isr_fall+0x608>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4258      	negs	r0, r3
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	f000 0007 	and.w	r0, r0, #7
 800149a:	bf58      	it	pl
 800149c:	4243      	negpl	r3, r0
 800149e:	2001      	movs	r0, #1
 80014a0:	fa00 f303 	lsl.w	r3, r0, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	430b      	orrs	r3, r1
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <isr_fall+0x608>)
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	721a      	strb	r2, [r3, #8]
 80014b4:	e052      	b.n	800155c <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 80014b6:	f240 2332 	movw	r3, #562	; 0x232
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84a 	bl	8000554 <__aeabi_i2d>
 80014c0:	a32d      	add	r3, pc, #180	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8af 	bl	8000628 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4614      	mov	r4, r2
 80014d0:	461d      	mov	r5, r3
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff f83e 	bl	8000554 <__aeabi_i2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff fb14 	bl	8000b0c <__aeabi_dcmplt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d038      	beq.n	800155c <isr_fall+0x5dc>
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f7ff f832 	bl	8000554 <__aeabi_i2d>
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	f240 2332 	movw	r3, #562	; 0x232
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f82b 	bl	8000554 <__aeabi_i2d>
 80014fe:	a320      	add	r3, pc, #128	; (adr r3, 8001580 <isr_fall+0x600>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f890 	bl	8000628 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7ff fafc 	bl	8000b0c <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d020      	beq.n	800155c <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <isr_fall+0x608>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da00      	bge.n	8001524 <isr_fall+0x5a4>
 8001522:	3307      	adds	r3, #7
 8001524:	10db      	asrs	r3, r3, #3
 8001526:	461a      	mov	r2, r3
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <isr_fall+0x608>)
 800152a:	4413      	add	r3, r2
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	b259      	sxtb	r1, r3
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <isr_fall+0x608>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4258      	negs	r0, r3
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	f000 0007 	and.w	r0, r0, #7
 800153e:	bf58      	it	pl
 8001540:	4243      	negpl	r3, r0
 8001542:	2001      	movs	r0, #1
 8001544:	fa00 f303 	lsl.w	r3, r0, r3
 8001548:	b25b      	sxtb	r3, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	400b      	ands	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <isr_fall+0x608>)
 8001556:	4413      	add	r3, r2
 8001558:	460a      	mov	r2, r1
 800155a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <isr_fall+0x608>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <isr_fall+0x608>)
 8001564:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <isr_fall+0x608>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b1e      	cmp	r3, #30
 800156c:	f340 80e1 	ble.w	8001732 <isr_fall+0x7b2>
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <isr_fall+0x614>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
            break;
 8001576:	e0dc      	b.n	8001732 <isr_fall+0x7b2>
 8001578:	66666666 	.word	0x66666666
 800157c:	3fe66666 	.word	0x3fe66666
 8001580:	cccccccd 	.word	0xcccccccd
 8001584:	3ff4cccc 	.word	0x3ff4cccc
 8001588:	20000094 	.word	0x20000094
 800158c:	200000dc 	.word	0x200000dc
 8001590:	20000114 	.word	0x20000114
 8001594:	20000119 	.word	0x20000119
            } else if (AEHA == data.format) {
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <isr_fall+0x7d0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b03      	cmp	r3, #3
 800159e:	f040 80bb 	bne.w	8001718 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80015a2:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <isr_fall+0x7d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <isr_fall+0x7d8>)
 80015a8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <isr_fall+0x7d8>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <isr_fall+0x7d8>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 80015b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc7 	bl	8000554 <__aeabi_i2d>
 80015c6:	a35e      	add	r3, pc, #376	; (adr r3, 8001740 <isr_fall+0x7c0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f82c 	bl	8000628 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4614      	mov	r4, r2
 80015d6:	461d      	mov	r5, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7fe ffbb 	bl	8000554 <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7ff fa91 	bl	8000b0c <__aeabi_dcmplt>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03a      	beq.n	8001666 <isr_fall+0x6e6>
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7fe ffaf 	bl	8000554 <__aeabi_i2d>
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffa5 	bl	8000554 <__aeabi_i2d>
 800160a:	a34f      	add	r3, pc, #316	; (adr r3, 8001748 <isr_fall+0x7c8>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f80a 	bl	8000628 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7ff fa76 	bl	8000b0c <__aeabi_dcmplt>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01f      	beq.n	8001666 <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <isr_fall+0x7d0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da00      	bge.n	8001630 <isr_fall+0x6b0>
 800162e:	3307      	adds	r3, #7
 8001630:	10db      	asrs	r3, r3, #3
 8001632:	461a      	mov	r2, r3
 8001634:	4b46      	ldr	r3, [pc, #280]	; (8001750 <isr_fall+0x7d0>)
 8001636:	4413      	add	r3, r2
 8001638:	7a1b      	ldrb	r3, [r3, #8]
 800163a:	b259      	sxtb	r1, r3
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <isr_fall+0x7d0>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4258      	negs	r0, r3
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	f000 0007 	and.w	r0, r0, #7
 800164a:	bf58      	it	pl
 800164c:	4243      	negpl	r3, r0
 800164e:	2001      	movs	r0, #1
 8001650:	fa00 f303 	lsl.w	r3, r0, r3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	430b      	orrs	r3, r1
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2d9      	uxtb	r1, r3
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <isr_fall+0x7d0>)
 800165e:	4413      	add	r3, r2
 8001660:	460a      	mov	r2, r1
 8001662:	721a      	strb	r2, [r3, #8]
 8001664:	e052      	b.n	800170c <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 8001666:	f240 13a9 	movw	r3, #425	; 0x1a9
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff72 	bl	8000554 <__aeabi_i2d>
 8001670:	a333      	add	r3, pc, #204	; (adr r3, 8001740 <isr_fall+0x7c0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffd7 	bl	8000628 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7fe ff66 	bl	8000554 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7ff fa3c 	bl	8000b0c <__aeabi_dcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d038      	beq.n	800170c <isr_fall+0x78c>
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7fe ff5a 	bl	8000554 <__aeabi_i2d>
 80016a0:	4604      	mov	r4, r0
 80016a2:	460d      	mov	r5, r1
 80016a4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff53 	bl	8000554 <__aeabi_i2d>
 80016ae:	a326      	add	r3, pc, #152	; (adr r3, 8001748 <isr_fall+0x7c8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffb8 	bl	8000628 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7ff fa24 	bl	8000b0c <__aeabi_dcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d020      	beq.n	800170c <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <isr_fall+0x7d0>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da00      	bge.n	80016d4 <isr_fall+0x754>
 80016d2:	3307      	adds	r3, #7
 80016d4:	10db      	asrs	r3, r3, #3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <isr_fall+0x7d0>)
 80016da:	4413      	add	r3, r2
 80016dc:	7a1b      	ldrb	r3, [r3, #8]
 80016de:	b259      	sxtb	r1, r3
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <isr_fall+0x7d0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4258      	negs	r0, r3
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	f000 0007 	and.w	r0, r0, #7
 80016ee:	bf58      	it	pl
 80016f0:	4243      	negpl	r3, r0
 80016f2:	2001      	movs	r0, #1
 80016f4:	fa00 f303 	lsl.w	r3, r0, r3
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	400b      	ands	r3, r1
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <isr_fall+0x7d0>)
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <isr_fall+0x7d0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <isr_fall+0x7d0>)
 8001714:	6053      	str	r3, [r2, #4]
            break;
 8001716:	e00c      	b.n	8001732 <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <isr_fall+0x7d0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d108      	bne.n	8001732 <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <isr_fall+0x7d4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <isr_fall+0x7d8>)
 8001726:	6113      	str	r3, [r2, #16]
            break;
 8001728:	e003      	b.n	8001732 <isr_fall+0x7b2>
            break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <isr_fall+0x7b4>
            break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <isr_fall+0x7b4>
            break;
 8001732:	bf00      	nop
    }
    UNLOCK();
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bdb0      	pop	{r4, r5, r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	66666666 	.word	0x66666666
 8001744:	3fe66666 	.word	0x3fe66666
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	3ff4cccc 	.word	0x3ff4cccc
 8001750:	20000094 	.word	0x20000094
 8001754:	20000114 	.word	0x20000114
 8001758:	200000dc 	.word	0x200000dc
 800175c:	00000000 	.word	0x00000000

08001760 <isr_rise>:

void isr_rise(void) {
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001766:	4ba4      	ldr	r3, [pc, #656]	; (80019f8 <isr_rise+0x298>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b02      	cmp	r3, #2
 800176c:	f000 812e 	beq.w	80019cc <isr_rise+0x26c>
 8001770:	2b02      	cmp	r3, #2
 8001772:	f300 812d 	bgt.w	80019d0 <isr_rise+0x270>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <isr_rise+0x20>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d058      	beq.n	8001830 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 800177e:	e127      	b.n	80019d0 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001780:	4b9d      	ldr	r3, [pc, #628]	; (80019f8 <isr_rise+0x298>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db50      	blt.n	800182a <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001788:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <isr_rise+0x29c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a9a      	ldr	r2, [pc, #616]	; (80019f8 <isr_rise+0x298>)
 800178e:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <isr_rise+0x298>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b98      	ldr	r3, [pc, #608]	; (80019f8 <isr_rise+0x298>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 800179c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed6 	bl	8000554 <__aeabi_i2d>
 80017a8:	a38f      	add	r3, pc, #572	; (adr r3, 80019e8 <isr_rise+0x288>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff3b 	bl	8000628 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	461d      	mov	r5, r3
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f7fe feca 	bl	8000554 <__aeabi_i2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7ff f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d022      	beq.n	8001818 <isr_rise+0xb8>
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f7fe febe 	bl	8000554 <__aeabi_i2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe feb6 	bl	8000554 <__aeabi_i2d>
 80017e8:	a381      	add	r3, pc, #516	; (adr r3, 80019f0 <isr_rise+0x290>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff1b 	bl	8000628 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7ff f987 	bl	8000b0c <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <isr_rise+0xb8>
                    data.format = SONY;
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <isr_rise+0x2a0>)
 8001806:	2205      	movs	r2, #5
 8001808:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <isr_rise+0x298>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <isr_rise+0x2a0>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
            break;
 8001816:	e0dd      	b.n	80019d4 <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <isr_rise+0x2a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	f280 80d8 	bge.w	80019d4 <isr_rise+0x274>
                        init_state();
 8001824:	f7ff fb6a 	bl	8000efc <init_state>
            break;
 8001828:	e0d4      	b.n	80019d4 <isr_rise+0x274>
                init_state();
 800182a:	f7ff fb67 	bl	8000efc <init_state>
            break;
 800182e:	e0d1      	b.n	80019d4 <isr_rise+0x274>
            if (NEC == data.format) {
 8001830:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <isr_rise+0x2a0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d104      	bne.n	8001842 <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <isr_rise+0x29c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <isr_rise+0x298>)
 800183e:	6113      	str	r3, [r2, #16]
            break;
 8001840:	e0ca      	b.n	80019d8 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <isr_rise+0x2a0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d104      	bne.n	8001854 <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 800184a:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <isr_rise+0x29c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <isr_rise+0x298>)
 8001850:	6113      	str	r3, [r2, #16]
            break;
 8001852:	e0c1      	b.n	80019d8 <isr_rise+0x278>
            } else if (SONY == data.format) {
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <isr_rise+0x2a0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b05      	cmp	r3, #5
 800185a:	f040 80bd 	bne.w	80019d8 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <isr_rise+0x29c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <isr_rise+0x298>)
 8001864:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <isr_rise+0x298>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <isr_rise+0x298>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 8001872:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe6b 	bl	8000554 <__aeabi_i2d>
 800187e:	a35a      	add	r3, pc, #360	; (adr r3, 80019e8 <isr_rise+0x288>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed0 	bl	8000628 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fe5f 	bl	8000554 <__aeabi_i2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7ff f935 	bl	8000b0c <__aeabi_dcmplt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d038      	beq.n	800191a <isr_rise+0x1ba>
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7fe fe53 	bl	8000554 <__aeabi_i2d>
 80018ae:	4604      	mov	r4, r0
 80018b0:	460d      	mov	r5, r1
 80018b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	a34c      	add	r3, pc, #304	; (adr r3, 80019f0 <isr_rise+0x290>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe feb0 	bl	8000628 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff f91c 	bl	8000b0c <__aeabi_dcmplt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01f      	beq.n	800191a <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <isr_rise+0x2a0>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da00      	bge.n	80018e4 <isr_rise+0x184>
 80018e2:	3307      	adds	r3, #7
 80018e4:	10db      	asrs	r3, r3, #3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <isr_rise+0x2a0>)
 80018ea:	4413      	add	r3, r2
 80018ec:	7a1b      	ldrb	r3, [r3, #8]
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <isr_rise+0x2a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4258      	negs	r0, r3
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	f000 0007 	and.w	r0, r0, #7
 80018fe:	bf58      	it	pl
 8001900:	4243      	negpl	r3, r0
 8001902:	2001      	movs	r0, #1
 8001904:	fa00 f303 	lsl.w	r3, r0, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	430b      	orrs	r3, r1
 800190c:	b25b      	sxtb	r3, r3
 800190e:	b2d9      	uxtb	r1, r3
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <isr_rise+0x2a0>)
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	721a      	strb	r2, [r3, #8]
 8001918:	e052      	b.n	80019c0 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 800191a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe18 	bl	8000554 <__aeabi_i2d>
 8001924:	a330      	add	r3, pc, #192	; (adr r3, 80019e8 <isr_rise+0x288>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe fe0c 	bl	8000554 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7ff f8e2 	bl	8000b0c <__aeabi_dcmplt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d038      	beq.n	80019c0 <isr_rise+0x260>
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fe00 	bl	8000554 <__aeabi_i2d>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
 8001958:	f44f 7316 	mov.w	r3, #600	; 0x258
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdf9 	bl	8000554 <__aeabi_i2d>
 8001962:	a323      	add	r3, pc, #140	; (adr r3, 80019f0 <isr_rise+0x290>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe5e 	bl	8000628 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7ff f8ca 	bl	8000b0c <__aeabi_dcmplt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d020      	beq.n	80019c0 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <isr_rise+0x2a0>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da00      	bge.n	8001988 <isr_rise+0x228>
 8001986:	3307      	adds	r3, #7
 8001988:	10db      	asrs	r3, r3, #3
 800198a:	461a      	mov	r2, r3
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <isr_rise+0x2a0>)
 800198e:	4413      	add	r3, r2
 8001990:	7a1b      	ldrb	r3, [r3, #8]
 8001992:	b259      	sxtb	r1, r3
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <isr_rise+0x2a0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4258      	negs	r0, r3
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	f000 0007 	and.w	r0, r0, #7
 80019a2:	bf58      	it	pl
 80019a4:	4243      	negpl	r3, r0
 80019a6:	2001      	movs	r0, #1
 80019a8:	fa00 f303 	lsl.w	r3, r0, r3
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	400b      	ands	r3, r1
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <isr_rise+0x2a0>)
 80019ba:	4413      	add	r3, r2
 80019bc:	460a      	mov	r2, r1
 80019be:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <isr_rise+0x2a0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <isr_rise+0x2a0>)
 80019c8:	6053      	str	r3, [r2, #4]
            break;
 80019ca:	e005      	b.n	80019d8 <isr_rise+0x278>
            break;
 80019cc:	bf00      	nop
 80019ce:	e004      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d0:	bf00      	nop
 80019d2:	e002      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d4:	bf00      	nop
 80019d6:	e000      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d8:	bf00      	nop
    }
    UNLOCK();
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	66666666 	.word	0x66666666
 80019ec:	3fe66666 	.word	0x3fe66666
 80019f0:	cccccccd 	.word	0xcccccccd
 80019f4:	3ff4cccc 	.word	0x3ff4cccc
 80019f8:	200000dc 	.word	0x200000dc
 80019fc:	20000114 	.word	0x20000114
 8001a00:	20000094 	.word	0x20000094
 8001a04:	0800b604 	.word	0x0800b604

08001a08 <isr_timeout>:

void isr_timeout(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <isr_timeout+0x50>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11f      	bne.n	8001a54 <isr_timeout+0x4c>
        work.state = Received;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <isr_timeout+0x50>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
 8001a1a:	2028      	movs	r0, #40	; 0x28
 8001a1c:	f004 ffe5 	bl	80069ea <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <isr_timeout+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <isr_timeout+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <isr_timeout+0x50>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <isr_timeout+0x50>)
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <isr_timeout+0x50>)
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <isr_timeout+0x50>)
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <isr_timeout+0x50>)
 8001a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a52:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200000dc 	.word	0x200000dc
 8001a5c:	20000119 	.word	0x20000119
 8001a60:	20000118 	.word	0x20000118

08001a64 <HAL_TIM_PeriodElapsedCallback>:

uint8_t inhome=0;
int ir_count_idle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)//uss timer, 100khz
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d104      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a7e:	6013      	str	r3, [r2, #0]
//	  if(us_Tick>0xffff0000){us_Tick=0;}

  }

  if(htim->Instance == TIM6)//system timer, 100hz
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d127      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x76>
  {
	  gTick++;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a34      	ldr	r2, [pc, #208]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a92:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1aca      	subs	r2, r1, r3
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d104      	bne.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ab6:	6013      	str	r3, [r2, #0]
	  if((gTick%50) == 0){Tick_500ms++;}
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001abe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	2132      	movs	r1, #50	; 0x32
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x76>
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ad8:	6013      	str	r3, [r2, #0]

  }

  if(htim->Instance == TIM7)//uss timer, 1khz
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10c      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
	  USS_tick++;
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001aec:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001af6:	d902      	bls.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)//uss timer, 1779hz
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d118      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0xd6>
  {
	  if(TIR_setData_flag){tick();}
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001b10:	f000 ff72 	bl	80029f8 <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b26:	701a      	strb	r2, [r3, #0]

	  if(isr_timeout_counter>1)//횟수 수정할 것
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d904      	bls.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0xd6>
	  {
		  isr_timeout_counter = 0;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 8001b36:	f7ff ff67 	bl	8001a08 <isr_timeout>
	  }
  }

  if(htim->Instance == TIM14)//IR NEC timer, 1Mhz
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xea>
  {
	  IR_NEC_Tick+=4;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b4c:	6013      	str	r3, [r2, #0]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	200000f4 	.word	0x200000f4
 8001b60:	40001000 	.word	0x40001000
 8001b64:	200000f8 	.word	0x200000f8
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	20000100 	.word	0x20000100
 8001b70:	51eb851f 	.word	0x51eb851f
 8001b74:	20000104 	.word	0x20000104
 8001b78:	40001400 	.word	0x40001400
 8001b7c:	20000584 	.word	0x20000584
 8001b80:	40014000 	.word	0x40014000
 8001b84:	20000110 	.word	0x20000110
 8001b88:	20000119 	.word	0x20000119
 8001b8c:	20000118 	.word	0x20000118
 8001b90:	40002000 	.word	0x40002000
 8001b94:	20000114 	.word	0x20000114

08001b98 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d107      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x20>
    	USS_end[0] = us_Tick;
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bb0:	601a      	str	r2, [r3, #0]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bb2:	482e      	ldr	r0, [pc, #184]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bb4:	f006 fbb0 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data2_Pin) {
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bbe:	d107      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x38>
    	USS_end[1] = us_Tick;
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b28      	ldr	r3, [pc, #160]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bc8:	605a      	str	r2, [r3, #4]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bca:	4828      	ldr	r0, [pc, #160]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bcc:	f006 fba4 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data3_Pin) {
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd6:	d107      	bne.n	8001be8 <HAL_GPIO_EXTI_Callback+0x50>
    	USS_end[2] = us_Tick;
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001be0:	609a      	str	r2, [r3, #8]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001be2:	4822      	ldr	r0, [pc, #136]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001be4:	f006 fb98 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data4_Pin) {
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d107      	bne.n	8001bfe <HAL_GPIO_EXTI_Callback+0x66>
    	USS_end[3] = us_Tick;
 8001bee:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b1c      	ldr	r3, [pc, #112]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001bf6:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bf8:	481c      	ldr	r0, [pc, #112]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001bfa:	f006 fb8d 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data5_Pin) {
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	d107      	bne.n	8001c14 <HAL_GPIO_EXTI_Callback+0x7c>
    	USS_end[4] = us_Tick;
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001c0c:	611a      	str	r2, [r3, #16]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001c0e:	4817      	ldr	r0, [pc, #92]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c10:	f006 fb82 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data6_Pin) {
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c1a:	d107      	bne.n	8001c2c <HAL_GPIO_EXTI_Callback+0x94>
    	USS_end[5] = us_Tick;
 8001c1c:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_GPIO_EXTI_Callback+0xcc>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b11      	ldr	r3, [pc, #68]	; (8001c68 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001c24:	615a      	str	r2, [r3, #20]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001c26:	4811      	ldr	r0, [pc, #68]	; (8001c6c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001c28:	f006 fb76 	bl	8008318 <HAL_TIM_Base_Stop_IT>
    }



    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001c2c:	88fb      	ldrh	r3, [r7, #6]
 8001c2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c32:	d113      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0xc4>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){	isr_rise(); }//high edge
 8001c34:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c38:	480d      	ldr	r0, [pc, #52]	; (8001c70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c3a:	f005 f92f 	bl	8006e9c <HAL_GPIO_ReadPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <HAL_GPIO_EXTI_Callback+0xb0>
 8001c44:	f7ff fd8c 	bl	8001760 <isr_rise>
             if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ isr_fall();}//low edge
 8001c48:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c4c:	4808      	ldr	r0, [pc, #32]	; (8001c70 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001c4e:	f005 f925 	bl	8006e9c <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d101      	bne.n	8001c5c <HAL_GPIO_EXTI_Callback+0xc4>
 8001c58:	f7ff f992 	bl	8000f80 <isr_fall>
        }
}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	200000f4 	.word	0x200000f4
 8001c68:	2000056c 	.word	0x2000056c
 8001c6c:	200002cc 	.word	0x200002cc
 8001c70:	40021000 	.word	0x40021000

08001c74 <parsePmm>:
//        can->reset();
    sendCan(5001, packit, 8, 1);
}

void parsePmm(uint8_t *msg)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	3307      	adds	r3, #7
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b12      	ldr	r3, [pc, #72]	; (8001cd0 <parsePmm+0x5c>)
 8001c86:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	3306      	adds	r3, #6
 8001c8c:	781a      	ldrb	r2, [r3, #0]
 8001c8e:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <parsePmm+0x60>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	09d2      	lsrs	r2, r2, #7
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3306      	adds	r3, #6
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	119b      	asrs	r3, r3, #6
 8001ca0:	b2da      	uxtb	r2, r3
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <parsePmm+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f002 0201 	and.w	r2, r2, #1
 8001caa:	b2d2      	uxtb	r2, r2
 8001cac:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	115b      	asrs	r3, r3, #5
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b06      	ldr	r3, [pc, #24]	; (8001cd4 <parsePmm+0x60>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f002 0201 	and.w	r2, r2, #1
 8001cc0:	b2d2      	uxtb	r2, r2
 8001cc2:	745a      	strb	r2, [r3, #17]
}
 8001cc4:	bf00      	nop
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	20000148 	.word	0x20000148
 8001cd4:	20000144 	.word	0x20000144

08001cd8 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	e012      	b.n	8001d0c <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	3307      	adds	r3, #7
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	461a      	mov	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	fa42 f303 	asr.w	r3, r2, r3
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	4a0a      	ldr	r2, [pc, #40]	; (8001d28 <parseTop+0x50>)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	4413      	add	r3, r2
 8001d02:	460a      	mov	r2, r1
 8001d04:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	dde9      	ble.n	8001ce6 <parseTop+0xe>
    touch = msg[6];
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	799a      	ldrb	r2, [r3, #6]
 8001d16:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <parseTop+0x54>)
 8001d18:	701a      	strb	r2, [r3, #0]
}
 8001d1a:	bf00      	nop
 8001d1c:	3714      	adds	r7, #20
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	2000013c 	.word	0x2000013c
 8001d2c:	20000139 	.word	0x20000139

08001d30 <parseState>:


void parseState(uint8_t *msg)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	3307      	adds	r3, #7
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <parseState+0x78>)
 8001d42:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	3305      	adds	r3, #5
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	09db      	lsrs	r3, r3, #7
 8001d4c:	b2da      	uxtb	r2, r3
 8001d4e:	4b17      	ldr	r3, [pc, #92]	; (8001dac <parseState+0x7c>)
 8001d50:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	3305      	adds	r3, #5
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	119b      	asrs	r3, r3, #6
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 0301 	and.w	r3, r3, #1
 8001d60:	b2da      	uxtb	r2, r3
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <parseState+0x80>)
 8001d64:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	09db      	lsrs	r3, r3, #7
 8001d6e:	b2da      	uxtb	r2, r3
 8001d70:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <parseState+0x84>)
 8001d72:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	3304      	adds	r3, #4
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	119b      	asrs	r3, r3, #6
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	b2da      	uxtb	r2, r3
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <parseState+0x88>)
 8001d86:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	115b      	asrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <parseState+0x8c>)
 8001d9a:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	20000130 	.word	0x20000130
 8001dac:	20000134 	.word	0x20000134
 8001db0:	20000135 	.word	0x20000135
 8001db4:	20000136 	.word	0x20000136
 8001db8:	20000137 	.word	0x20000137
 8001dbc:	20000138 	.word	0x20000138

08001dc0 <controlMotor>:

void controlMotor()
{
 8001dc0:	b598      	push	{r3, r4, r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 8001dc4:	4b35      	ldr	r3, [pc, #212]	; (8001e9c <controlMotor+0xdc>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d060      	beq.n	8001e8e <controlMotor+0xce>
    {
        if(motor_disable_flag)
 8001dcc:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <controlMotor+0xe0>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d004      	beq.n	8001dde <controlMotor+0x1e>
        {
            enable();
 8001dd4:	f002 f982 	bl	80040dc <enable>
            motor_disable_flag = 0;
 8001dd8:	4b31      	ldr	r3, [pc, #196]	; (8001ea0 <controlMotor+0xe0>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <controlMotor+0xe4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d11e      	bne.n	8001e24 <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001de6:	4b30      	ldr	r3, [pc, #192]	; (8001ea8 <controlMotor+0xe8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe feb3 	bl	8000b5c <__aeabi_d2iz>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b21c      	sxth	r4, r3
 8001dfa:	4b2b      	ldr	r3, [pc, #172]	; (8001ea8 <controlMotor+0xe8>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fea9 	bl	8000b5c <__aeabi_d2iz>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4620      	mov	r0, r4
 8001e12:	f002 fb03 	bl	800441c <control>
            motor_break = 2;
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <controlMotor+0xe4>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
            count = 0;
 8001e1c:	4b23      	ldr	r3, [pc, #140]	; (8001eac <controlMotor+0xec>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 8001e22:	e039      	b.n	8001e98 <controlMotor+0xd8>
        else if(motor_break == 2)
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <controlMotor+0xe4>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d124      	bne.n	8001e76 <controlMotor+0xb6>
            count++;
 8001e2c:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <controlMotor+0xec>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3301      	adds	r3, #1
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <controlMotor+0xec>)
 8001e34:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001e36:	4b1c      	ldr	r3, [pc, #112]	; (8001ea8 <controlMotor+0xe8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e3e:	4610      	mov	r0, r2
 8001e40:	4619      	mov	r1, r3
 8001e42:	f7fe fe8b 	bl	8000b5c <__aeabi_d2iz>
 8001e46:	4603      	mov	r3, r0
 8001e48:	b21c      	sxth	r4, r3
 8001e4a:	4b17      	ldr	r3, [pc, #92]	; (8001ea8 <controlMotor+0xe8>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fe81 	bl	8000b5c <__aeabi_d2iz>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	4619      	mov	r1, r3
 8001e60:	4620      	mov	r0, r4
 8001e62:	f002 fadb 	bl	800441c <control>
            if(count == 20)
 8001e66:	4b11      	ldr	r3, [pc, #68]	; (8001eac <controlMotor+0xec>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2b14      	cmp	r3, #20
 8001e6c:	d114      	bne.n	8001e98 <controlMotor+0xd8>
                motor_break = 3;
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <controlMotor+0xe4>)
 8001e70:	2203      	movs	r2, #3
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	e010      	b.n	8001e98 <controlMotor+0xd8>
        else if(motor_break == 3)
 8001e76:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <controlMotor+0xe4>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d10c      	bne.n	8001e98 <controlMotor+0xd8>
            control(0,0);
 8001e7e:	2100      	movs	r1, #0
 8001e80:	2000      	movs	r0, #0
 8001e82:	f002 facb 	bl	800441c <control>
            count = 0;
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <controlMotor+0xec>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	601a      	str	r2, [r3, #0]
}
 8001e8c:	e004      	b.n	8001e98 <controlMotor+0xd8>
        disable();
 8001e8e:	f002 f989 	bl	80041a4 <disable>
        motor_disable_flag = 1;
 8001e92:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <controlMotor+0xe0>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	601a      	str	r2, [r3, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	bd98      	pop	{r3, r4, r7, pc}
 8001e9c:	20000000 	.word	0x20000000
 8001ea0:	2000012c 	.word	0x2000012c
 8001ea4:	20000128 	.word	0x20000128
 8001ea8:	20000154 	.word	0x20000154
 8001eac:	20000160 	.word	0x20000160

08001eb0 <toRPM>:


int toRPM()
{
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001eb4:	4b28      	ldr	r3, [pc, #160]	; (8001f58 <toRPM+0xa8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001ebc:	4b26      	ldr	r3, [pc, #152]	; (8001f58 <toRPM+0xa8>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ec4:	a320      	add	r3, pc, #128	; (adr r3, 8001f48 <toRPM+0x98>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fbad 	bl	8000628 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4620      	mov	r0, r4
 8001ed4:	4629      	mov	r1, r5
 8001ed6:	f7fe f9f1 	bl	80002bc <__adddf3>
 8001eda:	4602      	mov	r2, r0
 8001edc:	460b      	mov	r3, r1
 8001ede:	4610      	mov	r0, r2
 8001ee0:	4619      	mov	r1, r3
 8001ee2:	4b1d      	ldr	r3, [pc, #116]	; (8001f58 <toRPM+0xa8>)
 8001ee4:	681c      	ldr	r4, [r3, #0]
 8001ee6:	a31a      	add	r3, pc, #104	; (adr r3, 8001f50 <toRPM+0xa0>)
 8001ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eec:	f7fe fb9c 	bl	8000628 <__aeabi_dmul>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	460b      	mov	r3, r1
 8001ef4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <toRPM+0xa8>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f00:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <toRPM+0xa8>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f08:	a30f      	add	r3, pc, #60	; (adr r3, 8001f48 <toRPM+0x98>)
 8001f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f0e:	f7fe fb8b 	bl	8000628 <__aeabi_dmul>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	4620      	mov	r0, r4
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f7fe f9cd 	bl	80002b8 <__aeabi_dsub>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <toRPM+0xa8>)
 8001f28:	681c      	ldr	r4, [r3, #0]
 8001f2a:	a309      	add	r3, pc, #36	; (adr r3, 8001f50 <toRPM+0xa0>)
 8001f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f30:	f7fe fb7a 	bl	8000628 <__aeabi_dmul>
 8001f34:	4602      	mov	r2, r0
 8001f36:	460b      	mov	r3, r1
 8001f38:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 8001f3c:	2300      	movs	r3, #0
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	bdb0      	pop	{r4, r5, r7, pc}
 8001f42:	bf00      	nop
 8001f44:	f3af 8000 	nop.w
 8001f48:	0e560419 	.word	0x0e560419
 8001f4c:	3fcdb22d 	.word	0x3fcdb22d
 8001f50:	31bcaa49 	.word	0x31bcaa49
 8001f54:	40625d31 	.word	0x40625d31
 8001f58:	20000154 	.word	0x20000154

08001f5c <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	021b      	lsls	r3, r3, #8
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8001f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7fe fae9 	bl	8000554 <__aeabi_i2d>
 8001f82:	4b19      	ldr	r3, [pc, #100]	; (8001fe8 <parseCmdvel+0x8c>)
 8001f84:	681c      	ldr	r4, [r3, #0]
 8001f86:	f04f 0200 	mov.w	r2, #0
 8001f8a:	4b18      	ldr	r3, [pc, #96]	; (8001fec <parseCmdvel+0x90>)
 8001f8c:	f7fe fc76 	bl	800087c <__aeabi_ddiv>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3302      	adds	r3, #2
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	b21a      	sxth	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	3303      	adds	r3, #3
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 8001fae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7fe face 	bl	8000554 <__aeabi_i2d>
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <parseCmdvel+0x8c>)
 8001fba:	681c      	ldr	r4, [r3, #0]
 8001fbc:	f04f 0200 	mov.w	r2, #0
 8001fc0:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <parseCmdvel+0x90>)
 8001fc2:	f7fe fc5b 	bl	800087c <__aeabi_ddiv>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	791a      	ldrb	r2, [r3, #4]
 8001fd2:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <parseCmdvel+0x94>)
 8001fd4:	701a      	strb	r2, [r3, #0]
    toRPM();
 8001fd6:	f7ff ff6b 	bl	8001eb0 <toRPM>
    motor_break = 1;
 8001fda:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <parseCmdvel+0x98>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd90      	pop	{r4, r7, pc}
 8001fe8:	20000154 	.word	0x20000154
 8001fec:	40590000 	.word	0x40590000
 8001ff0:	20000000 	.word	0x20000000
 8001ff4:	20000128 	.word	0x20000128

08001ff8 <sendEnc>:



void sendEnc(int id)
{
 8001ff8:	b590      	push	{r4, r7, lr}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8002000:	2300      	movs	r3, #0
 8002002:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8002004:	4b5f      	ldr	r3, [pc, #380]	; (8002184 <sendEnc+0x18c>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <sendEnc+0x190>)
 8002012:	f7fe fb09 	bl	8000628 <__aeabi_dmul>
 8002016:	4602      	mov	r2, r0
 8002018:	460b      	mov	r3, r1
 800201a:	4610      	mov	r0, r2
 800201c:	4619      	mov	r1, r3
 800201e:	f7fe fd9d 	bl	8000b5c <__aeabi_d2iz>
 8002022:	4603      	mov	r3, r0
 8002024:	b219      	sxth	r1, r3
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	617a      	str	r2, [r7, #20]
 800202c:	b2ca      	uxtb	r2, r1
 800202e:	3318      	adds	r3, #24
 8002030:	443b      	add	r3, r7
 8002032:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8002036:	4b53      	ldr	r3, [pc, #332]	; (8002184 <sendEnc+0x18c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	4b51      	ldr	r3, [pc, #324]	; (8002188 <sendEnc+0x190>)
 8002044:	f7fe faf0 	bl	8000628 <__aeabi_dmul>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fd84 	bl	8000b5c <__aeabi_d2iz>
 8002054:	4603      	mov	r3, r0
 8002056:	b21b      	sxth	r3, r3
 8002058:	121b      	asrs	r3, r3, #8
 800205a:	b219      	sxth	r1, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	1c5a      	adds	r2, r3, #1
 8002060:	617a      	str	r2, [r7, #20]
 8002062:	b2ca      	uxtb	r2, r1
 8002064:	3318      	adds	r3, #24
 8002066:	443b      	add	r3, r7
 8002068:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <sendEnc+0x18c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b43      	ldr	r3, [pc, #268]	; (8002188 <sendEnc+0x190>)
 800207a:	f7fe fad5 	bl	8000628 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fd69 	bl	8000b5c <__aeabi_d2iz>
 800208a:	4603      	mov	r3, r0
 800208c:	b219      	sxth	r1, r3
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	617a      	str	r2, [r7, #20]
 8002094:	b2ca      	uxtb	r2, r1
 8002096:	3318      	adds	r3, #24
 8002098:	443b      	add	r3, r7
 800209a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <sendEnc+0x18c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	4b37      	ldr	r3, [pc, #220]	; (8002188 <sendEnc+0x190>)
 80020ac:	f7fe fabc 	bl	8000628 <__aeabi_dmul>
 80020b0:	4602      	mov	r2, r0
 80020b2:	460b      	mov	r3, r1
 80020b4:	4610      	mov	r0, r2
 80020b6:	4619      	mov	r1, r3
 80020b8:	f7fe fd50 	bl	8000b5c <__aeabi_d2iz>
 80020bc:	4603      	mov	r3, r0
 80020be:	b21b      	sxth	r3, r3
 80020c0:	121b      	asrs	r3, r3, #8
 80020c2:	b219      	sxth	r1, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	617a      	str	r2, [r7, #20]
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	3318      	adds	r3, #24
 80020ce:	443b      	add	r3, r7
 80020d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 80020d4:	4b2d      	ldr	r3, [pc, #180]	; (800218c <sendEnc+0x194>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	7c1b      	ldrb	r3, [r3, #16]
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	b25a      	sxtb	r2, r3
 80020de:	4b2b      	ldr	r3, [pc, #172]	; (800218c <sendEnc+0x194>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	7bdb      	ldrb	r3, [r3, #15]
 80020e4:	b25b      	sxtb	r3, r3
 80020e6:	4313      	orrs	r3, r2
 80020e8:	b259      	sxtb	r1, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	1c5a      	adds	r2, r3, #1
 80020ee:	617a      	str	r2, [r7, #20]
 80020f0:	b2ca      	uxtb	r2, r1
 80020f2:	3318      	adds	r3, #24
 80020f4:	443b      	add	r3, r7
 80020f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 80020fa:	4b22      	ldr	r3, [pc, #136]	; (8002184 <sendEnc+0x18c>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b20      	ldr	r3, [pc, #128]	; (8002188 <sendEnc+0x190>)
 8002108:	f7fe fa8e 	bl	8000628 <__aeabi_dmul>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4610      	mov	r0, r2
 8002112:	4619      	mov	r1, r3
 8002114:	697c      	ldr	r4, [r7, #20]
 8002116:	1c63      	adds	r3, r4, #1
 8002118:	617b      	str	r3, [r7, #20]
 800211a:	f7fe fd47 	bl	8000bac <__aeabi_d2uiz>
 800211e:	4603      	mov	r3, r0
 8002120:	b2da      	uxtb	r2, r3
 8002122:	f104 0318 	add.w	r3, r4, #24
 8002126:	443b      	add	r3, r7
 8002128:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 800212c:	4b15      	ldr	r3, [pc, #84]	; (8002184 <sendEnc+0x18c>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <sendEnc+0x190>)
 800213a:	f7fe fa75 	bl	8000628 <__aeabi_dmul>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	4610      	mov	r0, r2
 8002144:	4619      	mov	r1, r3
 8002146:	697c      	ldr	r4, [r7, #20]
 8002148:	1c63      	adds	r3, r4, #1
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f7fe fd2e 	bl	8000bac <__aeabi_d2uiz>
 8002150:	4603      	mov	r3, r0
 8002152:	b2da      	uxtb	r2, r3
 8002154:	f104 0318 	add.w	r3, r4, #24
 8002158:	443b      	add	r3, r7
 800215a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	1c5a      	adds	r2, r3, #1
 8002162:	617a      	str	r2, [r7, #20]
 8002164:	3318      	adds	r3, #24
 8002166:	443b      	add	r3, r7
 8002168:	2200      	movs	r2, #0
 800216a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f107 010c 	add.w	r1, r7, #12
 8002174:	2301      	movs	r3, #1
 8002176:	2208      	movs	r2, #8
 8002178:	f000 fee2 	bl	8002f40 <sendCan>
}
 800217c:	bf00      	nop
 800217e:	371c      	adds	r7, #28
 8002180:	46bd      	mov	sp, r7
 8002182:	bd90      	pop	{r4, r7, pc}
 8002184:	20000154 	.word	0x20000154
 8002188:	40590000 	.word	0x40590000
 800218c:	20000144 	.word	0x20000144

08002190 <toVW>:


int toVW(void)
{
 8002190:	b598      	push	{r3, r4, r7, lr}
 8002192:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 8002194:	4b2c      	ldr	r3, [pc, #176]	; (8002248 <toVW+0xb8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800219c:	4a2a      	ldr	r2, [pc, #168]	; (8002248 <toVW+0xb8>)
 800219e:	6814      	ldr	r4, [r2, #0]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe f9d7 	bl	8000554 <__aeabi_i2d>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 80021ae:	4b26      	ldr	r3, [pc, #152]	; (8002248 <toVW+0xb8>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80021b6:	4a24      	ldr	r2, [pc, #144]	; (8002248 <toVW+0xb8>)
 80021b8:	6814      	ldr	r4, [r2, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f7fe f9ca 	bl	8000554 <__aeabi_i2d>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 80021c8:	4b1f      	ldr	r3, [pc, #124]	; (8002248 <toVW+0xb8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80021d0:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <toVW+0xb8>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80021d8:	f7fe f870 	bl	80002bc <__adddf3>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	4610      	mov	r0, r2
 80021e2:	4619      	mov	r1, r3
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <toVW+0xb8>)
 80021e6:	681c      	ldr	r4, [r3, #0]
 80021e8:	a313      	add	r3, pc, #76	; (adr r3, 8002238 <toVW+0xa8>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe fa1b 	bl	8000628 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <toVW+0xb8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <toVW+0xb8>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800220a:	f7fe f855 	bl	80002b8 <__aeabi_dsub>
 800220e:	4602      	mov	r2, r0
 8002210:	460b      	mov	r3, r1
 8002212:	4610      	mov	r0, r2
 8002214:	4619      	mov	r1, r3
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <toVW+0xb8>)
 8002218:	681c      	ldr	r4, [r3, #0]
 800221a:	a309      	add	r3, pc, #36	; (adr r3, 8002240 <toVW+0xb0>)
 800221c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002220:	f7fe fa02 	bl	8000628 <__aeabi_dmul>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	bd98      	pop	{r3, r4, r7, pc}
 8002232:	bf00      	nop
 8002234:	f3af 8000 	nop.w
 8002238:	306c65e9 	.word	0x306c65e9
 800223c:	3f6be16e 	.word	0x3f6be16e
 8002240:	5313b470 	.word	0x5313b470
 8002244:	3f8e0b32 	.word	0x3f8e0b32
 8002248:	20000154 	.word	0x20000154

0800224c <parseEnc>:


void parseEnc(uint8_t *msg)
{
 800224c:	b590      	push	{r4, r7, lr}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2bd8      	cmp	r3, #216	; 0xd8
 800225a:	d136      	bne.n	80022ca <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	3302      	adds	r3, #2
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	b219      	sxth	r1, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3303      	adds	r3, #3
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	021b      	lsls	r3, r3, #8
 800226c:	b21a      	sxth	r2, r3
 800226e:	4b34      	ldr	r3, [pc, #208]	; (8002340 <parseEnc+0xf4>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	430a      	orrs	r2, r1
 8002274:	b212      	sxth	r2, r2
 8002276:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3305      	adds	r3, #5
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	b219      	sxth	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	3306      	adds	r3, #6
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	021b      	lsls	r3, r3, #8
 800228a:	b21a      	sxth	r2, r3
 800228c:	4b2c      	ldr	r3, [pc, #176]	; (8002340 <parseEnc+0xf4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	430a      	orrs	r2, r1
 8002292:	b212      	sxth	r2, r2
 8002294:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8002298:	4b29      	ldr	r3, [pc, #164]	; (8002340 <parseEnc+0xf4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80022a0:	b29b      	uxth	r3, r3
 80022a2:	425b      	negs	r3, r3
 80022a4:	b29a      	uxth	r2, r3
 80022a6:	4b26      	ldr	r3, [pc, #152]	; (8002340 <parseEnc+0xf4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	b212      	sxth	r2, r2
 80022ac:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80022b0:	4b24      	ldr	r3, [pc, #144]	; (8002344 <parseEnc+0xf8>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	687a      	ldr	r2, [r7, #4]
 80022b6:	7852      	ldrb	r2, [r2, #1]
 80022b8:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <parseEnc+0xf8>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	7912      	ldrb	r2, [r2, #4]
 80022c2:	741a      	strb	r2, [r3, #16]

        toVW();
 80022c4:	f7ff ff64 	bl	8002190 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 80022c8:	e036      	b.n	8002338 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2bc1      	cmp	r3, #193	; 0xc1
 80022d0:	d117      	bne.n	8002302 <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	3304      	adds	r3, #4
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	3305      	adds	r3, #5
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	021b      	lsls	r3, r3, #8
 80022e2:	4313      	orrs	r3, r2
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fe f935 	bl	8000554 <__aeabi_i2d>
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <parseEnc+0xf4>)
 80022ec:	681c      	ldr	r4, [r3, #0]
 80022ee:	f04f 0200 	mov.w	r2, #0
 80022f2:	4b15      	ldr	r3, [pc, #84]	; (8002348 <parseEnc+0xfc>)
 80022f4:	f7fe fac2 	bl	800087c <__aeabi_ddiv>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8002300:	e01a      	b.n	8002338 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	781b      	ldrb	r3, [r3, #0]
 8002306:	2bc8      	cmp	r3, #200	; 0xc8
 8002308:	d116      	bne.n	8002338 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3304      	adds	r3, #4
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	461a      	mov	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	3305      	adds	r3, #5
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	4313      	orrs	r3, r2
 800231c:	4618      	mov	r0, r3
 800231e:	f7fe f919 	bl	8000554 <__aeabi_i2d>
 8002322:	4b07      	ldr	r3, [pc, #28]	; (8002340 <parseEnc+0xf4>)
 8002324:	681c      	ldr	r4, [r3, #0]
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	4b07      	ldr	r3, [pc, #28]	; (8002348 <parseEnc+0xfc>)
 800232c:	f7fe faa6 	bl	800087c <__aeabi_ddiv>
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}
 8002340:	20000154 	.word	0x20000154
 8002344:	20000144 	.word	0x20000144
 8002348:	40240000 	.word	0x40240000

0800234c <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 800234c:	b590      	push	{r4, r7, lr}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3304      	adds	r3, #4
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	b21a      	sxth	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3305      	adds	r3, #5
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	021b      	lsls	r3, r3, #8
 8002364:	b21b      	sxth	r3, r3
 8002366:	4313      	orrs	r3, r2
 8002368:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	3306      	adds	r3, #6
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b21a      	sxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	3307      	adds	r3, #7
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	021b      	lsls	r3, r3, #8
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 8002380:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002384:	425b      	negs	r3, r3
 8002386:	4618      	mov	r0, r3
 8002388:	f7fe f8e4 	bl	8000554 <__aeabi_i2d>
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <parseEnc114+0x9c>)
 8002392:	f7fe fa73 	bl	800087c <__aeabi_ddiv>
 8002396:	4602      	mov	r2, r0
 8002398:	460b      	mov	r3, r1
 800239a:	4914      	ldr	r1, [pc, #80]	; (80023ec <parseEnc114+0xa0>)
 800239c:	680c      	ldr	r4, [r1, #0]
 800239e:	4610      	mov	r0, r2
 80023a0:	4619      	mov	r1, r3
 80023a2:	f7fe fbdb 	bl	8000b5c <__aeabi_d2iz>
 80023a6:	4603      	mov	r3, r0
 80023a8:	b21b      	sxth	r3, r3
 80023aa:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 80023ae:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe f8ce 	bl	8000554 <__aeabi_i2d>
 80023b8:	f04f 0200 	mov.w	r2, #0
 80023bc:	4b0a      	ldr	r3, [pc, #40]	; (80023e8 <parseEnc114+0x9c>)
 80023be:	f7fe fa5d 	bl	800087c <__aeabi_ddiv>
 80023c2:	4602      	mov	r2, r0
 80023c4:	460b      	mov	r3, r1
 80023c6:	4909      	ldr	r1, [pc, #36]	; (80023ec <parseEnc114+0xa0>)
 80023c8:	680c      	ldr	r4, [r1, #0]
 80023ca:	4610      	mov	r0, r2
 80023cc:	4619      	mov	r1, r3
 80023ce:	f7fe fbc5 	bl	8000b5c <__aeabi_d2iz>
 80023d2:	4603      	mov	r3, r0
 80023d4:	b21b      	sxth	r3, r3
 80023d6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 80023da:	f7ff fed9 	bl	8002190 <toVW>
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd90      	pop	{r4, r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40240000 	.word	0x40240000
 80023ec:	20000154 	.word	0x20000154

080023f0 <parseState114>:

void parseState114(uint8_t *msg)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	3304      	adds	r3, #4
 80023fc:	781b      	ldrb	r3, [r3, #0]
 80023fe:	b25a      	sxtb	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	3305      	adds	r3, #5
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	021b      	lsls	r3, r3, #8
 8002408:	b25b      	sxtb	r3, r3
 800240a:	4313      	orrs	r3, r2
 800240c:	b25a      	sxtb	r2, r3
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <parseState114+0x68>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	b2d2      	uxtb	r2, r2
 8002414:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	3306      	adds	r3, #6
 800241a:	781b      	ldrb	r3, [r3, #0]
 800241c:	b25a      	sxtb	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	3307      	adds	r3, #7
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	021b      	lsls	r3, r3, #8
 8002426:	b25b      	sxtb	r3, r3
 8002428:	4313      	orrs	r3, r2
 800242a:	b25a      	sxtb	r2, r3
 800242c:	4b0a      	ldr	r3, [pc, #40]	; (8002458 <parseState114+0x68>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 8002434:	4b08      	ldr	r3, [pc, #32]	; (8002458 <parseState114+0x68>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	7bdb      	ldrb	r3, [r3, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d104      	bne.n	8002448 <parseState114+0x58>
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <parseState114+0x68>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	7c1b      	ldrb	r3, [r3, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d003      	beq.n	8002450 <parseState114+0x60>
    {
        reset();
 8002448:	f001 fefe 	bl	8004248 <reset>
        startMotor();
 800244c:	f001 fe3c 	bl	80040c8 <startMotor>
    }
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20000144 	.word	0x20000144

0800245c <stateIdle>:

}


void stateIdle()
{
 800245c:	b580      	push	{r7, lr}
 800245e:	af00      	add	r7, sp, #0
    //int check_msg = 0;
    //check_msg = charging->checkIRdata();

    if(robot_state == CHARGING)
 8002460:	4b12      	ldr	r3, [pc, #72]	; (80024ac <stateIdle+0x50>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	2b02      	cmp	r3, #2
 8002466:	d114      	bne.n	8002492 <stateIdle+0x36>
    {
        if(ir_count_idle++ >= 2)
 8002468:	4b11      	ldr	r3, [pc, #68]	; (80024b0 <stateIdle+0x54>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	1c5a      	adds	r2, r3, #1
 800246e:	4910      	ldr	r1, [pc, #64]	; (80024b0 <stateIdle+0x54>)
 8002470:	600a      	str	r2, [r1, #0]
 8002472:	2b01      	cmp	r3, #1
 8002474:	dd10      	ble.n	8002498 <stateIdle+0x3c>
        {
            if(charger_sw == 1)
 8002476:	4b0f      	ldr	r3, [pc, #60]	; (80024b4 <stateIdle+0x58>)
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	2b01      	cmp	r3, #1
            else if(charger_sw == 0)
            {
                // charging->sendIRdata(charger_off);
            }

            if(battery>=95)
 800247c:	4b0e      	ldr	r3, [pc, #56]	; (80024b8 <stateIdle+0x5c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b5e      	cmp	r3, #94	; 0x5e
 8002482:	dd02      	ble.n	800248a <stateIdle+0x2e>
            {
                sendIRdata(battery_full);
 8002484:	480d      	ldr	r0, [pc, #52]	; (80024bc <stateIdle+0x60>)
 8002486:	f000 fdb5 	bl	8002ff4 <sendIRdata>
            }
            ir_count_idle = 0;
 800248a:	4b09      	ldr	r3, [pc, #36]	; (80024b0 <stateIdle+0x54>)
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	e002      	b.n	8002498 <stateIdle+0x3c>
        }
    }
    else
    {
        check_msg = 0;
 8002492:	4b0b      	ldr	r3, [pc, #44]	; (80024c0 <stateIdle+0x64>)
 8002494:	2200      	movs	r2, #0
 8002496:	601a      	str	r2, [r3, #0]
    }

    if(check_msg == 2)
 8002498:	4b09      	ldr	r3, [pc, #36]	; (80024c0 <stateIdle+0x64>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2b02      	cmp	r3, #2
 800249e:	d102      	bne.n	80024a6 <stateIdle+0x4a>
    {
        inhome = 1;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <stateIdle+0x68>)
 80024a2:	2201      	movs	r2, #1
 80024a4:	701a      	strb	r2, [r3, #0]

    }

}
 80024a6:	bf00      	nop
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	20000130 	.word	0x20000130
 80024b0:	2000015c 	.word	0x2000015c
 80024b4:	20000137 	.word	0x20000137
 80024b8:	20000148 	.word	0x20000148
 80024bc:	20000004 	.word	0x20000004
 80024c0:	20000150 	.word	0x20000150
 80024c4:	20000158 	.word	0x20000158

080024c8 <spinonce>:


void spinonce(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b090      	sub	sp, #64	; 0x40
 80024cc:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 80024ce:	4aa5      	ldr	r2, [pc, #660]	; (8002764 <spinonce+0x29c>)
 80024d0:	f107 0314 	add.w	r3, r7, #20
 80024d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024d8:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	63fb      	str	r3, [r7, #60]	; 0x3c

    uint32_t CanId = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
    uint16_t FDval[4]={0,};
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
 80024ea:	605a      	str	r2, [r3, #4]
	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 80024ec:	2100      	movs	r1, #0
 80024ee:	2000      	movs	r0, #0
 80024f0:	f000 fcda 	bl	8002ea8 <CanInit>


    HAL_Delay(4000);//must set more 4s
 80024f4:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80024f8:	f002 fe64 	bl	80051c4 <HAL_Delay>

    //ready_flag = 1;
    start_docking_flag = 0;
 80024fc:	4b9a      	ldr	r3, [pc, #616]	; (8002768 <spinonce+0x2a0>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 8002502:	4b9a      	ldr	r3, [pc, #616]	; (800276c <spinonce+0x2a4>)
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 8002508:	2301      	movs	r3, #1
 800250a:	77fb      	strb	r3, [r7, #31]

    settingMotor();
 800250c:	f002 f8b8 	bl	8004680 <settingMotor>
    startMotor();
 8002510:	f001 fdda 	bl	80040c8 <startMotor>

    TransmitterIR_init();
 8002514:	f000 f9d4 	bl	80028c0 <TransmitterIR_init>
    ReceiverIR_init();
 8002518:	f7fe fcea 	bl	8000ef0 <ReceiverIR_init>
    //USS_init();

	while(1)
	{

		if(Tick_100ms>FDsen_seq+3) {		//for monitor iteration.
 800251c:	4b94      	ldr	r3, [pc, #592]	; (8002770 <spinonce+0x2a8>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	1cda      	adds	r2, r3, #3
 8002522:	4b94      	ldr	r3, [pc, #592]	; (8002774 <spinonce+0x2ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d221      	bcs.n	800256e <spinonce+0xa6>
			FDsen_seq = Tick_100ms;
 800252a:	4b92      	ldr	r3, [pc, #584]	; (8002774 <spinonce+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a90      	ldr	r2, [pc, #576]	; (8002770 <spinonce+0x2a8>)
 8002530:	6013      	str	r3, [r2, #0]

		    for(int i=0;i<4;i++){
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
 8002536:	e014      	b.n	8002562 <spinonce+0x9a>
		    	HAL_ADC_Start(&hadc1);
 8002538:	488f      	ldr	r0, [pc, #572]	; (8002778 <spinonce+0x2b0>)
 800253a:	f002 feab 	bl	8005294 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100);
 800253e:	2164      	movs	r1, #100	; 0x64
 8002540:	488d      	ldr	r0, [pc, #564]	; (8002778 <spinonce+0x2b0>)
 8002542:	f002 ffa9 	bl	8005498 <HAL_ADC_PollForConversion>
				FDval[i] = HAL_ADC_GetValue(&hadc1);
 8002546:	488c      	ldr	r0, [pc, #560]	; (8002778 <spinonce+0x2b0>)
 8002548:	f003 f831 	bl	80055ae <HAL_ADC_GetValue>
 800254c:	4603      	mov	r3, r0
 800254e:	b29a      	uxth	r2, r3
 8002550:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	3340      	adds	r3, #64	; 0x40
 8002556:	443b      	add	r3, r7
 8002558:	f823 2c3c 	strh.w	r2, [r3, #-60]
		    for(int i=0;i<4;i++){
 800255c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800255e:	3301      	adds	r3, #1
 8002560:	637b      	str	r3, [r7, #52]	; 0x34
 8002562:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002564:	2b03      	cmp	r3, #3
 8002566:	dde7      	ble.n	8002538 <spinonce+0x70>
		    }
		    HAL_ADC_Stop(&hadc1);
 8002568:	4883      	ldr	r0, [pc, #524]	; (8002778 <spinonce+0x2b0>)
 800256a:	f002 ff61 	bl	8005430 <HAL_ADC_Stop>
		  //HAL_Delay(100);


  	}

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 800256e:	4b83      	ldr	r3, [pc, #524]	; (800277c <spinonce+0x2b4>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	1d5a      	adds	r2, r3, #5
 8002574:	4b7f      	ldr	r3, [pc, #508]	; (8002774 <spinonce+0x2ac>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	429a      	cmp	r2, r3
 800257a:	d208      	bcs.n	800258e <spinonce+0xc6>
    		toggle_seq = Tick_100ms;
 800257c:	4b7d      	ldr	r3, [pc, #500]	; (8002774 <spinonce+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a7e      	ldr	r2, [pc, #504]	; (800277c <spinonce+0x2b4>)
 8002582:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 8002584:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002588:	487d      	ldr	r0, [pc, #500]	; (8002780 <spinonce+0x2b8>)
 800258a:	f004 fcb8 	bl	8006efe <HAL_GPIO_TogglePin>
    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 800258e:	4b7d      	ldr	r3, [pc, #500]	; (8002784 <spinonce+0x2bc>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1d1a      	adds	r2, r3, #4
 8002594:	4b7c      	ldr	r3, [pc, #496]	; (8002788 <spinonce+0x2c0>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	429a      	cmp	r2, r3
 800259a:	d209      	bcs.n	80025b0 <spinonce+0xe8>
    		controlmotor_seq = gTick;
 800259c:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <spinonce+0x2c0>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a78      	ldr	r2, [pc, #480]	; (8002784 <spinonce+0x2bc>)
 80025a2:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 80025a4:	f7ff fc0c 	bl	8001dc0 <controlMotor>
            sendEnc(CANID3);
 80025a8:	f240 70d1 	movw	r0, #2001	; 0x7d1
 80025ac:	f7ff fd24 	bl	8001ff8 <sendEnc>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 80025b0:	4b76      	ldr	r3, [pc, #472]	; (800278c <spinonce+0x2c4>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	1cda      	adds	r2, r3, #3
 80025b6:	4b74      	ldr	r3, [pc, #464]	; (8002788 <spinonce+0x2c0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d20e      	bcs.n	80025dc <spinonce+0x114>
    		reqmotor_seq = gTick;
 80025be:	4b72      	ldr	r3, [pc, #456]	; (8002788 <spinonce+0x2c0>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a72      	ldr	r2, [pc, #456]	; (800278c <spinonce+0x2c4>)
 80025c4:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 80025c6:	4b71      	ldr	r3, [pc, #452]	; (800278c <spinonce+0x2c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d102      	bne.n	80025d8 <spinonce+0x110>
 80025d2:	f001 fe89 	bl	80042e8 <reqEnc>
 80025d6:	e001      	b.n	80025dc <spinonce+0x114>
    		else{reqState();}
 80025d8:	f001 fed3 	bl	8004382 <reqState>
    	}
		if(Tick_100ms>toggle_seq+9) {
 80025dc:	4b67      	ldr	r3, [pc, #412]	; (800277c <spinonce+0x2b4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f103 0209 	add.w	r2, r3, #9
 80025e4:	4b63      	ldr	r3, [pc, #396]	; (8002774 <spinonce+0x2ac>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d205      	bcs.n	80025f8 <spinonce+0x130>
    		toggle_seq = Tick_100ms;
 80025ec:	4b61      	ldr	r3, [pc, #388]	; (8002774 <spinonce+0x2ac>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a62      	ldr	r2, [pc, #392]	; (800277c <spinonce+0x2b4>)
 80025f2:	6013      	str	r3, [r2, #0]
        	stateIdle();
 80025f4:	f7ff ff32 	bl	800245c <stateIdle>
    	}


		if((Tick_100ms>sendsensor_seq+2)){
 80025f8:	4b65      	ldr	r3, [pc, #404]	; (8002790 <spinonce+0x2c8>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	1c9a      	adds	r2, r3, #2
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <spinonce+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	429a      	cmp	r2, r3
 8002604:	f080 8088 	bcs.w	8002718 <spinonce+0x250>
			sendsensor_seq = Tick_100ms;
 8002608:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <spinonce+0x2ac>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a60      	ldr	r2, [pc, #384]	; (8002790 <spinonce+0x2c8>)
 800260e:	6013      	str	r3, [r2, #0]
			for(int i=1;i<7;i++){printf("sonic test %d  ", USSn_DataRead(i));}	printf("\n");
 8002610:	2301      	movs	r3, #1
 8002612:	633b      	str	r3, [r7, #48]	; 0x30
 8002614:	e00a      	b.n	800262c <spinonce+0x164>
 8002616:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002618:	f002 fc6e 	bl	8004ef8 <USSn_DataRead>
 800261c:	4603      	mov	r3, r0
 800261e:	4619      	mov	r1, r3
 8002620:	485c      	ldr	r0, [pc, #368]	; (8002794 <spinonce+0x2cc>)
 8002622:	f007 ffeb 	bl	800a5fc <iprintf>
 8002626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002628:	3301      	adds	r3, #1
 800262a:	633b      	str	r3, [r7, #48]	; 0x30
 800262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262e:	2b06      	cmp	r3, #6
 8002630:	ddf1      	ble.n	8002616 <spinonce+0x14e>
 8002632:	200a      	movs	r0, #10
 8002634:	f007 fffa 	bl	800a62c <putchar>
//			pre_usTick = us_Tick;
//			while(us_Tick < pre_usTick+30){;}//wait 150us
//			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);

			//////////////////////////////////////////////
			if(sendsensor_seq%2==1){for(int i=1;i<7;i+=2){buf[i] = USSn_DataRead(i);}}
 8002638:	4b55      	ldr	r3, [pc, #340]	; (8002790 <spinonce+0x2c8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0301 	and.w	r3, r3, #1
 8002640:	2b00      	cmp	r3, #0
 8002642:	d014      	beq.n	800266e <spinonce+0x1a6>
 8002644:	2301      	movs	r3, #1
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002648:	e00d      	b.n	8002666 <spinonce+0x19e>
 800264a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800264c:	f002 fc54 	bl	8004ef8 <USSn_DataRead>
 8002650:	4603      	mov	r3, r0
 8002652:	b2d9      	uxtb	r1, r3
 8002654:	f107 020c 	add.w	r2, r7, #12
 8002658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265a:	4413      	add	r3, r2
 800265c:	460a      	mov	r2, r1
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002662:	3302      	adds	r3, #2
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	2b06      	cmp	r3, #6
 800266a:	ddee      	ble.n	800264a <spinonce+0x182>
 800266c:	e013      	b.n	8002696 <spinonce+0x1ce>
			else {for(int i=2;i<7;i+=2){buf[i] = USSn_DataRead(i);}}
 800266e:	2302      	movs	r3, #2
 8002670:	62bb      	str	r3, [r7, #40]	; 0x28
 8002672:	e00d      	b.n	8002690 <spinonce+0x1c8>
 8002674:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002676:	f002 fc3f 	bl	8004ef8 <USSn_DataRead>
 800267a:	4603      	mov	r3, r0
 800267c:	b2d9      	uxtb	r1, r3
 800267e:	f107 020c 	add.w	r2, r7, #12
 8002682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002684:	4413      	add	r3, r2
 8002686:	460a      	mov	r2, r1
 8002688:	701a      	strb	r2, [r3, #0]
 800268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800268c:	3302      	adds	r3, #2
 800268e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	2b06      	cmp	r3, #6
 8002694:	ddee      	ble.n	8002674 <spinonce+0x1ac>
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
			buf[6] = inhome << 1;
 8002696:	4b40      	ldr	r3, [pc, #256]	; (8002798 <spinonce+0x2d0>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	005b      	lsls	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	74bb      	strb	r3, [r7, #18]

			for(int i=0; i<4;i++){
 80026a0:	2300      	movs	r3, #0
 80026a2:	627b      	str	r3, [r7, #36]	; 0x24
 80026a4:	e02b      	b.n	80026fe <spinonce+0x236>
				if(FDval[i]>50){buf[index] |= 1<<i+4;}
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	3340      	adds	r3, #64	; 0x40
 80026ac:	443b      	add	r3, r7
 80026ae:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80026b2:	2b32      	cmp	r3, #50	; 0x32
 80026b4:	d915      	bls.n	80026e2 <spinonce+0x21a>
 80026b6:	f107 020c 	add.w	r2, r7, #12
 80026ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026bc:	4413      	add	r3, r2
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	b25a      	sxtb	r2, r3
 80026c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c4:	3304      	adds	r3, #4
 80026c6:	2101      	movs	r1, #1
 80026c8:	fa01 f303 	lsl.w	r3, r1, r3
 80026cc:	b25b      	sxtb	r3, r3
 80026ce:	4313      	orrs	r3, r2
 80026d0:	b25b      	sxtb	r3, r3
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	f107 020c 	add.w	r2, r7, #12
 80026d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026da:	4413      	add	r3, r2
 80026dc:	460a      	mov	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
 80026e0:	e00a      	b.n	80026f8 <spinonce+0x230>
				else {buf[index] |= 0<<i+4;}
 80026e2:	f107 020c 	add.w	r2, r7, #12
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	4413      	add	r3, r2
 80026ea:	7819      	ldrb	r1, [r3, #0]
 80026ec:	f107 020c 	add.w	r2, r7, #12
 80026f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026f2:	4413      	add	r3, r2
 80026f4:	460a      	mov	r2, r1
 80026f6:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<4;i++){
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	3301      	adds	r3, #1
 80026fc:	627b      	str	r3, [r7, #36]	; 0x24
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	2b03      	cmp	r3, #3
 8002702:	ddd0      	ble.n	80026a6 <spinonce+0x1de>
			}
			//buf[index] = 0;
			sendCan(2002, buf, 8, 1);//test
 8002704:	f107 010c 	add.w	r1, r7, #12
 8002708:	2301      	movs	r3, #1
 800270a:	2208      	movs	r2, #8
 800270c:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8002710:	f000 fc16 	bl	8002f40 <sendCan>
			index = 0;
 8002714:	2300      	movs	r3, #0
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c

		}

		if(FLAG_RxCplt){
 8002718:	4b20      	ldr	r3, [pc, #128]	; (800279c <spinonce+0x2d4>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2b00      	cmp	r3, #0
 800271e:	f43f aefd 	beq.w	800251c <spinonce+0x54>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8002722:	2300      	movs	r3, #0
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	e00c      	b.n	8002742 <spinonce+0x27a>
 8002728:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <spinonce+0x2d8>)
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	4413      	add	r3, r2
 800272e:	7819      	ldrb	r1, [r3, #0]
 8002730:	f107 0214 	add.w	r2, r7, #20
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	4413      	add	r3, r2
 8002738:	460a      	mov	r2, r1
 800273a:	701a      	strb	r2, [r3, #0]
 800273c:	6a3b      	ldr	r3, [r7, #32]
 800273e:	3301      	adds	r3, #1
 8002740:	623b      	str	r3, [r7, #32]
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	2b07      	cmp	r3, #7
 8002746:	ddef      	ble.n	8002728 <spinonce+0x260>
    		FLAG_RxCplt=0;
 8002748:	4b14      	ldr	r3, [pc, #80]	; (800279c <spinonce+0x2d4>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 800274e:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <spinonce+0x2dc>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b14      	ldr	r3, [pc, #80]	; (80027a4 <spinonce+0x2dc>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	429a      	cmp	r2, r3
 8002758:	d926      	bls.n	80027a8 <spinonce+0x2e0>
 800275a:	4b12      	ldr	r3, [pc, #72]	; (80027a4 <spinonce+0x2dc>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002760:	e025      	b.n	80027ae <spinonce+0x2e6>
 8002762:	bf00      	nop
 8002764:	0800b5fc 	.word	0x0800b5fc
 8002768:	2000014d 	.word	0x2000014d
 800276c:	20000150 	.word	0x20000150
 8002770:	2000010c 	.word	0x2000010c
 8002774:	20000100 	.word	0x20000100
 8002778:	20000210 	.word	0x20000210
 800277c:	20000108 	.word	0x20000108
 8002780:	40020400 	.word	0x40020400
 8002784:	20000120 	.word	0x20000120
 8002788:	200000f8 	.word	0x200000f8
 800278c:	20000124 	.word	0x20000124
 8002790:	2000011c 	.word	0x2000011c
 8002794:	0800b5ec 	.word	0x0800b5ec
 8002798:	20000158 	.word	0x20000158
 800279c:	200001c0 	.word	0x200001c0
 80027a0:	200001c4 	.word	0x200001c4
 80027a4:	200001cc 	.word	0x200001cc
			else {CanId = g_tCan_Rx_Header.ExtId;}
 80027a8:	4b42      	ldr	r3, [pc, #264]	; (80028b4 <spinonce+0x3ec>)
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	63bb      	str	r3, [r7, #56]	; 0x38

			if(ready_flag)
 80027ae:	4b42      	ldr	r3, [pc, #264]	; (80028b8 <spinonce+0x3f0>)
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d072      	beq.n	800289c <spinonce+0x3d4>
			{
				switch(CanId)
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	4a40      	ldr	r2, [pc, #256]	; (80028bc <spinonce+0x3f4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d04e      	beq.n	800285c <spinonce+0x394>
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	4a3e      	ldr	r2, [pc, #248]	; (80028bc <spinonce+0x3f4>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d86d      	bhi.n	80028a2 <spinonce+0x3da>
 80027c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c8:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d03f      	beq.n	8002850 <spinonce+0x388>
 80027d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027d2:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d863      	bhi.n	80028a2 <spinonce+0x3da>
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d02f      	beq.n	8002844 <spinonce+0x37c>
 80027e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e6:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d859      	bhi.n	80028a2 <spinonce+0x3da>
 80027ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027f0:	f240 7201 	movw	r2, #1793	; 0x701
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d04e      	beq.n	8002896 <spinonce+0x3ce>
 80027f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027fa:	f240 7201 	movw	r2, #1793	; 0x701
 80027fe:	4293      	cmp	r3, r2
 8002800:	d84f      	bhi.n	80028a2 <spinonce+0x3da>
 8002802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002804:	f240 5281 	movw	r2, #1409	; 0x581
 8002808:	4293      	cmp	r3, r2
 800280a:	d02d      	beq.n	8002868 <spinonce+0x3a0>
 800280c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800280e:	f240 5281 	movw	r2, #1409	; 0x581
 8002812:	4293      	cmp	r3, r2
 8002814:	d845      	bhi.n	80028a2 <spinonce+0x3da>
 8002816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002818:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800281c:	4293      	cmp	r3, r2
 800281e:	d005      	beq.n	800282c <spinonce+0x364>
 8002820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002822:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8002826:	4293      	cmp	r3, r2
 8002828:	d006      	beq.n	8002838 <spinonce+0x370>
 800282a:	e03a      	b.n	80028a2 <spinonce+0x3da>
				{
				case CANID1:
					parseCmdvel(canbuf);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4618      	mov	r0, r3
 8002832:	f7ff fb93 	bl	8001f5c <parseCmdvel>
					break;
 8002836:	e034      	b.n	80028a2 <spinonce+0x3da>

				case CANID2:
					parseState(canbuf);
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	4618      	mov	r0, r3
 800283e:	f7ff fa77 	bl	8001d30 <parseState>
					break;
 8002842:	e02e      	b.n	80028a2 <spinonce+0x3da>

				case CANID5:
					parseTop(canbuf);
 8002844:	f107 0314 	add.w	r3, r7, #20
 8002848:	4618      	mov	r0, r3
 800284a:	f7ff fa45 	bl	8001cd8 <parseTop>
					break;
 800284e:	e028      	b.n	80028a2 <spinonce+0x3da>

				case CANID6:
					parsePmm(canbuf);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4618      	mov	r0, r3
 8002856:	f7ff fa0d 	bl	8001c74 <parsePmm>
					break;
 800285a:	e022      	b.n	80028a2 <spinonce+0x3da>

				case CANID7:
					parseEnc(canbuf);
 800285c:	f107 0314 	add.w	r3, r7, #20
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff fcf3 	bl	800224c <parseEnc>
					break;
 8002866:	e01c      	b.n	80028a2 <spinonce+0x3da>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8002868:	7d7b      	ldrb	r3, [r7, #21]
 800286a:	2b6c      	cmp	r3, #108	; 0x6c
 800286c:	d107      	bne.n	800287e <spinonce+0x3b6>
 800286e:	7dbb      	ldrb	r3, [r7, #22]
 8002870:	2b60      	cmp	r3, #96	; 0x60
 8002872:	d104      	bne.n	800287e <spinonce+0x3b6>
						parseEnc114(canbuf);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fd67 	bl	800234c <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 800287e:	7d7b      	ldrb	r3, [r7, #21]
 8002880:	2b3f      	cmp	r3, #63	; 0x3f
 8002882:	d10d      	bne.n	80028a0 <spinonce+0x3d8>
 8002884:	7dbb      	ldrb	r3, [r7, #22]
 8002886:	2b60      	cmp	r3, #96	; 0x60
 8002888:	d10a      	bne.n	80028a0 <spinonce+0x3d8>
						parseState114(canbuf);
 800288a:	f107 0314 	add.w	r3, r7, #20
 800288e:	4618      	mov	r0, r3
 8002890:	f7ff fdae 	bl	80023f0 <parseState114>
					break;
 8002894:	e004      	b.n	80028a0 <spinonce+0x3d8>

				case MOTOR114_START_ID:
					startMotor();
 8002896:	f001 fc17 	bl	80040c8 <startMotor>
					break;
 800289a:	e002      	b.n	80028a2 <spinonce+0x3da>
				}
			}
 800289c:	bf00      	nop
 800289e:	e000      	b.n	80028a2 <spinonce+0x3da>
					break;
 80028a0:	bf00      	nop


			g_tCan_Rx_Header.StdId=0;
 80028a2:	4b04      	ldr	r3, [pc, #16]	; (80028b4 <spinonce+0x3ec>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 80028a8:	4b02      	ldr	r3, [pc, #8]	; (80028b4 <spinonce+0x3ec>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	605a      	str	r2, [r3, #4]
			CanId = 0;
 80028ae:	2300      	movs	r3, #0
 80028b0:	63bb      	str	r3, [r7, #56]	; 0x38
		if(Tick_100ms>FDsen_seq+3) {		//for monitor iteration.
 80028b2:	e633      	b.n	800251c <spinonce+0x54>
 80028b4:	200001cc 	.word	0x200001cc
 80028b8:	2000014c 	.word	0x2000014c
 80028bc:	00b8b701 	.word	0x00b8b701

080028c0 <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0




	IRDUTY0;
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <TransmitterIR_init+0x40>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2200      	movs	r2, #0
 80028ca:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <TransmitterIR_init+0x44>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 80028d2:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <TransmitterIR_init+0x44>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <TransmitterIR_init+0x44>)
 80028da:	2200      	movs	r2, #0
 80028dc:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <TransmitterIR_init+0x44>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 80028e4:	4b07      	ldr	r3, [pc, #28]	; (8002904 <TransmitterIR_init+0x44>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <TransmitterIR_init+0x48>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <TransmitterIR_init+0x48>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	605a      	str	r2, [r3, #4]




}
 80028f6:	bf00      	nop
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	20000280 	.word	0x20000280
 8002904:	200001ac 	.word	0x200001ac
 8002908:	20000164 	.word	0x20000164

0800290c <TIR_getState>:

TIR_State TIR_getState(void) {
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
    LOCK();
    TIR_State s = TIR_work.state;
 8002912:	4b05      	ldr	r3, [pc, #20]	; (8002928 <TIR_getState+0x1c>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8002918:	79fb      	ldrb	r3, [r7, #7]
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	200001ac 	.word	0x200001ac

0800292c <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]
 8002938:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (TIR_work.state != TIR_Idle) {
 800293a:	4b2b      	ldr	r3, [pc, #172]	; (80029e8 <setData+0xbc>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d002      	beq.n	8002948 <setData+0x1c>
        UNLOCK();
        return -1;
 8002942:	f04f 33ff 	mov.w	r3, #4294967295
 8002946:	e04a      	b.n	80029de <setData+0xb2>
    }

    TIR_work.state = Leader;
 8002948:	4b27      	ldr	r3, [pc, #156]	; (80029e8 <setData+0xbc>)
 800294a:	2201      	movs	r2, #1
 800294c:	701a      	strb	r2, [r3, #0]
    TIR_work.bitcount = 0;
 800294e:	4b26      	ldr	r3, [pc, #152]	; (80029e8 <setData+0xbc>)
 8002950:	2200      	movs	r2, #0
 8002952:	605a      	str	r2, [r3, #4]
    TIR_work.leader = 0;
 8002954:	4b24      	ldr	r3, [pc, #144]	; (80029e8 <setData+0xbc>)
 8002956:	2200      	movs	r2, #0
 8002958:	609a      	str	r2, [r3, #8]
    TIR_work.data = 0;
 800295a:	4b23      	ldr	r3, [pc, #140]	; (80029e8 <setData+0xbc>)
 800295c:	2200      	movs	r2, #0
 800295e:	60da      	str	r2, [r3, #12]
    TIR_work.trailer = 0;
 8002960:	4b21      	ldr	r3, [pc, #132]	; (80029e8 <setData+0xbc>)
 8002962:	2200      	movs	r2, #0
 8002964:	611a      	str	r2, [r3, #16]

    TIR_data.format = format;
 8002966:	4a21      	ldr	r2, [pc, #132]	; (80029ec <setData+0xc0>)
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	7013      	strb	r3, [r2, #0]
    TIR_data.bitlength = bitlength;
 800296c:	4a1f      	ldr	r2, [pc, #124]	; (80029ec <setData+0xc0>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da00      	bge.n	800297a <setData+0x4e>
 8002978:	3307      	adds	r3, #7
 800297a:	10db      	asrs	r3, r3, #3
 800297c:	461a      	mov	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	2b00      	cmp	r3, #0
 8002986:	bf14      	ite	ne
 8002988:	2301      	movne	r3, #1
 800298a:	2300      	moveq	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	4413      	add	r3, r2
 8002990:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8002992:	2300      	movs	r3, #0
 8002994:	617b      	str	r3, [r7, #20]
 8002996:	e00c      	b.n	80029b2 <setData+0x86>
        TIR_data.buffer[i] = buf[i];
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	4413      	add	r3, r2
 800299e:	7819      	ldrb	r1, [r3, #0]
 80029a0:	4a12      	ldr	r2, [pc, #72]	; (80029ec <setData+0xc0>)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	4413      	add	r3, r2
 80029a6:	3308      	adds	r3, #8
 80029a8:	460a      	mov	r2, r1
 80029aa:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	3301      	adds	r3, #1
 80029b0:	617b      	str	r3, [r7, #20]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	dbee      	blt.n	8002998 <setData+0x6c>
    }

    switch (format) {
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	2b05      	cmp	r3, #5
 80029be:	d00c      	beq.n	80029da <setData+0xae>
 80029c0:	2b05      	cmp	r3, #5
 80029c2:	dc0b      	bgt.n	80029dc <setData+0xb0>
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d001      	beq.n	80029cc <setData+0xa0>
 80029c8:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 80029ca:	e007      	b.n	80029dc <setData+0xb0>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 80029cc:	4808      	ldr	r0, [pc, #32]	; (80029f0 <setData+0xc4>)
 80029ce:	f005 fc2b 	bl	8008228 <HAL_TIM_Base_Start_IT>
        		TIR_setData_flag = 1;
 80029d2:	4b08      	ldr	r3, [pc, #32]	; (80029f4 <setData+0xc8>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	701a      	strb	r2, [r3, #0]
            break;
 80029d8:	e000      	b.n	80029dc <setData+0xb0>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 80029da:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 80029dc:	687b      	ldr	r3, [r7, #4]
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3718      	adds	r7, #24
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200001ac 	.word	0x200001ac
 80029ec:	20000164 	.word	0x20000164
 80029f0:	200003b0 	.word	0x200003b0
 80029f4:	20000110 	.word	0x20000110

080029f8 <tick>:

void tick(void) {
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 80029fc:	4b80      	ldr	r3, [pc, #512]	; (8002c00 <tick+0x208>)
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	f200 8247 	bhi.w	8002e94 <tick+0x49c>
 8002a06:	a201      	add	r2, pc, #4	; (adr r2, 8002a0c <tick+0x14>)
 8002a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a0c:	08002a1d 	.word	0x08002a1d
 8002a10:	08002a37 	.word	0x08002a37
 8002a14:	08002b1d 	.word	0x08002b1d
 8002a18:	08002d83 	.word	0x08002d83
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8002a1c:	4b78      	ldr	r3, [pc, #480]	; (8002c00 <tick+0x208>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8002a22:	4b77      	ldr	r3, [pc, #476]	; (8002c00 <tick+0x208>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8002a28:	4b75      	ldr	r3, [pc, #468]	; (8002c00 <tick+0x208>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8002a2e:	4b74      	ldr	r3, [pc, #464]	; (8002c00 <tick+0x208>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	611a      	str	r2, [r3, #16]
            break;
 8002a34:	e235      	b.n	8002ea2 <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8002a36:	4b73      	ldr	r3, [pc, #460]	; (8002c04 <tick+0x20c>)
 8002a38:	781b      	ldrb	r3, [r3, #0]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d121      	bne.n	8002a82 <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002a3e:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <tick+0x208>)
 8002a40:	689a      	ldr	r2, [r3, #8]
 8002a42:	4b71      	ldr	r3, [pc, #452]	; (8002c08 <tick+0x210>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	da04      	bge.n	8002a54 <tick+0x5c>
                    IRDUTY50;
 8002a4a:	4b70      	ldr	r3, [pc, #448]	; (8002c0c <tick+0x214>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	2234      	movs	r2, #52	; 0x34
 8002a50:	635a      	str	r2, [r3, #52]	; 0x34
 8002a52:	e003      	b.n	8002a5c <tick+0x64>
                } else {
                    IRDUTY0;
 8002a54:	4b6d      	ldr	r3, [pc, #436]	; (8002c0c <tick+0x214>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002a5c:	4b68      	ldr	r3, [pc, #416]	; (8002c00 <tick+0x208>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	3301      	adds	r3, #1
 8002a62:	4a67      	ldr	r2, [pc, #412]	; (8002c00 <tick+0x208>)
 8002a64:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002a66:	4b68      	ldr	r3, [pc, #416]	; (8002c08 <tick+0x210>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4b69      	ldr	r3, [pc, #420]	; (8002c10 <tick+0x218>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	441a      	add	r2, r3
 8002a70:	4b63      	ldr	r3, [pc, #396]	; (8002c00 <tick+0x208>)
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	f300 820f 	bgt.w	8002e98 <tick+0x4a0>
                    TIR_work.state = Data;
 8002a7a:	4b61      	ldr	r3, [pc, #388]	; (8002c00 <tick+0x208>)
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002a80:	e20a      	b.n	8002e98 <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8002a82:	4b60      	ldr	r3, [pc, #384]	; (8002c04 <tick+0x20c>)
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b03      	cmp	r3, #3
 8002a88:	d121      	bne.n	8002ace <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002a8a:	4b5d      	ldr	r3, [pc, #372]	; (8002c00 <tick+0x208>)
 8002a8c:	689a      	ldr	r2, [r3, #8]
 8002a8e:	4b61      	ldr	r3, [pc, #388]	; (8002c14 <tick+0x21c>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	da04      	bge.n	8002aa0 <tick+0xa8>
                    IRDUTY50;
 8002a96:	4b5d      	ldr	r3, [pc, #372]	; (8002c0c <tick+0x214>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	2234      	movs	r2, #52	; 0x34
 8002a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002a9e:	e003      	b.n	8002aa8 <tick+0xb0>
                    IRDUTY0;
 8002aa0:	4b5a      	ldr	r3, [pc, #360]	; (8002c0c <tick+0x214>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002aa8:	4b55      	ldr	r3, [pc, #340]	; (8002c00 <tick+0x208>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	3301      	adds	r3, #1
 8002aae:	4a54      	ldr	r2, [pc, #336]	; (8002c00 <tick+0x208>)
 8002ab0:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8002ab2:	4b58      	ldr	r3, [pc, #352]	; (8002c14 <tick+0x21c>)
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	4b58      	ldr	r3, [pc, #352]	; (8002c18 <tick+0x220>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	441a      	add	r2, r3
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <tick+0x208>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	f300 81e9 	bgt.w	8002e98 <tick+0x4a0>
                    TIR_work.state = Data;
 8002ac6:	4b4e      	ldr	r3, [pc, #312]	; (8002c00 <tick+0x208>)
 8002ac8:	2202      	movs	r2, #2
 8002aca:	701a      	strb	r2, [r3, #0]
            break;
 8002acc:	e1e4      	b.n	8002e98 <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 8002ace:	4b4d      	ldr	r3, [pc, #308]	; (8002c04 <tick+0x20c>)
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b05      	cmp	r3, #5
 8002ad4:	f040 81e0 	bne.w	8002e98 <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <tick+0x208>)
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	4b4f      	ldr	r3, [pc, #316]	; (8002c1c <tick+0x224>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	da04      	bge.n	8002aee <tick+0xf6>
                    IRDUTY50;
 8002ae4:	4b49      	ldr	r3, [pc, #292]	; (8002c0c <tick+0x214>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2234      	movs	r2, #52	; 0x34
 8002aea:	635a      	str	r2, [r3, #52]	; 0x34
 8002aec:	e003      	b.n	8002af6 <tick+0xfe>
                    IRDUTY0;
 8002aee:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <tick+0x214>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2200      	movs	r2, #0
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <tick+0x208>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	3301      	adds	r3, #1
 8002afc:	4a40      	ldr	r2, [pc, #256]	; (8002c00 <tick+0x208>)
 8002afe:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8002b00:	4b46      	ldr	r3, [pc, #280]	; (8002c1c <tick+0x224>)
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	4b46      	ldr	r3, [pc, #280]	; (8002c20 <tick+0x228>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	441a      	add	r2, r3
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <tick+0x208>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	f300 81c2 	bgt.w	8002e98 <tick+0x4a0>
                    TIR_work.state = Data;
 8002b14:	4b3a      	ldr	r3, [pc, #232]	; (8002c00 <tick+0x208>)
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
            break;
 8002b1a:	e1bd      	b.n	8002e98 <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 8002b1c:	4b39      	ldr	r3, [pc, #228]	; (8002c04 <tick+0x20c>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d15b      	bne.n	8002bdc <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8002b24:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <tick+0x208>)
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d109      	bne.n	8002b40 <tick+0x148>
                    IRDUTY50;
 8002b2c:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <tick+0x214>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2234      	movs	r2, #52	; 0x34
 8002b32:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002b34:	4b32      	ldr	r3, [pc, #200]	; (8002c00 <tick+0x208>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	3301      	adds	r3, #1
 8002b3a:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <tick+0x208>)
 8002b3c:	60d3      	str	r3, [r2, #12]
 8002b3e:	e042      	b.n	8002bc6 <tick+0x1ce>
                } else {
                    IRDUTY0;
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <tick+0x214>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2200      	movs	r2, #0
 8002b46:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002b48:	4b2d      	ldr	r3, [pc, #180]	; (8002c00 <tick+0x208>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	da00      	bge.n	8002b52 <tick+0x15a>
 8002b50:	3307      	adds	r3, #7
 8002b52:	10db      	asrs	r3, r3, #3
 8002b54:	461a      	mov	r2, r3
 8002b56:	4b2b      	ldr	r3, [pc, #172]	; (8002c04 <tick+0x20c>)
 8002b58:	4413      	add	r3, r2
 8002b5a:	7a1b      	ldrb	r3, [r3, #8]
 8002b5c:	4619      	mov	r1, r3
 8002b5e:	4b28      	ldr	r3, [pc, #160]	; (8002c00 <tick+0x208>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	425a      	negs	r2, r3
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	f002 0207 	and.w	r2, r2, #7
 8002b6c:	bf58      	it	pl
 8002b6e:	4253      	negpl	r3, r2
 8002b70:	fa41 f303 	asr.w	r3, r1, r3
 8002b74:	f003 0301 	and.w	r3, r3, #1
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d012      	beq.n	8002ba2 <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 8002b7c:	4b20      	ldr	r3, [pc, #128]	; (8002c00 <tick+0x208>)
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	dd08      	ble.n	8002b96 <tick+0x19e>
                            TIR_work.bitcount++;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	; (8002c00 <tick+0x208>)
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a1d      	ldr	r2, [pc, #116]	; (8002c00 <tick+0x208>)
 8002b8c:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002b8e:	4b1c      	ldr	r3, [pc, #112]	; (8002c00 <tick+0x208>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	60da      	str	r2, [r3, #12]
 8002b94:	e017      	b.n	8002bc6 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002b96:	4b1a      	ldr	r3, [pc, #104]	; (8002c00 <tick+0x208>)
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	4a18      	ldr	r2, [pc, #96]	; (8002c00 <tick+0x208>)
 8002b9e:	60d3      	str	r3, [r2, #12]
 8002ba0:	e011      	b.n	8002bc6 <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8002ba2:	4b17      	ldr	r3, [pc, #92]	; (8002c00 <tick+0x208>)
 8002ba4:	68db      	ldr	r3, [r3, #12]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	dd08      	ble.n	8002bbc <tick+0x1c4>
                            TIR_work.bitcount++;
 8002baa:	4b15      	ldr	r3, [pc, #84]	; (8002c00 <tick+0x208>)
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	4a13      	ldr	r2, [pc, #76]	; (8002c00 <tick+0x208>)
 8002bb2:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002bb4:	4b12      	ldr	r3, [pc, #72]	; (8002c00 <tick+0x208>)
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	e004      	b.n	8002bc6 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002bbc:	4b10      	ldr	r3, [pc, #64]	; (8002c00 <tick+0x208>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	4a0f      	ldr	r2, [pc, #60]	; (8002c00 <tick+0x208>)
 8002bc4:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002bc6:	4b0f      	ldr	r3, [pc, #60]	; (8002c04 <tick+0x20c>)
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	4b0d      	ldr	r3, [pc, #52]	; (8002c00 <tick+0x208>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	f300 8164 	bgt.w	8002e9c <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002bd4:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <tick+0x208>)
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8002bda:	e15f      	b.n	8002e9c <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 8002bdc:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <tick+0x20c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b03      	cmp	r3, #3
 8002be2:	d16d      	bne.n	8002cc0 <tick+0x2c8>
                if (TIR_work.data == 0) {
 8002be4:	4b06      	ldr	r3, [pc, #24]	; (8002c00 <tick+0x208>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d11b      	bne.n	8002c24 <tick+0x22c>
                    IRDUTY50;
 8002bec:	4b07      	ldr	r3, [pc, #28]	; (8002c0c <tick+0x214>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2234      	movs	r2, #52	; 0x34
 8002bf2:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002bf4:	4b02      	ldr	r3, [pc, #8]	; (8002c00 <tick+0x208>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	4a01      	ldr	r2, [pc, #4]	; (8002c00 <tick+0x208>)
 8002bfc:	60d3      	str	r3, [r2, #12]
 8002bfe:	e054      	b.n	8002caa <tick+0x2b2>
 8002c00:	200001ac 	.word	0x200001ac
 8002c04:	20000164 	.word	0x20000164
 8002c08:	0800b608 	.word	0x0800b608
 8002c0c:	20000280 	.word	0x20000280
 8002c10:	0800b60c 	.word	0x0800b60c
 8002c14:	0800b610 	.word	0x0800b610
 8002c18:	0800b614 	.word	0x0800b614
 8002c1c:	0800b618 	.word	0x0800b618
 8002c20:	0800b61c 	.word	0x0800b61c
                    IRDUTY0;
 8002c24:	4b91      	ldr	r3, [pc, #580]	; (8002e6c <tick+0x474>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002c2c:	4b90      	ldr	r3, [pc, #576]	; (8002e70 <tick+0x478>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	da00      	bge.n	8002c36 <tick+0x23e>
 8002c34:	3307      	adds	r3, #7
 8002c36:	10db      	asrs	r3, r3, #3
 8002c38:	461a      	mov	r2, r3
 8002c3a:	4b8e      	ldr	r3, [pc, #568]	; (8002e74 <tick+0x47c>)
 8002c3c:	4413      	add	r3, r2
 8002c3e:	7a1b      	ldrb	r3, [r3, #8]
 8002c40:	4619      	mov	r1, r3
 8002c42:	4b8b      	ldr	r3, [pc, #556]	; (8002e70 <tick+0x478>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	425a      	negs	r2, r3
 8002c48:	f003 0307 	and.w	r3, r3, #7
 8002c4c:	f002 0207 	and.w	r2, r2, #7
 8002c50:	bf58      	it	pl
 8002c52:	4253      	negpl	r3, r2
 8002c54:	fa41 f303 	asr.w	r3, r1, r3
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d012      	beq.n	8002c86 <tick+0x28e>
                        if (3 <= TIR_work.data) {
 8002c60:	4b83      	ldr	r3, [pc, #524]	; (8002e70 <tick+0x478>)
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	2b02      	cmp	r3, #2
 8002c66:	dd08      	ble.n	8002c7a <tick+0x282>
                            TIR_work.bitcount++;
 8002c68:	4b81      	ldr	r3, [pc, #516]	; (8002e70 <tick+0x478>)
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	4a80      	ldr	r2, [pc, #512]	; (8002e70 <tick+0x478>)
 8002c70:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c72:	4b7f      	ldr	r3, [pc, #508]	; (8002e70 <tick+0x478>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	e017      	b.n	8002caa <tick+0x2b2>
                            TIR_work.data++;
 8002c7a:	4b7d      	ldr	r3, [pc, #500]	; (8002e70 <tick+0x478>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	3301      	adds	r3, #1
 8002c80:	4a7b      	ldr	r2, [pc, #492]	; (8002e70 <tick+0x478>)
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	e011      	b.n	8002caa <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 8002c86:	4b7a      	ldr	r3, [pc, #488]	; (8002e70 <tick+0x478>)
 8002c88:	68db      	ldr	r3, [r3, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	dd08      	ble.n	8002ca0 <tick+0x2a8>
                            TIR_work.bitcount++;
 8002c8e:	4b78      	ldr	r3, [pc, #480]	; (8002e70 <tick+0x478>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	3301      	adds	r3, #1
 8002c94:	4a76      	ldr	r2, [pc, #472]	; (8002e70 <tick+0x478>)
 8002c96:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c98:	4b75      	ldr	r3, [pc, #468]	; (8002e70 <tick+0x478>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	e004      	b.n	8002caa <tick+0x2b2>
                            TIR_work.data++;
 8002ca0:	4b73      	ldr	r3, [pc, #460]	; (8002e70 <tick+0x478>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	4a72      	ldr	r2, [pc, #456]	; (8002e70 <tick+0x478>)
 8002ca8:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002caa:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <tick+0x47c>)
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	4b70      	ldr	r3, [pc, #448]	; (8002e70 <tick+0x478>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	f300 80f2 	bgt.w	8002e9c <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002cb8:	4b6d      	ldr	r3, [pc, #436]	; (8002e70 <tick+0x478>)
 8002cba:	2203      	movs	r2, #3
 8002cbc:	701a      	strb	r2, [r3, #0]
            break;
 8002cbe:	e0ed      	b.n	8002e9c <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 8002cc0:	4b6c      	ldr	r3, [pc, #432]	; (8002e74 <tick+0x47c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	f040 80e9 	bne.w	8002e9c <tick+0x4a4>
                if (TIR_work.data == 0) {
 8002cca:	4b69      	ldr	r3, [pc, #420]	; (8002e70 <tick+0x478>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d109      	bne.n	8002ce6 <tick+0x2ee>
                    IRDUTY0;
 8002cd2:	4b66      	ldr	r3, [pc, #408]	; (8002e6c <tick+0x474>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002cda:	4b65      	ldr	r3, [pc, #404]	; (8002e70 <tick+0x478>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	3301      	adds	r3, #1
 8002ce0:	4a63      	ldr	r2, [pc, #396]	; (8002e70 <tick+0x478>)
 8002ce2:	60d3      	str	r3, [r2, #12]
 8002ce4:	e042      	b.n	8002d6c <tick+0x374>
                    IRDUTY50;
 8002ce6:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <tick+0x474>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2234      	movs	r2, #52	; 0x34
 8002cec:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002cee:	4b60      	ldr	r3, [pc, #384]	; (8002e70 <tick+0x478>)
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da00      	bge.n	8002cf8 <tick+0x300>
 8002cf6:	3307      	adds	r3, #7
 8002cf8:	10db      	asrs	r3, r3, #3
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b5d      	ldr	r3, [pc, #372]	; (8002e74 <tick+0x47c>)
 8002cfe:	4413      	add	r3, r2
 8002d00:	7a1b      	ldrb	r3, [r3, #8]
 8002d02:	4619      	mov	r1, r3
 8002d04:	4b5a      	ldr	r3, [pc, #360]	; (8002e70 <tick+0x478>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	425a      	negs	r2, r3
 8002d0a:	f003 0307 	and.w	r3, r3, #7
 8002d0e:	f002 0207 	and.w	r2, r2, #7
 8002d12:	bf58      	it	pl
 8002d14:	4253      	negpl	r3, r2
 8002d16:	fa41 f303 	asr.w	r3, r1, r3
 8002d1a:	f003 0301 	and.w	r3, r3, #1
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <tick+0x350>
                        if (2 <= TIR_work.data) {
 8002d22:	4b53      	ldr	r3, [pc, #332]	; (8002e70 <tick+0x478>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	dd08      	ble.n	8002d3c <tick+0x344>
                            TIR_work.bitcount++;
 8002d2a:	4b51      	ldr	r3, [pc, #324]	; (8002e70 <tick+0x478>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <tick+0x478>)
 8002d32:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d34:	4b4e      	ldr	r3, [pc, #312]	; (8002e70 <tick+0x478>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	e017      	b.n	8002d6c <tick+0x374>
                            TIR_work.data++;
 8002d3c:	4b4c      	ldr	r3, [pc, #304]	; (8002e70 <tick+0x478>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	3301      	adds	r3, #1
 8002d42:	4a4b      	ldr	r2, [pc, #300]	; (8002e70 <tick+0x478>)
 8002d44:	60d3      	str	r3, [r2, #12]
 8002d46:	e011      	b.n	8002d6c <tick+0x374>
                        if (1 <= TIR_work.data) {
 8002d48:	4b49      	ldr	r3, [pc, #292]	; (8002e70 <tick+0x478>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	dd08      	ble.n	8002d62 <tick+0x36a>
                            TIR_work.bitcount++;
 8002d50:	4b47      	ldr	r3, [pc, #284]	; (8002e70 <tick+0x478>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a46      	ldr	r2, [pc, #280]	; (8002e70 <tick+0x478>)
 8002d58:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d5a:	4b45      	ldr	r3, [pc, #276]	; (8002e70 <tick+0x478>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
 8002d60:	e004      	b.n	8002d6c <tick+0x374>
                            TIR_work.data++;
 8002d62:	4b43      	ldr	r3, [pc, #268]	; (8002e70 <tick+0x478>)
 8002d64:	68db      	ldr	r3, [r3, #12]
 8002d66:	3301      	adds	r3, #1
 8002d68:	4a41      	ldr	r2, [pc, #260]	; (8002e70 <tick+0x478>)
 8002d6a:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002d6c:	4b41      	ldr	r3, [pc, #260]	; (8002e74 <tick+0x47c>)
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <tick+0x478>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	f300 8091 	bgt.w	8002e9c <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002d7a:	4b3d      	ldr	r3, [pc, #244]	; (8002e70 <tick+0x478>)
 8002d7c:	2203      	movs	r2, #3
 8002d7e:	701a      	strb	r2, [r3, #0]
            break;
 8002d80:	e08c      	b.n	8002e9c <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 8002d82:	4b3c      	ldr	r3, [pc, #240]	; (8002e74 <tick+0x47c>)
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d126      	bne.n	8002dd8 <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8002d8a:	4b39      	ldr	r3, [pc, #228]	; (8002e70 <tick+0x478>)
 8002d8c:	691a      	ldr	r2, [r3, #16]
 8002d8e:	4b3a      	ldr	r3, [pc, #232]	; (8002e78 <tick+0x480>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	429a      	cmp	r2, r3
 8002d94:	da04      	bge.n	8002da0 <tick+0x3a8>
                    IRDUTY50;
 8002d96:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <tick+0x474>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	2234      	movs	r2, #52	; 0x34
 8002d9c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d9e:	e003      	b.n	8002da8 <tick+0x3b0>
                } else {
                    IRDUTY0;
 8002da0:	4b32      	ldr	r3, [pc, #200]	; (8002e6c <tick+0x474>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	2200      	movs	r2, #0
 8002da6:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8002da8:	4b31      	ldr	r3, [pc, #196]	; (8002e70 <tick+0x478>)
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	3301      	adds	r3, #1
 8002dae:	4a30      	ldr	r2, [pc, #192]	; (8002e70 <tick+0x478>)
 8002db0:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8002db2:	4b31      	ldr	r3, [pc, #196]	; (8002e78 <tick+0x480>)
 8002db4:	681a      	ldr	r2, [r3, #0]
 8002db6:	4b31      	ldr	r3, [pc, #196]	; (8002e7c <tick+0x484>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	441a      	add	r2, r3
 8002dbc:	4b2c      	ldr	r3, [pc, #176]	; (8002e70 <tick+0x478>)
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	dc6d      	bgt.n	8002ea0 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002dc4:	4b2a      	ldr	r3, [pc, #168]	; (8002e70 <tick+0x478>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8002dca:	482d      	ldr	r0, [pc, #180]	; (8002e80 <tick+0x488>)
 8002dcc:	f005 faa4 	bl	8008318 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
 8002dd0:	2028      	movs	r0, #40	; 0x28
 8002dd2:	f003 fdfc 	bl	80069ce <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8002dd6:	e063      	b.n	8002ea0 <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 8002dd8:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <tick+0x47c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d120      	bne.n	8002e22 <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8002de0:	4b23      	ldr	r3, [pc, #140]	; (8002e70 <tick+0x478>)
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	4b27      	ldr	r3, [pc, #156]	; (8002e84 <tick+0x48c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	da04      	bge.n	8002df6 <tick+0x3fe>
                    IRDUTY50;
 8002dec:	4b1f      	ldr	r3, [pc, #124]	; (8002e6c <tick+0x474>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2234      	movs	r2, #52	; 0x34
 8002df2:	635a      	str	r2, [r3, #52]	; 0x34
 8002df4:	e003      	b.n	8002dfe <tick+0x406>
                    IRDUTY0;
 8002df6:	4b1d      	ldr	r3, [pc, #116]	; (8002e6c <tick+0x474>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002dfe:	4b1c      	ldr	r3, [pc, #112]	; (8002e70 <tick+0x478>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	3301      	adds	r3, #1
 8002e04:	4a1a      	ldr	r2, [pc, #104]	; (8002e70 <tick+0x478>)
 8002e06:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8002e08:	4b1e      	ldr	r3, [pc, #120]	; (8002e84 <tick+0x48c>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	4b1e      	ldr	r3, [pc, #120]	; (8002e88 <tick+0x490>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	441a      	add	r2, r3
 8002e12:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <tick+0x478>)
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	dc42      	bgt.n	8002ea0 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002e1a:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <tick+0x478>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	701a      	strb	r2, [r3, #0]
            break;
 8002e20:	e03e      	b.n	8002ea0 <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 8002e22:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <tick+0x47c>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	2b05      	cmp	r3, #5
 8002e28:	d13a      	bne.n	8002ea0 <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8002e2a:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <tick+0x478>)
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	4b17      	ldr	r3, [pc, #92]	; (8002e8c <tick+0x494>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	da04      	bge.n	8002e40 <tick+0x448>
                    IRDUTY50;
 8002e36:	4b0d      	ldr	r3, [pc, #52]	; (8002e6c <tick+0x474>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2234      	movs	r2, #52	; 0x34
 8002e3c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e3e:	e003      	b.n	8002e48 <tick+0x450>
                    IRDUTY0;
 8002e40:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <tick+0x474>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2200      	movs	r2, #0
 8002e46:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002e48:	4b09      	ldr	r3, [pc, #36]	; (8002e70 <tick+0x478>)
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	4a08      	ldr	r2, [pc, #32]	; (8002e70 <tick+0x478>)
 8002e50:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 8002e52:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <tick+0x494>)
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	4b0e      	ldr	r3, [pc, #56]	; (8002e90 <tick+0x498>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	441a      	add	r2, r3
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <tick+0x478>)
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	429a      	cmp	r2, r3
 8002e62:	dc1d      	bgt.n	8002ea0 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002e64:	4b02      	ldr	r3, [pc, #8]	; (8002e70 <tick+0x478>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	701a      	strb	r2, [r3, #0]
            break;
 8002e6a:	e019      	b.n	8002ea0 <tick+0x4a8>
 8002e6c:	20000280 	.word	0x20000280
 8002e70:	200001ac 	.word	0x200001ac
 8002e74:	20000164 	.word	0x20000164
 8002e78:	0800b620 	.word	0x0800b620
 8002e7c:	0800b624 	.word	0x0800b624
 8002e80:	200003b0 	.word	0x200003b0
 8002e84:	0800b628 	.word	0x0800b628
 8002e88:	0800b62c 	.word	0x0800b62c
 8002e8c:	0800b630 	.word	0x0800b630
 8002e90:	0800b634 	.word	0x0800b634
        default:
            break;
 8002e94:	bf00      	nop
 8002e96:	e004      	b.n	8002ea2 <tick+0x4aa>
            break;
 8002e98:	bf00      	nop
 8002e9a:	e002      	b.n	8002ea2 <tick+0x4aa>
            break;
 8002e9c:	bf00      	nop
 8002e9e:	e000      	b.n	8002ea2 <tick+0x4aa>
            break;
 8002ea0:	bf00      	nop
    }
    UNLOCK();
}
 8002ea2:	bf00      	nop
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop

08002ea8 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8002eb2:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <CanInit+0x90>)
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002eb8:	4b1f      	ldr	r3, [pc, #124]	; (8002f38 <CanInit+0x90>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ebe:	4b1e      	ldr	r3, [pc, #120]	; (8002f38 <CanInit+0x90>)
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	4a1b      	ldr	r2, [pc, #108]	; (8002f38 <CanInit+0x90>)
 8002eca:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	4a18      	ldr	r2, [pc, #96]	; (8002f38 <CanInit+0x90>)
 8002ed6:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	0c1b      	lsrs	r3, r3, #16
 8002edc:	4a16      	ldr	r2, [pc, #88]	; (8002f38 <CanInit+0x90>)
 8002ede:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	4a13      	ldr	r2, [pc, #76]	; (8002f38 <CanInit+0x90>)
 8002eea:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002eec:	4b12      	ldr	r3, [pc, #72]	; (8002f38 <CanInit+0x90>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8002ef2:	4b11      	ldr	r3, [pc, #68]	; (8002f38 <CanInit+0x90>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8002ef8:	4b0f      	ldr	r3, [pc, #60]	; (8002f38 <CanInit+0x90>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8002efe:	480f      	ldr	r0, [pc, #60]	; (8002f3c <CanInit+0x94>)
 8002f00:	f002 ff8e 	bl	8005e20 <HAL_CAN_Start>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <CanInit+0x66>
 8002f0a:	f000 fd23 	bl	8003954 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8002f0e:	2102      	movs	r1, #2
 8002f10:	480a      	ldr	r0, [pc, #40]	; (8002f3c <CanInit+0x94>)
 8002f12:	f003 f9eb 	bl	80062ec <HAL_CAN_ActivateNotification>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d000      	beq.n	8002f1e <CanInit+0x76>
 8002f1c:	e7fe      	b.n	8002f1c <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002f1e:	4906      	ldr	r1, [pc, #24]	; (8002f38 <CanInit+0x90>)
 8002f20:	4806      	ldr	r0, [pc, #24]	; (8002f3c <CanInit+0x94>)
 8002f22:	f002 fe9d 	bl	8005c60 <HAL_CAN_ConfigFilter>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8002f2c:	f000 fd12 	bl	8003954 <Error_Handler>
    }
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	200001e8 	.word	0x200001e8
 8002f3c:	20000258 	.word	0x20000258

08002f40 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b08c      	sub	sp, #48	; 0x30
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	460b      	mov	r3, r1
 8002f50:	71fb      	strb	r3, [r7, #7]
 8002f52:	4613      	mov	r3, r2
 8002f54:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8002f62:	79bb      	ldrb	r3, [r7, #6]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d001      	beq.n	8002f6c <sendCan+0x2c>
 8002f68:	2304      	movs	r3, #4
 8002f6a:	e000      	b.n	8002f6e <sendCan+0x2e>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8002f70:	79fb      	ldrb	r3, [r7, #7]
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8002f74:	2301      	movs	r3, #1
 8002f76:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8002f7a:	480d      	ldr	r0, [pc, #52]	; (8002fb0 <sendCan+0x70>)
 8002f7c:	f003 f86f 	bl	800605e <HAL_CAN_GetTxMailboxesFreeLevel>
 8002f80:	4603      	mov	r3, r0
 8002f82:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8002f8a:	f107 0310 	add.w	r3, r7, #16
 8002f8e:	f107 0114 	add.w	r1, r7, #20
 8002f92:	68ba      	ldr	r2, [r7, #8]
 8002f94:	4806      	ldr	r0, [pc, #24]	; (8002fb0 <sendCan+0x70>)
 8002f96:	f002 ff87 	bl	8005ea8 <HAL_CAN_AddTxMessage>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 8002f9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d000      	beq.n	8002fa6 <sendCan+0x66>
 8002fa4:	e7fe      	b.n	8002fa4 <sendCan+0x64>
    }
}
 8002fa6:	bf00      	nop
 8002fa8:	3730      	adds	r7, #48	; 0x30
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	20000258 	.word	0x20000258

08002fb4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8002fbc:	4b09      	ldr	r3, [pc, #36]	; (8002fe4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	; (8002fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	480a      	ldr	r0, [pc, #40]	; (8002fec <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002fc4:	f003 f880 	bl	80060c8 <HAL_CAN_GetRxMessage>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d000      	beq.n	8002fd0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8002fce:	e7fe      	b.n	8002fce <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	4a06      	ldr	r2, [pc, #24]	; (8002ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002fd8:	6013      	str	r3, [r2, #0]

}
 8002fda:	bf00      	nop
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	200001c4 	.word	0x200001c4
 8002fe8:	200001cc 	.word	0x200001cc
 8002fec:	20000258 	.word	0x20000258
 8002ff0:	200001c0 	.word	0x200001c0

08002ff4 <sendIRdata>:
    uint8_t charger_on[4] = {0xCA, 0x35, 0x9E, 0x61};//
    uint8_t charger_off[4] = {0xCA, 0x35, 0x9F, 0x60};//
    uint8_t battery_full[4] = {0xCA, 0x35, 0xAA, 0x55};

void sendIRdata(uint8_t send_data[])
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
    if(TIR_getState() == Idle)
 8002ffc:	f7ff fc86 	bl	800290c <TIR_getState>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <sendIRdata+0x22>
    {
        //ir_rx->evt.disable_irq();
    	HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 8003006:	2028      	movs	r0, #40	; 0x28
 8003008:	f003 fcef 	bl	80069ea <HAL_NVIC_DisableIRQ>
        setData(NEC, send_data, 32);
 800300c:	2220      	movs	r2, #32
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	2001      	movs	r0, #1
 8003012:	f7ff fc8b 	bl	800292c <setData>
        //ir_rx->evt.enable_irq();
    }
}
 8003016:	bf00      	nop
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003026:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800302a:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800302e:	f003 0301 	and.w	r3, r3, #1
 8003032:	2b00      	cmp	r3, #0
 8003034:	d013      	beq.n	800305e <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003036:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800303a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800303e:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003042:	2b00      	cmp	r3, #0
 8003044:	d00b      	beq.n	800305e <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003046:	e000      	b.n	800304a <ITM_SendChar+0x2c>
    {
      __NOP();
 8003048:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800304a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f9      	beq.n	8003048 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003054:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003058:	687a      	ldr	r2, [r7, #4]
 800305a:	b2d2      	uxtb	r2, r2
 800305c:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800305e:	687b      	ldr	r3, [r7, #4]
}
 8003060:	4618      	mov	r0, r3
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <_write>:
//	return (len);
//}


int _write(int file, char *ptr, int len)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b086      	sub	sp, #24
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
 800307c:	e009      	b.n	8003092 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	60ba      	str	r2, [r7, #8]
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7ff ffc9 	bl	800301e <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	3301      	adds	r3, #1
 8003090:	617b      	str	r3, [r7, #20]
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	429a      	cmp	r2, r3
 8003098:	dbf1      	blt.n	800307e <_write+0x12>
	}
	return len;
 800309a:	687b      	ldr	r3, [r7, #4]
}
 800309c:	4618      	mov	r0, r3
 800309e:	3718      	adds	r7, #24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}

080030a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030a8:	f002 f82f 	bl	800510a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030ac:	f000 f83a 	bl	8003124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030b0:	f000 fb46 	bl	8003740 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80030b4:	f000 fb14 	bl	80036e0 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80030b8:	f000 f920 	bl	80032fc <MX_CAN1_Init>
  MX_TIM2_Init();
 80030bc:	f000 f954 	bl	8003368 <MX_TIM2_Init>
  MX_UART8_Init();
 80030c0:	f000 fade 	bl	8003680 <MX_UART8_Init>
  MX_TIM6_Init();
 80030c4:	f000 fa14 	bl	80034f0 <MX_TIM6_Init>
  MX_TIM7_Init();
 80030c8:	f000 fa48 	bl	800355c <MX_TIM7_Init>
  MX_TIM5_Init();
 80030cc:	f000 f9c2 	bl	8003454 <MX_TIM5_Init>
  MX_TIM14_Init();
 80030d0:	f000 fab4 	bl	800363c <MX_TIM14_Init>
  MX_TIM9_Init();
 80030d4:	f000 fa78 	bl	80035c8 <MX_TIM9_Init>
  MX_ADC1_Init();
 80030d8:	f000 f890 	bl	80031fc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);//direct set
 80030dc:	2200      	movs	r2, #0
 80030de:	2100      	movs	r1, #0
 80030e0:	2008      	movs	r0, #8
 80030e2:	f003 fc58 	bl	8006996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//direct set
 80030e6:	2008      	movs	r0, #8
 80030e8:	f003 fc71 	bl	80069ce <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);//direct set
//  HAL_NVIC_EnableIRQ(EXTI3_IRQn);//direct set

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 80030ec:	2100      	movs	r1, #0
 80030ee:	4809      	ldr	r0, [pc, #36]	; (8003114 <main+0x70>)
 80030f0:	f005 f9a2 	bl	8008438 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 80030f4:	4b07      	ldr	r3, [pc, #28]	; (8003114 <main+0x70>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	2234      	movs	r2, #52	; 0x34
 80030fa:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  //HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <main+0x74>)
 80030fe:	f005 f893 	bl	8008228 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8003102:	4806      	ldr	r0, [pc, #24]	; (800311c <main+0x78>)
 8003104:	f005 f890 	bl	8008228 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim14);//IR NEC timer, 1Mhz
 8003108:	4805      	ldr	r0, [pc, #20]	; (8003120 <main+0x7c>)
 800310a:	f005 f88d 	bl	8008228 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
	  //printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 800310e:	f7ff f9db 	bl	80024c8 <spinonce>
 8003112:	e7fc      	b.n	800310e <main+0x6a>
 8003114:	20000280 	.word	0x20000280
 8003118:	20000318 	.word	0x20000318
 800311c:	200003b0 	.word	0x200003b0
 8003120:	200003fc 	.word	0x200003fc

08003124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b094      	sub	sp, #80	; 0x50
 8003128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800312a:	f107 0320 	add.w	r3, r7, #32
 800312e:	2230      	movs	r2, #48	; 0x30
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f007 fa5a 	bl	800a5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003138:	f107 030c 	add.w	r3, r7, #12
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]
 8003140:	605a      	str	r2, [r3, #4]
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	60da      	str	r2, [r3, #12]
 8003146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <SystemClock_Config+0xd0>)
 800314a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314c:	4a29      	ldr	r2, [pc, #164]	; (80031f4 <SystemClock_Config+0xd0>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	6413      	str	r3, [r2, #64]	; 0x40
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <SystemClock_Config+0xd0>)
 8003156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <SystemClock_Config+0xd4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a24      	ldr	r2, [pc, #144]	; (80031f8 <SystemClock_Config+0xd4>)
 8003166:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <SystemClock_Config+0xd4>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003178:	2301      	movs	r3, #1
 800317a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800317c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003182:	2302      	movs	r3, #2
 8003184:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003186:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800318a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800318c:	2304      	movs	r3, #4
 800318e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003190:	23d8      	movs	r3, #216	; 0xd8
 8003192:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003194:	2302      	movs	r3, #2
 8003196:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003198:	2302      	movs	r3, #2
 800319a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800319c:	f107 0320 	add.w	r3, r7, #32
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 ff2f 	bl	8007004 <HAL_RCC_OscConfig>
 80031a6:	4603      	mov	r3, r0
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80031ac:	f000 fbd2 	bl	8003954 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80031b0:	f003 fed8 	bl	8006f64 <HAL_PWREx_EnableOverDrive>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80031ba:	f000 fbcb 	bl	8003954 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80031be:	230f      	movs	r3, #15
 80031c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80031c2:	2302      	movs	r3, #2
 80031c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80031ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80031ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80031d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80031d6:	f107 030c 	add.w	r3, r7, #12
 80031da:	2107      	movs	r1, #7
 80031dc:	4618      	mov	r0, r3
 80031de:	f004 f9b5 	bl	800754c <HAL_RCC_ClockConfig>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80031e8:	f000 fbb4 	bl	8003954 <Error_Handler>
  }
}
 80031ec:	bf00      	nop
 80031ee:	3750      	adds	r7, #80	; 0x50
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000

080031fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003202:	463b      	mov	r3, r7
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	609a      	str	r2, [r3, #8]
 800320c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800320e:	4b38      	ldr	r3, [pc, #224]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003210:	4a38      	ldr	r2, [pc, #224]	; (80032f4 <MX_ADC1_Init+0xf8>)
 8003212:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003214:	4b36      	ldr	r3, [pc, #216]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003216:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800321a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 800321c:	4b34      	ldr	r3, [pc, #208]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800321e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003222:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003224:	4b32      	ldr	r3, [pc, #200]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003226:	2201      	movs	r2, #1
 8003228:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800322a:	4b31      	ldr	r3, [pc, #196]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800322c:	2200      	movs	r2, #0
 800322e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003230:	4b2f      	ldr	r3, [pc, #188]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003238:	4b2d      	ldr	r3, [pc, #180]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800323a:	2201      	movs	r2, #1
 800323c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800323e:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003240:	2200      	movs	r2, #0
 8003242:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003244:	4b2a      	ldr	r3, [pc, #168]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <MX_ADC1_Init+0xfc>)
 8003248:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800324a:	4b29      	ldr	r3, [pc, #164]	; (80032f0 <MX_ADC1_Init+0xf4>)
 800324c:	2200      	movs	r2, #0
 800324e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003250:	4b27      	ldr	r3, [pc, #156]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003252:	2204      	movs	r2, #4
 8003254:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003256:	4b26      	ldr	r3, [pc, #152]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800325e:	4b24      	ldr	r3, [pc, #144]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003260:	2201      	movs	r2, #1
 8003262:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003264:	4822      	ldr	r0, [pc, #136]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003266:	f001 ffd1 	bl	800520c <HAL_ADC_Init>
 800326a:	4603      	mov	r3, r0
 800326c:	2b00      	cmp	r3, #0
 800326e:	d001      	beq.n	8003274 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 8003270:	f000 fb70 	bl	8003954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003274:	2301      	movs	r3, #1
 8003276:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003278:	2301      	movs	r3, #1
 800327a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 800327c:	2301      	movs	r3, #1
 800327e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003280:	463b      	mov	r3, r7
 8003282:	4619      	mov	r1, r3
 8003284:	481a      	ldr	r0, [pc, #104]	; (80032f0 <MX_ADC1_Init+0xf4>)
 8003286:	f002 f99f 	bl	80055c8 <HAL_ADC_ConfigChannel>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003290:	f000 fb60 	bl	8003954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8003294:	2302      	movs	r3, #2
 8003296:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003298:	2302      	movs	r3, #2
 800329a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800329c:	463b      	mov	r3, r7
 800329e:	4619      	mov	r1, r3
 80032a0:	4813      	ldr	r0, [pc, #76]	; (80032f0 <MX_ADC1_Init+0xf4>)
 80032a2:	f002 f991 	bl	80055c8 <HAL_ADC_ConfigChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d001      	beq.n	80032b0 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80032ac:	f000 fb52 	bl	8003954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80032b0:	2303      	movs	r3, #3
 80032b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80032b4:	2303      	movs	r3, #3
 80032b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032b8:	463b      	mov	r3, r7
 80032ba:	4619      	mov	r1, r3
 80032bc:	480c      	ldr	r0, [pc, #48]	; (80032f0 <MX_ADC1_Init+0xf4>)
 80032be:	f002 f983 	bl	80055c8 <HAL_ADC_ConfigChannel>
 80032c2:	4603      	mov	r3, r0
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d001      	beq.n	80032cc <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80032c8:	f000 fb44 	bl	8003954 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80032cc:	2304      	movs	r3, #4
 80032ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80032d0:	2304      	movs	r3, #4
 80032d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80032d4:	463b      	mov	r3, r7
 80032d6:	4619      	mov	r1, r3
 80032d8:	4805      	ldr	r0, [pc, #20]	; (80032f0 <MX_ADC1_Init+0xf4>)
 80032da:	f002 f975 	bl	80055c8 <HAL_ADC_ConfigChannel>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80032e4:	f000 fb36 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80032e8:	bf00      	nop
 80032ea:	3710      	adds	r7, #16
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	20000210 	.word	0x20000210
 80032f4:	40012000 	.word	0x40012000
 80032f8:	0f000001 	.word	0x0f000001

080032fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003300:	4b17      	ldr	r3, [pc, #92]	; (8003360 <MX_CAN1_Init+0x64>)
 8003302:	4a18      	ldr	r2, [pc, #96]	; (8003364 <MX_CAN1_Init+0x68>)
 8003304:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <MX_CAN1_Init+0x64>)
 8003308:	221b      	movs	r2, #27
 800330a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800330c:	4b14      	ldr	r3, [pc, #80]	; (8003360 <MX_CAN1_Init+0x64>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003312:	4b13      	ldr	r3, [pc, #76]	; (8003360 <MX_CAN1_Init+0x64>)
 8003314:	2200      	movs	r2, #0
 8003316:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <MX_CAN1_Init+0x64>)
 800331a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800331e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <MX_CAN1_Init+0x64>)
 8003322:	2200      	movs	r2, #0
 8003324:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003326:	4b0e      	ldr	r3, [pc, #56]	; (8003360 <MX_CAN1_Init+0x64>)
 8003328:	2200      	movs	r2, #0
 800332a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <MX_CAN1_Init+0x64>)
 800332e:	2201      	movs	r2, #1
 8003330:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003332:	4b0b      	ldr	r3, [pc, #44]	; (8003360 <MX_CAN1_Init+0x64>)
 8003334:	2200      	movs	r2, #0
 8003336:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003338:	4b09      	ldr	r3, [pc, #36]	; (8003360 <MX_CAN1_Init+0x64>)
 800333a:	2200      	movs	r2, #0
 800333c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800333e:	4b08      	ldr	r3, [pc, #32]	; (8003360 <MX_CAN1_Init+0x64>)
 8003340:	2200      	movs	r2, #0
 8003342:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003344:	4b06      	ldr	r3, [pc, #24]	; (8003360 <MX_CAN1_Init+0x64>)
 8003346:	2200      	movs	r2, #0
 8003348:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800334a:	4805      	ldr	r0, [pc, #20]	; (8003360 <MX_CAN1_Init+0x64>)
 800334c:	f002 fb8c 	bl	8005a68 <HAL_CAN_Init>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003356:	f000 fafd 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800335a:	bf00      	nop
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	20000258 	.word	0x20000258
 8003364:	40006400 	.word	0x40006400

08003368 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08e      	sub	sp, #56	; 0x38
 800336c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800336e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003372:	2200      	movs	r2, #0
 8003374:	601a      	str	r2, [r3, #0]
 8003376:	605a      	str	r2, [r3, #4]
 8003378:	609a      	str	r2, [r3, #8]
 800337a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800337c:	f107 031c 	add.w	r3, r7, #28
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003388:	463b      	mov	r3, r7
 800338a:	2200      	movs	r2, #0
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	605a      	str	r2, [r3, #4]
 8003390:	609a      	str	r2, [r3, #8]
 8003392:	60da      	str	r2, [r3, #12]
 8003394:	611a      	str	r2, [r3, #16]
 8003396:	615a      	str	r2, [r3, #20]
 8003398:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800339a:	4b2d      	ldr	r3, [pc, #180]	; (8003450 <MX_TIM2_Init+0xe8>)
 800339c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80033a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 80033a2:	4b2b      	ldr	r3, [pc, #172]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033a4:	221a      	movs	r2, #26
 80033a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033a8:	4b29      	ldr	r3, [pc, #164]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033aa:	2200      	movs	r2, #0
 80033ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033b0:	2268      	movs	r2, #104	; 0x68
 80033b2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80033b4:	4b26      	ldr	r3, [pc, #152]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033b6:	2200      	movs	r2, #0
 80033b8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ba:	4b25      	ldr	r3, [pc, #148]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033bc:	2200      	movs	r2, #0
 80033be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80033c0:	4823      	ldr	r0, [pc, #140]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033c2:	f004 fed9 	bl	8008178 <HAL_TIM_Base_Init>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d001      	beq.n	80033d0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80033cc:	f000 fac2 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80033d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033d4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80033d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80033da:	4619      	mov	r1, r3
 80033dc:	481c      	ldr	r0, [pc, #112]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033de:	f005 fba7 	bl	8008b30 <HAL_TIM_ConfigClockSource>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80033e8:	f000 fab4 	bl	8003954 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80033ec:	4818      	ldr	r0, [pc, #96]	; (8003450 <MX_TIM2_Init+0xe8>)
 80033ee:	f004 ffc2 	bl	8008376 <HAL_TIM_PWM_Init>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80033f8:	f000 faac 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	4811      	ldr	r0, [pc, #68]	; (8003450 <MX_TIM2_Init+0xe8>)
 800340c:	f006 f840 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 8003410:	4603      	mov	r3, r0
 8003412:	2b00      	cmp	r3, #0
 8003414:	d001      	beq.n	800341a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003416:	f000 fa9d 	bl	8003954 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800341a:	2360      	movs	r3, #96	; 0x60
 800341c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 800341e:	2333      	movs	r3, #51	; 0x33
 8003420:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003422:	2300      	movs	r3, #0
 8003424:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003426:	2300      	movs	r3, #0
 8003428:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800342a:	463b      	mov	r3, r7
 800342c:	2200      	movs	r2, #0
 800342e:	4619      	mov	r1, r3
 8003430:	4807      	ldr	r0, [pc, #28]	; (8003450 <MX_TIM2_Init+0xe8>)
 8003432:	f005 fa69 	bl	8008908 <HAL_TIM_PWM_ConfigChannel>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 800343c:	f000 fa8a 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003440:	4803      	ldr	r0, [pc, #12]	; (8003450 <MX_TIM2_Init+0xe8>)
 8003442:	f001 faa5 	bl	8004990 <HAL_TIM_MspPostInit>

}
 8003446:	bf00      	nop
 8003448:	3738      	adds	r7, #56	; 0x38
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	20000280 	.word	0x20000280

08003454 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345a:	f107 0310 	add.w	r3, r7, #16
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003472:	4b1d      	ldr	r3, [pc, #116]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003474:	4a1d      	ldr	r2, [pc, #116]	; (80034ec <MX_TIM5_Init+0x98>)
 8003476:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 8003478:	4b1b      	ldr	r3, [pc, #108]	; (80034e8 <MX_TIM5_Init+0x94>)
 800347a:	2208      	movs	r2, #8
 800347c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b1a      	ldr	r3, [pc, #104]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60-1;
 8003484:	4b18      	ldr	r3, [pc, #96]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003486:	223b      	movs	r2, #59	; 0x3b
 8003488:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348a:	4b17      	ldr	r3, [pc, #92]	; (80034e8 <MX_TIM5_Init+0x94>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003490:	4b15      	ldr	r3, [pc, #84]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003492:	2200      	movs	r2, #0
 8003494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003496:	4814      	ldr	r0, [pc, #80]	; (80034e8 <MX_TIM5_Init+0x94>)
 8003498:	f004 fe6e 	bl	8008178 <HAL_TIM_Base_Init>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80034a2:	f000 fa57 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80034ac:	f107 0310 	add.w	r3, r7, #16
 80034b0:	4619      	mov	r1, r3
 80034b2:	480d      	ldr	r0, [pc, #52]	; (80034e8 <MX_TIM5_Init+0x94>)
 80034b4:	f005 fb3c 	bl	8008b30 <HAL_TIM_ConfigClockSource>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80034be:	f000 fa49 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c2:	2300      	movs	r3, #0
 80034c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4806      	ldr	r0, [pc, #24]	; (80034e8 <MX_TIM5_Init+0x94>)
 80034d0:	f005 ffde 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80034da:	f000 fa3b 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80034de:	bf00      	nop
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200002cc 	.word	0x200002cc
 80034ec:	40000c00 	.word	0x40000c00

080034f0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034f6:	1d3b      	adds	r3, r7, #4
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003500:	4b14      	ldr	r3, [pc, #80]	; (8003554 <MX_TIM6_Init+0x64>)
 8003502:	4a15      	ldr	r2, [pc, #84]	; (8003558 <MX_TIM6_Init+0x68>)
 8003504:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8003506:	4b13      	ldr	r3, [pc, #76]	; (8003554 <MX_TIM6_Init+0x64>)
 8003508:	226b      	movs	r2, #107	; 0x6b
 800350a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <MX_TIM6_Init+0x64>)
 800350e:	2200      	movs	r2, #0
 8003510:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8003512:	4b10      	ldr	r3, [pc, #64]	; (8003554 <MX_TIM6_Init+0x64>)
 8003514:	f242 720f 	movw	r2, #9999	; 0x270f
 8003518:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800351a:	4b0e      	ldr	r3, [pc, #56]	; (8003554 <MX_TIM6_Init+0x64>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003520:	480c      	ldr	r0, [pc, #48]	; (8003554 <MX_TIM6_Init+0x64>)
 8003522:	f004 fe29 	bl	8008178 <HAL_TIM_Base_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800352c:	f000 fa12 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	4619      	mov	r1, r3
 800353c:	4805      	ldr	r0, [pc, #20]	; (8003554 <MX_TIM6_Init+0x64>)
 800353e:	f005 ffa7 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d001      	beq.n	800354c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003548:	f000 fa04 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800354c:	bf00      	nop
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000318 	.word	0x20000318
 8003558:	40001000 	.word	0x40001000

0800355c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003562:	1d3b      	adds	r3, r7, #4
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	605a      	str	r2, [r3, #4]
 800356a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800356c:	4b14      	ldr	r3, [pc, #80]	; (80035c0 <MX_TIM7_Init+0x64>)
 800356e:	4a15      	ldr	r2, [pc, #84]	; (80035c4 <MX_TIM7_Init+0x68>)
 8003570:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8003572:	4b13      	ldr	r3, [pc, #76]	; (80035c0 <MX_TIM7_Init+0x64>)
 8003574:	226b      	movs	r2, #107	; 0x6b
 8003576:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003578:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <MX_TIM7_Init+0x64>)
 800357a:	2200      	movs	r2, #0
 800357c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 800357e:	4b10      	ldr	r3, [pc, #64]	; (80035c0 <MX_TIM7_Init+0x64>)
 8003580:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003584:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003586:	4b0e      	ldr	r3, [pc, #56]	; (80035c0 <MX_TIM7_Init+0x64>)
 8003588:	2200      	movs	r2, #0
 800358a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800358c:	480c      	ldr	r0, [pc, #48]	; (80035c0 <MX_TIM7_Init+0x64>)
 800358e:	f004 fdf3 	bl	8008178 <HAL_TIM_Base_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003598:	f000 f9dc 	bl	8003954 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800359c:	2300      	movs	r3, #0
 800359e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80035a4:	1d3b      	adds	r3, r7, #4
 80035a6:	4619      	mov	r1, r3
 80035a8:	4805      	ldr	r0, [pc, #20]	; (80035c0 <MX_TIM7_Init+0x64>)
 80035aa:	f005 ff71 	bl	8009490 <HAL_TIMEx_MasterConfigSynchronization>
 80035ae:	4603      	mov	r3, r0
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d001      	beq.n	80035b8 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80035b4:	f000 f9ce 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80035b8:	bf00      	nop
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	20000364 	.word	0x20000364
 80035c4:	40001400 	.word	0x40001400

080035c8 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b084      	sub	sp, #16
 80035cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035ce:	463b      	mov	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	605a      	str	r2, [r3, #4]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80035da:	4b16      	ldr	r3, [pc, #88]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035dc:	4a16      	ldr	r2, [pc, #88]	; (8003638 <MX_TIM9_Init+0x70>)
 80035de:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 80035e0:	4b14      	ldr	r3, [pc, #80]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035e2:	22d7      	movs	r2, #215	; 0xd7
 80035e4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035e6:	4b13      	ldr	r3, [pc, #76]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 80035ec:	4b11      	ldr	r3, [pc, #68]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035ee:	f240 2231 	movw	r2, #561	; 0x231
 80035f2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035f4:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035fa:	4b0e      	ldr	r3, [pc, #56]	; (8003634 <MX_TIM9_Init+0x6c>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003600:	480c      	ldr	r0, [pc, #48]	; (8003634 <MX_TIM9_Init+0x6c>)
 8003602:	f004 fdb9 	bl	8008178 <HAL_TIM_Base_Init>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800360c:	f000 f9a2 	bl	8003954 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003614:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003616:	463b      	mov	r3, r7
 8003618:	4619      	mov	r1, r3
 800361a:	4806      	ldr	r0, [pc, #24]	; (8003634 <MX_TIM9_Init+0x6c>)
 800361c:	f005 fa88 	bl	8008b30 <HAL_TIM_ConfigClockSource>
 8003620:	4603      	mov	r3, r0
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003626:	f000 f995 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	200003b0 	.word	0x200003b0
 8003638:	40014000 	.word	0x40014000

0800363c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003640:	4b0d      	ldr	r3, [pc, #52]	; (8003678 <MX_TIM14_Init+0x3c>)
 8003642:	4a0e      	ldr	r2, [pc, #56]	; (800367c <MX_TIM14_Init+0x40>)
 8003644:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 8003646:	4b0c      	ldr	r3, [pc, #48]	; (8003678 <MX_TIM14_Init+0x3c>)
 8003648:	226b      	movs	r2, #107	; 0x6b
 800364a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <MX_TIM14_Init+0x3c>)
 800364e:	2200      	movs	r2, #0
 8003650:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <MX_TIM14_Init+0x3c>)
 8003654:	2203      	movs	r2, #3
 8003656:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003658:	4b07      	ldr	r3, [pc, #28]	; (8003678 <MX_TIM14_Init+0x3c>)
 800365a:	2200      	movs	r2, #0
 800365c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800365e:	4b06      	ldr	r3, [pc, #24]	; (8003678 <MX_TIM14_Init+0x3c>)
 8003660:	2200      	movs	r2, #0
 8003662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003664:	4804      	ldr	r0, [pc, #16]	; (8003678 <MX_TIM14_Init+0x3c>)
 8003666:	f004 fd87 	bl	8008178 <HAL_TIM_Base_Init>
 800366a:	4603      	mov	r3, r0
 800366c:	2b00      	cmp	r3, #0
 800366e:	d001      	beq.n	8003674 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003670:	f000 f970 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003674:	bf00      	nop
 8003676:	bd80      	pop	{r7, pc}
 8003678:	200003fc 	.word	0x200003fc
 800367c:	40002000 	.word	0x40002000

08003680 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8003684:	4b14      	ldr	r3, [pc, #80]	; (80036d8 <MX_UART8_Init+0x58>)
 8003686:	4a15      	ldr	r2, [pc, #84]	; (80036dc <MX_UART8_Init+0x5c>)
 8003688:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800368a:	4b13      	ldr	r3, [pc, #76]	; (80036d8 <MX_UART8_Init+0x58>)
 800368c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003690:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <MX_UART8_Init+0x58>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003698:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <MX_UART8_Init+0x58>)
 800369a:	2200      	movs	r2, #0
 800369c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <MX_UART8_Init+0x58>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <MX_UART8_Init+0x58>)
 80036a6:	220c      	movs	r2, #12
 80036a8:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036aa:	4b0b      	ldr	r3, [pc, #44]	; (80036d8 <MX_UART8_Init+0x58>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80036b0:	4b09      	ldr	r3, [pc, #36]	; (80036d8 <MX_UART8_Init+0x58>)
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80036b6:	4b08      	ldr	r3, [pc, #32]	; (80036d8 <MX_UART8_Init+0x58>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80036bc:	4b06      	ldr	r3, [pc, #24]	; (80036d8 <MX_UART8_Init+0x58>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80036c2:	4805      	ldr	r0, [pc, #20]	; (80036d8 <MX_UART8_Init+0x58>)
 80036c4:	f005 ff90 	bl	80095e8 <HAL_UART_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80036ce:	f000 f941 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80036d2:	bf00      	nop
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	20000448 	.word	0x20000448
 80036dc:	40007c00 	.word	0x40007c00

080036e0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036e4:	4b14      	ldr	r3, [pc, #80]	; (8003738 <MX_USART1_UART_Init+0x58>)
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <MX_USART1_UART_Init+0x5c>)
 80036e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80036ea:	4b13      	ldr	r3, [pc, #76]	; (8003738 <MX_USART1_UART_Init+0x58>)
 80036ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80036f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036f2:	4b11      	ldr	r3, [pc, #68]	; (8003738 <MX_USART1_UART_Init+0x58>)
 80036f4:	2200      	movs	r2, #0
 80036f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <MX_USART1_UART_Init+0x58>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036fe:	4b0e      	ldr	r3, [pc, #56]	; (8003738 <MX_USART1_UART_Init+0x58>)
 8003700:	2200      	movs	r2, #0
 8003702:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <MX_USART1_UART_Init+0x58>)
 8003706:	220c      	movs	r2, #12
 8003708:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800370a:	4b0b      	ldr	r3, [pc, #44]	; (8003738 <MX_USART1_UART_Init+0x58>)
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <MX_USART1_UART_Init+0x58>)
 8003712:	2200      	movs	r2, #0
 8003714:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003716:	4b08      	ldr	r3, [pc, #32]	; (8003738 <MX_USART1_UART_Init+0x58>)
 8003718:	2200      	movs	r2, #0
 800371a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800371c:	4b06      	ldr	r3, [pc, #24]	; (8003738 <MX_USART1_UART_Init+0x58>)
 800371e:	2200      	movs	r2, #0
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003722:	4805      	ldr	r0, [pc, #20]	; (8003738 <MX_USART1_UART_Init+0x58>)
 8003724:	f005 ff60 	bl	80095e8 <HAL_UART_Init>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800372e:	f000 f911 	bl	8003954 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003732:	bf00      	nop
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	200004cc 	.word	0x200004cc
 800373c:	40011000 	.word	0x40011000

08003740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b08c      	sub	sp, #48	; 0x30
 8003744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003746:	f107 031c 	add.w	r3, r7, #28
 800374a:	2200      	movs	r2, #0
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	605a      	str	r2, [r3, #4]
 8003750:	609a      	str	r2, [r3, #8]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003756:	4b79      	ldr	r3, [pc, #484]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375a:	4a78      	ldr	r2, [pc, #480]	; (800393c <MX_GPIO_Init+0x1fc>)
 800375c:	f043 0320 	orr.w	r3, r3, #32
 8003760:	6313      	str	r3, [r2, #48]	; 0x30
 8003762:	4b76      	ldr	r3, [pc, #472]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	61bb      	str	r3, [r7, #24]
 800376c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800376e:	4b73      	ldr	r3, [pc, #460]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003772:	4a72      	ldr	r2, [pc, #456]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003778:	6313      	str	r3, [r2, #48]	; 0x30
 800377a:	4b70      	ldr	r3, [pc, #448]	; (800393c <MX_GPIO_Init+0x1fc>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003786:	4b6d      	ldr	r3, [pc, #436]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800378a:	4a6c      	ldr	r2, [pc, #432]	; (800393c <MX_GPIO_Init+0x1fc>)
 800378c:	f043 0301 	orr.w	r3, r3, #1
 8003790:	6313      	str	r3, [r2, #48]	; 0x30
 8003792:	4b6a      	ldr	r3, [pc, #424]	; (800393c <MX_GPIO_Init+0x1fc>)
 8003794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003796:	f003 0301 	and.w	r3, r3, #1
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800379e:	4b67      	ldr	r3, [pc, #412]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a2:	4a66      	ldr	r2, [pc, #408]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037a4:	f043 0310 	orr.w	r3, r3, #16
 80037a8:	6313      	str	r3, [r2, #48]	; 0x30
 80037aa:	4b64      	ldr	r3, [pc, #400]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	f003 0310 	and.w	r3, r3, #16
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	4b61      	ldr	r3, [pc, #388]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	4a60      	ldr	r2, [pc, #384]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037bc:	f043 0302 	orr.w	r3, r3, #2
 80037c0:	6313      	str	r3, [r2, #48]	; 0x30
 80037c2:	4b5e      	ldr	r3, [pc, #376]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	f003 0302 	and.w	r3, r3, #2
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037ce:	4b5b      	ldr	r3, [pc, #364]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	4a5a      	ldr	r2, [pc, #360]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037d4:	f043 0308 	orr.w	r3, r3, #8
 80037d8:	6313      	str	r3, [r2, #48]	; 0x30
 80037da:	4b58      	ldr	r3, [pc, #352]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	f003 0308 	and.w	r3, r3, #8
 80037e2:	607b      	str	r3, [r7, #4]
 80037e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037e6:	4b55      	ldr	r3, [pc, #340]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	4a54      	ldr	r2, [pc, #336]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037ec:	f043 0304 	orr.w	r3, r3, #4
 80037f0:	6313      	str	r3, [r2, #48]	; 0x30
 80037f2:	4b52      	ldr	r3, [pc, #328]	; (800393c <MX_GPIO_Init+0x1fc>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	f003 0304 	and.w	r3, r3, #4
 80037fa:	603b      	str	r3, [r7, #0]
 80037fc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_Trigger6_GPIO_Port, USS_Trigger6_Pin, GPIO_PIN_RESET);
 80037fe:	2200      	movs	r2, #0
 8003800:	2180      	movs	r1, #128	; 0x80
 8003802:	484f      	ldr	r0, [pc, #316]	; (8003940 <MX_GPIO_Init+0x200>)
 8003804:	f003 fb62 	bl	8006ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8003808:	2200      	movs	r2, #0
 800380a:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 800380e:	484d      	ldr	r0, [pc, #308]	; (8003944 <MX_GPIO_Init+0x204>)
 8003810:	f003 fb5c 	bl	8006ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8003814:	2200      	movs	r2, #0
 8003816:	f247 1120 	movw	r1, #28960	; 0x7120
 800381a:	484b      	ldr	r0, [pc, #300]	; (8003948 <MX_GPIO_Init+0x208>)
 800381c:	f003 fb56 	bl	8006ecc <HAL_GPIO_WritePin>
                          |USS_Trigger1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin, GPIO_PIN_RESET);
 8003820:	2200      	movs	r2, #0
 8003822:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8003826:	4849      	ldr	r0, [pc, #292]	; (800394c <MX_GPIO_Init+0x20c>)
 8003828:	f003 fb50 	bl	8006ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USS_Trigger6_Pin */
  GPIO_InitStruct.Pin = USS_Trigger6_Pin;
 800382c:	2380      	movs	r3, #128	; 0x80
 800382e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003830:	2301      	movs	r3, #1
 8003832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003834:	2300      	movs	r3, #0
 8003836:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003838:	2300      	movs	r3, #0
 800383a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USS_Trigger6_GPIO_Port, &GPIO_InitStruct);
 800383c:	f107 031c 	add.w	r3, r7, #28
 8003840:	4619      	mov	r1, r3
 8003842:	483f      	ldr	r0, [pc, #252]	; (8003940 <MX_GPIO_Init+0x200>)
 8003844:	f003 f97e 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 8003848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800384c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800384e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003854:	2301      	movs	r3, #1
 8003856:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 8003858:	f107 031c 	add.w	r3, r7, #28
 800385c:	4619      	mov	r1, r3
 800385e:	483c      	ldr	r0, [pc, #240]	; (8003950 <MX_GPIO_Init+0x210>)
 8003860:	f003 f970 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data6_Pin */
  GPIO_InitStruct.Pin = USS_Data6_Pin;
 8003864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800386a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800386e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003870:	2301      	movs	r3, #1
 8003872:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data6_GPIO_Port, &GPIO_InitStruct);
 8003874:	f107 031c 	add.w	r3, r7, #28
 8003878:	4619      	mov	r1, r3
 800387a:	4832      	ldr	r0, [pc, #200]	; (8003944 <MX_GPIO_Init+0x204>)
 800387c:	f003 f962 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8003880:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003886:	2301      	movs	r3, #1
 8003888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388a:	2300      	movs	r3, #0
 800388c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800388e:	2300      	movs	r3, #0
 8003890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003892:	f107 031c 	add.w	r3, r7, #28
 8003896:	4619      	mov	r1, r3
 8003898:	482a      	ldr	r0, [pc, #168]	; (8003944 <MX_GPIO_Init+0x204>)
 800389a:	f003 f953 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger2_Pin Rsig_Pin Gsig_Pin Bsig_Pin
                           USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 800389e:	f247 1320 	movw	r3, #28960	; 0x7120
 80038a2:	61fb      	str	r3, [r7, #28]
                          |USS_Trigger1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038a4:	2301      	movs	r3, #1
 80038a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038ac:	2300      	movs	r3, #0
 80038ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038b0:	f107 031c 	add.w	r3, r7, #28
 80038b4:	4619      	mov	r1, r3
 80038b6:	4824      	ldr	r0, [pc, #144]	; (8003948 <MX_GPIO_Init+0x208>)
 80038b8:	f003 f944 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data2_Pin USS_Data4_Pin USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data2_Pin|USS_Data4_Pin|USS_Data1_Pin;
 80038bc:	f44f 7311 	mov.w	r3, #580	; 0x244
 80038c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80038c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80038c8:	2301      	movs	r3, #1
 80038ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038cc:	f107 031c 	add.w	r3, r7, #28
 80038d0:	4619      	mov	r1, r3
 80038d2:	481d      	ldr	r0, [pc, #116]	; (8003948 <MX_GPIO_Init+0x208>)
 80038d4:	f003 f936 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger5_Pin USS_Trigger3_Pin USS_Trigger4_Pin */
  GPIO_InitStruct.Pin = USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin;
 80038d8:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80038dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038de:	2301      	movs	r3, #1
 80038e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e2:	2300      	movs	r3, #0
 80038e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038e6:	2300      	movs	r3, #0
 80038e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80038ea:	f107 031c 	add.w	r3, r7, #28
 80038ee:	4619      	mov	r1, r3
 80038f0:	4816      	ldr	r0, [pc, #88]	; (800394c <MX_GPIO_Init+0x20c>)
 80038f2:	f003 f927 	bl	8006b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data5_Pin USS_Data3_Pin */
  GPIO_InitStruct.Pin = USS_Data5_Pin|USS_Data3_Pin;
 80038f6:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80038fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80038fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003902:	2301      	movs	r3, #1
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003906:	f107 031c 	add.w	r3, r7, #28
 800390a:	4619      	mov	r1, r3
 800390c:	480f      	ldr	r0, [pc, #60]	; (800394c <MX_GPIO_Init+0x20c>)
 800390e:	f003 f919 	bl	8006b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2017      	movs	r0, #23
 8003918:	f003 f83d 	bl	8006996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800391c:	2017      	movs	r0, #23
 800391e:	f003 f856 	bl	80069ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003922:	2200      	movs	r2, #0
 8003924:	2100      	movs	r1, #0
 8003926:	2028      	movs	r0, #40	; 0x28
 8003928:	f003 f835 	bl	8006996 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800392c:	2028      	movs	r0, #40	; 0x28
 800392e:	f003 f84e 	bl	80069ce <HAL_NVIC_EnableIRQ>

}
 8003932:	bf00      	nop
 8003934:	3730      	adds	r7, #48	; 0x30
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
 800393a:	bf00      	nop
 800393c:	40023800 	.word	0x40023800
 8003940:	40021400 	.word	0x40021400
 8003944:	40020400 	.word	0x40020400
 8003948:	40020c00 	.word	0x40020c00
 800394c:	40020800 	.word	0x40020800
 8003950:	40021000 	.word	0x40021000

08003954 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003958:	b672      	cpsid	i
}
 800395a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800395c:	e7fe      	b.n	800395c <Error_Handler+0x8>

0800395e <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1c5a      	adds	r2, r3, #1
 800396c:	60fa      	str	r2, [r7, #12]
 800396e:	3310      	adds	r3, #16
 8003970:	443b      	add	r3, r7
 8003972:	222f      	movs	r2, #47	; 0x2f
 8003974:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	60fa      	str	r2, [r7, #12]
 800397e:	3310      	adds	r3, #16
 8003980:	443b      	add	r3, r7
 8003982:	2260      	movs	r2, #96	; 0x60
 8003984:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	1c5a      	adds	r2, r3, #1
 800398c:	60fa      	str	r2, [r7, #12]
 800398e:	3310      	adds	r3, #16
 8003990:	443b      	add	r3, r7
 8003992:	2260      	movs	r2, #96	; 0x60
 8003994:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	60fa      	str	r2, [r7, #12]
 800399e:	3310      	adds	r3, #16
 80039a0:	443b      	add	r3, r7
 80039a2:	2200      	movs	r2, #0
 80039a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1c5a      	adds	r2, r3, #1
 80039ac:	60fa      	str	r2, [r7, #12]
 80039ae:	3310      	adds	r3, #16
 80039b0:	443b      	add	r3, r7
 80039b2:	2203      	movs	r2, #3
 80039b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1c5a      	adds	r2, r3, #1
 80039bc:	60fa      	str	r2, [r7, #12]
 80039be:	3310      	adds	r3, #16
 80039c0:	443b      	add	r3, r7
 80039c2:	2200      	movs	r2, #0
 80039c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	60fa      	str	r2, [r7, #12]
 80039ce:	3310      	adds	r3, #16
 80039d0:	443b      	add	r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80039d8:	1d3a      	adds	r2, r7, #4
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80039e2:	1d39      	adds	r1, r7, #4
 80039e4:	2300      	movs	r3, #0
 80039e6:	2208      	movs	r2, #8
 80039e8:	f240 6001 	movw	r0, #1537	; 0x601
 80039ec:	f7ff faa8 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80039f0:	2064      	movs	r0, #100	; 0x64
 80039f2:	f001 fbe7 	bl	80051c4 <HAL_Delay>
}
 80039f6:	bf00      	nop
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <synchronousMode>:

void synchronousMode()
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b084      	sub	sp, #16
 8003a02:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	1c5a      	adds	r2, r3, #1
 8003a0c:	60fa      	str	r2, [r7, #12]
 8003a0e:	3310      	adds	r3, #16
 8003a10:	443b      	add	r3, r7
 8003a12:	222b      	movs	r2, #43	; 0x2b
 8003a14:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	1c5a      	adds	r2, r3, #1
 8003a1c:	60fa      	str	r2, [r7, #12]
 8003a1e:	3310      	adds	r3, #16
 8003a20:	443b      	add	r3, r7
 8003a22:	220f      	movs	r2, #15
 8003a24:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	60fa      	str	r2, [r7, #12]
 8003a2e:	3310      	adds	r3, #16
 8003a30:	443b      	add	r3, r7
 8003a32:	2220      	movs	r2, #32
 8003a34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	60fa      	str	r2, [r7, #12]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	443b      	add	r3, r7
 8003a42:	2200      	movs	r2, #0
 8003a44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	60fa      	str	r2, [r7, #12]
 8003a4e:	3310      	adds	r3, #16
 8003a50:	443b      	add	r3, r7
 8003a52:	2201      	movs	r2, #1
 8003a54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	60fa      	str	r2, [r7, #12]
 8003a5e:	3310      	adds	r3, #16
 8003a60:	443b      	add	r3, r7
 8003a62:	2200      	movs	r2, #0
 8003a64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	60fa      	str	r2, [r7, #12]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	443b      	add	r3, r7
 8003a72:	2200      	movs	r2, #0
 8003a74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003a78:	1d3a      	adds	r2, r7, #4
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4413      	add	r3, r2
 8003a7e:	2200      	movs	r2, #0
 8003a80:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003a82:	1d39      	adds	r1, r7, #4
 8003a84:	2300      	movs	r3, #0
 8003a86:	2208      	movs	r2, #8
 8003a88:	f240 6001 	movw	r0, #1537	; 0x601
 8003a8c:	f7ff fa58 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003a90:	2064      	movs	r0, #100	; 0x64
 8003a92:	f001 fb97 	bl	80051c4 <HAL_Delay>
}
 8003a96:	bf00      	nop
 8003a98:	3710      	adds	r7, #16
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}

08003a9e <settingEnc>:

void settingEnc(int16_t enc)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b086      	sub	sp, #24
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
 8003aac:	e055      	b.n	8003b5a <settingEnc+0xbc>
    {
        int index = 0;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	613a      	str	r2, [r7, #16]
 8003ab8:	3318      	adds	r3, #24
 8003aba:	443b      	add	r3, r7
 8003abc:	222b      	movs	r2, #43	; 0x2b
 8003abe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	613a      	str	r2, [r7, #16]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	443b      	add	r3, r7
 8003acc:	220e      	movs	r2, #14
 8003ace:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	613a      	str	r2, [r7, #16]
 8003ad8:	3318      	adds	r3, #24
 8003ada:	443b      	add	r3, r7
 8003adc:	2220      	movs	r2, #32
 8003ade:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	b2da      	uxtb	r2, r3
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	1c59      	adds	r1, r3, #1
 8003aea:	6139      	str	r1, [r7, #16]
 8003aec:	3201      	adds	r2, #1
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	3318      	adds	r3, #24
 8003af2:	443b      	add	r3, r7
 8003af4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	613a      	str	r2, [r7, #16]
 8003afe:	88fa      	ldrh	r2, [r7, #6]
 8003b00:	b2d2      	uxtb	r2, r2
 8003b02:	3318      	adds	r3, #24
 8003b04:	443b      	add	r3, r7
 8003b06:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 8003b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003b0e:	121b      	asrs	r3, r3, #8
 8003b10:	b219      	sxth	r1, r3
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1c5a      	adds	r2, r3, #1
 8003b16:	613a      	str	r2, [r7, #16]
 8003b18:	b2ca      	uxtb	r2, r1
 8003b1a:	3318      	adds	r3, #24
 8003b1c:	443b      	add	r3, r7
 8003b1e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	1c5a      	adds	r2, r3, #1
 8003b26:	613a      	str	r2, [r7, #16]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	443b      	add	r3, r7
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003b32:	f107 0208 	add.w	r2, r7, #8
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	4413      	add	r3, r2
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003b3e:	f107 0108 	add.w	r1, r7, #8
 8003b42:	2300      	movs	r3, #0
 8003b44:	2208      	movs	r2, #8
 8003b46:	f240 6001 	movw	r0, #1537	; 0x601
 8003b4a:	f7ff f9f9 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003b4e:	2064      	movs	r0, #100	; 0x64
 8003b50:	f001 fb38 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	3301      	adds	r3, #1
 8003b58:	617b      	str	r3, [r7, #20]
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	dda6      	ble.n	8003aae <settingEnc+0x10>
    }
}
 8003b60:	bf00      	nop
 8003b62:	bf00      	nop
 8003b64:	3718      	adds	r7, #24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}

08003b6a <settingPole>:

void settingPole(int16_t pole)
{
 8003b6a:	b580      	push	{r7, lr}
 8003b6c:	b086      	sub	sp, #24
 8003b6e:	af00      	add	r7, sp, #0
 8003b70:	4603      	mov	r3, r0
 8003b72:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003b74:	2300      	movs	r3, #0
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	e055      	b.n	8003c26 <settingPole+0xbc>
    {
        int index = 0;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	613a      	str	r2, [r7, #16]
 8003b84:	3318      	adds	r3, #24
 8003b86:	443b      	add	r3, r7
 8003b88:	222b      	movs	r2, #43	; 0x2b
 8003b8a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1c5a      	adds	r2, r3, #1
 8003b92:	613a      	str	r2, [r7, #16]
 8003b94:	3318      	adds	r3, #24
 8003b96:	443b      	add	r3, r7
 8003b98:	220c      	movs	r2, #12
 8003b9a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	1c5a      	adds	r2, r3, #1
 8003ba2:	613a      	str	r2, [r7, #16]
 8003ba4:	3318      	adds	r3, #24
 8003ba6:	443b      	add	r3, r7
 8003ba8:	2220      	movs	r2, #32
 8003baa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	1c59      	adds	r1, r3, #1
 8003bb6:	6139      	str	r1, [r7, #16]
 8003bb8:	3201      	adds	r2, #1
 8003bba:	b2d2      	uxtb	r2, r2
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	443b      	add	r3, r7
 8003bc0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	1c5a      	adds	r2, r3, #1
 8003bc8:	613a      	str	r2, [r7, #16]
 8003bca:	88fa      	ldrh	r2, [r7, #6]
 8003bcc:	b2d2      	uxtb	r2, r2
 8003bce:	3318      	adds	r3, #24
 8003bd0:	443b      	add	r3, r7
 8003bd2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 8003bd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bda:	121b      	asrs	r3, r3, #8
 8003bdc:	b219      	sxth	r1, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	1c5a      	adds	r2, r3, #1
 8003be2:	613a      	str	r2, [r7, #16]
 8003be4:	b2ca      	uxtb	r2, r1
 8003be6:	3318      	adds	r3, #24
 8003be8:	443b      	add	r3, r7
 8003bea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	1c5a      	adds	r2, r3, #1
 8003bf2:	613a      	str	r2, [r7, #16]
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	443b      	add	r3, r7
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003bfe:	f107 0208 	add.w	r2, r7, #8
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	4413      	add	r3, r2
 8003c06:	2200      	movs	r2, #0
 8003c08:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003c0a:	f107 0108 	add.w	r1, r7, #8
 8003c0e:	2300      	movs	r3, #0
 8003c10:	2208      	movs	r2, #8
 8003c12:	f240 6001 	movw	r0, #1537	; 0x601
 8003c16:	f7ff f993 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003c1a:	2064      	movs	r0, #100	; 0x64
 8003c1c:	f001 fad2 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	3301      	adds	r3, #1
 8003c24:	617b      	str	r3, [r7, #20]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	dda6      	ble.n	8003b7a <settingPole+0x10>
    }
}
 8003c2c:	bf00      	nop
 8003c2e:	bf00      	nop
 8003c30:	3718      	adds	r7, #24
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}

08003c36 <settingBreak>:

void settingBreak(uint8_t enable)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b086      	sub	sp, #24
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8003c40:	2300      	movs	r3, #0
 8003c42:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	617a      	str	r2, [r7, #20]
 8003c4a:	3318      	adds	r3, #24
 8003c4c:	443b      	add	r3, r7
 8003c4e:	222b      	movs	r2, #43	; 0x2b
 8003c50:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8003c54:	697b      	ldr	r3, [r7, #20]
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	617a      	str	r2, [r7, #20]
 8003c5a:	3318      	adds	r3, #24
 8003c5c:	443b      	add	r3, r7
 8003c5e:	2207      	movs	r2, #7
 8003c60:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	617a      	str	r2, [r7, #20]
 8003c6a:	3318      	adds	r3, #24
 8003c6c:	443b      	add	r3, r7
 8003c6e:	2220      	movs	r2, #32
 8003c70:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	1c5a      	adds	r2, r3, #1
 8003c78:	617a      	str	r2, [r7, #20]
 8003c7a:	3318      	adds	r3, #24
 8003c7c:	443b      	add	r3, r7
 8003c7e:	2200      	movs	r2, #0
 8003c80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	617a      	str	r2, [r7, #20]
 8003c8a:	3318      	adds	r3, #24
 8003c8c:	443b      	add	r3, r7
 8003c8e:	79fa      	ldrb	r2, [r7, #7]
 8003c90:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	617a      	str	r2, [r7, #20]
 8003c9a:	3318      	adds	r3, #24
 8003c9c:	443b      	add	r3, r7
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	617a      	str	r2, [r7, #20]
 8003caa:	3318      	adds	r3, #24
 8003cac:	443b      	add	r3, r7
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003cb4:	f107 020c 	add.w	r2, r7, #12
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	4413      	add	r3, r2
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003cc0:	f107 010c 	add.w	r1, r7, #12
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	2208      	movs	r2, #8
 8003cc8:	f240 6001 	movw	r0, #1537	; 0x601
 8003ccc:	f7ff f938 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003cd0:	2064      	movs	r0, #100	; 0x64
 8003cd2:	f001 fa77 	bl	80051c4 <HAL_Delay>
}
 8003cd6:	bf00      	nop
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}

08003cde <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8003cde:	b580      	push	{r7, lr}
 8003ce0:	b086      	sub	sp, #24
 8003ce2:	af00      	add	r7, sp, #0
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	617a      	str	r2, [r7, #20]
 8003cf2:	3318      	adds	r3, #24
 8003cf4:	443b      	add	r3, r7
 8003cf6:	222b      	movs	r2, #43	; 0x2b
 8003cf8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1c5a      	adds	r2, r3, #1
 8003d00:	617a      	str	r2, [r7, #20]
 8003d02:	3318      	adds	r3, #24
 8003d04:	443b      	add	r3, r7
 8003d06:	2208      	movs	r2, #8
 8003d08:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	1c5a      	adds	r2, r3, #1
 8003d10:	617a      	str	r2, [r7, #20]
 8003d12:	3318      	adds	r3, #24
 8003d14:	443b      	add	r3, r7
 8003d16:	2220      	movs	r2, #32
 8003d18:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	617a      	str	r2, [r7, #20]
 8003d22:	3318      	adds	r3, #24
 8003d24:	443b      	add	r3, r7
 8003d26:	2200      	movs	r2, #0
 8003d28:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	617a      	str	r2, [r7, #20]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	b2d2      	uxtb	r2, r2
 8003d36:	3318      	adds	r3, #24
 8003d38:	443b      	add	r3, r7
 8003d3a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8003d3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003d42:	121b      	asrs	r3, r3, #8
 8003d44:	b219      	sxth	r1, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	617a      	str	r2, [r7, #20]
 8003d4c:	b2ca      	uxtb	r2, r1
 8003d4e:	3318      	adds	r3, #24
 8003d50:	443b      	add	r3, r7
 8003d52:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	1c5a      	adds	r2, r3, #1
 8003d5a:	617a      	str	r2, [r7, #20]
 8003d5c:	3318      	adds	r3, #24
 8003d5e:	443b      	add	r3, r7
 8003d60:	2200      	movs	r2, #0
 8003d62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003d66:	f107 020c 	add.w	r2, r7, #12
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	4413      	add	r3, r2
 8003d6e:	2200      	movs	r2, #0
 8003d70:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003d72:	f107 010c 	add.w	r1, r7, #12
 8003d76:	2300      	movs	r3, #0
 8003d78:	2208      	movs	r2, #8
 8003d7a:	f240 6001 	movw	r0, #1537	; 0x601
 8003d7e:	f7ff f8df 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003d82:	2064      	movs	r0, #100	; 0x64
 8003d84:	f001 fa1e 	bl	80051c4 <HAL_Delay>
}
 8003d88:	bf00      	nop
 8003d8a:	3718      	adds	r7, #24
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	617b      	str	r3, [r7, #20]
 8003d9e:	e05e      	b.n	8003e5e <settingRatedCurrent+0xce>
    {
        int index = 0;
 8003da0:	2300      	movs	r3, #0
 8003da2:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1c5a      	adds	r2, r3, #1
 8003da8:	613a      	str	r2, [r7, #16]
 8003daa:	3318      	adds	r3, #24
 8003dac:	443b      	add	r3, r7
 8003dae:	222b      	movs	r2, #43	; 0x2b
 8003db0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	1c5a      	adds	r2, r3, #1
 8003db8:	613a      	str	r2, [r7, #16]
 8003dba:	3318      	adds	r3, #24
 8003dbc:	443b      	add	r3, r7
 8003dbe:	2214      	movs	r2, #20
 8003dc0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	613a      	str	r2, [r7, #16]
 8003dca:	3318      	adds	r3, #24
 8003dcc:	443b      	add	r3, r7
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1c59      	adds	r1, r3, #1
 8003ddc:	6139      	str	r1, [r7, #16]
 8003dde:	3201      	adds	r2, #1
 8003de0:	b2d2      	uxtb	r2, r2
 8003de2:	3318      	adds	r3, #24
 8003de4:	443b      	add	r3, r7
 8003de6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003dea:	f04f 0200 	mov.w	r2, #0
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <settingRatedCurrent+0xe0>)
 8003df0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003df4:	f7fc fc18 	bl	8000628 <__aeabi_dmul>
 8003df8:	4602      	mov	r2, r0
 8003dfa:	460b      	mov	r3, r1
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc feac 	bl	8000b5c <__aeabi_d2iz>
 8003e04:	4601      	mov	r1, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1c5a      	adds	r2, r3, #1
 8003e0a:	613a      	str	r2, [r7, #16]
 8003e0c:	b2ca      	uxtb	r2, r1
 8003e0e:	3318      	adds	r3, #24
 8003e10:	443b      	add	r3, r7
 8003e12:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	613a      	str	r2, [r7, #16]
 8003e1c:	3318      	adds	r3, #24
 8003e1e:	443b      	add	r3, r7
 8003e20:	2200      	movs	r2, #0
 8003e22:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	613a      	str	r2, [r7, #16]
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	443b      	add	r3, r7
 8003e30:	2200      	movs	r2, #0
 8003e32:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003e36:	f107 0208 	add.w	r2, r7, #8
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003e42:	f107 0108 	add.w	r1, r7, #8
 8003e46:	2300      	movs	r3, #0
 8003e48:	2208      	movs	r2, #8
 8003e4a:	f240 6001 	movw	r0, #1537	; 0x601
 8003e4e:	f7ff f877 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003e52:	2064      	movs	r0, #100	; 0x64
 8003e54:	f001 f9b6 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	dd9d      	ble.n	8003da0 <settingRatedCurrent+0x10>
    }
}
 8003e64:	bf00      	nop
 8003e66:	bf00      	nop
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40240000 	.word	0x40240000

08003e74 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e05e      	b.n	8003f42 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	613a      	str	r2, [r7, #16]
 8003e8e:	3318      	adds	r3, #24
 8003e90:	443b      	add	r3, r7
 8003e92:	222b      	movs	r2, #43	; 0x2b
 8003e94:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	613a      	str	r2, [r7, #16]
 8003e9e:	3318      	adds	r3, #24
 8003ea0:	443b      	add	r3, r7
 8003ea2:	2215      	movs	r2, #21
 8003ea4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	613a      	str	r2, [r7, #16]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	443b      	add	r3, r7
 8003eb2:	2220      	movs	r2, #32
 8003eb4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	b2da      	uxtb	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	1c59      	adds	r1, r3, #1
 8003ec0:	6139      	str	r1, [r7, #16]
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	b2d2      	uxtb	r2, r2
 8003ec6:	3318      	adds	r3, #24
 8003ec8:	443b      	add	r3, r7
 8003eca:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003ece:	f04f 0200 	mov.w	r2, #0
 8003ed2:	4b20      	ldr	r3, [pc, #128]	; (8003f54 <settingMaxCurrent+0xe0>)
 8003ed4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ed8:	f7fc fba6 	bl	8000628 <__aeabi_dmul>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4610      	mov	r0, r2
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f7fc fe3a 	bl	8000b5c <__aeabi_d2iz>
 8003ee8:	4601      	mov	r1, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1c5a      	adds	r2, r3, #1
 8003eee:	613a      	str	r2, [r7, #16]
 8003ef0:	b2ca      	uxtb	r2, r1
 8003ef2:	3318      	adds	r3, #24
 8003ef4:	443b      	add	r3, r7
 8003ef6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1c5a      	adds	r2, r3, #1
 8003efe:	613a      	str	r2, [r7, #16]
 8003f00:	3318      	adds	r3, #24
 8003f02:	443b      	add	r3, r7
 8003f04:	2200      	movs	r2, #0
 8003f06:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	613a      	str	r2, [r7, #16]
 8003f10:	3318      	adds	r3, #24
 8003f12:	443b      	add	r3, r7
 8003f14:	2200      	movs	r2, #0
 8003f16:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003f1a:	f107 0208 	add.w	r2, r7, #8
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	4413      	add	r3, r2
 8003f22:	2200      	movs	r2, #0
 8003f24:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003f26:	f107 0108 	add.w	r1, r7, #8
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	f240 6001 	movw	r0, #1537	; 0x601
 8003f32:	f7ff f805 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003f36:	2064      	movs	r0, #100	; 0x64
 8003f38:	f001 f944 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	3301      	adds	r3, #1
 8003f40:	617b      	str	r3, [r7, #20]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	dd9d      	ble.n	8003e84 <settingMaxCurrent+0x10>
    }
}
 8003f48:	bf00      	nop
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	40240000 	.word	0x40240000

08003f58 <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b086      	sub	sp, #24
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	4603      	mov	r3, r0
 8003f60:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	e055      	b.n	8004014 <settingHallOffset+0xbc>
    {
        int index = 0;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1c5a      	adds	r2, r3, #1
 8003f70:	613a      	str	r2, [r7, #16]
 8003f72:	3318      	adds	r3, #24
 8003f74:	443b      	add	r3, r7
 8003f76:	222b      	movs	r2, #43	; 0x2b
 8003f78:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	1c5a      	adds	r2, r3, #1
 8003f80:	613a      	str	r2, [r7, #16]
 8003f82:	3318      	adds	r3, #24
 8003f84:	443b      	add	r3, r7
 8003f86:	2211      	movs	r2, #17
 8003f88:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	613a      	str	r2, [r7, #16]
 8003f92:	3318      	adds	r3, #24
 8003f94:	443b      	add	r3, r7
 8003f96:	2220      	movs	r2, #32
 8003f98:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	1c59      	adds	r1, r3, #1
 8003fa4:	6139      	str	r1, [r7, #16]
 8003fa6:	3201      	adds	r2, #1
 8003fa8:	b2d2      	uxtb	r2, r2
 8003faa:	3318      	adds	r3, #24
 8003fac:	443b      	add	r3, r7
 8003fae:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	613a      	str	r2, [r7, #16]
 8003fb8:	88fa      	ldrh	r2, [r7, #6]
 8003fba:	b2d2      	uxtb	r2, r2
 8003fbc:	3318      	adds	r3, #24
 8003fbe:	443b      	add	r3, r7
 8003fc0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 8003fc4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fc8:	121b      	asrs	r3, r3, #8
 8003fca:	b219      	sxth	r1, r3
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	613a      	str	r2, [r7, #16]
 8003fd2:	b2ca      	uxtb	r2, r1
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	443b      	add	r3, r7
 8003fd8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1c5a      	adds	r2, r3, #1
 8003fe0:	613a      	str	r2, [r7, #16]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	443b      	add	r3, r7
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003fec:	f107 0208 	add.w	r2, r7, #8
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ff8:	f107 0108 	add.w	r1, r7, #8
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	2208      	movs	r2, #8
 8004000:	f240 6001 	movw	r0, #1537	; 0x601
 8004004:	f7fe ff9c 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004008:	2064      	movs	r0, #100	; 0x64
 800400a:	f001 f8db 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 800400e:	697b      	ldr	r3, [r7, #20]
 8004010:	3301      	adds	r3, #1
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b01      	cmp	r3, #1
 8004018:	dda6      	ble.n	8003f68 <settingHallOffset+0x10>
    }
}
 800401a:	bf00      	nop
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <save>:

void save()
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800402a:	2300      	movs	r3, #0
 800402c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	1c5a      	adds	r2, r3, #1
 8004032:	60fa      	str	r2, [r7, #12]
 8004034:	3310      	adds	r3, #16
 8004036:	443b      	add	r3, r7
 8004038:	222b      	movs	r2, #43	; 0x2b
 800403a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	1c5a      	adds	r2, r3, #1
 8004042:	60fa      	str	r2, [r7, #12]
 8004044:	3310      	adds	r3, #16
 8004046:	443b      	add	r3, r7
 8004048:	2210      	movs	r2, #16
 800404a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	1c5a      	adds	r2, r3, #1
 8004052:	60fa      	str	r2, [r7, #12]
 8004054:	3310      	adds	r3, #16
 8004056:	443b      	add	r3, r7
 8004058:	2220      	movs	r2, #32
 800405a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	60fa      	str	r2, [r7, #12]
 8004064:	3310      	adds	r3, #16
 8004066:	443b      	add	r3, r7
 8004068:	2200      	movs	r2, #0
 800406a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	60fa      	str	r2, [r7, #12]
 8004074:	3310      	adds	r3, #16
 8004076:	443b      	add	r3, r7
 8004078:	2201      	movs	r2, #1
 800407a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	60fa      	str	r2, [r7, #12]
 8004084:	3310      	adds	r3, #16
 8004086:	443b      	add	r3, r7
 8004088:	2200      	movs	r2, #0
 800408a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	60fa      	str	r2, [r7, #12]
 8004094:	3310      	adds	r3, #16
 8004096:	443b      	add	r3, r7
 8004098:	2200      	movs	r2, #0
 800409a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800409e:	1d3a      	adds	r2, r7, #4
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	4413      	add	r3, r2
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
    index = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80040ac:	1d39      	adds	r1, r7, #4
 80040ae:	2300      	movs	r3, #0
 80040b0:	2208      	movs	r2, #8
 80040b2:	f240 6001 	movw	r0, #1537	; 0x601
 80040b6:	f7fe ff43 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80040ba:	2064      	movs	r0, #100	; 0x64
 80040bc:	f001 f882 	bl	80051c4 <HAL_Delay>
}
 80040c0:	bf00      	nop
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <startMotor>:



void startMotor()
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	af00      	add	r7, sp, #0
    enable();
 80040cc:	f000 f806 	bl	80040dc <enable>
    velocityMode();
 80040d0:	f7ff fc45 	bl	800395e <velocityMode>
    synchronousMode();
 80040d4:	f7ff fc93 	bl	80039fe <synchronousMode>
}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}

080040dc <enable>:

void enable()
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 80040e2:	4b2f      	ldr	r3, [pc, #188]	; (80041a0 <enable+0xc4>)
 80040e4:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 80040e6:	2300      	movs	r3, #0
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	e050      	b.n	800418e <enable+0xb2>
    {
        int index = 0;
 80040ec:	2300      	movs	r3, #0
 80040ee:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	613a      	str	r2, [r7, #16]
 80040f6:	3318      	adds	r3, #24
 80040f8:	443b      	add	r3, r7
 80040fa:	222b      	movs	r2, #43	; 0x2b
 80040fc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	613a      	str	r2, [r7, #16]
 8004106:	3318      	adds	r3, #24
 8004108:	443b      	add	r3, r7
 800410a:	2240      	movs	r2, #64	; 0x40
 800410c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	1c5a      	adds	r2, r3, #1
 8004114:	613a      	str	r2, [r7, #16]
 8004116:	3318      	adds	r3, #24
 8004118:	443b      	add	r3, r7
 800411a:	2260      	movs	r2, #96	; 0x60
 800411c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	1c5a      	adds	r2, r3, #1
 8004124:	613a      	str	r2, [r7, #16]
 8004126:	3318      	adds	r3, #24
 8004128:	443b      	add	r3, r7
 800412a:	2200      	movs	r2, #0
 800412c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	1c5a      	adds	r2, r3, #1
 8004134:	613a      	str	r2, [r7, #16]
 8004136:	1d39      	adds	r1, r7, #4
 8004138:	697a      	ldr	r2, [r7, #20]
 800413a:	440a      	add	r2, r1
 800413c:	7812      	ldrb	r2, [r2, #0]
 800413e:	3318      	adds	r3, #24
 8004140:	443b      	add	r3, r7
 8004142:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	613a      	str	r2, [r7, #16]
 800414c:	3318      	adds	r3, #24
 800414e:	443b      	add	r3, r7
 8004150:	2200      	movs	r2, #0
 8004152:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	613a      	str	r2, [r7, #16]
 800415c:	3318      	adds	r3, #24
 800415e:	443b      	add	r3, r7
 8004160:	2200      	movs	r2, #0
 8004162:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004166:	f107 0208 	add.w	r2, r7, #8
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	4413      	add	r3, r2
 800416e:	2200      	movs	r2, #0
 8004170:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004172:	f107 0108 	add.w	r1, r7, #8
 8004176:	2300      	movs	r3, #0
 8004178:	2208      	movs	r2, #8
 800417a:	f240 6001 	movw	r0, #1537	; 0x601
 800417e:	f7fe fedf 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004182:	2064      	movs	r0, #100	; 0x64
 8004184:	f001 f81e 	bl	80051c4 <HAL_Delay>
    for(int i =0;i<4;i++)
 8004188:	697b      	ldr	r3, [r7, #20]
 800418a:	3301      	adds	r3, #1
 800418c:	617b      	str	r3, [r7, #20]
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b03      	cmp	r3, #3
 8004192:	ddab      	ble.n	80040ec <enable+0x10>
    }
}
 8004194:	bf00      	nop
 8004196:	bf00      	nop
 8004198:	3718      	adds	r7, #24
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	0f070600 	.word	0x0f070600

080041a4 <disable>:

void disable()
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	1c5a      	adds	r2, r3, #1
 80041b2:	60fa      	str	r2, [r7, #12]
 80041b4:	3310      	adds	r3, #16
 80041b6:	443b      	add	r3, r7
 80041b8:	222b      	movs	r2, #43	; 0x2b
 80041ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	1c5a      	adds	r2, r3, #1
 80041c2:	60fa      	str	r2, [r7, #12]
 80041c4:	3310      	adds	r3, #16
 80041c6:	443b      	add	r3, r7
 80041c8:	2240      	movs	r2, #64	; 0x40
 80041ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1c5a      	adds	r2, r3, #1
 80041d2:	60fa      	str	r2, [r7, #12]
 80041d4:	3310      	adds	r3, #16
 80041d6:	443b      	add	r3, r7
 80041d8:	2260      	movs	r2, #96	; 0x60
 80041da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	1c5a      	adds	r2, r3, #1
 80041e2:	60fa      	str	r2, [r7, #12]
 80041e4:	3310      	adds	r3, #16
 80041e6:	443b      	add	r3, r7
 80041e8:	2200      	movs	r2, #0
 80041ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	1c5a      	adds	r2, r3, #1
 80041f2:	60fa      	str	r2, [r7, #12]
 80041f4:	3310      	adds	r3, #16
 80041f6:	443b      	add	r3, r7
 80041f8:	2200      	movs	r2, #0
 80041fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	60fa      	str	r2, [r7, #12]
 8004204:	3310      	adds	r3, #16
 8004206:	443b      	add	r3, r7
 8004208:	2200      	movs	r2, #0
 800420a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	1c5a      	adds	r2, r3, #1
 8004212:	60fa      	str	r2, [r7, #12]
 8004214:	3310      	adds	r3, #16
 8004216:	443b      	add	r3, r7
 8004218:	2200      	movs	r2, #0
 800421a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800421e:	1d3a      	adds	r2, r7, #4
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
    index = 0;
 8004228:	2300      	movs	r3, #0
 800422a:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800422c:	1d39      	adds	r1, r7, #4
 800422e:	2300      	movs	r3, #0
 8004230:	2208      	movs	r2, #8
 8004232:	f240 6001 	movw	r0, #1537	; 0x601
 8004236:	f7fe fe83 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800423a:	2064      	movs	r0, #100	; 0x64
 800423c:	f000 ffc2 	bl	80051c4 <HAL_Delay>
}
 8004240:	bf00      	nop
 8004242:	3710      	adds	r7, #16
 8004244:	46bd      	mov	sp, r7
 8004246:	bd80      	pop	{r7, pc}

08004248 <reset>:

void reset()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800424e:	2300      	movs	r3, #0
 8004250:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	60fa      	str	r2, [r7, #12]
 8004258:	3310      	adds	r3, #16
 800425a:	443b      	add	r3, r7
 800425c:	222b      	movs	r2, #43	; 0x2b
 800425e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	3310      	adds	r3, #16
 800426a:	443b      	add	r3, r7
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	60fa      	str	r2, [r7, #12]
 8004278:	3310      	adds	r3, #16
 800427a:	443b      	add	r3, r7
 800427c:	2260      	movs	r2, #96	; 0x60
 800427e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	60fa      	str	r2, [r7, #12]
 8004288:	3310      	adds	r3, #16
 800428a:	443b      	add	r3, r7
 800428c:	2200      	movs	r2, #0
 800428e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	60fa      	str	r2, [r7, #12]
 8004298:	3310      	adds	r3, #16
 800429a:	443b      	add	r3, r7
 800429c:	2280      	movs	r2, #128	; 0x80
 800429e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	1c5a      	adds	r2, r3, #1
 80042a6:	60fa      	str	r2, [r7, #12]
 80042a8:	3310      	adds	r3, #16
 80042aa:	443b      	add	r3, r7
 80042ac:	2200      	movs	r2, #0
 80042ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	3310      	adds	r3, #16
 80042ba:	443b      	add	r3, r7
 80042bc:	2200      	movs	r2, #0
 80042be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80042c2:	1d3a      	adds	r2, r7, #4
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4413      	add	r3, r2
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80042cc:	1d39      	adds	r1, r7, #4
 80042ce:	2300      	movs	r3, #0
 80042d0:	2208      	movs	r2, #8
 80042d2:	f240 6001 	movw	r0, #1537	; 0x601
 80042d6:	f7fe fe33 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80042da:	2064      	movs	r0, #100	; 0x64
 80042dc:	f000 ff72 	bl	80051c4 <HAL_Delay>
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <reqEnc>:

void reqEnc()
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	60fa      	str	r2, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	443b      	add	r3, r7
 80042fc:	2240      	movs	r2, #64	; 0x40
 80042fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	60fa      	str	r2, [r7, #12]
 8004308:	3310      	adds	r3, #16
 800430a:	443b      	add	r3, r7
 800430c:	226c      	movs	r2, #108	; 0x6c
 800430e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	3310      	adds	r3, #16
 800431a:	443b      	add	r3, r7
 800431c:	2260      	movs	r2, #96	; 0x60
 800431e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	60fa      	str	r2, [r7, #12]
 8004328:	3310      	adds	r3, #16
 800432a:	443b      	add	r3, r7
 800432c:	2203      	movs	r2, #3
 800432e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	60fa      	str	r2, [r7, #12]
 8004338:	3310      	adds	r3, #16
 800433a:	443b      	add	r3, r7
 800433c:	2200      	movs	r2, #0
 800433e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	60fa      	str	r2, [r7, #12]
 8004348:	3310      	adds	r3, #16
 800434a:	443b      	add	r3, r7
 800434c:	2200      	movs	r2, #0
 800434e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	60fa      	str	r2, [r7, #12]
 8004358:	3310      	adds	r3, #16
 800435a:	443b      	add	r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004362:	1d3a      	adds	r2, r7, #4
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	4413      	add	r3, r2
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800436c:	1d39      	adds	r1, r7, #4
 800436e:	2300      	movs	r3, #0
 8004370:	2208      	movs	r2, #8
 8004372:	f240 6001 	movw	r0, #1537	; 0x601
 8004376:	f7fe fde3 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800437a:	bf00      	nop
 800437c:	3710      	adds	r7, #16
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <reqState>:

void reqState()
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b084      	sub	sp, #16
 8004386:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	1c5a      	adds	r2, r3, #1
 8004390:	60fa      	str	r2, [r7, #12]
 8004392:	3310      	adds	r3, #16
 8004394:	443b      	add	r3, r7
 8004396:	2240      	movs	r2, #64	; 0x40
 8004398:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	1c5a      	adds	r2, r3, #1
 80043a0:	60fa      	str	r2, [r7, #12]
 80043a2:	3310      	adds	r3, #16
 80043a4:	443b      	add	r3, r7
 80043a6:	223f      	movs	r2, #63	; 0x3f
 80043a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1c5a      	adds	r2, r3, #1
 80043b0:	60fa      	str	r2, [r7, #12]
 80043b2:	3310      	adds	r3, #16
 80043b4:	443b      	add	r3, r7
 80043b6:	2260      	movs	r2, #96	; 0x60
 80043b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	1c5a      	adds	r2, r3, #1
 80043c0:	60fa      	str	r2, [r7, #12]
 80043c2:	3310      	adds	r3, #16
 80043c4:	443b      	add	r3, r7
 80043c6:	2200      	movs	r2, #0
 80043c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	1c5a      	adds	r2, r3, #1
 80043d0:	60fa      	str	r2, [r7, #12]
 80043d2:	3310      	adds	r3, #16
 80043d4:	443b      	add	r3, r7
 80043d6:	2200      	movs	r2, #0
 80043d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	1c5a      	adds	r2, r3, #1
 80043e0:	60fa      	str	r2, [r7, #12]
 80043e2:	3310      	adds	r3, #16
 80043e4:	443b      	add	r3, r7
 80043e6:	2200      	movs	r2, #0
 80043e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	1c5a      	adds	r2, r3, #1
 80043f0:	60fa      	str	r2, [r7, #12]
 80043f2:	3310      	adds	r3, #16
 80043f4:	443b      	add	r3, r7
 80043f6:	2200      	movs	r2, #0
 80043f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80043fc:	1d3a      	adds	r2, r7, #4
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	4413      	add	r3, r2
 8004402:	2200      	movs	r2, #0
 8004404:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004406:	1d39      	adds	r1, r7, #4
 8004408:	2300      	movs	r3, #0
 800440a:	2208      	movs	r2, #8
 800440c:	f240 6001 	movw	r0, #1537	; 0x601
 8004410:	f7fe fd96 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af00      	add	r7, sp, #0
 8004422:	4603      	mov	r3, r0
 8004424:	460a      	mov	r2, r1
 8004426:	80fb      	strh	r3, [r7, #6]
 8004428:	4613      	mov	r3, r2
 800442a:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 800442c:	88fb      	ldrh	r3, [r7, #6]
 800442e:	425b      	negs	r3, r3
 8004430:	b29b      	uxth	r3, r3
 8004432:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8004434:	2300      	movs	r3, #0
 8004436:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	617a      	str	r2, [r7, #20]
 800443e:	3318      	adds	r3, #24
 8004440:	443b      	add	r3, r7
 8004442:	2223      	movs	r2, #35	; 0x23
 8004444:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	617a      	str	r2, [r7, #20]
 800444e:	3318      	adds	r3, #24
 8004450:	443b      	add	r3, r7
 8004452:	22ff      	movs	r2, #255	; 0xff
 8004454:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	617a      	str	r2, [r7, #20]
 800445e:	3318      	adds	r3, #24
 8004460:	443b      	add	r3, r7
 8004462:	2260      	movs	r2, #96	; 0x60
 8004464:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	617a      	str	r2, [r7, #20]
 800446e:	3318      	adds	r3, #24
 8004470:	443b      	add	r3, r7
 8004472:	2203      	movs	r2, #3
 8004474:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	1c5a      	adds	r2, r3, #1
 800447c:	617a      	str	r2, [r7, #20]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	b2d2      	uxtb	r2, r2
 8004482:	3318      	adds	r3, #24
 8004484:	443b      	add	r3, r7
 8004486:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 800448a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800448e:	121b      	asrs	r3, r3, #8
 8004490:	b219      	sxth	r1, r3
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	1c5a      	adds	r2, r3, #1
 8004496:	617a      	str	r2, [r7, #20]
 8004498:	b2ca      	uxtb	r2, r1
 800449a:	3318      	adds	r3, #24
 800449c:	443b      	add	r3, r7
 800449e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	617a      	str	r2, [r7, #20]
 80044a8:	88ba      	ldrh	r2, [r7, #4]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	3318      	adds	r3, #24
 80044ae:	443b      	add	r3, r7
 80044b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 80044b4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80044b8:	121b      	asrs	r3, r3, #8
 80044ba:	b21b      	sxth	r3, r3
 80044bc:	b2d9      	uxtb	r1, r3
 80044be:	f107 020c 	add.w	r2, r7, #12
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	460a      	mov	r2, r1
 80044c8:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80044ca:	f107 010c 	add.w	r1, r7, #12
 80044ce:	2300      	movs	r3, #0
 80044d0:	2208      	movs	r2, #8
 80044d2:	f240 6001 	movw	r0, #1537	; 0x601
 80044d6:	f7fe fd33 	bl	8002f40 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80044da:	bf00      	nop
 80044dc:	3718      	adds	r7, #24
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}

080044e2 <settingKP>:

void settingKP(int16_t kp)
{
 80044e2:	b580      	push	{r7, lr}
 80044e4:	b086      	sub	sp, #24
 80044e6:	af00      	add	r7, sp, #0
 80044e8:	4603      	mov	r3, r0
 80044ea:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80044ec:	2300      	movs	r3, #0
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	e055      	b.n	800459e <settingKP+0xbc>
    {
        int index = 0;
 80044f2:	2300      	movs	r3, #0
 80044f4:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	613a      	str	r2, [r7, #16]
 80044fc:	3318      	adds	r3, #24
 80044fe:	443b      	add	r3, r7
 8004500:	221d      	movs	r2, #29
 8004502:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	613a      	str	r2, [r7, #16]
 800450c:	3318      	adds	r3, #24
 800450e:	443b      	add	r3, r7
 8004510:	2220      	movs	r2, #32
 8004512:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	613a      	str	r2, [r7, #16]
 800451c:	3318      	adds	r3, #24
 800451e:	443b      	add	r3, r7
 8004520:	2220      	movs	r2, #32
 8004522:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	b2da      	uxtb	r2, r3
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1c59      	adds	r1, r3, #1
 800452e:	6139      	str	r1, [r7, #16]
 8004530:	3201      	adds	r2, #1
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	3318      	adds	r3, #24
 8004536:	443b      	add	r3, r7
 8004538:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	613a      	str	r2, [r7, #16]
 8004542:	88fa      	ldrh	r2, [r7, #6]
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	3318      	adds	r3, #24
 8004548:	443b      	add	r3, r7
 800454a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 800454e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004552:	121b      	asrs	r3, r3, #8
 8004554:	b219      	sxth	r1, r3
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1c5a      	adds	r2, r3, #1
 800455a:	613a      	str	r2, [r7, #16]
 800455c:	b2ca      	uxtb	r2, r1
 800455e:	3318      	adds	r3, #24
 8004560:	443b      	add	r3, r7
 8004562:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1c5a      	adds	r2, r3, #1
 800456a:	613a      	str	r2, [r7, #16]
 800456c:	3318      	adds	r3, #24
 800456e:	443b      	add	r3, r7
 8004570:	2200      	movs	r2, #0
 8004572:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004576:	f107 0208 	add.w	r2, r7, #8
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	4413      	add	r3, r2
 800457e:	2200      	movs	r2, #0
 8004580:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004582:	f107 0108 	add.w	r1, r7, #8
 8004586:	2300      	movs	r3, #0
 8004588:	2208      	movs	r2, #8
 800458a:	f240 6001 	movw	r0, #1537	; 0x601
 800458e:	f7fe fcd7 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8004592:	2064      	movs	r0, #100	; 0x64
 8004594:	f000 fe16 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	3301      	adds	r3, #1
 800459c:	617b      	str	r3, [r7, #20]
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	dda6      	ble.n	80044f2 <settingKP+0x10>
    }
}
 80045a4:	bf00      	nop
 80045a6:	bf00      	nop
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <settingKI>:

void settingKI(int16_t ki)
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b086      	sub	sp, #24
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	4603      	mov	r3, r0
 80045b6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
 80045bc:	e055      	b.n	800466a <settingKI+0xbc>
    {
        int index = 0;
 80045be:	2300      	movs	r3, #0
 80045c0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	1c5a      	adds	r2, r3, #1
 80045c6:	613a      	str	r2, [r7, #16]
 80045c8:	3318      	adds	r3, #24
 80045ca:	443b      	add	r3, r7
 80045cc:	221e      	movs	r2, #30
 80045ce:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	613a      	str	r2, [r7, #16]
 80045d8:	3318      	adds	r3, #24
 80045da:	443b      	add	r3, r7
 80045dc:	2220      	movs	r2, #32
 80045de:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	613a      	str	r2, [r7, #16]
 80045e8:	3318      	adds	r3, #24
 80045ea:	443b      	add	r3, r7
 80045ec:	2220      	movs	r2, #32
 80045ee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	b2da      	uxtb	r2, r3
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	1c59      	adds	r1, r3, #1
 80045fa:	6139      	str	r1, [r7, #16]
 80045fc:	3201      	adds	r2, #1
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	3318      	adds	r3, #24
 8004602:	443b      	add	r3, r7
 8004604:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	613a      	str	r2, [r7, #16]
 800460e:	88fa      	ldrh	r2, [r7, #6]
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	3318      	adds	r3, #24
 8004614:	443b      	add	r3, r7
 8004616:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 800461a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800461e:	121b      	asrs	r3, r3, #8
 8004620:	b219      	sxth	r1, r3
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	613a      	str	r2, [r7, #16]
 8004628:	b2ca      	uxtb	r2, r1
 800462a:	3318      	adds	r3, #24
 800462c:	443b      	add	r3, r7
 800462e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	1c5a      	adds	r2, r3, #1
 8004636:	613a      	str	r2, [r7, #16]
 8004638:	3318      	adds	r3, #24
 800463a:	443b      	add	r3, r7
 800463c:	2200      	movs	r2, #0
 800463e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004642:	f107 0208 	add.w	r2, r7, #8
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	2200      	movs	r2, #0
 800464c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800464e:	f107 0108 	add.w	r1, r7, #8
 8004652:	2300      	movs	r3, #0
 8004654:	2208      	movs	r2, #8
 8004656:	f240 6001 	movw	r0, #1537	; 0x601
 800465a:	f7fe fc71 	bl	8002f40 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800465e:	2064      	movs	r0, #100	; 0x64
 8004660:	f000 fdb0 	bl	80051c4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3301      	adds	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	2b01      	cmp	r3, #1
 800466e:	dda6      	ble.n	80045be <settingKI+0x10>
    }
}
 8004670:	bf00      	nop
 8004672:	bf00      	nop
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	0000      	movs	r0, r0
 800467c:	0000      	movs	r0, r0
	...

08004680 <settingMotor>:
void settingMotor()
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8004684:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004688:	f7ff fa09 	bl	8003a9e <settingEnc>
    settingPole(POLE_PAIR);
 800468c:	200a      	movs	r0, #10
 800468e:	f7ff fa6c 	bl	8003b6a <settingPole>
    settingBreak(BREAK_OPTION);
 8004692:	2001      	movs	r0, #1
 8004694:	f7ff facf 	bl	8003c36 <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004698:	20c8      	movs	r0, #200	; 0xc8
 800469a:	f7ff fb20 	bl	8003cde <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 800469e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80046d0 <settingMotor+0x50>
 80046a2:	f7ff fb75 	bl	8003d90 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 80046a6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80046d8 <settingMotor+0x58>
 80046aa:	f7ff fbe3 	bl	8003e74 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 80046ae:	20f0      	movs	r0, #240	; 0xf0
 80046b0:	f7ff fc52 	bl	8003f58 <settingHallOffset>
    settingKP(KP_GAIN);
 80046b4:	f240 2026 	movw	r0, #550	; 0x226
 80046b8:	f7ff ff13 	bl	80044e2 <settingKP>
    settingKI(KI_GAIN);
 80046bc:	206e      	movs	r0, #110	; 0x6e
 80046be:	f7ff ff76 	bl	80045ae <settingKI>
    save();
 80046c2:	f7ff fcaf 	bl	8004024 <save>
}
 80046c6:	bf00      	nop
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	f3af 8000 	nop.w
 80046d0:	00000000 	.word	0x00000000
 80046d4:	40200000 	.word	0x40200000
 80046d8:	00000000 	.word	0x00000000
 80046dc:	40300000 	.word	0x40300000

080046e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b083      	sub	sp, #12
 80046e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80046e6:	4b0f      	ldr	r3, [pc, #60]	; (8004724 <HAL_MspInit+0x44>)
 80046e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ea:	4a0e      	ldr	r2, [pc, #56]	; (8004724 <HAL_MspInit+0x44>)
 80046ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f0:	6413      	str	r3, [r2, #64]	; 0x40
 80046f2:	4b0c      	ldr	r3, [pc, #48]	; (8004724 <HAL_MspInit+0x44>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046fe:	4b09      	ldr	r3, [pc, #36]	; (8004724 <HAL_MspInit+0x44>)
 8004700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004702:	4a08      	ldr	r2, [pc, #32]	; (8004724 <HAL_MspInit+0x44>)
 8004704:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004708:	6453      	str	r3, [r2, #68]	; 0x44
 800470a:	4b06      	ldr	r3, [pc, #24]	; (8004724 <HAL_MspInit+0x44>)
 800470c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800470e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004712:	603b      	str	r3, [r7, #0]
 8004714:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40023800 	.word	0x40023800

08004728 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b08a      	sub	sp, #40	; 0x28
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004730:	f107 0314 	add.w	r3, r7, #20
 8004734:	2200      	movs	r2, #0
 8004736:	601a      	str	r2, [r3, #0]
 8004738:	605a      	str	r2, [r3, #4]
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	60da      	str	r2, [r3, #12]
 800473e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a15      	ldr	r2, [pc, #84]	; (800479c <HAL_ADC_MspInit+0x74>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d123      	bne.n	8004792 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800474a:	4b15      	ldr	r3, [pc, #84]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6453      	str	r3, [r2, #68]	; 0x44
 8004756:	4b12      	ldr	r3, [pc, #72]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800475e:	613b      	str	r3, [r7, #16]
 8004760:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004762:	4b0f      	ldr	r3, [pc, #60]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	4a0e      	ldr	r2, [pc, #56]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 8004768:	f043 0301 	orr.w	r3, r3, #1
 800476c:	6313      	str	r3, [r2, #48]	; 0x30
 800476e:	4b0c      	ldr	r3, [pc, #48]	; (80047a0 <HAL_ADC_MspInit+0x78>)
 8004770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800477a:	231e      	movs	r3, #30
 800477c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800477e:	2303      	movs	r3, #3
 8004780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004782:	2300      	movs	r3, #0
 8004784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004786:	f107 0314 	add.w	r3, r7, #20
 800478a:	4619      	mov	r1, r3
 800478c:	4805      	ldr	r0, [pc, #20]	; (80047a4 <HAL_ADC_MspInit+0x7c>)
 800478e:	f002 f9d9 	bl	8006b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004792:	bf00      	nop
 8004794:	3728      	adds	r7, #40	; 0x28
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
 800479a:	bf00      	nop
 800479c:	40012000 	.word	0x40012000
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40020000 	.word	0x40020000

080047a8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b08a      	sub	sp, #40	; 0x28
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b0:	f107 0314 	add.w	r3, r7, #20
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	605a      	str	r2, [r3, #4]
 80047ba:	609a      	str	r2, [r3, #8]
 80047bc:	60da      	str	r2, [r3, #12]
 80047be:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a1b      	ldr	r2, [pc, #108]	; (8004834 <HAL_CAN_MspInit+0x8c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d12f      	bne.n	800482a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80047ca:	4b1b      	ldr	r3, [pc, #108]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	4a1a      	ldr	r2, [pc, #104]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80047d4:	6413      	str	r3, [r2, #64]	; 0x40
 80047d6:	4b18      	ldr	r3, [pc, #96]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047de:	613b      	str	r3, [r7, #16]
 80047e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80047e2:	4b15      	ldr	r3, [pc, #84]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a14      	ldr	r2, [pc, #80]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047e8:	f043 0308 	orr.w	r3, r3, #8
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b12      	ldr	r3, [pc, #72]	; (8004838 <HAL_CAN_MspInit+0x90>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0308 	and.w	r3, r3, #8
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80047fa:	2303      	movs	r3, #3
 80047fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004806:	2303      	movs	r3, #3
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800480a:	2309      	movs	r3, #9
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	4619      	mov	r1, r3
 8004814:	4809      	ldr	r0, [pc, #36]	; (800483c <HAL_CAN_MspInit+0x94>)
 8004816:	f002 f995 	bl	8006b44 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800481a:	2200      	movs	r2, #0
 800481c:	2100      	movs	r1, #0
 800481e:	2014      	movs	r0, #20
 8004820:	f002 f8b9 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004824:	2014      	movs	r0, #20
 8004826:	f002 f8d2 	bl	80069ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800482a:	bf00      	nop
 800482c:	3728      	adds	r7, #40	; 0x28
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}
 8004832:	bf00      	nop
 8004834:	40006400 	.word	0x40006400
 8004838:	40023800 	.word	0x40023800
 800483c:	40020c00 	.word	0x40020c00

08004840 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b088      	sub	sp, #32
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d10c      	bne.n	800486c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004852:	4b49      	ldr	r3, [pc, #292]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	4a48      	ldr	r2, [pc, #288]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004858:	f043 0301 	orr.w	r3, r3, #1
 800485c:	6413      	str	r3, [r2, #64]	; 0x40
 800485e:	4b46      	ldr	r3, [pc, #280]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	61fb      	str	r3, [r7, #28]
 8004868:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800486a:	e080      	b.n	800496e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a42      	ldr	r2, [pc, #264]	; (800497c <HAL_TIM_Base_MspInit+0x13c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d114      	bne.n	80048a0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004876:	4b40      	ldr	r3, [pc, #256]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	4a3f      	ldr	r2, [pc, #252]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 800487c:	f043 0308 	orr.w	r3, r3, #8
 8004880:	6413      	str	r3, [r2, #64]	; 0x40
 8004882:	4b3d      	ldr	r3, [pc, #244]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	61bb      	str	r3, [r7, #24]
 800488c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800488e:	2200      	movs	r2, #0
 8004890:	2100      	movs	r1, #0
 8004892:	2032      	movs	r0, #50	; 0x32
 8004894:	f002 f87f 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004898:	2032      	movs	r0, #50	; 0x32
 800489a:	f002 f898 	bl	80069ce <HAL_NVIC_EnableIRQ>
}
 800489e:	e066      	b.n	800496e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a36      	ldr	r2, [pc, #216]	; (8004980 <HAL_TIM_Base_MspInit+0x140>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d114      	bne.n	80048d4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80048aa:	4b33      	ldr	r3, [pc, #204]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a32      	ldr	r2, [pc, #200]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048b0:	f043 0310 	orr.w	r3, r3, #16
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b30      	ldr	r3, [pc, #192]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	617b      	str	r3, [r7, #20]
 80048c0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80048c2:	2200      	movs	r2, #0
 80048c4:	2100      	movs	r1, #0
 80048c6:	2036      	movs	r0, #54	; 0x36
 80048c8:	f002 f865 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048cc:	2036      	movs	r0, #54	; 0x36
 80048ce:	f002 f87e 	bl	80069ce <HAL_NVIC_EnableIRQ>
}
 80048d2:	e04c      	b.n	800496e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <HAL_TIM_Base_MspInit+0x144>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d114      	bne.n	8004908 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80048de:	4b26      	ldr	r3, [pc, #152]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	4a25      	ldr	r2, [pc, #148]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048e4:	f043 0320 	orr.w	r3, r3, #32
 80048e8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ea:	4b23      	ldr	r3, [pc, #140]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 80048ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80048f6:	2200      	movs	r2, #0
 80048f8:	2100      	movs	r1, #0
 80048fa:	2037      	movs	r0, #55	; 0x37
 80048fc:	f002 f84b 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004900:	2037      	movs	r0, #55	; 0x37
 8004902:	f002 f864 	bl	80069ce <HAL_NVIC_EnableIRQ>
}
 8004906:	e032      	b.n	800496e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a1e      	ldr	r2, [pc, #120]	; (8004988 <HAL_TIM_Base_MspInit+0x148>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d114      	bne.n	800493c <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004912:	4b19      	ldr	r3, [pc, #100]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004916:	4a18      	ldr	r2, [pc, #96]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004918:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800491c:	6453      	str	r3, [r2, #68]	; 0x44
 800491e:	4b16      	ldr	r3, [pc, #88]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004922:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004926:	60fb      	str	r3, [r7, #12]
 8004928:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800492a:	2200      	movs	r2, #0
 800492c:	2100      	movs	r1, #0
 800492e:	2018      	movs	r0, #24
 8004930:	f002 f831 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004934:	2018      	movs	r0, #24
 8004936:	f002 f84a 	bl	80069ce <HAL_NVIC_EnableIRQ>
}
 800493a:	e018      	b.n	800496e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a12      	ldr	r2, [pc, #72]	; (800498c <HAL_TIM_Base_MspInit+0x14c>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d113      	bne.n	800496e <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004946:	4b0c      	ldr	r3, [pc, #48]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	4a0b      	ldr	r2, [pc, #44]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004950:	6413      	str	r3, [r2, #64]	; 0x40
 8004952:	4b09      	ldr	r3, [pc, #36]	; (8004978 <HAL_TIM_Base_MspInit+0x138>)
 8004954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	60bb      	str	r3, [r7, #8]
 800495c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800495e:	2200      	movs	r2, #0
 8004960:	2100      	movs	r1, #0
 8004962:	202d      	movs	r0, #45	; 0x2d
 8004964:	f002 f817 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004968:	202d      	movs	r0, #45	; 0x2d
 800496a:	f002 f830 	bl	80069ce <HAL_NVIC_EnableIRQ>
}
 800496e:	bf00      	nop
 8004970:	3720      	adds	r7, #32
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	40000c00 	.word	0x40000c00
 8004980:	40001000 	.word	0x40001000
 8004984:	40001400 	.word	0x40001400
 8004988:	40014000 	.word	0x40014000
 800498c:	40002000 	.word	0x40002000

08004990 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b088      	sub	sp, #32
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004998:	f107 030c 	add.w	r3, r7, #12
 800499c:	2200      	movs	r2, #0
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	609a      	str	r2, [r3, #8]
 80049a4:	60da      	str	r2, [r3, #12]
 80049a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d11b      	bne.n	80049ea <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b2:	4b10      	ldr	r3, [pc, #64]	; (80049f4 <HAL_TIM_MspPostInit+0x64>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049b6:	4a0f      	ldr	r2, [pc, #60]	; (80049f4 <HAL_TIM_MspPostInit+0x64>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6313      	str	r3, [r2, #48]	; 0x30
 80049be:	4b0d      	ldr	r3, [pc, #52]	; (80049f4 <HAL_TIM_MspPostInit+0x64>)
 80049c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80049ca:	2320      	movs	r3, #32
 80049cc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049ce:	2302      	movs	r3, #2
 80049d0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049d6:	2300      	movs	r3, #0
 80049d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80049da:	2301      	movs	r3, #1
 80049dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049de:	f107 030c 	add.w	r3, r7, #12
 80049e2:	4619      	mov	r1, r3
 80049e4:	4804      	ldr	r0, [pc, #16]	; (80049f8 <HAL_TIM_MspPostInit+0x68>)
 80049e6:	f002 f8ad 	bl	8006b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80049ea:	bf00      	nop
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
 80049f8:	40020000 	.word	0x40020000

080049fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b0ac      	sub	sp, #176	; 0xb0
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a04:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a08:	2200      	movs	r2, #0
 8004a0a:	601a      	str	r2, [r3, #0]
 8004a0c:	605a      	str	r2, [r3, #4]
 8004a0e:	609a      	str	r2, [r3, #8]
 8004a10:	60da      	str	r2, [r3, #12]
 8004a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a14:	f107 0318 	add.w	r3, r7, #24
 8004a18:	2284      	movs	r2, #132	; 0x84
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f005 fde5 	bl	800a5ec <memset>
  if(huart->Instance==UART8)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a46      	ldr	r2, [pc, #280]	; (8004b40 <HAL_UART_MspInit+0x144>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d144      	bne.n	8004ab6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8004a2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004a30:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8004a32:	2300      	movs	r3, #0
 8004a34:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004a36:	f107 0318 	add.w	r3, r7, #24
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f002 ffac 	bl	8007998 <HAL_RCCEx_PeriphCLKConfig>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a46:	f7fe ff85 	bl	8003954 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004a4a:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	4a3d      	ldr	r2, [pc, #244]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a54:	6413      	str	r3, [r2, #64]	; 0x40
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a5e:	617b      	str	r3, [r7, #20]
 8004a60:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a62:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a66:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a68:	f043 0310 	orr.w	r3, r3, #16
 8004a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a6e:	4b35      	ldr	r3, [pc, #212]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	613b      	str	r3, [r7, #16]
 8004a78:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a80:	2302      	movs	r3, #2
 8004a82:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a86:	2300      	movs	r3, #0
 8004a88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004a92:	2308      	movs	r3, #8
 8004a94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004a98:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	482a      	ldr	r0, [pc, #168]	; (8004b48 <HAL_UART_MspInit+0x14c>)
 8004aa0:	f002 f850 	bl	8006b44 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	2053      	movs	r0, #83	; 0x53
 8004aaa:	f001 ff74 	bl	8006996 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004aae:	2053      	movs	r0, #83	; 0x53
 8004ab0:	f001 ff8d 	bl	80069ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004ab4:	e03f      	b.n	8004b36 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a24      	ldr	r2, [pc, #144]	; (8004b4c <HAL_UART_MspInit+0x150>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d13a      	bne.n	8004b36 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004ac0:	2340      	movs	r3, #64	; 0x40
 8004ac2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ac8:	f107 0318 	add.w	r3, r7, #24
 8004acc:	4618      	mov	r0, r3
 8004ace:	f002 ff63 	bl	8007998 <HAL_RCCEx_PeriphCLKConfig>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d001      	beq.n	8004adc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8004ad8:	f7fe ff3c 	bl	8003954 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae0:	4a18      	ldr	r2, [pc, #96]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004ae2:	f043 0310 	orr.w	r3, r3, #16
 8004ae6:	6453      	str	r3, [r2, #68]	; 0x44
 8004ae8:	4b16      	ldr	r3, [pc, #88]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af8:	4a12      	ldr	r2, [pc, #72]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004afa:	f043 0302 	orr.w	r3, r3, #2
 8004afe:	6313      	str	r3, [r2, #48]	; 0x30
 8004b00:	4b10      	ldr	r3, [pc, #64]	; (8004b44 <HAL_UART_MspInit+0x148>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b0c:	23c0      	movs	r3, #192	; 0xc0
 8004b0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b12:	2302      	movs	r3, #2
 8004b14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b24:	2307      	movs	r3, #7
 8004b26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b2a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b2e:	4619      	mov	r1, r3
 8004b30:	4807      	ldr	r0, [pc, #28]	; (8004b50 <HAL_UART_MspInit+0x154>)
 8004b32:	f002 f807 	bl	8006b44 <HAL_GPIO_Init>
}
 8004b36:	bf00      	nop
 8004b38:	37b0      	adds	r7, #176	; 0xb0
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40007c00 	.word	0x40007c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	40021000 	.word	0x40021000
 8004b4c:	40011000 	.word	0x40011000
 8004b50:	40020400 	.word	0x40020400

08004b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b58:	e7fe      	b.n	8004b58 <NMI_Handler+0x4>

08004b5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b5a:	b480      	push	{r7}
 8004b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b5e:	e7fe      	b.n	8004b5e <HardFault_Handler+0x4>

08004b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b60:	b480      	push	{r7}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b64:	e7fe      	b.n	8004b64 <MemManage_Handler+0x4>

08004b66 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b66:	b480      	push	{r7}
 8004b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b6a:	e7fe      	b.n	8004b6a <BusFault_Handler+0x4>

08004b6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b70:	e7fe      	b.n	8004b70 <UsageFault_Handler+0x4>

08004b72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b72:	b480      	push	{r7}
 8004b74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7e:	4770      	bx	lr

08004b80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b84:	bf00      	nop
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr

08004b8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b8e:	b480      	push	{r7}
 8004b90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	46bd      	mov	sp, r7
 8004b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9a:	4770      	bx	lr

08004b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ba0:	f000 faf0 	bl	8005184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ba4:	bf00      	nop
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004bac:	4802      	ldr	r0, [pc, #8]	; (8004bb8 <CAN1_RX0_IRQHandler+0x10>)
 8004bae:	f001 fbc3 	bl	8006338 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	bd80      	pop	{r7, pc}
 8004bb6:	bf00      	nop
 8004bb8:	20000258 	.word	0x20000258

08004bbc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8004bc0:	2040      	movs	r0, #64	; 0x40
 8004bc2:	f002 f9b7 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data5_Pin);
 8004bc6:	2080      	movs	r0, #128	; 0x80
 8004bc8:	f002 f9b4 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data2_Pin);
 8004bcc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004bd0:	f002 f9b0 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004bd4:	bf00      	nop
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004bdc:	4802      	ldr	r0, [pc, #8]	; (8004be8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004bde:	f003 fd73 	bl	80086c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004be2:	bf00      	nop
 8004be4:	bd80      	pop	{r7, pc}
 8004be6:	bf00      	nop
 8004be8:	200003b0 	.word	0x200003b0

08004bec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data3_Pin);
 8004bf0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004bf4:	f002 f99e 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data6_Pin);
 8004bf8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004bfc:	f002 f99a 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8004c00:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c04:	f002 f996 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c08:	bf00      	nop
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004c10:	4802      	ldr	r0, [pc, #8]	; (8004c1c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004c12:	f003 fd59 	bl	80086c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004c16:	bf00      	nop
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	200003fc 	.word	0x200003fc

08004c20 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c24:	4802      	ldr	r0, [pc, #8]	; (8004c30 <TIM5_IRQHandler+0x10>)
 8004c26:	f003 fd4f 	bl	80086c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	200002cc 	.word	0x200002cc

08004c34 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c38:	4802      	ldr	r0, [pc, #8]	; (8004c44 <TIM6_DAC_IRQHandler+0x10>)
 8004c3a:	f003 fd45 	bl	80086c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c3e:	bf00      	nop
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	20000318 	.word	0x20000318

08004c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c4c:	4802      	ldr	r0, [pc, #8]	; (8004c58 <TIM7_IRQHandler+0x10>)
 8004c4e:	f003 fd3b 	bl	80086c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c52:	bf00      	nop
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	20000364 	.word	0x20000364

08004c5c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004c60:	4802      	ldr	r0, [pc, #8]	; (8004c6c <UART8_IRQHandler+0x10>)
 8004c62:	f004 fd0f 	bl	8009684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004c66:	bf00      	nop
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20000448 	.word	0x20000448

08004c70 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USS_Data4_Pin);
 8004c74:	2004      	movs	r0, #4
 8004c76:	f002 f95d 	bl	8006f34 <HAL_GPIO_EXTI_IRQHandler>
}
 8004c7a:	bf00      	nop
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b086      	sub	sp, #24
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	60f8      	str	r0, [r7, #12]
 8004c86:	60b9      	str	r1, [r7, #8]
 8004c88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e00a      	b.n	8004ca6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004c90:	f3af 8000 	nop.w
 8004c94:	4601      	mov	r1, r0
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	60ba      	str	r2, [r7, #8]
 8004c9c:	b2ca      	uxtb	r2, r1
 8004c9e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	3301      	adds	r3, #1
 8004ca4:	617b      	str	r3, [r7, #20]
 8004ca6:	697a      	ldr	r2, [r7, #20]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	dbf0      	blt.n	8004c90 <_read+0x12>
	}

return len;
 8004cae:	687b      	ldr	r3, [r7, #4]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b083      	sub	sp, #12
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
	return -1;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	370c      	adds	r7, #12
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cce:	4770      	bx	lr

08004cd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ce0:	605a      	str	r2, [r3, #4]
	return 0;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <_isatty>:

int _isatty(int file)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
	return 1;
 8004cf8:	2301      	movs	r3, #1
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
	return 0;
 8004d12:	2300      	movs	r3, #0
}
 8004d14:	4618      	mov	r0, r3
 8004d16:	3714      	adds	r7, #20
 8004d18:	46bd      	mov	sp, r7
 8004d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1e:	4770      	bx	lr

08004d20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d28:	4a14      	ldr	r2, [pc, #80]	; (8004d7c <_sbrk+0x5c>)
 8004d2a:	4b15      	ldr	r3, [pc, #84]	; (8004d80 <_sbrk+0x60>)
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d34:	4b13      	ldr	r3, [pc, #76]	; (8004d84 <_sbrk+0x64>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d102      	bne.n	8004d42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d3c:	4b11      	ldr	r3, [pc, #68]	; (8004d84 <_sbrk+0x64>)
 8004d3e:	4a12      	ldr	r2, [pc, #72]	; (8004d88 <_sbrk+0x68>)
 8004d40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d42:	4b10      	ldr	r3, [pc, #64]	; (8004d84 <_sbrk+0x64>)
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4413      	add	r3, r2
 8004d4a:	693a      	ldr	r2, [r7, #16]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d207      	bcs.n	8004d60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d50:	f005 fc22 	bl	800a598 <__errno>
 8004d54:	4603      	mov	r3, r0
 8004d56:	220c      	movs	r2, #12
 8004d58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d5a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d5e:	e009      	b.n	8004d74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d60:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <_sbrk+0x64>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d66:	4b07      	ldr	r3, [pc, #28]	; (8004d84 <_sbrk+0x64>)
 8004d68:	681a      	ldr	r2, [r3, #0]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	4a05      	ldr	r2, [pc, #20]	; (8004d84 <_sbrk+0x64>)
 8004d70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004d72:	68fb      	ldr	r3, [r7, #12]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}
 8004d7c:	20050000 	.word	0x20050000
 8004d80:	00000400 	.word	0x00000400
 8004d84:	20000550 	.word	0x20000550
 8004d88:	200005a0 	.word	0x200005a0

08004d8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <SystemInit+0x20>)
 8004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d96:	4a05      	ldr	r2, [pc, #20]	; (8004dac <SystemInit+0x20>)
 8004d98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004da0:	bf00      	nop
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	e000ed00 	.word	0xe000ed00

08004db0 <USSn_Trigger>:
extern uint32_t pre_usTick;



void USSn_Trigger(int USSn)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
 8004db8:	4848      	ldr	r0, [pc, #288]	; (8004edc <USSn_Trigger+0x12c>)
 8004dba:	f003 fa35 	bl	8008228 <HAL_TIM_Base_Start_IT>
	switch(USSn){
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d835      	bhi.n	8004e32 <USSn_Trigger+0x82>
 8004dc6:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <USSn_Trigger+0x1c>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004de5 	.word	0x08004de5
 8004dd0:	08004df1 	.word	0x08004df1
 8004dd4:	08004dff 	.word	0x08004dff
 8004dd8:	08004e0d 	.word	0x08004e0d
 8004ddc:	08004e1b 	.word	0x08004e1b
 8004de0:	08004e27 	.word	0x08004e27
		case 1: USS1_Trigger_Set; break;
 8004de4:	2201      	movs	r2, #1
 8004de6:	2120      	movs	r1, #32
 8004de8:	483d      	ldr	r0, [pc, #244]	; (8004ee0 <USSn_Trigger+0x130>)
 8004dea:	f002 f86f 	bl	8006ecc <HAL_GPIO_WritePin>
 8004dee:	e020      	b.n	8004e32 <USSn_Trigger+0x82>
		case 2: USS2_Trigger_Set; break;
 8004df0:	2201      	movs	r2, #1
 8004df2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004df6:	483a      	ldr	r0, [pc, #232]	; (8004ee0 <USSn_Trigger+0x130>)
 8004df8:	f002 f868 	bl	8006ecc <HAL_GPIO_WritePin>
 8004dfc:	e019      	b.n	8004e32 <USSn_Trigger+0x82>
		case 3: USS3_Trigger_Set; break;
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e04:	4837      	ldr	r0, [pc, #220]	; (8004ee4 <USSn_Trigger+0x134>)
 8004e06:	f002 f861 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e0a:	e012      	b.n	8004e32 <USSn_Trigger+0x82>
		case 4: USS4_Trigger_Set; break;
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e12:	4834      	ldr	r0, [pc, #208]	; (8004ee4 <USSn_Trigger+0x134>)
 8004e14:	f002 f85a 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e18:	e00b      	b.n	8004e32 <USSn_Trigger+0x82>
		case 5: USS5_Trigger_Set; break;
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	2140      	movs	r1, #64	; 0x40
 8004e1e:	4831      	ldr	r0, [pc, #196]	; (8004ee4 <USSn_Trigger+0x134>)
 8004e20:	f002 f854 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e24:	e005      	b.n	8004e32 <USSn_Trigger+0x82>
		case 6: USS6_Trigger_Set; break;
 8004e26:	2201      	movs	r2, #1
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	482f      	ldr	r0, [pc, #188]	; (8004ee8 <USSn_Trigger+0x138>)
 8004e2c:	f002 f84e 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e30:	bf00      	nop
	}
	USS_start[USSn-1] = us_Tick;//start uss trigger
 8004e32:	4b2e      	ldr	r3, [pc, #184]	; (8004eec <USSn_Trigger+0x13c>)
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3b01      	subs	r3, #1
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <USSn_Trigger+0x140>)
 8004e3e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	pre_usTick = us_Tick;
 8004e42:	4b2a      	ldr	r3, [pc, #168]	; (8004eec <USSn_Trigger+0x13c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2b      	ldr	r2, [pc, #172]	; (8004ef4 <USSn_Trigger+0x144>)
 8004e48:	6013      	str	r3, [r2, #0]

	for(int i=0;i<1000;i++){;}//wait about 200us
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e002      	b.n	8004e56 <USSn_Trigger+0xa6>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	3301      	adds	r3, #1
 8004e54:	60fb      	str	r3, [r7, #12]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e5c:	dbf8      	blt.n	8004e50 <USSn_Trigger+0xa0>

	switch(USSn){
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3b01      	subs	r3, #1
 8004e62:	2b05      	cmp	r3, #5
 8004e64:	d835      	bhi.n	8004ed2 <USSn_Trigger+0x122>
 8004e66:	a201      	add	r2, pc, #4	; (adr r2, 8004e6c <USSn_Trigger+0xbc>)
 8004e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e6c:	08004e85 	.word	0x08004e85
 8004e70:	08004e91 	.word	0x08004e91
 8004e74:	08004e9f 	.word	0x08004e9f
 8004e78:	08004ead 	.word	0x08004ead
 8004e7c:	08004ebb 	.word	0x08004ebb
 8004e80:	08004ec7 	.word	0x08004ec7
		case 1: USS1_Trigger_ReSet; break;
 8004e84:	2200      	movs	r2, #0
 8004e86:	2120      	movs	r1, #32
 8004e88:	4815      	ldr	r0, [pc, #84]	; (8004ee0 <USSn_Trigger+0x130>)
 8004e8a:	f002 f81f 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e8e:	e020      	b.n	8004ed2 <USSn_Trigger+0x122>
		case 2: USS2_Trigger_ReSet; break;
 8004e90:	2200      	movs	r2, #0
 8004e92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e96:	4812      	ldr	r0, [pc, #72]	; (8004ee0 <USSn_Trigger+0x130>)
 8004e98:	f002 f818 	bl	8006ecc <HAL_GPIO_WritePin>
 8004e9c:	e019      	b.n	8004ed2 <USSn_Trigger+0x122>
		case 3: USS3_Trigger_ReSet; break;
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ea4:	480f      	ldr	r0, [pc, #60]	; (8004ee4 <USSn_Trigger+0x134>)
 8004ea6:	f002 f811 	bl	8006ecc <HAL_GPIO_WritePin>
 8004eaa:	e012      	b.n	8004ed2 <USSn_Trigger+0x122>
		case 4: USS4_Trigger_ReSet; break;
 8004eac:	2200      	movs	r2, #0
 8004eae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004eb2:	480c      	ldr	r0, [pc, #48]	; (8004ee4 <USSn_Trigger+0x134>)
 8004eb4:	f002 f80a 	bl	8006ecc <HAL_GPIO_WritePin>
 8004eb8:	e00b      	b.n	8004ed2 <USSn_Trigger+0x122>
		case 5: USS5_Trigger_ReSet; break;
 8004eba:	2200      	movs	r2, #0
 8004ebc:	2140      	movs	r1, #64	; 0x40
 8004ebe:	4809      	ldr	r0, [pc, #36]	; (8004ee4 <USSn_Trigger+0x134>)
 8004ec0:	f002 f804 	bl	8006ecc <HAL_GPIO_WritePin>
 8004ec4:	e005      	b.n	8004ed2 <USSn_Trigger+0x122>
		case 6: USS6_Trigger_ReSet; break;
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2180      	movs	r1, #128	; 0x80
 8004eca:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <USSn_Trigger+0x138>)
 8004ecc:	f001 fffe 	bl	8006ecc <HAL_GPIO_WritePin>
 8004ed0:	bf00      	nop
	}
}
 8004ed2:	bf00      	nop
 8004ed4:	3710      	adds	r7, #16
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	200002cc 	.word	0x200002cc
 8004ee0:	40020c00 	.word	0x40020c00
 8004ee4:	40020800 	.word	0x40020800
 8004ee8:	40021400 	.word	0x40021400
 8004eec:	200000f4 	.word	0x200000f4
 8004ef0:	20000554 	.word	0x20000554
 8004ef4:	200000fc 	.word	0x200000fc

08004ef8 <USSn_DataRead>:

uint8_t USSn_DataRead(int USSn)
{
 8004ef8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
	int32_t USS_tmp = 0;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
	int32_t USS_calc = 0;
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]

	USS_tmp = USS_end[USSn-1]-USS_start[USSn-1];
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	3b01      	subs	r3, #1
 8004f0e:	4a68      	ldr	r2, [pc, #416]	; (80050b0 <USSn_DataRead+0x1b8>)
 8004f10:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	4966      	ldr	r1, [pc, #408]	; (80050b4 <USSn_DataRead+0x1bc>)
 8004f1a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	60fb      	str	r3, [r7, #12]
	USS_calc = (0.0361*(float)USS_tmp)*(0.001*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^3, (0.0361*10^-6)*x^3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	ee07 3a90 	vmov	s15, r3
 8004f28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f2c:	ee17 0a90 	vmov	r0, s15
 8004f30:	f7fb fb22 	bl	8000578 <__aeabi_f2d>
 8004f34:	a356      	add	r3, pc, #344	; (adr r3, 8005090 <USSn_DataRead+0x198>)
 8004f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f3a:	f7fb fb75 	bl	8000628 <__aeabi_dmul>
 8004f3e:	4602      	mov	r2, r0
 8004f40:	460b      	mov	r3, r1
 8004f42:	4614      	mov	r4, r2
 8004f44:	461d      	mov	r5, r3
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	ee07 3a90 	vmov	s15, r3
 8004f4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f50:	ee17 0a90 	vmov	r0, s15
 8004f54:	f7fb fb10 	bl	8000578 <__aeabi_f2d>
 8004f58:	a34f      	add	r3, pc, #316	; (adr r3, 8005098 <USSn_DataRead+0x1a0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb fb63 	bl	8000628 <__aeabi_dmul>
 8004f62:	4602      	mov	r2, r0
 8004f64:	460b      	mov	r3, r1
 8004f66:	4620      	mov	r0, r4
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f7fb fb5d 	bl	8000628 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	461d      	mov	r5, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f80:	ee17 0a90 	vmov	r0, s15
 8004f84:	f7fb faf8 	bl	8000578 <__aeabi_f2d>
 8004f88:	a343      	add	r3, pc, #268	; (adr r3, 8005098 <USSn_DataRead+0x1a0>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fb4b 	bl	8000628 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fb45 	bl	8000628 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4610      	mov	r0, r2
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	f7fb fdd9 	bl	8000b5c <__aeabi_d2iz>
 8004faa:	4603      	mov	r3, r0
 8004fac:	60bb      	str	r3, [r7, #8]
	//printf("x3[0]: %d \n", USS_calc[0]);
	USS_calc -= (0.108*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^2, (0.108*10^-3)*x^2
 8004fae:	68b8      	ldr	r0, [r7, #8]
 8004fb0:	f7fb fad0 	bl	8000554 <__aeabi_i2d>
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	460d      	mov	r5, r1
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	ee07 3a90 	vmov	s15, r3
 8004fbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fc2:	ee17 0a90 	vmov	r0, s15
 8004fc6:	f7fb fad7 	bl	8000578 <__aeabi_f2d>
 8004fca:	a335      	add	r3, pc, #212	; (adr r3, 80050a0 <USSn_DataRead+0x1a8>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb fb2a 	bl	8000628 <__aeabi_dmul>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	4690      	mov	r8, r2
 8004fda:	4699      	mov	r9, r3
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	ee07 3a90 	vmov	s15, r3
 8004fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fe6:	ee17 0a90 	vmov	r0, s15
 8004fea:	f7fb fac5 	bl	8000578 <__aeabi_f2d>
 8004fee:	a32a      	add	r3, pc, #168	; (adr r3, 8005098 <USSn_DataRead+0x1a0>)
 8004ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff4:	f7fb fb18 	bl	8000628 <__aeabi_dmul>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	460b      	mov	r3, r1
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	4649      	mov	r1, r9
 8005000:	f7fb fb12 	bl	8000628 <__aeabi_dmul>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4620      	mov	r0, r4
 800500a:	4629      	mov	r1, r5
 800500c:	f7fb f954 	bl	80002b8 <__aeabi_dsub>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4610      	mov	r0, r2
 8005016:	4619      	mov	r1, r3
 8005018:	f7fb fda0 	bl	8000b5c <__aeabi_d2iz>
 800501c:	4603      	mov	r3, r0
 800501e:	60bb      	str	r3, [r7, #8]
	//printf("x2[0]: %d \n", USS_calc[0]);
	USS_calc += (0.933*(float)USS_tmp);//x^1, (0.933)*x^1
 8005020:	68b8      	ldr	r0, [r7, #8]
 8005022:	f7fb fa97 	bl	8000554 <__aeabi_i2d>
 8005026:	4604      	mov	r4, r0
 8005028:	460d      	mov	r5, r1
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	ee07 3a90 	vmov	s15, r3
 8005030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005034:	ee17 0a90 	vmov	r0, s15
 8005038:	f7fb fa9e 	bl	8000578 <__aeabi_f2d>
 800503c:	a31a      	add	r3, pc, #104	; (adr r3, 80050a8 <USSn_DataRead+0x1b0>)
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	f7fb faf1 	bl	8000628 <__aeabi_dmul>
 8005046:	4602      	mov	r2, r0
 8005048:	460b      	mov	r3, r1
 800504a:	4620      	mov	r0, r4
 800504c:	4629      	mov	r1, r5
 800504e:	f7fb f935 	bl	80002bc <__adddf3>
 8005052:	4602      	mov	r2, r0
 8005054:	460b      	mov	r3, r1
 8005056:	4610      	mov	r0, r2
 8005058:	4619      	mov	r1, r3
 800505a:	f7fb fd7f 	bl	8000b5c <__aeabi_d2iz>
 800505e:	4603      	mov	r3, r0
 8005060:	60bb      	str	r3, [r7, #8]
	//printf("x1[0]: %d \n", USS_calc[0]);
	USS_calc -= 41;//x^0, constant
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	3b29      	subs	r3, #41	; 0x29
 8005066:	60bb      	str	r3, [r7, #8]
	//USS_calc[0]=(USS_end[0]-USS_start[0]);
	//printf("USS_calc[0]: %d \n", USS_calc);
	//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start[0], USS_end[0], (USS_end[0]-USS_start[0]));
	USSn_Trigger(USSn);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f7ff fea1 	bl	8004db0 <USSn_Trigger>

	if((USS_calc<=19) || (USS_calc>250)) {return 0;}
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b13      	cmp	r3, #19
 8005072:	dd02      	ble.n	800507a <USSn_DataRead+0x182>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2bfa      	cmp	r3, #250	; 0xfa
 8005078:	dd01      	ble.n	800507e <USSn_DataRead+0x186>
 800507a:	2300      	movs	r3, #0
 800507c:	e001      	b.n	8005082 <USSn_DataRead+0x18a>

	return USS_calc;
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	b2db      	uxtb	r3, r3
}
 8005082:	4618      	mov	r0, r3
 8005084:	3710      	adds	r7, #16
 8005086:	46bd      	mov	sp, r7
 8005088:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800508c:	f3af 8000 	nop.w
 8005090:	fec56d5d 	.word	0xfec56d5d
 8005094:	3fa27bb2 	.word	0x3fa27bb2
 8005098:	d2f1a9fc 	.word	0xd2f1a9fc
 800509c:	3f50624d 	.word	0x3f50624d
 80050a0:	53f7ced9 	.word	0x53f7ced9
 80050a4:	3fbba5e3 	.word	0x3fbba5e3
 80050a8:	d0e56042 	.word	0xd0e56042
 80050ac:	3feddb22 	.word	0x3feddb22
 80050b0:	2000056c 	.word	0x2000056c
 80050b4:	20000554 	.word	0x20000554

080050b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050bc:	480d      	ldr	r0, [pc, #52]	; (80050f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050be:	490e      	ldr	r1, [pc, #56]	; (80050f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050c0:	4a0e      	ldr	r2, [pc, #56]	; (80050fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050c4:	e002      	b.n	80050cc <LoopCopyDataInit>

080050c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ca:	3304      	adds	r3, #4

080050cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050d0:	d3f9      	bcc.n	80050c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050d2:	4a0b      	ldr	r2, [pc, #44]	; (8005100 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050d4:	4c0b      	ldr	r4, [pc, #44]	; (8005104 <LoopFillZerobss+0x26>)
  movs r3, #0
 80050d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050d8:	e001      	b.n	80050de <LoopFillZerobss>

080050da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050dc:	3204      	adds	r2, #4

080050de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050e0:	d3fb      	bcc.n	80050da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050e2:	f7ff fe53 	bl	8004d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050e6:	f005 fa5d 	bl	800a5a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ea:	f7fd ffdb 	bl	80030a4 <main>
  bx  lr    
 80050ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80050f0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80050f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050f8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80050fc:	0800b6f8 	.word	0x0800b6f8
  ldr r2, =_sbss
 8005100:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8005104:	2000059c 	.word	0x2000059c

08005108 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005108:	e7fe      	b.n	8005108 <ADC_IRQHandler>

0800510a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800510a:	b580      	push	{r7, lr}
 800510c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800510e:	2003      	movs	r0, #3
 8005110:	f001 fc36 	bl	8006980 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005114:	200f      	movs	r0, #15
 8005116:	f000 f805 	bl	8005124 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800511a:	f7ff fae1 	bl	80046e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}

08005124 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b082      	sub	sp, #8
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800512c:	4b12      	ldr	r3, [pc, #72]	; (8005178 <HAL_InitTick+0x54>)
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	4b12      	ldr	r3, [pc, #72]	; (800517c <HAL_InitTick+0x58>)
 8005132:	781b      	ldrb	r3, [r3, #0]
 8005134:	4619      	mov	r1, r3
 8005136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800513a:	fbb3 f3f1 	udiv	r3, r3, r1
 800513e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005142:	4618      	mov	r0, r3
 8005144:	f001 fc5f 	bl	8006a06 <HAL_SYSTICK_Config>
 8005148:	4603      	mov	r3, r0
 800514a:	2b00      	cmp	r3, #0
 800514c:	d001      	beq.n	8005152 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800514e:	2301      	movs	r3, #1
 8005150:	e00e      	b.n	8005170 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d80a      	bhi.n	800516e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005158:	2200      	movs	r2, #0
 800515a:	6879      	ldr	r1, [r7, #4]
 800515c:	f04f 30ff 	mov.w	r0, #4294967295
 8005160:	f001 fc19 	bl	8006996 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005164:	4a06      	ldr	r2, [pc, #24]	; (8005180 <HAL_InitTick+0x5c>)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	e000      	b.n	8005170 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800516e:	2301      	movs	r3, #1
}
 8005170:	4618      	mov	r0, r3
 8005172:	3708      	adds	r7, #8
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	20000008 	.word	0x20000008
 800517c:	20000010 	.word	0x20000010
 8005180:	2000000c 	.word	0x2000000c

08005184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <HAL_IncTick+0x20>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	461a      	mov	r2, r3
 800518e:	4b06      	ldr	r3, [pc, #24]	; (80051a8 <HAL_IncTick+0x24>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4413      	add	r3, r2
 8005194:	4a04      	ldr	r2, [pc, #16]	; (80051a8 <HAL_IncTick+0x24>)
 8005196:	6013      	str	r3, [r2, #0]
}
 8005198:	bf00      	nop
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000010 	.word	0x20000010
 80051a8:	20000588 	.word	0x20000588

080051ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051ac:	b480      	push	{r7}
 80051ae:	af00      	add	r7, sp, #0
  return uwTick;
 80051b0:	4b03      	ldr	r3, [pc, #12]	; (80051c0 <HAL_GetTick+0x14>)
 80051b2:	681b      	ldr	r3, [r3, #0]
}
 80051b4:	4618      	mov	r0, r3
 80051b6:	46bd      	mov	sp, r7
 80051b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20000588 	.word	0x20000588

080051c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051cc:	f7ff ffee 	bl	80051ac <HAL_GetTick>
 80051d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051dc:	d005      	beq.n	80051ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051de:	4b0a      	ldr	r3, [pc, #40]	; (8005208 <HAL_Delay+0x44>)
 80051e0:	781b      	ldrb	r3, [r3, #0]
 80051e2:	461a      	mov	r2, r3
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4413      	add	r3, r2
 80051e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80051ea:	bf00      	nop
 80051ec:	f7ff ffde 	bl	80051ac <HAL_GetTick>
 80051f0:	4602      	mov	r2, r0
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	1ad3      	subs	r3, r2, r3
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d8f7      	bhi.n	80051ec <HAL_Delay+0x28>
  {
  }
}
 80051fc:	bf00      	nop
 80051fe:	bf00      	nop
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	20000010 	.word	0x20000010

0800520c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d101      	bne.n	8005222 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	e031      	b.n	8005286 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	2b00      	cmp	r3, #0
 8005228:	d109      	bne.n	800523e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff fa7c 	bl	8004728 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b00      	cmp	r3, #0
 8005248:	d116      	bne.n	8005278 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800524e:	4b10      	ldr	r3, [pc, #64]	; (8005290 <HAL_ADC_Init+0x84>)
 8005250:	4013      	ands	r3, r2
 8005252:	f043 0202 	orr.w	r2, r3, #2
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fb0a 	bl	8005874 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526a:	f023 0303 	bic.w	r3, r3, #3
 800526e:	f043 0201 	orr.w	r2, r3, #1
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	641a      	str	r2, [r3, #64]	; 0x40
 8005276:	e001      	b.n	800527c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005284:	7bfb      	ldrb	r3, [r7, #15]
}
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	ffffeefd 	.word	0xffffeefd

08005294 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005294:	b480      	push	{r7}
 8005296:	b085      	sub	sp, #20
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052a6:	2b01      	cmp	r3, #1
 80052a8:	d101      	bne.n	80052ae <HAL_ADC_Start+0x1a>
 80052aa:	2302      	movs	r3, #2
 80052ac:	e0ad      	b.n	800540a <HAL_ADC_Start+0x176>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2201      	movs	r2, #1
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d018      	beq.n	80052f6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	689a      	ldr	r2, [r3, #8]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80052d4:	4b50      	ldr	r3, [pc, #320]	; (8005418 <HAL_ADC_Start+0x184>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a50      	ldr	r2, [pc, #320]	; (800541c <HAL_ADC_Start+0x188>)
 80052da:	fba2 2303 	umull	r2, r3, r2, r3
 80052de:	0c9a      	lsrs	r2, r3, #18
 80052e0:	4613      	mov	r3, r2
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	4413      	add	r3, r2
 80052e6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80052e8:	e002      	b.n	80052f0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	3b01      	subs	r3, #1
 80052ee:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1f9      	bne.n	80052ea <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b01      	cmp	r3, #1
 8005302:	d175      	bne.n	80053f0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005308:	4b45      	ldr	r3, [pc, #276]	; (8005420 <HAL_ADC_Start+0x18c>)
 800530a:	4013      	ands	r3, r2
 800530c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531e:	2b00      	cmp	r3, #0
 8005320:	d007      	beq.n	8005332 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800532a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005336:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533e:	d106      	bne.n	800534e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005344:	f023 0206 	bic.w	r2, r3, #6
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	645a      	str	r2, [r3, #68]	; 0x44
 800534c:	e002      	b.n	8005354 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2200      	movs	r2, #0
 8005358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005364:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005366:	4b2f      	ldr	r3, [pc, #188]	; (8005424 <HAL_ADC_Start+0x190>)
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	f003 031f 	and.w	r3, r3, #31
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10f      	bne.n	8005392 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800537c:	2b00      	cmp	r3, #0
 800537e:	d143      	bne.n	8005408 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689a      	ldr	r2, [r3, #8]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800538e:	609a      	str	r2, [r3, #8]
 8005390:	e03a      	b.n	8005408 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	4a24      	ldr	r2, [pc, #144]	; (8005428 <HAL_ADC_Start+0x194>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d10e      	bne.n	80053ba <HAL_ADC_Start+0x126>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d107      	bne.n	80053ba <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	689a      	ldr	r2, [r3, #8]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053b8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80053ba:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <HAL_ADC_Start+0x190>)
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d120      	bne.n	8005408 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a18      	ldr	r2, [pc, #96]	; (800542c <HAL_ADC_Start+0x198>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d11b      	bne.n	8005408 <HAL_ADC_Start+0x174>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d114      	bne.n	8005408 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	689a      	ldr	r2, [r3, #8]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053ec:	609a      	str	r2, [r3, #8]
 80053ee:	e00b      	b.n	8005408 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	f043 0210 	orr.w	r2, r3, #16
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005400:	f043 0201 	orr.w	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005408:	2300      	movs	r3, #0
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	20000008 	.word	0x20000008
 800541c:	431bde83 	.word	0x431bde83
 8005420:	fffff8fe 	.word	0xfffff8fe
 8005424:	40012300 	.word	0x40012300
 8005428:	40012000 	.word	0x40012000
 800542c:	40012200 	.word	0x40012200

08005430 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005430:	b480      	push	{r7}
 8005432:	b083      	sub	sp, #12
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800543e:	2b01      	cmp	r3, #1
 8005440:	d101      	bne.n	8005446 <HAL_ADC_Stop+0x16>
 8005442:	2302      	movs	r3, #2
 8005444:	e01f      	b.n	8005486 <HAL_ADC_Stop+0x56>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2201      	movs	r2, #1
 800544a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	689a      	ldr	r2, [r3, #8]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f022 0201 	bic.w	r2, r2, #1
 800545c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0301 	and.w	r3, r3, #1
 8005468:	2b00      	cmp	r3, #0
 800546a:	d107      	bne.n	800547c <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005470:	4b08      	ldr	r3, [pc, #32]	; (8005494 <HAL_ADC_Stop+0x64>)
 8005472:	4013      	ands	r3, r2
 8005474:	f043 0201 	orr.w	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	370c      	adds	r7, #12
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	ffffeefe 	.word	0xffffeefe

08005498 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
 80054a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054a2:	2300      	movs	r3, #0
 80054a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b4:	d113      	bne.n	80054de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054c4:	d10b      	bne.n	80054de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	f043 0220 	orr.w	r2, r3, #32
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e063      	b.n	80055a6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80054de:	f7ff fe65 	bl	80051ac <HAL_GetTick>
 80054e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80054e4:	e021      	b.n	800552a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054ec:	d01d      	beq.n	800552a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_ADC_PollForConversion+0x6c>
 80054f4:	f7ff fe5a 	bl	80051ac <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	683a      	ldr	r2, [r7, #0]
 8005500:	429a      	cmp	r2, r3
 8005502:	d212      	bcs.n	800552a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b02      	cmp	r3, #2
 8005510:	d00b      	beq.n	800552a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2200      	movs	r2, #0
 8005522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005526:	2303      	movs	r3, #3
 8005528:	e03d      	b.n	80055a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b02      	cmp	r3, #2
 8005536:	d1d6      	bne.n	80054e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f06f 0212 	mvn.w	r2, #18
 8005540:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d123      	bne.n	80055a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11f      	bne.n	80055a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800556a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800556e:	2b00      	cmp	r3, #0
 8005570:	d006      	beq.n	8005580 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	689b      	ldr	r3, [r3, #8]
 8005578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800557c:	2b00      	cmp	r3, #0
 800557e:	d111      	bne.n	80055a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005584:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d105      	bne.n	80055a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800559c:	f043 0201 	orr.w	r2, r3, #1
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80055ae:	b480      	push	{r7}
 80055b0:	b083      	sub	sp, #12
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80055bc:	4618      	mov	r0, r3
 80055be:	370c      	adds	r7, #12
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr

080055c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b085      	sub	sp, #20
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d101      	bne.n	80055e4 <HAL_ADC_ConfigChannel+0x1c>
 80055e0:	2302      	movs	r3, #2
 80055e2:	e136      	b.n	8005852 <HAL_ADC_ConfigChannel+0x28a>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2201      	movs	r2, #1
 80055e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b09      	cmp	r3, #9
 80055f2:	d93a      	bls.n	800566a <HAL_ADC_ConfigChannel+0xa2>
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055fc:	d035      	beq.n	800566a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68d9      	ldr	r1, [r3, #12]
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	b29b      	uxth	r3, r3
 800560a:	461a      	mov	r2, r3
 800560c:	4613      	mov	r3, r2
 800560e:	005b      	lsls	r3, r3, #1
 8005610:	4413      	add	r3, r2
 8005612:	3b1e      	subs	r3, #30
 8005614:	2207      	movs	r2, #7
 8005616:	fa02 f303 	lsl.w	r3, r2, r3
 800561a:	43da      	mvns	r2, r3
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	400a      	ands	r2, r1
 8005622:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a8d      	ldr	r2, [pc, #564]	; (8005860 <HAL_ADC_ConfigChannel+0x298>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10a      	bne.n	8005644 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68d9      	ldr	r1, [r3, #12]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	061a      	lsls	r2, r3, #24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005642:	e035      	b.n	80056b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68d9      	ldr	r1, [r3, #12]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689a      	ldr	r2, [r3, #8]
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	4618      	mov	r0, r3
 8005656:	4603      	mov	r3, r0
 8005658:	005b      	lsls	r3, r3, #1
 800565a:	4403      	add	r3, r0
 800565c:	3b1e      	subs	r3, #30
 800565e:	409a      	lsls	r2, r3
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005668:	e022      	b.n	80056b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	6919      	ldr	r1, [r3, #16]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	b29b      	uxth	r3, r3
 8005676:	461a      	mov	r2, r3
 8005678:	4613      	mov	r3, r2
 800567a:	005b      	lsls	r3, r3, #1
 800567c:	4413      	add	r3, r2
 800567e:	2207      	movs	r2, #7
 8005680:	fa02 f303 	lsl.w	r3, r2, r3
 8005684:	43da      	mvns	r2, r3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	400a      	ands	r2, r1
 800568c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	6919      	ldr	r1, [r3, #16]
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	689a      	ldr	r2, [r3, #8]
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	b29b      	uxth	r3, r3
 800569e:	4618      	mov	r0, r3
 80056a0:	4603      	mov	r3, r0
 80056a2:	005b      	lsls	r3, r3, #1
 80056a4:	4403      	add	r3, r0
 80056a6:	409a      	lsls	r2, r3
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	2b06      	cmp	r3, #6
 80056b6:	d824      	bhi.n	8005702 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	685a      	ldr	r2, [r3, #4]
 80056c2:	4613      	mov	r3, r2
 80056c4:	009b      	lsls	r3, r3, #2
 80056c6:	4413      	add	r3, r2
 80056c8:	3b05      	subs	r3, #5
 80056ca:	221f      	movs	r2, #31
 80056cc:	fa02 f303 	lsl.w	r3, r2, r3
 80056d0:	43da      	mvns	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	400a      	ands	r2, r1
 80056d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	4618      	mov	r0, r3
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	685a      	ldr	r2, [r3, #4]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	3b05      	subs	r3, #5
 80056f4:	fa00 f203 	lsl.w	r2, r0, r3
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	430a      	orrs	r2, r1
 80056fe:	635a      	str	r2, [r3, #52]	; 0x34
 8005700:	e04c      	b.n	800579c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b0c      	cmp	r3, #12
 8005708:	d824      	bhi.n	8005754 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	685a      	ldr	r2, [r3, #4]
 8005714:	4613      	mov	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4413      	add	r3, r2
 800571a:	3b23      	subs	r3, #35	; 0x23
 800571c:	221f      	movs	r2, #31
 800571e:	fa02 f303 	lsl.w	r3, r2, r3
 8005722:	43da      	mvns	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	400a      	ands	r2, r1
 800572a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	b29b      	uxth	r3, r3
 8005738:	4618      	mov	r0, r3
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	4613      	mov	r3, r2
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	3b23      	subs	r3, #35	; 0x23
 8005746:	fa00 f203 	lsl.w	r2, r0, r3
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
 8005752:	e023      	b.n	800579c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	4613      	mov	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	4413      	add	r3, r2
 8005764:	3b41      	subs	r3, #65	; 0x41
 8005766:	221f      	movs	r2, #31
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43da      	mvns	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	400a      	ands	r2, r1
 8005774:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	b29b      	uxth	r3, r3
 8005782:	4618      	mov	r0, r3
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685a      	ldr	r2, [r3, #4]
 8005788:	4613      	mov	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	4413      	add	r3, r2
 800578e:	3b41      	subs	r3, #65	; 0x41
 8005790:	fa00 f203 	lsl.w	r2, r0, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	430a      	orrs	r2, r1
 800579a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a30      	ldr	r2, [pc, #192]	; (8005864 <HAL_ADC_ConfigChannel+0x29c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10a      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x1f4>
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057ae:	d105      	bne.n	80057bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80057b0:	4b2d      	ldr	r3, [pc, #180]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4a2c      	ldr	r2, [pc, #176]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80057ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <HAL_ADC_ConfigChannel+0x29c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d10f      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x21e>
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2b12      	cmp	r3, #18
 80057cc:	d10b      	bne.n	80057e6 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80057ce:	4b26      	ldr	r3, [pc, #152]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	4a25      	ldr	r2, [pc, #148]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80057d8:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80057da:	4b23      	ldr	r3, [pc, #140]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	4a22      	ldr	r2, [pc, #136]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 80057e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80057e4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1e      	ldr	r2, [pc, #120]	; (8005864 <HAL_ADC_ConfigChannel+0x29c>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d12b      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x280>
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1a      	ldr	r2, [pc, #104]	; (8005860 <HAL_ADC_ConfigChannel+0x298>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d003      	beq.n	8005802 <HAL_ADC_ConfigChannel+0x23a>
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2b11      	cmp	r3, #17
 8005800:	d122      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005802:	4b19      	ldr	r3, [pc, #100]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	4a18      	ldr	r2, [pc, #96]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 8005808:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800580c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800580e:	4b16      	ldr	r3, [pc, #88]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	4a15      	ldr	r2, [pc, #84]	; (8005868 <HAL_ADC_ConfigChannel+0x2a0>)
 8005814:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005818:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a10      	ldr	r2, [pc, #64]	; (8005860 <HAL_ADC_ConfigChannel+0x298>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d111      	bne.n	8005848 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <HAL_ADC_ConfigChannel+0x2a4>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a11      	ldr	r2, [pc, #68]	; (8005870 <HAL_ADC_ConfigChannel+0x2a8>)
 800582a:	fba2 2303 	umull	r2, r3, r2, r3
 800582e:	0c9a      	lsrs	r2, r3, #18
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800583a:	e002      	b.n	8005842 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3b01      	subs	r3, #1
 8005840:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1f9      	bne.n	800583c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	10000012 	.word	0x10000012
 8005864:	40012000 	.word	0x40012000
 8005868:	40012300 	.word	0x40012300
 800586c:	20000008 	.word	0x20000008
 8005870:	431bde83 	.word	0x431bde83

08005874 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800587c:	4b78      	ldr	r3, [pc, #480]	; (8005a60 <ADC_Init+0x1ec>)
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	4a77      	ldr	r2, [pc, #476]	; (8005a60 <ADC_Init+0x1ec>)
 8005882:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005886:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005888:	4b75      	ldr	r3, [pc, #468]	; (8005a60 <ADC_Init+0x1ec>)
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	4973      	ldr	r1, [pc, #460]	; (8005a60 <ADC_Init+0x1ec>)
 8005892:	4313      	orrs	r3, r2
 8005894:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	6859      	ldr	r1, [r3, #4]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	691b      	ldr	r3, [r3, #16]
 80058b0:	021a      	lsls	r2, r3, #8
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	685a      	ldr	r2, [r3, #4]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	6859      	ldr	r1, [r3, #4]
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689a      	ldr	r2, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	430a      	orrs	r2, r1
 80058da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	689a      	ldr	r2, [r3, #8]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6899      	ldr	r1, [r3, #8]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	4a58      	ldr	r2, [pc, #352]	; (8005a64 <ADC_Init+0x1f0>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d022      	beq.n	800594e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	689a      	ldr	r2, [r3, #8]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005916:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	6899      	ldr	r1, [r3, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005938:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	6899      	ldr	r1, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	609a      	str	r2, [r3, #8]
 800594c:	e00f      	b.n	800596e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	689a      	ldr	r2, [r3, #8]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800595c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689a      	ldr	r2, [r3, #8]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800596c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0202 	bic.w	r2, r2, #2
 800597c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	699b      	ldr	r3, [r3, #24]
 8005988:	005a      	lsls	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d01b      	beq.n	80059d4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	685a      	ldr	r2, [r3, #4]
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6859      	ldr	r1, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c6:	3b01      	subs	r3, #1
 80059c8:	035a      	lsls	r2, r3, #13
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	430a      	orrs	r2, r1
 80059d0:	605a      	str	r2, [r3, #4]
 80059d2:	e007      	b.n	80059e4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80059e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	69db      	ldr	r3, [r3, #28]
 80059fe:	3b01      	subs	r3, #1
 8005a00:	051a      	lsls	r2, r3, #20
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	430a      	orrs	r2, r1
 8005a08:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689a      	ldr	r2, [r3, #8]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a18:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	6899      	ldr	r1, [r3, #8]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a26:	025a      	lsls	r2, r3, #9
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	689a      	ldr	r2, [r3, #8]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a3e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	6899      	ldr	r1, [r3, #8]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	029a      	lsls	r2, r3, #10
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	430a      	orrs	r2, r1
 8005a52:	609a      	str	r2, [r3, #8]
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr
 8005a60:	40012300 	.word	0x40012300
 8005a64:	0f000001 	.word	0x0f000001

08005a68 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e0ed      	b.n	8005c56 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d102      	bne.n	8005a8c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f7fe fe8e 	bl	80047a8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f042 0201 	orr.w	r2, r2, #1
 8005a9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a9c:	f7ff fb86 	bl	80051ac <HAL_GetTick>
 8005aa0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005aa2:	e012      	b.n	8005aca <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005aa4:	f7ff fb82 	bl	80051ac <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	2b0a      	cmp	r3, #10
 8005ab0:	d90b      	bls.n	8005aca <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2205      	movs	r2, #5
 8005ac2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	e0c5      	b.n	8005c56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	f003 0301 	and.w	r3, r3, #1
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d0e5      	beq.n	8005aa4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0202 	bic.w	r2, r2, #2
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ae8:	f7ff fb60 	bl	80051ac <HAL_GetTick>
 8005aec:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005aee:	e012      	b.n	8005b16 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005af0:	f7ff fb5c 	bl	80051ac <HAL_GetTick>
 8005af4:	4602      	mov	r2, r0
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	2b0a      	cmp	r3, #10
 8005afc:	d90b      	bls.n	8005b16 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2205      	movs	r2, #5
 8005b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e09f      	b.n	8005c56 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f003 0302 	and.w	r3, r3, #2
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	7e1b      	ldrb	r3, [r3, #24]
 8005b28:	2b01      	cmp	r3, #1
 8005b2a:	d108      	bne.n	8005b3e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b3a:	601a      	str	r2, [r3, #0]
 8005b3c:	e007      	b.n	8005b4e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	7e5b      	ldrb	r3, [r3, #25]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d108      	bne.n	8005b68 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b64:	601a      	str	r2, [r3, #0]
 8005b66:	e007      	b.n	8005b78 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681a      	ldr	r2, [r3, #0]
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b76:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	7e9b      	ldrb	r3, [r3, #26]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d108      	bne.n	8005b92 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f042 0220 	orr.w	r2, r2, #32
 8005b8e:	601a      	str	r2, [r3, #0]
 8005b90:	e007      	b.n	8005ba2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0220 	bic.w	r2, r2, #32
 8005ba0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	7edb      	ldrb	r3, [r3, #27]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d108      	bne.n	8005bbc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0210 	bic.w	r2, r2, #16
 8005bb8:	601a      	str	r2, [r3, #0]
 8005bba:	e007      	b.n	8005bcc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0210 	orr.w	r2, r2, #16
 8005bca:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	7f1b      	ldrb	r3, [r3, #28]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d108      	bne.n	8005be6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f042 0208 	orr.w	r2, r2, #8
 8005be2:	601a      	str	r2, [r3, #0]
 8005be4:	e007      	b.n	8005bf6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 0208 	bic.w	r2, r2, #8
 8005bf4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	7f5b      	ldrb	r3, [r3, #29]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d108      	bne.n	8005c10 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f042 0204 	orr.w	r2, r2, #4
 8005c0c:	601a      	str	r2, [r3, #0]
 8005c0e:	e007      	b.n	8005c20 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f022 0204 	bic.w	r2, r2, #4
 8005c1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	689a      	ldr	r2, [r3, #8]
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	431a      	orrs	r2, r3
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	ea42 0103 	orr.w	r1, r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	1e5a      	subs	r2, r3, #1
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	430a      	orrs	r2, r1
 8005c44:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
	...

08005c60 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
 8005c68:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c76:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005c78:	7cfb      	ldrb	r3, [r7, #19]
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d003      	beq.n	8005c86 <HAL_CAN_ConfigFilter+0x26>
 8005c7e:	7cfb      	ldrb	r3, [r7, #19]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	f040 80be 	bne.w	8005e02 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005c86:	4b65      	ldr	r3, [pc, #404]	; (8005e1c <HAL_CAN_ConfigFilter+0x1bc>)
 8005c88:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005c90:	f043 0201 	orr.w	r2, r3, #1
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005c9a:	697b      	ldr	r3, [r7, #20]
 8005c9c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005ca0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 031f 	and.w	r3, r3, #31
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8005ccc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	43db      	mvns	r3, r3
 8005cd8:	401a      	ands	r2, r3
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	69db      	ldr	r3, [r3, #28]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d123      	bne.n	8005d30 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	43db      	mvns	r3, r3
 8005cf2:	401a      	ands	r2, r3
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d06:	683a      	ldr	r2, [r7, #0]
 8005d08:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005d0a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	3248      	adds	r2, #72	; 0x48
 8005d10:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d24:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d26:	6979      	ldr	r1, [r7, #20]
 8005d28:	3348      	adds	r3, #72	; 0x48
 8005d2a:	00db      	lsls	r3, r3, #3
 8005d2c:	440b      	add	r3, r1
 8005d2e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	69db      	ldr	r3, [r3, #28]
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d122      	bne.n	8005d7e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	431a      	orrs	r2, r3
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d54:	683a      	ldr	r2, [r7, #0]
 8005d56:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d58:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	3248      	adds	r2, #72	; 0x48
 8005d5e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d72:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d74:	6979      	ldr	r1, [r7, #20]
 8005d76:	3348      	adds	r3, #72	; 0x48
 8005d78:	00db      	lsls	r3, r3, #3
 8005d7a:	440b      	add	r3, r1
 8005d7c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d109      	bne.n	8005d9a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	43db      	mvns	r3, r3
 8005d90:	401a      	ands	r2, r3
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005d98:	e007      	b.n	8005daa <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	431a      	orrs	r2, r3
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005daa:	683b      	ldr	r3, [r7, #0]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d109      	bne.n	8005dc6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	43db      	mvns	r3, r3
 8005dbc:	401a      	ands	r2, r3
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005dc4:	e007      	b.n	8005dd6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005dc6:	697b      	ldr	r3, [r7, #20]
 8005dc8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	431a      	orrs	r2, r3
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d107      	bne.n	8005dee <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	431a      	orrs	r2, r3
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005df4:	f023 0201 	bic.w	r2, r3, #1
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	e006      	b.n	8005e10 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
  }
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	371c      	adds	r7, #28
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr
 8005e1c:	40006400 	.word	0x40006400

08005e20 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d12e      	bne.n	8005e92 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2202      	movs	r2, #2
 8005e38:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0201 	bic.w	r2, r2, #1
 8005e4a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e4c:	f7ff f9ae 	bl	80051ac <HAL_GetTick>
 8005e50:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e52:	e012      	b.n	8005e7a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e54:	f7ff f9aa 	bl	80051ac <HAL_GetTick>
 8005e58:	4602      	mov	r2, r0
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	1ad3      	subs	r3, r2, r3
 8005e5e:	2b0a      	cmp	r3, #10
 8005e60:	d90b      	bls.n	8005e7a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2205      	movs	r2, #5
 8005e72:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e012      	b.n	8005ea0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	685b      	ldr	r3, [r3, #4]
 8005e80:	f003 0301 	and.w	r3, r3, #1
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e5      	bne.n	8005e54 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	e006      	b.n	8005ea0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
  }
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3710      	adds	r7, #16
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005ea8:	b480      	push	{r7}
 8005eaa:	b089      	sub	sp, #36	; 0x24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ebc:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ec6:	7ffb      	ldrb	r3, [r7, #31]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d003      	beq.n	8005ed4 <HAL_CAN_AddTxMessage+0x2c>
 8005ecc:	7ffb      	ldrb	r3, [r7, #31]
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	f040 80b8 	bne.w	8006044 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10a      	bne.n	8005ef4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d105      	bne.n	8005ef4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 80a0 	beq.w	8006034 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	0e1b      	lsrs	r3, r3, #24
 8005ef8:	f003 0303 	and.w	r3, r3, #3
 8005efc:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b02      	cmp	r3, #2
 8005f02:	d907      	bls.n	8005f14 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f10:	2301      	movs	r3, #1
 8005f12:	e09e      	b.n	8006052 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005f14:	2201      	movs	r2, #1
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	409a      	lsls	r2, r3
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f30:	68f9      	ldr	r1, [r7, #12]
 8005f32:	6809      	ldr	r1, [r1, #0]
 8005f34:	431a      	orrs	r2, r3
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	3318      	adds	r3, #24
 8005f3a:	011b      	lsls	r3, r3, #4
 8005f3c:	440b      	add	r3, r1
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	e00f      	b.n	8005f62 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f4c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f52:	68f9      	ldr	r1, [r7, #12]
 8005f54:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005f56:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f58:	697b      	ldr	r3, [r7, #20]
 8005f5a:	3318      	adds	r3, #24
 8005f5c:	011b      	lsls	r3, r3, #4
 8005f5e:	440b      	add	r3, r1
 8005f60:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6819      	ldr	r1, [r3, #0]
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	691a      	ldr	r2, [r3, #16]
 8005f6a:	697b      	ldr	r3, [r7, #20]
 8005f6c:	3318      	adds	r3, #24
 8005f6e:	011b      	lsls	r3, r3, #4
 8005f70:	440b      	add	r3, r1
 8005f72:	3304      	adds	r3, #4
 8005f74:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	7d1b      	ldrb	r3, [r3, #20]
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d111      	bne.n	8005fa2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	3318      	adds	r3, #24
 8005f86:	011b      	lsls	r3, r3, #4
 8005f88:	4413      	add	r3, r2
 8005f8a:	3304      	adds	r3, #4
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	68fa      	ldr	r2, [r7, #12]
 8005f90:	6811      	ldr	r1, [r2, #0]
 8005f92:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	3318      	adds	r3, #24
 8005f9a:	011b      	lsls	r3, r3, #4
 8005f9c:	440b      	add	r3, r1
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	3307      	adds	r3, #7
 8005fa6:	781b      	ldrb	r3, [r3, #0]
 8005fa8:	061a      	lsls	r2, r3, #24
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3306      	adds	r3, #6
 8005fae:	781b      	ldrb	r3, [r3, #0]
 8005fb0:	041b      	lsls	r3, r3, #16
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3305      	adds	r3, #5
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	021b      	lsls	r3, r3, #8
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	3204      	adds	r2, #4
 8005fc2:	7812      	ldrb	r2, [r2, #0]
 8005fc4:	4610      	mov	r0, r2
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	6811      	ldr	r1, [r2, #0]
 8005fca:	ea43 0200 	orr.w	r2, r3, r0
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	440b      	add	r3, r1
 8005fd4:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005fd8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3303      	adds	r3, #3
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	061a      	lsls	r2, r3, #24
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	3302      	adds	r3, #2
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	041b      	lsls	r3, r3, #16
 8005fea:	431a      	orrs	r2, r3
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	3301      	adds	r3, #1
 8005ff0:	781b      	ldrb	r3, [r3, #0]
 8005ff2:	021b      	lsls	r3, r3, #8
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	7812      	ldrb	r2, [r2, #0]
 8005ffa:	4610      	mov	r0, r2
 8005ffc:	68fa      	ldr	r2, [r7, #12]
 8005ffe:	6811      	ldr	r1, [r2, #0]
 8006000:	ea43 0200 	orr.w	r2, r3, r0
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	011b      	lsls	r3, r3, #4
 8006008:	440b      	add	r3, r1
 800600a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800600e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681a      	ldr	r2, [r3, #0]
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	3318      	adds	r3, #24
 8006018:	011b      	lsls	r3, r3, #4
 800601a:	4413      	add	r3, r2
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	6811      	ldr	r1, [r2, #0]
 8006022:	f043 0201 	orr.w	r2, r3, #1
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3318      	adds	r3, #24
 800602a:	011b      	lsls	r3, r3, #4
 800602c:	440b      	add	r3, r1
 800602e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006030:	2300      	movs	r3, #0
 8006032:	e00e      	b.n	8006052 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006038:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006040:	2301      	movs	r3, #1
 8006042:	e006      	b.n	8006052 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
  }
}
 8006052:	4618      	mov	r0, r3
 8006054:	3724      	adds	r7, #36	; 0x24
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr

0800605e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800605e:	b480      	push	{r7}
 8006060:	b085      	sub	sp, #20
 8006062:	af00      	add	r7, sp, #0
 8006064:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006066:	2300      	movs	r3, #0
 8006068:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006070:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006072:	7afb      	ldrb	r3, [r7, #11]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d002      	beq.n	800607e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	2b02      	cmp	r3, #2
 800607c:	d11d      	bne.n	80060ba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006088:	2b00      	cmp	r3, #0
 800608a:	d002      	beq.n	8006092 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	3301      	adds	r3, #1
 8006090:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3301      	adds	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	3301      	adds	r3, #1
 80060b8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80060ba:	68fb      	ldr	r3, [r7, #12]
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80060c8:	b480      	push	{r7}
 80060ca:	b087      	sub	sp, #28
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
 80060d4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060dc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80060de:	7dfb      	ldrb	r3, [r7, #23]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d003      	beq.n	80060ec <HAL_CAN_GetRxMessage+0x24>
 80060e4:	7dfb      	ldrb	r3, [r7, #23]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	f040 80f3 	bne.w	80062d2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80060ec:	68bb      	ldr	r3, [r7, #8]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10e      	bne.n	8006110 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	f003 0303 	and.w	r3, r3, #3
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d116      	bne.n	800612e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800610c:	2301      	movs	r3, #1
 800610e:	e0e7      	b.n	80062e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0303 	and.w	r3, r3, #3
 800611a:	2b00      	cmp	r3, #0
 800611c:	d107      	bne.n	800612e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006122:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e0d8      	b.n	80062e0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681a      	ldr	r2, [r3, #0]
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	331b      	adds	r3, #27
 8006136:	011b      	lsls	r3, r3, #4
 8006138:	4413      	add	r3, r2
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0204 	and.w	r2, r3, #4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d10c      	bne.n	8006166 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	331b      	adds	r3, #27
 8006154:	011b      	lsls	r3, r3, #4
 8006156:	4413      	add	r3, r2
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	0d5b      	lsrs	r3, r3, #21
 800615c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	e00b      	b.n	800617e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681a      	ldr	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	331b      	adds	r3, #27
 800616e:	011b      	lsls	r3, r3, #4
 8006170:	4413      	add	r3, r2
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	08db      	lsrs	r3, r3, #3
 8006176:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	331b      	adds	r3, #27
 8006186:	011b      	lsls	r3, r3, #4
 8006188:	4413      	add	r3, r2
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0202 	and.w	r2, r3, #2
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	331b      	adds	r3, #27
 800619c:	011b      	lsls	r3, r3, #4
 800619e:	4413      	add	r3, r2
 80061a0:	3304      	adds	r3, #4
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f003 020f 	and.w	r2, r3, #15
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	331b      	adds	r3, #27
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	4413      	add	r3, r2
 80061b8:	3304      	adds	r3, #4
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	0a1b      	lsrs	r3, r3, #8
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	331b      	adds	r3, #27
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	4413      	add	r3, r2
 80061d0:	3304      	adds	r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	0c1b      	lsrs	r3, r3, #16
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	011b      	lsls	r3, r3, #4
 80061e4:	4413      	add	r3, r2
 80061e6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	b2da      	uxtb	r2, r3
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	011b      	lsls	r3, r3, #4
 80061fa:	4413      	add	r3, r2
 80061fc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	0a1a      	lsrs	r2, r3, #8
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	3301      	adds	r3, #1
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	4413      	add	r3, r2
 8006216:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	0c1a      	lsrs	r2, r3, #16
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	3302      	adds	r3, #2
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681a      	ldr	r2, [r3, #0]
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	011b      	lsls	r3, r3, #4
 800622e:	4413      	add	r3, r2
 8006230:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	0e1a      	lsrs	r2, r3, #24
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	3303      	adds	r3, #3
 800623c:	b2d2      	uxtb	r2, r2
 800623e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	4413      	add	r3, r2
 800624a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	3304      	adds	r3, #4
 8006254:	b2d2      	uxtb	r2, r2
 8006256:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681a      	ldr	r2, [r3, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	011b      	lsls	r3, r3, #4
 8006260:	4413      	add	r3, r2
 8006262:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	0a1a      	lsrs	r2, r3, #8
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	3305      	adds	r3, #5
 800626e:	b2d2      	uxtb	r2, r2
 8006270:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	011b      	lsls	r3, r3, #4
 800627a:	4413      	add	r3, r2
 800627c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	0c1a      	lsrs	r2, r3, #16
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3306      	adds	r3, #6
 8006288:	b2d2      	uxtb	r2, r2
 800628a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	4413      	add	r3, r2
 8006296:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	0e1a      	lsrs	r2, r3, #24
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	3307      	adds	r3, #7
 80062a2:	b2d2      	uxtb	r2, r2
 80062a4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d108      	bne.n	80062be <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0220 	orr.w	r2, r2, #32
 80062ba:	60da      	str	r2, [r3, #12]
 80062bc:	e007      	b.n	80062ce <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	691a      	ldr	r2, [r3, #16]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0220 	orr.w	r2, r2, #32
 80062cc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80062ce:	2300      	movs	r3, #0
 80062d0:	e006      	b.n	80062e0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
  }
}
 80062e0:	4618      	mov	r0, r3
 80062e2:	371c      	adds	r7, #28
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b085      	sub	sp, #20
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
 80062f4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062fc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80062fe:	7bfb      	ldrb	r3, [r7, #15]
 8006300:	2b01      	cmp	r3, #1
 8006302:	d002      	beq.n	800630a <HAL_CAN_ActivateNotification+0x1e>
 8006304:	7bfb      	ldrb	r3, [r7, #15]
 8006306:	2b02      	cmp	r3, #2
 8006308:	d109      	bne.n	800631e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6959      	ldr	r1, [r3, #20]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800631a:	2300      	movs	r3, #0
 800631c:	e006      	b.n	800632c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006322:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800632a:	2301      	movs	r3, #1
  }
}
 800632c:	4618      	mov	r0, r3
 800632e:	3714      	adds	r7, #20
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b08a      	sub	sp, #40	; 0x28
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006340:	2300      	movs	r3, #0
 8006342:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	685b      	ldr	r3, [r3, #4]
 8006352:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	689b      	ldr	r3, [r3, #8]
 800635a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006374:	6a3b      	ldr	r3, [r7, #32]
 8006376:	f003 0301 	and.w	r3, r3, #1
 800637a:	2b00      	cmp	r3, #0
 800637c:	d07c      	beq.n	8006478 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d023      	beq.n	80063d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2201      	movs	r2, #1
 800638e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	f003 0302 	and.w	r3, r3, #2
 8006396:	2b00      	cmp	r3, #0
 8006398:	d003      	beq.n	80063a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f983 	bl	80066a6 <HAL_CAN_TxMailbox0CompleteCallback>
 80063a0:	e016      	b.n	80063d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d004      	beq.n	80063b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80063ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063b2:	627b      	str	r3, [r7, #36]	; 0x24
 80063b4:	e00c      	b.n	80063d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80063b6:	69bb      	ldr	r3, [r7, #24]
 80063b8:	f003 0308 	and.w	r3, r3, #8
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80063c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063c6:	627b      	str	r3, [r7, #36]	; 0x24
 80063c8:	e002      	b.n	80063d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f989 	bl	80066e2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d024      	beq.n	8006424 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d003      	beq.n	80063f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f000 f963 	bl	80066ba <HAL_CAN_TxMailbox1CompleteCallback>
 80063f4:	e016      	b.n	8006424 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d004      	beq.n	800640a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006406:	627b      	str	r3, [r7, #36]	; 0x24
 8006408:	e00c      	b.n	8006424 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800641a:	627b      	str	r3, [r7, #36]	; 0x24
 800641c:	e002      	b.n	8006424 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f969 	bl	80066f6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d024      	beq.n	8006478 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006436:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 f943 	bl	80066ce <HAL_CAN_TxMailbox2CompleteCallback>
 8006448:	e016      	b.n	8006478 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d004      	beq.n	800645e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006456:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
 800645c:	e00c      	b.n	8006478 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800645e:	69bb      	ldr	r3, [r7, #24]
 8006460:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006464:	2b00      	cmp	r3, #0
 8006466:	d004      	beq.n	8006472 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800646e:	627b      	str	r3, [r7, #36]	; 0x24
 8006470:	e002      	b.n	8006478 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f949 	bl	800670a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00c      	beq.n	800649c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	f003 0310 	and.w	r3, r3, #16
 8006488:	2b00      	cmp	r3, #0
 800648a:	d007      	beq.n	800649c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800648c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800648e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006492:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	2210      	movs	r2, #16
 800649a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f003 0304 	and.w	r3, r3, #4
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f003 0308 	and.w	r3, r3, #8
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d006      	beq.n	80064be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2208      	movs	r2, #8
 80064b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f930 	bl	800671e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	f003 0302 	and.w	r3, r3, #2
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d009      	beq.n	80064dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d002      	beq.n	80064dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7fc fd6c 	bl	8002fb4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00c      	beq.n	8006500 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d007      	beq.n	8006500 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80064f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	2210      	movs	r2, #16
 80064fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006500:	6a3b      	ldr	r3, [r7, #32]
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00b      	beq.n	8006522 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f003 0308 	and.w	r3, r3, #8
 8006510:	2b00      	cmp	r3, #0
 8006512:	d006      	beq.n	8006522 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2208      	movs	r2, #8
 800651a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f912 	bl	8006746 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	f003 0310 	and.w	r3, r3, #16
 8006528:	2b00      	cmp	r3, #0
 800652a:	d009      	beq.n	8006540 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	f003 0303 	and.w	r3, r3, #3
 8006536:	2b00      	cmp	r3, #0
 8006538:	d002      	beq.n	8006540 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f8f9 	bl	8006732 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00b      	beq.n	8006562 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800654a:	69fb      	ldr	r3, [r7, #28]
 800654c:	f003 0310 	and.w	r3, r3, #16
 8006550:	2b00      	cmp	r3, #0
 8006552:	d006      	beq.n	8006562 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	2210      	movs	r2, #16
 800655a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f8fc 	bl	800675a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006562:	6a3b      	ldr	r3, [r7, #32]
 8006564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006568:	2b00      	cmp	r3, #0
 800656a:	d00b      	beq.n	8006584 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800656c:	69fb      	ldr	r3, [r7, #28]
 800656e:	f003 0308 	and.w	r3, r3, #8
 8006572:	2b00      	cmp	r3, #0
 8006574:	d006      	beq.n	8006584 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2208      	movs	r2, #8
 800657c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 f8f5 	bl	800676e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006584:	6a3b      	ldr	r3, [r7, #32]
 8006586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800658a:	2b00      	cmp	r3, #0
 800658c:	d07b      	beq.n	8006686 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	d072      	beq.n	800667e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d008      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	f043 0301 	orr.w	r3, r3, #1
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d008      	beq.n	80065d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d003      	beq.n	80065d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80065c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ca:	f043 0302 	orr.w	r3, r3, #2
 80065ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d008      	beq.n	80065ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d003      	beq.n	80065ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80065e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e6:	f043 0304 	orr.w	r3, r3, #4
 80065ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d043      	beq.n	800667e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d03e      	beq.n	800667e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006606:	2b60      	cmp	r3, #96	; 0x60
 8006608:	d02b      	beq.n	8006662 <HAL_CAN_IRQHandler+0x32a>
 800660a:	2b60      	cmp	r3, #96	; 0x60
 800660c:	d82e      	bhi.n	800666c <HAL_CAN_IRQHandler+0x334>
 800660e:	2b50      	cmp	r3, #80	; 0x50
 8006610:	d022      	beq.n	8006658 <HAL_CAN_IRQHandler+0x320>
 8006612:	2b50      	cmp	r3, #80	; 0x50
 8006614:	d82a      	bhi.n	800666c <HAL_CAN_IRQHandler+0x334>
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d019      	beq.n	800664e <HAL_CAN_IRQHandler+0x316>
 800661a:	2b40      	cmp	r3, #64	; 0x40
 800661c:	d826      	bhi.n	800666c <HAL_CAN_IRQHandler+0x334>
 800661e:	2b30      	cmp	r3, #48	; 0x30
 8006620:	d010      	beq.n	8006644 <HAL_CAN_IRQHandler+0x30c>
 8006622:	2b30      	cmp	r3, #48	; 0x30
 8006624:	d822      	bhi.n	800666c <HAL_CAN_IRQHandler+0x334>
 8006626:	2b10      	cmp	r3, #16
 8006628:	d002      	beq.n	8006630 <HAL_CAN_IRQHandler+0x2f8>
 800662a:	2b20      	cmp	r3, #32
 800662c:	d005      	beq.n	800663a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800662e:	e01d      	b.n	800666c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	f043 0308 	orr.w	r3, r3, #8
 8006636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006638:	e019      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800663a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800663c:	f043 0310 	orr.w	r3, r3, #16
 8006640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006642:	e014      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	f043 0320 	orr.w	r3, r3, #32
 800664a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800664c:	e00f      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006656:	e00a      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800665a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006660:	e005      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006664:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800666a:	e000      	b.n	800666e <HAL_CAN_IRQHandler+0x336>
            break;
 800666c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	699a      	ldr	r2, [r3, #24]
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800667c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	2204      	movs	r2, #4
 8006684:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b00      	cmp	r3, #0
 800668a:	d008      	beq.n	800669e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006692:	431a      	orrs	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 f872 	bl	8006782 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800669e:	bf00      	nop
 80066a0:	3728      	adds	r7, #40	; 0x28
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066a6:	b480      	push	{r7}
 80066a8:	b083      	sub	sp, #12
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b083      	sub	sp, #12
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80066c2:	bf00      	nop
 80066c4:	370c      	adds	r7, #12
 80066c6:	46bd      	mov	sp, r7
 80066c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066cc:	4770      	bx	lr

080066ce <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066ce:	b480      	push	{r7}
 80066d0:	b083      	sub	sp, #12
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80066d6:	bf00      	nop
 80066d8:	370c      	adds	r7, #12
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80066ea:	bf00      	nop
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80066fe:	bf00      	nop
 8006700:	370c      	adds	r7, #12
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr

0800670a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800670a:	b480      	push	{r7}
 800670c:	b083      	sub	sp, #12
 800670e:	af00      	add	r7, sp, #0
 8006710:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr

0800671e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800671e:	b480      	push	{r7}
 8006720:	b083      	sub	sp, #12
 8006722:	af00      	add	r7, sp, #0
 8006724:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006726:	bf00      	nop
 8006728:	370c      	adds	r7, #12
 800672a:	46bd      	mov	sp, r7
 800672c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006730:	4770      	bx	lr

08006732 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006732:	b480      	push	{r7}
 8006734:	b083      	sub	sp, #12
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800673a:	bf00      	nop
 800673c:	370c      	adds	r7, #12
 800673e:	46bd      	mov	sp, r7
 8006740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006744:	4770      	bx	lr

08006746 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006746:	b480      	push	{r7}
 8006748:	b083      	sub	sp, #12
 800674a:	af00      	add	r7, sp, #0
 800674c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr

0800676e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800676e:	b480      	push	{r7}
 8006770:	b083      	sub	sp, #12
 8006772:	af00      	add	r7, sp, #0
 8006774:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006776:	bf00      	nop
 8006778:	370c      	adds	r7, #12
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr

08006782 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006782:	b480      	push	{r7}
 8006784:	b083      	sub	sp, #12
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800678a:	bf00      	nop
 800678c:	370c      	adds	r7, #12
 800678e:	46bd      	mov	sp, r7
 8006790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006794:	4770      	bx	lr
	...

08006798 <__NVIC_SetPriorityGrouping>:
{
 8006798:	b480      	push	{r7}
 800679a:	b085      	sub	sp, #20
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f003 0307 	and.w	r3, r3, #7
 80067a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067a8:	4b0b      	ldr	r3, [pc, #44]	; (80067d8 <__NVIC_SetPriorityGrouping+0x40>)
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067b4:	4013      	ands	r3, r2
 80067b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80067c0:	4b06      	ldr	r3, [pc, #24]	; (80067dc <__NVIC_SetPriorityGrouping+0x44>)
 80067c2:	4313      	orrs	r3, r2
 80067c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067c6:	4a04      	ldr	r2, [pc, #16]	; (80067d8 <__NVIC_SetPriorityGrouping+0x40>)
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	60d3      	str	r3, [r2, #12]
}
 80067cc:	bf00      	nop
 80067ce:	3714      	adds	r7, #20
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr
 80067d8:	e000ed00 	.word	0xe000ed00
 80067dc:	05fa0000 	.word	0x05fa0000

080067e0 <__NVIC_GetPriorityGrouping>:
{
 80067e0:	b480      	push	{r7}
 80067e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80067e4:	4b04      	ldr	r3, [pc, #16]	; (80067f8 <__NVIC_GetPriorityGrouping+0x18>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	0a1b      	lsrs	r3, r3, #8
 80067ea:	f003 0307 	and.w	r3, r3, #7
}
 80067ee:	4618      	mov	r0, r3
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr
 80067f8:	e000ed00 	.word	0xe000ed00

080067fc <__NVIC_EnableIRQ>:
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	4603      	mov	r3, r0
 8006804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800680a:	2b00      	cmp	r3, #0
 800680c:	db0b      	blt.n	8006826 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800680e:	79fb      	ldrb	r3, [r7, #7]
 8006810:	f003 021f 	and.w	r2, r3, #31
 8006814:	4907      	ldr	r1, [pc, #28]	; (8006834 <__NVIC_EnableIRQ+0x38>)
 8006816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800681a:	095b      	lsrs	r3, r3, #5
 800681c:	2001      	movs	r0, #1
 800681e:	fa00 f202 	lsl.w	r2, r0, r2
 8006822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006826:	bf00      	nop
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr
 8006832:	bf00      	nop
 8006834:	e000e100 	.word	0xe000e100

08006838 <__NVIC_DisableIRQ>:
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	4603      	mov	r3, r0
 8006840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006846:	2b00      	cmp	r3, #0
 8006848:	db12      	blt.n	8006870 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800684a:	79fb      	ldrb	r3, [r7, #7]
 800684c:	f003 021f 	and.w	r2, r3, #31
 8006850:	490a      	ldr	r1, [pc, #40]	; (800687c <__NVIC_DisableIRQ+0x44>)
 8006852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006856:	095b      	lsrs	r3, r3, #5
 8006858:	2001      	movs	r0, #1
 800685a:	fa00 f202 	lsl.w	r2, r0, r2
 800685e:	3320      	adds	r3, #32
 8006860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006864:	f3bf 8f4f 	dsb	sy
}
 8006868:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800686a:	f3bf 8f6f 	isb	sy
}
 800686e:	bf00      	nop
}
 8006870:	bf00      	nop
 8006872:	370c      	adds	r7, #12
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	e000e100 	.word	0xe000e100

08006880 <__NVIC_SetPriority>:
{
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	4603      	mov	r3, r0
 8006888:	6039      	str	r1, [r7, #0]
 800688a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800688c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006890:	2b00      	cmp	r3, #0
 8006892:	db0a      	blt.n	80068aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	490c      	ldr	r1, [pc, #48]	; (80068cc <__NVIC_SetPriority+0x4c>)
 800689a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800689e:	0112      	lsls	r2, r2, #4
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	440b      	add	r3, r1
 80068a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068a8:	e00a      	b.n	80068c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4908      	ldr	r1, [pc, #32]	; (80068d0 <__NVIC_SetPriority+0x50>)
 80068b0:	79fb      	ldrb	r3, [r7, #7]
 80068b2:	f003 030f 	and.w	r3, r3, #15
 80068b6:	3b04      	subs	r3, #4
 80068b8:	0112      	lsls	r2, r2, #4
 80068ba:	b2d2      	uxtb	r2, r2
 80068bc:	440b      	add	r3, r1
 80068be:	761a      	strb	r2, [r3, #24]
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	e000e100 	.word	0xe000e100
 80068d0:	e000ed00 	.word	0xe000ed00

080068d4 <NVIC_EncodePriority>:
{
 80068d4:	b480      	push	{r7}
 80068d6:	b089      	sub	sp, #36	; 0x24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	f1c3 0307 	rsb	r3, r3, #7
 80068ee:	2b04      	cmp	r3, #4
 80068f0:	bf28      	it	cs
 80068f2:	2304      	movcs	r3, #4
 80068f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3304      	adds	r3, #4
 80068fa:	2b06      	cmp	r3, #6
 80068fc:	d902      	bls.n	8006904 <NVIC_EncodePriority+0x30>
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	3b03      	subs	r3, #3
 8006902:	e000      	b.n	8006906 <NVIC_EncodePriority+0x32>
 8006904:	2300      	movs	r3, #0
 8006906:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006908:	f04f 32ff 	mov.w	r2, #4294967295
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	fa02 f303 	lsl.w	r3, r2, r3
 8006912:	43da      	mvns	r2, r3
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	401a      	ands	r2, r3
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800691c:	f04f 31ff 	mov.w	r1, #4294967295
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	fa01 f303 	lsl.w	r3, r1, r3
 8006926:	43d9      	mvns	r1, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800692c:	4313      	orrs	r3, r2
}
 800692e:	4618      	mov	r0, r3
 8006930:	3724      	adds	r7, #36	; 0x24
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr
	...

0800693c <SysTick_Config>:
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	3b01      	subs	r3, #1
 8006948:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800694c:	d301      	bcc.n	8006952 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800694e:	2301      	movs	r3, #1
 8006950:	e00f      	b.n	8006972 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006952:	4a0a      	ldr	r2, [pc, #40]	; (800697c <SysTick_Config+0x40>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	3b01      	subs	r3, #1
 8006958:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800695a:	210f      	movs	r1, #15
 800695c:	f04f 30ff 	mov.w	r0, #4294967295
 8006960:	f7ff ff8e 	bl	8006880 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006964:	4b05      	ldr	r3, [pc, #20]	; (800697c <SysTick_Config+0x40>)
 8006966:	2200      	movs	r2, #0
 8006968:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800696a:	4b04      	ldr	r3, [pc, #16]	; (800697c <SysTick_Config+0x40>)
 800696c:	2207      	movs	r2, #7
 800696e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	e000e010 	.word	0xe000e010

08006980 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b082      	sub	sp, #8
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ff05 	bl	8006798 <__NVIC_SetPriorityGrouping>
}
 800698e:	bf00      	nop
 8006990:	3708      	adds	r7, #8
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006996:	b580      	push	{r7, lr}
 8006998:	b086      	sub	sp, #24
 800699a:	af00      	add	r7, sp, #0
 800699c:	4603      	mov	r3, r0
 800699e:	60b9      	str	r1, [r7, #8]
 80069a0:	607a      	str	r2, [r7, #4]
 80069a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069a8:	f7ff ff1a 	bl	80067e0 <__NVIC_GetPriorityGrouping>
 80069ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069ae:	687a      	ldr	r2, [r7, #4]
 80069b0:	68b9      	ldr	r1, [r7, #8]
 80069b2:	6978      	ldr	r0, [r7, #20]
 80069b4:	f7ff ff8e 	bl	80068d4 <NVIC_EncodePriority>
 80069b8:	4602      	mov	r2, r0
 80069ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069be:	4611      	mov	r1, r2
 80069c0:	4618      	mov	r0, r3
 80069c2:	f7ff ff5d 	bl	8006880 <__NVIC_SetPriority>
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069ce:	b580      	push	{r7, lr}
 80069d0:	b082      	sub	sp, #8
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	4603      	mov	r3, r0
 80069d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80069d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069dc:	4618      	mov	r0, r3
 80069de:	f7ff ff0d 	bl	80067fc <__NVIC_EnableIRQ>
}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}

080069ea <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80069ea:	b580      	push	{r7, lr}
 80069ec:	b082      	sub	sp, #8
 80069ee:	af00      	add	r7, sp, #0
 80069f0:	4603      	mov	r3, r0
 80069f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80069f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f7ff ff1d 	bl	8006838 <__NVIC_DisableIRQ>
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b082      	sub	sp, #8
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f7ff ff94 	bl	800693c <SysTick_Config>
 8006a14:	4603      	mov	r3, r0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006a2c:	f7fe fbbe 	bl	80051ac <HAL_GetTick>
 8006a30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d008      	beq.n	8006a50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2280      	movs	r2, #128	; 0x80
 8006a42:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e052      	b.n	8006af6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f022 0216 	bic.w	r2, r2, #22
 8006a5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	695a      	ldr	r2, [r3, #20]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d103      	bne.n	8006a80 <HAL_DMA_Abort+0x62>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	f022 0208 	bic.w	r2, r2, #8
 8006a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f022 0201 	bic.w	r2, r2, #1
 8006a9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aa0:	e013      	b.n	8006aca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006aa2:	f7fe fb83 	bl	80051ac <HAL_GetTick>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	1ad3      	subs	r3, r2, r3
 8006aac:	2b05      	cmp	r3, #5
 8006aae:	d90c      	bls.n	8006aca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2203      	movs	r2, #3
 8006aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e015      	b.n	8006af6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f003 0301 	and.w	r3, r3, #1
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1e4      	bne.n	8006aa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006adc:	223f      	movs	r2, #63	; 0x3f
 8006ade:	409a      	lsls	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2201      	movs	r2, #1
 8006ae8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006afe:	b480      	push	{r7}
 8006b00:	b083      	sub	sp, #12
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b02      	cmp	r3, #2
 8006b10:	d004      	beq.n	8006b1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2280      	movs	r2, #128	; 0x80
 8006b16:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e00c      	b.n	8006b36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2205      	movs	r2, #5
 8006b20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681a      	ldr	r2, [r3, #0]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0201 	bic.w	r2, r2, #1
 8006b32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006b34:	2300      	movs	r3, #0
}
 8006b36:	4618      	mov	r0, r3
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
	...

08006b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b089      	sub	sp, #36	; 0x24
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b4e:	2300      	movs	r3, #0
 8006b50:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006b52:	2300      	movs	r3, #0
 8006b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b5e:	2300      	movs	r3, #0
 8006b60:	61fb      	str	r3, [r7, #28]
 8006b62:	e175      	b.n	8006e50 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b64:	2201      	movs	r2, #1
 8006b66:	69fb      	ldr	r3, [r7, #28]
 8006b68:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	697a      	ldr	r2, [r7, #20]
 8006b74:	4013      	ands	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b78:	693a      	ldr	r2, [r7, #16]
 8006b7a:	697b      	ldr	r3, [r7, #20]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	f040 8164 	bne.w	8006e4a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d005      	beq.n	8006b9a <HAL_GPIO_Init+0x56>
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	f003 0303 	and.w	r3, r3, #3
 8006b96:	2b02      	cmp	r3, #2
 8006b98:	d130      	bne.n	8006bfc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	005b      	lsls	r3, r3, #1
 8006ba4:	2203      	movs	r2, #3
 8006ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8006baa:	43db      	mvns	r3, r3
 8006bac:	69ba      	ldr	r2, [r7, #24]
 8006bae:	4013      	ands	r3, r2
 8006bb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	68da      	ldr	r2, [r3, #12]
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	005b      	lsls	r3, r3, #1
 8006bba:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	091b      	lsrs	r3, r3, #4
 8006be6:	f003 0201 	and.w	r2, r3, #1
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	69ba      	ldr	r2, [r7, #24]
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69ba      	ldr	r2, [r7, #24]
 8006bfa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 0303 	and.w	r3, r3, #3
 8006c04:	2b03      	cmp	r3, #3
 8006c06:	d017      	beq.n	8006c38 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	68db      	ldr	r3, [r3, #12]
 8006c0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006c0e:	69fb      	ldr	r3, [r7, #28]
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	2203      	movs	r2, #3
 8006c14:	fa02 f303 	lsl.w	r3, r2, r3
 8006c18:	43db      	mvns	r3, r3
 8006c1a:	69ba      	ldr	r2, [r7, #24]
 8006c1c:	4013      	ands	r3, r2
 8006c1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	005b      	lsls	r3, r3, #1
 8006c28:	fa02 f303 	lsl.w	r3, r2, r3
 8006c2c:	69ba      	ldr	r2, [r7, #24]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69ba      	ldr	r2, [r7, #24]
 8006c36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	f003 0303 	and.w	r3, r3, #3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d123      	bne.n	8006c8c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	08da      	lsrs	r2, r3, #3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3208      	adds	r2, #8
 8006c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c52:	69fb      	ldr	r3, [r7, #28]
 8006c54:	f003 0307 	and.w	r3, r3, #7
 8006c58:	009b      	lsls	r3, r3, #2
 8006c5a:	220f      	movs	r2, #15
 8006c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c60:	43db      	mvns	r3, r3
 8006c62:	69ba      	ldr	r2, [r7, #24]
 8006c64:	4013      	ands	r3, r2
 8006c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	691a      	ldr	r2, [r3, #16]
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f003 0307 	and.w	r3, r3, #7
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006c7e:	69fb      	ldr	r3, [r7, #28]
 8006c80:	08da      	lsrs	r2, r3, #3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	3208      	adds	r2, #8
 8006c86:	69b9      	ldr	r1, [r7, #24]
 8006c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	005b      	lsls	r3, r3, #1
 8006c96:	2203      	movs	r2, #3
 8006c98:	fa02 f303 	lsl.w	r3, r2, r3
 8006c9c:	43db      	mvns	r3, r3
 8006c9e:	69ba      	ldr	r2, [r7, #24]
 8006ca0:	4013      	ands	r3, r2
 8006ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	f003 0203 	and.w	r2, r3, #3
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	005b      	lsls	r3, r3, #1
 8006cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006cb4:	69ba      	ldr	r2, [r7, #24]
 8006cb6:	4313      	orrs	r3, r2
 8006cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69ba      	ldr	r2, [r7, #24]
 8006cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	685b      	ldr	r3, [r3, #4]
 8006cc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	f000 80be 	beq.w	8006e4a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006cce:	4b66      	ldr	r3, [pc, #408]	; (8006e68 <HAL_GPIO_Init+0x324>)
 8006cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd2:	4a65      	ldr	r2, [pc, #404]	; (8006e68 <HAL_GPIO_Init+0x324>)
 8006cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8006cda:	4b63      	ldr	r3, [pc, #396]	; (8006e68 <HAL_GPIO_Init+0x324>)
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ce2:	60fb      	str	r3, [r7, #12]
 8006ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006ce6:	4a61      	ldr	r2, [pc, #388]	; (8006e6c <HAL_GPIO_Init+0x328>)
 8006ce8:	69fb      	ldr	r3, [r7, #28]
 8006cea:	089b      	lsrs	r3, r3, #2
 8006cec:	3302      	adds	r3, #2
 8006cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	009b      	lsls	r3, r3, #2
 8006cfc:	220f      	movs	r2, #15
 8006cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4a58      	ldr	r2, [pc, #352]	; (8006e70 <HAL_GPIO_Init+0x32c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d037      	beq.n	8006d82 <HAL_GPIO_Init+0x23e>
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	4a57      	ldr	r2, [pc, #348]	; (8006e74 <HAL_GPIO_Init+0x330>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d031      	beq.n	8006d7e <HAL_GPIO_Init+0x23a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	4a56      	ldr	r2, [pc, #344]	; (8006e78 <HAL_GPIO_Init+0x334>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d02b      	beq.n	8006d7a <HAL_GPIO_Init+0x236>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	4a55      	ldr	r2, [pc, #340]	; (8006e7c <HAL_GPIO_Init+0x338>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d025      	beq.n	8006d76 <HAL_GPIO_Init+0x232>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	4a54      	ldr	r2, [pc, #336]	; (8006e80 <HAL_GPIO_Init+0x33c>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d01f      	beq.n	8006d72 <HAL_GPIO_Init+0x22e>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	4a53      	ldr	r2, [pc, #332]	; (8006e84 <HAL_GPIO_Init+0x340>)
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d019      	beq.n	8006d6e <HAL_GPIO_Init+0x22a>
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	4a52      	ldr	r2, [pc, #328]	; (8006e88 <HAL_GPIO_Init+0x344>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d013      	beq.n	8006d6a <HAL_GPIO_Init+0x226>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	4a51      	ldr	r2, [pc, #324]	; (8006e8c <HAL_GPIO_Init+0x348>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d00d      	beq.n	8006d66 <HAL_GPIO_Init+0x222>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	4a50      	ldr	r2, [pc, #320]	; (8006e90 <HAL_GPIO_Init+0x34c>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	d007      	beq.n	8006d62 <HAL_GPIO_Init+0x21e>
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	4a4f      	ldr	r2, [pc, #316]	; (8006e94 <HAL_GPIO_Init+0x350>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_GPIO_Init+0x21a>
 8006d5a:	2309      	movs	r3, #9
 8006d5c:	e012      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d5e:	230a      	movs	r3, #10
 8006d60:	e010      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d62:	2308      	movs	r3, #8
 8006d64:	e00e      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d66:	2307      	movs	r3, #7
 8006d68:	e00c      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	e00a      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d6e:	2305      	movs	r3, #5
 8006d70:	e008      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d72:	2304      	movs	r3, #4
 8006d74:	e006      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d76:	2303      	movs	r3, #3
 8006d78:	e004      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d7a:	2302      	movs	r3, #2
 8006d7c:	e002      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d7e:	2301      	movs	r3, #1
 8006d80:	e000      	b.n	8006d84 <HAL_GPIO_Init+0x240>
 8006d82:	2300      	movs	r3, #0
 8006d84:	69fa      	ldr	r2, [r7, #28]
 8006d86:	f002 0203 	and.w	r2, r2, #3
 8006d8a:	0092      	lsls	r2, r2, #2
 8006d8c:	4093      	lsls	r3, r2
 8006d8e:	69ba      	ldr	r2, [r7, #24]
 8006d90:	4313      	orrs	r3, r2
 8006d92:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d94:	4935      	ldr	r1, [pc, #212]	; (8006e6c <HAL_GPIO_Init+0x328>)
 8006d96:	69fb      	ldr	r3, [r7, #28]
 8006d98:	089b      	lsrs	r3, r3, #2
 8006d9a:	3302      	adds	r3, #2
 8006d9c:	69ba      	ldr	r2, [r7, #24]
 8006d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006da2:	4b3d      	ldr	r3, [pc, #244]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006da4:	689b      	ldr	r3, [r3, #8]
 8006da6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	43db      	mvns	r3, r3
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	4013      	ands	r3, r2
 8006db0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d003      	beq.n	8006dc6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006dbe:	69ba      	ldr	r2, [r7, #24]
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006dc6:	4a34      	ldr	r2, [pc, #208]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006dc8:	69bb      	ldr	r3, [r7, #24]
 8006dca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dcc:	4b32      	ldr	r3, [pc, #200]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4013      	ands	r3, r2
 8006dda:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d003      	beq.n	8006df0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006de8:	69ba      	ldr	r2, [r7, #24]
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006df0:	4a29      	ldr	r2, [pc, #164]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006df6:	4b28      	ldr	r3, [pc, #160]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	43db      	mvns	r3, r3
 8006e00:	69ba      	ldr	r2, [r7, #24]
 8006e02:	4013      	ands	r3, r2
 8006e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d003      	beq.n	8006e1a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006e12:	69ba      	ldr	r2, [r7, #24]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006e1a:	4a1f      	ldr	r2, [pc, #124]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e20:	4b1d      	ldr	r3, [pc, #116]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e26:	693b      	ldr	r3, [r7, #16]
 8006e28:	43db      	mvns	r3, r3
 8006e2a:	69ba      	ldr	r2, [r7, #24]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e3c:	69ba      	ldr	r2, [r7, #24]
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	4313      	orrs	r3, r2
 8006e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e44:	4a14      	ldr	r2, [pc, #80]	; (8006e98 <HAL_GPIO_Init+0x354>)
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e4a:	69fb      	ldr	r3, [r7, #28]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	61fb      	str	r3, [r7, #28]
 8006e50:	69fb      	ldr	r3, [r7, #28]
 8006e52:	2b0f      	cmp	r3, #15
 8006e54:	f67f ae86 	bls.w	8006b64 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3724      	adds	r7, #36	; 0x24
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	40023800 	.word	0x40023800
 8006e6c:	40013800 	.word	0x40013800
 8006e70:	40020000 	.word	0x40020000
 8006e74:	40020400 	.word	0x40020400
 8006e78:	40020800 	.word	0x40020800
 8006e7c:	40020c00 	.word	0x40020c00
 8006e80:	40021000 	.word	0x40021000
 8006e84:	40021400 	.word	0x40021400
 8006e88:	40021800 	.word	0x40021800
 8006e8c:	40021c00 	.word	0x40021c00
 8006e90:	40022000 	.word	0x40022000
 8006e94:	40022400 	.word	0x40022400
 8006e98:	40013c00 	.word	0x40013c00

08006e9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691a      	ldr	r2, [r3, #16]
 8006eac:	887b      	ldrh	r3, [r7, #2]
 8006eae:	4013      	ands	r3, r2
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d002      	beq.n	8006eba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	73fb      	strb	r3, [r7, #15]
 8006eb8:	e001      	b.n	8006ebe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3714      	adds	r7, #20
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eca:	4770      	bx	lr

08006ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b083      	sub	sp, #12
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	807b      	strh	r3, [r7, #2]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006edc:	787b      	ldrb	r3, [r7, #1]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006ee2:	887a      	ldrh	r2, [r7, #2]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006ee8:	e003      	b.n	8006ef2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006eea:	887b      	ldrh	r3, [r7, #2]
 8006eec:	041a      	lsls	r2, r3, #16
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	619a      	str	r2, [r3, #24]
}
 8006ef2:	bf00      	nop
 8006ef4:	370c      	adds	r7, #12
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr

08006efe <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b085      	sub	sp, #20
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	695b      	ldr	r3, [r3, #20]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006f10:	887a      	ldrh	r2, [r7, #2]
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	4013      	ands	r3, r2
 8006f16:	041a      	lsls	r2, r3, #16
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	43d9      	mvns	r1, r3
 8006f1c:	887b      	ldrh	r3, [r7, #2]
 8006f1e:	400b      	ands	r3, r1
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	619a      	str	r2, [r3, #24]
}
 8006f26:	bf00      	nop
 8006f28:	3714      	adds	r7, #20
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f30:	4770      	bx	lr
	...

08006f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006f3e:	4b08      	ldr	r3, [pc, #32]	; (8006f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f40:	695a      	ldr	r2, [r3, #20]
 8006f42:	88fb      	ldrh	r3, [r7, #6]
 8006f44:	4013      	ands	r3, r2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d006      	beq.n	8006f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006f4a:	4a05      	ldr	r2, [pc, #20]	; (8006f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006f50:	88fb      	ldrh	r3, [r7, #6]
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fa fe20 	bl	8001b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8006f58:	bf00      	nop
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	40013c00 	.word	0x40013c00

08006f64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006f6e:	4b23      	ldr	r3, [pc, #140]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f72:	4a22      	ldr	r2, [pc, #136]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f78:	6413      	str	r3, [r2, #64]	; 0x40
 8006f7a:	4b20      	ldr	r3, [pc, #128]	; (8006ffc <HAL_PWREx_EnableOverDrive+0x98>)
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006f86:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	4a1d      	ldr	r2, [pc, #116]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006f8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006f92:	f7fe f90b 	bl	80051ac <HAL_GetTick>
 8006f96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006f98:	e009      	b.n	8006fae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006f9a:	f7fe f907 	bl	80051ac <HAL_GetTick>
 8006f9e:	4602      	mov	r2, r0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	1ad3      	subs	r3, r2, r3
 8006fa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fa8:	d901      	bls.n	8006fae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006faa:	2303      	movs	r3, #3
 8006fac:	e022      	b.n	8006ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006fae:	4b14      	ldr	r3, [pc, #80]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fb6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fba:	d1ee      	bne.n	8006f9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fc6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006fc8:	f7fe f8f0 	bl	80051ac <HAL_GetTick>
 8006fcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fce:	e009      	b.n	8006fe4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006fd0:	f7fe f8ec 	bl	80051ac <HAL_GetTick>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	1ad3      	subs	r3, r2, r3
 8006fda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006fde:	d901      	bls.n	8006fe4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006fe0:	2303      	movs	r3, #3
 8006fe2:	e007      	b.n	8006ff4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006fe4:	4b06      	ldr	r3, [pc, #24]	; (8007000 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006ff0:	d1ee      	bne.n	8006fd0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	40023800 	.word	0x40023800
 8007000:	40007000 	.word	0x40007000

08007004 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007004:	b580      	push	{r7, lr}
 8007006:	b086      	sub	sp, #24
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800700c:	2300      	movs	r3, #0
 800700e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d101      	bne.n	800701a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e291      	b.n	800753e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	f000 8087 	beq.w	8007136 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007028:	4b96      	ldr	r3, [pc, #600]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800702a:	689b      	ldr	r3, [r3, #8]
 800702c:	f003 030c 	and.w	r3, r3, #12
 8007030:	2b04      	cmp	r3, #4
 8007032:	d00c      	beq.n	800704e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007034:	4b93      	ldr	r3, [pc, #588]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f003 030c 	and.w	r3, r3, #12
 800703c:	2b08      	cmp	r3, #8
 800703e:	d112      	bne.n	8007066 <HAL_RCC_OscConfig+0x62>
 8007040:	4b90      	ldr	r3, [pc, #576]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800704c:	d10b      	bne.n	8007066 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800704e:	4b8d      	ldr	r3, [pc, #564]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007056:	2b00      	cmp	r3, #0
 8007058:	d06c      	beq.n	8007134 <HAL_RCC_OscConfig+0x130>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d168      	bne.n	8007134 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	e26b      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706e:	d106      	bne.n	800707e <HAL_RCC_OscConfig+0x7a>
 8007070:	4b84      	ldr	r3, [pc, #528]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a83      	ldr	r2, [pc, #524]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007076:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707a:	6013      	str	r3, [r2, #0]
 800707c:	e02e      	b.n	80070dc <HAL_RCC_OscConfig+0xd8>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	685b      	ldr	r3, [r3, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d10c      	bne.n	80070a0 <HAL_RCC_OscConfig+0x9c>
 8007086:	4b7f      	ldr	r3, [pc, #508]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a7e      	ldr	r2, [pc, #504]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800708c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007090:	6013      	str	r3, [r2, #0]
 8007092:	4b7c      	ldr	r3, [pc, #496]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a7b      	ldr	r2, [pc, #492]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007098:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800709c:	6013      	str	r3, [r2, #0]
 800709e:	e01d      	b.n	80070dc <HAL_RCC_OscConfig+0xd8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	685b      	ldr	r3, [r3, #4]
 80070a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80070a8:	d10c      	bne.n	80070c4 <HAL_RCC_OscConfig+0xc0>
 80070aa:	4b76      	ldr	r3, [pc, #472]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a75      	ldr	r2, [pc, #468]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80070b4:	6013      	str	r3, [r2, #0]
 80070b6:	4b73      	ldr	r3, [pc, #460]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a72      	ldr	r2, [pc, #456]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80070c0:	6013      	str	r3, [r2, #0]
 80070c2:	e00b      	b.n	80070dc <HAL_RCC_OscConfig+0xd8>
 80070c4:	4b6f      	ldr	r3, [pc, #444]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4a6e      	ldr	r2, [pc, #440]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070ce:	6013      	str	r3, [r2, #0]
 80070d0:	4b6c      	ldr	r3, [pc, #432]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4a6b      	ldr	r2, [pc, #428]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80070d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80070da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	685b      	ldr	r3, [r3, #4]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d013      	beq.n	800710c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070e4:	f7fe f862 	bl	80051ac <HAL_GetTick>
 80070e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ea:	e008      	b.n	80070fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80070ec:	f7fe f85e 	bl	80051ac <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	693b      	ldr	r3, [r7, #16]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b64      	cmp	r3, #100	; 0x64
 80070f8:	d901      	bls.n	80070fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070fa:	2303      	movs	r3, #3
 80070fc:	e21f      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070fe:	4b61      	ldr	r3, [pc, #388]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007106:	2b00      	cmp	r3, #0
 8007108:	d0f0      	beq.n	80070ec <HAL_RCC_OscConfig+0xe8>
 800710a:	e014      	b.n	8007136 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800710c:	f7fe f84e 	bl	80051ac <HAL_GetTick>
 8007110:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007112:	e008      	b.n	8007126 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007114:	f7fe f84a 	bl	80051ac <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	2b64      	cmp	r3, #100	; 0x64
 8007120:	d901      	bls.n	8007126 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007122:	2303      	movs	r3, #3
 8007124:	e20b      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007126:	4b57      	ldr	r3, [pc, #348]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800712e:	2b00      	cmp	r3, #0
 8007130:	d1f0      	bne.n	8007114 <HAL_RCC_OscConfig+0x110>
 8007132:	e000      	b.n	8007136 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007134:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f003 0302 	and.w	r3, r3, #2
 800713e:	2b00      	cmp	r3, #0
 8007140:	d069      	beq.n	8007216 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007142:	4b50      	ldr	r3, [pc, #320]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007144:	689b      	ldr	r3, [r3, #8]
 8007146:	f003 030c 	and.w	r3, r3, #12
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00b      	beq.n	8007166 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800714e:	4b4d      	ldr	r3, [pc, #308]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	f003 030c 	and.w	r3, r3, #12
 8007156:	2b08      	cmp	r3, #8
 8007158:	d11c      	bne.n	8007194 <HAL_RCC_OscConfig+0x190>
 800715a:	4b4a      	ldr	r3, [pc, #296]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007162:	2b00      	cmp	r3, #0
 8007164:	d116      	bne.n	8007194 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007166:	4b47      	ldr	r3, [pc, #284]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f003 0302 	and.w	r3, r3, #2
 800716e:	2b00      	cmp	r3, #0
 8007170:	d005      	beq.n	800717e <HAL_RCC_OscConfig+0x17a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d001      	beq.n	800717e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e1df      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800717e:	4b41      	ldr	r3, [pc, #260]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	00db      	lsls	r3, r3, #3
 800718c:	493d      	ldr	r1, [pc, #244]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800718e:	4313      	orrs	r3, r2
 8007190:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007192:	e040      	b.n	8007216 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d023      	beq.n	80071e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800719c:	4b39      	ldr	r3, [pc, #228]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a38      	ldr	r2, [pc, #224]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a8:	f7fe f800 	bl	80051ac <HAL_GetTick>
 80071ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071ae:	e008      	b.n	80071c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071b0:	f7fd fffc 	bl	80051ac <HAL_GetTick>
 80071b4:	4602      	mov	r2, r0
 80071b6:	693b      	ldr	r3, [r7, #16]
 80071b8:	1ad3      	subs	r3, r2, r3
 80071ba:	2b02      	cmp	r3, #2
 80071bc:	d901      	bls.n	80071c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e1bd      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80071c2:	4b30      	ldr	r3, [pc, #192]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f003 0302 	and.w	r3, r3, #2
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d0f0      	beq.n	80071b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071ce:	4b2d      	ldr	r3, [pc, #180]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	00db      	lsls	r3, r3, #3
 80071dc:	4929      	ldr	r1, [pc, #164]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071de:	4313      	orrs	r3, r2
 80071e0:	600b      	str	r3, [r1, #0]
 80071e2:	e018      	b.n	8007216 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80071e4:	4b27      	ldr	r3, [pc, #156]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a26      	ldr	r2, [pc, #152]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 80071ea:	f023 0301 	bic.w	r3, r3, #1
 80071ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071f0:	f7fd ffdc 	bl	80051ac <HAL_GetTick>
 80071f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071f6:	e008      	b.n	800720a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80071f8:	f7fd ffd8 	bl	80051ac <HAL_GetTick>
 80071fc:	4602      	mov	r2, r0
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	1ad3      	subs	r3, r2, r3
 8007202:	2b02      	cmp	r3, #2
 8007204:	d901      	bls.n	800720a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007206:	2303      	movs	r3, #3
 8007208:	e199      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800720a:	4b1e      	ldr	r3, [pc, #120]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f003 0302 	and.w	r3, r3, #2
 8007212:	2b00      	cmp	r3, #0
 8007214:	d1f0      	bne.n	80071f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d038      	beq.n	8007294 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	695b      	ldr	r3, [r3, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d019      	beq.n	800725e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800722a:	4b16      	ldr	r3, [pc, #88]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 800722c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800722e:	4a15      	ldr	r2, [pc, #84]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007230:	f043 0301 	orr.w	r3, r3, #1
 8007234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007236:	f7fd ffb9 	bl	80051ac <HAL_GetTick>
 800723a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800723c:	e008      	b.n	8007250 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800723e:	f7fd ffb5 	bl	80051ac <HAL_GetTick>
 8007242:	4602      	mov	r2, r0
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	1ad3      	subs	r3, r2, r3
 8007248:	2b02      	cmp	r3, #2
 800724a:	d901      	bls.n	8007250 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e176      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007250:	4b0c      	ldr	r3, [pc, #48]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007254:	f003 0302 	and.w	r3, r3, #2
 8007258:	2b00      	cmp	r3, #0
 800725a:	d0f0      	beq.n	800723e <HAL_RCC_OscConfig+0x23a>
 800725c:	e01a      	b.n	8007294 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800725e:	4b09      	ldr	r3, [pc, #36]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007262:	4a08      	ldr	r2, [pc, #32]	; (8007284 <HAL_RCC_OscConfig+0x280>)
 8007264:	f023 0301 	bic.w	r3, r3, #1
 8007268:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800726a:	f7fd ff9f 	bl	80051ac <HAL_GetTick>
 800726e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007270:	e00a      	b.n	8007288 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007272:	f7fd ff9b 	bl	80051ac <HAL_GetTick>
 8007276:	4602      	mov	r2, r0
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	1ad3      	subs	r3, r2, r3
 800727c:	2b02      	cmp	r3, #2
 800727e:	d903      	bls.n	8007288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007280:	2303      	movs	r3, #3
 8007282:	e15c      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
 8007284:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007288:	4b91      	ldr	r3, [pc, #580]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800728a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800728c:	f003 0302 	and.w	r3, r3, #2
 8007290:	2b00      	cmp	r3, #0
 8007292:	d1ee      	bne.n	8007272 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f003 0304 	and.w	r3, r3, #4
 800729c:	2b00      	cmp	r3, #0
 800729e:	f000 80a4 	beq.w	80073ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80072a2:	4b8b      	ldr	r3, [pc, #556]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10d      	bne.n	80072ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80072ae:	4b88      	ldr	r3, [pc, #544]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	4a87      	ldr	r2, [pc, #540]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80072b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b8:	6413      	str	r3, [r2, #64]	; 0x40
 80072ba:	4b85      	ldr	r3, [pc, #532]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	60bb      	str	r3, [r7, #8]
 80072c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80072c6:	2301      	movs	r3, #1
 80072c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072ca:	4b82      	ldr	r3, [pc, #520]	; (80074d4 <HAL_RCC_OscConfig+0x4d0>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d118      	bne.n	8007308 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80072d6:	4b7f      	ldr	r3, [pc, #508]	; (80074d4 <HAL_RCC_OscConfig+0x4d0>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a7e      	ldr	r2, [pc, #504]	; (80074d4 <HAL_RCC_OscConfig+0x4d0>)
 80072dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80072e2:	f7fd ff63 	bl	80051ac <HAL_GetTick>
 80072e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072e8:	e008      	b.n	80072fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072ea:	f7fd ff5f 	bl	80051ac <HAL_GetTick>
 80072ee:	4602      	mov	r2, r0
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	1ad3      	subs	r3, r2, r3
 80072f4:	2b64      	cmp	r3, #100	; 0x64
 80072f6:	d901      	bls.n	80072fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80072f8:	2303      	movs	r3, #3
 80072fa:	e120      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80072fc:	4b75      	ldr	r3, [pc, #468]	; (80074d4 <HAL_RCC_OscConfig+0x4d0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0f0      	beq.n	80072ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	689b      	ldr	r3, [r3, #8]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d106      	bne.n	800731e <HAL_RCC_OscConfig+0x31a>
 8007310:	4b6f      	ldr	r3, [pc, #444]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007314:	4a6e      	ldr	r2, [pc, #440]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007316:	f043 0301 	orr.w	r3, r3, #1
 800731a:	6713      	str	r3, [r2, #112]	; 0x70
 800731c:	e02d      	b.n	800737a <HAL_RCC_OscConfig+0x376>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d10c      	bne.n	8007340 <HAL_RCC_OscConfig+0x33c>
 8007326:	4b6a      	ldr	r3, [pc, #424]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800732a:	4a69      	ldr	r2, [pc, #420]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800732c:	f023 0301 	bic.w	r3, r3, #1
 8007330:	6713      	str	r3, [r2, #112]	; 0x70
 8007332:	4b67      	ldr	r3, [pc, #412]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	4a66      	ldr	r2, [pc, #408]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007338:	f023 0304 	bic.w	r3, r3, #4
 800733c:	6713      	str	r3, [r2, #112]	; 0x70
 800733e:	e01c      	b.n	800737a <HAL_RCC_OscConfig+0x376>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b05      	cmp	r3, #5
 8007346:	d10c      	bne.n	8007362 <HAL_RCC_OscConfig+0x35e>
 8007348:	4b61      	ldr	r3, [pc, #388]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800734a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800734c:	4a60      	ldr	r2, [pc, #384]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800734e:	f043 0304 	orr.w	r3, r3, #4
 8007352:	6713      	str	r3, [r2, #112]	; 0x70
 8007354:	4b5e      	ldr	r3, [pc, #376]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007358:	4a5d      	ldr	r2, [pc, #372]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800735a:	f043 0301 	orr.w	r3, r3, #1
 800735e:	6713      	str	r3, [r2, #112]	; 0x70
 8007360:	e00b      	b.n	800737a <HAL_RCC_OscConfig+0x376>
 8007362:	4b5b      	ldr	r3, [pc, #364]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007366:	4a5a      	ldr	r2, [pc, #360]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007368:	f023 0301 	bic.w	r3, r3, #1
 800736c:	6713      	str	r3, [r2, #112]	; 0x70
 800736e:	4b58      	ldr	r3, [pc, #352]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007372:	4a57      	ldr	r2, [pc, #348]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007374:	f023 0304 	bic.w	r3, r3, #4
 8007378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	689b      	ldr	r3, [r3, #8]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d015      	beq.n	80073ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007382:	f7fd ff13 	bl	80051ac <HAL_GetTick>
 8007386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007388:	e00a      	b.n	80073a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800738a:	f7fd ff0f 	bl	80051ac <HAL_GetTick>
 800738e:	4602      	mov	r2, r0
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	1ad3      	subs	r3, r2, r3
 8007394:	f241 3288 	movw	r2, #5000	; 0x1388
 8007398:	4293      	cmp	r3, r2
 800739a:	d901      	bls.n	80073a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800739c:	2303      	movs	r3, #3
 800739e:	e0ce      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073a0:	4b4b      	ldr	r3, [pc, #300]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80073a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a4:	f003 0302 	and.w	r3, r3, #2
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d0ee      	beq.n	800738a <HAL_RCC_OscConfig+0x386>
 80073ac:	e014      	b.n	80073d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073ae:	f7fd fefd 	bl	80051ac <HAL_GetTick>
 80073b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073b4:	e00a      	b.n	80073cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80073b6:	f7fd fef9 	bl	80051ac <HAL_GetTick>
 80073ba:	4602      	mov	r2, r0
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	1ad3      	subs	r3, r2, r3
 80073c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d901      	bls.n	80073cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80073c8:	2303      	movs	r3, #3
 80073ca:	e0b8      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80073cc:	4b40      	ldr	r3, [pc, #256]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80073ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073d0:	f003 0302 	and.w	r3, r3, #2
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d1ee      	bne.n	80073b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073d8:	7dfb      	ldrb	r3, [r7, #23]
 80073da:	2b01      	cmp	r3, #1
 80073dc:	d105      	bne.n	80073ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073de:	4b3c      	ldr	r3, [pc, #240]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80073e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e2:	4a3b      	ldr	r2, [pc, #236]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80073e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80a4 	beq.w	800753c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80073f4:	4b36      	ldr	r3, [pc, #216]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	f003 030c 	and.w	r3, r3, #12
 80073fc:	2b08      	cmp	r3, #8
 80073fe:	d06b      	beq.n	80074d8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	699b      	ldr	r3, [r3, #24]
 8007404:	2b02      	cmp	r3, #2
 8007406:	d149      	bne.n	800749c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007408:	4b31      	ldr	r3, [pc, #196]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a30      	ldr	r2, [pc, #192]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800740e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007412:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007414:	f7fd feca 	bl	80051ac <HAL_GetTick>
 8007418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800741a:	e008      	b.n	800742e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800741c:	f7fd fec6 	bl	80051ac <HAL_GetTick>
 8007420:	4602      	mov	r2, r0
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	1ad3      	subs	r3, r2, r3
 8007426:	2b02      	cmp	r3, #2
 8007428:	d901      	bls.n	800742e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800742a:	2303      	movs	r3, #3
 800742c:	e087      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742e:	4b28      	ldr	r3, [pc, #160]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d1f0      	bne.n	800741c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69da      	ldr	r2, [r3, #28]
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007448:	019b      	lsls	r3, r3, #6
 800744a:	431a      	orrs	r2, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007450:	085b      	lsrs	r3, r3, #1
 8007452:	3b01      	subs	r3, #1
 8007454:	041b      	lsls	r3, r3, #16
 8007456:	431a      	orrs	r2, r3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	4313      	orrs	r3, r2
 8007460:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007462:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007466:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007468:	4b19      	ldr	r3, [pc, #100]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	4a18      	ldr	r2, [pc, #96]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800746e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007474:	f7fd fe9a 	bl	80051ac <HAL_GetTick>
 8007478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800747a:	e008      	b.n	800748e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800747c:	f7fd fe96 	bl	80051ac <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b02      	cmp	r3, #2
 8007488:	d901      	bls.n	800748e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e057      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800748e:	4b10      	ldr	r3, [pc, #64]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d0f0      	beq.n	800747c <HAL_RCC_OscConfig+0x478>
 800749a:	e04f      	b.n	800753c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800749c:	4b0c      	ldr	r3, [pc, #48]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a0b      	ldr	r2, [pc, #44]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80074a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074a8:	f7fd fe80 	bl	80051ac <HAL_GetTick>
 80074ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80074b0:	f7fd fe7c 	bl	80051ac <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	d901      	bls.n	80074c2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e03d      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074c2:	4b03      	ldr	r3, [pc, #12]	; (80074d0 <HAL_RCC_OscConfig+0x4cc>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d1f0      	bne.n	80074b0 <HAL_RCC_OscConfig+0x4ac>
 80074ce:	e035      	b.n	800753c <HAL_RCC_OscConfig+0x538>
 80074d0:	40023800 	.word	0x40023800
 80074d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80074d8:	4b1b      	ldr	r3, [pc, #108]	; (8007548 <HAL_RCC_OscConfig+0x544>)
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	699b      	ldr	r3, [r3, #24]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d028      	beq.n	8007538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d121      	bne.n	8007538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80074fe:	429a      	cmp	r2, r3
 8007500:	d11a      	bne.n	8007538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007502:	68fa      	ldr	r2, [r7, #12]
 8007504:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007508:	4013      	ands	r3, r2
 800750a:	687a      	ldr	r2, [r7, #4]
 800750c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800750e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007510:	4293      	cmp	r3, r2
 8007512:	d111      	bne.n	8007538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	085b      	lsrs	r3, r3, #1
 8007520:	3b01      	subs	r3, #1
 8007522:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007524:	429a      	cmp	r2, r3
 8007526:	d107      	bne.n	8007538 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007532:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007534:	429a      	cmp	r2, r3
 8007536:	d001      	beq.n	800753c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e000      	b.n	800753e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800753c:	2300      	movs	r3, #0
}
 800753e:	4618      	mov	r0, r3
 8007540:	3718      	adds	r7, #24
 8007542:	46bd      	mov	sp, r7
 8007544:	bd80      	pop	{r7, pc}
 8007546:	bf00      	nop
 8007548:	40023800 	.word	0x40023800

0800754c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007556:	2300      	movs	r3, #0
 8007558:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d101      	bne.n	8007564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007560:	2301      	movs	r3, #1
 8007562:	e0d0      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007564:	4b6a      	ldr	r3, [pc, #424]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 030f 	and.w	r3, r3, #15
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	429a      	cmp	r2, r3
 8007570:	d910      	bls.n	8007594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007572:	4b67      	ldr	r3, [pc, #412]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f023 020f 	bic.w	r2, r3, #15
 800757a:	4965      	ldr	r1, [pc, #404]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	4313      	orrs	r3, r2
 8007580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007582:	4b63      	ldr	r3, [pc, #396]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 030f 	and.w	r3, r3, #15
 800758a:	683a      	ldr	r2, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d001      	beq.n	8007594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007590:	2301      	movs	r3, #1
 8007592:	e0b8      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f003 0302 	and.w	r3, r3, #2
 800759c:	2b00      	cmp	r3, #0
 800759e:	d020      	beq.n	80075e2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	f003 0304 	and.w	r3, r3, #4
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ac:	4b59      	ldr	r3, [pc, #356]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	4a58      	ldr	r2, [pc, #352]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075b6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0308 	and.w	r3, r3, #8
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80075c4:	4b53      	ldr	r3, [pc, #332]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075c6:	689b      	ldr	r3, [r3, #8]
 80075c8:	4a52      	ldr	r2, [pc, #328]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80075ce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80075d0:	4b50      	ldr	r3, [pc, #320]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	689b      	ldr	r3, [r3, #8]
 80075dc:	494d      	ldr	r1, [pc, #308]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075de:	4313      	orrs	r3, r2
 80075e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	f003 0301 	and.w	r3, r3, #1
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d040      	beq.n	8007670 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d107      	bne.n	8007606 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80075f6:	4b47      	ldr	r3, [pc, #284]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d115      	bne.n	800762e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007602:	2301      	movs	r3, #1
 8007604:	e07f      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b02      	cmp	r3, #2
 800760c:	d107      	bne.n	800761e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800760e:	4b41      	ldr	r3, [pc, #260]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800761a:	2301      	movs	r3, #1
 800761c:	e073      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800761e:	4b3d      	ldr	r3, [pc, #244]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f003 0302 	and.w	r3, r3, #2
 8007626:	2b00      	cmp	r3, #0
 8007628:	d101      	bne.n	800762e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e06b      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800762e:	4b39      	ldr	r3, [pc, #228]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f023 0203 	bic.w	r2, r3, #3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	4936      	ldr	r1, [pc, #216]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 800763c:	4313      	orrs	r3, r2
 800763e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007640:	f7fd fdb4 	bl	80051ac <HAL_GetTick>
 8007644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007646:	e00a      	b.n	800765e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007648:	f7fd fdb0 	bl	80051ac <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	f241 3288 	movw	r2, #5000	; 0x1388
 8007656:	4293      	cmp	r3, r2
 8007658:	d901      	bls.n	800765e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800765a:	2303      	movs	r3, #3
 800765c:	e053      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800765e:	4b2d      	ldr	r3, [pc, #180]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	f003 020c 	and.w	r2, r3, #12
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	429a      	cmp	r2, r3
 800766e:	d1eb      	bne.n	8007648 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007670:	4b27      	ldr	r3, [pc, #156]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f003 030f 	and.w	r3, r3, #15
 8007678:	683a      	ldr	r2, [r7, #0]
 800767a:	429a      	cmp	r2, r3
 800767c:	d210      	bcs.n	80076a0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800767e:	4b24      	ldr	r3, [pc, #144]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f023 020f 	bic.w	r2, r3, #15
 8007686:	4922      	ldr	r1, [pc, #136]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	4313      	orrs	r3, r2
 800768c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800768e:	4b20      	ldr	r3, [pc, #128]	; (8007710 <HAL_RCC_ClockConfig+0x1c4>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	683a      	ldr	r2, [r7, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d001      	beq.n	80076a0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e032      	b.n	8007706 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d008      	beq.n	80076be <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ac:	4b19      	ldr	r3, [pc, #100]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	4916      	ldr	r1, [pc, #88]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0308 	and.w	r3, r3, #8
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d009      	beq.n	80076de <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80076ca:	4b12      	ldr	r3, [pc, #72]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80076cc:	689b      	ldr	r3, [r3, #8]
 80076ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	00db      	lsls	r3, r3, #3
 80076d8:	490e      	ldr	r1, [pc, #56]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80076da:	4313      	orrs	r3, r2
 80076dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80076de:	f000 f821 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 80076e2:	4602      	mov	r2, r0
 80076e4:	4b0b      	ldr	r3, [pc, #44]	; (8007714 <HAL_RCC_ClockConfig+0x1c8>)
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	091b      	lsrs	r3, r3, #4
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	490a      	ldr	r1, [pc, #40]	; (8007718 <HAL_RCC_ClockConfig+0x1cc>)
 80076f0:	5ccb      	ldrb	r3, [r1, r3]
 80076f2:	fa22 f303 	lsr.w	r3, r2, r3
 80076f6:	4a09      	ldr	r2, [pc, #36]	; (800771c <HAL_RCC_ClockConfig+0x1d0>)
 80076f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80076fa:	4b09      	ldr	r3, [pc, #36]	; (8007720 <HAL_RCC_ClockConfig+0x1d4>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	4618      	mov	r0, r3
 8007700:	f7fd fd10 	bl	8005124 <HAL_InitTick>

  return HAL_OK;
 8007704:	2300      	movs	r3, #0
}
 8007706:	4618      	mov	r0, r3
 8007708:	3710      	adds	r7, #16
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	40023c00 	.word	0x40023c00
 8007714:	40023800 	.word	0x40023800
 8007718:	0800b638 	.word	0x0800b638
 800771c:	20000008 	.word	0x20000008
 8007720:	2000000c 	.word	0x2000000c

08007724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007728:	b094      	sub	sp, #80	; 0x50
 800772a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	647b      	str	r3, [r7, #68]	; 0x44
 8007730:	2300      	movs	r3, #0
 8007732:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007734:	2300      	movs	r3, #0
 8007736:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007738:	2300      	movs	r3, #0
 800773a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800773c:	4b79      	ldr	r3, [pc, #484]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f003 030c 	and.w	r3, r3, #12
 8007744:	2b08      	cmp	r3, #8
 8007746:	d00d      	beq.n	8007764 <HAL_RCC_GetSysClockFreq+0x40>
 8007748:	2b08      	cmp	r3, #8
 800774a:	f200 80e1 	bhi.w	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
 800774e:	2b00      	cmp	r3, #0
 8007750:	d002      	beq.n	8007758 <HAL_RCC_GetSysClockFreq+0x34>
 8007752:	2b04      	cmp	r3, #4
 8007754:	d003      	beq.n	800775e <HAL_RCC_GetSysClockFreq+0x3a>
 8007756:	e0db      	b.n	8007910 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007758:	4b73      	ldr	r3, [pc, #460]	; (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 800775a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800775c:	e0db      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800775e:	4b73      	ldr	r3, [pc, #460]	; (800792c <HAL_RCC_GetSysClockFreq+0x208>)
 8007760:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007762:	e0d8      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007764:	4b6f      	ldr	r3, [pc, #444]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800776c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800776e:	4b6d      	ldr	r3, [pc, #436]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007776:	2b00      	cmp	r3, #0
 8007778:	d063      	beq.n	8007842 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800777a:	4b6a      	ldr	r3, [pc, #424]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	099b      	lsrs	r3, r3, #6
 8007780:	2200      	movs	r2, #0
 8007782:	63bb      	str	r3, [r7, #56]	; 0x38
 8007784:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800778c:	633b      	str	r3, [r7, #48]	; 0x30
 800778e:	2300      	movs	r3, #0
 8007790:	637b      	str	r3, [r7, #52]	; 0x34
 8007792:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007796:	4622      	mov	r2, r4
 8007798:	462b      	mov	r3, r5
 800779a:	f04f 0000 	mov.w	r0, #0
 800779e:	f04f 0100 	mov.w	r1, #0
 80077a2:	0159      	lsls	r1, r3, #5
 80077a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80077a8:	0150      	lsls	r0, r2, #5
 80077aa:	4602      	mov	r2, r0
 80077ac:	460b      	mov	r3, r1
 80077ae:	4621      	mov	r1, r4
 80077b0:	1a51      	subs	r1, r2, r1
 80077b2:	6139      	str	r1, [r7, #16]
 80077b4:	4629      	mov	r1, r5
 80077b6:	eb63 0301 	sbc.w	r3, r3, r1
 80077ba:	617b      	str	r3, [r7, #20]
 80077bc:	f04f 0200 	mov.w	r2, #0
 80077c0:	f04f 0300 	mov.w	r3, #0
 80077c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077c8:	4659      	mov	r1, fp
 80077ca:	018b      	lsls	r3, r1, #6
 80077cc:	4651      	mov	r1, sl
 80077ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80077d2:	4651      	mov	r1, sl
 80077d4:	018a      	lsls	r2, r1, #6
 80077d6:	4651      	mov	r1, sl
 80077d8:	ebb2 0801 	subs.w	r8, r2, r1
 80077dc:	4659      	mov	r1, fp
 80077de:	eb63 0901 	sbc.w	r9, r3, r1
 80077e2:	f04f 0200 	mov.w	r2, #0
 80077e6:	f04f 0300 	mov.w	r3, #0
 80077ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80077ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80077f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80077f6:	4690      	mov	r8, r2
 80077f8:	4699      	mov	r9, r3
 80077fa:	4623      	mov	r3, r4
 80077fc:	eb18 0303 	adds.w	r3, r8, r3
 8007800:	60bb      	str	r3, [r7, #8]
 8007802:	462b      	mov	r3, r5
 8007804:	eb49 0303 	adc.w	r3, r9, r3
 8007808:	60fb      	str	r3, [r7, #12]
 800780a:	f04f 0200 	mov.w	r2, #0
 800780e:	f04f 0300 	mov.w	r3, #0
 8007812:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007816:	4629      	mov	r1, r5
 8007818:	024b      	lsls	r3, r1, #9
 800781a:	4621      	mov	r1, r4
 800781c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007820:	4621      	mov	r1, r4
 8007822:	024a      	lsls	r2, r1, #9
 8007824:	4610      	mov	r0, r2
 8007826:	4619      	mov	r1, r3
 8007828:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800782a:	2200      	movs	r2, #0
 800782c:	62bb      	str	r3, [r7, #40]	; 0x28
 800782e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007830:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007834:	f7f9 f9da 	bl	8000bec <__aeabi_uldivmod>
 8007838:	4602      	mov	r2, r0
 800783a:	460b      	mov	r3, r1
 800783c:	4613      	mov	r3, r2
 800783e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007840:	e058      	b.n	80078f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007842:	4b38      	ldr	r3, [pc, #224]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	099b      	lsrs	r3, r3, #6
 8007848:	2200      	movs	r2, #0
 800784a:	4618      	mov	r0, r3
 800784c:	4611      	mov	r1, r2
 800784e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007852:	623b      	str	r3, [r7, #32]
 8007854:	2300      	movs	r3, #0
 8007856:	627b      	str	r3, [r7, #36]	; 0x24
 8007858:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800785c:	4642      	mov	r2, r8
 800785e:	464b      	mov	r3, r9
 8007860:	f04f 0000 	mov.w	r0, #0
 8007864:	f04f 0100 	mov.w	r1, #0
 8007868:	0159      	lsls	r1, r3, #5
 800786a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800786e:	0150      	lsls	r0, r2, #5
 8007870:	4602      	mov	r2, r0
 8007872:	460b      	mov	r3, r1
 8007874:	4641      	mov	r1, r8
 8007876:	ebb2 0a01 	subs.w	sl, r2, r1
 800787a:	4649      	mov	r1, r9
 800787c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007880:	f04f 0200 	mov.w	r2, #0
 8007884:	f04f 0300 	mov.w	r3, #0
 8007888:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800788c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007890:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007894:	ebb2 040a 	subs.w	r4, r2, sl
 8007898:	eb63 050b 	sbc.w	r5, r3, fp
 800789c:	f04f 0200 	mov.w	r2, #0
 80078a0:	f04f 0300 	mov.w	r3, #0
 80078a4:	00eb      	lsls	r3, r5, #3
 80078a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80078aa:	00e2      	lsls	r2, r4, #3
 80078ac:	4614      	mov	r4, r2
 80078ae:	461d      	mov	r5, r3
 80078b0:	4643      	mov	r3, r8
 80078b2:	18e3      	adds	r3, r4, r3
 80078b4:	603b      	str	r3, [r7, #0]
 80078b6:	464b      	mov	r3, r9
 80078b8:	eb45 0303 	adc.w	r3, r5, r3
 80078bc:	607b      	str	r3, [r7, #4]
 80078be:	f04f 0200 	mov.w	r2, #0
 80078c2:	f04f 0300 	mov.w	r3, #0
 80078c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80078ca:	4629      	mov	r1, r5
 80078cc:	028b      	lsls	r3, r1, #10
 80078ce:	4621      	mov	r1, r4
 80078d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80078d4:	4621      	mov	r1, r4
 80078d6:	028a      	lsls	r2, r1, #10
 80078d8:	4610      	mov	r0, r2
 80078da:	4619      	mov	r1, r3
 80078dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078de:	2200      	movs	r2, #0
 80078e0:	61bb      	str	r3, [r7, #24]
 80078e2:	61fa      	str	r2, [r7, #28]
 80078e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80078e8:	f7f9 f980 	bl	8000bec <__aeabi_uldivmod>
 80078ec:	4602      	mov	r2, r0
 80078ee:	460b      	mov	r3, r1
 80078f0:	4613      	mov	r3, r2
 80078f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80078f4:	4b0b      	ldr	r3, [pc, #44]	; (8007924 <HAL_RCC_GetSysClockFreq+0x200>)
 80078f6:	685b      	ldr	r3, [r3, #4]
 80078f8:	0c1b      	lsrs	r3, r3, #16
 80078fa:	f003 0303 	and.w	r3, r3, #3
 80078fe:	3301      	adds	r3, #1
 8007900:	005b      	lsls	r3, r3, #1
 8007902:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007904:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007906:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007908:	fbb2 f3f3 	udiv	r3, r2, r3
 800790c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800790e:	e002      	b.n	8007916 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007910:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetSysClockFreq+0x204>)
 8007912:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007914:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007918:	4618      	mov	r0, r3
 800791a:	3750      	adds	r7, #80	; 0x50
 800791c:	46bd      	mov	sp, r7
 800791e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800
 8007928:	00f42400 	.word	0x00f42400
 800792c:	007a1200 	.word	0x007a1200

08007930 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007930:	b480      	push	{r7}
 8007932:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007934:	4b03      	ldr	r3, [pc, #12]	; (8007944 <HAL_RCC_GetHCLKFreq+0x14>)
 8007936:	681b      	ldr	r3, [r3, #0]
}
 8007938:	4618      	mov	r0, r3
 800793a:	46bd      	mov	sp, r7
 800793c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007940:	4770      	bx	lr
 8007942:	bf00      	nop
 8007944:	20000008 	.word	0x20000008

08007948 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800794c:	f7ff fff0 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007950:	4602      	mov	r2, r0
 8007952:	4b05      	ldr	r3, [pc, #20]	; (8007968 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	0a9b      	lsrs	r3, r3, #10
 8007958:	f003 0307 	and.w	r3, r3, #7
 800795c:	4903      	ldr	r1, [pc, #12]	; (800796c <HAL_RCC_GetPCLK1Freq+0x24>)
 800795e:	5ccb      	ldrb	r3, [r1, r3]
 8007960:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007964:	4618      	mov	r0, r3
 8007966:	bd80      	pop	{r7, pc}
 8007968:	40023800 	.word	0x40023800
 800796c:	0800b648 	.word	0x0800b648

08007970 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007974:	f7ff ffdc 	bl	8007930 <HAL_RCC_GetHCLKFreq>
 8007978:	4602      	mov	r2, r0
 800797a:	4b05      	ldr	r3, [pc, #20]	; (8007990 <HAL_RCC_GetPCLK2Freq+0x20>)
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	0b5b      	lsrs	r3, r3, #13
 8007980:	f003 0307 	and.w	r3, r3, #7
 8007984:	4903      	ldr	r1, [pc, #12]	; (8007994 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007986:	5ccb      	ldrb	r3, [r1, r3]
 8007988:	fa22 f303 	lsr.w	r3, r2, r3
}
 800798c:	4618      	mov	r0, r3
 800798e:	bd80      	pop	{r7, pc}
 8007990:	40023800 	.word	0x40023800
 8007994:	0800b648 	.word	0x0800b648

08007998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b088      	sub	sp, #32
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80079a0:	2300      	movs	r3, #0
 80079a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80079a4:	2300      	movs	r3, #0
 80079a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80079a8:	2300      	movs	r3, #0
 80079aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80079ac:	2300      	movs	r3, #0
 80079ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80079b0:	2300      	movs	r3, #0
 80079b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0301 	and.w	r3, r3, #1
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d012      	beq.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80079c0:	4b69      	ldr	r3, [pc, #420]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	4a68      	ldr	r2, [pc, #416]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80079ca:	6093      	str	r3, [r2, #8]
 80079cc:	4b66      	ldr	r3, [pc, #408]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079ce:	689a      	ldr	r2, [r3, #8]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079d4:	4964      	ldr	r1, [pc, #400]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d6:	4313      	orrs	r3, r2
 80079d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d101      	bne.n	80079e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80079e2:	2301      	movs	r3, #1
 80079e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d017      	beq.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079f2:	4b5d      	ldr	r3, [pc, #372]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80079f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a00:	4959      	ldr	r1, [pc, #356]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a10:	d101      	bne.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007a12:	2301      	movs	r3, #1
 8007a14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007a1e:	2301      	movs	r3, #1
 8007a20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d017      	beq.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007a2e:	4b4e      	ldr	r3, [pc, #312]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3c:	494a      	ldr	r1, [pc, #296]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a4c:	d101      	bne.n	8007a52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d101      	bne.n	8007a5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d001      	beq.n	8007a6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0320 	and.w	r3, r3, #32
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 808b 	beq.w	8007b92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007a7c:	4b3a      	ldr	r3, [pc, #232]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a80:	4a39      	ldr	r2, [pc, #228]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a86:	6413      	str	r3, [r2, #64]	; 0x40
 8007a88:	4b37      	ldr	r3, [pc, #220]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007a94:	4b35      	ldr	r3, [pc, #212]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a34      	ldr	r2, [pc, #208]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007a9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aa0:	f7fd fb84 	bl	80051ac <HAL_GetTick>
 8007aa4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aa6:	e008      	b.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007aa8:	f7fd fb80 	bl	80051ac <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	697b      	ldr	r3, [r7, #20]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	2b64      	cmp	r3, #100	; 0x64
 8007ab4:	d901      	bls.n	8007aba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e357      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007aba:	4b2c      	ldr	r3, [pc, #176]	; (8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d0f0      	beq.n	8007aa8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007ac6:	4b28      	ldr	r3, [pc, #160]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ace:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007ad0:	693b      	ldr	r3, [r7, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d035      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ade:	693a      	ldr	r2, [r7, #16]
 8007ae0:	429a      	cmp	r2, r3
 8007ae2:	d02e      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ae4:	4b20      	ldr	r3, [pc, #128]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007aee:	4b1e      	ldr	r3, [pc, #120]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007af2:	4a1d      	ldr	r2, [pc, #116]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007af4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007afa:	4b1b      	ldr	r3, [pc, #108]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007afc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afe:	4a1a      	ldr	r2, [pc, #104]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007b06:	4a18      	ldr	r2, [pc, #96]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007b0c:	4b16      	ldr	r3, [pc, #88]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b10:	f003 0301 	and.w	r3, r3, #1
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d114      	bne.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b18:	f7fd fb48 	bl	80051ac <HAL_GetTick>
 8007b1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1e:	e00a      	b.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b20:	f7fd fb44 	bl	80051ac <HAL_GetTick>
 8007b24:	4602      	mov	r2, r0
 8007b26:	697b      	ldr	r3, [r7, #20]
 8007b28:	1ad3      	subs	r3, r2, r3
 8007b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d901      	bls.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007b32:	2303      	movs	r3, #3
 8007b34:	e319      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b36:	4b0c      	ldr	r3, [pc, #48]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b3a:	f003 0302 	and.w	r3, r3, #2
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d0ee      	beq.n	8007b20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b4e:	d111      	bne.n	8007b74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007b50:	4b05      	ldr	r3, [pc, #20]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007b5c:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007b5e:	400b      	ands	r3, r1
 8007b60:	4901      	ldr	r1, [pc, #4]	; (8007b68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007b62:	4313      	orrs	r3, r2
 8007b64:	608b      	str	r3, [r1, #8]
 8007b66:	e00b      	b.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007b68:	40023800 	.word	0x40023800
 8007b6c:	40007000 	.word	0x40007000
 8007b70:	0ffffcff 	.word	0x0ffffcff
 8007b74:	4baa      	ldr	r3, [pc, #680]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	4aa9      	ldr	r2, [pc, #676]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007b7e:	6093      	str	r3, [r2, #8]
 8007b80:	4ba7      	ldr	r3, [pc, #668]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007b8c:	49a4      	ldr	r1, [pc, #656]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d010      	beq.n	8007bc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007b9e:	4ba0      	ldr	r3, [pc, #640]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ba4:	4a9e      	ldr	r2, [pc, #632]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007baa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007bae:	4b9c      	ldr	r3, [pc, #624]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bb8:	4999      	ldr	r1, [pc, #612]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00a      	beq.n	8007be2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007bcc:	4b94      	ldr	r3, [pc, #592]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bda:	4991      	ldr	r1, [pc, #580]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d00a      	beq.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007bee:	4b8c      	ldr	r3, [pc, #560]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bfc:	4988      	ldr	r1, [pc, #544]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d00a      	beq.n	8007c26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c10:	4b83      	ldr	r3, [pc, #524]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c1e:	4980      	ldr	r1, [pc, #512]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c20:	4313      	orrs	r3, r2
 8007c22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d00a      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007c32:	4b7b      	ldr	r3, [pc, #492]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c40:	4977      	ldr	r1, [pc, #476]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c42:	4313      	orrs	r3, r2
 8007c44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d00a      	beq.n	8007c6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007c54:	4b72      	ldr	r3, [pc, #456]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c5a:	f023 0203 	bic.w	r2, r3, #3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c62:	496f      	ldr	r1, [pc, #444]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c64:	4313      	orrs	r3, r2
 8007c66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d00a      	beq.n	8007c8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007c76:	4b6a      	ldr	r3, [pc, #424]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7c:	f023 020c 	bic.w	r2, r3, #12
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c84:	4966      	ldr	r1, [pc, #408]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c86:	4313      	orrs	r3, r2
 8007c88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00a      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007c98:	4b61      	ldr	r3, [pc, #388]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ca6:	495e      	ldr	r1, [pc, #376]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d00a      	beq.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007cba:	4b59      	ldr	r3, [pc, #356]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cc8:	4955      	ldr	r1, [pc, #340]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d00a      	beq.n	8007cf2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007cdc:	4b50      	ldr	r3, [pc, #320]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ce2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cea:	494d      	ldr	r1, [pc, #308]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cec:	4313      	orrs	r3, r2
 8007cee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00a      	beq.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007cfe:	4b48      	ldr	r3, [pc, #288]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0c:	4944      	ldr	r1, [pc, #272]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00a      	beq.n	8007d36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007d20:	4b3f      	ldr	r3, [pc, #252]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	493c      	ldr	r1, [pc, #240]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d30:	4313      	orrs	r3, r2
 8007d32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00a      	beq.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007d42:	4b37      	ldr	r3, [pc, #220]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d50:	4933      	ldr	r1, [pc, #204]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d52:	4313      	orrs	r3, r2
 8007d54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00a      	beq.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d64:	4b2e      	ldr	r3, [pc, #184]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d72:	492b      	ldr	r1, [pc, #172]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d011      	beq.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d86:	4b26      	ldr	r3, [pc, #152]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d94:	4922      	ldr	r1, [pc, #136]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d96:	4313      	orrs	r3, r2
 8007d98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007da0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007da4:	d101      	bne.n	8007daa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007da6:	2301      	movs	r3, #1
 8007da8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f003 0308 	and.w	r3, r3, #8
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d001      	beq.n	8007dba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007db6:	2301      	movs	r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00a      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007dc6:	4b16      	ldr	r3, [pc, #88]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dd4:	4912      	ldr	r1, [pc, #72]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d00b      	beq.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007de8:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007df8:	4909      	ldr	r1, [pc, #36]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d006      	beq.n	8007e14 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	f000 80d9 	beq.w	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e14:	4b02      	ldr	r3, [pc, #8]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a01      	ldr	r2, [pc, #4]	; (8007e20 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e1a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e1e:	e001      	b.n	8007e24 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007e20:	40023800 	.word	0x40023800
 8007e24:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e26:	f7fd f9c1 	bl	80051ac <HAL_GetTick>
 8007e2a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007e2e:	f7fd f9bd 	bl	80051ac <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b64      	cmp	r3, #100	; 0x64
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e194      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e40:	4b6c      	ldr	r3, [pc, #432]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1f0      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d021      	beq.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d11d      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007e60:	4b64      	ldr	r3, [pc, #400]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e66:	0c1b      	lsrs	r3, r3, #16
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e6e:	4b61      	ldr	r3, [pc, #388]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e74:	0e1b      	lsrs	r3, r3, #24
 8007e76:	f003 030f 	and.w	r3, r3, #15
 8007e7a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	019a      	lsls	r2, r3, #6
 8007e82:	693b      	ldr	r3, [r7, #16]
 8007e84:	041b      	lsls	r3, r3, #16
 8007e86:	431a      	orrs	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	061b      	lsls	r3, r3, #24
 8007e8c:	431a      	orrs	r2, r3
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	689b      	ldr	r3, [r3, #8]
 8007e92:	071b      	lsls	r3, r3, #28
 8007e94:	4957      	ldr	r1, [pc, #348]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e96:	4313      	orrs	r3, r2
 8007e98:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d004      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007eb0:	d00a      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d02e      	beq.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ec2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ec6:	d129      	bne.n	8007f1c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007ec8:	4b4a      	ldr	r3, [pc, #296]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007eca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ece:	0c1b      	lsrs	r3, r3, #16
 8007ed0:	f003 0303 	and.w	r3, r3, #3
 8007ed4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ed6:	4b47      	ldr	r3, [pc, #284]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ed8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007edc:	0f1b      	lsrs	r3, r3, #28
 8007ede:	f003 0307 	and.w	r3, r3, #7
 8007ee2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	019a      	lsls	r2, r3, #6
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	041b      	lsls	r3, r3, #16
 8007eee:	431a      	orrs	r2, r3
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68db      	ldr	r3, [r3, #12]
 8007ef4:	061b      	lsls	r3, r3, #24
 8007ef6:	431a      	orrs	r2, r3
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	071b      	lsls	r3, r3, #28
 8007efc:	493d      	ldr	r1, [pc, #244]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007efe:	4313      	orrs	r3, r2
 8007f00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f04:	4b3b      	ldr	r3, [pc, #236]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f0a:	f023 021f 	bic.w	r2, r3, #31
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	3b01      	subs	r3, #1
 8007f14:	4937      	ldr	r1, [pc, #220]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01d      	beq.n	8007f64 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007f28:	4b32      	ldr	r3, [pc, #200]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f2e:	0e1b      	lsrs	r3, r3, #24
 8007f30:	f003 030f 	and.w	r3, r3, #15
 8007f34:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f36:	4b2f      	ldr	r3, [pc, #188]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f3c:	0f1b      	lsrs	r3, r3, #28
 8007f3e:	f003 0307 	and.w	r3, r3, #7
 8007f42:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	019a      	lsls	r2, r3, #6
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	041b      	lsls	r3, r3, #16
 8007f50:	431a      	orrs	r2, r3
 8007f52:	693b      	ldr	r3, [r7, #16]
 8007f54:	061b      	lsls	r3, r3, #24
 8007f56:	431a      	orrs	r2, r3
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	071b      	lsls	r3, r3, #28
 8007f5c:	4925      	ldr	r1, [pc, #148]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d011      	beq.n	8007f94 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	019a      	lsls	r2, r3, #6
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	691b      	ldr	r3, [r3, #16]
 8007f7a:	041b      	lsls	r3, r3, #16
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	061b      	lsls	r3, r3, #24
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	071b      	lsls	r3, r3, #28
 8007f8c:	4919      	ldr	r1, [pc, #100]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007f94:	4b17      	ldr	r3, [pc, #92]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	4a16      	ldr	r2, [pc, #88]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007f9a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa0:	f7fd f904 	bl	80051ac <HAL_GetTick>
 8007fa4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fa6:	e008      	b.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007fa8:	f7fd f900 	bl	80051ac <HAL_GetTick>
 8007fac:	4602      	mov	r2, r0
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	2b64      	cmp	r3, #100	; 0x64
 8007fb4:	d901      	bls.n	8007fba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	e0d7      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fba:	4b0e      	ldr	r3, [pc, #56]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d0f0      	beq.n	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007fc6:	69bb      	ldr	r3, [r7, #24]
 8007fc8:	2b01      	cmp	r3, #1
 8007fca:	f040 80cd 	bne.w	8008168 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007fce:	4b09      	ldr	r3, [pc, #36]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4a08      	ldr	r2, [pc, #32]	; (8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007fd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fda:	f7fd f8e7 	bl	80051ac <HAL_GetTick>
 8007fde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007fe0:	e00a      	b.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007fe2:	f7fd f8e3 	bl	80051ac <HAL_GetTick>
 8007fe6:	4602      	mov	r2, r0
 8007fe8:	697b      	ldr	r3, [r7, #20]
 8007fea:	1ad3      	subs	r3, r2, r3
 8007fec:	2b64      	cmp	r3, #100	; 0x64
 8007fee:	d903      	bls.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ff0:	2303      	movs	r3, #3
 8007ff2:	e0ba      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007ff4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007ff8:	4b5e      	ldr	r3, [pc, #376]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008000:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008004:	d0ed      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d003      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d009      	beq.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008022:	2b00      	cmp	r3, #0
 8008024:	d02e      	beq.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	2b00      	cmp	r3, #0
 800802c:	d12a      	bne.n	8008084 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800802e:	4b51      	ldr	r3, [pc, #324]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008034:	0c1b      	lsrs	r3, r3, #16
 8008036:	f003 0303 	and.w	r3, r3, #3
 800803a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800803c:	4b4d      	ldr	r3, [pc, #308]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	0f1b      	lsrs	r3, r3, #28
 8008044:	f003 0307 	and.w	r3, r3, #7
 8008048:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	695b      	ldr	r3, [r3, #20]
 800804e:	019a      	lsls	r2, r3, #6
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	041b      	lsls	r3, r3, #16
 8008054:	431a      	orrs	r2, r3
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	699b      	ldr	r3, [r3, #24]
 800805a:	061b      	lsls	r3, r3, #24
 800805c:	431a      	orrs	r2, r3
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	071b      	lsls	r3, r3, #28
 8008062:	4944      	ldr	r1, [pc, #272]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008064:	4313      	orrs	r3, r2
 8008066:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800806a:	4b42      	ldr	r3, [pc, #264]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800806c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008070:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008078:	3b01      	subs	r3, #1
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	493d      	ldr	r1, [pc, #244]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800807e:	4313      	orrs	r3, r2
 8008080:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800808c:	2b00      	cmp	r3, #0
 800808e:	d022      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008094:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008098:	d11d      	bne.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800809a:	4b36      	ldr	r3, [pc, #216]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	0e1b      	lsrs	r3, r3, #24
 80080a2:	f003 030f 	and.w	r3, r3, #15
 80080a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80080a8:	4b32      	ldr	r3, [pc, #200]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ae:	0f1b      	lsrs	r3, r3, #28
 80080b0:	f003 0307 	and.w	r3, r3, #7
 80080b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	695b      	ldr	r3, [r3, #20]
 80080ba:	019a      	lsls	r2, r3, #6
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6a1b      	ldr	r3, [r3, #32]
 80080c0:	041b      	lsls	r3, r3, #16
 80080c2:	431a      	orrs	r2, r3
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	061b      	lsls	r3, r3, #24
 80080c8:	431a      	orrs	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	071b      	lsls	r3, r3, #28
 80080ce:	4929      	ldr	r1, [pc, #164]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080d0:	4313      	orrs	r3, r2
 80080d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0308 	and.w	r3, r3, #8
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d028      	beq.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080e2:	4b24      	ldr	r3, [pc, #144]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080e8:	0e1b      	lsrs	r3, r3, #24
 80080ea:	f003 030f 	and.w	r3, r3, #15
 80080ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80080f0:	4b20      	ldr	r3, [pc, #128]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	0c1b      	lsrs	r3, r3, #16
 80080f8:	f003 0303 	and.w	r3, r3, #3
 80080fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	019a      	lsls	r2, r3, #6
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	041b      	lsls	r3, r3, #16
 8008108:	431a      	orrs	r2, r3
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	061b      	lsls	r3, r3, #24
 800810e:	431a      	orrs	r2, r3
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	69db      	ldr	r3, [r3, #28]
 8008114:	071b      	lsls	r3, r3, #28
 8008116:	4917      	ldr	r1, [pc, #92]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008118:	4313      	orrs	r3, r2
 800811a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800811e:	4b15      	ldr	r3, [pc, #84]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008124:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800812c:	4911      	ldr	r1, [pc, #68]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800812e:	4313      	orrs	r3, r2
 8008130:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008134:	4b0f      	ldr	r3, [pc, #60]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a0e      	ldr	r2, [pc, #56]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800813a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800813e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008140:	f7fd f834 	bl	80051ac <HAL_GetTick>
 8008144:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008146:	e008      	b.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008148:	f7fd f830 	bl	80051ac <HAL_GetTick>
 800814c:	4602      	mov	r2, r0
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	1ad3      	subs	r3, r2, r3
 8008152:	2b64      	cmp	r3, #100	; 0x64
 8008154:	d901      	bls.n	800815a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e007      	b.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800815a:	4b06      	ldr	r3, [pc, #24]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008166:	d1ef      	bne.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008168:	2300      	movs	r3, #0
}
 800816a:	4618      	mov	r0, r3
 800816c:	3720      	adds	r7, #32
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}
 8008172:	bf00      	nop
 8008174:	40023800 	.word	0x40023800

08008178 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b082      	sub	sp, #8
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d101      	bne.n	800818a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e049      	b.n	800821e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008190:	b2db      	uxtb	r3, r3
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2200      	movs	r2, #0
 800819a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f7fc fb4e 	bl	8004840 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2202      	movs	r2, #2
 80081a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3304      	adds	r3, #4
 80081b4:	4619      	mov	r1, r3
 80081b6:	4610      	mov	r0, r2
 80081b8:	f000 fdac 	bl	8008d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2201      	movs	r2, #1
 8008210:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800821c:	2300      	movs	r3, #0
}
 800821e:	4618      	mov	r0, r3
 8008220:	3708      	adds	r7, #8
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
	...

08008228 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b01      	cmp	r3, #1
 800823a:	d001      	beq.n	8008240 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e054      	b.n	80082ea <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2202      	movs	r2, #2
 8008244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	68da      	ldr	r2, [r3, #12]
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f042 0201 	orr.w	r2, r2, #1
 8008256:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	4a26      	ldr	r2, [pc, #152]	; (80082f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800825e:	4293      	cmp	r3, r2
 8008260:	d022      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800826a:	d01d      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a22      	ldr	r2, [pc, #136]	; (80082fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d018      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	4a21      	ldr	r2, [pc, #132]	; (8008300 <HAL_TIM_Base_Start_IT+0xd8>)
 800827c:	4293      	cmp	r3, r2
 800827e:	d013      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	4a1f      	ldr	r2, [pc, #124]	; (8008304 <HAL_TIM_Base_Start_IT+0xdc>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d00e      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a1e      	ldr	r2, [pc, #120]	; (8008308 <HAL_TIM_Base_Start_IT+0xe0>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d009      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	4a1c      	ldr	r2, [pc, #112]	; (800830c <HAL_TIM_Base_Start_IT+0xe4>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d004      	beq.n	80082a8 <HAL_TIM_Base_Start_IT+0x80>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	4a1b      	ldr	r2, [pc, #108]	; (8008310 <HAL_TIM_Base_Start_IT+0xe8>)
 80082a4:	4293      	cmp	r3, r2
 80082a6:	d115      	bne.n	80082d4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689a      	ldr	r2, [r3, #8]
 80082ae:	4b19      	ldr	r3, [pc, #100]	; (8008314 <HAL_TIM_Base_Start_IT+0xec>)
 80082b0:	4013      	ands	r3, r2
 80082b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	2b06      	cmp	r3, #6
 80082b8:	d015      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082c0:	d011      	beq.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681a      	ldr	r2, [r3, #0]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f042 0201 	orr.w	r2, r2, #1
 80082d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082d2:	e008      	b.n	80082e6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f042 0201 	orr.w	r2, r2, #1
 80082e2:	601a      	str	r2, [r3, #0]
 80082e4:	e000      	b.n	80082e8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082e6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80082e8:	2300      	movs	r3, #0
}
 80082ea:	4618      	mov	r0, r3
 80082ec:	3714      	adds	r7, #20
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr
 80082f6:	bf00      	nop
 80082f8:	40010000 	.word	0x40010000
 80082fc:	40000400 	.word	0x40000400
 8008300:	40000800 	.word	0x40000800
 8008304:	40000c00 	.word	0x40000c00
 8008308:	40010400 	.word	0x40010400
 800830c:	40014000 	.word	0x40014000
 8008310:	40001800 	.word	0x40001800
 8008314:	00010007 	.word	0x00010007

08008318 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008318:	b480      	push	{r7}
 800831a:	b083      	sub	sp, #12
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68da      	ldr	r2, [r3, #12]
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	f022 0201 	bic.w	r2, r2, #1
 800832e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	6a1a      	ldr	r2, [r3, #32]
 8008336:	f241 1311 	movw	r3, #4369	; 0x1111
 800833a:	4013      	ands	r3, r2
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10f      	bne.n	8008360 <HAL_TIM_Base_Stop_IT+0x48>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6a1a      	ldr	r2, [r3, #32]
 8008346:	f240 4344 	movw	r3, #1092	; 0x444
 800834a:	4013      	ands	r3, r2
 800834c:	2b00      	cmp	r3, #0
 800834e:	d107      	bne.n	8008360 <HAL_TIM_Base_Stop_IT+0x48>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008368:	2300      	movs	r3, #0
}
 800836a:	4618      	mov	r0, r3
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr

08008376 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008376:	b580      	push	{r7, lr}
 8008378:	b082      	sub	sp, #8
 800837a:	af00      	add	r7, sp, #0
 800837c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d101      	bne.n	8008388 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e049      	b.n	800841c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b00      	cmp	r3, #0
 8008392:	d106      	bne.n	80083a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f000 f841 	bl	8008424 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2202      	movs	r2, #2
 80083a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	3304      	adds	r3, #4
 80083b2:	4619      	mov	r1, r3
 80083b4:	4610      	mov	r0, r2
 80083b6:	f000 fcad 	bl	8008d14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2201      	movs	r2, #1
 80083be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2201      	movs	r2, #1
 80083c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2201      	movs	r2, #1
 80083ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2201      	movs	r2, #1
 80083d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2201      	movs	r2, #1
 80083ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2201      	movs	r2, #1
 80083f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	2201      	movs	r2, #1
 80083fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	2201      	movs	r2, #1
 8008406:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2201      	movs	r2, #1
 800840e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800842c:	bf00      	nop
 800842e:	370c      	adds	r7, #12
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr

08008438 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
 8008440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008442:	2300      	movs	r3, #0
 8008444:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d109      	bne.n	8008460 <HAL_TIM_PWM_Start_IT+0x28>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	bf14      	ite	ne
 8008458:	2301      	movne	r3, #1
 800845a:	2300      	moveq	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	e03c      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xa2>
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	2b04      	cmp	r3, #4
 8008464:	d109      	bne.n	800847a <HAL_TIM_PWM_Start_IT+0x42>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800846c:	b2db      	uxtb	r3, r3
 800846e:	2b01      	cmp	r3, #1
 8008470:	bf14      	ite	ne
 8008472:	2301      	movne	r3, #1
 8008474:	2300      	moveq	r3, #0
 8008476:	b2db      	uxtb	r3, r3
 8008478:	e02f      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xa2>
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b08      	cmp	r3, #8
 800847e:	d109      	bne.n	8008494 <HAL_TIM_PWM_Start_IT+0x5c>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b01      	cmp	r3, #1
 800848a:	bf14      	ite	ne
 800848c:	2301      	movne	r3, #1
 800848e:	2300      	moveq	r3, #0
 8008490:	b2db      	uxtb	r3, r3
 8008492:	e022      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xa2>
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	2b0c      	cmp	r3, #12
 8008498:	d109      	bne.n	80084ae <HAL_TIM_PWM_Start_IT+0x76>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	bf14      	ite	ne
 80084a6:	2301      	movne	r3, #1
 80084a8:	2300      	moveq	r3, #0
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	e015      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xa2>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b10      	cmp	r3, #16
 80084b2:	d109      	bne.n	80084c8 <HAL_TIM_PWM_Start_IT+0x90>
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80084ba:	b2db      	uxtb	r3, r3
 80084bc:	2b01      	cmp	r3, #1
 80084be:	bf14      	ite	ne
 80084c0:	2301      	movne	r3, #1
 80084c2:	2300      	moveq	r3, #0
 80084c4:	b2db      	uxtb	r3, r3
 80084c6:	e008      	b.n	80084da <HAL_TIM_PWM_Start_IT+0xa2>
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	bf14      	ite	ne
 80084d4:	2301      	movne	r3, #1
 80084d6:	2300      	moveq	r3, #0
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e0dd      	b.n	800869e <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d104      	bne.n	80084f2 <HAL_TIM_PWM_Start_IT+0xba>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2202      	movs	r2, #2
 80084ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f0:	e023      	b.n	800853a <HAL_TIM_PWM_Start_IT+0x102>
 80084f2:	683b      	ldr	r3, [r7, #0]
 80084f4:	2b04      	cmp	r3, #4
 80084f6:	d104      	bne.n	8008502 <HAL_TIM_PWM_Start_IT+0xca>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2202      	movs	r2, #2
 80084fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008500:	e01b      	b.n	800853a <HAL_TIM_PWM_Start_IT+0x102>
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	2b08      	cmp	r3, #8
 8008506:	d104      	bne.n	8008512 <HAL_TIM_PWM_Start_IT+0xda>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2202      	movs	r2, #2
 800850c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008510:	e013      	b.n	800853a <HAL_TIM_PWM_Start_IT+0x102>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	2b0c      	cmp	r3, #12
 8008516:	d104      	bne.n	8008522 <HAL_TIM_PWM_Start_IT+0xea>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2202      	movs	r2, #2
 800851c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008520:	e00b      	b.n	800853a <HAL_TIM_PWM_Start_IT+0x102>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	2b10      	cmp	r3, #16
 8008526:	d104      	bne.n	8008532 <HAL_TIM_PWM_Start_IT+0xfa>
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2202      	movs	r2, #2
 800852c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008530:	e003      	b.n	800853a <HAL_TIM_PWM_Start_IT+0x102>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2202      	movs	r2, #2
 8008536:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	2b0c      	cmp	r3, #12
 800853e:	d841      	bhi.n	80085c4 <HAL_TIM_PWM_Start_IT+0x18c>
 8008540:	a201      	add	r2, pc, #4	; (adr r2, 8008548 <HAL_TIM_PWM_Start_IT+0x110>)
 8008542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008546:	bf00      	nop
 8008548:	0800857d 	.word	0x0800857d
 800854c:	080085c5 	.word	0x080085c5
 8008550:	080085c5 	.word	0x080085c5
 8008554:	080085c5 	.word	0x080085c5
 8008558:	0800858f 	.word	0x0800858f
 800855c:	080085c5 	.word	0x080085c5
 8008560:	080085c5 	.word	0x080085c5
 8008564:	080085c5 	.word	0x080085c5
 8008568:	080085a1 	.word	0x080085a1
 800856c:	080085c5 	.word	0x080085c5
 8008570:	080085c5 	.word	0x080085c5
 8008574:	080085c5 	.word	0x080085c5
 8008578:	080085b3 	.word	0x080085b3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	68da      	ldr	r2, [r3, #12]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0202 	orr.w	r2, r2, #2
 800858a:	60da      	str	r2, [r3, #12]
      break;
 800858c:	e01d      	b.n	80085ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f042 0204 	orr.w	r2, r2, #4
 800859c:	60da      	str	r2, [r3, #12]
      break;
 800859e:	e014      	b.n	80085ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	68da      	ldr	r2, [r3, #12]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	f042 0208 	orr.w	r2, r2, #8
 80085ae:	60da      	str	r2, [r3, #12]
      break;
 80085b0:	e00b      	b.n	80085ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68da      	ldr	r2, [r3, #12]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	f042 0210 	orr.w	r2, r2, #16
 80085c0:	60da      	str	r2, [r3, #12]
      break;
 80085c2:	e002      	b.n	80085ca <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
      break;
 80085c8:	bf00      	nop
  }

  if (status == HAL_OK)
 80085ca:	7bfb      	ldrb	r3, [r7, #15]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d165      	bne.n	800869c <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2201      	movs	r2, #1
 80085d6:	6839      	ldr	r1, [r7, #0]
 80085d8:	4618      	mov	r0, r3
 80085da:	f000 ff33 	bl	8009444 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4a31      	ldr	r2, [pc, #196]	; (80086a8 <HAL_TIM_PWM_Start_IT+0x270>)
 80085e4:	4293      	cmp	r3, r2
 80085e6:	d004      	beq.n	80085f2 <HAL_TIM_PWM_Start_IT+0x1ba>
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a2f      	ldr	r2, [pc, #188]	; (80086ac <HAL_TIM_PWM_Start_IT+0x274>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d101      	bne.n	80085f6 <HAL_TIM_PWM_Start_IT+0x1be>
 80085f2:	2301      	movs	r3, #1
 80085f4:	e000      	b.n	80085f8 <HAL_TIM_PWM_Start_IT+0x1c0>
 80085f6:	2300      	movs	r3, #0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d007      	beq.n	800860c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800860a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	4a25      	ldr	r2, [pc, #148]	; (80086a8 <HAL_TIM_PWM_Start_IT+0x270>)
 8008612:	4293      	cmp	r3, r2
 8008614:	d022      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800861e:	d01d      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a22      	ldr	r2, [pc, #136]	; (80086b0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d018      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d013      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	4a1f      	ldr	r2, [pc, #124]	; (80086b8 <HAL_TIM_PWM_Start_IT+0x280>)
 800863a:	4293      	cmp	r3, r2
 800863c:	d00e      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1a      	ldr	r2, [pc, #104]	; (80086ac <HAL_TIM_PWM_Start_IT+0x274>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d009      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1b      	ldr	r2, [pc, #108]	; (80086bc <HAL_TIM_PWM_Start_IT+0x284>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d004      	beq.n	800865c <HAL_TIM_PWM_Start_IT+0x224>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1a      	ldr	r2, [pc, #104]	; (80086c0 <HAL_TIM_PWM_Start_IT+0x288>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d115      	bne.n	8008688 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	689a      	ldr	r2, [r3, #8]
 8008662:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008664:	4013      	ands	r3, r2
 8008666:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2b06      	cmp	r3, #6
 800866c:	d015      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x262>
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008674:	d011      	beq.n	800869a <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0201 	orr.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008686:	e008      	b.n	800869a <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	e000      	b.n	800869c <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800869a:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800869c:	7bfb      	ldrb	r3, [r7, #15]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3710      	adds	r7, #16
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	40010000 	.word	0x40010000
 80086ac:	40010400 	.word	0x40010400
 80086b0:	40000400 	.word	0x40000400
 80086b4:	40000800 	.word	0x40000800
 80086b8:	40000c00 	.word	0x40000c00
 80086bc:	40014000 	.word	0x40014000
 80086c0:	40001800 	.word	0x40001800
 80086c4:	00010007 	.word	0x00010007

080086c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b082      	sub	sp, #8
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	691b      	ldr	r3, [r3, #16]
 80086d6:	f003 0302 	and.w	r3, r3, #2
 80086da:	2b02      	cmp	r3, #2
 80086dc:	d122      	bne.n	8008724 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	68db      	ldr	r3, [r3, #12]
 80086e4:	f003 0302 	and.w	r3, r3, #2
 80086e8:	2b02      	cmp	r3, #2
 80086ea:	d11b      	bne.n	8008724 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	f06f 0202 	mvn.w	r2, #2
 80086f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	2201      	movs	r2, #1
 80086fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	699b      	ldr	r3, [r3, #24]
 8008702:	f003 0303 	and.w	r3, r3, #3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d003      	beq.n	8008712 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 fae4 	bl	8008cd8 <HAL_TIM_IC_CaptureCallback>
 8008710:	e005      	b.n	800871e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fad6 	bl	8008cc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fae7 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	691b      	ldr	r3, [r3, #16]
 800872a:	f003 0304 	and.w	r3, r3, #4
 800872e:	2b04      	cmp	r3, #4
 8008730:	d122      	bne.n	8008778 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	f003 0304 	and.w	r3, r3, #4
 800873c:	2b04      	cmp	r3, #4
 800873e:	d11b      	bne.n	8008778 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f06f 0204 	mvn.w	r2, #4
 8008748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2202      	movs	r2, #2
 800874e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800875a:	2b00      	cmp	r3, #0
 800875c:	d003      	beq.n	8008766 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 faba 	bl	8008cd8 <HAL_TIM_IC_CaptureCallback>
 8008764:	e005      	b.n	8008772 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f000 faac 	bl	8008cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800876c:	6878      	ldr	r0, [r7, #4]
 800876e:	f000 fabd 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	691b      	ldr	r3, [r3, #16]
 800877e:	f003 0308 	and.w	r3, r3, #8
 8008782:	2b08      	cmp	r3, #8
 8008784:	d122      	bne.n	80087cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	68db      	ldr	r3, [r3, #12]
 800878c:	f003 0308 	and.w	r3, r3, #8
 8008790:	2b08      	cmp	r3, #8
 8008792:	d11b      	bne.n	80087cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	f06f 0208 	mvn.w	r2, #8
 800879c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2204      	movs	r2, #4
 80087a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	69db      	ldr	r3, [r3, #28]
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d003      	beq.n	80087ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 fa90 	bl	8008cd8 <HAL_TIM_IC_CaptureCallback>
 80087b8:	e005      	b.n	80087c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 fa82 	bl	8008cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 fa93 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2200      	movs	r2, #0
 80087ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	691b      	ldr	r3, [r3, #16]
 80087d2:	f003 0310 	and.w	r3, r3, #16
 80087d6:	2b10      	cmp	r3, #16
 80087d8:	d122      	bne.n	8008820 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68db      	ldr	r3, [r3, #12]
 80087e0:	f003 0310 	and.w	r3, r3, #16
 80087e4:	2b10      	cmp	r3, #16
 80087e6:	d11b      	bne.n	8008820 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	f06f 0210 	mvn.w	r2, #16
 80087f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2208      	movs	r2, #8
 80087f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	69db      	ldr	r3, [r3, #28]
 80087fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008802:	2b00      	cmp	r3, #0
 8008804:	d003      	beq.n	800880e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f000 fa66 	bl	8008cd8 <HAL_TIM_IC_CaptureCallback>
 800880c:	e005      	b.n	800881a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa58 	bl	8008cc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f000 fa69 	bl	8008cec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2200      	movs	r2, #0
 800881e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b01      	cmp	r3, #1
 800882c:	d10e      	bne.n	800884c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b01      	cmp	r3, #1
 800883a:	d107      	bne.n	800884c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f06f 0201 	mvn.w	r2, #1
 8008844:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f7f9 f90c 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008856:	2b80      	cmp	r3, #128	; 0x80
 8008858:	d10e      	bne.n	8008878 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	68db      	ldr	r3, [r3, #12]
 8008860:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d107      	bne.n	8008878 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008870:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 fea4 	bl	80095c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008882:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008886:	d10e      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	68db      	ldr	r3, [r3, #12]
 800888e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008892:	2b80      	cmp	r3, #128	; 0x80
 8008894:	d107      	bne.n	80088a6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800889e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	f000 fe97 	bl	80095d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	691b      	ldr	r3, [r3, #16]
 80088ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088b0:	2b40      	cmp	r3, #64	; 0x40
 80088b2:	d10e      	bne.n	80088d2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68db      	ldr	r3, [r3, #12]
 80088ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088be:	2b40      	cmp	r3, #64	; 0x40
 80088c0:	d107      	bne.n	80088d2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088cc:	6878      	ldr	r0, [r7, #4]
 80088ce:	f000 fa17 	bl	8008d00 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	f003 0320 	and.w	r3, r3, #32
 80088dc:	2b20      	cmp	r3, #32
 80088de:	d10e      	bne.n	80088fe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	f003 0320 	and.w	r3, r3, #32
 80088ea:	2b20      	cmp	r3, #32
 80088ec:	d107      	bne.n	80088fe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f06f 0220 	mvn.w	r2, #32
 80088f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f000 fe57 	bl	80095ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088fe:	bf00      	nop
 8008900:	3708      	adds	r7, #8
 8008902:	46bd      	mov	sp, r7
 8008904:	bd80      	pop	{r7, pc}
	...

08008908 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af00      	add	r7, sp, #0
 800890e:	60f8      	str	r0, [r7, #12]
 8008910:	60b9      	str	r1, [r7, #8]
 8008912:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008914:	2300      	movs	r3, #0
 8008916:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800891e:	2b01      	cmp	r3, #1
 8008920:	d101      	bne.n	8008926 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008922:	2302      	movs	r3, #2
 8008924:	e0ff      	b.n	8008b26 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2201      	movs	r2, #1
 800892a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b14      	cmp	r3, #20
 8008932:	f200 80f0 	bhi.w	8008b16 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008936:	a201      	add	r2, pc, #4	; (adr r2, 800893c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800893c:	08008991 	.word	0x08008991
 8008940:	08008b17 	.word	0x08008b17
 8008944:	08008b17 	.word	0x08008b17
 8008948:	08008b17 	.word	0x08008b17
 800894c:	080089d1 	.word	0x080089d1
 8008950:	08008b17 	.word	0x08008b17
 8008954:	08008b17 	.word	0x08008b17
 8008958:	08008b17 	.word	0x08008b17
 800895c:	08008a13 	.word	0x08008a13
 8008960:	08008b17 	.word	0x08008b17
 8008964:	08008b17 	.word	0x08008b17
 8008968:	08008b17 	.word	0x08008b17
 800896c:	08008a53 	.word	0x08008a53
 8008970:	08008b17 	.word	0x08008b17
 8008974:	08008b17 	.word	0x08008b17
 8008978:	08008b17 	.word	0x08008b17
 800897c:	08008a95 	.word	0x08008a95
 8008980:	08008b17 	.word	0x08008b17
 8008984:	08008b17 	.word	0x08008b17
 8008988:	08008b17 	.word	0x08008b17
 800898c:	08008ad5 	.word	0x08008ad5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	68b9      	ldr	r1, [r7, #8]
 8008996:	4618      	mov	r0, r3
 8008998:	f000 fa5c 	bl	8008e54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	699a      	ldr	r2, [r3, #24]
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f042 0208 	orr.w	r2, r2, #8
 80089aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	699a      	ldr	r2, [r3, #24]
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f022 0204 	bic.w	r2, r2, #4
 80089ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6999      	ldr	r1, [r3, #24]
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	691a      	ldr	r2, [r3, #16]
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	619a      	str	r2, [r3, #24]
      break;
 80089ce:	e0a5      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	68b9      	ldr	r1, [r7, #8]
 80089d6:	4618      	mov	r0, r3
 80089d8:	f000 faae 	bl	8008f38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	699a      	ldr	r2, [r3, #24]
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	699a      	ldr	r2, [r3, #24]
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6999      	ldr	r1, [r3, #24]
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	021a      	lsls	r2, r3, #8
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	430a      	orrs	r2, r1
 8008a0e:	619a      	str	r2, [r3, #24]
      break;
 8008a10:	e084      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	68b9      	ldr	r1, [r7, #8]
 8008a18:	4618      	mov	r0, r3
 8008a1a:	f000 fb05 	bl	8009028 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	69da      	ldr	r2, [r3, #28]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	f042 0208 	orr.w	r2, r2, #8
 8008a2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	69da      	ldr	r2, [r3, #28]
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f022 0204 	bic.w	r2, r2, #4
 8008a3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69d9      	ldr	r1, [r3, #28]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	691a      	ldr	r2, [r3, #16]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	430a      	orrs	r2, r1
 8008a4e:	61da      	str	r2, [r3, #28]
      break;
 8008a50:	e064      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	68b9      	ldr	r1, [r7, #8]
 8008a58:	4618      	mov	r0, r3
 8008a5a:	f000 fb5b 	bl	8009114 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	69da      	ldr	r2, [r3, #28]
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	69da      	ldr	r2, [r3, #28]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69d9      	ldr	r1, [r3, #28]
 8008a84:	68bb      	ldr	r3, [r7, #8]
 8008a86:	691b      	ldr	r3, [r3, #16]
 8008a88:	021a      	lsls	r2, r3, #8
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	430a      	orrs	r2, r1
 8008a90:	61da      	str	r2, [r3, #28]
      break;
 8008a92:	e043      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	68b9      	ldr	r1, [r7, #8]
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f000 fb92 	bl	80091c4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f042 0208 	orr.w	r2, r2, #8
 8008aae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	f022 0204 	bic.w	r2, r2, #4
 8008abe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008ac6:	68bb      	ldr	r3, [r7, #8]
 8008ac8:	691a      	ldr	r2, [r3, #16]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	430a      	orrs	r2, r1
 8008ad0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008ad2:	e023      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68b9      	ldr	r1, [r7, #8]
 8008ada:	4618      	mov	r0, r3
 8008adc:	f000 fbc4 	bl	8009268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008aee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008afe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	021a      	lsls	r2, r3, #8
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	430a      	orrs	r2, r1
 8008b12:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008b14:	e002      	b.n	8008b1c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	75fb      	strb	r3, [r7, #23]
      break;
 8008b1a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008b24:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	3718      	adds	r7, #24
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	bd80      	pop	{r7, pc}
 8008b2e:	bf00      	nop

08008b30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b44:	2b01      	cmp	r3, #1
 8008b46:	d101      	bne.n	8008b4c <HAL_TIM_ConfigClockSource+0x1c>
 8008b48:	2302      	movs	r3, #2
 8008b4a:	e0b4      	b.n	8008cb6 <HAL_TIM_ConfigClockSource+0x186>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2202      	movs	r2, #2
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008b64:	68ba      	ldr	r2, [r7, #8]
 8008b66:	4b56      	ldr	r3, [pc, #344]	; (8008cc0 <HAL_TIM_ConfigClockSource+0x190>)
 8008b68:	4013      	ands	r3, r2
 8008b6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	68ba      	ldr	r2, [r7, #8]
 8008b7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b84:	d03e      	beq.n	8008c04 <HAL_TIM_ConfigClockSource+0xd4>
 8008b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b8a:	f200 8087 	bhi.w	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b92:	f000 8086 	beq.w	8008ca2 <HAL_TIM_ConfigClockSource+0x172>
 8008b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b9a:	d87f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008b9c:	2b70      	cmp	r3, #112	; 0x70
 8008b9e:	d01a      	beq.n	8008bd6 <HAL_TIM_ConfigClockSource+0xa6>
 8008ba0:	2b70      	cmp	r3, #112	; 0x70
 8008ba2:	d87b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008ba4:	2b60      	cmp	r3, #96	; 0x60
 8008ba6:	d050      	beq.n	8008c4a <HAL_TIM_ConfigClockSource+0x11a>
 8008ba8:	2b60      	cmp	r3, #96	; 0x60
 8008baa:	d877      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bac:	2b50      	cmp	r3, #80	; 0x50
 8008bae:	d03c      	beq.n	8008c2a <HAL_TIM_ConfigClockSource+0xfa>
 8008bb0:	2b50      	cmp	r3, #80	; 0x50
 8008bb2:	d873      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bb4:	2b40      	cmp	r3, #64	; 0x40
 8008bb6:	d058      	beq.n	8008c6a <HAL_TIM_ConfigClockSource+0x13a>
 8008bb8:	2b40      	cmp	r3, #64	; 0x40
 8008bba:	d86f      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bbc:	2b30      	cmp	r3, #48	; 0x30
 8008bbe:	d064      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bc0:	2b30      	cmp	r3, #48	; 0x30
 8008bc2:	d86b      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bc4:	2b20      	cmp	r3, #32
 8008bc6:	d060      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bc8:	2b20      	cmp	r3, #32
 8008bca:	d867      	bhi.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d05c      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bd0:	2b10      	cmp	r3, #16
 8008bd2:	d05a      	beq.n	8008c8a <HAL_TIM_ConfigClockSource+0x15a>
 8008bd4:	e062      	b.n	8008c9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6818      	ldr	r0, [r3, #0]
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6899      	ldr	r1, [r3, #8]
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	685a      	ldr	r2, [r3, #4]
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	f000 fc0d 	bl	8009404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008bf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	68ba      	ldr	r2, [r7, #8]
 8008c00:	609a      	str	r2, [r3, #8]
      break;
 8008c02:	e04f      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6818      	ldr	r0, [r3, #0]
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	6899      	ldr	r1, [r3, #8]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	68db      	ldr	r3, [r3, #12]
 8008c14:	f000 fbf6 	bl	8009404 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	689a      	ldr	r2, [r3, #8]
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c26:	609a      	str	r2, [r3, #8]
      break;
 8008c28:	e03c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6818      	ldr	r0, [r3, #0]
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	6859      	ldr	r1, [r3, #4]
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	68db      	ldr	r3, [r3, #12]
 8008c36:	461a      	mov	r2, r3
 8008c38:	f000 fb6a 	bl	8009310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	2150      	movs	r1, #80	; 0x50
 8008c42:	4618      	mov	r0, r3
 8008c44:	f000 fbc3 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008c48:	e02c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6818      	ldr	r0, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	6859      	ldr	r1, [r3, #4]
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	68db      	ldr	r3, [r3, #12]
 8008c56:	461a      	mov	r2, r3
 8008c58:	f000 fb89 	bl	800936e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	2160      	movs	r1, #96	; 0x60
 8008c62:	4618      	mov	r0, r3
 8008c64:	f000 fbb3 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008c68:	e01c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6818      	ldr	r0, [r3, #0]
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	6859      	ldr	r1, [r3, #4]
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	68db      	ldr	r3, [r3, #12]
 8008c76:	461a      	mov	r2, r3
 8008c78:	f000 fb4a 	bl	8009310 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2140      	movs	r1, #64	; 0x40
 8008c82:	4618      	mov	r0, r3
 8008c84:	f000 fba3 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008c88:	e00c      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681a      	ldr	r2, [r3, #0]
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4619      	mov	r1, r3
 8008c94:	4610      	mov	r0, r2
 8008c96:	f000 fb9a 	bl	80093ce <TIM_ITRx_SetConfig>
      break;
 8008c9a:	e003      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8008ca0:	e000      	b.n	8008ca4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008ca2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3710      	adds	r7, #16
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	bd80      	pop	{r7, pc}
 8008cbe:	bf00      	nop
 8008cc0:	fffeff88 	.word	0xfffeff88

08008cc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008cf4:	bf00      	nop
 8008cf6:	370c      	adds	r7, #12
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b083      	sub	sp, #12
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008d08:	bf00      	nop
 8008d0a:	370c      	adds	r7, #12
 8008d0c:	46bd      	mov	sp, r7
 8008d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d12:	4770      	bx	lr

08008d14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
 8008d1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a40      	ldr	r2, [pc, #256]	; (8008e28 <TIM_Base_SetConfig+0x114>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d013      	beq.n	8008d54 <TIM_Base_SetConfig+0x40>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d32:	d00f      	beq.n	8008d54 <TIM_Base_SetConfig+0x40>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a3d      	ldr	r2, [pc, #244]	; (8008e2c <TIM_Base_SetConfig+0x118>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00b      	beq.n	8008d54 <TIM_Base_SetConfig+0x40>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a3c      	ldr	r2, [pc, #240]	; (8008e30 <TIM_Base_SetConfig+0x11c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d007      	beq.n	8008d54 <TIM_Base_SetConfig+0x40>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a3b      	ldr	r2, [pc, #236]	; (8008e34 <TIM_Base_SetConfig+0x120>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d003      	beq.n	8008d54 <TIM_Base_SetConfig+0x40>
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4a3a      	ldr	r2, [pc, #232]	; (8008e38 <TIM_Base_SetConfig+0x124>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d108      	bne.n	8008d66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	4a2f      	ldr	r2, [pc, #188]	; (8008e28 <TIM_Base_SetConfig+0x114>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d02b      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d74:	d027      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	4a2c      	ldr	r2, [pc, #176]	; (8008e2c <TIM_Base_SetConfig+0x118>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d023      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <TIM_Base_SetConfig+0x11c>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d01f      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <TIM_Base_SetConfig+0x120>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d01b      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	4a29      	ldr	r2, [pc, #164]	; (8008e38 <TIM_Base_SetConfig+0x124>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d017      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a28      	ldr	r2, [pc, #160]	; (8008e3c <TIM_Base_SetConfig+0x128>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d013      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4a27      	ldr	r2, [pc, #156]	; (8008e40 <TIM_Base_SetConfig+0x12c>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00f      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a26      	ldr	r2, [pc, #152]	; (8008e44 <TIM_Base_SetConfig+0x130>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00b      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a25      	ldr	r2, [pc, #148]	; (8008e48 <TIM_Base_SetConfig+0x134>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d007      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a24      	ldr	r2, [pc, #144]	; (8008e4c <TIM_Base_SetConfig+0x138>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d003      	beq.n	8008dc6 <TIM_Base_SetConfig+0xb2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a23      	ldr	r2, [pc, #140]	; (8008e50 <TIM_Base_SetConfig+0x13c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d108      	bne.n	8008dd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	68db      	ldr	r3, [r3, #12]
 8008dd2:	68fa      	ldr	r2, [r7, #12]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	695b      	ldr	r3, [r3, #20]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	68fa      	ldr	r2, [r7, #12]
 8008dea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dec:	683b      	ldr	r3, [r7, #0]
 8008dee:	689a      	ldr	r2, [r3, #8]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a0a      	ldr	r2, [pc, #40]	; (8008e28 <TIM_Base_SetConfig+0x114>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d003      	beq.n	8008e0c <TIM_Base_SetConfig+0xf8>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a0c      	ldr	r2, [pc, #48]	; (8008e38 <TIM_Base_SetConfig+0x124>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d103      	bne.n	8008e14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	691a      	ldr	r2, [r3, #16]
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	615a      	str	r2, [r3, #20]
}
 8008e1a:	bf00      	nop
 8008e1c:	3714      	adds	r7, #20
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	40010000 	.word	0x40010000
 8008e2c:	40000400 	.word	0x40000400
 8008e30:	40000800 	.word	0x40000800
 8008e34:	40000c00 	.word	0x40000c00
 8008e38:	40010400 	.word	0x40010400
 8008e3c:	40014000 	.word	0x40014000
 8008e40:	40014400 	.word	0x40014400
 8008e44:	40014800 	.word	0x40014800
 8008e48:	40001800 	.word	0x40001800
 8008e4c:	40001c00 	.word	0x40001c00
 8008e50:	40002000 	.word	0x40002000

08008e54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e54:	b480      	push	{r7}
 8008e56:	b087      	sub	sp, #28
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
 8008e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6a1b      	ldr	r3, [r3, #32]
 8008e62:	f023 0201 	bic.w	r2, r3, #1
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6a1b      	ldr	r3, [r3, #32]
 8008e6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	699b      	ldr	r3, [r3, #24]
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	4b2b      	ldr	r3, [pc, #172]	; (8008f2c <TIM_OC1_SetConfig+0xd8>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0303 	bic.w	r3, r3, #3
 8008e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4313      	orrs	r3, r2
 8008e94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008e96:	697b      	ldr	r3, [r7, #20]
 8008e98:	f023 0302 	bic.w	r3, r3, #2
 8008e9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	697a      	ldr	r2, [r7, #20]
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	4a21      	ldr	r2, [pc, #132]	; (8008f30 <TIM_OC1_SetConfig+0xdc>)
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d003      	beq.n	8008eb8 <TIM_OC1_SetConfig+0x64>
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4a20      	ldr	r2, [pc, #128]	; (8008f34 <TIM_OC1_SetConfig+0xe0>)
 8008eb4:	4293      	cmp	r3, r2
 8008eb6:	d10c      	bne.n	8008ed2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	f023 0308 	bic.w	r3, r3, #8
 8008ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	68db      	ldr	r3, [r3, #12]
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	f023 0304 	bic.w	r3, r3, #4
 8008ed0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a16      	ldr	r2, [pc, #88]	; (8008f30 <TIM_OC1_SetConfig+0xdc>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d003      	beq.n	8008ee2 <TIM_OC1_SetConfig+0x8e>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a15      	ldr	r2, [pc, #84]	; (8008f34 <TIM_OC1_SetConfig+0xe0>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d111      	bne.n	8008f06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	621a      	str	r2, [r3, #32]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	fffeff8f 	.word	0xfffeff8f
 8008f30:	40010000 	.word	0x40010000
 8008f34:	40010400 	.word	0x40010400

08008f38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b087      	sub	sp, #28
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
 8008f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6a1b      	ldr	r3, [r3, #32]
 8008f46:	f023 0210 	bic.w	r2, r3, #16
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6a1b      	ldr	r3, [r3, #32]
 8008f52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699b      	ldr	r3, [r3, #24]
 8008f5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	4b2e      	ldr	r3, [pc, #184]	; (800901c <TIM_OC2_SetConfig+0xe4>)
 8008f64:	4013      	ands	r3, r2
 8008f66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	021b      	lsls	r3, r3, #8
 8008f76:	68fa      	ldr	r2, [r7, #12]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f023 0320 	bic.w	r3, r3, #32
 8008f82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f84:	683b      	ldr	r3, [r7, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	011b      	lsls	r3, r3, #4
 8008f8a:	697a      	ldr	r2, [r7, #20]
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a23      	ldr	r2, [pc, #140]	; (8009020 <TIM_OC2_SetConfig+0xe8>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d003      	beq.n	8008fa0 <TIM_OC2_SetConfig+0x68>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	4a22      	ldr	r2, [pc, #136]	; (8009024 <TIM_OC2_SetConfig+0xec>)
 8008f9c:	4293      	cmp	r3, r2
 8008f9e:	d10d      	bne.n	8008fbc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	68db      	ldr	r3, [r3, #12]
 8008fac:	011b      	lsls	r3, r3, #4
 8008fae:	697a      	ldr	r2, [r7, #20]
 8008fb0:	4313      	orrs	r3, r2
 8008fb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fb4:	697b      	ldr	r3, [r7, #20]
 8008fb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008fba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	4a18      	ldr	r2, [pc, #96]	; (8009020 <TIM_OC2_SetConfig+0xe8>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d003      	beq.n	8008fcc <TIM_OC2_SetConfig+0x94>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4a17      	ldr	r2, [pc, #92]	; (8009024 <TIM_OC2_SetConfig+0xec>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d113      	bne.n	8008ff4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fd2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fd4:	693b      	ldr	r3, [r7, #16]
 8008fd6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	695b      	ldr	r3, [r3, #20]
 8008fe0:	009b      	lsls	r3, r3, #2
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	4313      	orrs	r3, r2
 8008fe6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	699b      	ldr	r3, [r3, #24]
 8008fec:	009b      	lsls	r3, r3, #2
 8008fee:	693a      	ldr	r2, [r7, #16]
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	693a      	ldr	r2, [r7, #16]
 8008ff8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	68fa      	ldr	r2, [r7, #12]
 8008ffe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	685a      	ldr	r2, [r3, #4]
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	697a      	ldr	r2, [r7, #20]
 800900c:	621a      	str	r2, [r3, #32]
}
 800900e:	bf00      	nop
 8009010:	371c      	adds	r7, #28
 8009012:	46bd      	mov	sp, r7
 8009014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	feff8fff 	.word	0xfeff8fff
 8009020:	40010000 	.word	0x40010000
 8009024:	40010400 	.word	0x40010400

08009028 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009028:	b480      	push	{r7}
 800902a:	b087      	sub	sp, #28
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
 8009030:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6a1b      	ldr	r3, [r3, #32]
 8009042:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	685b      	ldr	r3, [r3, #4]
 8009048:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	69db      	ldr	r3, [r3, #28]
 800904e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	4b2d      	ldr	r3, [pc, #180]	; (8009108 <TIM_OC3_SetConfig+0xe0>)
 8009054:	4013      	ands	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f023 0303 	bic.w	r3, r3, #3
 800905e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68fa      	ldr	r2, [r7, #12]
 8009066:	4313      	orrs	r3, r2
 8009068:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800906a:	697b      	ldr	r3, [r7, #20]
 800906c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009070:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	689b      	ldr	r3, [r3, #8]
 8009076:	021b      	lsls	r3, r3, #8
 8009078:	697a      	ldr	r2, [r7, #20]
 800907a:	4313      	orrs	r3, r2
 800907c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	4a22      	ldr	r2, [pc, #136]	; (800910c <TIM_OC3_SetConfig+0xe4>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d003      	beq.n	800908e <TIM_OC3_SetConfig+0x66>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	4a21      	ldr	r2, [pc, #132]	; (8009110 <TIM_OC3_SetConfig+0xe8>)
 800908a:	4293      	cmp	r3, r2
 800908c:	d10d      	bne.n	80090aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	68db      	ldr	r3, [r3, #12]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a17      	ldr	r2, [pc, #92]	; (800910c <TIM_OC3_SetConfig+0xe4>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d003      	beq.n	80090ba <TIM_OC3_SetConfig+0x92>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a16      	ldr	r2, [pc, #88]	; (8009110 <TIM_OC3_SetConfig+0xe8>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d113      	bne.n	80090e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80090c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	011b      	lsls	r3, r3, #4
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4313      	orrs	r3, r2
 80090d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	699b      	ldr	r3, [r3, #24]
 80090da:	011b      	lsls	r3, r3, #4
 80090dc:	693a      	ldr	r2, [r7, #16]
 80090de:	4313      	orrs	r3, r2
 80090e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	693a      	ldr	r2, [r7, #16]
 80090e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	68fa      	ldr	r2, [r7, #12]
 80090ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	685a      	ldr	r2, [r3, #4]
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	697a      	ldr	r2, [r7, #20]
 80090fa:	621a      	str	r2, [r3, #32]
}
 80090fc:	bf00      	nop
 80090fe:	371c      	adds	r7, #28
 8009100:	46bd      	mov	sp, r7
 8009102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009106:	4770      	bx	lr
 8009108:	fffeff8f 	.word	0xfffeff8f
 800910c:	40010000 	.word	0x40010000
 8009110:	40010400 	.word	0x40010400

08009114 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009114:	b480      	push	{r7}
 8009116:	b087      	sub	sp, #28
 8009118:	af00      	add	r7, sp, #0
 800911a:	6078      	str	r0, [r7, #4]
 800911c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6a1b      	ldr	r3, [r3, #32]
 8009122:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a1b      	ldr	r3, [r3, #32]
 800912e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <TIM_OC4_SetConfig+0xa4>)
 8009140:	4013      	ands	r3, r2
 8009142:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800914a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	021b      	lsls	r3, r3, #8
 8009152:	68fa      	ldr	r2, [r7, #12]
 8009154:	4313      	orrs	r3, r2
 8009156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800915e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009160:	683b      	ldr	r3, [r7, #0]
 8009162:	689b      	ldr	r3, [r3, #8]
 8009164:	031b      	lsls	r3, r3, #12
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	4313      	orrs	r3, r2
 800916a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	4a13      	ldr	r2, [pc, #76]	; (80091bc <TIM_OC4_SetConfig+0xa8>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d003      	beq.n	800917c <TIM_OC4_SetConfig+0x68>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	4a12      	ldr	r2, [pc, #72]	; (80091c0 <TIM_OC4_SetConfig+0xac>)
 8009178:	4293      	cmp	r3, r2
 800917a:	d109      	bne.n	8009190 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	695b      	ldr	r3, [r3, #20]
 8009188:	019b      	lsls	r3, r3, #6
 800918a:	697a      	ldr	r2, [r7, #20]
 800918c:	4313      	orrs	r3, r2
 800918e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	697a      	ldr	r2, [r7, #20]
 8009194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	68fa      	ldr	r2, [r7, #12]
 800919a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685a      	ldr	r2, [r3, #4]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	693a      	ldr	r2, [r7, #16]
 80091a8:	621a      	str	r2, [r3, #32]
}
 80091aa:	bf00      	nop
 80091ac:	371c      	adds	r7, #28
 80091ae:	46bd      	mov	sp, r7
 80091b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	feff8fff 	.word	0xfeff8fff
 80091bc:	40010000 	.word	0x40010000
 80091c0:	40010400 	.word	0x40010400

080091c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b087      	sub	sp, #28
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	6a1b      	ldr	r3, [r3, #32]
 80091de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091ec:	68fa      	ldr	r2, [r7, #12]
 80091ee:	4b1b      	ldr	r3, [pc, #108]	; (800925c <TIM_OC5_SetConfig+0x98>)
 80091f0:	4013      	ands	r3, r2
 80091f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	68fa      	ldr	r2, [r7, #12]
 80091fa:	4313      	orrs	r3, r2
 80091fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009204:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	4a12      	ldr	r2, [pc, #72]	; (8009260 <TIM_OC5_SetConfig+0x9c>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d003      	beq.n	8009222 <TIM_OC5_SetConfig+0x5e>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	4a11      	ldr	r2, [pc, #68]	; (8009264 <TIM_OC5_SetConfig+0xa0>)
 800921e:	4293      	cmp	r3, r2
 8009220:	d109      	bne.n	8009236 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009222:	697b      	ldr	r3, [r7, #20]
 8009224:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009228:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	695b      	ldr	r3, [r3, #20]
 800922e:	021b      	lsls	r3, r3, #8
 8009230:	697a      	ldr	r2, [r7, #20]
 8009232:	4313      	orrs	r3, r2
 8009234:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	697a      	ldr	r2, [r7, #20]
 800923a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	68fa      	ldr	r2, [r7, #12]
 8009240:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009242:	683b      	ldr	r3, [r7, #0]
 8009244:	685a      	ldr	r2, [r3, #4]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	621a      	str	r2, [r3, #32]
}
 8009250:	bf00      	nop
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr
 800925c:	fffeff8f 	.word	0xfffeff8f
 8009260:	40010000 	.word	0x40010000
 8009264:	40010400 	.word	0x40010400

08009268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4b1c      	ldr	r3, [pc, #112]	; (8009304 <TIM_OC6_SetConfig+0x9c>)
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a13      	ldr	r2, [pc, #76]	; (8009308 <TIM_OC6_SetConfig+0xa0>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC6_SetConfig+0x60>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a12      	ldr	r2, [pc, #72]	; (800930c <TIM_OC6_SetConfig+0xa4>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d109      	bne.n	80092dc <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092ce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	695b      	ldr	r3, [r3, #20]
 80092d4:	029b      	lsls	r3, r3, #10
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	697a      	ldr	r2, [r7, #20]
 80092e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	693a      	ldr	r2, [r7, #16]
 80092f4:	621a      	str	r2, [r3, #32]
}
 80092f6:	bf00      	nop
 80092f8:	371c      	adds	r7, #28
 80092fa:	46bd      	mov	sp, r7
 80092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009300:	4770      	bx	lr
 8009302:	bf00      	nop
 8009304:	feff8fff 	.word	0xfeff8fff
 8009308:	40010000 	.word	0x40010000
 800930c:	40010400 	.word	0x40010400

08009310 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6a1b      	ldr	r3, [r3, #32]
 8009320:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	6a1b      	ldr	r3, [r3, #32]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	699b      	ldr	r3, [r3, #24]
 8009332:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800933a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	011b      	lsls	r3, r3, #4
 8009340:	693a      	ldr	r2, [r7, #16]
 8009342:	4313      	orrs	r3, r2
 8009344:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	f023 030a 	bic.w	r3, r3, #10
 800934c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800934e:	697a      	ldr	r2, [r7, #20]
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	4313      	orrs	r3, r2
 8009354:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	693a      	ldr	r2, [r7, #16]
 800935a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	621a      	str	r2, [r3, #32]
}
 8009362:	bf00      	nop
 8009364:	371c      	adds	r7, #28
 8009366:	46bd      	mov	sp, r7
 8009368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936c:	4770      	bx	lr

0800936e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800936e:	b480      	push	{r7}
 8009370:	b087      	sub	sp, #28
 8009372:	af00      	add	r7, sp, #0
 8009374:	60f8      	str	r0, [r7, #12]
 8009376:	60b9      	str	r1, [r7, #8]
 8009378:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	6a1b      	ldr	r3, [r3, #32]
 800937e:	f023 0210 	bic.w	r2, r3, #16
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	699b      	ldr	r3, [r3, #24]
 800938a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	6a1b      	ldr	r3, [r3, #32]
 8009390:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009398:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	031b      	lsls	r3, r3, #12
 800939e:	697a      	ldr	r2, [r7, #20]
 80093a0:	4313      	orrs	r3, r2
 80093a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093aa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	011b      	lsls	r3, r3, #4
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	4313      	orrs	r3, r2
 80093b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	697a      	ldr	r2, [r7, #20]
 80093ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	693a      	ldr	r2, [r7, #16]
 80093c0:	621a      	str	r2, [r3, #32]
}
 80093c2:	bf00      	nop
 80093c4:	371c      	adds	r7, #28
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b085      	sub	sp, #20
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
 80093d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80093e6:	683a      	ldr	r2, [r7, #0]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f043 0307 	orr.w	r3, r3, #7
 80093f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	609a      	str	r2, [r3, #8]
}
 80093f8:	bf00      	nop
 80093fa:	3714      	adds	r7, #20
 80093fc:	46bd      	mov	sp, r7
 80093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009402:	4770      	bx	lr

08009404 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009404:	b480      	push	{r7}
 8009406:	b087      	sub	sp, #28
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
 8009410:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	689b      	ldr	r3, [r3, #8]
 8009416:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800941e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	021a      	lsls	r2, r3, #8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	431a      	orrs	r2, r3
 8009428:	68bb      	ldr	r3, [r7, #8]
 800942a:	4313      	orrs	r3, r2
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	4313      	orrs	r3, r2
 8009430:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	697a      	ldr	r2, [r7, #20]
 8009436:	609a      	str	r2, [r3, #8]
}
 8009438:	bf00      	nop
 800943a:	371c      	adds	r7, #28
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009444:	b480      	push	{r7}
 8009446:	b087      	sub	sp, #28
 8009448:	af00      	add	r7, sp, #0
 800944a:	60f8      	str	r0, [r7, #12]
 800944c:	60b9      	str	r1, [r7, #8]
 800944e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009450:	68bb      	ldr	r3, [r7, #8]
 8009452:	f003 031f 	and.w	r3, r3, #31
 8009456:	2201      	movs	r2, #1
 8009458:	fa02 f303 	lsl.w	r3, r2, r3
 800945c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6a1a      	ldr	r2, [r3, #32]
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	43db      	mvns	r3, r3
 8009466:	401a      	ands	r2, r3
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6a1a      	ldr	r2, [r3, #32]
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	f003 031f 	and.w	r3, r3, #31
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	fa01 f303 	lsl.w	r3, r1, r3
 800947c:	431a      	orrs	r2, r3
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	621a      	str	r2, [r3, #32]
}
 8009482:	bf00      	nop
 8009484:	371c      	adds	r7, #28
 8009486:	46bd      	mov	sp, r7
 8009488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948c:	4770      	bx	lr
	...

08009490 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009490:	b480      	push	{r7}
 8009492:	b085      	sub	sp, #20
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e06d      	b.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2202      	movs	r2, #2
 80094b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	685b      	ldr	r3, [r3, #4]
 80094be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	689b      	ldr	r3, [r3, #8]
 80094c6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a30      	ldr	r2, [pc, #192]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d004      	beq.n	80094dc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a2f      	ldr	r2, [pc, #188]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d108      	bne.n	80094ee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80094e2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094f4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	68fa      	ldr	r2, [r7, #12]
 80094fc:	4313      	orrs	r3, r2
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68fa      	ldr	r2, [r7, #12]
 8009506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a20      	ldr	r2, [pc, #128]	; (8009590 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d022      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800951a:	d01d      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a1d      	ldr	r2, [pc, #116]	; (8009598 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d018      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a1c      	ldr	r2, [pc, #112]	; (800959c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d013      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a1a      	ldr	r2, [pc, #104]	; (80095a0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d00e      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a15      	ldr	r2, [pc, #84]	; (8009594 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d009      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	4a16      	ldr	r2, [pc, #88]	; (80095a4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800954a:	4293      	cmp	r3, r2
 800954c:	d004      	beq.n	8009558 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	4a15      	ldr	r2, [pc, #84]	; (80095a8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009554:	4293      	cmp	r3, r2
 8009556:	d10c      	bne.n	8009572 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800955e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009560:	683b      	ldr	r3, [r7, #0]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	68ba      	ldr	r2, [r7, #8]
 8009566:	4313      	orrs	r3, r2
 8009568:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	68ba      	ldr	r2, [r7, #8]
 8009570:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr
 8009590:	40010000 	.word	0x40010000
 8009594:	40010400 	.word	0x40010400
 8009598:	40000400 	.word	0x40000400
 800959c:	40000800 	.word	0x40000800
 80095a0:	40000c00 	.word	0x40000c00
 80095a4:	40014000 	.word	0x40014000
 80095a8:	40001800 	.word	0x40001800

080095ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b083      	sub	sp, #12
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80095b4:	bf00      	nop
 80095b6:	370c      	adds	r7, #12
 80095b8:	46bd      	mov	sp, r7
 80095ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095be:	4770      	bx	lr

080095c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b083      	sub	sp, #12
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80095c8:	bf00      	nop
 80095ca:	370c      	adds	r7, #12
 80095cc:	46bd      	mov	sp, r7
 80095ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d2:	4770      	bx	lr

080095d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d101      	bne.n	80095fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80095f6:	2301      	movs	r3, #1
 80095f8:	e040      	b.n	800967c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d106      	bne.n	8009610 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2200      	movs	r2, #0
 8009606:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f7fb f9f6 	bl	80049fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2224      	movs	r2, #36	; 0x24
 8009614:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f022 0201 	bic.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009626:	6878      	ldr	r0, [r7, #4]
 8009628:	f000 fb16 	bl	8009c58 <UART_SetConfig>
 800962c:	4603      	mov	r3, r0
 800962e:	2b01      	cmp	r3, #1
 8009630:	d101      	bne.n	8009636 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009632:	2301      	movs	r3, #1
 8009634:	e022      	b.n	800967c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963a:	2b00      	cmp	r3, #0
 800963c:	d002      	beq.n	8009644 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	f000 fd6e 	bl	800a120 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009652:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009662:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f000 fdf5 	bl	800a264 <UART_CheckIdleState>
 800967a:	4603      	mov	r3, r0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b0ba      	sub	sp, #232	; 0xe8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	69db      	ldr	r3, [r3, #28]
 8009692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689b      	ldr	r3, [r3, #8]
 80096a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80096aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80096ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80096b2:	4013      	ands	r3, r2
 80096b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80096b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d115      	bne.n	80096ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80096c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096c4:	f003 0320 	and.w	r3, r3, #32
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00f      	beq.n	80096ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096d0:	f003 0320 	and.w	r3, r3, #32
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d009      	beq.n	80096ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 828f 	beq.w	8009c00 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	4798      	blx	r3
      }
      return;
 80096ea:	e289      	b.n	8009c00 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80096ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	f000 8117 	beq.w	8009924 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80096f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80096fa:	f003 0301 	and.w	r3, r3, #1
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d106      	bne.n	8009710 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8009702:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009706:	4b85      	ldr	r3, [pc, #532]	; (800991c <HAL_UART_IRQHandler+0x298>)
 8009708:	4013      	ands	r3, r2
 800970a:	2b00      	cmp	r3, #0
 800970c:	f000 810a 	beq.w	8009924 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b00      	cmp	r3, #0
 800971a:	d011      	beq.n	8009740 <HAL_UART_IRQHandler+0xbc>
 800971c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009724:	2b00      	cmp	r3, #0
 8009726:	d00b      	beq.n	8009740 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2201      	movs	r2, #1
 800972e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009736:	f043 0201 	orr.w	r2, r3, #1
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009744:	f003 0302 	and.w	r3, r3, #2
 8009748:	2b00      	cmp	r3, #0
 800974a:	d011      	beq.n	8009770 <HAL_UART_IRQHandler+0xec>
 800974c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009750:	f003 0301 	and.w	r3, r3, #1
 8009754:	2b00      	cmp	r3, #0
 8009756:	d00b      	beq.n	8009770 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	2202      	movs	r2, #2
 800975e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009766:	f043 0204 	orr.w	r2, r3, #4
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009774:	f003 0304 	and.w	r3, r3, #4
 8009778:	2b00      	cmp	r3, #0
 800977a:	d011      	beq.n	80097a0 <HAL_UART_IRQHandler+0x11c>
 800977c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d00b      	beq.n	80097a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2204      	movs	r2, #4
 800978e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009796:	f043 0202 	orr.w	r2, r3, #2
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80097a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097a4:	f003 0308 	and.w	r3, r3, #8
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d017      	beq.n	80097dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097b0:	f003 0320 	and.w	r3, r3, #32
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d105      	bne.n	80097c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80097b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d00b      	beq.n	80097dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2208      	movs	r2, #8
 80097ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097d2:	f043 0208 	orr.w	r2, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80097dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d012      	beq.n	800980e <HAL_UART_IRQHandler+0x18a>
 80097e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d00c      	beq.n	800980e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009804:	f043 0220 	orr.w	r2, r3, #32
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 81f5 	beq.w	8009c04 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800981a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800981e:	f003 0320 	and.w	r3, r3, #32
 8009822:	2b00      	cmp	r3, #0
 8009824:	d00d      	beq.n	8009842 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009826:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d007      	beq.n	8009842 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009836:	2b00      	cmp	r3, #0
 8009838:	d003      	beq.n	8009842 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009848:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	689b      	ldr	r3, [r3, #8]
 8009852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009856:	2b40      	cmp	r3, #64	; 0x40
 8009858:	d005      	beq.n	8009866 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800985a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800985e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009862:	2b00      	cmp	r3, #0
 8009864:	d04f      	beq.n	8009906 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f000 fdf3 	bl	800a452 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	689b      	ldr	r3, [r3, #8]
 8009872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009876:	2b40      	cmp	r3, #64	; 0x40
 8009878:	d141      	bne.n	80098fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	3308      	adds	r3, #8
 8009880:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009884:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009888:	e853 3f00 	ldrex	r3, [r3]
 800988c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009890:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009894:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009898:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	3308      	adds	r3, #8
 80098a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80098a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80098aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80098b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80098be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1d9      	bne.n	800987a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d013      	beq.n	80098f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098d2:	4a13      	ldr	r2, [pc, #76]	; (8009920 <HAL_UART_IRQHandler+0x29c>)
 80098d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098da:	4618      	mov	r0, r3
 80098dc:	f7fd f90f 	bl	8006afe <HAL_DMA_Abort_IT>
 80098e0:	4603      	mov	r3, r0
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d017      	beq.n	8009916 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80098f0:	4610      	mov	r0, r2
 80098f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098f4:	e00f      	b.n	8009916 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f000 f998 	bl	8009c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80098fc:	e00b      	b.n	8009916 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 f994 	bl	8009c2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009904:	e007      	b.n	8009916 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f000 f990 	bl	8009c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8009914:	e176      	b.n	8009c04 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009916:	bf00      	nop
    return;
 8009918:	e174      	b.n	8009c04 <HAL_UART_IRQHandler+0x580>
 800991a:	bf00      	nop
 800991c:	04000120 	.word	0x04000120
 8009920:	0800a519 	.word	0x0800a519

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009928:	2b01      	cmp	r3, #1
 800992a:	f040 8144 	bne.w	8009bb6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800992e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009932:	f003 0310 	and.w	r3, r3, #16
 8009936:	2b00      	cmp	r3, #0
 8009938:	f000 813d 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800993c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009940:	f003 0310 	and.w	r3, r3, #16
 8009944:	2b00      	cmp	r3, #0
 8009946:	f000 8136 	beq.w	8009bb6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2210      	movs	r2, #16
 8009950:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	689b      	ldr	r3, [r3, #8]
 8009958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995c:	2b40      	cmp	r3, #64	; 0x40
 800995e:	f040 80b2 	bne.w	8009ac6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800996e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009972:	2b00      	cmp	r3, #0
 8009974:	f000 8148 	beq.w	8009c08 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800997e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009982:	429a      	cmp	r2, r3
 8009984:	f080 8140 	bcs.w	8009c08 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800998e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800999c:	f000 8085 	beq.w	8009aaa <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80099b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80099ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80099ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80099d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80099da:	e841 2300 	strex	r3, r2, [r1]
 80099de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80099e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d1da      	bne.n	80099a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	3308      	adds	r3, #8
 80099f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099f4:	e853 3f00 	ldrex	r3, [r3]
 80099f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099fc:	f023 0301 	bic.w	r3, r3, #1
 8009a00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009a0e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009a12:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a14:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009a16:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009a1a:	e841 2300 	strex	r3, r2, [r1]
 8009a1e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009a20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d1e1      	bne.n	80099ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	3308      	adds	r3, #8
 8009a2c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009a30:	e853 3f00 	ldrex	r3, [r3]
 8009a34:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009a36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009a38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	3308      	adds	r3, #8
 8009a46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009a4a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009a4c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a4e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a52:	e841 2300 	strex	r3, r2, [r1]
 8009a56:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d1e3      	bne.n	8009a26 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2220      	movs	r2, #32
 8009a62:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2200      	movs	r2, #0
 8009a68:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a72:	e853 3f00 	ldrex	r3, [r3]
 8009a76:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a7a:	f023 0310 	bic.w	r3, r3, #16
 8009a7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a8e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a90:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a94:	e841 2300 	strex	r3, r2, [r1]
 8009a98:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d1e4      	bne.n	8009a6a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f7fc ffba 	bl	8006a1e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ab6:	b29b      	uxth	r3, r3
 8009ab8:	1ad3      	subs	r3, r2, r3
 8009aba:	b29b      	uxth	r3, r3
 8009abc:	4619      	mov	r1, r3
 8009abe:	6878      	ldr	r0, [r7, #4]
 8009ac0:	f000 f8be 	bl	8009c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ac4:	e0a0      	b.n	8009c08 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ad2:	b29b      	uxth	r3, r3
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009ae0:	b29b      	uxth	r3, r3
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 8092 	beq.w	8009c0c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8009ae8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	f000 808d 	beq.w	8009c0c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009b06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	461a      	mov	r2, r3
 8009b10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b14:	647b      	str	r3, [r7, #68]	; 0x44
 8009b16:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b18:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b1c:	e841 2300 	strex	r3, r2, [r1]
 8009b20:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d1e4      	bne.n	8009af2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	3308      	adds	r3, #8
 8009b2e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b32:	e853 3f00 	ldrex	r3, [r3]
 8009b36:	623b      	str	r3, [r7, #32]
   return(result);
 8009b38:	6a3b      	ldr	r3, [r7, #32]
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	3308      	adds	r3, #8
 8009b48:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b4c:	633a      	str	r2, [r7, #48]	; 0x30
 8009b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b54:	e841 2300 	strex	r3, r2, [r1]
 8009b58:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d1e3      	bne.n	8009b28 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2220      	movs	r2, #32
 8009b64:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2200      	movs	r2, #0
 8009b70:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	e853 3f00 	ldrex	r3, [r3]
 8009b7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f023 0310 	bic.w	r3, r3, #16
 8009b86:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b94:	61fb      	str	r3, [r7, #28]
 8009b96:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b98:	69b9      	ldr	r1, [r7, #24]
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	e841 2300 	strex	r3, r2, [r1]
 8009ba0:	617b      	str	r3, [r7, #20]
   return(result);
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d1e4      	bne.n	8009b72 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009bac:	4619      	mov	r1, r3
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f000 f846 	bl	8009c40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bb4:	e02a      	b.n	8009c0c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00e      	beq.n	8009be0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01c      	beq.n	8009c10 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	4798      	blx	r3
    }
    return;
 8009bde:	e017      	b.n	8009c10 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009be0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d012      	beq.n	8009c12 <HAL_UART_IRQHandler+0x58e>
 8009bec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d00c      	beq.n	8009c12 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fca3 	bl	800a544 <UART_EndTransmit_IT>
    return;
 8009bfe:	e008      	b.n	8009c12 <HAL_UART_IRQHandler+0x58e>
      return;
 8009c00:	bf00      	nop
 8009c02:	e006      	b.n	8009c12 <HAL_UART_IRQHandler+0x58e>
    return;
 8009c04:	bf00      	nop
 8009c06:	e004      	b.n	8009c12 <HAL_UART_IRQHandler+0x58e>
      return;
 8009c08:	bf00      	nop
 8009c0a:	e002      	b.n	8009c12 <HAL_UART_IRQHandler+0x58e>
      return;
 8009c0c:	bf00      	nop
 8009c0e:	e000      	b.n	8009c12 <HAL_UART_IRQHandler+0x58e>
    return;
 8009c10:	bf00      	nop
  }

}
 8009c12:	37e8      	adds	r7, #232	; 0xe8
 8009c14:	46bd      	mov	sp, r7
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b083      	sub	sp, #12
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c20:	bf00      	nop
 8009c22:	370c      	adds	r7, #12
 8009c24:	46bd      	mov	sp, r7
 8009c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2a:	4770      	bx	lr

08009c2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c2c:	b480      	push	{r7}
 8009c2e:	b083      	sub	sp, #12
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009c34:	bf00      	nop
 8009c36:	370c      	adds	r7, #12
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
 8009c48:	460b      	mov	r3, r1
 8009c4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c60:	2300      	movs	r3, #0
 8009c62:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	689a      	ldr	r2, [r3, #8]
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	691b      	ldr	r3, [r3, #16]
 8009c6c:	431a      	orrs	r2, r3
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	695b      	ldr	r3, [r3, #20]
 8009c72:	431a      	orrs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	4313      	orrs	r3, r2
 8009c7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	681a      	ldr	r2, [r3, #0]
 8009c82:	4ba6      	ldr	r3, [pc, #664]	; (8009f1c <UART_SetConfig+0x2c4>)
 8009c84:	4013      	ands	r3, r2
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	6812      	ldr	r2, [r2, #0]
 8009c8a:	6979      	ldr	r1, [r7, #20]
 8009c8c:	430b      	orrs	r3, r1
 8009c8e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	685b      	ldr	r3, [r3, #4]
 8009c96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	68da      	ldr	r2, [r3, #12]
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	430a      	orrs	r2, r1
 8009ca4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	699b      	ldr	r3, [r3, #24]
 8009caa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6a1b      	ldr	r3, [r3, #32]
 8009cb0:	697a      	ldr	r2, [r7, #20]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	697a      	ldr	r2, [r7, #20]
 8009cc6:	430a      	orrs	r2, r1
 8009cc8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	4a94      	ldr	r2, [pc, #592]	; (8009f20 <UART_SetConfig+0x2c8>)
 8009cd0:	4293      	cmp	r3, r2
 8009cd2:	d120      	bne.n	8009d16 <UART_SetConfig+0xbe>
 8009cd4:	4b93      	ldr	r3, [pc, #588]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009cd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b03      	cmp	r3, #3
 8009ce0:	d816      	bhi.n	8009d10 <UART_SetConfig+0xb8>
 8009ce2:	a201      	add	r2, pc, #4	; (adr r2, 8009ce8 <UART_SetConfig+0x90>)
 8009ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ce8:	08009cf9 	.word	0x08009cf9
 8009cec:	08009d05 	.word	0x08009d05
 8009cf0:	08009cff 	.word	0x08009cff
 8009cf4:	08009d0b 	.word	0x08009d0b
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	77fb      	strb	r3, [r7, #31]
 8009cfc:	e150      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009cfe:	2302      	movs	r3, #2
 8009d00:	77fb      	strb	r3, [r7, #31]
 8009d02:	e14d      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d04:	2304      	movs	r3, #4
 8009d06:	77fb      	strb	r3, [r7, #31]
 8009d08:	e14a      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	77fb      	strb	r3, [r7, #31]
 8009d0e:	e147      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d10:	2310      	movs	r3, #16
 8009d12:	77fb      	strb	r3, [r7, #31]
 8009d14:	e144      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	4a83      	ldr	r2, [pc, #524]	; (8009f28 <UART_SetConfig+0x2d0>)
 8009d1c:	4293      	cmp	r3, r2
 8009d1e:	d132      	bne.n	8009d86 <UART_SetConfig+0x12e>
 8009d20:	4b80      	ldr	r3, [pc, #512]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d26:	f003 030c 	and.w	r3, r3, #12
 8009d2a:	2b0c      	cmp	r3, #12
 8009d2c:	d828      	bhi.n	8009d80 <UART_SetConfig+0x128>
 8009d2e:	a201      	add	r2, pc, #4	; (adr r2, 8009d34 <UART_SetConfig+0xdc>)
 8009d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d34:	08009d69 	.word	0x08009d69
 8009d38:	08009d81 	.word	0x08009d81
 8009d3c:	08009d81 	.word	0x08009d81
 8009d40:	08009d81 	.word	0x08009d81
 8009d44:	08009d75 	.word	0x08009d75
 8009d48:	08009d81 	.word	0x08009d81
 8009d4c:	08009d81 	.word	0x08009d81
 8009d50:	08009d81 	.word	0x08009d81
 8009d54:	08009d6f 	.word	0x08009d6f
 8009d58:	08009d81 	.word	0x08009d81
 8009d5c:	08009d81 	.word	0x08009d81
 8009d60:	08009d81 	.word	0x08009d81
 8009d64:	08009d7b 	.word	0x08009d7b
 8009d68:	2300      	movs	r3, #0
 8009d6a:	77fb      	strb	r3, [r7, #31]
 8009d6c:	e118      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d6e:	2302      	movs	r3, #2
 8009d70:	77fb      	strb	r3, [r7, #31]
 8009d72:	e115      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d74:	2304      	movs	r3, #4
 8009d76:	77fb      	strb	r3, [r7, #31]
 8009d78:	e112      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d7a:	2308      	movs	r3, #8
 8009d7c:	77fb      	strb	r3, [r7, #31]
 8009d7e:	e10f      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d80:	2310      	movs	r3, #16
 8009d82:	77fb      	strb	r3, [r7, #31]
 8009d84:	e10c      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	4a68      	ldr	r2, [pc, #416]	; (8009f2c <UART_SetConfig+0x2d4>)
 8009d8c:	4293      	cmp	r3, r2
 8009d8e:	d120      	bne.n	8009dd2 <UART_SetConfig+0x17a>
 8009d90:	4b64      	ldr	r3, [pc, #400]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d96:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009d9a:	2b30      	cmp	r3, #48	; 0x30
 8009d9c:	d013      	beq.n	8009dc6 <UART_SetConfig+0x16e>
 8009d9e:	2b30      	cmp	r3, #48	; 0x30
 8009da0:	d814      	bhi.n	8009dcc <UART_SetConfig+0x174>
 8009da2:	2b20      	cmp	r3, #32
 8009da4:	d009      	beq.n	8009dba <UART_SetConfig+0x162>
 8009da6:	2b20      	cmp	r3, #32
 8009da8:	d810      	bhi.n	8009dcc <UART_SetConfig+0x174>
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d002      	beq.n	8009db4 <UART_SetConfig+0x15c>
 8009dae:	2b10      	cmp	r3, #16
 8009db0:	d006      	beq.n	8009dc0 <UART_SetConfig+0x168>
 8009db2:	e00b      	b.n	8009dcc <UART_SetConfig+0x174>
 8009db4:	2300      	movs	r3, #0
 8009db6:	77fb      	strb	r3, [r7, #31]
 8009db8:	e0f2      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009dba:	2302      	movs	r3, #2
 8009dbc:	77fb      	strb	r3, [r7, #31]
 8009dbe:	e0ef      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009dc0:	2304      	movs	r3, #4
 8009dc2:	77fb      	strb	r3, [r7, #31]
 8009dc4:	e0ec      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009dc6:	2308      	movs	r3, #8
 8009dc8:	77fb      	strb	r3, [r7, #31]
 8009dca:	e0e9      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009dcc:	2310      	movs	r3, #16
 8009dce:	77fb      	strb	r3, [r7, #31]
 8009dd0:	e0e6      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	4a56      	ldr	r2, [pc, #344]	; (8009f30 <UART_SetConfig+0x2d8>)
 8009dd8:	4293      	cmp	r3, r2
 8009dda:	d120      	bne.n	8009e1e <UART_SetConfig+0x1c6>
 8009ddc:	4b51      	ldr	r3, [pc, #324]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009de2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009de6:	2bc0      	cmp	r3, #192	; 0xc0
 8009de8:	d013      	beq.n	8009e12 <UART_SetConfig+0x1ba>
 8009dea:	2bc0      	cmp	r3, #192	; 0xc0
 8009dec:	d814      	bhi.n	8009e18 <UART_SetConfig+0x1c0>
 8009dee:	2b80      	cmp	r3, #128	; 0x80
 8009df0:	d009      	beq.n	8009e06 <UART_SetConfig+0x1ae>
 8009df2:	2b80      	cmp	r3, #128	; 0x80
 8009df4:	d810      	bhi.n	8009e18 <UART_SetConfig+0x1c0>
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d002      	beq.n	8009e00 <UART_SetConfig+0x1a8>
 8009dfa:	2b40      	cmp	r3, #64	; 0x40
 8009dfc:	d006      	beq.n	8009e0c <UART_SetConfig+0x1b4>
 8009dfe:	e00b      	b.n	8009e18 <UART_SetConfig+0x1c0>
 8009e00:	2300      	movs	r3, #0
 8009e02:	77fb      	strb	r3, [r7, #31]
 8009e04:	e0cc      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e06:	2302      	movs	r3, #2
 8009e08:	77fb      	strb	r3, [r7, #31]
 8009e0a:	e0c9      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e0c:	2304      	movs	r3, #4
 8009e0e:	77fb      	strb	r3, [r7, #31]
 8009e10:	e0c6      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e12:	2308      	movs	r3, #8
 8009e14:	77fb      	strb	r3, [r7, #31]
 8009e16:	e0c3      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	77fb      	strb	r3, [r7, #31]
 8009e1c:	e0c0      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	4a44      	ldr	r2, [pc, #272]	; (8009f34 <UART_SetConfig+0x2dc>)
 8009e24:	4293      	cmp	r3, r2
 8009e26:	d125      	bne.n	8009e74 <UART_SetConfig+0x21c>
 8009e28:	4b3e      	ldr	r3, [pc, #248]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009e32:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e36:	d017      	beq.n	8009e68 <UART_SetConfig+0x210>
 8009e38:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e3c:	d817      	bhi.n	8009e6e <UART_SetConfig+0x216>
 8009e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e42:	d00b      	beq.n	8009e5c <UART_SetConfig+0x204>
 8009e44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e48:	d811      	bhi.n	8009e6e <UART_SetConfig+0x216>
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <UART_SetConfig+0x1fe>
 8009e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e52:	d006      	beq.n	8009e62 <UART_SetConfig+0x20a>
 8009e54:	e00b      	b.n	8009e6e <UART_SetConfig+0x216>
 8009e56:	2300      	movs	r3, #0
 8009e58:	77fb      	strb	r3, [r7, #31]
 8009e5a:	e0a1      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e5c:	2302      	movs	r3, #2
 8009e5e:	77fb      	strb	r3, [r7, #31]
 8009e60:	e09e      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e62:	2304      	movs	r3, #4
 8009e64:	77fb      	strb	r3, [r7, #31]
 8009e66:	e09b      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e68:	2308      	movs	r3, #8
 8009e6a:	77fb      	strb	r3, [r7, #31]
 8009e6c:	e098      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e6e:	2310      	movs	r3, #16
 8009e70:	77fb      	strb	r3, [r7, #31]
 8009e72:	e095      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a2f      	ldr	r2, [pc, #188]	; (8009f38 <UART_SetConfig+0x2e0>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d125      	bne.n	8009eca <UART_SetConfig+0x272>
 8009e7e:	4b29      	ldr	r3, [pc, #164]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e84:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009e88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e8c:	d017      	beq.n	8009ebe <UART_SetConfig+0x266>
 8009e8e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e92:	d817      	bhi.n	8009ec4 <UART_SetConfig+0x26c>
 8009e94:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e98:	d00b      	beq.n	8009eb2 <UART_SetConfig+0x25a>
 8009e9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e9e:	d811      	bhi.n	8009ec4 <UART_SetConfig+0x26c>
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d003      	beq.n	8009eac <UART_SetConfig+0x254>
 8009ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ea8:	d006      	beq.n	8009eb8 <UART_SetConfig+0x260>
 8009eaa:	e00b      	b.n	8009ec4 <UART_SetConfig+0x26c>
 8009eac:	2301      	movs	r3, #1
 8009eae:	77fb      	strb	r3, [r7, #31]
 8009eb0:	e076      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009eb2:	2302      	movs	r3, #2
 8009eb4:	77fb      	strb	r3, [r7, #31]
 8009eb6:	e073      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009eb8:	2304      	movs	r3, #4
 8009eba:	77fb      	strb	r3, [r7, #31]
 8009ebc:	e070      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009ebe:	2308      	movs	r3, #8
 8009ec0:	77fb      	strb	r3, [r7, #31]
 8009ec2:	e06d      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009ec4:	2310      	movs	r3, #16
 8009ec6:	77fb      	strb	r3, [r7, #31]
 8009ec8:	e06a      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a1b      	ldr	r2, [pc, #108]	; (8009f3c <UART_SetConfig+0x2e4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d138      	bne.n	8009f46 <UART_SetConfig+0x2ee>
 8009ed4:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <UART_SetConfig+0x2cc>)
 8009ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009eda:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ede:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ee2:	d017      	beq.n	8009f14 <UART_SetConfig+0x2bc>
 8009ee4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ee8:	d82a      	bhi.n	8009f40 <UART_SetConfig+0x2e8>
 8009eea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009eee:	d00b      	beq.n	8009f08 <UART_SetConfig+0x2b0>
 8009ef0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ef4:	d824      	bhi.n	8009f40 <UART_SetConfig+0x2e8>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d003      	beq.n	8009f02 <UART_SetConfig+0x2aa>
 8009efa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009efe:	d006      	beq.n	8009f0e <UART_SetConfig+0x2b6>
 8009f00:	e01e      	b.n	8009f40 <UART_SetConfig+0x2e8>
 8009f02:	2300      	movs	r3, #0
 8009f04:	77fb      	strb	r3, [r7, #31]
 8009f06:	e04b      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f08:	2302      	movs	r3, #2
 8009f0a:	77fb      	strb	r3, [r7, #31]
 8009f0c:	e048      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f0e:	2304      	movs	r3, #4
 8009f10:	77fb      	strb	r3, [r7, #31]
 8009f12:	e045      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f14:	2308      	movs	r3, #8
 8009f16:	77fb      	strb	r3, [r7, #31]
 8009f18:	e042      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f1a:	bf00      	nop
 8009f1c:	efff69f3 	.word	0xefff69f3
 8009f20:	40011000 	.word	0x40011000
 8009f24:	40023800 	.word	0x40023800
 8009f28:	40004400 	.word	0x40004400
 8009f2c:	40004800 	.word	0x40004800
 8009f30:	40004c00 	.word	0x40004c00
 8009f34:	40005000 	.word	0x40005000
 8009f38:	40011400 	.word	0x40011400
 8009f3c:	40007800 	.word	0x40007800
 8009f40:	2310      	movs	r3, #16
 8009f42:	77fb      	strb	r3, [r7, #31]
 8009f44:	e02c      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a72      	ldr	r2, [pc, #456]	; (800a114 <UART_SetConfig+0x4bc>)
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	d125      	bne.n	8009f9c <UART_SetConfig+0x344>
 8009f50:	4b71      	ldr	r3, [pc, #452]	; (800a118 <UART_SetConfig+0x4c0>)
 8009f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f56:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009f5a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009f5e:	d017      	beq.n	8009f90 <UART_SetConfig+0x338>
 8009f60:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009f64:	d817      	bhi.n	8009f96 <UART_SetConfig+0x33e>
 8009f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f6a:	d00b      	beq.n	8009f84 <UART_SetConfig+0x32c>
 8009f6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009f70:	d811      	bhi.n	8009f96 <UART_SetConfig+0x33e>
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d003      	beq.n	8009f7e <UART_SetConfig+0x326>
 8009f76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f7a:	d006      	beq.n	8009f8a <UART_SetConfig+0x332>
 8009f7c:	e00b      	b.n	8009f96 <UART_SetConfig+0x33e>
 8009f7e:	2300      	movs	r3, #0
 8009f80:	77fb      	strb	r3, [r7, #31]
 8009f82:	e00d      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f84:	2302      	movs	r3, #2
 8009f86:	77fb      	strb	r3, [r7, #31]
 8009f88:	e00a      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f8a:	2304      	movs	r3, #4
 8009f8c:	77fb      	strb	r3, [r7, #31]
 8009f8e:	e007      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f90:	2308      	movs	r3, #8
 8009f92:	77fb      	strb	r3, [r7, #31]
 8009f94:	e004      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f96:	2310      	movs	r3, #16
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e001      	b.n	8009fa0 <UART_SetConfig+0x348>
 8009f9c:	2310      	movs	r3, #16
 8009f9e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	69db      	ldr	r3, [r3, #28]
 8009fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009fa8:	d15b      	bne.n	800a062 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009faa:	7ffb      	ldrb	r3, [r7, #31]
 8009fac:	2b08      	cmp	r3, #8
 8009fae:	d828      	bhi.n	800a002 <UART_SetConfig+0x3aa>
 8009fb0:	a201      	add	r2, pc, #4	; (adr r2, 8009fb8 <UART_SetConfig+0x360>)
 8009fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb6:	bf00      	nop
 8009fb8:	08009fdd 	.word	0x08009fdd
 8009fbc:	08009fe5 	.word	0x08009fe5
 8009fc0:	08009fed 	.word	0x08009fed
 8009fc4:	0800a003 	.word	0x0800a003
 8009fc8:	08009ff3 	.word	0x08009ff3
 8009fcc:	0800a003 	.word	0x0800a003
 8009fd0:	0800a003 	.word	0x0800a003
 8009fd4:	0800a003 	.word	0x0800a003
 8009fd8:	08009ffb 	.word	0x08009ffb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fdc:	f7fd fcb4 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 8009fe0:	61b8      	str	r0, [r7, #24]
        break;
 8009fe2:	e013      	b.n	800a00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fe4:	f7fd fcc4 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 8009fe8:	61b8      	str	r0, [r7, #24]
        break;
 8009fea:	e00f      	b.n	800a00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fec:	4b4b      	ldr	r3, [pc, #300]	; (800a11c <UART_SetConfig+0x4c4>)
 8009fee:	61bb      	str	r3, [r7, #24]
        break;
 8009ff0:	e00c      	b.n	800a00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009ff2:	f7fd fb97 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 8009ff6:	61b8      	str	r0, [r7, #24]
        break;
 8009ff8:	e008      	b.n	800a00c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009ffa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009ffe:	61bb      	str	r3, [r7, #24]
        break;
 800a000:	e004      	b.n	800a00c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a002:	2300      	movs	r3, #0
 800a004:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	77bb      	strb	r3, [r7, #30]
        break;
 800a00a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d074      	beq.n	800a0fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	005a      	lsls	r2, r3, #1
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	085b      	lsrs	r3, r3, #1
 800a01c:	441a      	add	r2, r3
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	685b      	ldr	r3, [r3, #4]
 800a022:	fbb2 f3f3 	udiv	r3, r2, r3
 800a026:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	2b0f      	cmp	r3, #15
 800a02c:	d916      	bls.n	800a05c <UART_SetConfig+0x404>
 800a02e:	693b      	ldr	r3, [r7, #16]
 800a030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a034:	d212      	bcs.n	800a05c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a036:	693b      	ldr	r3, [r7, #16]
 800a038:	b29b      	uxth	r3, r3
 800a03a:	f023 030f 	bic.w	r3, r3, #15
 800a03e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	085b      	lsrs	r3, r3, #1
 800a044:	b29b      	uxth	r3, r3
 800a046:	f003 0307 	and.w	r3, r3, #7
 800a04a:	b29a      	uxth	r2, r3
 800a04c:	89fb      	ldrh	r3, [r7, #14]
 800a04e:	4313      	orrs	r3, r2
 800a050:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	89fa      	ldrh	r2, [r7, #14]
 800a058:	60da      	str	r2, [r3, #12]
 800a05a:	e04f      	b.n	800a0fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a05c:	2301      	movs	r3, #1
 800a05e:	77bb      	strb	r3, [r7, #30]
 800a060:	e04c      	b.n	800a0fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a062:	7ffb      	ldrb	r3, [r7, #31]
 800a064:	2b08      	cmp	r3, #8
 800a066:	d828      	bhi.n	800a0ba <UART_SetConfig+0x462>
 800a068:	a201      	add	r2, pc, #4	; (adr r2, 800a070 <UART_SetConfig+0x418>)
 800a06a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a06e:	bf00      	nop
 800a070:	0800a095 	.word	0x0800a095
 800a074:	0800a09d 	.word	0x0800a09d
 800a078:	0800a0a5 	.word	0x0800a0a5
 800a07c:	0800a0bb 	.word	0x0800a0bb
 800a080:	0800a0ab 	.word	0x0800a0ab
 800a084:	0800a0bb 	.word	0x0800a0bb
 800a088:	0800a0bb 	.word	0x0800a0bb
 800a08c:	0800a0bb 	.word	0x0800a0bb
 800a090:	0800a0b3 	.word	0x0800a0b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a094:	f7fd fc58 	bl	8007948 <HAL_RCC_GetPCLK1Freq>
 800a098:	61b8      	str	r0, [r7, #24]
        break;
 800a09a:	e013      	b.n	800a0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a09c:	f7fd fc68 	bl	8007970 <HAL_RCC_GetPCLK2Freq>
 800a0a0:	61b8      	str	r0, [r7, #24]
        break;
 800a0a2:	e00f      	b.n	800a0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	; (800a11c <UART_SetConfig+0x4c4>)
 800a0a6:	61bb      	str	r3, [r7, #24]
        break;
 800a0a8:	e00c      	b.n	800a0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0aa:	f7fd fb3b 	bl	8007724 <HAL_RCC_GetSysClockFreq>
 800a0ae:	61b8      	str	r0, [r7, #24]
        break;
 800a0b0:	e008      	b.n	800a0c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a0b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0b6:	61bb      	str	r3, [r7, #24]
        break;
 800a0b8:	e004      	b.n	800a0c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	77bb      	strb	r3, [r7, #30]
        break;
 800a0c2:	bf00      	nop
    }

    if (pclk != 0U)
 800a0c4:	69bb      	ldr	r3, [r7, #24]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d018      	beq.n	800a0fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	685b      	ldr	r3, [r3, #4]
 800a0ce:	085a      	lsrs	r2, r3, #1
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	441a      	add	r2, r3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	685b      	ldr	r3, [r3, #4]
 800a0d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0de:	693b      	ldr	r3, [r7, #16]
 800a0e0:	2b0f      	cmp	r3, #15
 800a0e2:	d909      	bls.n	800a0f8 <UART_SetConfig+0x4a0>
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0ea:	d205      	bcs.n	800a0f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a0ec:	693b      	ldr	r3, [r7, #16]
 800a0ee:	b29a      	uxth	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	60da      	str	r2, [r3, #12]
 800a0f6:	e001      	b.n	800a0fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	2200      	movs	r2, #0
 800a100:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a108:	7fbb      	ldrb	r3, [r7, #30]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3720      	adds	r7, #32
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}
 800a112:	bf00      	nop
 800a114:	40007c00 	.word	0x40007c00
 800a118:	40023800 	.word	0x40023800
 800a11c:	00f42400 	.word	0x00f42400

0800a120 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a12c:	f003 0301 	and.w	r3, r3, #1
 800a130:	2b00      	cmp	r3, #0
 800a132:	d00a      	beq.n	800a14a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	685b      	ldr	r3, [r3, #4]
 800a13a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	430a      	orrs	r2, r1
 800a148:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	f003 0302 	and.w	r3, r3, #2
 800a152:	2b00      	cmp	r3, #0
 800a154:	d00a      	beq.n	800a16c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	430a      	orrs	r2, r1
 800a16a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a170:	f003 0304 	and.w	r3, r3, #4
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00a      	beq.n	800a18e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	430a      	orrs	r2, r1
 800a18c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a192:	f003 0308 	and.w	r3, r3, #8
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00a      	beq.n	800a1b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	430a      	orrs	r2, r1
 800a1ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1b4:	f003 0310 	and.w	r3, r3, #16
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00a      	beq.n	800a1d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	430a      	orrs	r2, r1
 800a1d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1d6:	f003 0320 	and.w	r3, r3, #32
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00a      	beq.n	800a1f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	689b      	ldr	r3, [r3, #8]
 800a1e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	430a      	orrs	r2, r1
 800a1f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d01a      	beq.n	800a236 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	430a      	orrs	r2, r1
 800a214:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a21a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a21e:	d10a      	bne.n	800a236 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685b      	ldr	r3, [r3, #4]
 800a226:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	430a      	orrs	r2, r1
 800a234:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a23a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d00a      	beq.n	800a258 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	685b      	ldr	r3, [r3, #4]
 800a248:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	430a      	orrs	r2, r1
 800a256:	605a      	str	r2, [r3, #4]
  }
}
 800a258:	bf00      	nop
 800a25a:	370c      	adds	r7, #12
 800a25c:	46bd      	mov	sp, r7
 800a25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a262:	4770      	bx	lr

0800a264 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b086      	sub	sp, #24
 800a268:	af02      	add	r7, sp, #8
 800a26a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2200      	movs	r2, #0
 800a270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a274:	f7fa ff9a 	bl	80051ac <HAL_GetTick>
 800a278:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0308 	and.w	r3, r3, #8
 800a284:	2b08      	cmp	r3, #8
 800a286:	d10e      	bne.n	800a2a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a288:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a28c:	9300      	str	r3, [sp, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	2200      	movs	r2, #0
 800a292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a296:	6878      	ldr	r0, [r7, #4]
 800a298:	f000 f817 	bl	800a2ca <UART_WaitOnFlagUntilTimeout>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d001      	beq.n	800a2a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e00d      	b.n	800a2c2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	2220      	movs	r2, #32
 800a2aa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3710      	adds	r7, #16
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b09c      	sub	sp, #112	; 0x70
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	60f8      	str	r0, [r7, #12]
 800a2d2:	60b9      	str	r1, [r7, #8]
 800a2d4:	603b      	str	r3, [r7, #0]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2da:	e0a5      	b.n	800a428 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2e2:	f000 80a1 	beq.w	800a428 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a2e6:	f7fa ff61 	bl	80051ac <HAL_GetTick>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	1ad3      	subs	r3, r2, r3
 800a2f0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d302      	bcc.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x32>
 800a2f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d13e      	bne.n	800a37a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a304:	e853 3f00 	ldrex	r3, [r3]
 800a308:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a30c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a310:	667b      	str	r3, [r7, #100]	; 0x64
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	461a      	mov	r2, r3
 800a318:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a31a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a31c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a31e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a320:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a322:	e841 2300 	strex	r3, r2, [r1]
 800a326:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d1e6      	bne.n	800a2fc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	3308      	adds	r3, #8
 800a334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a338:	e853 3f00 	ldrex	r3, [r3]
 800a33c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a33e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a340:	f023 0301 	bic.w	r3, r3, #1
 800a344:	663b      	str	r3, [r7, #96]	; 0x60
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	3308      	adds	r3, #8
 800a34c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a34e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a350:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a356:	e841 2300 	strex	r3, r2, [r1]
 800a35a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a35c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d1e5      	bne.n	800a32e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2220      	movs	r2, #32
 800a366:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	2220      	movs	r2, #32
 800a36c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a376:	2303      	movs	r3, #3
 800a378:	e067      	b.n	800a44a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	f003 0304 	and.w	r3, r3, #4
 800a384:	2b00      	cmp	r3, #0
 800a386:	d04f      	beq.n	800a428 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	69db      	ldr	r3, [r3, #28]
 800a38e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a396:	d147      	bne.n	800a428 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a3a0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3aa:	e853 3f00 	ldrex	r3, [r3]
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a3c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a3c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a3c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a3c8:	e841 2300 	strex	r3, r2, [r1]
 800a3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e6      	bne.n	800a3a2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	3308      	adds	r3, #8
 800a3da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	e853 3f00 	ldrex	r3, [r3]
 800a3e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	f023 0301 	bic.w	r3, r3, #1
 800a3ea:	66bb      	str	r3, [r7, #104]	; 0x68
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	3308      	adds	r3, #8
 800a3f2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a3f4:	623a      	str	r2, [r7, #32]
 800a3f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3f8:	69f9      	ldr	r1, [r7, #28]
 800a3fa:	6a3a      	ldr	r2, [r7, #32]
 800a3fc:	e841 2300 	strex	r3, r2, [r1]
 800a400:	61bb      	str	r3, [r7, #24]
   return(result);
 800a402:	69bb      	ldr	r3, [r7, #24]
 800a404:	2b00      	cmp	r3, #0
 800a406:	d1e5      	bne.n	800a3d4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2220      	movs	r2, #32
 800a40c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2220      	movs	r2, #32
 800a412:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2220      	movs	r2, #32
 800a418:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a424:	2303      	movs	r3, #3
 800a426:	e010      	b.n	800a44a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	69da      	ldr	r2, [r3, #28]
 800a42e:	68bb      	ldr	r3, [r7, #8]
 800a430:	4013      	ands	r3, r2
 800a432:	68ba      	ldr	r2, [r7, #8]
 800a434:	429a      	cmp	r2, r3
 800a436:	bf0c      	ite	eq
 800a438:	2301      	moveq	r3, #1
 800a43a:	2300      	movne	r3, #0
 800a43c:	b2db      	uxtb	r3, r3
 800a43e:	461a      	mov	r2, r3
 800a440:	79fb      	ldrb	r3, [r7, #7]
 800a442:	429a      	cmp	r2, r3
 800a444:	f43f af4a 	beq.w	800a2dc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a448:	2300      	movs	r3, #0
}
 800a44a:	4618      	mov	r0, r3
 800a44c:	3770      	adds	r7, #112	; 0x70
 800a44e:	46bd      	mov	sp, r7
 800a450:	bd80      	pop	{r7, pc}

0800a452 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a452:	b480      	push	{r7}
 800a454:	b095      	sub	sp, #84	; 0x54
 800a456:	af00      	add	r7, sp, #0
 800a458:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a462:	e853 3f00 	ldrex	r3, [r3]
 800a466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a46e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	461a      	mov	r2, r3
 800a476:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a478:	643b      	str	r3, [r7, #64]	; 0x40
 800a47a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a47c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a47e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a480:	e841 2300 	strex	r3, r2, [r1]
 800a484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d1e6      	bne.n	800a45a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	3308      	adds	r3, #8
 800a492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a494:	6a3b      	ldr	r3, [r7, #32]
 800a496:	e853 3f00 	ldrex	r3, [r3]
 800a49a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a49c:	69fb      	ldr	r3, [r7, #28]
 800a49e:	f023 0301 	bic.w	r3, r3, #1
 800a4a2:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	3308      	adds	r3, #8
 800a4aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4b4:	e841 2300 	strex	r3, r2, [r1]
 800a4b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d1e5      	bne.n	800a48c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d118      	bne.n	800a4fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	e853 3f00 	ldrex	r3, [r3]
 800a4d4:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	f023 0310 	bic.w	r3, r3, #16
 800a4dc:	647b      	str	r3, [r7, #68]	; 0x44
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a4e6:	61bb      	str	r3, [r7, #24]
 800a4e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4ea:	6979      	ldr	r1, [r7, #20]
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	e841 2300 	strex	r3, r2, [r1]
 800a4f2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d1e6      	bne.n	800a4c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2220      	movs	r2, #32
 800a4fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	2200      	movs	r2, #0
 800a504:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	2200      	movs	r2, #0
 800a50a:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a50c:	bf00      	nop
 800a50e:	3754      	adds	r7, #84	; 0x54
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a518:	b580      	push	{r7, lr}
 800a51a:	b084      	sub	sp, #16
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a524:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2200      	movs	r2, #0
 800a52a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2200      	movs	r2, #0
 800a532:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a536:	68f8      	ldr	r0, [r7, #12]
 800a538:	f7ff fb78 	bl	8009c2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a53c:	bf00      	nop
 800a53e:	3710      	adds	r7, #16
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b088      	sub	sp, #32
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	e853 3f00 	ldrex	r3, [r3]
 800a558:	60bb      	str	r3, [r7, #8]
   return(result);
 800a55a:	68bb      	ldr	r3, [r7, #8]
 800a55c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a560:	61fb      	str	r3, [r7, #28]
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	461a      	mov	r2, r3
 800a568:	69fb      	ldr	r3, [r7, #28]
 800a56a:	61bb      	str	r3, [r7, #24]
 800a56c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a56e:	6979      	ldr	r1, [r7, #20]
 800a570:	69ba      	ldr	r2, [r7, #24]
 800a572:	e841 2300 	strex	r3, r2, [r1]
 800a576:	613b      	str	r3, [r7, #16]
   return(result);
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d1e6      	bne.n	800a54c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2220      	movs	r2, #32
 800a582:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f7ff fb44 	bl	8009c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a590:	bf00      	nop
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <__errno>:
 800a598:	4b01      	ldr	r3, [pc, #4]	; (800a5a0 <__errno+0x8>)
 800a59a:	6818      	ldr	r0, [r3, #0]
 800a59c:	4770      	bx	lr
 800a59e:	bf00      	nop
 800a5a0:	20000014 	.word	0x20000014

0800a5a4 <__libc_init_array>:
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	4d0d      	ldr	r5, [pc, #52]	; (800a5dc <__libc_init_array+0x38>)
 800a5a8:	4c0d      	ldr	r4, [pc, #52]	; (800a5e0 <__libc_init_array+0x3c>)
 800a5aa:	1b64      	subs	r4, r4, r5
 800a5ac:	10a4      	asrs	r4, r4, #2
 800a5ae:	2600      	movs	r6, #0
 800a5b0:	42a6      	cmp	r6, r4
 800a5b2:	d109      	bne.n	800a5c8 <__libc_init_array+0x24>
 800a5b4:	4d0b      	ldr	r5, [pc, #44]	; (800a5e4 <__libc_init_array+0x40>)
 800a5b6:	4c0c      	ldr	r4, [pc, #48]	; (800a5e8 <__libc_init_array+0x44>)
 800a5b8:	f001 f80c 	bl	800b5d4 <_init>
 800a5bc:	1b64      	subs	r4, r4, r5
 800a5be:	10a4      	asrs	r4, r4, #2
 800a5c0:	2600      	movs	r6, #0
 800a5c2:	42a6      	cmp	r6, r4
 800a5c4:	d105      	bne.n	800a5d2 <__libc_init_array+0x2e>
 800a5c6:	bd70      	pop	{r4, r5, r6, pc}
 800a5c8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5cc:	4798      	blx	r3
 800a5ce:	3601      	adds	r6, #1
 800a5d0:	e7ee      	b.n	800a5b0 <__libc_init_array+0xc>
 800a5d2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5d6:	4798      	blx	r3
 800a5d8:	3601      	adds	r6, #1
 800a5da:	e7f2      	b.n	800a5c2 <__libc_init_array+0x1e>
 800a5dc:	0800b6f0 	.word	0x0800b6f0
 800a5e0:	0800b6f0 	.word	0x0800b6f0
 800a5e4:	0800b6f0 	.word	0x0800b6f0
 800a5e8:	0800b6f4 	.word	0x0800b6f4

0800a5ec <memset>:
 800a5ec:	4402      	add	r2, r0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	4293      	cmp	r3, r2
 800a5f2:	d100      	bne.n	800a5f6 <memset+0xa>
 800a5f4:	4770      	bx	lr
 800a5f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a5fa:	e7f9      	b.n	800a5f0 <memset+0x4>

0800a5fc <iprintf>:
 800a5fc:	b40f      	push	{r0, r1, r2, r3}
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <iprintf+0x2c>)
 800a600:	b513      	push	{r0, r1, r4, lr}
 800a602:	681c      	ldr	r4, [r3, #0]
 800a604:	b124      	cbz	r4, 800a610 <iprintf+0x14>
 800a606:	69a3      	ldr	r3, [r4, #24]
 800a608:	b913      	cbnz	r3, 800a610 <iprintf+0x14>
 800a60a:	4620      	mov	r0, r4
 800a60c:	f000 f9fe 	bl	800aa0c <__sinit>
 800a610:	ab05      	add	r3, sp, #20
 800a612:	9a04      	ldr	r2, [sp, #16]
 800a614:	68a1      	ldr	r1, [r4, #8]
 800a616:	9301      	str	r3, [sp, #4]
 800a618:	4620      	mov	r0, r4
 800a61a:	f000 fc07 	bl	800ae2c <_vfiprintf_r>
 800a61e:	b002      	add	sp, #8
 800a620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a624:	b004      	add	sp, #16
 800a626:	4770      	bx	lr
 800a628:	20000014 	.word	0x20000014

0800a62c <putchar>:
 800a62c:	4b09      	ldr	r3, [pc, #36]	; (800a654 <putchar+0x28>)
 800a62e:	b513      	push	{r0, r1, r4, lr}
 800a630:	681c      	ldr	r4, [r3, #0]
 800a632:	4601      	mov	r1, r0
 800a634:	b134      	cbz	r4, 800a644 <putchar+0x18>
 800a636:	69a3      	ldr	r3, [r4, #24]
 800a638:	b923      	cbnz	r3, 800a644 <putchar+0x18>
 800a63a:	9001      	str	r0, [sp, #4]
 800a63c:	4620      	mov	r0, r4
 800a63e:	f000 f9e5 	bl	800aa0c <__sinit>
 800a642:	9901      	ldr	r1, [sp, #4]
 800a644:	68a2      	ldr	r2, [r4, #8]
 800a646:	4620      	mov	r0, r4
 800a648:	b002      	add	sp, #8
 800a64a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a64e:	f000 beb1 	b.w	800b3b4 <_putc_r>
 800a652:	bf00      	nop
 800a654:	20000014 	.word	0x20000014

0800a658 <__swbuf_r>:
 800a658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a65a:	460e      	mov	r6, r1
 800a65c:	4614      	mov	r4, r2
 800a65e:	4605      	mov	r5, r0
 800a660:	b118      	cbz	r0, 800a66a <__swbuf_r+0x12>
 800a662:	6983      	ldr	r3, [r0, #24]
 800a664:	b90b      	cbnz	r3, 800a66a <__swbuf_r+0x12>
 800a666:	f000 f9d1 	bl	800aa0c <__sinit>
 800a66a:	4b21      	ldr	r3, [pc, #132]	; (800a6f0 <__swbuf_r+0x98>)
 800a66c:	429c      	cmp	r4, r3
 800a66e:	d12b      	bne.n	800a6c8 <__swbuf_r+0x70>
 800a670:	686c      	ldr	r4, [r5, #4]
 800a672:	69a3      	ldr	r3, [r4, #24]
 800a674:	60a3      	str	r3, [r4, #8]
 800a676:	89a3      	ldrh	r3, [r4, #12]
 800a678:	071a      	lsls	r2, r3, #28
 800a67a:	d52f      	bpl.n	800a6dc <__swbuf_r+0x84>
 800a67c:	6923      	ldr	r3, [r4, #16]
 800a67e:	b36b      	cbz	r3, 800a6dc <__swbuf_r+0x84>
 800a680:	6923      	ldr	r3, [r4, #16]
 800a682:	6820      	ldr	r0, [r4, #0]
 800a684:	1ac0      	subs	r0, r0, r3
 800a686:	6963      	ldr	r3, [r4, #20]
 800a688:	b2f6      	uxtb	r6, r6
 800a68a:	4283      	cmp	r3, r0
 800a68c:	4637      	mov	r7, r6
 800a68e:	dc04      	bgt.n	800a69a <__swbuf_r+0x42>
 800a690:	4621      	mov	r1, r4
 800a692:	4628      	mov	r0, r5
 800a694:	f000 f926 	bl	800a8e4 <_fflush_r>
 800a698:	bb30      	cbnz	r0, 800a6e8 <__swbuf_r+0x90>
 800a69a:	68a3      	ldr	r3, [r4, #8]
 800a69c:	3b01      	subs	r3, #1
 800a69e:	60a3      	str	r3, [r4, #8]
 800a6a0:	6823      	ldr	r3, [r4, #0]
 800a6a2:	1c5a      	adds	r2, r3, #1
 800a6a4:	6022      	str	r2, [r4, #0]
 800a6a6:	701e      	strb	r6, [r3, #0]
 800a6a8:	6963      	ldr	r3, [r4, #20]
 800a6aa:	3001      	adds	r0, #1
 800a6ac:	4283      	cmp	r3, r0
 800a6ae:	d004      	beq.n	800a6ba <__swbuf_r+0x62>
 800a6b0:	89a3      	ldrh	r3, [r4, #12]
 800a6b2:	07db      	lsls	r3, r3, #31
 800a6b4:	d506      	bpl.n	800a6c4 <__swbuf_r+0x6c>
 800a6b6:	2e0a      	cmp	r6, #10
 800a6b8:	d104      	bne.n	800a6c4 <__swbuf_r+0x6c>
 800a6ba:	4621      	mov	r1, r4
 800a6bc:	4628      	mov	r0, r5
 800a6be:	f000 f911 	bl	800a8e4 <_fflush_r>
 800a6c2:	b988      	cbnz	r0, 800a6e8 <__swbuf_r+0x90>
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6c8:	4b0a      	ldr	r3, [pc, #40]	; (800a6f4 <__swbuf_r+0x9c>)
 800a6ca:	429c      	cmp	r4, r3
 800a6cc:	d101      	bne.n	800a6d2 <__swbuf_r+0x7a>
 800a6ce:	68ac      	ldr	r4, [r5, #8]
 800a6d0:	e7cf      	b.n	800a672 <__swbuf_r+0x1a>
 800a6d2:	4b09      	ldr	r3, [pc, #36]	; (800a6f8 <__swbuf_r+0xa0>)
 800a6d4:	429c      	cmp	r4, r3
 800a6d6:	bf08      	it	eq
 800a6d8:	68ec      	ldreq	r4, [r5, #12]
 800a6da:	e7ca      	b.n	800a672 <__swbuf_r+0x1a>
 800a6dc:	4621      	mov	r1, r4
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f000 f80c 	bl	800a6fc <__swsetup_r>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d0cb      	beq.n	800a680 <__swbuf_r+0x28>
 800a6e8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6ec:	e7ea      	b.n	800a6c4 <__swbuf_r+0x6c>
 800a6ee:	bf00      	nop
 800a6f0:	0800b674 	.word	0x0800b674
 800a6f4:	0800b694 	.word	0x0800b694
 800a6f8:	0800b654 	.word	0x0800b654

0800a6fc <__swsetup_r>:
 800a6fc:	4b32      	ldr	r3, [pc, #200]	; (800a7c8 <__swsetup_r+0xcc>)
 800a6fe:	b570      	push	{r4, r5, r6, lr}
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	4606      	mov	r6, r0
 800a704:	460c      	mov	r4, r1
 800a706:	b125      	cbz	r5, 800a712 <__swsetup_r+0x16>
 800a708:	69ab      	ldr	r3, [r5, #24]
 800a70a:	b913      	cbnz	r3, 800a712 <__swsetup_r+0x16>
 800a70c:	4628      	mov	r0, r5
 800a70e:	f000 f97d 	bl	800aa0c <__sinit>
 800a712:	4b2e      	ldr	r3, [pc, #184]	; (800a7cc <__swsetup_r+0xd0>)
 800a714:	429c      	cmp	r4, r3
 800a716:	d10f      	bne.n	800a738 <__swsetup_r+0x3c>
 800a718:	686c      	ldr	r4, [r5, #4]
 800a71a:	89a3      	ldrh	r3, [r4, #12]
 800a71c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a720:	0719      	lsls	r1, r3, #28
 800a722:	d42c      	bmi.n	800a77e <__swsetup_r+0x82>
 800a724:	06dd      	lsls	r5, r3, #27
 800a726:	d411      	bmi.n	800a74c <__swsetup_r+0x50>
 800a728:	2309      	movs	r3, #9
 800a72a:	6033      	str	r3, [r6, #0]
 800a72c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a730:	81a3      	strh	r3, [r4, #12]
 800a732:	f04f 30ff 	mov.w	r0, #4294967295
 800a736:	e03e      	b.n	800a7b6 <__swsetup_r+0xba>
 800a738:	4b25      	ldr	r3, [pc, #148]	; (800a7d0 <__swsetup_r+0xd4>)
 800a73a:	429c      	cmp	r4, r3
 800a73c:	d101      	bne.n	800a742 <__swsetup_r+0x46>
 800a73e:	68ac      	ldr	r4, [r5, #8]
 800a740:	e7eb      	b.n	800a71a <__swsetup_r+0x1e>
 800a742:	4b24      	ldr	r3, [pc, #144]	; (800a7d4 <__swsetup_r+0xd8>)
 800a744:	429c      	cmp	r4, r3
 800a746:	bf08      	it	eq
 800a748:	68ec      	ldreq	r4, [r5, #12]
 800a74a:	e7e6      	b.n	800a71a <__swsetup_r+0x1e>
 800a74c:	0758      	lsls	r0, r3, #29
 800a74e:	d512      	bpl.n	800a776 <__swsetup_r+0x7a>
 800a750:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a752:	b141      	cbz	r1, 800a766 <__swsetup_r+0x6a>
 800a754:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a758:	4299      	cmp	r1, r3
 800a75a:	d002      	beq.n	800a762 <__swsetup_r+0x66>
 800a75c:	4630      	mov	r0, r6
 800a75e:	f000 fa5b 	bl	800ac18 <_free_r>
 800a762:	2300      	movs	r3, #0
 800a764:	6363      	str	r3, [r4, #52]	; 0x34
 800a766:	89a3      	ldrh	r3, [r4, #12]
 800a768:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a76c:	81a3      	strh	r3, [r4, #12]
 800a76e:	2300      	movs	r3, #0
 800a770:	6063      	str	r3, [r4, #4]
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	6023      	str	r3, [r4, #0]
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f043 0308 	orr.w	r3, r3, #8
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	6923      	ldr	r3, [r4, #16]
 800a780:	b94b      	cbnz	r3, 800a796 <__swsetup_r+0x9a>
 800a782:	89a3      	ldrh	r3, [r4, #12]
 800a784:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a78c:	d003      	beq.n	800a796 <__swsetup_r+0x9a>
 800a78e:	4621      	mov	r1, r4
 800a790:	4630      	mov	r0, r6
 800a792:	f000 fa01 	bl	800ab98 <__smakebuf_r>
 800a796:	89a0      	ldrh	r0, [r4, #12]
 800a798:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a79c:	f010 0301 	ands.w	r3, r0, #1
 800a7a0:	d00a      	beq.n	800a7b8 <__swsetup_r+0xbc>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	60a3      	str	r3, [r4, #8]
 800a7a6:	6963      	ldr	r3, [r4, #20]
 800a7a8:	425b      	negs	r3, r3
 800a7aa:	61a3      	str	r3, [r4, #24]
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	b943      	cbnz	r3, 800a7c2 <__swsetup_r+0xc6>
 800a7b0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7b4:	d1ba      	bne.n	800a72c <__swsetup_r+0x30>
 800a7b6:	bd70      	pop	{r4, r5, r6, pc}
 800a7b8:	0781      	lsls	r1, r0, #30
 800a7ba:	bf58      	it	pl
 800a7bc:	6963      	ldrpl	r3, [r4, #20]
 800a7be:	60a3      	str	r3, [r4, #8]
 800a7c0:	e7f4      	b.n	800a7ac <__swsetup_r+0xb0>
 800a7c2:	2000      	movs	r0, #0
 800a7c4:	e7f7      	b.n	800a7b6 <__swsetup_r+0xba>
 800a7c6:	bf00      	nop
 800a7c8:	20000014 	.word	0x20000014
 800a7cc:	0800b674 	.word	0x0800b674
 800a7d0:	0800b694 	.word	0x0800b694
 800a7d4:	0800b654 	.word	0x0800b654

0800a7d8 <__sflush_r>:
 800a7d8:	898a      	ldrh	r2, [r1, #12]
 800a7da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7de:	4605      	mov	r5, r0
 800a7e0:	0710      	lsls	r0, r2, #28
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	d458      	bmi.n	800a898 <__sflush_r+0xc0>
 800a7e6:	684b      	ldr	r3, [r1, #4]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	dc05      	bgt.n	800a7f8 <__sflush_r+0x20>
 800a7ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	dc02      	bgt.n	800a7f8 <__sflush_r+0x20>
 800a7f2:	2000      	movs	r0, #0
 800a7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a7f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a7fa:	2e00      	cmp	r6, #0
 800a7fc:	d0f9      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a7fe:	2300      	movs	r3, #0
 800a800:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a804:	682f      	ldr	r7, [r5, #0]
 800a806:	602b      	str	r3, [r5, #0]
 800a808:	d032      	beq.n	800a870 <__sflush_r+0x98>
 800a80a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a80c:	89a3      	ldrh	r3, [r4, #12]
 800a80e:	075a      	lsls	r2, r3, #29
 800a810:	d505      	bpl.n	800a81e <__sflush_r+0x46>
 800a812:	6863      	ldr	r3, [r4, #4]
 800a814:	1ac0      	subs	r0, r0, r3
 800a816:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a818:	b10b      	cbz	r3, 800a81e <__sflush_r+0x46>
 800a81a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a81c:	1ac0      	subs	r0, r0, r3
 800a81e:	2300      	movs	r3, #0
 800a820:	4602      	mov	r2, r0
 800a822:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a824:	6a21      	ldr	r1, [r4, #32]
 800a826:	4628      	mov	r0, r5
 800a828:	47b0      	blx	r6
 800a82a:	1c43      	adds	r3, r0, #1
 800a82c:	89a3      	ldrh	r3, [r4, #12]
 800a82e:	d106      	bne.n	800a83e <__sflush_r+0x66>
 800a830:	6829      	ldr	r1, [r5, #0]
 800a832:	291d      	cmp	r1, #29
 800a834:	d82c      	bhi.n	800a890 <__sflush_r+0xb8>
 800a836:	4a2a      	ldr	r2, [pc, #168]	; (800a8e0 <__sflush_r+0x108>)
 800a838:	40ca      	lsrs	r2, r1
 800a83a:	07d6      	lsls	r6, r2, #31
 800a83c:	d528      	bpl.n	800a890 <__sflush_r+0xb8>
 800a83e:	2200      	movs	r2, #0
 800a840:	6062      	str	r2, [r4, #4]
 800a842:	04d9      	lsls	r1, r3, #19
 800a844:	6922      	ldr	r2, [r4, #16]
 800a846:	6022      	str	r2, [r4, #0]
 800a848:	d504      	bpl.n	800a854 <__sflush_r+0x7c>
 800a84a:	1c42      	adds	r2, r0, #1
 800a84c:	d101      	bne.n	800a852 <__sflush_r+0x7a>
 800a84e:	682b      	ldr	r3, [r5, #0]
 800a850:	b903      	cbnz	r3, 800a854 <__sflush_r+0x7c>
 800a852:	6560      	str	r0, [r4, #84]	; 0x54
 800a854:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a856:	602f      	str	r7, [r5, #0]
 800a858:	2900      	cmp	r1, #0
 800a85a:	d0ca      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a85c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a860:	4299      	cmp	r1, r3
 800a862:	d002      	beq.n	800a86a <__sflush_r+0x92>
 800a864:	4628      	mov	r0, r5
 800a866:	f000 f9d7 	bl	800ac18 <_free_r>
 800a86a:	2000      	movs	r0, #0
 800a86c:	6360      	str	r0, [r4, #52]	; 0x34
 800a86e:	e7c1      	b.n	800a7f4 <__sflush_r+0x1c>
 800a870:	6a21      	ldr	r1, [r4, #32]
 800a872:	2301      	movs	r3, #1
 800a874:	4628      	mov	r0, r5
 800a876:	47b0      	blx	r6
 800a878:	1c41      	adds	r1, r0, #1
 800a87a:	d1c7      	bne.n	800a80c <__sflush_r+0x34>
 800a87c:	682b      	ldr	r3, [r5, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d0c4      	beq.n	800a80c <__sflush_r+0x34>
 800a882:	2b1d      	cmp	r3, #29
 800a884:	d001      	beq.n	800a88a <__sflush_r+0xb2>
 800a886:	2b16      	cmp	r3, #22
 800a888:	d101      	bne.n	800a88e <__sflush_r+0xb6>
 800a88a:	602f      	str	r7, [r5, #0]
 800a88c:	e7b1      	b.n	800a7f2 <__sflush_r+0x1a>
 800a88e:	89a3      	ldrh	r3, [r4, #12]
 800a890:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a894:	81a3      	strh	r3, [r4, #12]
 800a896:	e7ad      	b.n	800a7f4 <__sflush_r+0x1c>
 800a898:	690f      	ldr	r7, [r1, #16]
 800a89a:	2f00      	cmp	r7, #0
 800a89c:	d0a9      	beq.n	800a7f2 <__sflush_r+0x1a>
 800a89e:	0793      	lsls	r3, r2, #30
 800a8a0:	680e      	ldr	r6, [r1, #0]
 800a8a2:	bf08      	it	eq
 800a8a4:	694b      	ldreq	r3, [r1, #20]
 800a8a6:	600f      	str	r7, [r1, #0]
 800a8a8:	bf18      	it	ne
 800a8aa:	2300      	movne	r3, #0
 800a8ac:	eba6 0807 	sub.w	r8, r6, r7
 800a8b0:	608b      	str	r3, [r1, #8]
 800a8b2:	f1b8 0f00 	cmp.w	r8, #0
 800a8b6:	dd9c      	ble.n	800a7f2 <__sflush_r+0x1a>
 800a8b8:	6a21      	ldr	r1, [r4, #32]
 800a8ba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8bc:	4643      	mov	r3, r8
 800a8be:	463a      	mov	r2, r7
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	47b0      	blx	r6
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	dc06      	bgt.n	800a8d6 <__sflush_r+0xfe>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8ce:	81a3      	strh	r3, [r4, #12]
 800a8d0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8d4:	e78e      	b.n	800a7f4 <__sflush_r+0x1c>
 800a8d6:	4407      	add	r7, r0
 800a8d8:	eba8 0800 	sub.w	r8, r8, r0
 800a8dc:	e7e9      	b.n	800a8b2 <__sflush_r+0xda>
 800a8de:	bf00      	nop
 800a8e0:	20400001 	.word	0x20400001

0800a8e4 <_fflush_r>:
 800a8e4:	b538      	push	{r3, r4, r5, lr}
 800a8e6:	690b      	ldr	r3, [r1, #16]
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	460c      	mov	r4, r1
 800a8ec:	b913      	cbnz	r3, 800a8f4 <_fflush_r+0x10>
 800a8ee:	2500      	movs	r5, #0
 800a8f0:	4628      	mov	r0, r5
 800a8f2:	bd38      	pop	{r3, r4, r5, pc}
 800a8f4:	b118      	cbz	r0, 800a8fe <_fflush_r+0x1a>
 800a8f6:	6983      	ldr	r3, [r0, #24]
 800a8f8:	b90b      	cbnz	r3, 800a8fe <_fflush_r+0x1a>
 800a8fa:	f000 f887 	bl	800aa0c <__sinit>
 800a8fe:	4b14      	ldr	r3, [pc, #80]	; (800a950 <_fflush_r+0x6c>)
 800a900:	429c      	cmp	r4, r3
 800a902:	d11b      	bne.n	800a93c <_fflush_r+0x58>
 800a904:	686c      	ldr	r4, [r5, #4]
 800a906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0ef      	beq.n	800a8ee <_fflush_r+0xa>
 800a90e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a910:	07d0      	lsls	r0, r2, #31
 800a912:	d404      	bmi.n	800a91e <_fflush_r+0x3a>
 800a914:	0599      	lsls	r1, r3, #22
 800a916:	d402      	bmi.n	800a91e <_fflush_r+0x3a>
 800a918:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a91a:	f000 f915 	bl	800ab48 <__retarget_lock_acquire_recursive>
 800a91e:	4628      	mov	r0, r5
 800a920:	4621      	mov	r1, r4
 800a922:	f7ff ff59 	bl	800a7d8 <__sflush_r>
 800a926:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a928:	07da      	lsls	r2, r3, #31
 800a92a:	4605      	mov	r5, r0
 800a92c:	d4e0      	bmi.n	800a8f0 <_fflush_r+0xc>
 800a92e:	89a3      	ldrh	r3, [r4, #12]
 800a930:	059b      	lsls	r3, r3, #22
 800a932:	d4dd      	bmi.n	800a8f0 <_fflush_r+0xc>
 800a934:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a936:	f000 f908 	bl	800ab4a <__retarget_lock_release_recursive>
 800a93a:	e7d9      	b.n	800a8f0 <_fflush_r+0xc>
 800a93c:	4b05      	ldr	r3, [pc, #20]	; (800a954 <_fflush_r+0x70>)
 800a93e:	429c      	cmp	r4, r3
 800a940:	d101      	bne.n	800a946 <_fflush_r+0x62>
 800a942:	68ac      	ldr	r4, [r5, #8]
 800a944:	e7df      	b.n	800a906 <_fflush_r+0x22>
 800a946:	4b04      	ldr	r3, [pc, #16]	; (800a958 <_fflush_r+0x74>)
 800a948:	429c      	cmp	r4, r3
 800a94a:	bf08      	it	eq
 800a94c:	68ec      	ldreq	r4, [r5, #12]
 800a94e:	e7da      	b.n	800a906 <_fflush_r+0x22>
 800a950:	0800b674 	.word	0x0800b674
 800a954:	0800b694 	.word	0x0800b694
 800a958:	0800b654 	.word	0x0800b654

0800a95c <std>:
 800a95c:	2300      	movs	r3, #0
 800a95e:	b510      	push	{r4, lr}
 800a960:	4604      	mov	r4, r0
 800a962:	e9c0 3300 	strd	r3, r3, [r0]
 800a966:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a96a:	6083      	str	r3, [r0, #8]
 800a96c:	8181      	strh	r1, [r0, #12]
 800a96e:	6643      	str	r3, [r0, #100]	; 0x64
 800a970:	81c2      	strh	r2, [r0, #14]
 800a972:	6183      	str	r3, [r0, #24]
 800a974:	4619      	mov	r1, r3
 800a976:	2208      	movs	r2, #8
 800a978:	305c      	adds	r0, #92	; 0x5c
 800a97a:	f7ff fe37 	bl	800a5ec <memset>
 800a97e:	4b05      	ldr	r3, [pc, #20]	; (800a994 <std+0x38>)
 800a980:	6263      	str	r3, [r4, #36]	; 0x24
 800a982:	4b05      	ldr	r3, [pc, #20]	; (800a998 <std+0x3c>)
 800a984:	62a3      	str	r3, [r4, #40]	; 0x28
 800a986:	4b05      	ldr	r3, [pc, #20]	; (800a99c <std+0x40>)
 800a988:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a98a:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <std+0x44>)
 800a98c:	6224      	str	r4, [r4, #32]
 800a98e:	6323      	str	r3, [r4, #48]	; 0x30
 800a990:	bd10      	pop	{r4, pc}
 800a992:	bf00      	nop
 800a994:	0800b465 	.word	0x0800b465
 800a998:	0800b487 	.word	0x0800b487
 800a99c:	0800b4bf 	.word	0x0800b4bf
 800a9a0:	0800b4e3 	.word	0x0800b4e3

0800a9a4 <_cleanup_r>:
 800a9a4:	4901      	ldr	r1, [pc, #4]	; (800a9ac <_cleanup_r+0x8>)
 800a9a6:	f000 b8af 	b.w	800ab08 <_fwalk_reent>
 800a9aa:	bf00      	nop
 800a9ac:	0800a8e5 	.word	0x0800a8e5

0800a9b0 <__sfmoreglue>:
 800a9b0:	b570      	push	{r4, r5, r6, lr}
 800a9b2:	2268      	movs	r2, #104	; 0x68
 800a9b4:	1e4d      	subs	r5, r1, #1
 800a9b6:	4355      	muls	r5, r2
 800a9b8:	460e      	mov	r6, r1
 800a9ba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9be:	f000 f997 	bl	800acf0 <_malloc_r>
 800a9c2:	4604      	mov	r4, r0
 800a9c4:	b140      	cbz	r0, 800a9d8 <__sfmoreglue+0x28>
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9cc:	300c      	adds	r0, #12
 800a9ce:	60a0      	str	r0, [r4, #8]
 800a9d0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9d4:	f7ff fe0a 	bl	800a5ec <memset>
 800a9d8:	4620      	mov	r0, r4
 800a9da:	bd70      	pop	{r4, r5, r6, pc}

0800a9dc <__sfp_lock_acquire>:
 800a9dc:	4801      	ldr	r0, [pc, #4]	; (800a9e4 <__sfp_lock_acquire+0x8>)
 800a9de:	f000 b8b3 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800a9e2:	bf00      	nop
 800a9e4:	2000058d 	.word	0x2000058d

0800a9e8 <__sfp_lock_release>:
 800a9e8:	4801      	ldr	r0, [pc, #4]	; (800a9f0 <__sfp_lock_release+0x8>)
 800a9ea:	f000 b8ae 	b.w	800ab4a <__retarget_lock_release_recursive>
 800a9ee:	bf00      	nop
 800a9f0:	2000058d 	.word	0x2000058d

0800a9f4 <__sinit_lock_acquire>:
 800a9f4:	4801      	ldr	r0, [pc, #4]	; (800a9fc <__sinit_lock_acquire+0x8>)
 800a9f6:	f000 b8a7 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800a9fa:	bf00      	nop
 800a9fc:	2000058e 	.word	0x2000058e

0800aa00 <__sinit_lock_release>:
 800aa00:	4801      	ldr	r0, [pc, #4]	; (800aa08 <__sinit_lock_release+0x8>)
 800aa02:	f000 b8a2 	b.w	800ab4a <__retarget_lock_release_recursive>
 800aa06:	bf00      	nop
 800aa08:	2000058e 	.word	0x2000058e

0800aa0c <__sinit>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	4604      	mov	r4, r0
 800aa10:	f7ff fff0 	bl	800a9f4 <__sinit_lock_acquire>
 800aa14:	69a3      	ldr	r3, [r4, #24]
 800aa16:	b11b      	cbz	r3, 800aa20 <__sinit+0x14>
 800aa18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa1c:	f7ff bff0 	b.w	800aa00 <__sinit_lock_release>
 800aa20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa24:	6523      	str	r3, [r4, #80]	; 0x50
 800aa26:	4b13      	ldr	r3, [pc, #76]	; (800aa74 <__sinit+0x68>)
 800aa28:	4a13      	ldr	r2, [pc, #76]	; (800aa78 <__sinit+0x6c>)
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa2e:	42a3      	cmp	r3, r4
 800aa30:	bf04      	itt	eq
 800aa32:	2301      	moveq	r3, #1
 800aa34:	61a3      	streq	r3, [r4, #24]
 800aa36:	4620      	mov	r0, r4
 800aa38:	f000 f820 	bl	800aa7c <__sfp>
 800aa3c:	6060      	str	r0, [r4, #4]
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f000 f81c 	bl	800aa7c <__sfp>
 800aa44:	60a0      	str	r0, [r4, #8]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 f818 	bl	800aa7c <__sfp>
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	60e0      	str	r0, [r4, #12]
 800aa50:	2104      	movs	r1, #4
 800aa52:	6860      	ldr	r0, [r4, #4]
 800aa54:	f7ff ff82 	bl	800a95c <std>
 800aa58:	68a0      	ldr	r0, [r4, #8]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	2109      	movs	r1, #9
 800aa5e:	f7ff ff7d 	bl	800a95c <std>
 800aa62:	68e0      	ldr	r0, [r4, #12]
 800aa64:	2202      	movs	r2, #2
 800aa66:	2112      	movs	r1, #18
 800aa68:	f7ff ff78 	bl	800a95c <std>
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	61a3      	str	r3, [r4, #24]
 800aa70:	e7d2      	b.n	800aa18 <__sinit+0xc>
 800aa72:	bf00      	nop
 800aa74:	0800b650 	.word	0x0800b650
 800aa78:	0800a9a5 	.word	0x0800a9a5

0800aa7c <__sfp>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	4607      	mov	r7, r0
 800aa80:	f7ff ffac 	bl	800a9dc <__sfp_lock_acquire>
 800aa84:	4b1e      	ldr	r3, [pc, #120]	; (800ab00 <__sfp+0x84>)
 800aa86:	681e      	ldr	r6, [r3, #0]
 800aa88:	69b3      	ldr	r3, [r6, #24]
 800aa8a:	b913      	cbnz	r3, 800aa92 <__sfp+0x16>
 800aa8c:	4630      	mov	r0, r6
 800aa8e:	f7ff ffbd 	bl	800aa0c <__sinit>
 800aa92:	3648      	adds	r6, #72	; 0x48
 800aa94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aa98:	3b01      	subs	r3, #1
 800aa9a:	d503      	bpl.n	800aaa4 <__sfp+0x28>
 800aa9c:	6833      	ldr	r3, [r6, #0]
 800aa9e:	b30b      	cbz	r3, 800aae4 <__sfp+0x68>
 800aaa0:	6836      	ldr	r6, [r6, #0]
 800aaa2:	e7f7      	b.n	800aa94 <__sfp+0x18>
 800aaa4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aaa8:	b9d5      	cbnz	r5, 800aae0 <__sfp+0x64>
 800aaaa:	4b16      	ldr	r3, [pc, #88]	; (800ab04 <__sfp+0x88>)
 800aaac:	60e3      	str	r3, [r4, #12]
 800aaae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aab2:	6665      	str	r5, [r4, #100]	; 0x64
 800aab4:	f000 f847 	bl	800ab46 <__retarget_lock_init_recursive>
 800aab8:	f7ff ff96 	bl	800a9e8 <__sfp_lock_release>
 800aabc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aac0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aac4:	6025      	str	r5, [r4, #0]
 800aac6:	61a5      	str	r5, [r4, #24]
 800aac8:	2208      	movs	r2, #8
 800aaca:	4629      	mov	r1, r5
 800aacc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aad0:	f7ff fd8c 	bl	800a5ec <memset>
 800aad4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aad8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aadc:	4620      	mov	r0, r4
 800aade:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae0:	3468      	adds	r4, #104	; 0x68
 800aae2:	e7d9      	b.n	800aa98 <__sfp+0x1c>
 800aae4:	2104      	movs	r1, #4
 800aae6:	4638      	mov	r0, r7
 800aae8:	f7ff ff62 	bl	800a9b0 <__sfmoreglue>
 800aaec:	4604      	mov	r4, r0
 800aaee:	6030      	str	r0, [r6, #0]
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	d1d5      	bne.n	800aaa0 <__sfp+0x24>
 800aaf4:	f7ff ff78 	bl	800a9e8 <__sfp_lock_release>
 800aaf8:	230c      	movs	r3, #12
 800aafa:	603b      	str	r3, [r7, #0]
 800aafc:	e7ee      	b.n	800aadc <__sfp+0x60>
 800aafe:	bf00      	nop
 800ab00:	0800b650 	.word	0x0800b650
 800ab04:	ffff0001 	.word	0xffff0001

0800ab08 <_fwalk_reent>:
 800ab08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab0c:	4606      	mov	r6, r0
 800ab0e:	4688      	mov	r8, r1
 800ab10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab14:	2700      	movs	r7, #0
 800ab16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab1a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab1e:	d505      	bpl.n	800ab2c <_fwalk_reent+0x24>
 800ab20:	6824      	ldr	r4, [r4, #0]
 800ab22:	2c00      	cmp	r4, #0
 800ab24:	d1f7      	bne.n	800ab16 <_fwalk_reent+0xe>
 800ab26:	4638      	mov	r0, r7
 800ab28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab2c:	89ab      	ldrh	r3, [r5, #12]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	d907      	bls.n	800ab42 <_fwalk_reent+0x3a>
 800ab32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab36:	3301      	adds	r3, #1
 800ab38:	d003      	beq.n	800ab42 <_fwalk_reent+0x3a>
 800ab3a:	4629      	mov	r1, r5
 800ab3c:	4630      	mov	r0, r6
 800ab3e:	47c0      	blx	r8
 800ab40:	4307      	orrs	r7, r0
 800ab42:	3568      	adds	r5, #104	; 0x68
 800ab44:	e7e9      	b.n	800ab1a <_fwalk_reent+0x12>

0800ab46 <__retarget_lock_init_recursive>:
 800ab46:	4770      	bx	lr

0800ab48 <__retarget_lock_acquire_recursive>:
 800ab48:	4770      	bx	lr

0800ab4a <__retarget_lock_release_recursive>:
 800ab4a:	4770      	bx	lr

0800ab4c <__swhatbuf_r>:
 800ab4c:	b570      	push	{r4, r5, r6, lr}
 800ab4e:	460e      	mov	r6, r1
 800ab50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab54:	2900      	cmp	r1, #0
 800ab56:	b096      	sub	sp, #88	; 0x58
 800ab58:	4614      	mov	r4, r2
 800ab5a:	461d      	mov	r5, r3
 800ab5c:	da08      	bge.n	800ab70 <__swhatbuf_r+0x24>
 800ab5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab62:	2200      	movs	r2, #0
 800ab64:	602a      	str	r2, [r5, #0]
 800ab66:	061a      	lsls	r2, r3, #24
 800ab68:	d410      	bmi.n	800ab8c <__swhatbuf_r+0x40>
 800ab6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab6e:	e00e      	b.n	800ab8e <__swhatbuf_r+0x42>
 800ab70:	466a      	mov	r2, sp
 800ab72:	f000 fcdd 	bl	800b530 <_fstat_r>
 800ab76:	2800      	cmp	r0, #0
 800ab78:	dbf1      	blt.n	800ab5e <__swhatbuf_r+0x12>
 800ab7a:	9a01      	ldr	r2, [sp, #4]
 800ab7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab84:	425a      	negs	r2, r3
 800ab86:	415a      	adcs	r2, r3
 800ab88:	602a      	str	r2, [r5, #0]
 800ab8a:	e7ee      	b.n	800ab6a <__swhatbuf_r+0x1e>
 800ab8c:	2340      	movs	r3, #64	; 0x40
 800ab8e:	2000      	movs	r0, #0
 800ab90:	6023      	str	r3, [r4, #0]
 800ab92:	b016      	add	sp, #88	; 0x58
 800ab94:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ab98 <__smakebuf_r>:
 800ab98:	898b      	ldrh	r3, [r1, #12]
 800ab9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ab9c:	079d      	lsls	r5, r3, #30
 800ab9e:	4606      	mov	r6, r0
 800aba0:	460c      	mov	r4, r1
 800aba2:	d507      	bpl.n	800abb4 <__smakebuf_r+0x1c>
 800aba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aba8:	6023      	str	r3, [r4, #0]
 800abaa:	6123      	str	r3, [r4, #16]
 800abac:	2301      	movs	r3, #1
 800abae:	6163      	str	r3, [r4, #20]
 800abb0:	b002      	add	sp, #8
 800abb2:	bd70      	pop	{r4, r5, r6, pc}
 800abb4:	ab01      	add	r3, sp, #4
 800abb6:	466a      	mov	r2, sp
 800abb8:	f7ff ffc8 	bl	800ab4c <__swhatbuf_r>
 800abbc:	9900      	ldr	r1, [sp, #0]
 800abbe:	4605      	mov	r5, r0
 800abc0:	4630      	mov	r0, r6
 800abc2:	f000 f895 	bl	800acf0 <_malloc_r>
 800abc6:	b948      	cbnz	r0, 800abdc <__smakebuf_r+0x44>
 800abc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abcc:	059a      	lsls	r2, r3, #22
 800abce:	d4ef      	bmi.n	800abb0 <__smakebuf_r+0x18>
 800abd0:	f023 0303 	bic.w	r3, r3, #3
 800abd4:	f043 0302 	orr.w	r3, r3, #2
 800abd8:	81a3      	strh	r3, [r4, #12]
 800abda:	e7e3      	b.n	800aba4 <__smakebuf_r+0xc>
 800abdc:	4b0d      	ldr	r3, [pc, #52]	; (800ac14 <__smakebuf_r+0x7c>)
 800abde:	62b3      	str	r3, [r6, #40]	; 0x28
 800abe0:	89a3      	ldrh	r3, [r4, #12]
 800abe2:	6020      	str	r0, [r4, #0]
 800abe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abe8:	81a3      	strh	r3, [r4, #12]
 800abea:	9b00      	ldr	r3, [sp, #0]
 800abec:	6163      	str	r3, [r4, #20]
 800abee:	9b01      	ldr	r3, [sp, #4]
 800abf0:	6120      	str	r0, [r4, #16]
 800abf2:	b15b      	cbz	r3, 800ac0c <__smakebuf_r+0x74>
 800abf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 fcab 	bl	800b554 <_isatty_r>
 800abfe:	b128      	cbz	r0, 800ac0c <__smakebuf_r+0x74>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	89a0      	ldrh	r0, [r4, #12]
 800ac0e:	4305      	orrs	r5, r0
 800ac10:	81a5      	strh	r5, [r4, #12]
 800ac12:	e7cd      	b.n	800abb0 <__smakebuf_r+0x18>
 800ac14:	0800a9a5 	.word	0x0800a9a5

0800ac18 <_free_r>:
 800ac18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac1a:	2900      	cmp	r1, #0
 800ac1c:	d044      	beq.n	800aca8 <_free_r+0x90>
 800ac1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac22:	9001      	str	r0, [sp, #4]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f1a1 0404 	sub.w	r4, r1, #4
 800ac2a:	bfb8      	it	lt
 800ac2c:	18e4      	addlt	r4, r4, r3
 800ac2e:	f000 fcb3 	bl	800b598 <__malloc_lock>
 800ac32:	4a1e      	ldr	r2, [pc, #120]	; (800acac <_free_r+0x94>)
 800ac34:	9801      	ldr	r0, [sp, #4]
 800ac36:	6813      	ldr	r3, [r2, #0]
 800ac38:	b933      	cbnz	r3, 800ac48 <_free_r+0x30>
 800ac3a:	6063      	str	r3, [r4, #4]
 800ac3c:	6014      	str	r4, [r2, #0]
 800ac3e:	b003      	add	sp, #12
 800ac40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac44:	f000 bcae 	b.w	800b5a4 <__malloc_unlock>
 800ac48:	42a3      	cmp	r3, r4
 800ac4a:	d908      	bls.n	800ac5e <_free_r+0x46>
 800ac4c:	6825      	ldr	r5, [r4, #0]
 800ac4e:	1961      	adds	r1, r4, r5
 800ac50:	428b      	cmp	r3, r1
 800ac52:	bf01      	itttt	eq
 800ac54:	6819      	ldreq	r1, [r3, #0]
 800ac56:	685b      	ldreq	r3, [r3, #4]
 800ac58:	1949      	addeq	r1, r1, r5
 800ac5a:	6021      	streq	r1, [r4, #0]
 800ac5c:	e7ed      	b.n	800ac3a <_free_r+0x22>
 800ac5e:	461a      	mov	r2, r3
 800ac60:	685b      	ldr	r3, [r3, #4]
 800ac62:	b10b      	cbz	r3, 800ac68 <_free_r+0x50>
 800ac64:	42a3      	cmp	r3, r4
 800ac66:	d9fa      	bls.n	800ac5e <_free_r+0x46>
 800ac68:	6811      	ldr	r1, [r2, #0]
 800ac6a:	1855      	adds	r5, r2, r1
 800ac6c:	42a5      	cmp	r5, r4
 800ac6e:	d10b      	bne.n	800ac88 <_free_r+0x70>
 800ac70:	6824      	ldr	r4, [r4, #0]
 800ac72:	4421      	add	r1, r4
 800ac74:	1854      	adds	r4, r2, r1
 800ac76:	42a3      	cmp	r3, r4
 800ac78:	6011      	str	r1, [r2, #0]
 800ac7a:	d1e0      	bne.n	800ac3e <_free_r+0x26>
 800ac7c:	681c      	ldr	r4, [r3, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	6053      	str	r3, [r2, #4]
 800ac82:	4421      	add	r1, r4
 800ac84:	6011      	str	r1, [r2, #0]
 800ac86:	e7da      	b.n	800ac3e <_free_r+0x26>
 800ac88:	d902      	bls.n	800ac90 <_free_r+0x78>
 800ac8a:	230c      	movs	r3, #12
 800ac8c:	6003      	str	r3, [r0, #0]
 800ac8e:	e7d6      	b.n	800ac3e <_free_r+0x26>
 800ac90:	6825      	ldr	r5, [r4, #0]
 800ac92:	1961      	adds	r1, r4, r5
 800ac94:	428b      	cmp	r3, r1
 800ac96:	bf04      	itt	eq
 800ac98:	6819      	ldreq	r1, [r3, #0]
 800ac9a:	685b      	ldreq	r3, [r3, #4]
 800ac9c:	6063      	str	r3, [r4, #4]
 800ac9e:	bf04      	itt	eq
 800aca0:	1949      	addeq	r1, r1, r5
 800aca2:	6021      	streq	r1, [r4, #0]
 800aca4:	6054      	str	r4, [r2, #4]
 800aca6:	e7ca      	b.n	800ac3e <_free_r+0x26>
 800aca8:	b003      	add	sp, #12
 800acaa:	bd30      	pop	{r4, r5, pc}
 800acac:	20000590 	.word	0x20000590

0800acb0 <sbrk_aligned>:
 800acb0:	b570      	push	{r4, r5, r6, lr}
 800acb2:	4e0e      	ldr	r6, [pc, #56]	; (800acec <sbrk_aligned+0x3c>)
 800acb4:	460c      	mov	r4, r1
 800acb6:	6831      	ldr	r1, [r6, #0]
 800acb8:	4605      	mov	r5, r0
 800acba:	b911      	cbnz	r1, 800acc2 <sbrk_aligned+0x12>
 800acbc:	f000 fbc2 	bl	800b444 <_sbrk_r>
 800acc0:	6030      	str	r0, [r6, #0]
 800acc2:	4621      	mov	r1, r4
 800acc4:	4628      	mov	r0, r5
 800acc6:	f000 fbbd 	bl	800b444 <_sbrk_r>
 800acca:	1c43      	adds	r3, r0, #1
 800accc:	d00a      	beq.n	800ace4 <sbrk_aligned+0x34>
 800acce:	1cc4      	adds	r4, r0, #3
 800acd0:	f024 0403 	bic.w	r4, r4, #3
 800acd4:	42a0      	cmp	r0, r4
 800acd6:	d007      	beq.n	800ace8 <sbrk_aligned+0x38>
 800acd8:	1a21      	subs	r1, r4, r0
 800acda:	4628      	mov	r0, r5
 800acdc:	f000 fbb2 	bl	800b444 <_sbrk_r>
 800ace0:	3001      	adds	r0, #1
 800ace2:	d101      	bne.n	800ace8 <sbrk_aligned+0x38>
 800ace4:	f04f 34ff 	mov.w	r4, #4294967295
 800ace8:	4620      	mov	r0, r4
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	20000594 	.word	0x20000594

0800acf0 <_malloc_r>:
 800acf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acf4:	1ccd      	adds	r5, r1, #3
 800acf6:	f025 0503 	bic.w	r5, r5, #3
 800acfa:	3508      	adds	r5, #8
 800acfc:	2d0c      	cmp	r5, #12
 800acfe:	bf38      	it	cc
 800ad00:	250c      	movcc	r5, #12
 800ad02:	2d00      	cmp	r5, #0
 800ad04:	4607      	mov	r7, r0
 800ad06:	db01      	blt.n	800ad0c <_malloc_r+0x1c>
 800ad08:	42a9      	cmp	r1, r5
 800ad0a:	d905      	bls.n	800ad18 <_malloc_r+0x28>
 800ad0c:	230c      	movs	r3, #12
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	2600      	movs	r6, #0
 800ad12:	4630      	mov	r0, r6
 800ad14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad18:	4e2e      	ldr	r6, [pc, #184]	; (800add4 <_malloc_r+0xe4>)
 800ad1a:	f000 fc3d 	bl	800b598 <__malloc_lock>
 800ad1e:	6833      	ldr	r3, [r6, #0]
 800ad20:	461c      	mov	r4, r3
 800ad22:	bb34      	cbnz	r4, 800ad72 <_malloc_r+0x82>
 800ad24:	4629      	mov	r1, r5
 800ad26:	4638      	mov	r0, r7
 800ad28:	f7ff ffc2 	bl	800acb0 <sbrk_aligned>
 800ad2c:	1c43      	adds	r3, r0, #1
 800ad2e:	4604      	mov	r4, r0
 800ad30:	d14d      	bne.n	800adce <_malloc_r+0xde>
 800ad32:	6834      	ldr	r4, [r6, #0]
 800ad34:	4626      	mov	r6, r4
 800ad36:	2e00      	cmp	r6, #0
 800ad38:	d140      	bne.n	800adbc <_malloc_r+0xcc>
 800ad3a:	6823      	ldr	r3, [r4, #0]
 800ad3c:	4631      	mov	r1, r6
 800ad3e:	4638      	mov	r0, r7
 800ad40:	eb04 0803 	add.w	r8, r4, r3
 800ad44:	f000 fb7e 	bl	800b444 <_sbrk_r>
 800ad48:	4580      	cmp	r8, r0
 800ad4a:	d13a      	bne.n	800adc2 <_malloc_r+0xd2>
 800ad4c:	6821      	ldr	r1, [r4, #0]
 800ad4e:	3503      	adds	r5, #3
 800ad50:	1a6d      	subs	r5, r5, r1
 800ad52:	f025 0503 	bic.w	r5, r5, #3
 800ad56:	3508      	adds	r5, #8
 800ad58:	2d0c      	cmp	r5, #12
 800ad5a:	bf38      	it	cc
 800ad5c:	250c      	movcc	r5, #12
 800ad5e:	4629      	mov	r1, r5
 800ad60:	4638      	mov	r0, r7
 800ad62:	f7ff ffa5 	bl	800acb0 <sbrk_aligned>
 800ad66:	3001      	adds	r0, #1
 800ad68:	d02b      	beq.n	800adc2 <_malloc_r+0xd2>
 800ad6a:	6823      	ldr	r3, [r4, #0]
 800ad6c:	442b      	add	r3, r5
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	e00e      	b.n	800ad90 <_malloc_r+0xa0>
 800ad72:	6822      	ldr	r2, [r4, #0]
 800ad74:	1b52      	subs	r2, r2, r5
 800ad76:	d41e      	bmi.n	800adb6 <_malloc_r+0xc6>
 800ad78:	2a0b      	cmp	r2, #11
 800ad7a:	d916      	bls.n	800adaa <_malloc_r+0xba>
 800ad7c:	1961      	adds	r1, r4, r5
 800ad7e:	42a3      	cmp	r3, r4
 800ad80:	6025      	str	r5, [r4, #0]
 800ad82:	bf18      	it	ne
 800ad84:	6059      	strne	r1, [r3, #4]
 800ad86:	6863      	ldr	r3, [r4, #4]
 800ad88:	bf08      	it	eq
 800ad8a:	6031      	streq	r1, [r6, #0]
 800ad8c:	5162      	str	r2, [r4, r5]
 800ad8e:	604b      	str	r3, [r1, #4]
 800ad90:	4638      	mov	r0, r7
 800ad92:	f104 060b 	add.w	r6, r4, #11
 800ad96:	f000 fc05 	bl	800b5a4 <__malloc_unlock>
 800ad9a:	f026 0607 	bic.w	r6, r6, #7
 800ad9e:	1d23      	adds	r3, r4, #4
 800ada0:	1af2      	subs	r2, r6, r3
 800ada2:	d0b6      	beq.n	800ad12 <_malloc_r+0x22>
 800ada4:	1b9b      	subs	r3, r3, r6
 800ada6:	50a3      	str	r3, [r4, r2]
 800ada8:	e7b3      	b.n	800ad12 <_malloc_r+0x22>
 800adaa:	6862      	ldr	r2, [r4, #4]
 800adac:	42a3      	cmp	r3, r4
 800adae:	bf0c      	ite	eq
 800adb0:	6032      	streq	r2, [r6, #0]
 800adb2:	605a      	strne	r2, [r3, #4]
 800adb4:	e7ec      	b.n	800ad90 <_malloc_r+0xa0>
 800adb6:	4623      	mov	r3, r4
 800adb8:	6864      	ldr	r4, [r4, #4]
 800adba:	e7b2      	b.n	800ad22 <_malloc_r+0x32>
 800adbc:	4634      	mov	r4, r6
 800adbe:	6876      	ldr	r6, [r6, #4]
 800adc0:	e7b9      	b.n	800ad36 <_malloc_r+0x46>
 800adc2:	230c      	movs	r3, #12
 800adc4:	603b      	str	r3, [r7, #0]
 800adc6:	4638      	mov	r0, r7
 800adc8:	f000 fbec 	bl	800b5a4 <__malloc_unlock>
 800adcc:	e7a1      	b.n	800ad12 <_malloc_r+0x22>
 800adce:	6025      	str	r5, [r4, #0]
 800add0:	e7de      	b.n	800ad90 <_malloc_r+0xa0>
 800add2:	bf00      	nop
 800add4:	20000590 	.word	0x20000590

0800add8 <__sfputc_r>:
 800add8:	6893      	ldr	r3, [r2, #8]
 800adda:	3b01      	subs	r3, #1
 800addc:	2b00      	cmp	r3, #0
 800adde:	b410      	push	{r4}
 800ade0:	6093      	str	r3, [r2, #8]
 800ade2:	da08      	bge.n	800adf6 <__sfputc_r+0x1e>
 800ade4:	6994      	ldr	r4, [r2, #24]
 800ade6:	42a3      	cmp	r3, r4
 800ade8:	db01      	blt.n	800adee <__sfputc_r+0x16>
 800adea:	290a      	cmp	r1, #10
 800adec:	d103      	bne.n	800adf6 <__sfputc_r+0x1e>
 800adee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adf2:	f7ff bc31 	b.w	800a658 <__swbuf_r>
 800adf6:	6813      	ldr	r3, [r2, #0]
 800adf8:	1c58      	adds	r0, r3, #1
 800adfa:	6010      	str	r0, [r2, #0]
 800adfc:	7019      	strb	r1, [r3, #0]
 800adfe:	4608      	mov	r0, r1
 800ae00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae04:	4770      	bx	lr

0800ae06 <__sfputs_r>:
 800ae06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae08:	4606      	mov	r6, r0
 800ae0a:	460f      	mov	r7, r1
 800ae0c:	4614      	mov	r4, r2
 800ae0e:	18d5      	adds	r5, r2, r3
 800ae10:	42ac      	cmp	r4, r5
 800ae12:	d101      	bne.n	800ae18 <__sfputs_r+0x12>
 800ae14:	2000      	movs	r0, #0
 800ae16:	e007      	b.n	800ae28 <__sfputs_r+0x22>
 800ae18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae1c:	463a      	mov	r2, r7
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ffda 	bl	800add8 <__sfputc_r>
 800ae24:	1c43      	adds	r3, r0, #1
 800ae26:	d1f3      	bne.n	800ae10 <__sfputs_r+0xa>
 800ae28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae2c <_vfiprintf_r>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	460d      	mov	r5, r1
 800ae32:	b09d      	sub	sp, #116	; 0x74
 800ae34:	4614      	mov	r4, r2
 800ae36:	4698      	mov	r8, r3
 800ae38:	4606      	mov	r6, r0
 800ae3a:	b118      	cbz	r0, 800ae44 <_vfiprintf_r+0x18>
 800ae3c:	6983      	ldr	r3, [r0, #24]
 800ae3e:	b90b      	cbnz	r3, 800ae44 <_vfiprintf_r+0x18>
 800ae40:	f7ff fde4 	bl	800aa0c <__sinit>
 800ae44:	4b89      	ldr	r3, [pc, #548]	; (800b06c <_vfiprintf_r+0x240>)
 800ae46:	429d      	cmp	r5, r3
 800ae48:	d11b      	bne.n	800ae82 <_vfiprintf_r+0x56>
 800ae4a:	6875      	ldr	r5, [r6, #4]
 800ae4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae4e:	07d9      	lsls	r1, r3, #31
 800ae50:	d405      	bmi.n	800ae5e <_vfiprintf_r+0x32>
 800ae52:	89ab      	ldrh	r3, [r5, #12]
 800ae54:	059a      	lsls	r2, r3, #22
 800ae56:	d402      	bmi.n	800ae5e <_vfiprintf_r+0x32>
 800ae58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae5a:	f7ff fe75 	bl	800ab48 <__retarget_lock_acquire_recursive>
 800ae5e:	89ab      	ldrh	r3, [r5, #12]
 800ae60:	071b      	lsls	r3, r3, #28
 800ae62:	d501      	bpl.n	800ae68 <_vfiprintf_r+0x3c>
 800ae64:	692b      	ldr	r3, [r5, #16]
 800ae66:	b9eb      	cbnz	r3, 800aea4 <_vfiprintf_r+0x78>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4630      	mov	r0, r6
 800ae6c:	f7ff fc46 	bl	800a6fc <__swsetup_r>
 800ae70:	b1c0      	cbz	r0, 800aea4 <_vfiprintf_r+0x78>
 800ae72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae74:	07dc      	lsls	r4, r3, #31
 800ae76:	d50e      	bpl.n	800ae96 <_vfiprintf_r+0x6a>
 800ae78:	f04f 30ff 	mov.w	r0, #4294967295
 800ae7c:	b01d      	add	sp, #116	; 0x74
 800ae7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae82:	4b7b      	ldr	r3, [pc, #492]	; (800b070 <_vfiprintf_r+0x244>)
 800ae84:	429d      	cmp	r5, r3
 800ae86:	d101      	bne.n	800ae8c <_vfiprintf_r+0x60>
 800ae88:	68b5      	ldr	r5, [r6, #8]
 800ae8a:	e7df      	b.n	800ae4c <_vfiprintf_r+0x20>
 800ae8c:	4b79      	ldr	r3, [pc, #484]	; (800b074 <_vfiprintf_r+0x248>)
 800ae8e:	429d      	cmp	r5, r3
 800ae90:	bf08      	it	eq
 800ae92:	68f5      	ldreq	r5, [r6, #12]
 800ae94:	e7da      	b.n	800ae4c <_vfiprintf_r+0x20>
 800ae96:	89ab      	ldrh	r3, [r5, #12]
 800ae98:	0598      	lsls	r0, r3, #22
 800ae9a:	d4ed      	bmi.n	800ae78 <_vfiprintf_r+0x4c>
 800ae9c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae9e:	f7ff fe54 	bl	800ab4a <__retarget_lock_release_recursive>
 800aea2:	e7e9      	b.n	800ae78 <_vfiprintf_r+0x4c>
 800aea4:	2300      	movs	r3, #0
 800aea6:	9309      	str	r3, [sp, #36]	; 0x24
 800aea8:	2320      	movs	r3, #32
 800aeaa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aeae:	f8cd 800c 	str.w	r8, [sp, #12]
 800aeb2:	2330      	movs	r3, #48	; 0x30
 800aeb4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b078 <_vfiprintf_r+0x24c>
 800aeb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aebc:	f04f 0901 	mov.w	r9, #1
 800aec0:	4623      	mov	r3, r4
 800aec2:	469a      	mov	sl, r3
 800aec4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aec8:	b10a      	cbz	r2, 800aece <_vfiprintf_r+0xa2>
 800aeca:	2a25      	cmp	r2, #37	; 0x25
 800aecc:	d1f9      	bne.n	800aec2 <_vfiprintf_r+0x96>
 800aece:	ebba 0b04 	subs.w	fp, sl, r4
 800aed2:	d00b      	beq.n	800aeec <_vfiprintf_r+0xc0>
 800aed4:	465b      	mov	r3, fp
 800aed6:	4622      	mov	r2, r4
 800aed8:	4629      	mov	r1, r5
 800aeda:	4630      	mov	r0, r6
 800aedc:	f7ff ff93 	bl	800ae06 <__sfputs_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	f000 80aa 	beq.w	800b03a <_vfiprintf_r+0x20e>
 800aee6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aee8:	445a      	add	r2, fp
 800aeea:	9209      	str	r2, [sp, #36]	; 0x24
 800aeec:	f89a 3000 	ldrb.w	r3, [sl]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	f000 80a2 	beq.w	800b03a <_vfiprintf_r+0x20e>
 800aef6:	2300      	movs	r3, #0
 800aef8:	f04f 32ff 	mov.w	r2, #4294967295
 800aefc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af00:	f10a 0a01 	add.w	sl, sl, #1
 800af04:	9304      	str	r3, [sp, #16]
 800af06:	9307      	str	r3, [sp, #28]
 800af08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af0c:	931a      	str	r3, [sp, #104]	; 0x68
 800af0e:	4654      	mov	r4, sl
 800af10:	2205      	movs	r2, #5
 800af12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af16:	4858      	ldr	r0, [pc, #352]	; (800b078 <_vfiprintf_r+0x24c>)
 800af18:	f7f5 f97a 	bl	8000210 <memchr>
 800af1c:	9a04      	ldr	r2, [sp, #16]
 800af1e:	b9d8      	cbnz	r0, 800af58 <_vfiprintf_r+0x12c>
 800af20:	06d1      	lsls	r1, r2, #27
 800af22:	bf44      	itt	mi
 800af24:	2320      	movmi	r3, #32
 800af26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af2a:	0713      	lsls	r3, r2, #28
 800af2c:	bf44      	itt	mi
 800af2e:	232b      	movmi	r3, #43	; 0x2b
 800af30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af34:	f89a 3000 	ldrb.w	r3, [sl]
 800af38:	2b2a      	cmp	r3, #42	; 0x2a
 800af3a:	d015      	beq.n	800af68 <_vfiprintf_r+0x13c>
 800af3c:	9a07      	ldr	r2, [sp, #28]
 800af3e:	4654      	mov	r4, sl
 800af40:	2000      	movs	r0, #0
 800af42:	f04f 0c0a 	mov.w	ip, #10
 800af46:	4621      	mov	r1, r4
 800af48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af4c:	3b30      	subs	r3, #48	; 0x30
 800af4e:	2b09      	cmp	r3, #9
 800af50:	d94e      	bls.n	800aff0 <_vfiprintf_r+0x1c4>
 800af52:	b1b0      	cbz	r0, 800af82 <_vfiprintf_r+0x156>
 800af54:	9207      	str	r2, [sp, #28]
 800af56:	e014      	b.n	800af82 <_vfiprintf_r+0x156>
 800af58:	eba0 0308 	sub.w	r3, r0, r8
 800af5c:	fa09 f303 	lsl.w	r3, r9, r3
 800af60:	4313      	orrs	r3, r2
 800af62:	9304      	str	r3, [sp, #16]
 800af64:	46a2      	mov	sl, r4
 800af66:	e7d2      	b.n	800af0e <_vfiprintf_r+0xe2>
 800af68:	9b03      	ldr	r3, [sp, #12]
 800af6a:	1d19      	adds	r1, r3, #4
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	9103      	str	r1, [sp, #12]
 800af70:	2b00      	cmp	r3, #0
 800af72:	bfbb      	ittet	lt
 800af74:	425b      	neglt	r3, r3
 800af76:	f042 0202 	orrlt.w	r2, r2, #2
 800af7a:	9307      	strge	r3, [sp, #28]
 800af7c:	9307      	strlt	r3, [sp, #28]
 800af7e:	bfb8      	it	lt
 800af80:	9204      	strlt	r2, [sp, #16]
 800af82:	7823      	ldrb	r3, [r4, #0]
 800af84:	2b2e      	cmp	r3, #46	; 0x2e
 800af86:	d10c      	bne.n	800afa2 <_vfiprintf_r+0x176>
 800af88:	7863      	ldrb	r3, [r4, #1]
 800af8a:	2b2a      	cmp	r3, #42	; 0x2a
 800af8c:	d135      	bne.n	800affa <_vfiprintf_r+0x1ce>
 800af8e:	9b03      	ldr	r3, [sp, #12]
 800af90:	1d1a      	adds	r2, r3, #4
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	9203      	str	r2, [sp, #12]
 800af96:	2b00      	cmp	r3, #0
 800af98:	bfb8      	it	lt
 800af9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800af9e:	3402      	adds	r4, #2
 800afa0:	9305      	str	r3, [sp, #20]
 800afa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b088 <_vfiprintf_r+0x25c>
 800afa6:	7821      	ldrb	r1, [r4, #0]
 800afa8:	2203      	movs	r2, #3
 800afaa:	4650      	mov	r0, sl
 800afac:	f7f5 f930 	bl	8000210 <memchr>
 800afb0:	b140      	cbz	r0, 800afc4 <_vfiprintf_r+0x198>
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	eba0 000a 	sub.w	r0, r0, sl
 800afb8:	fa03 f000 	lsl.w	r0, r3, r0
 800afbc:	9b04      	ldr	r3, [sp, #16]
 800afbe:	4303      	orrs	r3, r0
 800afc0:	3401      	adds	r4, #1
 800afc2:	9304      	str	r3, [sp, #16]
 800afc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afc8:	482c      	ldr	r0, [pc, #176]	; (800b07c <_vfiprintf_r+0x250>)
 800afca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afce:	2206      	movs	r2, #6
 800afd0:	f7f5 f91e 	bl	8000210 <memchr>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d03f      	beq.n	800b058 <_vfiprintf_r+0x22c>
 800afd8:	4b29      	ldr	r3, [pc, #164]	; (800b080 <_vfiprintf_r+0x254>)
 800afda:	bb1b      	cbnz	r3, 800b024 <_vfiprintf_r+0x1f8>
 800afdc:	9b03      	ldr	r3, [sp, #12]
 800afde:	3307      	adds	r3, #7
 800afe0:	f023 0307 	bic.w	r3, r3, #7
 800afe4:	3308      	adds	r3, #8
 800afe6:	9303      	str	r3, [sp, #12]
 800afe8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afea:	443b      	add	r3, r7
 800afec:	9309      	str	r3, [sp, #36]	; 0x24
 800afee:	e767      	b.n	800aec0 <_vfiprintf_r+0x94>
 800aff0:	fb0c 3202 	mla	r2, ip, r2, r3
 800aff4:	460c      	mov	r4, r1
 800aff6:	2001      	movs	r0, #1
 800aff8:	e7a5      	b.n	800af46 <_vfiprintf_r+0x11a>
 800affa:	2300      	movs	r3, #0
 800affc:	3401      	adds	r4, #1
 800affe:	9305      	str	r3, [sp, #20]
 800b000:	4619      	mov	r1, r3
 800b002:	f04f 0c0a 	mov.w	ip, #10
 800b006:	4620      	mov	r0, r4
 800b008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b00c:	3a30      	subs	r2, #48	; 0x30
 800b00e:	2a09      	cmp	r2, #9
 800b010:	d903      	bls.n	800b01a <_vfiprintf_r+0x1ee>
 800b012:	2b00      	cmp	r3, #0
 800b014:	d0c5      	beq.n	800afa2 <_vfiprintf_r+0x176>
 800b016:	9105      	str	r1, [sp, #20]
 800b018:	e7c3      	b.n	800afa2 <_vfiprintf_r+0x176>
 800b01a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b01e:	4604      	mov	r4, r0
 800b020:	2301      	movs	r3, #1
 800b022:	e7f0      	b.n	800b006 <_vfiprintf_r+0x1da>
 800b024:	ab03      	add	r3, sp, #12
 800b026:	9300      	str	r3, [sp, #0]
 800b028:	462a      	mov	r2, r5
 800b02a:	4b16      	ldr	r3, [pc, #88]	; (800b084 <_vfiprintf_r+0x258>)
 800b02c:	a904      	add	r1, sp, #16
 800b02e:	4630      	mov	r0, r6
 800b030:	f3af 8000 	nop.w
 800b034:	4607      	mov	r7, r0
 800b036:	1c78      	adds	r0, r7, #1
 800b038:	d1d6      	bne.n	800afe8 <_vfiprintf_r+0x1bc>
 800b03a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b03c:	07d9      	lsls	r1, r3, #31
 800b03e:	d405      	bmi.n	800b04c <_vfiprintf_r+0x220>
 800b040:	89ab      	ldrh	r3, [r5, #12]
 800b042:	059a      	lsls	r2, r3, #22
 800b044:	d402      	bmi.n	800b04c <_vfiprintf_r+0x220>
 800b046:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b048:	f7ff fd7f 	bl	800ab4a <__retarget_lock_release_recursive>
 800b04c:	89ab      	ldrh	r3, [r5, #12]
 800b04e:	065b      	lsls	r3, r3, #25
 800b050:	f53f af12 	bmi.w	800ae78 <_vfiprintf_r+0x4c>
 800b054:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b056:	e711      	b.n	800ae7c <_vfiprintf_r+0x50>
 800b058:	ab03      	add	r3, sp, #12
 800b05a:	9300      	str	r3, [sp, #0]
 800b05c:	462a      	mov	r2, r5
 800b05e:	4b09      	ldr	r3, [pc, #36]	; (800b084 <_vfiprintf_r+0x258>)
 800b060:	a904      	add	r1, sp, #16
 800b062:	4630      	mov	r0, r6
 800b064:	f000 f880 	bl	800b168 <_printf_i>
 800b068:	e7e4      	b.n	800b034 <_vfiprintf_r+0x208>
 800b06a:	bf00      	nop
 800b06c:	0800b674 	.word	0x0800b674
 800b070:	0800b694 	.word	0x0800b694
 800b074:	0800b654 	.word	0x0800b654
 800b078:	0800b6b4 	.word	0x0800b6b4
 800b07c:	0800b6be 	.word	0x0800b6be
 800b080:	00000000 	.word	0x00000000
 800b084:	0800ae07 	.word	0x0800ae07
 800b088:	0800b6ba 	.word	0x0800b6ba

0800b08c <_printf_common>:
 800b08c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b090:	4616      	mov	r6, r2
 800b092:	4699      	mov	r9, r3
 800b094:	688a      	ldr	r2, [r1, #8]
 800b096:	690b      	ldr	r3, [r1, #16]
 800b098:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b09c:	4293      	cmp	r3, r2
 800b09e:	bfb8      	it	lt
 800b0a0:	4613      	movlt	r3, r2
 800b0a2:	6033      	str	r3, [r6, #0]
 800b0a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0a8:	4607      	mov	r7, r0
 800b0aa:	460c      	mov	r4, r1
 800b0ac:	b10a      	cbz	r2, 800b0b2 <_printf_common+0x26>
 800b0ae:	3301      	adds	r3, #1
 800b0b0:	6033      	str	r3, [r6, #0]
 800b0b2:	6823      	ldr	r3, [r4, #0]
 800b0b4:	0699      	lsls	r1, r3, #26
 800b0b6:	bf42      	ittt	mi
 800b0b8:	6833      	ldrmi	r3, [r6, #0]
 800b0ba:	3302      	addmi	r3, #2
 800b0bc:	6033      	strmi	r3, [r6, #0]
 800b0be:	6825      	ldr	r5, [r4, #0]
 800b0c0:	f015 0506 	ands.w	r5, r5, #6
 800b0c4:	d106      	bne.n	800b0d4 <_printf_common+0x48>
 800b0c6:	f104 0a19 	add.w	sl, r4, #25
 800b0ca:	68e3      	ldr	r3, [r4, #12]
 800b0cc:	6832      	ldr	r2, [r6, #0]
 800b0ce:	1a9b      	subs	r3, r3, r2
 800b0d0:	42ab      	cmp	r3, r5
 800b0d2:	dc26      	bgt.n	800b122 <_printf_common+0x96>
 800b0d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0d8:	1e13      	subs	r3, r2, #0
 800b0da:	6822      	ldr	r2, [r4, #0]
 800b0dc:	bf18      	it	ne
 800b0de:	2301      	movne	r3, #1
 800b0e0:	0692      	lsls	r2, r2, #26
 800b0e2:	d42b      	bmi.n	800b13c <_printf_common+0xb0>
 800b0e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0e8:	4649      	mov	r1, r9
 800b0ea:	4638      	mov	r0, r7
 800b0ec:	47c0      	blx	r8
 800b0ee:	3001      	adds	r0, #1
 800b0f0:	d01e      	beq.n	800b130 <_printf_common+0xa4>
 800b0f2:	6823      	ldr	r3, [r4, #0]
 800b0f4:	68e5      	ldr	r5, [r4, #12]
 800b0f6:	6832      	ldr	r2, [r6, #0]
 800b0f8:	f003 0306 	and.w	r3, r3, #6
 800b0fc:	2b04      	cmp	r3, #4
 800b0fe:	bf08      	it	eq
 800b100:	1aad      	subeq	r5, r5, r2
 800b102:	68a3      	ldr	r3, [r4, #8]
 800b104:	6922      	ldr	r2, [r4, #16]
 800b106:	bf0c      	ite	eq
 800b108:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b10c:	2500      	movne	r5, #0
 800b10e:	4293      	cmp	r3, r2
 800b110:	bfc4      	itt	gt
 800b112:	1a9b      	subgt	r3, r3, r2
 800b114:	18ed      	addgt	r5, r5, r3
 800b116:	2600      	movs	r6, #0
 800b118:	341a      	adds	r4, #26
 800b11a:	42b5      	cmp	r5, r6
 800b11c:	d11a      	bne.n	800b154 <_printf_common+0xc8>
 800b11e:	2000      	movs	r0, #0
 800b120:	e008      	b.n	800b134 <_printf_common+0xa8>
 800b122:	2301      	movs	r3, #1
 800b124:	4652      	mov	r2, sl
 800b126:	4649      	mov	r1, r9
 800b128:	4638      	mov	r0, r7
 800b12a:	47c0      	blx	r8
 800b12c:	3001      	adds	r0, #1
 800b12e:	d103      	bne.n	800b138 <_printf_common+0xac>
 800b130:	f04f 30ff 	mov.w	r0, #4294967295
 800b134:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b138:	3501      	adds	r5, #1
 800b13a:	e7c6      	b.n	800b0ca <_printf_common+0x3e>
 800b13c:	18e1      	adds	r1, r4, r3
 800b13e:	1c5a      	adds	r2, r3, #1
 800b140:	2030      	movs	r0, #48	; 0x30
 800b142:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b146:	4422      	add	r2, r4
 800b148:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b14c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b150:	3302      	adds	r3, #2
 800b152:	e7c7      	b.n	800b0e4 <_printf_common+0x58>
 800b154:	2301      	movs	r3, #1
 800b156:	4622      	mov	r2, r4
 800b158:	4649      	mov	r1, r9
 800b15a:	4638      	mov	r0, r7
 800b15c:	47c0      	blx	r8
 800b15e:	3001      	adds	r0, #1
 800b160:	d0e6      	beq.n	800b130 <_printf_common+0xa4>
 800b162:	3601      	adds	r6, #1
 800b164:	e7d9      	b.n	800b11a <_printf_common+0x8e>
	...

0800b168 <_printf_i>:
 800b168:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b16c:	7e0f      	ldrb	r7, [r1, #24]
 800b16e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b170:	2f78      	cmp	r7, #120	; 0x78
 800b172:	4691      	mov	r9, r2
 800b174:	4680      	mov	r8, r0
 800b176:	460c      	mov	r4, r1
 800b178:	469a      	mov	sl, r3
 800b17a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b17e:	d807      	bhi.n	800b190 <_printf_i+0x28>
 800b180:	2f62      	cmp	r7, #98	; 0x62
 800b182:	d80a      	bhi.n	800b19a <_printf_i+0x32>
 800b184:	2f00      	cmp	r7, #0
 800b186:	f000 80d8 	beq.w	800b33a <_printf_i+0x1d2>
 800b18a:	2f58      	cmp	r7, #88	; 0x58
 800b18c:	f000 80a3 	beq.w	800b2d6 <_printf_i+0x16e>
 800b190:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b194:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b198:	e03a      	b.n	800b210 <_printf_i+0xa8>
 800b19a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b19e:	2b15      	cmp	r3, #21
 800b1a0:	d8f6      	bhi.n	800b190 <_printf_i+0x28>
 800b1a2:	a101      	add	r1, pc, #4	; (adr r1, 800b1a8 <_printf_i+0x40>)
 800b1a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1a8:	0800b201 	.word	0x0800b201
 800b1ac:	0800b215 	.word	0x0800b215
 800b1b0:	0800b191 	.word	0x0800b191
 800b1b4:	0800b191 	.word	0x0800b191
 800b1b8:	0800b191 	.word	0x0800b191
 800b1bc:	0800b191 	.word	0x0800b191
 800b1c0:	0800b215 	.word	0x0800b215
 800b1c4:	0800b191 	.word	0x0800b191
 800b1c8:	0800b191 	.word	0x0800b191
 800b1cc:	0800b191 	.word	0x0800b191
 800b1d0:	0800b191 	.word	0x0800b191
 800b1d4:	0800b321 	.word	0x0800b321
 800b1d8:	0800b245 	.word	0x0800b245
 800b1dc:	0800b303 	.word	0x0800b303
 800b1e0:	0800b191 	.word	0x0800b191
 800b1e4:	0800b191 	.word	0x0800b191
 800b1e8:	0800b343 	.word	0x0800b343
 800b1ec:	0800b191 	.word	0x0800b191
 800b1f0:	0800b245 	.word	0x0800b245
 800b1f4:	0800b191 	.word	0x0800b191
 800b1f8:	0800b191 	.word	0x0800b191
 800b1fc:	0800b30b 	.word	0x0800b30b
 800b200:	682b      	ldr	r3, [r5, #0]
 800b202:	1d1a      	adds	r2, r3, #4
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	602a      	str	r2, [r5, #0]
 800b208:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b20c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b210:	2301      	movs	r3, #1
 800b212:	e0a3      	b.n	800b35c <_printf_i+0x1f4>
 800b214:	6820      	ldr	r0, [r4, #0]
 800b216:	6829      	ldr	r1, [r5, #0]
 800b218:	0606      	lsls	r6, r0, #24
 800b21a:	f101 0304 	add.w	r3, r1, #4
 800b21e:	d50a      	bpl.n	800b236 <_printf_i+0xce>
 800b220:	680e      	ldr	r6, [r1, #0]
 800b222:	602b      	str	r3, [r5, #0]
 800b224:	2e00      	cmp	r6, #0
 800b226:	da03      	bge.n	800b230 <_printf_i+0xc8>
 800b228:	232d      	movs	r3, #45	; 0x2d
 800b22a:	4276      	negs	r6, r6
 800b22c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b230:	485e      	ldr	r0, [pc, #376]	; (800b3ac <_printf_i+0x244>)
 800b232:	230a      	movs	r3, #10
 800b234:	e019      	b.n	800b26a <_printf_i+0x102>
 800b236:	680e      	ldr	r6, [r1, #0]
 800b238:	602b      	str	r3, [r5, #0]
 800b23a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b23e:	bf18      	it	ne
 800b240:	b236      	sxthne	r6, r6
 800b242:	e7ef      	b.n	800b224 <_printf_i+0xbc>
 800b244:	682b      	ldr	r3, [r5, #0]
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	1d19      	adds	r1, r3, #4
 800b24a:	6029      	str	r1, [r5, #0]
 800b24c:	0601      	lsls	r1, r0, #24
 800b24e:	d501      	bpl.n	800b254 <_printf_i+0xec>
 800b250:	681e      	ldr	r6, [r3, #0]
 800b252:	e002      	b.n	800b25a <_printf_i+0xf2>
 800b254:	0646      	lsls	r6, r0, #25
 800b256:	d5fb      	bpl.n	800b250 <_printf_i+0xe8>
 800b258:	881e      	ldrh	r6, [r3, #0]
 800b25a:	4854      	ldr	r0, [pc, #336]	; (800b3ac <_printf_i+0x244>)
 800b25c:	2f6f      	cmp	r7, #111	; 0x6f
 800b25e:	bf0c      	ite	eq
 800b260:	2308      	moveq	r3, #8
 800b262:	230a      	movne	r3, #10
 800b264:	2100      	movs	r1, #0
 800b266:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b26a:	6865      	ldr	r5, [r4, #4]
 800b26c:	60a5      	str	r5, [r4, #8]
 800b26e:	2d00      	cmp	r5, #0
 800b270:	bfa2      	ittt	ge
 800b272:	6821      	ldrge	r1, [r4, #0]
 800b274:	f021 0104 	bicge.w	r1, r1, #4
 800b278:	6021      	strge	r1, [r4, #0]
 800b27a:	b90e      	cbnz	r6, 800b280 <_printf_i+0x118>
 800b27c:	2d00      	cmp	r5, #0
 800b27e:	d04d      	beq.n	800b31c <_printf_i+0x1b4>
 800b280:	4615      	mov	r5, r2
 800b282:	fbb6 f1f3 	udiv	r1, r6, r3
 800b286:	fb03 6711 	mls	r7, r3, r1, r6
 800b28a:	5dc7      	ldrb	r7, [r0, r7]
 800b28c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b290:	4637      	mov	r7, r6
 800b292:	42bb      	cmp	r3, r7
 800b294:	460e      	mov	r6, r1
 800b296:	d9f4      	bls.n	800b282 <_printf_i+0x11a>
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d10b      	bne.n	800b2b4 <_printf_i+0x14c>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	07de      	lsls	r6, r3, #31
 800b2a0:	d508      	bpl.n	800b2b4 <_printf_i+0x14c>
 800b2a2:	6923      	ldr	r3, [r4, #16]
 800b2a4:	6861      	ldr	r1, [r4, #4]
 800b2a6:	4299      	cmp	r1, r3
 800b2a8:	bfde      	ittt	le
 800b2aa:	2330      	movle	r3, #48	; 0x30
 800b2ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2b4:	1b52      	subs	r2, r2, r5
 800b2b6:	6122      	str	r2, [r4, #16]
 800b2b8:	f8cd a000 	str.w	sl, [sp]
 800b2bc:	464b      	mov	r3, r9
 800b2be:	aa03      	add	r2, sp, #12
 800b2c0:	4621      	mov	r1, r4
 800b2c2:	4640      	mov	r0, r8
 800b2c4:	f7ff fee2 	bl	800b08c <_printf_common>
 800b2c8:	3001      	adds	r0, #1
 800b2ca:	d14c      	bne.n	800b366 <_printf_i+0x1fe>
 800b2cc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d0:	b004      	add	sp, #16
 800b2d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d6:	4835      	ldr	r0, [pc, #212]	; (800b3ac <_printf_i+0x244>)
 800b2d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2dc:	6829      	ldr	r1, [r5, #0]
 800b2de:	6823      	ldr	r3, [r4, #0]
 800b2e0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2e4:	6029      	str	r1, [r5, #0]
 800b2e6:	061d      	lsls	r5, r3, #24
 800b2e8:	d514      	bpl.n	800b314 <_printf_i+0x1ac>
 800b2ea:	07df      	lsls	r7, r3, #31
 800b2ec:	bf44      	itt	mi
 800b2ee:	f043 0320 	orrmi.w	r3, r3, #32
 800b2f2:	6023      	strmi	r3, [r4, #0]
 800b2f4:	b91e      	cbnz	r6, 800b2fe <_printf_i+0x196>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	f023 0320 	bic.w	r3, r3, #32
 800b2fc:	6023      	str	r3, [r4, #0]
 800b2fe:	2310      	movs	r3, #16
 800b300:	e7b0      	b.n	800b264 <_printf_i+0xfc>
 800b302:	6823      	ldr	r3, [r4, #0]
 800b304:	f043 0320 	orr.w	r3, r3, #32
 800b308:	6023      	str	r3, [r4, #0]
 800b30a:	2378      	movs	r3, #120	; 0x78
 800b30c:	4828      	ldr	r0, [pc, #160]	; (800b3b0 <_printf_i+0x248>)
 800b30e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b312:	e7e3      	b.n	800b2dc <_printf_i+0x174>
 800b314:	0659      	lsls	r1, r3, #25
 800b316:	bf48      	it	mi
 800b318:	b2b6      	uxthmi	r6, r6
 800b31a:	e7e6      	b.n	800b2ea <_printf_i+0x182>
 800b31c:	4615      	mov	r5, r2
 800b31e:	e7bb      	b.n	800b298 <_printf_i+0x130>
 800b320:	682b      	ldr	r3, [r5, #0]
 800b322:	6826      	ldr	r6, [r4, #0]
 800b324:	6961      	ldr	r1, [r4, #20]
 800b326:	1d18      	adds	r0, r3, #4
 800b328:	6028      	str	r0, [r5, #0]
 800b32a:	0635      	lsls	r5, r6, #24
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	d501      	bpl.n	800b334 <_printf_i+0x1cc>
 800b330:	6019      	str	r1, [r3, #0]
 800b332:	e002      	b.n	800b33a <_printf_i+0x1d2>
 800b334:	0670      	lsls	r0, r6, #25
 800b336:	d5fb      	bpl.n	800b330 <_printf_i+0x1c8>
 800b338:	8019      	strh	r1, [r3, #0]
 800b33a:	2300      	movs	r3, #0
 800b33c:	6123      	str	r3, [r4, #16]
 800b33e:	4615      	mov	r5, r2
 800b340:	e7ba      	b.n	800b2b8 <_printf_i+0x150>
 800b342:	682b      	ldr	r3, [r5, #0]
 800b344:	1d1a      	adds	r2, r3, #4
 800b346:	602a      	str	r2, [r5, #0]
 800b348:	681d      	ldr	r5, [r3, #0]
 800b34a:	6862      	ldr	r2, [r4, #4]
 800b34c:	2100      	movs	r1, #0
 800b34e:	4628      	mov	r0, r5
 800b350:	f7f4 ff5e 	bl	8000210 <memchr>
 800b354:	b108      	cbz	r0, 800b35a <_printf_i+0x1f2>
 800b356:	1b40      	subs	r0, r0, r5
 800b358:	6060      	str	r0, [r4, #4]
 800b35a:	6863      	ldr	r3, [r4, #4]
 800b35c:	6123      	str	r3, [r4, #16]
 800b35e:	2300      	movs	r3, #0
 800b360:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b364:	e7a8      	b.n	800b2b8 <_printf_i+0x150>
 800b366:	6923      	ldr	r3, [r4, #16]
 800b368:	462a      	mov	r2, r5
 800b36a:	4649      	mov	r1, r9
 800b36c:	4640      	mov	r0, r8
 800b36e:	47d0      	blx	sl
 800b370:	3001      	adds	r0, #1
 800b372:	d0ab      	beq.n	800b2cc <_printf_i+0x164>
 800b374:	6823      	ldr	r3, [r4, #0]
 800b376:	079b      	lsls	r3, r3, #30
 800b378:	d413      	bmi.n	800b3a2 <_printf_i+0x23a>
 800b37a:	68e0      	ldr	r0, [r4, #12]
 800b37c:	9b03      	ldr	r3, [sp, #12]
 800b37e:	4298      	cmp	r0, r3
 800b380:	bfb8      	it	lt
 800b382:	4618      	movlt	r0, r3
 800b384:	e7a4      	b.n	800b2d0 <_printf_i+0x168>
 800b386:	2301      	movs	r3, #1
 800b388:	4632      	mov	r2, r6
 800b38a:	4649      	mov	r1, r9
 800b38c:	4640      	mov	r0, r8
 800b38e:	47d0      	blx	sl
 800b390:	3001      	adds	r0, #1
 800b392:	d09b      	beq.n	800b2cc <_printf_i+0x164>
 800b394:	3501      	adds	r5, #1
 800b396:	68e3      	ldr	r3, [r4, #12]
 800b398:	9903      	ldr	r1, [sp, #12]
 800b39a:	1a5b      	subs	r3, r3, r1
 800b39c:	42ab      	cmp	r3, r5
 800b39e:	dcf2      	bgt.n	800b386 <_printf_i+0x21e>
 800b3a0:	e7eb      	b.n	800b37a <_printf_i+0x212>
 800b3a2:	2500      	movs	r5, #0
 800b3a4:	f104 0619 	add.w	r6, r4, #25
 800b3a8:	e7f5      	b.n	800b396 <_printf_i+0x22e>
 800b3aa:	bf00      	nop
 800b3ac:	0800b6c5 	.word	0x0800b6c5
 800b3b0:	0800b6d6 	.word	0x0800b6d6

0800b3b4 <_putc_r>:
 800b3b4:	b570      	push	{r4, r5, r6, lr}
 800b3b6:	460d      	mov	r5, r1
 800b3b8:	4614      	mov	r4, r2
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	b118      	cbz	r0, 800b3c6 <_putc_r+0x12>
 800b3be:	6983      	ldr	r3, [r0, #24]
 800b3c0:	b90b      	cbnz	r3, 800b3c6 <_putc_r+0x12>
 800b3c2:	f7ff fb23 	bl	800aa0c <__sinit>
 800b3c6:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <_putc_r+0x84>)
 800b3c8:	429c      	cmp	r4, r3
 800b3ca:	d124      	bne.n	800b416 <_putc_r+0x62>
 800b3cc:	6874      	ldr	r4, [r6, #4]
 800b3ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b3d0:	07d8      	lsls	r0, r3, #31
 800b3d2:	d405      	bmi.n	800b3e0 <_putc_r+0x2c>
 800b3d4:	89a3      	ldrh	r3, [r4, #12]
 800b3d6:	0599      	lsls	r1, r3, #22
 800b3d8:	d402      	bmi.n	800b3e0 <_putc_r+0x2c>
 800b3da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b3dc:	f7ff fbb4 	bl	800ab48 <__retarget_lock_acquire_recursive>
 800b3e0:	68a3      	ldr	r3, [r4, #8]
 800b3e2:	3b01      	subs	r3, #1
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	60a3      	str	r3, [r4, #8]
 800b3e8:	da05      	bge.n	800b3f6 <_putc_r+0x42>
 800b3ea:	69a2      	ldr	r2, [r4, #24]
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	db1c      	blt.n	800b42a <_putc_r+0x76>
 800b3f0:	b2eb      	uxtb	r3, r5
 800b3f2:	2b0a      	cmp	r3, #10
 800b3f4:	d019      	beq.n	800b42a <_putc_r+0x76>
 800b3f6:	6823      	ldr	r3, [r4, #0]
 800b3f8:	1c5a      	adds	r2, r3, #1
 800b3fa:	6022      	str	r2, [r4, #0]
 800b3fc:	701d      	strb	r5, [r3, #0]
 800b3fe:	b2ed      	uxtb	r5, r5
 800b400:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b402:	07da      	lsls	r2, r3, #31
 800b404:	d405      	bmi.n	800b412 <_putc_r+0x5e>
 800b406:	89a3      	ldrh	r3, [r4, #12]
 800b408:	059b      	lsls	r3, r3, #22
 800b40a:	d402      	bmi.n	800b412 <_putc_r+0x5e>
 800b40c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b40e:	f7ff fb9c 	bl	800ab4a <__retarget_lock_release_recursive>
 800b412:	4628      	mov	r0, r5
 800b414:	bd70      	pop	{r4, r5, r6, pc}
 800b416:	4b09      	ldr	r3, [pc, #36]	; (800b43c <_putc_r+0x88>)
 800b418:	429c      	cmp	r4, r3
 800b41a:	d101      	bne.n	800b420 <_putc_r+0x6c>
 800b41c:	68b4      	ldr	r4, [r6, #8]
 800b41e:	e7d6      	b.n	800b3ce <_putc_r+0x1a>
 800b420:	4b07      	ldr	r3, [pc, #28]	; (800b440 <_putc_r+0x8c>)
 800b422:	429c      	cmp	r4, r3
 800b424:	bf08      	it	eq
 800b426:	68f4      	ldreq	r4, [r6, #12]
 800b428:	e7d1      	b.n	800b3ce <_putc_r+0x1a>
 800b42a:	4629      	mov	r1, r5
 800b42c:	4622      	mov	r2, r4
 800b42e:	4630      	mov	r0, r6
 800b430:	f7ff f912 	bl	800a658 <__swbuf_r>
 800b434:	4605      	mov	r5, r0
 800b436:	e7e3      	b.n	800b400 <_putc_r+0x4c>
 800b438:	0800b674 	.word	0x0800b674
 800b43c:	0800b694 	.word	0x0800b694
 800b440:	0800b654 	.word	0x0800b654

0800b444 <_sbrk_r>:
 800b444:	b538      	push	{r3, r4, r5, lr}
 800b446:	4d06      	ldr	r5, [pc, #24]	; (800b460 <_sbrk_r+0x1c>)
 800b448:	2300      	movs	r3, #0
 800b44a:	4604      	mov	r4, r0
 800b44c:	4608      	mov	r0, r1
 800b44e:	602b      	str	r3, [r5, #0]
 800b450:	f7f9 fc66 	bl	8004d20 <_sbrk>
 800b454:	1c43      	adds	r3, r0, #1
 800b456:	d102      	bne.n	800b45e <_sbrk_r+0x1a>
 800b458:	682b      	ldr	r3, [r5, #0]
 800b45a:	b103      	cbz	r3, 800b45e <_sbrk_r+0x1a>
 800b45c:	6023      	str	r3, [r4, #0]
 800b45e:	bd38      	pop	{r3, r4, r5, pc}
 800b460:	20000598 	.word	0x20000598

0800b464 <__sread>:
 800b464:	b510      	push	{r4, lr}
 800b466:	460c      	mov	r4, r1
 800b468:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b46c:	f000 f8a0 	bl	800b5b0 <_read_r>
 800b470:	2800      	cmp	r0, #0
 800b472:	bfab      	itete	ge
 800b474:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b476:	89a3      	ldrhlt	r3, [r4, #12]
 800b478:	181b      	addge	r3, r3, r0
 800b47a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b47e:	bfac      	ite	ge
 800b480:	6563      	strge	r3, [r4, #84]	; 0x54
 800b482:	81a3      	strhlt	r3, [r4, #12]
 800b484:	bd10      	pop	{r4, pc}

0800b486 <__swrite>:
 800b486:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b48a:	461f      	mov	r7, r3
 800b48c:	898b      	ldrh	r3, [r1, #12]
 800b48e:	05db      	lsls	r3, r3, #23
 800b490:	4605      	mov	r5, r0
 800b492:	460c      	mov	r4, r1
 800b494:	4616      	mov	r6, r2
 800b496:	d505      	bpl.n	800b4a4 <__swrite+0x1e>
 800b498:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b49c:	2302      	movs	r3, #2
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f000 f868 	bl	800b574 <_lseek_r>
 800b4a4:	89a3      	ldrh	r3, [r4, #12]
 800b4a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b4aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b4ae:	81a3      	strh	r3, [r4, #12]
 800b4b0:	4632      	mov	r2, r6
 800b4b2:	463b      	mov	r3, r7
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b4ba:	f000 b817 	b.w	800b4ec <_write_r>

0800b4be <__sseek>:
 800b4be:	b510      	push	{r4, lr}
 800b4c0:	460c      	mov	r4, r1
 800b4c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4c6:	f000 f855 	bl	800b574 <_lseek_r>
 800b4ca:	1c43      	adds	r3, r0, #1
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	bf15      	itete	ne
 800b4d0:	6560      	strne	r0, [r4, #84]	; 0x54
 800b4d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b4d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b4da:	81a3      	strheq	r3, [r4, #12]
 800b4dc:	bf18      	it	ne
 800b4de:	81a3      	strhne	r3, [r4, #12]
 800b4e0:	bd10      	pop	{r4, pc}

0800b4e2 <__sclose>:
 800b4e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4e6:	f000 b813 	b.w	800b510 <_close_r>
	...

0800b4ec <_write_r>:
 800b4ec:	b538      	push	{r3, r4, r5, lr}
 800b4ee:	4d07      	ldr	r5, [pc, #28]	; (800b50c <_write_r+0x20>)
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	4608      	mov	r0, r1
 800b4f4:	4611      	mov	r1, r2
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	602a      	str	r2, [r5, #0]
 800b4fa:	461a      	mov	r2, r3
 800b4fc:	f7f7 fdb6 	bl	800306c <_write>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d102      	bne.n	800b50a <_write_r+0x1e>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	b103      	cbz	r3, 800b50a <_write_r+0x1e>
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	bd38      	pop	{r3, r4, r5, pc}
 800b50c:	20000598 	.word	0x20000598

0800b510 <_close_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d06      	ldr	r5, [pc, #24]	; (800b52c <_close_r+0x1c>)
 800b514:	2300      	movs	r3, #0
 800b516:	4604      	mov	r4, r0
 800b518:	4608      	mov	r0, r1
 800b51a:	602b      	str	r3, [r5, #0]
 800b51c:	f7f9 fbcc 	bl	8004cb8 <_close>
 800b520:	1c43      	adds	r3, r0, #1
 800b522:	d102      	bne.n	800b52a <_close_r+0x1a>
 800b524:	682b      	ldr	r3, [r5, #0]
 800b526:	b103      	cbz	r3, 800b52a <_close_r+0x1a>
 800b528:	6023      	str	r3, [r4, #0]
 800b52a:	bd38      	pop	{r3, r4, r5, pc}
 800b52c:	20000598 	.word	0x20000598

0800b530 <_fstat_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	; (800b550 <_fstat_r+0x20>)
 800b534:	2300      	movs	r3, #0
 800b536:	4604      	mov	r4, r0
 800b538:	4608      	mov	r0, r1
 800b53a:	4611      	mov	r1, r2
 800b53c:	602b      	str	r3, [r5, #0]
 800b53e:	f7f9 fbc7 	bl	8004cd0 <_fstat>
 800b542:	1c43      	adds	r3, r0, #1
 800b544:	d102      	bne.n	800b54c <_fstat_r+0x1c>
 800b546:	682b      	ldr	r3, [r5, #0]
 800b548:	b103      	cbz	r3, 800b54c <_fstat_r+0x1c>
 800b54a:	6023      	str	r3, [r4, #0]
 800b54c:	bd38      	pop	{r3, r4, r5, pc}
 800b54e:	bf00      	nop
 800b550:	20000598 	.word	0x20000598

0800b554 <_isatty_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d06      	ldr	r5, [pc, #24]	; (800b570 <_isatty_r+0x1c>)
 800b558:	2300      	movs	r3, #0
 800b55a:	4604      	mov	r4, r0
 800b55c:	4608      	mov	r0, r1
 800b55e:	602b      	str	r3, [r5, #0]
 800b560:	f7f9 fbc6 	bl	8004cf0 <_isatty>
 800b564:	1c43      	adds	r3, r0, #1
 800b566:	d102      	bne.n	800b56e <_isatty_r+0x1a>
 800b568:	682b      	ldr	r3, [r5, #0]
 800b56a:	b103      	cbz	r3, 800b56e <_isatty_r+0x1a>
 800b56c:	6023      	str	r3, [r4, #0]
 800b56e:	bd38      	pop	{r3, r4, r5, pc}
 800b570:	20000598 	.word	0x20000598

0800b574 <_lseek_r>:
 800b574:	b538      	push	{r3, r4, r5, lr}
 800b576:	4d07      	ldr	r5, [pc, #28]	; (800b594 <_lseek_r+0x20>)
 800b578:	4604      	mov	r4, r0
 800b57a:	4608      	mov	r0, r1
 800b57c:	4611      	mov	r1, r2
 800b57e:	2200      	movs	r2, #0
 800b580:	602a      	str	r2, [r5, #0]
 800b582:	461a      	mov	r2, r3
 800b584:	f7f9 fbbf 	bl	8004d06 <_lseek>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d102      	bne.n	800b592 <_lseek_r+0x1e>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	b103      	cbz	r3, 800b592 <_lseek_r+0x1e>
 800b590:	6023      	str	r3, [r4, #0]
 800b592:	bd38      	pop	{r3, r4, r5, pc}
 800b594:	20000598 	.word	0x20000598

0800b598 <__malloc_lock>:
 800b598:	4801      	ldr	r0, [pc, #4]	; (800b5a0 <__malloc_lock+0x8>)
 800b59a:	f7ff bad5 	b.w	800ab48 <__retarget_lock_acquire_recursive>
 800b59e:	bf00      	nop
 800b5a0:	2000058c 	.word	0x2000058c

0800b5a4 <__malloc_unlock>:
 800b5a4:	4801      	ldr	r0, [pc, #4]	; (800b5ac <__malloc_unlock+0x8>)
 800b5a6:	f7ff bad0 	b.w	800ab4a <__retarget_lock_release_recursive>
 800b5aa:	bf00      	nop
 800b5ac:	2000058c 	.word	0x2000058c

0800b5b0 <_read_r>:
 800b5b0:	b538      	push	{r3, r4, r5, lr}
 800b5b2:	4d07      	ldr	r5, [pc, #28]	; (800b5d0 <_read_r+0x20>)
 800b5b4:	4604      	mov	r4, r0
 800b5b6:	4608      	mov	r0, r1
 800b5b8:	4611      	mov	r1, r2
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	602a      	str	r2, [r5, #0]
 800b5be:	461a      	mov	r2, r3
 800b5c0:	f7f9 fb5d 	bl	8004c7e <_read>
 800b5c4:	1c43      	adds	r3, r0, #1
 800b5c6:	d102      	bne.n	800b5ce <_read_r+0x1e>
 800b5c8:	682b      	ldr	r3, [r5, #0]
 800b5ca:	b103      	cbz	r3, 800b5ce <_read_r+0x1e>
 800b5cc:	6023      	str	r3, [r4, #0]
 800b5ce:	bd38      	pop	{r3, r4, r5, pc}
 800b5d0:	20000598 	.word	0x20000598

0800b5d4 <_init>:
 800b5d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5d6:	bf00      	nop
 800b5d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5da:	bc08      	pop	{r3}
 800b5dc:	469e      	mov	lr, r3
 800b5de:	4770      	bx	lr

0800b5e0 <_fini>:
 800b5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5e2:	bf00      	nop
 800b5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5e6:	bc08      	pop	{r3}
 800b5e8:	469e      	mov	lr, r3
 800b5ea:	4770      	bx	lr
