
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008580  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08008748  08008748  00018748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008808  08008808  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008808  08008808  00018808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008810  08008810  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008810  08008810  00018810  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008814  08008814  00018814  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008818  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000490  20000070  08008888  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000500  08008888  00020500  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189b8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003409  00000000  00000000  00038a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001270  00000000  00000000  0003be68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001140  00000000  00000000  0003d0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028cd8  00000000  00000000  0003e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017136  00000000  00000000  00066ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fb0a0  00000000  00000000  0007e026  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001790c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000548c  00000000  00000000  00179118  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000070 	.word	0x20000070
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008730 	.word	0x08008730

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000074 	.word	0x20000074
 8000204:	08008730 	.word	0x08008730

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_uldivmod>:
 8000ab4:	b953      	cbnz	r3, 8000acc <__aeabi_uldivmod+0x18>
 8000ab6:	b94a      	cbnz	r2, 8000acc <__aeabi_uldivmod+0x18>
 8000ab8:	2900      	cmp	r1, #0
 8000aba:	bf08      	it	eq
 8000abc:	2800      	cmpeq	r0, #0
 8000abe:	bf1c      	itt	ne
 8000ac0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac8:	f000 b974 	b.w	8000db4 <__aeabi_idiv0>
 8000acc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad4:	f000 f806 	bl	8000ae4 <__udivmoddi4>
 8000ad8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000adc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae0:	b004      	add	sp, #16
 8000ae2:	4770      	bx	lr

08000ae4 <__udivmoddi4>:
 8000ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae8:	9d08      	ldr	r5, [sp, #32]
 8000aea:	4604      	mov	r4, r0
 8000aec:	468e      	mov	lr, r1
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d14d      	bne.n	8000b8e <__udivmoddi4+0xaa>
 8000af2:	428a      	cmp	r2, r1
 8000af4:	4694      	mov	ip, r2
 8000af6:	d969      	bls.n	8000bcc <__udivmoddi4+0xe8>
 8000af8:	fab2 f282 	clz	r2, r2
 8000afc:	b152      	cbz	r2, 8000b14 <__udivmoddi4+0x30>
 8000afe:	fa01 f302 	lsl.w	r3, r1, r2
 8000b02:	f1c2 0120 	rsb	r1, r2, #32
 8000b06:	fa20 f101 	lsr.w	r1, r0, r1
 8000b0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0e:	ea41 0e03 	orr.w	lr, r1, r3
 8000b12:	4094      	lsls	r4, r2
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	0c21      	lsrs	r1, r4, #16
 8000b1a:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1e:	fa1f f78c 	uxth.w	r7, ip
 8000b22:	fb08 e316 	mls	r3, r8, r6, lr
 8000b26:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b2a:	fb06 f107 	mul.w	r1, r6, r7
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	d90a      	bls.n	8000b48 <__udivmoddi4+0x64>
 8000b32:	eb1c 0303 	adds.w	r3, ip, r3
 8000b36:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b3a:	f080 811f 	bcs.w	8000d7c <__udivmoddi4+0x298>
 8000b3e:	4299      	cmp	r1, r3
 8000b40:	f240 811c 	bls.w	8000d7c <__udivmoddi4+0x298>
 8000b44:	3e02      	subs	r6, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b50:	fb08 3310 	mls	r3, r8, r0, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb00 f707 	mul.w	r7, r0, r7
 8000b5c:	42a7      	cmp	r7, r4
 8000b5e:	d90a      	bls.n	8000b76 <__udivmoddi4+0x92>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b68:	f080 810a 	bcs.w	8000d80 <__udivmoddi4+0x29c>
 8000b6c:	42a7      	cmp	r7, r4
 8000b6e:	f240 8107 	bls.w	8000d80 <__udivmoddi4+0x29c>
 8000b72:	4464      	add	r4, ip
 8000b74:	3802      	subs	r0, #2
 8000b76:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b7a:	1be4      	subs	r4, r4, r7
 8000b7c:	2600      	movs	r6, #0
 8000b7e:	b11d      	cbz	r5, 8000b88 <__udivmoddi4+0xa4>
 8000b80:	40d4      	lsrs	r4, r2
 8000b82:	2300      	movs	r3, #0
 8000b84:	e9c5 4300 	strd	r4, r3, [r5]
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d909      	bls.n	8000ba6 <__udivmoddi4+0xc2>
 8000b92:	2d00      	cmp	r5, #0
 8000b94:	f000 80ef 	beq.w	8000d76 <__udivmoddi4+0x292>
 8000b98:	2600      	movs	r6, #0
 8000b9a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9e:	4630      	mov	r0, r6
 8000ba0:	4631      	mov	r1, r6
 8000ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba6:	fab3 f683 	clz	r6, r3
 8000baa:	2e00      	cmp	r6, #0
 8000bac:	d14a      	bne.n	8000c44 <__udivmoddi4+0x160>
 8000bae:	428b      	cmp	r3, r1
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xd4>
 8000bb2:	4282      	cmp	r2, r0
 8000bb4:	f200 80f9 	bhi.w	8000daa <__udivmoddi4+0x2c6>
 8000bb8:	1a84      	subs	r4, r0, r2
 8000bba:	eb61 0303 	sbc.w	r3, r1, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	2d00      	cmp	r5, #0
 8000bc4:	d0e0      	beq.n	8000b88 <__udivmoddi4+0xa4>
 8000bc6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bca:	e7dd      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000bcc:	b902      	cbnz	r2, 8000bd0 <__udivmoddi4+0xec>
 8000bce:	deff      	udf	#255	; 0xff
 8000bd0:	fab2 f282 	clz	r2, r2
 8000bd4:	2a00      	cmp	r2, #0
 8000bd6:	f040 8092 	bne.w	8000cfe <__udivmoddi4+0x21a>
 8000bda:	eba1 010c 	sub.w	r1, r1, ip
 8000bde:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be2:	fa1f fe8c 	uxth.w	lr, ip
 8000be6:	2601      	movs	r6, #1
 8000be8:	0c20      	lsrs	r0, r4, #16
 8000bea:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bee:	fb07 1113 	mls	r1, r7, r3, r1
 8000bf2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf6:	fb0e f003 	mul.w	r0, lr, r3
 8000bfa:	4288      	cmp	r0, r1
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x12c>
 8000bfe:	eb1c 0101 	adds.w	r1, ip, r1
 8000c02:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c06:	d202      	bcs.n	8000c0e <__udivmoddi4+0x12a>
 8000c08:	4288      	cmp	r0, r1
 8000c0a:	f200 80cb 	bhi.w	8000da4 <__udivmoddi4+0x2c0>
 8000c0e:	4643      	mov	r3, r8
 8000c10:	1a09      	subs	r1, r1, r0
 8000c12:	b2a4      	uxth	r4, r4
 8000c14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c18:	fb07 1110 	mls	r1, r7, r0, r1
 8000c1c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c20:	fb0e fe00 	mul.w	lr, lr, r0
 8000c24:	45a6      	cmp	lr, r4
 8000c26:	d908      	bls.n	8000c3a <__udivmoddi4+0x156>
 8000c28:	eb1c 0404 	adds.w	r4, ip, r4
 8000c2c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c30:	d202      	bcs.n	8000c38 <__udivmoddi4+0x154>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f200 80bb 	bhi.w	8000dae <__udivmoddi4+0x2ca>
 8000c38:	4608      	mov	r0, r1
 8000c3a:	eba4 040e 	sub.w	r4, r4, lr
 8000c3e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c42:	e79c      	b.n	8000b7e <__udivmoddi4+0x9a>
 8000c44:	f1c6 0720 	rsb	r7, r6, #32
 8000c48:	40b3      	lsls	r3, r6
 8000c4a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c52:	fa20 f407 	lsr.w	r4, r0, r7
 8000c56:	fa01 f306 	lsl.w	r3, r1, r6
 8000c5a:	431c      	orrs	r4, r3
 8000c5c:	40f9      	lsrs	r1, r7
 8000c5e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c62:	fa00 f306 	lsl.w	r3, r0, r6
 8000c66:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c6a:	0c20      	lsrs	r0, r4, #16
 8000c6c:	fa1f fe8c 	uxth.w	lr, ip
 8000c70:	fb09 1118 	mls	r1, r9, r8, r1
 8000c74:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c78:	fb08 f00e 	mul.w	r0, r8, lr
 8000c7c:	4288      	cmp	r0, r1
 8000c7e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c82:	d90b      	bls.n	8000c9c <__udivmoddi4+0x1b8>
 8000c84:	eb1c 0101 	adds.w	r1, ip, r1
 8000c88:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c8c:	f080 8088 	bcs.w	8000da0 <__udivmoddi4+0x2bc>
 8000c90:	4288      	cmp	r0, r1
 8000c92:	f240 8085 	bls.w	8000da0 <__udivmoddi4+0x2bc>
 8000c96:	f1a8 0802 	sub.w	r8, r8, #2
 8000c9a:	4461      	add	r1, ip
 8000c9c:	1a09      	subs	r1, r1, r0
 8000c9e:	b2a4      	uxth	r4, r4
 8000ca0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cac:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb0:	458e      	cmp	lr, r1
 8000cb2:	d908      	bls.n	8000cc6 <__udivmoddi4+0x1e2>
 8000cb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cbc:	d26c      	bcs.n	8000d98 <__udivmoddi4+0x2b4>
 8000cbe:	458e      	cmp	lr, r1
 8000cc0:	d96a      	bls.n	8000d98 <__udivmoddi4+0x2b4>
 8000cc2:	3802      	subs	r0, #2
 8000cc4:	4461      	add	r1, ip
 8000cc6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cca:	fba0 9402 	umull	r9, r4, r0, r2
 8000cce:	eba1 010e 	sub.w	r1, r1, lr
 8000cd2:	42a1      	cmp	r1, r4
 8000cd4:	46c8      	mov	r8, r9
 8000cd6:	46a6      	mov	lr, r4
 8000cd8:	d356      	bcc.n	8000d88 <__udivmoddi4+0x2a4>
 8000cda:	d053      	beq.n	8000d84 <__udivmoddi4+0x2a0>
 8000cdc:	b15d      	cbz	r5, 8000cf6 <__udivmoddi4+0x212>
 8000cde:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce2:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cea:	fa22 f306 	lsr.w	r3, r2, r6
 8000cee:	40f1      	lsrs	r1, r6
 8000cf0:	431f      	orrs	r7, r3
 8000cf2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf6:	2600      	movs	r6, #0
 8000cf8:	4631      	mov	r1, r6
 8000cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfe:	f1c2 0320 	rsb	r3, r2, #32
 8000d02:	40d8      	lsrs	r0, r3
 8000d04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d08:	fa21 f303 	lsr.w	r3, r1, r3
 8000d0c:	4091      	lsls	r1, r2
 8000d0e:	4301      	orrs	r1, r0
 8000d10:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d14:	fa1f fe8c 	uxth.w	lr, ip
 8000d18:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d1c:	fb07 3610 	mls	r6, r7, r0, r3
 8000d20:	0c0b      	lsrs	r3, r1, #16
 8000d22:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d26:	fb00 f60e 	mul.w	r6, r0, lr
 8000d2a:	429e      	cmp	r6, r3
 8000d2c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x260>
 8000d32:	eb1c 0303 	adds.w	r3, ip, r3
 8000d36:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d3a:	d22f      	bcs.n	8000d9c <__udivmoddi4+0x2b8>
 8000d3c:	429e      	cmp	r6, r3
 8000d3e:	d92d      	bls.n	8000d9c <__udivmoddi4+0x2b8>
 8000d40:	3802      	subs	r0, #2
 8000d42:	4463      	add	r3, ip
 8000d44:	1b9b      	subs	r3, r3, r6
 8000d46:	b289      	uxth	r1, r1
 8000d48:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d4c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d50:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d54:	fb06 f30e 	mul.w	r3, r6, lr
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x28a>
 8000d5c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d60:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d64:	d216      	bcs.n	8000d94 <__udivmoddi4+0x2b0>
 8000d66:	428b      	cmp	r3, r1
 8000d68:	d914      	bls.n	8000d94 <__udivmoddi4+0x2b0>
 8000d6a:	3e02      	subs	r6, #2
 8000d6c:	4461      	add	r1, ip
 8000d6e:	1ac9      	subs	r1, r1, r3
 8000d70:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d74:	e738      	b.n	8000be8 <__udivmoddi4+0x104>
 8000d76:	462e      	mov	r6, r5
 8000d78:	4628      	mov	r0, r5
 8000d7a:	e705      	b.n	8000b88 <__udivmoddi4+0xa4>
 8000d7c:	4606      	mov	r6, r0
 8000d7e:	e6e3      	b.n	8000b48 <__udivmoddi4+0x64>
 8000d80:	4618      	mov	r0, r3
 8000d82:	e6f8      	b.n	8000b76 <__udivmoddi4+0x92>
 8000d84:	454b      	cmp	r3, r9
 8000d86:	d2a9      	bcs.n	8000cdc <__udivmoddi4+0x1f8>
 8000d88:	ebb9 0802 	subs.w	r8, r9, r2
 8000d8c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d90:	3801      	subs	r0, #1
 8000d92:	e7a3      	b.n	8000cdc <__udivmoddi4+0x1f8>
 8000d94:	4646      	mov	r6, r8
 8000d96:	e7ea      	b.n	8000d6e <__udivmoddi4+0x28a>
 8000d98:	4620      	mov	r0, r4
 8000d9a:	e794      	b.n	8000cc6 <__udivmoddi4+0x1e2>
 8000d9c:	4640      	mov	r0, r8
 8000d9e:	e7d1      	b.n	8000d44 <__udivmoddi4+0x260>
 8000da0:	46d0      	mov	r8, sl
 8000da2:	e77b      	b.n	8000c9c <__udivmoddi4+0x1b8>
 8000da4:	3b02      	subs	r3, #2
 8000da6:	4461      	add	r1, ip
 8000da8:	e732      	b.n	8000c10 <__udivmoddi4+0x12c>
 8000daa:	4630      	mov	r0, r6
 8000dac:	e709      	b.n	8000bc2 <__udivmoddi4+0xde>
 8000dae:	4464      	add	r4, ip
 8000db0:	3802      	subs	r0, #2
 8000db2:	e742      	b.n	8000c3a <__udivmoddi4+0x156>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <init_state>:

    UNLOCK();
    return nbits;
}

void init_state(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000dbe:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <init_state+0x74>)
 8000dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc4:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000dc6:	4b19      	ldr	r3, [pc, #100]	; (8000e2c <init_state+0x74>)
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <init_state+0x74>)
 8000dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8000dd4:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000dd6:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <init_state+0x74>)
 8000dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ddc:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000dde:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <init_state+0x74>)
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295
 8000de4:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <init_state+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <init_state+0x78>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000df2:	4b0f      	ldr	r3, [pc, #60]	; (8000e30 <init_state+0x78>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);//printf("HAL_TIM_Base_Stop_IT\n");  //timer.stop();
 8000df8:	480e      	ldr	r0, [pc, #56]	; (8000e34 <init_state+0x7c>)
 8000dfa:	f004 fe29 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
    //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8000dfe:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <init_state+0x80>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000e04:	2300      	movs	r3, #0
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	e008      	b.n	8000e1c <init_state+0x64>
        data.buffer[i] = 0;
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <init_state+0x78>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	3308      	adds	r3, #8
 8000e12:	2200      	movs	r2, #0
 8000e14:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	607b      	str	r3, [r7, #4]
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b3f      	cmp	r3, #63	; 0x3f
 8000e20:	d9f3      	bls.n	8000e0a <init_state+0x52>
    }
}
 8000e22:	bf00      	nop
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	200000d4 	.word	0x200000d4
 8000e30:	2000008c 	.word	0x2000008c
 8000e34:	20000378 	.word	0x20000378
 8000e38:	20000100 	.word	0x20000100
 8000e3c:	00000000 	.word	0x00000000

08000e40 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8000e40:	b5b0      	push	{r4, r5, r7, lr}
 8000e42:	b084      	sub	sp, #16
 8000e44:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 8000e46:	4b96      	ldr	r3, [pc, #600]	; (80010a0 <isr_fall+0x260>)
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	f000 83cd 	beq.w	80015ea <isr_fall+0x7aa>
 8000e50:	2b02      	cmp	r3, #2
 8000e52:	f300 83cc 	bgt.w	80015ee <isr_fall+0x7ae>
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d003      	beq.n	8000e62 <isr_fall+0x22>
 8000e5a:	2b01      	cmp	r3, #1
 8000e5c:	f000 8224 	beq.w	80012a8 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8000e60:	e3c5      	b.n	80015ee <isr_fall+0x7ae>
            if (work.c1 < 0) {
 8000e62:	4b8f      	ldr	r3, [pc, #572]	; (80010a0 <isr_fall+0x260>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	da07      	bge.n	8000e7a <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT\n");  //timer.start();
 8000e6a:	488e      	ldr	r0, [pc, #568]	; (80010a4 <isr_fall+0x264>)
 8000e6c:	f004 fd78 	bl	8005960 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8000e70:	4b8d      	ldr	r3, [pc, #564]	; (80010a8 <isr_fall+0x268>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a8a      	ldr	r2, [pc, #552]	; (80010a0 <isr_fall+0x260>)
 8000e76:	6053      	str	r3, [r2, #4]
            break;
 8000e78:	e3bc      	b.n	80015f4 <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 8000e7a:	4b8b      	ldr	r3, [pc, #556]	; (80010a8 <isr_fall+0x268>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a88      	ldr	r2, [pc, #544]	; (80010a0 <isr_fall+0x260>)
 8000e80:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 8000e82:	4b87      	ldr	r3, [pc, #540]	; (80010a0 <isr_fall+0x260>)
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	4b86      	ldr	r3, [pc, #536]	; (80010a0 <isr_fall+0x260>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	1ad3      	subs	r3, r2, r3
 8000e8c:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 8000e8e:	4b84      	ldr	r3, [pc, #528]	; (80010a0 <isr_fall+0x260>)
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	4b83      	ldr	r3, [pc, #524]	; (80010a0 <isr_fall+0x260>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 8000e9a:	f240 2332 	movw	r3, #562	; 0x232
 8000e9e:	011b      	lsls	r3, r3, #4
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f7ff fb03 	bl	80004ac <__aeabi_i2d>
 8000ea6:	a37a      	add	r3, pc, #488	; (adr r3, 8001090 <isr_fall+0x250>)
 8000ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eac:	f7ff fb68 	bl	8000580 <__aeabi_dmul>
 8000eb0:	4602      	mov	r2, r0
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	4614      	mov	r4, r2
 8000eb6:	461d      	mov	r5, r3
 8000eb8:	6878      	ldr	r0, [r7, #4]
 8000eba:	f7ff faf7 	bl	80004ac <__aeabi_i2d>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4620      	mov	r0, r4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	f7ff fdcd 	bl	8000a64 <__aeabi_dcmplt>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d056      	beq.n	8000f7e <isr_fall+0x13e>
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff faeb 	bl	80004ac <__aeabi_i2d>
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	460d      	mov	r5, r1
 8000eda:	f240 2332 	movw	r3, #562	; 0x232
 8000ede:	011b      	lsls	r3, r3, #4
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff fae3 	bl	80004ac <__aeabi_i2d>
 8000ee6:	a36c      	add	r3, pc, #432	; (adr r3, 8001098 <isr_fall+0x258>)
 8000ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eec:	f7ff fb48 	bl	8000580 <__aeabi_dmul>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4620      	mov	r0, r4
 8000ef6:	4629      	mov	r1, r5
 8000ef8:	f7ff fdb4 	bl	8000a64 <__aeabi_dcmplt>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d03d      	beq.n	8000f7e <isr_fall+0x13e>
 8000f02:	f240 2332 	movw	r3, #562	; 0x232
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff facf 	bl	80004ac <__aeabi_i2d>
 8000f0e:	a360      	add	r3, pc, #384	; (adr r3, 8001090 <isr_fall+0x250>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	f7ff fb34 	bl	8000580 <__aeabi_dmul>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	4614      	mov	r4, r2
 8000f1e:	461d      	mov	r5, r3
 8000f20:	6838      	ldr	r0, [r7, #0]
 8000f22:	f7ff fac3 	bl	80004ac <__aeabi_i2d>
 8000f26:	4602      	mov	r2, r0
 8000f28:	460b      	mov	r3, r1
 8000f2a:	4620      	mov	r0, r4
 8000f2c:	4629      	mov	r1, r5
 8000f2e:	f7ff fd99 	bl	8000a64 <__aeabi_dcmplt>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d022      	beq.n	8000f7e <isr_fall+0x13e>
 8000f38:	6838      	ldr	r0, [r7, #0]
 8000f3a:	f7ff fab7 	bl	80004ac <__aeabi_i2d>
 8000f3e:	4604      	mov	r4, r0
 8000f40:	460d      	mov	r5, r1
 8000f42:	f240 2332 	movw	r3, #562	; 0x232
 8000f46:	00db      	lsls	r3, r3, #3
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff faaf 	bl	80004ac <__aeabi_i2d>
 8000f4e:	a352      	add	r3, pc, #328	; (adr r3, 8001098 <isr_fall+0x258>)
 8000f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f54:	f7ff fb14 	bl	8000580 <__aeabi_dmul>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	460b      	mov	r3, r1
 8000f5c:	4620      	mov	r0, r4
 8000f5e:	4629      	mov	r1, r5
 8000f60:	f7ff fd80 	bl	8000a64 <__aeabi_dcmplt>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d009      	beq.n	8000f7e <isr_fall+0x13e>
                    data.format = NEC;
 8000f6a:	4b50      	ldr	r3, [pc, #320]	; (80010ac <isr_fall+0x26c>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8000f70:	4b4b      	ldr	r3, [pc, #300]	; (80010a0 <isr_fall+0x260>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8000f76:	4b4d      	ldr	r3, [pc, #308]	; (80010ac <isr_fall+0x26c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	605a      	str	r2, [r3, #4]
 8000f7c:	e193      	b.n	80012a6 <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 8000f7e:	f240 2332 	movw	r3, #562	; 0x232
 8000f82:	011b      	lsls	r3, r3, #4
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fa91 	bl	80004ac <__aeabi_i2d>
 8000f8a:	a341      	add	r3, pc, #260	; (adr r3, 8001090 <isr_fall+0x250>)
 8000f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f90:	f7ff faf6 	bl	8000580 <__aeabi_dmul>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
 8000f98:	4614      	mov	r4, r2
 8000f9a:	461d      	mov	r5, r3
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff fa85 	bl	80004ac <__aeabi_i2d>
 8000fa2:	4602      	mov	r2, r0
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	4629      	mov	r1, r5
 8000faa:	f7ff fd5b 	bl	8000a64 <__aeabi_dcmplt>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d07d      	beq.n	80010b0 <isr_fall+0x270>
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff fa79 	bl	80004ac <__aeabi_i2d>
 8000fba:	4604      	mov	r4, r0
 8000fbc:	460d      	mov	r5, r1
 8000fbe:	f240 2332 	movw	r3, #562	; 0x232
 8000fc2:	011b      	lsls	r3, r3, #4
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fa71 	bl	80004ac <__aeabi_i2d>
 8000fca:	a333      	add	r3, pc, #204	; (adr r3, 8001098 <isr_fall+0x258>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fad6 	bl	8000580 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4620      	mov	r0, r4
 8000fda:	4629      	mov	r1, r5
 8000fdc:	f7ff fd42 	bl	8000a64 <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d064      	beq.n	80010b0 <isr_fall+0x270>
 8000fe6:	f240 2332 	movw	r3, #562	; 0x232
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fa5d 	bl	80004ac <__aeabi_i2d>
 8000ff2:	a327      	add	r3, pc, #156	; (adr r3, 8001090 <isr_fall+0x250>)
 8000ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ff8:	f7ff fac2 	bl	8000580 <__aeabi_dmul>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	460b      	mov	r3, r1
 8001000:	4614      	mov	r4, r2
 8001002:	461d      	mov	r5, r3
 8001004:	6838      	ldr	r0, [r7, #0]
 8001006:	f7ff fa51 	bl	80004ac <__aeabi_i2d>
 800100a:	4602      	mov	r2, r0
 800100c:	460b      	mov	r3, r1
 800100e:	4620      	mov	r0, r4
 8001010:	4629      	mov	r1, r5
 8001012:	f7ff fd27 	bl	8000a64 <__aeabi_dcmplt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d049      	beq.n	80010b0 <isr_fall+0x270>
 800101c:	6838      	ldr	r0, [r7, #0]
 800101e:	f7ff fa45 	bl	80004ac <__aeabi_i2d>
 8001022:	4604      	mov	r4, r0
 8001024:	460d      	mov	r5, r1
 8001026:	f240 2332 	movw	r3, #562	; 0x232
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff fa3d 	bl	80004ac <__aeabi_i2d>
 8001032:	a319      	add	r3, pc, #100	; (adr r3, 8001098 <isr_fall+0x258>)
 8001034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001038:	f7ff faa2 	bl	8000580 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4620      	mov	r0, r4
 8001042:	4629      	mov	r1, r5
 8001044:	f7ff fd0e 	bl	8000a64 <__aeabi_dcmplt>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d030      	beq.n	80010b0 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 800104e:	4b17      	ldr	r3, [pc, #92]	; (80010ac <isr_fall+0x26c>)
 8001050:	2202      	movs	r2, #2
 8001052:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <isr_fall+0x260>)
 8001056:	2202      	movs	r2, #2
 8001058:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800105a:	4b14      	ldr	r3, [pc, #80]	; (80010ac <isr_fall+0x26c>)
 800105c:	2200      	movs	r2, #0
 800105e:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001060:	4b0f      	ldr	r3, [pc, #60]	; (80010a0 <isr_fall+0x260>)
 8001062:	f04f 32ff 	mov.w	r2, #4294967295
 8001066:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 8001068:	4b0d      	ldr	r3, [pc, #52]	; (80010a0 <isr_fall+0x260>)
 800106a:	f04f 32ff 	mov.w	r2, #4294967295
 800106e:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001070:	4b0b      	ldr	r3, [pc, #44]	; (80010a0 <isr_fall+0x260>)
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 8001078:	4b09      	ldr	r3, [pc, #36]	; (80010a0 <isr_fall+0x260>)
 800107a:	f04f 32ff 	mov.w	r2, #4294967295
 800107e:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001080:	4b07      	ldr	r3, [pc, #28]	; (80010a0 <isr_fall+0x260>)
 8001082:	f04f 32ff 	mov.w	r2, #4294967295
 8001086:	615a      	str	r2, [r3, #20]
 8001088:	e10d      	b.n	80012a6 <isr_fall+0x466>
 800108a:	bf00      	nop
 800108c:	f3af 8000 	nop.w
 8001090:	66666666 	.word	0x66666666
 8001094:	3fe66666 	.word	0x3fe66666
 8001098:	cccccccd 	.word	0xcccccccd
 800109c:	3ff4cccc 	.word	0x3ff4cccc
 80010a0:	200000d4 	.word	0x200000d4
 80010a4:	20000378 	.word	0x20000378
 80010a8:	20000100 	.word	0x20000100
 80010ac:	2000008c 	.word	0x2000008c
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 80010b0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff f9f8 	bl	80004ac <__aeabi_i2d>
 80010bc:	a3de      	add	r3, pc, #888	; (adr r3, 8001438 <isr_fall+0x5f8>)
 80010be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c2:	f7ff fa5d 	bl	8000580 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	4614      	mov	r4, r2
 80010cc:	461d      	mov	r5, r3
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff f9ec 	bl	80004ac <__aeabi_i2d>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff fcc2 	bl	8000a64 <__aeabi_dcmplt>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d056      	beq.n	8001194 <isr_fall+0x354>
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff f9e0 	bl	80004ac <__aeabi_i2d>
 80010ec:	4604      	mov	r4, r0
 80010ee:	460d      	mov	r5, r1
 80010f0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff f9d8 	bl	80004ac <__aeabi_i2d>
 80010fc:	a3d0      	add	r3, pc, #832	; (adr r3, 8001440 <isr_fall+0x600>)
 80010fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001102:	f7ff fa3d 	bl	8000580 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4620      	mov	r0, r4
 800110c:	4629      	mov	r1, r5
 800110e:	f7ff fca9 	bl	8000a64 <__aeabi_dcmplt>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d03d      	beq.n	8001194 <isr_fall+0x354>
 8001118:	f240 13a9 	movw	r3, #425	; 0x1a9
 800111c:	009b      	lsls	r3, r3, #2
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff f9c4 	bl	80004ac <__aeabi_i2d>
 8001124:	a3c4      	add	r3, pc, #784	; (adr r3, 8001438 <isr_fall+0x5f8>)
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	f7ff fa29 	bl	8000580 <__aeabi_dmul>
 800112e:	4602      	mov	r2, r0
 8001130:	460b      	mov	r3, r1
 8001132:	4614      	mov	r4, r2
 8001134:	461d      	mov	r5, r3
 8001136:	6838      	ldr	r0, [r7, #0]
 8001138:	f7ff f9b8 	bl	80004ac <__aeabi_i2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4620      	mov	r0, r4
 8001142:	4629      	mov	r1, r5
 8001144:	f7ff fc8e 	bl	8000a64 <__aeabi_dcmplt>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d022      	beq.n	8001194 <isr_fall+0x354>
 800114e:	6838      	ldr	r0, [r7, #0]
 8001150:	f7ff f9ac 	bl	80004ac <__aeabi_i2d>
 8001154:	4604      	mov	r4, r0
 8001156:	460d      	mov	r5, r1
 8001158:	f240 13a9 	movw	r3, #425	; 0x1a9
 800115c:	009b      	lsls	r3, r3, #2
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f9a4 	bl	80004ac <__aeabi_i2d>
 8001164:	a3b6      	add	r3, pc, #728	; (adr r3, 8001440 <isr_fall+0x600>)
 8001166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800116a:	f7ff fa09 	bl	8000580 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4620      	mov	r0, r4
 8001174:	4629      	mov	r1, r5
 8001176:	f7ff fc75 	bl	8000a64 <__aeabi_dcmplt>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d009      	beq.n	8001194 <isr_fall+0x354>
                    data.format = AEHA;
 8001180:	4bb1      	ldr	r3, [pc, #708]	; (8001448 <isr_fall+0x608>)
 8001182:	2203      	movs	r2, #3
 8001184:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001186:	4bb1      	ldr	r3, [pc, #708]	; (800144c <isr_fall+0x60c>)
 8001188:	2201      	movs	r2, #1
 800118a:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800118c:	4bae      	ldr	r3, [pc, #696]	; (8001448 <isr_fall+0x608>)
 800118e:	2200      	movs	r2, #0
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	e088      	b.n	80012a6 <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 8001194:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff f986 	bl	80004ac <__aeabi_i2d>
 80011a0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001438 <isr_fall+0x5f8>)
 80011a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a6:	f7ff f9eb 	bl	8000580 <__aeabi_dmul>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4614      	mov	r4, r2
 80011b0:	461d      	mov	r5, r3
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff f97a 	bl	80004ac <__aeabi_i2d>
 80011b8:	4602      	mov	r2, r0
 80011ba:	460b      	mov	r3, r1
 80011bc:	4620      	mov	r0, r4
 80011be:	4629      	mov	r1, r5
 80011c0:	f7ff fc50 	bl	8000a64 <__aeabi_dcmplt>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d06a      	beq.n	80012a0 <isr_fall+0x460>
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f7ff f96e 	bl	80004ac <__aeabi_i2d>
 80011d0:	4604      	mov	r4, r0
 80011d2:	460d      	mov	r5, r1
 80011d4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f966 	bl	80004ac <__aeabi_i2d>
 80011e0:	a397      	add	r3, pc, #604	; (adr r3, 8001440 <isr_fall+0x600>)
 80011e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e6:	f7ff f9cb 	bl	8000580 <__aeabi_dmul>
 80011ea:	4602      	mov	r2, r0
 80011ec:	460b      	mov	r3, r1
 80011ee:	4620      	mov	r0, r4
 80011f0:	4629      	mov	r1, r5
 80011f2:	f7ff fc37 	bl	8000a64 <__aeabi_dcmplt>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d051      	beq.n	80012a0 <isr_fall+0x460>
 80011fc:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f952 	bl	80004ac <__aeabi_i2d>
 8001208:	a38b      	add	r3, pc, #556	; (adr r3, 8001438 <isr_fall+0x5f8>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f9b7 	bl	8000580 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4614      	mov	r4, r2
 8001218:	461d      	mov	r5, r3
 800121a:	6838      	ldr	r0, [r7, #0]
 800121c:	f7ff f946 	bl	80004ac <__aeabi_i2d>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4620      	mov	r0, r4
 8001226:	4629      	mov	r1, r5
 8001228:	f7ff fc1c 	bl	8000a64 <__aeabi_dcmplt>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d036      	beq.n	80012a0 <isr_fall+0x460>
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f7ff f93a 	bl	80004ac <__aeabi_i2d>
 8001238:	4604      	mov	r4, r0
 800123a:	460d      	mov	r5, r1
 800123c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff f932 	bl	80004ac <__aeabi_i2d>
 8001248:	a37d      	add	r3, pc, #500	; (adr r3, 8001440 <isr_fall+0x600>)
 800124a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124e:	f7ff f997 	bl	8000580 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4620      	mov	r0, r4
 8001258:	4629      	mov	r1, r5
 800125a:	f7ff fc03 	bl	8000a64 <__aeabi_dcmplt>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01d      	beq.n	80012a0 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 8001264:	4b78      	ldr	r3, [pc, #480]	; (8001448 <isr_fall+0x608>)
 8001266:	2204      	movs	r2, #4
 8001268:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 800126a:	4b78      	ldr	r3, [pc, #480]	; (800144c <isr_fall+0x60c>)
 800126c:	2202      	movs	r2, #2
 800126e:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001270:	4b75      	ldr	r3, [pc, #468]	; (8001448 <isr_fall+0x608>)
 8001272:	2200      	movs	r2, #0
 8001274:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001276:	4b75      	ldr	r3, [pc, #468]	; (800144c <isr_fall+0x60c>)
 8001278:	f04f 32ff 	mov.w	r2, #4294967295
 800127c:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <isr_fall+0x60c>)
 8001280:	f04f 32ff 	mov.w	r2, #4294967295
 8001284:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001286:	4b71      	ldr	r3, [pc, #452]	; (800144c <isr_fall+0x60c>)
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 800128e:	4b6f      	ldr	r3, [pc, #444]	; (800144c <isr_fall+0x60c>)
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001296:	4b6d      	ldr	r3, [pc, #436]	; (800144c <isr_fall+0x60c>)
 8001298:	f04f 32ff 	mov.w	r2, #4294967295
 800129c:	615a      	str	r2, [r3, #20]
 800129e:	e002      	b.n	80012a6 <isr_fall+0x466>
                    init_state();
 80012a0:	f7ff fd8a 	bl	8000db8 <init_state>
            break;
 80012a4:	e1a6      	b.n	80015f4 <isr_fall+0x7b4>
 80012a6:	e1a5      	b.n	80015f4 <isr_fall+0x7b4>
            if (NEC == data.format) {
 80012a8:	4b67      	ldr	r3, [pc, #412]	; (8001448 <isr_fall+0x608>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	f040 80d3 	bne.w	8001458 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80012b2:	4b67      	ldr	r3, [pc, #412]	; (8001450 <isr_fall+0x610>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4a65      	ldr	r2, [pc, #404]	; (800144c <isr_fall+0x60c>)
 80012b8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80012ba:	4b64      	ldr	r3, [pc, #400]	; (800144c <isr_fall+0x60c>)
 80012bc:	695a      	ldr	r2, [r3, #20]
 80012be:	4b63      	ldr	r3, [pc, #396]	; (800144c <isr_fall+0x60c>)
 80012c0:	691b      	ldr	r3, [r3, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 80012c6:	f240 2232 	movw	r2, #562	; 0x232
 80012ca:	4613      	mov	r3, r2
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	4413      	add	r3, r2
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff f8eb 	bl	80004ac <__aeabi_i2d>
 80012d6:	a358      	add	r3, pc, #352	; (adr r3, 8001438 <isr_fall+0x5f8>)
 80012d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012dc:	f7ff f950 	bl	8000580 <__aeabi_dmul>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4614      	mov	r4, r2
 80012e6:	461d      	mov	r5, r3
 80012e8:	68b8      	ldr	r0, [r7, #8]
 80012ea:	f7ff f8df 	bl	80004ac <__aeabi_i2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff fbb5 	bl	8000a64 <__aeabi_dcmplt>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03a      	beq.n	8001376 <isr_fall+0x536>
 8001300:	68b8      	ldr	r0, [r7, #8]
 8001302:	f7ff f8d3 	bl	80004ac <__aeabi_i2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	f240 2232 	movw	r2, #562	; 0x232
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8c9 	bl	80004ac <__aeabi_i2d>
 800131a:	a349      	add	r3, pc, #292	; (adr r3, 8001440 <isr_fall+0x600>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f92e 	bl	8000580 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff fb9a 	bl	8000a64 <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d01f      	beq.n	8001376 <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001336:	4b44      	ldr	r3, [pc, #272]	; (8001448 <isr_fall+0x608>)
 8001338:	685b      	ldr	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	da00      	bge.n	8001340 <isr_fall+0x500>
 800133e:	3307      	adds	r3, #7
 8001340:	10db      	asrs	r3, r3, #3
 8001342:	461a      	mov	r2, r3
 8001344:	4b40      	ldr	r3, [pc, #256]	; (8001448 <isr_fall+0x608>)
 8001346:	4413      	add	r3, r2
 8001348:	7a1b      	ldrb	r3, [r3, #8]
 800134a:	b259      	sxtb	r1, r3
 800134c:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <isr_fall+0x608>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4258      	negs	r0, r3
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	f000 0007 	and.w	r0, r0, #7
 800135a:	bf58      	it	pl
 800135c:	4243      	negpl	r3, r0
 800135e:	2001      	movs	r0, #1
 8001360:	fa00 f303 	lsl.w	r3, r0, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	430b      	orrs	r3, r1
 8001368:	b25b      	sxtb	r3, r3
 800136a:	b2d9      	uxtb	r1, r3
 800136c:	4b36      	ldr	r3, [pc, #216]	; (8001448 <isr_fall+0x608>)
 800136e:	4413      	add	r3, r2
 8001370:	460a      	mov	r2, r1
 8001372:	721a      	strb	r2, [r3, #8]
 8001374:	e052      	b.n	800141c <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 8001376:	f240 2332 	movw	r3, #562	; 0x232
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff f896 	bl	80004ac <__aeabi_i2d>
 8001380:	a32d      	add	r3, pc, #180	; (adr r3, 8001438 <isr_fall+0x5f8>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff f8fb 	bl	8000580 <__aeabi_dmul>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	4614      	mov	r4, r2
 8001390:	461d      	mov	r5, r3
 8001392:	68b8      	ldr	r0, [r7, #8]
 8001394:	f7ff f88a 	bl	80004ac <__aeabi_i2d>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4620      	mov	r0, r4
 800139e:	4629      	mov	r1, r5
 80013a0:	f7ff fb60 	bl	8000a64 <__aeabi_dcmplt>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d038      	beq.n	800141c <isr_fall+0x5dc>
 80013aa:	68b8      	ldr	r0, [r7, #8]
 80013ac:	f7ff f87e 	bl	80004ac <__aeabi_i2d>
 80013b0:	4604      	mov	r4, r0
 80013b2:	460d      	mov	r5, r1
 80013b4:	f240 2332 	movw	r3, #562	; 0x232
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f877 	bl	80004ac <__aeabi_i2d>
 80013be:	a320      	add	r3, pc, #128	; (adr r3, 8001440 <isr_fall+0x600>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7ff f8dc 	bl	8000580 <__aeabi_dmul>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4620      	mov	r0, r4
 80013ce:	4629      	mov	r1, r5
 80013d0:	f7ff fb48 	bl	8000a64 <__aeabi_dcmplt>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d020      	beq.n	800141c <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80013da:	4b1b      	ldr	r3, [pc, #108]	; (8001448 <isr_fall+0x608>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	da00      	bge.n	80013e4 <isr_fall+0x5a4>
 80013e2:	3307      	adds	r3, #7
 80013e4:	10db      	asrs	r3, r3, #3
 80013e6:	461a      	mov	r2, r3
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <isr_fall+0x608>)
 80013ea:	4413      	add	r3, r2
 80013ec:	7a1b      	ldrb	r3, [r3, #8]
 80013ee:	b259      	sxtb	r1, r3
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <isr_fall+0x608>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	4258      	negs	r0, r3
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	f000 0007 	and.w	r0, r0, #7
 80013fe:	bf58      	it	pl
 8001400:	4243      	negpl	r3, r0
 8001402:	2001      	movs	r0, #1
 8001404:	fa00 f303 	lsl.w	r3, r0, r3
 8001408:	b25b      	sxtb	r3, r3
 800140a:	43db      	mvns	r3, r3
 800140c:	b25b      	sxtb	r3, r3
 800140e:	400b      	ands	r3, r1
 8001410:	b25b      	sxtb	r3, r3
 8001412:	b2d9      	uxtb	r1, r3
 8001414:	4b0c      	ldr	r3, [pc, #48]	; (8001448 <isr_fall+0x608>)
 8001416:	4413      	add	r3, r2
 8001418:	460a      	mov	r2, r1
 800141a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800141c:	4b0a      	ldr	r3, [pc, #40]	; (8001448 <isr_fall+0x608>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	3301      	adds	r3, #1
 8001422:	4a09      	ldr	r2, [pc, #36]	; (8001448 <isr_fall+0x608>)
 8001424:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <isr_fall+0x608>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b1e      	cmp	r3, #30
 800142c:	f340 80e1 	ble.w	80015f2 <isr_fall+0x7b2>
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <isr_fall+0x614>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
            break;
 8001436:	e0dc      	b.n	80015f2 <isr_fall+0x7b2>
 8001438:	66666666 	.word	0x66666666
 800143c:	3fe66666 	.word	0x3fe66666
 8001440:	cccccccd 	.word	0xcccccccd
 8001444:	3ff4cccc 	.word	0x3ff4cccc
 8001448:	2000008c 	.word	0x2000008c
 800144c:	200000d4 	.word	0x200000d4
 8001450:	20000100 	.word	0x20000100
 8001454:	20000105 	.word	0x20000105
            } else if (AEHA == data.format) {
 8001458:	4b6d      	ldr	r3, [pc, #436]	; (8001610 <isr_fall+0x7d0>)
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	2b03      	cmp	r3, #3
 800145e:	f040 80bb 	bne.w	80015d8 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 8001462:	4b6c      	ldr	r3, [pc, #432]	; (8001614 <isr_fall+0x7d4>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6c      	ldr	r2, [pc, #432]	; (8001618 <isr_fall+0x7d8>)
 8001468:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 800146a:	4b6b      	ldr	r3, [pc, #428]	; (8001618 <isr_fall+0x7d8>)
 800146c:	695a      	ldr	r2, [r3, #20]
 800146e:	4b6a      	ldr	r3, [pc, #424]	; (8001618 <isr_fall+0x7d8>)
 8001470:	691b      	ldr	r3, [r3, #16]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 8001476:	f240 12a9 	movw	r2, #425	; 0x1a9
 800147a:	4613      	mov	r3, r2
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	4413      	add	r3, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff f813 	bl	80004ac <__aeabi_i2d>
 8001486:	a35e      	add	r3, pc, #376	; (adr r3, 8001600 <isr_fall+0x7c0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7ff f878 	bl	8000580 <__aeabi_dmul>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4614      	mov	r4, r2
 8001496:	461d      	mov	r5, r3
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff f807 	bl	80004ac <__aeabi_i2d>
 800149e:	4602      	mov	r2, r0
 80014a0:	460b      	mov	r3, r1
 80014a2:	4620      	mov	r0, r4
 80014a4:	4629      	mov	r1, r5
 80014a6:	f7ff fadd 	bl	8000a64 <__aeabi_dcmplt>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d03a      	beq.n	8001526 <isr_fall+0x6e6>
 80014b0:	68f8      	ldr	r0, [r7, #12]
 80014b2:	f7fe fffb 	bl	80004ac <__aeabi_i2d>
 80014b6:	4604      	mov	r4, r0
 80014b8:	460d      	mov	r5, r1
 80014ba:	f240 12a9 	movw	r2, #425	; 0x1a9
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7fe fff1 	bl	80004ac <__aeabi_i2d>
 80014ca:	a34f      	add	r3, pc, #316	; (adr r3, 8001608 <isr_fall+0x7c8>)
 80014cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014d0:	f7ff f856 	bl	8000580 <__aeabi_dmul>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4620      	mov	r0, r4
 80014da:	4629      	mov	r1, r5
 80014dc:	f7ff fac2 	bl	8000a64 <__aeabi_dcmplt>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d01f      	beq.n	8001526 <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80014e6:	4b4a      	ldr	r3, [pc, #296]	; (8001610 <isr_fall+0x7d0>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	da00      	bge.n	80014f0 <isr_fall+0x6b0>
 80014ee:	3307      	adds	r3, #7
 80014f0:	10db      	asrs	r3, r3, #3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4b46      	ldr	r3, [pc, #280]	; (8001610 <isr_fall+0x7d0>)
 80014f6:	4413      	add	r3, r2
 80014f8:	7a1b      	ldrb	r3, [r3, #8]
 80014fa:	b259      	sxtb	r1, r3
 80014fc:	4b44      	ldr	r3, [pc, #272]	; (8001610 <isr_fall+0x7d0>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4258      	negs	r0, r3
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	f000 0007 	and.w	r0, r0, #7
 800150a:	bf58      	it	pl
 800150c:	4243      	negpl	r3, r0
 800150e:	2001      	movs	r0, #1
 8001510:	fa00 f303 	lsl.w	r3, r0, r3
 8001514:	b25b      	sxtb	r3, r3
 8001516:	430b      	orrs	r3, r1
 8001518:	b25b      	sxtb	r3, r3
 800151a:	b2d9      	uxtb	r1, r3
 800151c:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <isr_fall+0x7d0>)
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	721a      	strb	r2, [r3, #8]
 8001524:	e052      	b.n	80015cc <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 8001526:	f240 13a9 	movw	r3, #425	; 0x1a9
 800152a:	4618      	mov	r0, r3
 800152c:	f7fe ffbe 	bl	80004ac <__aeabi_i2d>
 8001530:	a333      	add	r3, pc, #204	; (adr r3, 8001600 <isr_fall+0x7c0>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	f7ff f823 	bl	8000580 <__aeabi_dmul>
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4614      	mov	r4, r2
 8001540:	461d      	mov	r5, r3
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7fe ffb2 	bl	80004ac <__aeabi_i2d>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4620      	mov	r0, r4
 800154e:	4629      	mov	r1, r5
 8001550:	f7ff fa88 	bl	8000a64 <__aeabi_dcmplt>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d038      	beq.n	80015cc <isr_fall+0x78c>
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7fe ffa6 	bl	80004ac <__aeabi_i2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe ff9f 	bl	80004ac <__aeabi_i2d>
 800156e:	a326      	add	r3, pc, #152	; (adr r3, 8001608 <isr_fall+0x7c8>)
 8001570:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001574:	f7ff f804 	bl	8000580 <__aeabi_dmul>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	4620      	mov	r0, r4
 800157e:	4629      	mov	r1, r5
 8001580:	f7ff fa70 	bl	8000a64 <__aeabi_dcmplt>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d020      	beq.n	80015cc <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800158a:	4b21      	ldr	r3, [pc, #132]	; (8001610 <isr_fall+0x7d0>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	da00      	bge.n	8001594 <isr_fall+0x754>
 8001592:	3307      	adds	r3, #7
 8001594:	10db      	asrs	r3, r3, #3
 8001596:	461a      	mov	r2, r3
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <isr_fall+0x7d0>)
 800159a:	4413      	add	r3, r2
 800159c:	7a1b      	ldrb	r3, [r3, #8]
 800159e:	b259      	sxtb	r1, r3
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <isr_fall+0x7d0>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	4258      	negs	r0, r3
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	f000 0007 	and.w	r0, r0, #7
 80015ae:	bf58      	it	pl
 80015b0:	4243      	negpl	r3, r0
 80015b2:	2001      	movs	r0, #1
 80015b4:	fa00 f303 	lsl.w	r3, r0, r3
 80015b8:	b25b      	sxtb	r3, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	400b      	ands	r3, r1
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2d9      	uxtb	r1, r3
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <isr_fall+0x7d0>)
 80015c6:	4413      	add	r3, r2
 80015c8:	460a      	mov	r2, r1
 80015ca:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80015cc:	4b10      	ldr	r3, [pc, #64]	; (8001610 <isr_fall+0x7d0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	3301      	adds	r3, #1
 80015d2:	4a0f      	ldr	r2, [pc, #60]	; (8001610 <isr_fall+0x7d0>)
 80015d4:	6053      	str	r3, [r2, #4]
            break;
 80015d6:	e00c      	b.n	80015f2 <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <isr_fall+0x7d0>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b05      	cmp	r3, #5
 80015de:	d108      	bne.n	80015f2 <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <isr_fall+0x7d4>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <isr_fall+0x7d8>)
 80015e6:	6113      	str	r3, [r2, #16]
            break;
 80015e8:	e003      	b.n	80015f2 <isr_fall+0x7b2>
            break;
 80015ea:	bf00      	nop
 80015ec:	e002      	b.n	80015f4 <isr_fall+0x7b4>
            break;
 80015ee:	bf00      	nop
 80015f0:	e000      	b.n	80015f4 <isr_fall+0x7b4>
            break;
 80015f2:	bf00      	nop
    }
    UNLOCK();
}
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bdb0      	pop	{r4, r5, r7, pc}
 80015fc:	f3af 8000 	nop.w
 8001600:	66666666 	.word	0x66666666
 8001604:	3fe66666 	.word	0x3fe66666
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	3ff4cccc 	.word	0x3ff4cccc
 8001610:	2000008c 	.word	0x2000008c
 8001614:	20000100 	.word	0x20000100
 8001618:	200000d4 	.word	0x200000d4
 800161c:	00000000 	.word	0x00000000

08001620 <isr_rise>:

void isr_rise(void) {
 8001620:	b5b0      	push	{r4, r5, r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001626:	4ba4      	ldr	r3, [pc, #656]	; (80018b8 <isr_rise+0x298>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b02      	cmp	r3, #2
 800162c:	f000 812e 	beq.w	800188c <isr_rise+0x26c>
 8001630:	2b02      	cmp	r3, #2
 8001632:	f300 812d 	bgt.w	8001890 <isr_rise+0x270>
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <isr_rise+0x20>
 800163a:	2b01      	cmp	r3, #1
 800163c:	d058      	beq.n	80016f0 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 800163e:	e127      	b.n	8001890 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001640:	4b9d      	ldr	r3, [pc, #628]	; (80018b8 <isr_rise+0x298>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	db50      	blt.n	80016ea <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001648:	4b9c      	ldr	r3, [pc, #624]	; (80018bc <isr_rise+0x29c>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a9a      	ldr	r2, [pc, #616]	; (80018b8 <isr_rise+0x298>)
 800164e:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001650:	4b99      	ldr	r3, [pc, #612]	; (80018b8 <isr_rise+0x298>)
 8001652:	689a      	ldr	r2, [r3, #8]
 8001654:	4b98      	ldr	r3, [pc, #608]	; (80018b8 <isr_rise+0x298>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	1ad3      	subs	r3, r2, r3
 800165a:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 800165c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff22 	bl	80004ac <__aeabi_i2d>
 8001668:	a38f      	add	r3, pc, #572	; (adr r3, 80018a8 <isr_rise+0x288>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7fe ff87 	bl	8000580 <__aeabi_dmul>
 8001672:	4602      	mov	r2, r0
 8001674:	460b      	mov	r3, r1
 8001676:	4614      	mov	r4, r2
 8001678:	461d      	mov	r5, r3
 800167a:	6838      	ldr	r0, [r7, #0]
 800167c:	f7fe ff16 	bl	80004ac <__aeabi_i2d>
 8001680:	4602      	mov	r2, r0
 8001682:	460b      	mov	r3, r1
 8001684:	4620      	mov	r0, r4
 8001686:	4629      	mov	r1, r5
 8001688:	f7ff f9ec 	bl	8000a64 <__aeabi_dcmplt>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d022      	beq.n	80016d8 <isr_rise+0xb8>
 8001692:	6838      	ldr	r0, [r7, #0]
 8001694:	f7fe ff0a 	bl	80004ac <__aeabi_i2d>
 8001698:	4604      	mov	r4, r0
 800169a:	460d      	mov	r5, r1
 800169c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80016a0:	009b      	lsls	r3, r3, #2
 80016a2:	4618      	mov	r0, r3
 80016a4:	f7fe ff02 	bl	80004ac <__aeabi_i2d>
 80016a8:	a381      	add	r3, pc, #516	; (adr r3, 80018b0 <isr_rise+0x290>)
 80016aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ae:	f7fe ff67 	bl	8000580 <__aeabi_dmul>
 80016b2:	4602      	mov	r2, r0
 80016b4:	460b      	mov	r3, r1
 80016b6:	4620      	mov	r0, r4
 80016b8:	4629      	mov	r1, r5
 80016ba:	f7ff f9d3 	bl	8000a64 <__aeabi_dcmplt>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <isr_rise+0xb8>
                    data.format = SONY;
 80016c4:	4b7e      	ldr	r3, [pc, #504]	; (80018c0 <isr_rise+0x2a0>)
 80016c6:	2205      	movs	r2, #5
 80016c8:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80016ca:	4b7b      	ldr	r3, [pc, #492]	; (80018b8 <isr_rise+0x298>)
 80016cc:	2201      	movs	r2, #1
 80016ce:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80016d0:	4b7b      	ldr	r3, [pc, #492]	; (80018c0 <isr_rise+0x2a0>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	605a      	str	r2, [r3, #4]
            break;
 80016d6:	e0dd      	b.n	8001894 <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 80016d8:	4b7a      	ldr	r3, [pc, #488]	; (80018c4 <isr_rise+0x2a4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	f280 80d8 	bge.w	8001894 <isr_rise+0x274>
                        init_state();
 80016e4:	f7ff fb68 	bl	8000db8 <init_state>
            break;
 80016e8:	e0d4      	b.n	8001894 <isr_rise+0x274>
                init_state();
 80016ea:	f7ff fb65 	bl	8000db8 <init_state>
            break;
 80016ee:	e0d1      	b.n	8001894 <isr_rise+0x274>
            if (NEC == data.format) {
 80016f0:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <isr_rise+0x2a0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d104      	bne.n	8001702 <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80016f8:	4b70      	ldr	r3, [pc, #448]	; (80018bc <isr_rise+0x29c>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a6e      	ldr	r2, [pc, #440]	; (80018b8 <isr_rise+0x298>)
 80016fe:	6113      	str	r3, [r2, #16]
            break;
 8001700:	e0ca      	b.n	8001898 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 8001702:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <isr_rise+0x2a0>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d104      	bne.n	8001714 <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 800170a:	4b6c      	ldr	r3, [pc, #432]	; (80018bc <isr_rise+0x29c>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a6a      	ldr	r2, [pc, #424]	; (80018b8 <isr_rise+0x298>)
 8001710:	6113      	str	r3, [r2, #16]
            break;
 8001712:	e0c1      	b.n	8001898 <isr_rise+0x278>
            } else if (SONY == data.format) {
 8001714:	4b6a      	ldr	r3, [pc, #424]	; (80018c0 <isr_rise+0x2a0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b05      	cmp	r3, #5
 800171a:	f040 80bd 	bne.w	8001898 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800171e:	4b67      	ldr	r3, [pc, #412]	; (80018bc <isr_rise+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a65      	ldr	r2, [pc, #404]	; (80018b8 <isr_rise+0x298>)
 8001724:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 8001726:	4b64      	ldr	r3, [pc, #400]	; (80018b8 <isr_rise+0x298>)
 8001728:	695a      	ldr	r2, [r3, #20]
 800172a:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <isr_rise+0x298>)
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 8001732:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4618      	mov	r0, r3
 800173a:	f7fe feb7 	bl	80004ac <__aeabi_i2d>
 800173e:	a35a      	add	r3, pc, #360	; (adr r3, 80018a8 <isr_rise+0x288>)
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	f7fe ff1c 	bl	8000580 <__aeabi_dmul>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4614      	mov	r4, r2
 800174e:	461d      	mov	r5, r3
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7fe feab 	bl	80004ac <__aeabi_i2d>
 8001756:	4602      	mov	r2, r0
 8001758:	460b      	mov	r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f7ff f981 	bl	8000a64 <__aeabi_dcmplt>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d038      	beq.n	80017da <isr_rise+0x1ba>
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f7fe fe9f 	bl	80004ac <__aeabi_i2d>
 800176e:	4604      	mov	r4, r0
 8001770:	460d      	mov	r5, r1
 8001772:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe fe97 	bl	80004ac <__aeabi_i2d>
 800177e:	a34c      	add	r3, pc, #304	; (adr r3, 80018b0 <isr_rise+0x290>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	f7fe fefc 	bl	8000580 <__aeabi_dmul>
 8001788:	4602      	mov	r2, r0
 800178a:	460b      	mov	r3, r1
 800178c:	4620      	mov	r0, r4
 800178e:	4629      	mov	r1, r5
 8001790:	f7ff f968 	bl	8000a64 <__aeabi_dcmplt>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d01f      	beq.n	80017da <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800179a:	4b49      	ldr	r3, [pc, #292]	; (80018c0 <isr_rise+0x2a0>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	da00      	bge.n	80017a4 <isr_rise+0x184>
 80017a2:	3307      	adds	r3, #7
 80017a4:	10db      	asrs	r3, r3, #3
 80017a6:	461a      	mov	r2, r3
 80017a8:	4b45      	ldr	r3, [pc, #276]	; (80018c0 <isr_rise+0x2a0>)
 80017aa:	4413      	add	r3, r2
 80017ac:	7a1b      	ldrb	r3, [r3, #8]
 80017ae:	b259      	sxtb	r1, r3
 80017b0:	4b43      	ldr	r3, [pc, #268]	; (80018c0 <isr_rise+0x2a0>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	4258      	negs	r0, r3
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	f000 0007 	and.w	r0, r0, #7
 80017be:	bf58      	it	pl
 80017c0:	4243      	negpl	r3, r0
 80017c2:	2001      	movs	r0, #1
 80017c4:	fa00 f303 	lsl.w	r3, r0, r3
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	430b      	orrs	r3, r1
 80017cc:	b25b      	sxtb	r3, r3
 80017ce:	b2d9      	uxtb	r1, r3
 80017d0:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <isr_rise+0x2a0>)
 80017d2:	4413      	add	r3, r2
 80017d4:	460a      	mov	r2, r1
 80017d6:	721a      	strb	r2, [r3, #8]
 80017d8:	e052      	b.n	8001880 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 80017da:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017de:	4618      	mov	r0, r3
 80017e0:	f7fe fe64 	bl	80004ac <__aeabi_i2d>
 80017e4:	a330      	add	r3, pc, #192	; (adr r3, 80018a8 <isr_rise+0x288>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	f7fe fec9 	bl	8000580 <__aeabi_dmul>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	4614      	mov	r4, r2
 80017f4:	461d      	mov	r5, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f7fe fe58 	bl	80004ac <__aeabi_i2d>
 80017fc:	4602      	mov	r2, r0
 80017fe:	460b      	mov	r3, r1
 8001800:	4620      	mov	r0, r4
 8001802:	4629      	mov	r1, r5
 8001804:	f7ff f92e 	bl	8000a64 <__aeabi_dcmplt>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d038      	beq.n	8001880 <isr_rise+0x260>
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f7fe fe4c 	bl	80004ac <__aeabi_i2d>
 8001814:	4604      	mov	r4, r0
 8001816:	460d      	mov	r5, r1
 8001818:	f44f 7316 	mov.w	r3, #600	; 0x258
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fe45 	bl	80004ac <__aeabi_i2d>
 8001822:	a323      	add	r3, pc, #140	; (adr r3, 80018b0 <isr_rise+0x290>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe feaa 	bl	8000580 <__aeabi_dmul>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4620      	mov	r0, r4
 8001832:	4629      	mov	r1, r5
 8001834:	f7ff f916 	bl	8000a64 <__aeabi_dcmplt>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d020      	beq.n	8001880 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800183e:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <isr_rise+0x2a0>)
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	da00      	bge.n	8001848 <isr_rise+0x228>
 8001846:	3307      	adds	r3, #7
 8001848:	10db      	asrs	r3, r3, #3
 800184a:	461a      	mov	r2, r3
 800184c:	4b1c      	ldr	r3, [pc, #112]	; (80018c0 <isr_rise+0x2a0>)
 800184e:	4413      	add	r3, r2
 8001850:	7a1b      	ldrb	r3, [r3, #8]
 8001852:	b259      	sxtb	r1, r3
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <isr_rise+0x2a0>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4258      	negs	r0, r3
 800185a:	f003 0307 	and.w	r3, r3, #7
 800185e:	f000 0007 	and.w	r0, r0, #7
 8001862:	bf58      	it	pl
 8001864:	4243      	negpl	r3, r0
 8001866:	2001      	movs	r0, #1
 8001868:	fa00 f303 	lsl.w	r3, r0, r3
 800186c:	b25b      	sxtb	r3, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	b25b      	sxtb	r3, r3
 8001872:	400b      	ands	r3, r1
 8001874:	b25b      	sxtb	r3, r3
 8001876:	b2d9      	uxtb	r1, r3
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <isr_rise+0x2a0>)
 800187a:	4413      	add	r3, r2
 800187c:	460a      	mov	r2, r1
 800187e:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001880:	4b0f      	ldr	r3, [pc, #60]	; (80018c0 <isr_rise+0x2a0>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	3301      	adds	r3, #1
 8001886:	4a0e      	ldr	r2, [pc, #56]	; (80018c0 <isr_rise+0x2a0>)
 8001888:	6053      	str	r3, [r2, #4]
            break;
 800188a:	e005      	b.n	8001898 <isr_rise+0x278>
            break;
 800188c:	bf00      	nop
 800188e:	e004      	b.n	800189a <isr_rise+0x27a>
            break;
 8001890:	bf00      	nop
 8001892:	e002      	b.n	800189a <isr_rise+0x27a>
            break;
 8001894:	bf00      	nop
 8001896:	e000      	b.n	800189a <isr_rise+0x27a>
            break;
 8001898:	bf00      	nop
    }
    UNLOCK();
}
 800189a:	bf00      	nop
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	f3af 8000 	nop.w
 80018a8:	66666666 	.word	0x66666666
 80018ac:	3fe66666 	.word	0x3fe66666
 80018b0:	cccccccd 	.word	0xcccccccd
 80018b4:	3ff4cccc 	.word	0x3ff4cccc
 80018b8:	200000d4 	.word	0x200000d4
 80018bc:	20000100 	.word	0x20000100
 80018c0:	2000008c 	.word	0x2000008c
 80018c4:	08008758 	.word	0x08008758

080018c8 <isr_timeout>:

void isr_timeout(void) {
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <isr_timeout+0x50>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d11f      	bne.n	8001914 <isr_timeout+0x4c>
        work.state = Received;
 80018d4:	4b10      	ldr	r3, [pc, #64]	; (8001918 <isr_timeout+0x50>)
 80018d6:	2202      	movs	r2, #2
 80018d8:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
 80018da:	2028      	movs	r0, #40	; 0x28
 80018dc:	f002 fc3b 	bl	8004156 <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 80018e0:	4b0e      	ldr	r3, [pc, #56]	; (800191c <isr_timeout+0x54>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <isr_timeout+0x58>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 80018ec:	4b0a      	ldr	r3, [pc, #40]	; (8001918 <isr_timeout+0x50>)
 80018ee:	f04f 32ff 	mov.w	r2, #4294967295
 80018f2:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <isr_timeout+0x50>)
 80018f6:	f04f 32ff 	mov.w	r2, #4294967295
 80018fa:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <isr_timeout+0x50>)
 80018fe:	f04f 32ff 	mov.w	r2, #4294967295
 8001902:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <isr_timeout+0x50>)
 8001906:	f04f 32ff 	mov.w	r2, #4294967295
 800190a:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 800190c:	4b02      	ldr	r3, [pc, #8]	; (8001918 <isr_timeout+0x50>)
 800190e:	f04f 32ff 	mov.w	r2, #4294967295
 8001912:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001914:	bf00      	nop
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200000d4 	.word	0x200000d4
 800191c:	20000105 	.word	0x20000105
 8001920:	20000104 	.word	0x20000104

08001924 <HAL_TIM_PeriodElapsedCallback>:

uint8_t inhome=0;
int ir_count_idle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)//uss timer, 100khz
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a39      	ldr	r2, [pc, #228]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d104      	bne.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	3301      	adds	r3, #1
 800193c:	4a37      	ldr	r2, [pc, #220]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800193e:	6013      	str	r3, [r2, #0]
//	  if(us_Tick>0xffff0000){us_Tick=0;}

  }

  if(htim->Instance == TIM6)//system timer, 100hz
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a36      	ldr	r2, [pc, #216]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d127      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x76>
  {
	  gTick++;
 800194a:	4b36      	ldr	r3, [pc, #216]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3301      	adds	r3, #1
 8001950:	4a34      	ldr	r2, [pc, #208]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001952:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001954:	4b33      	ldr	r3, [pc, #204]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001956:	6819      	ldr	r1, [r3, #0]
 8001958:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x104>)
 800195a:	fba3 2301 	umull	r2, r3, r3, r1
 800195e:	08da      	lsrs	r2, r3, #3
 8001960:	4613      	mov	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	4413      	add	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	1aca      	subs	r2, r1, r3
 800196a:	2a00      	cmp	r2, #0
 800196c:	d104      	bne.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x54>
 800196e:	4b2f      	ldr	r3, [pc, #188]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	3301      	adds	r3, #1
 8001974:	4a2d      	ldr	r2, [pc, #180]	; (8001a2c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001976:	6013      	str	r3, [r2, #0]
	  if((gTick%50) == 0){Tick_500ms++;}
 8001978:	4b2a      	ldr	r3, [pc, #168]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x100>)
 800197a:	681a      	ldr	r2, [r3, #0]
 800197c:	4b2c      	ldr	r3, [pc, #176]	; (8001a30 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800197e:	fba3 1302 	umull	r1, r3, r3, r2
 8001982:	091b      	lsrs	r3, r3, #4
 8001984:	2132      	movs	r1, #50	; 0x32
 8001986:	fb01 f303 	mul.w	r3, r1, r3
 800198a:	1ad3      	subs	r3, r2, r3
 800198c:	2b00      	cmp	r3, #0
 800198e:	d104      	bne.n	800199a <HAL_TIM_PeriodElapsedCallback+0x76>
 8001990:	4b28      	ldr	r3, [pc, #160]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	3301      	adds	r3, #1
 8001996:	4a27      	ldr	r2, [pc, #156]	; (8001a34 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001998:	6013      	str	r3, [r2, #0]

  }

  if(htim->Instance == TIM7)//uss timer, 1khz
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10c      	bne.n	80019be <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
	  USS_tick++;
 80019a4:	4b25      	ldr	r3, [pc, #148]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019ac:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 80019ae:	4b23      	ldr	r3, [pc, #140]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80019b6:	d902      	bls.n	80019be <HAL_TIM_PeriodElapsedCallback+0x9a>
 80019b8:	4b20      	ldr	r3, [pc, #128]	; (8001a3c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)//uss timer, 1779hz
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1f      	ldr	r2, [pc, #124]	; (8001a40 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d118      	bne.n	80019fa <HAL_TIM_PeriodElapsedCallback+0xd6>
  {
	  if(TIR_setData_flag){tick();}
 80019c8:	4b1e      	ldr	r3, [pc, #120]	; (8001a44 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d001      	beq.n	80019d4 <HAL_TIM_PeriodElapsedCallback+0xb0>
 80019d0:	f000 f8a4 	bl	8001b1c <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 80019d4:	4b1c      	ldr	r3, [pc, #112]	; (8001a48 <HAL_TIM_PeriodElapsedCallback+0x124>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80019dc:	4b1b      	ldr	r3, [pc, #108]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	3301      	adds	r3, #1
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	4b19      	ldr	r3, [pc, #100]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019e6:	701a      	strb	r2, [r3, #0]

	  if(isr_timeout_counter>1)//횟수 수정할 것
 80019e8:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d904      	bls.n	80019fa <HAL_TIM_PeriodElapsedCallback+0xd6>
	  {
		  isr_timeout_counter = 0;
 80019f0:	4b16      	ldr	r3, [pc, #88]	; (8001a4c <HAL_TIM_PeriodElapsedCallback+0x128>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 80019f6:	f7ff ff67 	bl	80018c8 <isr_timeout>
	  }
  }

  if(htim->Instance == TIM14)//IR NEC timer, 1Mhz
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a14      	ldr	r2, [pc, #80]	; (8001a50 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d104      	bne.n	8001a0e <HAL_TIM_PeriodElapsedCallback+0xea>
  {
	  IR_NEC_Tick+=4;
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001a0c:	6013      	str	r3, [r2, #0]
  }
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40000c00 	.word	0x40000c00
 8001a1c:	200000ec 	.word	0x200000ec
 8001a20:	40001000 	.word	0x40001000
 8001a24:	200000f0 	.word	0x200000f0
 8001a28:	cccccccd 	.word	0xcccccccd
 8001a2c:	200000f4 	.word	0x200000f4
 8001a30:	51eb851f 	.word	0x51eb851f
 8001a34:	200000f8 	.word	0x200000f8
 8001a38:	40001400 	.word	0x40001400
 8001a3c:	200004e8 	.word	0x200004e8
 8001a40:	40014000 	.word	0x40014000
 8001a44:	200000fc 	.word	0x200000fc
 8001a48:	20000105 	.word	0x20000105
 8001a4c:	20000104 	.word	0x20000104
 8001a50:	40002000 	.word	0x40002000
 8001a54:	20000100 	.word	0x20000100

08001a58 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001a62:	88fb      	ldrh	r3, [r7, #6]
 8001a64:	2b40      	cmp	r3, #64	; 0x40
 8001a66:	d107      	bne.n	8001a78 <HAL_GPIO_EXTI_Callback+0x20>
    	USS_end[0] = us_Tick;
 8001a68:	4b28      	ldr	r3, [pc, #160]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b28      	ldr	r3, [pc, #160]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001a70:	601a      	str	r2, [r3, #0]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001a72:	4828      	ldr	r0, [pc, #160]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a74:	f003 ffec 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data2_Pin) {
 8001a78:	88fb      	ldrh	r3, [r7, #6]
 8001a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a7e:	d107      	bne.n	8001a90 <HAL_GPIO_EXTI_Callback+0x38>
    	USS_end[1] = us_Tick;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001a88:	605a      	str	r2, [r3, #4]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001a8a:	4822      	ldr	r0, [pc, #136]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001a8c:	f003 ffe0 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data3_Pin) {
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001a96:	d107      	bne.n	8001aa8 <HAL_GPIO_EXTI_Callback+0x50>
    	USS_end[2] = us_Tick;
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	4b1c      	ldr	r3, [pc, #112]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001aa0:	609a      	str	r2, [r3, #8]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001aa2:	481c      	ldr	r0, [pc, #112]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aa4:	f003 ffd4 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data4_Pin) {
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	2b04      	cmp	r3, #4
 8001aac:	d107      	bne.n	8001abe <HAL_GPIO_EXTI_Callback+0x66>
    	USS_end[3] = us_Tick;
 8001aae:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001ab6:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001ab8:	4816      	ldr	r0, [pc, #88]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001aba:	f003 ffc9 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data5_Pin) {
 8001abe:	88fb      	ldrh	r3, [r7, #6]
 8001ac0:	2b80      	cmp	r3, #128	; 0x80
 8001ac2:	d107      	bne.n	8001ad4 <HAL_GPIO_EXTI_Callback+0x7c>
    	USS_end[4] = us_Tick;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	; (8001b0c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001acc:	611a      	str	r2, [r3, #16]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001ace:	4811      	ldr	r0, [pc, #68]	; (8001b14 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001ad0:	f003 ffbe 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
//    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
//    }



    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ada:	d113      	bne.n	8001b04 <HAL_GPIO_EXTI_Callback+0xac>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){	isr_rise(); }//high edge
 8001adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ae0:	480d      	ldr	r0, [pc, #52]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001ae2:	f002 fd91 	bl	8004608 <HAL_GPIO_ReadPin>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_GPIO_EXTI_Callback+0x98>
 8001aec:	f7ff fd98 	bl	8001620 <isr_rise>
             if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ isr_fall();}//low edge
 8001af0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001af6:	f002 fd87 	bl	8004608 <HAL_GPIO_ReadPin>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_GPIO_EXTI_Callback+0xac>
 8001b00:	f7ff f99e 	bl	8000e40 <isr_fall>
        }
}
 8001b04:	bf00      	nop
 8001b06:	3708      	adds	r7, #8
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	200000ec 	.word	0x200000ec
 8001b10:	200004d0 	.word	0x200004d0
 8001b14:	20000248 	.word	0x20000248
 8001b18:	40021000 	.word	0x40021000

08001b1c <tick>:

    UNLOCK();
    return bitlength;
}

void tick(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 8001b20:	4b80      	ldr	r3, [pc, #512]	; (8001d24 <tick+0x208>)
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b03      	cmp	r3, #3
 8001b26:	f200 8247 	bhi.w	8001fb8 <tick+0x49c>
 8001b2a:	a201      	add	r2, pc, #4	; (adr r2, 8001b30 <tick+0x14>)
 8001b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b30:	08001b41 	.word	0x08001b41
 8001b34:	08001b5b 	.word	0x08001b5b
 8001b38:	08001c41 	.word	0x08001c41
 8001b3c:	08001ea7 	.word	0x08001ea7
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8001b40:	4b78      	ldr	r3, [pc, #480]	; (8001d24 <tick+0x208>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8001b46:	4b77      	ldr	r3, [pc, #476]	; (8001d24 <tick+0x208>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8001b4c:	4b75      	ldr	r3, [pc, #468]	; (8001d24 <tick+0x208>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8001b52:	4b74      	ldr	r3, [pc, #464]	; (8001d24 <tick+0x208>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	611a      	str	r2, [r3, #16]
            break;
 8001b58:	e235      	b.n	8001fc6 <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8001b5a:	4b73      	ldr	r3, [pc, #460]	; (8001d28 <tick+0x20c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d121      	bne.n	8001ba6 <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8001b62:	4b70      	ldr	r3, [pc, #448]	; (8001d24 <tick+0x208>)
 8001b64:	689a      	ldr	r2, [r3, #8]
 8001b66:	4b71      	ldr	r3, [pc, #452]	; (8001d2c <tick+0x210>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	da04      	bge.n	8001b78 <tick+0x5c>
                    IRDUTY50;
 8001b6e:	4b70      	ldr	r3, [pc, #448]	; (8001d30 <tick+0x214>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	2234      	movs	r2, #52	; 0x34
 8001b74:	635a      	str	r2, [r3, #52]	; 0x34
 8001b76:	e003      	b.n	8001b80 <tick+0x64>
                } else {
                    IRDUTY0;
 8001b78:	4b6d      	ldr	r3, [pc, #436]	; (8001d30 <tick+0x214>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <tick+0x208>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	3301      	adds	r3, #1
 8001b86:	4a67      	ldr	r2, [pc, #412]	; (8001d24 <tick+0x208>)
 8001b88:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8001b8a:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <tick+0x210>)
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	4b69      	ldr	r3, [pc, #420]	; (8001d34 <tick+0x218>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	441a      	add	r2, r3
 8001b94:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <tick+0x208>)
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f300 820f 	bgt.w	8001fbc <tick+0x4a0>
                    TIR_work.state = Data;
 8001b9e:	4b61      	ldr	r3, [pc, #388]	; (8001d24 <tick+0x208>)
 8001ba0:	2202      	movs	r2, #2
 8001ba2:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8001ba4:	e20a      	b.n	8001fbc <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8001ba6:	4b60      	ldr	r3, [pc, #384]	; (8001d28 <tick+0x20c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	2b03      	cmp	r3, #3
 8001bac:	d121      	bne.n	8001bf2 <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8001bae:	4b5d      	ldr	r3, [pc, #372]	; (8001d24 <tick+0x208>)
 8001bb0:	689a      	ldr	r2, [r3, #8]
 8001bb2:	4b61      	ldr	r3, [pc, #388]	; (8001d38 <tick+0x21c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	da04      	bge.n	8001bc4 <tick+0xa8>
                    IRDUTY50;
 8001bba:	4b5d      	ldr	r3, [pc, #372]	; (8001d30 <tick+0x214>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2234      	movs	r2, #52	; 0x34
 8001bc0:	635a      	str	r2, [r3, #52]	; 0x34
 8001bc2:	e003      	b.n	8001bcc <tick+0xb0>
                    IRDUTY0;
 8001bc4:	4b5a      	ldr	r3, [pc, #360]	; (8001d30 <tick+0x214>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2200      	movs	r2, #0
 8001bca:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <tick+0x208>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <tick+0x208>)
 8001bd4:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8001bd6:	4b58      	ldr	r3, [pc, #352]	; (8001d38 <tick+0x21c>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b58      	ldr	r3, [pc, #352]	; (8001d3c <tick+0x220>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	441a      	add	r2, r3
 8001be0:	4b50      	ldr	r3, [pc, #320]	; (8001d24 <tick+0x208>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	f300 81e9 	bgt.w	8001fbc <tick+0x4a0>
                    TIR_work.state = Data;
 8001bea:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <tick+0x208>)
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
            break;
 8001bf0:	e1e4      	b.n	8001fbc <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 8001bf2:	4b4d      	ldr	r3, [pc, #308]	; (8001d28 <tick+0x20c>)
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	2b05      	cmp	r3, #5
 8001bf8:	f040 81e0 	bne.w	8001fbc <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8001bfc:	4b49      	ldr	r3, [pc, #292]	; (8001d24 <tick+0x208>)
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b4f      	ldr	r3, [pc, #316]	; (8001d40 <tick+0x224>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	da04      	bge.n	8001c12 <tick+0xf6>
                    IRDUTY50;
 8001c08:	4b49      	ldr	r3, [pc, #292]	; (8001d30 <tick+0x214>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2234      	movs	r2, #52	; 0x34
 8001c0e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c10:	e003      	b.n	8001c1a <tick+0xfe>
                    IRDUTY0;
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <tick+0x214>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2200      	movs	r2, #0
 8001c18:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8001c1a:	4b42      	ldr	r3, [pc, #264]	; (8001d24 <tick+0x208>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	3301      	adds	r3, #1
 8001c20:	4a40      	ldr	r2, [pc, #256]	; (8001d24 <tick+0x208>)
 8001c22:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8001c24:	4b46      	ldr	r3, [pc, #280]	; (8001d40 <tick+0x224>)
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <tick+0x228>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	441a      	add	r2, r3
 8001c2e:	4b3d      	ldr	r3, [pc, #244]	; (8001d24 <tick+0x208>)
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	f300 81c2 	bgt.w	8001fbc <tick+0x4a0>
                    TIR_work.state = Data;
 8001c38:	4b3a      	ldr	r3, [pc, #232]	; (8001d24 <tick+0x208>)
 8001c3a:	2202      	movs	r2, #2
 8001c3c:	701a      	strb	r2, [r3, #0]
            break;
 8001c3e:	e1bd      	b.n	8001fbc <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 8001c40:	4b39      	ldr	r3, [pc, #228]	; (8001d28 <tick+0x20c>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d15b      	bne.n	8001d00 <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8001c48:	4b36      	ldr	r3, [pc, #216]	; (8001d24 <tick+0x208>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d109      	bne.n	8001c64 <tick+0x148>
                    IRDUTY50;
 8001c50:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <tick+0x214>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2234      	movs	r2, #52	; 0x34
 8001c56:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8001c58:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <tick+0x208>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	4a31      	ldr	r2, [pc, #196]	; (8001d24 <tick+0x208>)
 8001c60:	60d3      	str	r3, [r2, #12]
 8001c62:	e042      	b.n	8001cea <tick+0x1ce>
                } else {
                    IRDUTY0;
 8001c64:	4b32      	ldr	r3, [pc, #200]	; (8001d30 <tick+0x214>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <tick+0x208>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	da00      	bge.n	8001c76 <tick+0x15a>
 8001c74:	3307      	adds	r3, #7
 8001c76:	10db      	asrs	r3, r3, #3
 8001c78:	461a      	mov	r2, r3
 8001c7a:	4b2b      	ldr	r3, [pc, #172]	; (8001d28 <tick+0x20c>)
 8001c7c:	4413      	add	r3, r2
 8001c7e:	7a1b      	ldrb	r3, [r3, #8]
 8001c80:	4619      	mov	r1, r3
 8001c82:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <tick+0x208>)
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	425a      	negs	r2, r3
 8001c88:	f003 0307 	and.w	r3, r3, #7
 8001c8c:	f002 0207 	and.w	r2, r2, #7
 8001c90:	bf58      	it	pl
 8001c92:	4253      	negpl	r3, r2
 8001c94:	fa41 f303 	asr.w	r3, r1, r3
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d012      	beq.n	8001cc6 <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 8001ca0:	4b20      	ldr	r3, [pc, #128]	; (8001d24 <tick+0x208>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	dd08      	ble.n	8001cba <tick+0x19e>
                            TIR_work.bitcount++;
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <tick+0x208>)
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	3301      	adds	r3, #1
 8001cae:	4a1d      	ldr	r2, [pc, #116]	; (8001d24 <tick+0x208>)
 8001cb0:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001cb2:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <tick+0x208>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	e017      	b.n	8001cea <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8001cba:	4b1a      	ldr	r3, [pc, #104]	; (8001d24 <tick+0x208>)
 8001cbc:	68db      	ldr	r3, [r3, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	4a18      	ldr	r2, [pc, #96]	; (8001d24 <tick+0x208>)
 8001cc2:	60d3      	str	r3, [r2, #12]
 8001cc4:	e011      	b.n	8001cea <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8001cc6:	4b17      	ldr	r3, [pc, #92]	; (8001d24 <tick+0x208>)
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	dd08      	ble.n	8001ce0 <tick+0x1c4>
                            TIR_work.bitcount++;
 8001cce:	4b15      	ldr	r3, [pc, #84]	; (8001d24 <tick+0x208>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	4a13      	ldr	r2, [pc, #76]	; (8001d24 <tick+0x208>)
 8001cd6:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <tick+0x208>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	e004      	b.n	8001cea <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8001ce0:	4b10      	ldr	r3, [pc, #64]	; (8001d24 <tick+0x208>)
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	4a0f      	ldr	r2, [pc, #60]	; (8001d24 <tick+0x208>)
 8001ce8:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8001cea:	4b0f      	ldr	r3, [pc, #60]	; (8001d28 <tick+0x20c>)
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <tick+0x208>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	f300 8164 	bgt.w	8001fc0 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8001cf8:	4b0a      	ldr	r3, [pc, #40]	; (8001d24 <tick+0x208>)
 8001cfa:	2203      	movs	r2, #3
 8001cfc:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8001cfe:	e15f      	b.n	8001fc0 <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 8001d00:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <tick+0x20c>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d16d      	bne.n	8001de4 <tick+0x2c8>
                if (TIR_work.data == 0) {
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <tick+0x208>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d11b      	bne.n	8001d48 <tick+0x22c>
                    IRDUTY50;
 8001d10:	4b07      	ldr	r3, [pc, #28]	; (8001d30 <tick+0x214>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2234      	movs	r2, #52	; 0x34
 8001d16:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8001d18:	4b02      	ldr	r3, [pc, #8]	; (8001d24 <tick+0x208>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	4a01      	ldr	r2, [pc, #4]	; (8001d24 <tick+0x208>)
 8001d20:	60d3      	str	r3, [r2, #12]
 8001d22:	e054      	b.n	8001dce <tick+0x2b2>
 8001d24:	20000150 	.word	0x20000150
 8001d28:	20000108 	.word	0x20000108
 8001d2c:	0800875c 	.word	0x0800875c
 8001d30:	200001fc 	.word	0x200001fc
 8001d34:	08008760 	.word	0x08008760
 8001d38:	08008764 	.word	0x08008764
 8001d3c:	08008768 	.word	0x08008768
 8001d40:	0800876c 	.word	0x0800876c
 8001d44:	08008770 	.word	0x08008770
                    IRDUTY0;
 8001d48:	4b91      	ldr	r3, [pc, #580]	; (8001f90 <tick+0x474>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8001d50:	4b90      	ldr	r3, [pc, #576]	; (8001f94 <tick+0x478>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	da00      	bge.n	8001d5a <tick+0x23e>
 8001d58:	3307      	adds	r3, #7
 8001d5a:	10db      	asrs	r3, r3, #3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b8e      	ldr	r3, [pc, #568]	; (8001f98 <tick+0x47c>)
 8001d60:	4413      	add	r3, r2
 8001d62:	7a1b      	ldrb	r3, [r3, #8]
 8001d64:	4619      	mov	r1, r3
 8001d66:	4b8b      	ldr	r3, [pc, #556]	; (8001f94 <tick+0x478>)
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	425a      	negs	r2, r3
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	f002 0207 	and.w	r2, r2, #7
 8001d74:	bf58      	it	pl
 8001d76:	4253      	negpl	r3, r2
 8001d78:	fa41 f303 	asr.w	r3, r1, r3
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d012      	beq.n	8001daa <tick+0x28e>
                        if (3 <= TIR_work.data) {
 8001d84:	4b83      	ldr	r3, [pc, #524]	; (8001f94 <tick+0x478>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	dd08      	ble.n	8001d9e <tick+0x282>
                            TIR_work.bitcount++;
 8001d8c:	4b81      	ldr	r3, [pc, #516]	; (8001f94 <tick+0x478>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	3301      	adds	r3, #1
 8001d92:	4a80      	ldr	r2, [pc, #512]	; (8001f94 <tick+0x478>)
 8001d94:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001d96:	4b7f      	ldr	r3, [pc, #508]	; (8001f94 <tick+0x478>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	60da      	str	r2, [r3, #12]
 8001d9c:	e017      	b.n	8001dce <tick+0x2b2>
                            TIR_work.data++;
 8001d9e:	4b7d      	ldr	r3, [pc, #500]	; (8001f94 <tick+0x478>)
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	3301      	adds	r3, #1
 8001da4:	4a7b      	ldr	r2, [pc, #492]	; (8001f94 <tick+0x478>)
 8001da6:	60d3      	str	r3, [r2, #12]
 8001da8:	e011      	b.n	8001dce <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 8001daa:	4b7a      	ldr	r3, [pc, #488]	; (8001f94 <tick+0x478>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	dd08      	ble.n	8001dc4 <tick+0x2a8>
                            TIR_work.bitcount++;
 8001db2:	4b78      	ldr	r3, [pc, #480]	; (8001f94 <tick+0x478>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	3301      	adds	r3, #1
 8001db8:	4a76      	ldr	r2, [pc, #472]	; (8001f94 <tick+0x478>)
 8001dba:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001dbc:	4b75      	ldr	r3, [pc, #468]	; (8001f94 <tick+0x478>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]
 8001dc2:	e004      	b.n	8001dce <tick+0x2b2>
                            TIR_work.data++;
 8001dc4:	4b73      	ldr	r3, [pc, #460]	; (8001f94 <tick+0x478>)
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a72      	ldr	r2, [pc, #456]	; (8001f94 <tick+0x478>)
 8001dcc:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8001dce:	4b72      	ldr	r3, [pc, #456]	; (8001f98 <tick+0x47c>)
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4b70      	ldr	r3, [pc, #448]	; (8001f94 <tick+0x478>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	f300 80f2 	bgt.w	8001fc0 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8001ddc:	4b6d      	ldr	r3, [pc, #436]	; (8001f94 <tick+0x478>)
 8001dde:	2203      	movs	r2, #3
 8001de0:	701a      	strb	r2, [r3, #0]
            break;
 8001de2:	e0ed      	b.n	8001fc0 <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 8001de4:	4b6c      	ldr	r3, [pc, #432]	; (8001f98 <tick+0x47c>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	2b05      	cmp	r3, #5
 8001dea:	f040 80e9 	bne.w	8001fc0 <tick+0x4a4>
                if (TIR_work.data == 0) {
 8001dee:	4b69      	ldr	r3, [pc, #420]	; (8001f94 <tick+0x478>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d109      	bne.n	8001e0a <tick+0x2ee>
                    IRDUTY0;
 8001df6:	4b66      	ldr	r3, [pc, #408]	; (8001f90 <tick+0x474>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8001dfe:	4b65      	ldr	r3, [pc, #404]	; (8001f94 <tick+0x478>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	3301      	adds	r3, #1
 8001e04:	4a63      	ldr	r2, [pc, #396]	; (8001f94 <tick+0x478>)
 8001e06:	60d3      	str	r3, [r2, #12]
 8001e08:	e042      	b.n	8001e90 <tick+0x374>
                    IRDUTY50;
 8001e0a:	4b61      	ldr	r3, [pc, #388]	; (8001f90 <tick+0x474>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2234      	movs	r2, #52	; 0x34
 8001e10:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8001e12:	4b60      	ldr	r3, [pc, #384]	; (8001f94 <tick+0x478>)
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	da00      	bge.n	8001e1c <tick+0x300>
 8001e1a:	3307      	adds	r3, #7
 8001e1c:	10db      	asrs	r3, r3, #3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b5d      	ldr	r3, [pc, #372]	; (8001f98 <tick+0x47c>)
 8001e22:	4413      	add	r3, r2
 8001e24:	7a1b      	ldrb	r3, [r3, #8]
 8001e26:	4619      	mov	r1, r3
 8001e28:	4b5a      	ldr	r3, [pc, #360]	; (8001f94 <tick+0x478>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	425a      	negs	r2, r3
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	f002 0207 	and.w	r2, r2, #7
 8001e36:	bf58      	it	pl
 8001e38:	4253      	negpl	r3, r2
 8001e3a:	fa41 f303 	asr.w	r3, r1, r3
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d012      	beq.n	8001e6c <tick+0x350>
                        if (2 <= TIR_work.data) {
 8001e46:	4b53      	ldr	r3, [pc, #332]	; (8001f94 <tick+0x478>)
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	dd08      	ble.n	8001e60 <tick+0x344>
                            TIR_work.bitcount++;
 8001e4e:	4b51      	ldr	r3, [pc, #324]	; (8001f94 <tick+0x478>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	3301      	adds	r3, #1
 8001e54:	4a4f      	ldr	r2, [pc, #316]	; (8001f94 <tick+0x478>)
 8001e56:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001e58:	4b4e      	ldr	r3, [pc, #312]	; (8001f94 <tick+0x478>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	e017      	b.n	8001e90 <tick+0x374>
                            TIR_work.data++;
 8001e60:	4b4c      	ldr	r3, [pc, #304]	; (8001f94 <tick+0x478>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	3301      	adds	r3, #1
 8001e66:	4a4b      	ldr	r2, [pc, #300]	; (8001f94 <tick+0x478>)
 8001e68:	60d3      	str	r3, [r2, #12]
 8001e6a:	e011      	b.n	8001e90 <tick+0x374>
                        if (1 <= TIR_work.data) {
 8001e6c:	4b49      	ldr	r3, [pc, #292]	; (8001f94 <tick+0x478>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	dd08      	ble.n	8001e86 <tick+0x36a>
                            TIR_work.bitcount++;
 8001e74:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <tick+0x478>)
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	3301      	adds	r3, #1
 8001e7a:	4a46      	ldr	r2, [pc, #280]	; (8001f94 <tick+0x478>)
 8001e7c:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8001e7e:	4b45      	ldr	r3, [pc, #276]	; (8001f94 <tick+0x478>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	e004      	b.n	8001e90 <tick+0x374>
                            TIR_work.data++;
 8001e86:	4b43      	ldr	r3, [pc, #268]	; (8001f94 <tick+0x478>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	4a41      	ldr	r2, [pc, #260]	; (8001f94 <tick+0x478>)
 8001e8e:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <tick+0x47c>)
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4b3f      	ldr	r3, [pc, #252]	; (8001f94 <tick+0x478>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f300 8091 	bgt.w	8001fc0 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8001e9e:	4b3d      	ldr	r3, [pc, #244]	; (8001f94 <tick+0x478>)
 8001ea0:	2203      	movs	r2, #3
 8001ea2:	701a      	strb	r2, [r3, #0]
            break;
 8001ea4:	e08c      	b.n	8001fc0 <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 8001ea6:	4b3c      	ldr	r3, [pc, #240]	; (8001f98 <tick+0x47c>)
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d126      	bne.n	8001efc <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8001eae:	4b39      	ldr	r3, [pc, #228]	; (8001f94 <tick+0x478>)
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	4b3a      	ldr	r3, [pc, #232]	; (8001f9c <tick+0x480>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	da04      	bge.n	8001ec4 <tick+0x3a8>
                    IRDUTY50;
 8001eba:	4b35      	ldr	r3, [pc, #212]	; (8001f90 <tick+0x474>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2234      	movs	r2, #52	; 0x34
 8001ec0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ec2:	e003      	b.n	8001ecc <tick+0x3b0>
                } else {
                    IRDUTY0;
 8001ec4:	4b32      	ldr	r3, [pc, #200]	; (8001f90 <tick+0x474>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8001ecc:	4b31      	ldr	r3, [pc, #196]	; (8001f94 <tick+0x478>)
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	4a30      	ldr	r2, [pc, #192]	; (8001f94 <tick+0x478>)
 8001ed4:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8001ed6:	4b31      	ldr	r3, [pc, #196]	; (8001f9c <tick+0x480>)
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <tick+0x484>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	441a      	add	r2, r3
 8001ee0:	4b2c      	ldr	r3, [pc, #176]	; (8001f94 <tick+0x478>)
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dc6d      	bgt.n	8001fc4 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8001ee8:	4b2a      	ldr	r3, [pc, #168]	; (8001f94 <tick+0x478>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8001eee:	482d      	ldr	r0, [pc, #180]	; (8001fa4 <tick+0x488>)
 8001ef0:	f003 fdae 	bl	8005a50 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
 8001ef4:	2028      	movs	r0, #40	; 0x28
 8001ef6:	f002 f920 	bl	800413a <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8001efa:	e063      	b.n	8001fc4 <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 8001efc:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <tick+0x47c>)
 8001efe:	781b      	ldrb	r3, [r3, #0]
 8001f00:	2b03      	cmp	r3, #3
 8001f02:	d120      	bne.n	8001f46 <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8001f04:	4b23      	ldr	r3, [pc, #140]	; (8001f94 <tick+0x478>)
 8001f06:	691a      	ldr	r2, [r3, #16]
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <tick+0x48c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	da04      	bge.n	8001f1a <tick+0x3fe>
                    IRDUTY50;
 8001f10:	4b1f      	ldr	r3, [pc, #124]	; (8001f90 <tick+0x474>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2234      	movs	r2, #52	; 0x34
 8001f16:	635a      	str	r2, [r3, #52]	; 0x34
 8001f18:	e003      	b.n	8001f22 <tick+0x406>
                    IRDUTY0;
 8001f1a:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <tick+0x474>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8001f22:	4b1c      	ldr	r3, [pc, #112]	; (8001f94 <tick+0x478>)
 8001f24:	691b      	ldr	r3, [r3, #16]
 8001f26:	3301      	adds	r3, #1
 8001f28:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <tick+0x478>)
 8001f2a:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8001f2c:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <tick+0x48c>)
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	4b1e      	ldr	r3, [pc, #120]	; (8001fac <tick+0x490>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	441a      	add	r2, r3
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <tick+0x478>)
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	dc42      	bgt.n	8001fc4 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <tick+0x478>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	701a      	strb	r2, [r3, #0]
            break;
 8001f44:	e03e      	b.n	8001fc4 <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 8001f46:	4b14      	ldr	r3, [pc, #80]	; (8001f98 <tick+0x47c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b05      	cmp	r3, #5
 8001f4c:	d13a      	bne.n	8001fc4 <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8001f4e:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <tick+0x478>)
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	4b17      	ldr	r3, [pc, #92]	; (8001fb0 <tick+0x494>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	da04      	bge.n	8001f64 <tick+0x448>
                    IRDUTY50;
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <tick+0x474>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	2234      	movs	r2, #52	; 0x34
 8001f60:	635a      	str	r2, [r3, #52]	; 0x34
 8001f62:	e003      	b.n	8001f6c <tick+0x450>
                    IRDUTY0;
 8001f64:	4b0a      	ldr	r3, [pc, #40]	; (8001f90 <tick+0x474>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <tick+0x478>)
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	3301      	adds	r3, #1
 8001f72:	4a08      	ldr	r2, [pc, #32]	; (8001f94 <tick+0x478>)
 8001f74:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <tick+0x494>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <tick+0x498>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	441a      	add	r2, r3
 8001f80:	4b04      	ldr	r3, [pc, #16]	; (8001f94 <tick+0x478>)
 8001f82:	691b      	ldr	r3, [r3, #16]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	dc1d      	bgt.n	8001fc4 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8001f88:	4b02      	ldr	r3, [pc, #8]	; (8001f94 <tick+0x478>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
            break;
 8001f8e:	e019      	b.n	8001fc4 <tick+0x4a8>
 8001f90:	200001fc 	.word	0x200001fc
 8001f94:	20000150 	.word	0x20000150
 8001f98:	20000108 	.word	0x20000108
 8001f9c:	08008774 	.word	0x08008774
 8001fa0:	08008778 	.word	0x08008778
 8001fa4:	2000032c 	.word	0x2000032c
 8001fa8:	0800877c 	.word	0x0800877c
 8001fac:	08008780 	.word	0x08008780
 8001fb0:	08008784 	.word	0x08008784
 8001fb4:	08008788 	.word	0x08008788
        default:
            break;
 8001fb8:	bf00      	nop
 8001fba:	e004      	b.n	8001fc6 <tick+0x4aa>
            break;
 8001fbc:	bf00      	nop
 8001fbe:	e002      	b.n	8001fc6 <tick+0x4aa>
            break;
 8001fc0:	bf00      	nop
 8001fc2:	e000      	b.n	8001fc6 <tick+0x4aa>
            break;
 8001fc4:	bf00      	nop
    }
    UNLOCK();
}
 8001fc6:	bf00      	nop
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop

08001fcc <HAL_CAN_RxFifo0MsgPendingCallback>:
    }
}


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8001fd4:	4b09      	ldr	r3, [pc, #36]	; (8001ffc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001fd6:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001fd8:	2100      	movs	r1, #0
 8001fda:	480a      	ldr	r0, [pc, #40]	; (8002004 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001fdc:	f001 fc51 	bl	8003882 <HAL_CAN_GetRxMessage>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d000      	beq.n	8001fe8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8001fe6:	e7fe      	b.n	8001fe6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8001fe8:	4b07      	ldr	r3, [pc, #28]	; (8002008 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	3301      	adds	r3, #1
 8001fee:	4a06      	ldr	r2, [pc, #24]	; (8002008 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001ff0:	6013      	str	r3, [r2, #0]

}
 8001ff2:	bf00      	nop
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000168 	.word	0x20000168
 8002000:	20000170 	.word	0x20000170
 8002004:	200001d4 	.word	0x200001d4
 8002008:	20000164 	.word	0x20000164

0800200c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002014:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002018:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d013      	beq.n	800204c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002024:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002028:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800202c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002030:	2b00      	cmp	r3, #0
 8002032:	d00b      	beq.n	800204c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002034:	e000      	b.n	8002038 <ITM_SendChar+0x2c>
    {
      __NOP();
 8002036:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8002038:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d0f9      	beq.n	8002036 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002042:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800204c:	687b      	ldr	r3, [r7, #4]
}
 800204e:	4618      	mov	r0, r3
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <_write>:
//	return (len);
//}


int _write(int file, char *ptr, int len)
{
 800205a:	b580      	push	{r7, lr}
 800205c:	b086      	sub	sp, #24
 800205e:	af00      	add	r7, sp, #0
 8002060:	60f8      	str	r0, [r7, #12]
 8002062:	60b9      	str	r1, [r7, #8]
 8002064:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
 800206a:	e009      	b.n	8002080 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	60ba      	str	r2, [r7, #8]
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ffc9 	bl	800200c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	3301      	adds	r3, #1
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	dbf1      	blt.n	800206c <_write+0x12>
	}
	return len;
 8002088:	687b      	ldr	r3, [r7, #4]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3718      	adds	r7, #24
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
	...

08002094 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002098:	f000 ffe3 	bl	8003062 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800209c:	f000 f844 	bl	8002128 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020a0:	f000 fb50 	bl	8002744 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80020a4:	f000 fb1e 	bl	80026e4 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80020a8:	f000 f92a 	bl	8002300 <MX_CAN1_Init>
  MX_TIM2_Init();
 80020ac:	f000 f95e 	bl	800236c <MX_TIM2_Init>
  MX_UART8_Init();
 80020b0:	f000 fae8 	bl	8002684 <MX_UART8_Init>
  MX_TIM6_Init();
 80020b4:	f000 fa1e 	bl	80024f4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80020b8:	f000 fa52 	bl	8002560 <MX_TIM7_Init>
  MX_TIM5_Init();
 80020bc:	f000 f9cc 	bl	8002458 <MX_TIM5_Init>
  MX_TIM14_Init();
 80020c0:	f000 fabe 	bl	8002640 <MX_TIM14_Init>
  MX_TIM9_Init();
 80020c4:	f000 fa82 	bl	80025cc <MX_TIM9_Init>
  MX_ADC1_Init();
 80020c8:	f000 f89a 	bl	8002200 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);//direct set
 80020cc:	2200      	movs	r2, #0
 80020ce:	2100      	movs	r1, #0
 80020d0:	2008      	movs	r0, #8
 80020d2:	f002 f816 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//direct set
 80020d6:	2008      	movs	r0, #8
 80020d8:	f002 f82f 	bl	800413a <HAL_NVIC_EnableIRQ>
//  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);//direct set
//  HAL_NVIC_EnableIRQ(EXTI3_IRQn);//direct set

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 80020dc:	2100      	movs	r1, #0
 80020de:	480d      	ldr	r0, [pc, #52]	; (8002114 <main+0x80>)
 80020e0:	f003 fd46 	bl	8005b70 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 80020e4:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <main+0x80>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2234      	movs	r2, #52	; 0x34
 80020ea:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  //HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 80020ec:	480a      	ldr	r0, [pc, #40]	; (8002118 <main+0x84>)
 80020ee:	f003 fc37 	bl	8005960 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 80020f2:	480a      	ldr	r0, [pc, #40]	; (800211c <main+0x88>)
 80020f4:	f003 fc34 	bl	8005960 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim14);//IR NEC timer, 1Mhz
 80020f8:	4809      	ldr	r0, [pc, #36]	; (8002120 <main+0x8c>)
 80020fa:	f003 fc31 	bl	8005960 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  printf("swo printfhihi\n");
 80020fe:	4809      	ldr	r0, [pc, #36]	; (8002124 <main+0x90>)
 8002100:	f005 fe86 	bl	8007e10 <puts>
	  HAL_Delay(500);
 8002104:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002108:	f001 f808 	bl	800311c <HAL_Delay>
//	  HAL_Delay(100);
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
	  //printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  HAL_Delay(200);
 800210c:	20c8      	movs	r0, #200	; 0xc8
 800210e:	f001 f805 	bl	800311c <HAL_Delay>
  {
 8002112:	e7f4      	b.n	80020fe <main+0x6a>
 8002114:	200001fc 	.word	0x200001fc
 8002118:	20000294 	.word	0x20000294
 800211c:	2000032c 	.word	0x2000032c
 8002120:	20000378 	.word	0x20000378
 8002124:	08008748 	.word	0x08008748

08002128 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b094      	sub	sp, #80	; 0x50
 800212c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800212e:	f107 0320 	add.w	r3, r7, #32
 8002132:	2230      	movs	r2, #48	; 0x30
 8002134:	2100      	movs	r1, #0
 8002136:	4618      	mov	r0, r3
 8002138:	f005 fdf4 	bl	8007d24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800213c:	f107 030c 	add.w	r3, r7, #12
 8002140:	2200      	movs	r2, #0
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	605a      	str	r2, [r3, #4]
 8002146:	609a      	str	r2, [r3, #8]
 8002148:	60da      	str	r2, [r3, #12]
 800214a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b2a      	ldr	r3, [pc, #168]	; (80021f8 <SystemClock_Config+0xd0>)
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	4a29      	ldr	r2, [pc, #164]	; (80021f8 <SystemClock_Config+0xd0>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	6413      	str	r3, [r2, #64]	; 0x40
 8002158:	4b27      	ldr	r3, [pc, #156]	; (80021f8 <SystemClock_Config+0xd0>)
 800215a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002164:	4b25      	ldr	r3, [pc, #148]	; (80021fc <SystemClock_Config+0xd4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a24      	ldr	r2, [pc, #144]	; (80021fc <SystemClock_Config+0xd4>)
 800216a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b22      	ldr	r3, [pc, #136]	; (80021fc <SystemClock_Config+0xd4>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800217c:	2301      	movs	r3, #1
 800217e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002180:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002184:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002186:	2302      	movs	r3, #2
 8002188:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800218a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800218e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002190:	2304      	movs	r3, #4
 8002192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8002194:	23d8      	movs	r3, #216	; 0xd8
 8002196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002198:	2302      	movs	r3, #2
 800219a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800219c:	2302      	movs	r3, #2
 800219e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021a0:	f107 0320 	add.w	r3, r7, #32
 80021a4:	4618      	mov	r0, r3
 80021a6:	f002 fac9 	bl	800473c <HAL_RCC_OscConfig>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80021b0:	f000 fbc4 	bl	800293c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80021b4:	f002 fa72 	bl	800469c <HAL_PWREx_EnableOverDrive>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d001      	beq.n	80021c2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80021be:	f000 fbbd 	bl	800293c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021c2:	230f      	movs	r3, #15
 80021c4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021c6:	2302      	movs	r3, #2
 80021c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ca:	2300      	movs	r3, #0
 80021cc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021ce:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80021d2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021d8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	2107      	movs	r1, #7
 80021e0:	4618      	mov	r0, r3
 80021e2:	f002 fd4f 	bl	8004c84 <HAL_RCC_ClockConfig>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80021ec:	f000 fba6 	bl	800293c <Error_Handler>
  }
}
 80021f0:	bf00      	nop
 80021f2:	3750      	adds	r7, #80	; 0x50
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40023800 	.word	0x40023800
 80021fc:	40007000 	.word	0x40007000

08002200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002206:	463b      	mov	r3, r7
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002214:	4a38      	ldr	r2, [pc, #224]	; (80022f8 <MX_ADC1_Init+0xf8>)
 8002216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002218:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800221a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800221e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8002220:	4b34      	ldr	r3, [pc, #208]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002222:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002226:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002228:	4b32      	ldr	r3, [pc, #200]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800222a:	2201      	movs	r2, #1
 800222c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800222e:	4b31      	ldr	r3, [pc, #196]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002230:	2200      	movs	r2, #0
 8002232:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8002234:	4b2f      	ldr	r3, [pc, #188]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002236:	2201      	movs	r2, #1
 8002238:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800223e:	2201      	movs	r2, #1
 8002240:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002242:	4b2c      	ldr	r3, [pc, #176]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002244:	2200      	movs	r2, #0
 8002246:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002248:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800224a:	4a2c      	ldr	r2, [pc, #176]	; (80022fc <MX_ADC1_Init+0xfc>)
 800224c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800224e:	4b29      	ldr	r3, [pc, #164]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002250:	2200      	movs	r2, #0
 8002252:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8002254:	4b27      	ldr	r3, [pc, #156]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002256:	2204      	movs	r2, #4
 8002258:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800225c:	2200      	movs	r2, #0
 800225e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002262:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <MX_ADC1_Init+0xf4>)
 8002264:	2201      	movs	r2, #1
 8002266:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002268:	4822      	ldr	r0, [pc, #136]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800226a:	f000 ff7b 	bl	8003164 <HAL_ADC_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 8002274:	f000 fb62 	bl	800293c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002278:	2301      	movs	r3, #1
 800227a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800227c:	2301      	movs	r3, #1
 800227e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8002280:	2301      	movs	r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002284:	463b      	mov	r3, r7
 8002286:	4619      	mov	r1, r3
 8002288:	481a      	ldr	r0, [pc, #104]	; (80022f4 <MX_ADC1_Init+0xf4>)
 800228a:	f000 ffaf 	bl	80031ec <HAL_ADC_ConfigChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002294:	f000 fb52 	bl	800293c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8002298:	2302      	movs	r3, #2
 800229a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800229c:	2302      	movs	r3, #2
 800229e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022a0:	463b      	mov	r3, r7
 80022a2:	4619      	mov	r1, r3
 80022a4:	4813      	ldr	r0, [pc, #76]	; (80022f4 <MX_ADC1_Init+0xf4>)
 80022a6:	f000 ffa1 	bl	80031ec <HAL_ADC_ConfigChannel>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80022b0:	f000 fb44 	bl	800293c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80022b4:	2303      	movs	r3, #3
 80022b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80022b8:	2303      	movs	r3, #3
 80022ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022bc:	463b      	mov	r3, r7
 80022be:	4619      	mov	r1, r3
 80022c0:	480c      	ldr	r0, [pc, #48]	; (80022f4 <MX_ADC1_Init+0xf4>)
 80022c2:	f000 ff93 	bl	80031ec <HAL_ADC_ConfigChannel>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80022cc:	f000 fb36 	bl	800293c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80022d0:	2304      	movs	r3, #4
 80022d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80022d4:	2304      	movs	r3, #4
 80022d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022d8:	463b      	mov	r3, r7
 80022da:	4619      	mov	r1, r3
 80022dc:	4805      	ldr	r0, [pc, #20]	; (80022f4 <MX_ADC1_Init+0xf4>)
 80022de:	f000 ff85 	bl	80031ec <HAL_ADC_ConfigChannel>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80022e8:	f000 fb28 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	3710      	adds	r7, #16
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	2000018c 	.word	0x2000018c
 80022f8:	40012000 	.word	0x40012000
 80022fc:	0f000001 	.word	0x0f000001

08002300 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002304:	4b17      	ldr	r3, [pc, #92]	; (8002364 <MX_CAN1_Init+0x64>)
 8002306:	4a18      	ldr	r2, [pc, #96]	; (8002368 <MX_CAN1_Init+0x68>)
 8002308:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 800230a:	4b16      	ldr	r3, [pc, #88]	; (8002364 <MX_CAN1_Init+0x64>)
 800230c:	221b      	movs	r2, #27
 800230e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002310:	4b14      	ldr	r3, [pc, #80]	; (8002364 <MX_CAN1_Init+0x64>)
 8002312:	2200      	movs	r2, #0
 8002314:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002316:	4b13      	ldr	r3, [pc, #76]	; (8002364 <MX_CAN1_Init+0x64>)
 8002318:	2200      	movs	r2, #0
 800231a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <MX_CAN1_Init+0x64>)
 800231e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002322:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002324:	4b0f      	ldr	r3, [pc, #60]	; (8002364 <MX_CAN1_Init+0x64>)
 8002326:	2200      	movs	r2, #0
 8002328:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <MX_CAN1_Init+0x64>)
 800232c:	2200      	movs	r2, #0
 800232e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <MX_CAN1_Init+0x64>)
 8002332:	2201      	movs	r2, #1
 8002334:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002336:	4b0b      	ldr	r3, [pc, #44]	; (8002364 <MX_CAN1_Init+0x64>)
 8002338:	2200      	movs	r2, #0
 800233a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800233c:	4b09      	ldr	r3, [pc, #36]	; (8002364 <MX_CAN1_Init+0x64>)
 800233e:	2200      	movs	r2, #0
 8002340:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002342:	4b08      	ldr	r3, [pc, #32]	; (8002364 <MX_CAN1_Init+0x64>)
 8002344:	2200      	movs	r2, #0
 8002346:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <MX_CAN1_Init+0x64>)
 800234a:	2200      	movs	r2, #0
 800234c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800234e:	4805      	ldr	r0, [pc, #20]	; (8002364 <MX_CAN1_Init+0x64>)
 8002350:	f001 f99c 	bl	800368c <HAL_CAN_Init>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d001      	beq.n	800235e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800235a:	f000 faef 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	200001d4 	.word	0x200001d4
 8002368:	40006400 	.word	0x40006400

0800236c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b08e      	sub	sp, #56	; 0x38
 8002370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002372:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002376:	2200      	movs	r2, #0
 8002378:	601a      	str	r2, [r3, #0]
 800237a:	605a      	str	r2, [r3, #4]
 800237c:	609a      	str	r2, [r3, #8]
 800237e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002380:	f107 031c 	add.w	r3, r7, #28
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
 8002388:	605a      	str	r2, [r3, #4]
 800238a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800238c:	463b      	mov	r3, r7
 800238e:	2200      	movs	r2, #0
 8002390:	601a      	str	r2, [r3, #0]
 8002392:	605a      	str	r2, [r3, #4]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	60da      	str	r2, [r3, #12]
 8002398:	611a      	str	r2, [r3, #16]
 800239a:	615a      	str	r2, [r3, #20]
 800239c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800239e:	4b2d      	ldr	r3, [pc, #180]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023a0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023a4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 80023a6:	4b2b      	ldr	r3, [pc, #172]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023a8:	221a      	movs	r2, #26
 80023aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ac:	4b29      	ldr	r3, [pc, #164]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 80023b2:	4b28      	ldr	r3, [pc, #160]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023b4:	2268      	movs	r2, #104	; 0x68
 80023b6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023be:	4b25      	ldr	r3, [pc, #148]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023c4:	4823      	ldr	r0, [pc, #140]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023c6:	f003 fa73 	bl	80058b0 <HAL_TIM_Base_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023d0:	f000 fab4 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023d8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80023de:	4619      	mov	r1, r3
 80023e0:	481c      	ldr	r0, [pc, #112]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023e2:	f003 ff41 	bl	8006268 <HAL_TIM_ConfigClockSource>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d001      	beq.n	80023f0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023ec:	f000 faa6 	bl	800293c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80023f0:	4818      	ldr	r0, [pc, #96]	; (8002454 <MX_TIM2_Init+0xe8>)
 80023f2:	f003 fb5c 	bl	8005aae <HAL_TIM_PWM_Init>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80023fc:	f000 fa9e 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002400:	2300      	movs	r3, #0
 8002402:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002408:	f107 031c 	add.w	r3, r7, #28
 800240c:	4619      	mov	r1, r3
 800240e:	4811      	ldr	r0, [pc, #68]	; (8002454 <MX_TIM2_Init+0xe8>)
 8002410:	f004 fbda 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002414:	4603      	mov	r3, r0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d001      	beq.n	800241e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800241a:	f000 fa8f 	bl	800293c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800241e:	2360      	movs	r3, #96	; 0x60
 8002420:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 8002422:	2333      	movs	r3, #51	; 0x33
 8002424:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	2200      	movs	r2, #0
 8002432:	4619      	mov	r1, r3
 8002434:	4807      	ldr	r0, [pc, #28]	; (8002454 <MX_TIM2_Init+0xe8>)
 8002436:	f003 fe03 	bl	8006040 <HAL_TIM_PWM_ConfigChannel>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d001      	beq.n	8002444 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002440:	f000 fa7c 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002444:	4803      	ldr	r0, [pc, #12]	; (8002454 <MX_TIM2_Init+0xe8>)
 8002446:	f000 fbd7 	bl	8002bf8 <HAL_TIM_MspPostInit>

}
 800244a:	bf00      	nop
 800244c:	3738      	adds	r7, #56	; 0x38
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	200001fc 	.word	0x200001fc

08002458 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
 8002466:	605a      	str	r2, [r3, #4]
 8002468:	609a      	str	r2, [r3, #8]
 800246a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800246c:	1d3b      	adds	r3, r7, #4
 800246e:	2200      	movs	r2, #0
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	605a      	str	r2, [r3, #4]
 8002474:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002476:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <MX_TIM5_Init+0x94>)
 8002478:	4a1d      	ldr	r2, [pc, #116]	; (80024f0 <MX_TIM5_Init+0x98>)
 800247a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 800247c:	4b1b      	ldr	r3, [pc, #108]	; (80024ec <MX_TIM5_Init+0x94>)
 800247e:	2208      	movs	r2, #8
 8002480:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002482:	4b1a      	ldr	r3, [pc, #104]	; (80024ec <MX_TIM5_Init+0x94>)
 8002484:	2200      	movs	r2, #0
 8002486:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60-1;
 8002488:	4b18      	ldr	r3, [pc, #96]	; (80024ec <MX_TIM5_Init+0x94>)
 800248a:	223b      	movs	r2, #59	; 0x3b
 800248c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800248e:	4b17      	ldr	r3, [pc, #92]	; (80024ec <MX_TIM5_Init+0x94>)
 8002490:	2200      	movs	r2, #0
 8002492:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002494:	4b15      	ldr	r3, [pc, #84]	; (80024ec <MX_TIM5_Init+0x94>)
 8002496:	2200      	movs	r2, #0
 8002498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800249a:	4814      	ldr	r0, [pc, #80]	; (80024ec <MX_TIM5_Init+0x94>)
 800249c:	f003 fa08 	bl	80058b0 <HAL_TIM_Base_Init>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80024a6:	f000 fa49 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024b0:	f107 0310 	add.w	r3, r7, #16
 80024b4:	4619      	mov	r1, r3
 80024b6:	480d      	ldr	r0, [pc, #52]	; (80024ec <MX_TIM5_Init+0x94>)
 80024b8:	f003 fed6 	bl	8006268 <HAL_TIM_ConfigClockSource>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80024c2:	f000 fa3b 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024ce:	1d3b      	adds	r3, r7, #4
 80024d0:	4619      	mov	r1, r3
 80024d2:	4806      	ldr	r0, [pc, #24]	; (80024ec <MX_TIM5_Init+0x94>)
 80024d4:	f004 fb78 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80024de:	f000 fa2d 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80024e2:	bf00      	nop
 80024e4:	3720      	adds	r7, #32
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}
 80024ea:	bf00      	nop
 80024ec:	20000248 	.word	0x20000248
 80024f0:	40000c00 	.word	0x40000c00

080024f4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024fa:	1d3b      	adds	r3, r7, #4
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <MX_TIM6_Init+0x64>)
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <MX_TIM6_Init+0x68>)
 8002508:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 800250a:	4b13      	ldr	r3, [pc, #76]	; (8002558 <MX_TIM6_Init+0x64>)
 800250c:	226b      	movs	r2, #107	; 0x6b
 800250e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002510:	4b11      	ldr	r3, [pc, #68]	; (8002558 <MX_TIM6_Init+0x64>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <MX_TIM6_Init+0x64>)
 8002518:	f242 720f 	movw	r2, #9999	; 0x270f
 800251c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800251e:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <MX_TIM6_Init+0x64>)
 8002520:	2200      	movs	r2, #0
 8002522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002524:	480c      	ldr	r0, [pc, #48]	; (8002558 <MX_TIM6_Init+0x64>)
 8002526:	f003 f9c3 	bl	80058b0 <HAL_TIM_Base_Init>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002530:	f000 fa04 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002534:	2300      	movs	r3, #0
 8002536:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002538:	2300      	movs	r3, #0
 800253a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800253c:	1d3b      	adds	r3, r7, #4
 800253e:	4619      	mov	r1, r3
 8002540:	4805      	ldr	r0, [pc, #20]	; (8002558 <MX_TIM6_Init+0x64>)
 8002542:	f004 fb41 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d001      	beq.n	8002550 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800254c:	f000 f9f6 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002550:	bf00      	nop
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	20000294 	.word	0x20000294
 800255c:	40001000 	.word	0x40001000

08002560 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002566:	1d3b      	adds	r3, r7, #4
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002570:	4b14      	ldr	r3, [pc, #80]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <MX_TIM7_Init+0x68>)
 8002574:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8002576:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002578:	226b      	movs	r2, #107	; 0x6b
 800257a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <MX_TIM7_Init+0x64>)
 800257e:	2200      	movs	r2, #0
 8002580:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002582:	4b10      	ldr	r3, [pc, #64]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002584:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002588:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800258a:	4b0e      	ldr	r3, [pc, #56]	; (80025c4 <MX_TIM7_Init+0x64>)
 800258c:	2200      	movs	r2, #0
 800258e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002590:	480c      	ldr	r0, [pc, #48]	; (80025c4 <MX_TIM7_Init+0x64>)
 8002592:	f003 f98d 	bl	80058b0 <HAL_TIM_Base_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800259c:	f000 f9ce 	bl	800293c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a0:	2300      	movs	r3, #0
 80025a2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a4:	2300      	movs	r3, #0
 80025a6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025a8:	1d3b      	adds	r3, r7, #4
 80025aa:	4619      	mov	r1, r3
 80025ac:	4805      	ldr	r0, [pc, #20]	; (80025c4 <MX_TIM7_Init+0x64>)
 80025ae:	f004 fb0b 	bl	8006bc8 <HAL_TIMEx_MasterConfigSynchronization>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d001      	beq.n	80025bc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025b8:	f000 f9c0 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	200002e0 	.word	0x200002e0
 80025c8:	40001400 	.word	0x40001400

080025cc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b084      	sub	sp, #16
 80025d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025d2:	463b      	mov	r3, r7
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	605a      	str	r2, [r3, #4]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <MX_TIM9_Init+0x6c>)
 80025e0:	4a16      	ldr	r2, [pc, #88]	; (800263c <MX_TIM9_Init+0x70>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 80025e4:	4b14      	ldr	r3, [pc, #80]	; (8002638 <MX_TIM9_Init+0x6c>)
 80025e6:	22d7      	movs	r2, #215	; 0xd7
 80025e8:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ea:	4b13      	ldr	r3, [pc, #76]	; (8002638 <MX_TIM9_Init+0x6c>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <MX_TIM9_Init+0x6c>)
 80025f2:	f240 2231 	movw	r2, #561	; 0x231
 80025f6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025f8:	4b0f      	ldr	r3, [pc, #60]	; (8002638 <MX_TIM9_Init+0x6c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025fe:	4b0e      	ldr	r3, [pc, #56]	; (8002638 <MX_TIM9_Init+0x6c>)
 8002600:	2200      	movs	r2, #0
 8002602:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002604:	480c      	ldr	r0, [pc, #48]	; (8002638 <MX_TIM9_Init+0x6c>)
 8002606:	f003 f953 	bl	80058b0 <HAL_TIM_Base_Init>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002610:	f000 f994 	bl	800293c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002614:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002618:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800261a:	463b      	mov	r3, r7
 800261c:	4619      	mov	r1, r3
 800261e:	4806      	ldr	r0, [pc, #24]	; (8002638 <MX_TIM9_Init+0x6c>)
 8002620:	f003 fe22 	bl	8006268 <HAL_TIM_ConfigClockSource>
 8002624:	4603      	mov	r3, r0
 8002626:	2b00      	cmp	r3, #0
 8002628:	d001      	beq.n	800262e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800262a:	f000 f987 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	2000032c 	.word	0x2000032c
 800263c:	40014000 	.word	0x40014000

08002640 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002644:	4b0d      	ldr	r3, [pc, #52]	; (800267c <MX_TIM14_Init+0x3c>)
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <MX_TIM14_Init+0x40>)
 8002648:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 800264a:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_TIM14_Init+0x3c>)
 800264c:	226b      	movs	r2, #107	; 0x6b
 800264e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002650:	4b0a      	ldr	r3, [pc, #40]	; (800267c <MX_TIM14_Init+0x3c>)
 8002652:	2200      	movs	r2, #0
 8002654:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8002656:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_TIM14_Init+0x3c>)
 8002658:	2203      	movs	r2, #3
 800265a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800265c:	4b07      	ldr	r3, [pc, #28]	; (800267c <MX_TIM14_Init+0x3c>)
 800265e:	2200      	movs	r2, #0
 8002660:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002662:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_TIM14_Init+0x3c>)
 8002664:	2200      	movs	r2, #0
 8002666:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002668:	4804      	ldr	r0, [pc, #16]	; (800267c <MX_TIM14_Init+0x3c>)
 800266a:	f003 f921 	bl	80058b0 <HAL_TIM_Base_Init>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d001      	beq.n	8002678 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8002674:	f000 f962 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8002678:	bf00      	nop
 800267a:	bd80      	pop	{r7, pc}
 800267c:	20000378 	.word	0x20000378
 8002680:	40002000 	.word	0x40002000

08002684 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002688:	4b14      	ldr	r3, [pc, #80]	; (80026dc <MX_UART8_Init+0x58>)
 800268a:	4a15      	ldr	r2, [pc, #84]	; (80026e0 <MX_UART8_Init+0x5c>)
 800268c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 800268e:	4b13      	ldr	r3, [pc, #76]	; (80026dc <MX_UART8_Init+0x58>)
 8002690:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002694:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002696:	4b11      	ldr	r3, [pc, #68]	; (80026dc <MX_UART8_Init+0x58>)
 8002698:	2200      	movs	r2, #0
 800269a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800269c:	4b0f      	ldr	r3, [pc, #60]	; (80026dc <MX_UART8_Init+0x58>)
 800269e:	2200      	movs	r2, #0
 80026a0:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 80026a2:	4b0e      	ldr	r3, [pc, #56]	; (80026dc <MX_UART8_Init+0x58>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 80026a8:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <MX_UART8_Init+0x58>)
 80026aa:	220c      	movs	r2, #12
 80026ac:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <MX_UART8_Init+0x58>)
 80026b0:	2200      	movs	r2, #0
 80026b2:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <MX_UART8_Init+0x58>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <MX_UART8_Init+0x58>)
 80026bc:	2200      	movs	r2, #0
 80026be:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <MX_UART8_Init+0x58>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026c6:	4805      	ldr	r0, [pc, #20]	; (80026dc <MX_UART8_Init+0x58>)
 80026c8:	f004 fb2a 	bl	8006d20 <HAL_UART_Init>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80026d2:	f000 f933 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200003c4 	.word	0x200003c4
 80026e0:	40007c00 	.word	0x40007c00

080026e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026e8:	4b14      	ldr	r3, [pc, #80]	; (800273c <MX_USART1_UART_Init+0x58>)
 80026ea:	4a15      	ldr	r2, [pc, #84]	; (8002740 <MX_USART1_UART_Init+0x5c>)
 80026ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026ee:	4b13      	ldr	r3, [pc, #76]	; (800273c <MX_USART1_UART_Init+0x58>)
 80026f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026f6:	4b11      	ldr	r3, [pc, #68]	; (800273c <MX_USART1_UART_Init+0x58>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026fc:	4b0f      	ldr	r3, [pc, #60]	; (800273c <MX_USART1_UART_Init+0x58>)
 80026fe:	2200      	movs	r2, #0
 8002700:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <MX_USART1_UART_Init+0x58>)
 8002704:	2200      	movs	r2, #0
 8002706:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002708:	4b0c      	ldr	r3, [pc, #48]	; (800273c <MX_USART1_UART_Init+0x58>)
 800270a:	220c      	movs	r2, #12
 800270c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800270e:	4b0b      	ldr	r3, [pc, #44]	; (800273c <MX_USART1_UART_Init+0x58>)
 8002710:	2200      	movs	r2, #0
 8002712:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002714:	4b09      	ldr	r3, [pc, #36]	; (800273c <MX_USART1_UART_Init+0x58>)
 8002716:	2200      	movs	r2, #0
 8002718:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800271a:	4b08      	ldr	r3, [pc, #32]	; (800273c <MX_USART1_UART_Init+0x58>)
 800271c:	2200      	movs	r2, #0
 800271e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <MX_USART1_UART_Init+0x58>)
 8002722:	2200      	movs	r2, #0
 8002724:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002726:	4805      	ldr	r0, [pc, #20]	; (800273c <MX_USART1_UART_Init+0x58>)
 8002728:	f004 fafa 	bl	8006d20 <HAL_UART_Init>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d001      	beq.n	8002736 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002732:	f000 f903 	bl	800293c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002736:	bf00      	nop
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	20000448 	.word	0x20000448
 8002740:	40011000 	.word	0x40011000

08002744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b08c      	sub	sp, #48	; 0x30
 8002748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800274a:	f107 031c 	add.w	r3, r7, #28
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
 8002752:	605a      	str	r2, [r3, #4]
 8002754:	609a      	str	r2, [r3, #8]
 8002756:	60da      	str	r2, [r3, #12]
 8002758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800275a:	4b72      	ldr	r3, [pc, #456]	; (8002924 <MX_GPIO_Init+0x1e0>)
 800275c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275e:	4a71      	ldr	r2, [pc, #452]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002760:	f043 0320 	orr.w	r3, r3, #32
 8002764:	6313      	str	r3, [r2, #48]	; 0x30
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276a:	f003 0320 	and.w	r3, r3, #32
 800276e:	61bb      	str	r3, [r7, #24]
 8002770:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002772:	4b6c      	ldr	r3, [pc, #432]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b69      	ldr	r3, [pc, #420]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002786:	617b      	str	r3, [r7, #20]
 8002788:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	4b66      	ldr	r3, [pc, #408]	; (8002924 <MX_GPIO_Init+0x1e0>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a65      	ldr	r2, [pc, #404]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <MX_GPIO_Init+0x1e0>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0301 	and.w	r3, r3, #1
 800279e:	613b      	str	r3, [r7, #16]
 80027a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80027a2:	4b60      	ldr	r3, [pc, #384]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a5f      	ldr	r2, [pc, #380]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027a8:	f043 0310 	orr.w	r3, r3, #16
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b5d      	ldr	r3, [pc, #372]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0310 	and.w	r3, r3, #16
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ba:	4b5a      	ldr	r3, [pc, #360]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027be:	4a59      	ldr	r2, [pc, #356]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027c0:	f043 0302 	orr.w	r3, r3, #2
 80027c4:	6313      	str	r3, [r2, #48]	; 0x30
 80027c6:	4b57      	ldr	r3, [pc, #348]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	60bb      	str	r3, [r7, #8]
 80027d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d2:	4b54      	ldr	r3, [pc, #336]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d6:	4a53      	ldr	r2, [pc, #332]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027d8:	f043 0308 	orr.w	r3, r3, #8
 80027dc:	6313      	str	r3, [r2, #48]	; 0x30
 80027de:	4b51      	ldr	r3, [pc, #324]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ea:	4b4e      	ldr	r3, [pc, #312]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	4a4d      	ldr	r2, [pc, #308]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	6313      	str	r3, [r2, #48]	; 0x30
 80027f6:	4b4b      	ldr	r3, [pc, #300]	; (8002924 <MX_GPIO_Init+0x1e0>)
 80027f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fa:	f003 0304 	and.w	r3, r3, #4
 80027fe:	603b      	str	r3, [r7, #0]
 8002800:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_Trigger6_GPIO_Port, USS_Trigger6_Pin, GPIO_PIN_RESET);
 8002802:	2200      	movs	r2, #0
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	4848      	ldr	r0, [pc, #288]	; (8002928 <MX_GPIO_Init+0x1e4>)
 8002808:	f001 ff16 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 800280c:	2200      	movs	r2, #0
 800280e:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8002812:	4846      	ldr	r0, [pc, #280]	; (800292c <MX_GPIO_Init+0x1e8>)
 8002814:	f001 ff10 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8002818:	2200      	movs	r2, #0
 800281a:	f247 1120 	movw	r1, #28960	; 0x7120
 800281e:	4844      	ldr	r0, [pc, #272]	; (8002930 <MX_GPIO_Init+0x1ec>)
 8002820:	f001 ff0a 	bl	8004638 <HAL_GPIO_WritePin>
                          |USS_Trigger1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin, GPIO_PIN_RESET);
 8002824:	2200      	movs	r2, #0
 8002826:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 800282a:	4842      	ldr	r0, [pc, #264]	; (8002934 <MX_GPIO_Init+0x1f0>)
 800282c:	f001 ff04 	bl	8004638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USS_Trigger6_Pin */
  GPIO_InitStruct.Pin = USS_Trigger6_Pin;
 8002830:	2380      	movs	r3, #128	; 0x80
 8002832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002834:	2301      	movs	r3, #1
 8002836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800283c:	2300      	movs	r3, #0
 800283e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USS_Trigger6_GPIO_Port, &GPIO_InitStruct);
 8002840:	f107 031c 	add.w	r3, r7, #28
 8002844:	4619      	mov	r1, r3
 8002846:	4838      	ldr	r0, [pc, #224]	; (8002928 <MX_GPIO_Init+0x1e4>)
 8002848:	f001 fd32 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 800284c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002852:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002856:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002858:	2301      	movs	r3, #1
 800285a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 800285c:	f107 031c 	add.w	r3, r7, #28
 8002860:	4619      	mov	r1, r3
 8002862:	4835      	ldr	r0, [pc, #212]	; (8002938 <MX_GPIO_Init+0x1f4>)
 8002864:	f001 fd24 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8002868:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800286c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800286e:	2301      	movs	r3, #1
 8002870:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002872:	2300      	movs	r3, #0
 8002874:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002876:	2300      	movs	r3, #0
 8002878:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800287a:	f107 031c 	add.w	r3, r7, #28
 800287e:	4619      	mov	r1, r3
 8002880:	482a      	ldr	r0, [pc, #168]	; (800292c <MX_GPIO_Init+0x1e8>)
 8002882:	f001 fd15 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger2_Pin Rsig_Pin Gsig_Pin Bsig_Pin
                           USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8002886:	f247 1320 	movw	r3, #28960	; 0x7120
 800288a:	61fb      	str	r3, [r7, #28]
                          |USS_Trigger1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800288c:	2301      	movs	r3, #1
 800288e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002890:	2300      	movs	r3, #0
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002898:	f107 031c 	add.w	r3, r7, #28
 800289c:	4619      	mov	r1, r3
 800289e:	4824      	ldr	r0, [pc, #144]	; (8002930 <MX_GPIO_Init+0x1ec>)
 80028a0:	f001 fd06 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data2_Pin USS_Data4_Pin USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data2_Pin|USS_Data4_Pin|USS_Data1_Pin;
 80028a4:	f44f 7311 	mov.w	r3, #580	; 0x244
 80028a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028aa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028b0:	2301      	movs	r3, #1
 80028b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028b4:	f107 031c 	add.w	r3, r7, #28
 80028b8:	4619      	mov	r1, r3
 80028ba:	481d      	ldr	r0, [pc, #116]	; (8002930 <MX_GPIO_Init+0x1ec>)
 80028bc:	f001 fcf8 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger5_Pin USS_Trigger3_Pin USS_Trigger4_Pin */
  GPIO_InitStruct.Pin = USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin;
 80028c0:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80028c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c6:	2301      	movs	r3, #1
 80028c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ce:	2300      	movs	r3, #0
 80028d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028d2:	f107 031c 	add.w	r3, r7, #28
 80028d6:	4619      	mov	r1, r3
 80028d8:	4816      	ldr	r0, [pc, #88]	; (8002934 <MX_GPIO_Init+0x1f0>)
 80028da:	f001 fce9 	bl	80042b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data5_Pin USS_Data3_Pin */
  GPIO_InitStruct.Pin = USS_Data5_Pin|USS_Data3_Pin;
 80028de:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80028ea:	2301      	movs	r3, #1
 80028ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	480f      	ldr	r0, [pc, #60]	; (8002934 <MX_GPIO_Init+0x1f0>)
 80028f6:	f001 fcdb 	bl	80042b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80028fa:	2200      	movs	r2, #0
 80028fc:	2100      	movs	r1, #0
 80028fe:	2017      	movs	r0, #23
 8002900:	f001 fbff 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002904:	2017      	movs	r0, #23
 8002906:	f001 fc18 	bl	800413a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800290a:	2200      	movs	r2, #0
 800290c:	2100      	movs	r1, #0
 800290e:	2028      	movs	r0, #40	; 0x28
 8002910:	f001 fbf7 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002914:	2028      	movs	r0, #40	; 0x28
 8002916:	f001 fc10 	bl	800413a <HAL_NVIC_EnableIRQ>

}
 800291a:	bf00      	nop
 800291c:	3730      	adds	r7, #48	; 0x30
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800
 8002928:	40021400 	.word	0x40021400
 800292c:	40020400 	.word	0x40020400
 8002930:	40020c00 	.word	0x40020c00
 8002934:	40020800 	.word	0x40020800
 8002938:	40021000 	.word	0x40021000

0800293c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002940:	b672      	cpsid	i
}
 8002942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002944:	e7fe      	b.n	8002944 <Error_Handler+0x8>
	...

08002948 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800294e:	4b0f      	ldr	r3, [pc, #60]	; (800298c <HAL_MspInit+0x44>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_MspInit+0x44>)
 8002954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002958:	6413      	str	r3, [r2, #64]	; 0x40
 800295a:	4b0c      	ldr	r3, [pc, #48]	; (800298c <HAL_MspInit+0x44>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002962:	607b      	str	r3, [r7, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	; (800298c <HAL_MspInit+0x44>)
 8002968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296a:	4a08      	ldr	r2, [pc, #32]	; (800298c <HAL_MspInit+0x44>)
 800296c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002970:	6453      	str	r3, [r2, #68]	; 0x44
 8002972:	4b06      	ldr	r3, [pc, #24]	; (800298c <HAL_MspInit+0x44>)
 8002974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297a:	603b      	str	r3, [r7, #0]
 800297c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800297e:	bf00      	nop
 8002980:	370c      	adds	r7, #12
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800

08002990 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b08a      	sub	sp, #40	; 0x28
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002998:	f107 0314 	add.w	r3, r7, #20
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	605a      	str	r2, [r3, #4]
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	60da      	str	r2, [r3, #12]
 80029a6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <HAL_ADC_MspInit+0x74>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d123      	bne.n	80029fa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029b2:	4b15      	ldr	r3, [pc, #84]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	4a14      	ldr	r2, [pc, #80]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029bc:	6453      	str	r3, [r2, #68]	; 0x44
 80029be:	4b12      	ldr	r3, [pc, #72]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c6:	613b      	str	r3, [r7, #16]
 80029c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ca:	4b0f      	ldr	r3, [pc, #60]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	4a0e      	ldr	r2, [pc, #56]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029d0:	f043 0301 	orr.w	r3, r3, #1
 80029d4:	6313      	str	r3, [r2, #48]	; 0x30
 80029d6:	4b0c      	ldr	r3, [pc, #48]	; (8002a08 <HAL_ADC_MspInit+0x78>)
 80029d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80029e2:	231e      	movs	r3, #30
 80029e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029e6:	2303      	movs	r3, #3
 80029e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ea:	2300      	movs	r3, #0
 80029ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	; (8002a0c <HAL_ADC_MspInit+0x7c>)
 80029f6:	f001 fc5b 	bl	80042b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	; 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40012000 	.word	0x40012000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	; 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_CAN_MspInit+0x8c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12f      	bne.n	8002a92 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8002a32:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	4a1a      	ldr	r2, [pc, #104]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a3e:	4b18      	ldr	r3, [pc, #96]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a46:	613b      	str	r3, [r7, #16]
 8002a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a4a:	4b15      	ldr	r3, [pc, #84]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a50:	f043 0308 	orr.w	r3, r3, #8
 8002a54:	6313      	str	r3, [r2, #48]	; 0x30
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <HAL_CAN_MspInit+0x90>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	f003 0308 	and.w	r3, r3, #8
 8002a5e:	60fb      	str	r3, [r7, #12]
 8002a60:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a62:	2303      	movs	r3, #3
 8002a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a66:	2302      	movs	r3, #2
 8002a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8002a72:	2309      	movs	r3, #9
 8002a74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a76:	f107 0314 	add.w	r3, r7, #20
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4809      	ldr	r0, [pc, #36]	; (8002aa4 <HAL_CAN_MspInit+0x94>)
 8002a7e:	f001 fc17 	bl	80042b0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002a82:	2200      	movs	r2, #0
 8002a84:	2100      	movs	r1, #0
 8002a86:	2014      	movs	r0, #20
 8002a88:	f001 fb3b 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002a8c:	2014      	movs	r0, #20
 8002a8e:	f001 fb54 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8002a92:	bf00      	nop
 8002a94:	3728      	adds	r7, #40	; 0x28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	40006400 	.word	0x40006400
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020c00 	.word	0x40020c00

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abe:	4a48      	ldr	r2, [pc, #288]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	61fb      	str	r3, [r7, #28]
 8002ad0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002ad2:	e080      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a42      	ldr	r2, [pc, #264]	; (8002be4 <HAL_TIM_Base_MspInit+0x13c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d114      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ade:	4b40      	ldr	r3, [pc, #256]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a3f      	ldr	r2, [pc, #252]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002ae4:	f043 0308 	orr.w	r3, r3, #8
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b3d      	ldr	r3, [pc, #244]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	61bb      	str	r3, [r7, #24]
 8002af4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2032      	movs	r0, #50	; 0x32
 8002afc:	f001 fb01 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002b00:	2032      	movs	r0, #50	; 0x32
 8002b02:	f001 fb1a 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8002b06:	e066      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a36      	ldr	r2, [pc, #216]	; (8002be8 <HAL_TIM_Base_MspInit+0x140>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d114      	bne.n	8002b3c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b12:	4b33      	ldr	r3, [pc, #204]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a32      	ldr	r2, [pc, #200]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b18:	f043 0310 	orr.w	r3, r3, #16
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b30      	ldr	r3, [pc, #192]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0310 	and.w	r3, r3, #16
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	2036      	movs	r0, #54	; 0x36
 8002b30:	f001 fae7 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b34:	2036      	movs	r0, #54	; 0x36
 8002b36:	f001 fb00 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8002b3a:	e04c      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2a      	ldr	r2, [pc, #168]	; (8002bec <HAL_TIM_Base_MspInit+0x144>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d114      	bne.n	8002b70 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4a:	4a25      	ldr	r2, [pc, #148]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b4c:	f043 0320 	orr.w	r3, r3, #32
 8002b50:	6413      	str	r3, [r2, #64]	; 0x40
 8002b52:	4b23      	ldr	r3, [pc, #140]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	613b      	str	r3, [r7, #16]
 8002b5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002b5e:	2200      	movs	r2, #0
 8002b60:	2100      	movs	r1, #0
 8002b62:	2037      	movs	r0, #55	; 0x37
 8002b64:	f001 facd 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002b68:	2037      	movs	r0, #55	; 0x37
 8002b6a:	f001 fae6 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8002b6e:	e032      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <HAL_TIM_Base_MspInit+0x148>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d114      	bne.n	8002ba4 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7e:	4a18      	ldr	r2, [pc, #96]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b84:	6453      	str	r3, [r2, #68]	; 0x44
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8002b92:	2200      	movs	r2, #0
 8002b94:	2100      	movs	r1, #0
 8002b96:	2018      	movs	r0, #24
 8002b98:	f001 fab3 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002b9c:	2018      	movs	r0, #24
 8002b9e:	f001 facc 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8002ba2:	e018      	b.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a12      	ldr	r2, [pc, #72]	; (8002bf4 <HAL_TIM_Base_MspInit+0x14c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d113      	bne.n	8002bd6 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bae:	4b0c      	ldr	r3, [pc, #48]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	4a0b      	ldr	r2, [pc, #44]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002bb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <HAL_TIM_Base_MspInit+0x138>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	60bb      	str	r3, [r7, #8]
 8002bc4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	202d      	movs	r0, #45	; 0x2d
 8002bcc:	f001 fa99 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bd0:	202d      	movs	r0, #45	; 0x2d
 8002bd2:	f001 fab2 	bl	800413a <HAL_NVIC_EnableIRQ>
}
 8002bd6:	bf00      	nop
 8002bd8:	3720      	adds	r7, #32
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40000c00 	.word	0x40000c00
 8002be8:	40001000 	.word	0x40001000
 8002bec:	40001400 	.word	0x40001400
 8002bf0:	40014000 	.word	0x40014000
 8002bf4:	40002000 	.word	0x40002000

08002bf8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c00:	f107 030c 	add.w	r3, r7, #12
 8002c04:	2200      	movs	r2, #0
 8002c06:	601a      	str	r2, [r3, #0]
 8002c08:	605a      	str	r2, [r3, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c18:	d11b      	bne.n	8002c52 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c1a:	4b10      	ldr	r3, [pc, #64]	; (8002c5c <HAL_TIM_MspPostInit+0x64>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a0f      	ldr	r2, [pc, #60]	; (8002c5c <HAL_TIM_MspPostInit+0x64>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b0d      	ldr	r3, [pc, #52]	; (8002c5c <HAL_TIM_MspPostInit+0x64>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	60bb      	str	r3, [r7, #8]
 8002c30:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002c32:	2320      	movs	r3, #32
 8002c34:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c36:	2302      	movs	r3, #2
 8002c38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c46:	f107 030c 	add.w	r3, r7, #12
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	4804      	ldr	r0, [pc, #16]	; (8002c60 <HAL_TIM_MspPostInit+0x68>)
 8002c4e:	f001 fb2f 	bl	80042b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3720      	adds	r7, #32
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800
 8002c60:	40020000 	.word	0x40020000

08002c64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b0ac      	sub	sp, #176	; 0xb0
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c7c:	f107 0318 	add.w	r3, r7, #24
 8002c80:	2284      	movs	r2, #132	; 0x84
 8002c82:	2100      	movs	r1, #0
 8002c84:	4618      	mov	r0, r3
 8002c86:	f005 f84d 	bl	8007d24 <memset>
  if(huart->Instance==UART8)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_UART_MspInit+0x144>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d144      	bne.n	8002d1e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002c94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c98:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c9e:	f107 0318 	add.w	r3, r7, #24
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f002 fa14 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002cae:	f7ff fe45 	bl	800293c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8002cb2:	4b3e      	ldr	r3, [pc, #248]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	4a3d      	ldr	r2, [pc, #244]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cbe:	4b3b      	ldr	r3, [pc, #236]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	617b      	str	r3, [r7, #20]
 8002cc8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002cca:	4b38      	ldr	r3, [pc, #224]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cd0:	f043 0310 	orr.w	r3, r3, #16
 8002cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd6:	4b35      	ldr	r3, [pc, #212]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	f003 0310 	and.w	r3, r3, #16
 8002cde:	613b      	str	r3, [r7, #16]
 8002ce0:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cfa:	2308      	movs	r3, #8
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002d00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d04:	4619      	mov	r1, r3
 8002d06:	482a      	ldr	r0, [pc, #168]	; (8002db0 <HAL_UART_MspInit+0x14c>)
 8002d08:	f001 fad2 	bl	80042b0 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2100      	movs	r1, #0
 8002d10:	2053      	movs	r0, #83	; 0x53
 8002d12:	f001 f9f6 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002d16:	2053      	movs	r0, #83	; 0x53
 8002d18:	f001 fa0f 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d1c:	e03f      	b.n	8002d9e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a24      	ldr	r2, [pc, #144]	; (8002db4 <HAL_UART_MspInit+0x150>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d13a      	bne.n	8002d9e <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d28:	2340      	movs	r3, #64	; 0x40
 8002d2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d30:	f107 0318 	add.w	r3, r7, #24
 8002d34:	4618      	mov	r0, r3
 8002d36:	f002 f9cb 	bl	80050d0 <HAL_RCCEx_PeriphCLKConfig>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8002d40:	f7ff fdfc 	bl	800293c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d44:	4b19      	ldr	r3, [pc, #100]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d4a:	f043 0310 	orr.w	r3, r3, #16
 8002d4e:	6453      	str	r3, [r2, #68]	; 0x44
 8002d50:	4b16      	ldr	r3, [pc, #88]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	f003 0310 	and.w	r3, r3, #16
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d5c:	4b13      	ldr	r3, [pc, #76]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d60:	4a12      	ldr	r2, [pc, #72]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d62:	f043 0302 	orr.w	r3, r3, #2
 8002d66:	6313      	str	r3, [r2, #48]	; 0x30
 8002d68:	4b10      	ldr	r3, [pc, #64]	; (8002dac <HAL_UART_MspInit+0x148>)
 8002d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6c:	f003 0302 	and.w	r3, r3, #2
 8002d70:	60bb      	str	r3, [r7, #8]
 8002d72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d74:	23c0      	movs	r3, #192	; 0xc0
 8002d76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d86:	2303      	movs	r3, #3
 8002d88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d8c:	2307      	movs	r3, #7
 8002d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002d96:	4619      	mov	r1, r3
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_UART_MspInit+0x154>)
 8002d9a:	f001 fa89 	bl	80042b0 <HAL_GPIO_Init>
}
 8002d9e:	bf00      	nop
 8002da0:	37b0      	adds	r7, #176	; 0xb0
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}
 8002da6:	bf00      	nop
 8002da8:	40007c00 	.word	0x40007c00
 8002dac:	40023800 	.word	0x40023800
 8002db0:	40021000 	.word	0x40021000
 8002db4:	40011000 	.word	0x40011000
 8002db8:	40020400 	.word	0x40020400

08002dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002dc0:	e7fe      	b.n	8002dc0 <NMI_Handler+0x4>

08002dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002dc6:	e7fe      	b.n	8002dc6 <HardFault_Handler+0x4>

08002dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002dcc:	e7fe      	b.n	8002dcc <MemManage_Handler+0x4>

08002dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002dce:	b480      	push	{r7}
 8002dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002dd2:	e7fe      	b.n	8002dd2 <BusFault_Handler+0x4>

08002dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002dd8:	e7fe      	b.n	8002dd8 <UsageFault_Handler+0x4>

08002dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002dde:	bf00      	nop
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002dec:	bf00      	nop
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002df6:	b480      	push	{r7}
 8002df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002dfa:	bf00      	nop
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr

08002e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e08:	f000 f968 	bl	80030dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e0c:	bf00      	nop
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002e14:	4802      	ldr	r0, [pc, #8]	; (8002e20 <CAN1_RX0_IRQHandler+0x10>)
 8002e16:	f000 fe46 	bl	8003aa6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	200001d4 	.word	0x200001d4

08002e24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8002e28:	2040      	movs	r0, #64	; 0x40
 8002e2a:	f001 fc1f 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data5_Pin);
 8002e2e:	2080      	movs	r0, #128	; 0x80
 8002e30:	f001 fc1c 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data2_Pin);
 8002e34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002e38:	f001 fc18 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002e3c:	bf00      	nop
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8002e44:	4802      	ldr	r0, [pc, #8]	; (8002e50 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002e46:	f002 ffdb 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	2000032c 	.word	0x2000032c

08002e54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data3_Pin);
 8002e58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002e5c:	f001 fc06 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8002e60:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002e64:	f001 fc02 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002e68:	bf00      	nop
 8002e6a:	bd80      	pop	{r7, pc}

08002e6c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002e70:	4802      	ldr	r0, [pc, #8]	; (8002e7c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002e72:	f002 ffc5 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002e76:	bf00      	nop
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	20000378 	.word	0x20000378

08002e80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002e84:	4802      	ldr	r0, [pc, #8]	; (8002e90 <TIM5_IRQHandler+0x10>)
 8002e86:	f002 ffbb 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002e8a:	bf00      	nop
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	20000248 	.word	0x20000248

08002e94 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002e98:	4802      	ldr	r0, [pc, #8]	; (8002ea4 <TIM6_DAC_IRQHandler+0x10>)
 8002e9a:	f002 ffb1 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002e9e:	bf00      	nop
 8002ea0:	bd80      	pop	{r7, pc}
 8002ea2:	bf00      	nop
 8002ea4:	20000294 	.word	0x20000294

08002ea8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002eac:	4802      	ldr	r0, [pc, #8]	; (8002eb8 <TIM7_IRQHandler+0x10>)
 8002eae:	f002 ffa7 	bl	8005e00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002eb2:	bf00      	nop
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	200002e0 	.word	0x200002e0

08002ebc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002ec0:	4802      	ldr	r0, [pc, #8]	; (8002ecc <UART8_IRQHandler+0x10>)
 8002ec2:	f003 ff7b 	bl	8006dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	200003c4 	.word	0x200003c4

08002ed0 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USS_Data4_Pin);
 8002ed4:	2004      	movs	r0, #4
 8002ed6:	f001 fbc9 	bl	800466c <HAL_GPIO_EXTI_IRQHandler>
}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}

08002ede <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b086      	sub	sp, #24
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	60f8      	str	r0, [r7, #12]
 8002ee6:	60b9      	str	r1, [r7, #8]
 8002ee8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	617b      	str	r3, [r7, #20]
 8002eee:	e00a      	b.n	8002f06 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002ef0:	f3af 8000 	nop.w
 8002ef4:	4601      	mov	r1, r0
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	60ba      	str	r2, [r7, #8]
 8002efc:	b2ca      	uxtb	r2, r1
 8002efe:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	3301      	adds	r3, #1
 8002f04:	617b      	str	r3, [r7, #20]
 8002f06:	697a      	ldr	r2, [r7, #20]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	dbf0      	blt.n	8002ef0 <_read+0x12>
	}

return len;
 8002f0e:	687b      	ldr	r3, [r7, #4]
}
 8002f10:	4618      	mov	r0, r3
 8002f12:	3718      	adds	r7, #24
 8002f14:	46bd      	mov	sp, r7
 8002f16:	bd80      	pop	{r7, pc}

08002f18 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
	return -1;
 8002f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
 8002f38:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f40:	605a      	str	r2, [r3, #4]
	return 0;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <_isatty>:

int _isatty(int file)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
	return 1;
 8002f58:	2301      	movs	r3, #1
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f66:	b480      	push	{r7}
 8002f68:	b085      	sub	sp, #20
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	60f8      	str	r0, [r7, #12]
 8002f6e:	60b9      	str	r1, [r7, #8]
 8002f70:	607a      	str	r2, [r7, #4]
	return 0;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <_sbrk+0x5c>)
 8002f8a:	4b15      	ldr	r3, [pc, #84]	; (8002fe0 <_sbrk+0x60>)
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f94:	4b13      	ldr	r3, [pc, #76]	; (8002fe4 <_sbrk+0x64>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d102      	bne.n	8002fa2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f9c:	4b11      	ldr	r3, [pc, #68]	; (8002fe4 <_sbrk+0x64>)
 8002f9e:	4a12      	ldr	r2, [pc, #72]	; (8002fe8 <_sbrk+0x68>)
 8002fa0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fa2:	4b10      	ldr	r3, [pc, #64]	; (8002fe4 <_sbrk+0x64>)
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d207      	bcs.n	8002fc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fb0:	f004 fe8e 	bl	8007cd0 <__errno>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	220c      	movs	r2, #12
 8002fb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fba:	f04f 33ff 	mov.w	r3, #4294967295
 8002fbe:	e009      	b.n	8002fd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fc0:	4b08      	ldr	r3, [pc, #32]	; (8002fe4 <_sbrk+0x64>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fc6:	4b07      	ldr	r3, [pc, #28]	; (8002fe4 <_sbrk+0x64>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4413      	add	r3, r2
 8002fce:	4a05      	ldr	r2, [pc, #20]	; (8002fe4 <_sbrk+0x64>)
 8002fd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3718      	adds	r7, #24
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	20050000 	.word	0x20050000
 8002fe0:	00000400 	.word	0x00000400
 8002fe4:	200004cc 	.word	0x200004cc
 8002fe8:	20000500 	.word	0x20000500

08002fec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002fec:	b480      	push	{r7}
 8002fee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ff0:	4b06      	ldr	r3, [pc, #24]	; (800300c <SystemInit+0x20>)
 8002ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff6:	4a05      	ldr	r2, [pc, #20]	; (800300c <SystemInit+0x20>)
 8002ff8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ffc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr
 800300a:	bf00      	nop
 800300c:	e000ed00 	.word	0xe000ed00

08003010 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003010:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003048 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003014:	480d      	ldr	r0, [pc, #52]	; (800304c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003016:	490e      	ldr	r1, [pc, #56]	; (8003050 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003018:	4a0e      	ldr	r2, [pc, #56]	; (8003054 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800301a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800301c:	e002      	b.n	8003024 <LoopCopyDataInit>

0800301e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003020:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003022:	3304      	adds	r3, #4

08003024 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003024:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003026:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003028:	d3f9      	bcc.n	800301e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800302a:	4a0b      	ldr	r2, [pc, #44]	; (8003058 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800302c:	4c0b      	ldr	r4, [pc, #44]	; (800305c <LoopFillZerobss+0x26>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003030:	e001      	b.n	8003036 <LoopFillZerobss>

08003032 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003032:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003034:	3204      	adds	r2, #4

08003036 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003036:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003038:	d3fb      	bcc.n	8003032 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800303a:	f7ff ffd7 	bl	8002fec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800303e:	f004 fe4d 	bl	8007cdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003042:	f7ff f827 	bl	8002094 <main>
  bx  lr    
 8003046:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003048:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800304c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003050:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003054:	08008818 	.word	0x08008818
  ldr r2, =_sbss
 8003058:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800305c:	20000500 	.word	0x20000500

08003060 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003060:	e7fe      	b.n	8003060 <ADC_IRQHandler>

08003062 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003066:	2003      	movs	r0, #3
 8003068:	f001 f840 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800306c:	200f      	movs	r0, #15
 800306e:	f000 f805 	bl	800307c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003072:	f7ff fc69 	bl	8002948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	bd80      	pop	{r7, pc}

0800307c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800307c:	b580      	push	{r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003084:	4b12      	ldr	r3, [pc, #72]	; (80030d0 <HAL_InitTick+0x54>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b12      	ldr	r3, [pc, #72]	; (80030d4 <HAL_InitTick+0x58>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4619      	mov	r1, r3
 800308e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003092:	fbb3 f3f1 	udiv	r3, r3, r1
 8003096:	fbb2 f3f3 	udiv	r3, r2, r3
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f869 	bl	8004172 <HAL_SYSTICK_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e00e      	b.n	80030c8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2b0f      	cmp	r3, #15
 80030ae:	d80a      	bhi.n	80030c6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030b0:	2200      	movs	r2, #0
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	f04f 30ff 	mov.w	r0, #4294967295
 80030b8:	f001 f823 	bl	8004102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030bc:	4a06      	ldr	r2, [pc, #24]	; (80030d8 <HAL_InitTick+0x5c>)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	20000000 	.word	0x20000000
 80030d4:	20000008 	.word	0x20000008
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e0:	4b06      	ldr	r3, [pc, #24]	; (80030fc <HAL_IncTick+0x20>)
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	461a      	mov	r2, r3
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_IncTick+0x24>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4413      	add	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	; (8003100 <HAL_IncTick+0x24>)
 80030ee:	6013      	str	r3, [r2, #0]
}
 80030f0:	bf00      	nop
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000008 	.word	0x20000008
 8003100:	200004ec 	.word	0x200004ec

08003104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003104:	b480      	push	{r7}
 8003106:	af00      	add	r7, sp, #0
  return uwTick;
 8003108:	4b03      	ldr	r3, [pc, #12]	; (8003118 <HAL_GetTick+0x14>)
 800310a:	681b      	ldr	r3, [r3, #0]
}
 800310c:	4618      	mov	r0, r3
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200004ec 	.word	0x200004ec

0800311c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b084      	sub	sp, #16
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003124:	f7ff ffee 	bl	8003104 <HAL_GetTick>
 8003128:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003134:	d005      	beq.n	8003142 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_Delay+0x44>)
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	461a      	mov	r2, r3
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	4413      	add	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003142:	bf00      	nop
 8003144:	f7ff ffde 	bl	8003104 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	68fa      	ldr	r2, [r7, #12]
 8003150:	429a      	cmp	r2, r3
 8003152:	d8f7      	bhi.n	8003144 <HAL_Delay+0x28>
  {
  }
}
 8003154:	bf00      	nop
 8003156:	bf00      	nop
 8003158:	3710      	adds	r7, #16
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000008 	.word	0x20000008

08003164 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b084      	sub	sp, #16
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800316c:	2300      	movs	r3, #0
 800316e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e031      	b.n	80031de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f7ff fc04 	bl	8002990 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d116      	bne.n	80031d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a6:	4b10      	ldr	r3, [pc, #64]	; (80031e8 <HAL_ADC_Init+0x84>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	f043 0202 	orr.w	r2, r3, #2
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80031b2:	6878      	ldr	r0, [r7, #4]
 80031b4:	f000 f970 	bl	8003498 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c2:	f023 0303 	bic.w	r3, r3, #3
 80031c6:	f043 0201 	orr.w	r2, r3, #1
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	641a      	str	r2, [r3, #64]	; 0x40
 80031ce:	e001      	b.n	80031d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	ffffeefd 	.word	0xffffeefd

080031ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80031f6:	2300      	movs	r3, #0
 80031f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003200:	2b01      	cmp	r3, #1
 8003202:	d101      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x1c>
 8003204:	2302      	movs	r3, #2
 8003206:	e136      	b.n	8003476 <HAL_ADC_ConfigChannel+0x28a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b09      	cmp	r3, #9
 8003216:	d93a      	bls.n	800328e <HAL_ADC_ConfigChannel+0xa2>
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003220:	d035      	beq.n	800328e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	68d9      	ldr	r1, [r3, #12]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	4613      	mov	r3, r2
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4413      	add	r3, r2
 8003236:	3b1e      	subs	r3, #30
 8003238:	2207      	movs	r2, #7
 800323a:	fa02 f303 	lsl.w	r3, r2, r3
 800323e:	43da      	mvns	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	400a      	ands	r2, r1
 8003246:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a8d      	ldr	r2, [pc, #564]	; (8003484 <HAL_ADC_ConfigChannel+0x298>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d10a      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68d9      	ldr	r1, [r3, #12]
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	061a      	lsls	r2, r3, #24
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	e035      	b.n	80032d4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	4618      	mov	r0, r3
 800327a:	4603      	mov	r3, r0
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4403      	add	r3, r0
 8003280:	3b1e      	subs	r3, #30
 8003282:	409a      	lsls	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800328c:	e022      	b.n	80032d4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	6919      	ldr	r1, [r3, #16]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	b29b      	uxth	r3, r3
 800329a:	461a      	mov	r2, r3
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	2207      	movs	r2, #7
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43da      	mvns	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	400a      	ands	r2, r1
 80032b0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6919      	ldr	r1, [r3, #16]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	689a      	ldr	r2, [r3, #8]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	4618      	mov	r0, r3
 80032c4:	4603      	mov	r3, r0
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4403      	add	r3, r0
 80032ca:	409a      	lsls	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	2b06      	cmp	r3, #6
 80032da:	d824      	bhi.n	8003326 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	4413      	add	r3, r2
 80032ec:	3b05      	subs	r3, #5
 80032ee:	221f      	movs	r2, #31
 80032f0:	fa02 f303 	lsl.w	r3, r2, r3
 80032f4:	43da      	mvns	r2, r3
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	400a      	ands	r2, r1
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	4618      	mov	r0, r3
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	4413      	add	r3, r2
 8003316:	3b05      	subs	r3, #5
 8003318:	fa00 f203 	lsl.w	r2, r0, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	430a      	orrs	r2, r1
 8003322:	635a      	str	r2, [r3, #52]	; 0x34
 8003324:	e04c      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	2b0c      	cmp	r3, #12
 800332c:	d824      	bhi.n	8003378 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b23      	subs	r3, #35	; 0x23
 8003340:	221f      	movs	r2, #31
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	400a      	ands	r2, r1
 800334e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	3b23      	subs	r3, #35	; 0x23
 800336a:	fa00 f203 	lsl.w	r2, r0, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	631a      	str	r2, [r3, #48]	; 0x30
 8003376:	e023      	b.n	80033c0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4413      	add	r3, r2
 8003388:	3b41      	subs	r3, #65	; 0x41
 800338a:	221f      	movs	r2, #31
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	43da      	mvns	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	400a      	ands	r2, r1
 8003398:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	b29b      	uxth	r3, r3
 80033a6:	4618      	mov	r0, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	3b41      	subs	r3, #65	; 0x41
 80033b4:	fa00 f203 	lsl.w	r2, r0, r3
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	430a      	orrs	r2, r1
 80033be:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a30      	ldr	r2, [pc, #192]	; (8003488 <HAL_ADC_ConfigChannel+0x29c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d10a      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1f4>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033d2:	d105      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80033d4:	4b2d      	ldr	r3, [pc, #180]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	4a2c      	ldr	r2, [pc, #176]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 80033da:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80033de:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a28      	ldr	r2, [pc, #160]	; (8003488 <HAL_ADC_ConfigChannel+0x29c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d10f      	bne.n	800340a <HAL_ADC_ConfigChannel+0x21e>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	2b12      	cmp	r3, #18
 80033f0:	d10b      	bne.n	800340a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80033f2:	4b26      	ldr	r3, [pc, #152]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	4a25      	ldr	r2, [pc, #148]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 80033f8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80033fc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80033fe:	4b23      	ldr	r3, [pc, #140]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a22      	ldr	r2, [pc, #136]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 8003404:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003408:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a1e      	ldr	r2, [pc, #120]	; (8003488 <HAL_ADC_ConfigChannel+0x29c>)
 8003410:	4293      	cmp	r3, r2
 8003412:	d12b      	bne.n	800346c <HAL_ADC_ConfigChannel+0x280>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a1a      	ldr	r2, [pc, #104]	; (8003484 <HAL_ADC_ConfigChannel+0x298>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d003      	beq.n	8003426 <HAL_ADC_ConfigChannel+0x23a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2b11      	cmp	r3, #17
 8003424:	d122      	bne.n	800346c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003426:	4b19      	ldr	r3, [pc, #100]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	4a18      	ldr	r2, [pc, #96]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 800342c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003430:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_ADC_ConfigChannel+0x2a0>)
 8003438:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800343c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a10      	ldr	r2, [pc, #64]	; (8003484 <HAL_ADC_ConfigChannel+0x298>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d111      	bne.n	800346c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_ADC_ConfigChannel+0x2a4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a11      	ldr	r2, [pc, #68]	; (8003494 <HAL_ADC_ConfigChannel+0x2a8>)
 800344e:	fba2 2303 	umull	r2, r3, r2, r3
 8003452:	0c9a      	lsrs	r2, r3, #18
 8003454:	4613      	mov	r3, r2
 8003456:	009b      	lsls	r3, r3, #2
 8003458:	4413      	add	r3, r2
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800345e:	e002      	b.n	8003466 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	10000012 	.word	0x10000012
 8003488:	40012000 	.word	0x40012000
 800348c:	40012300 	.word	0x40012300
 8003490:	20000000 	.word	0x20000000
 8003494:	431bde83 	.word	0x431bde83

08003498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80034a0:	4b78      	ldr	r3, [pc, #480]	; (8003684 <ADC_Init+0x1ec>)
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	4a77      	ldr	r2, [pc, #476]	; (8003684 <ADC_Init+0x1ec>)
 80034a6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80034aa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80034ac:	4b75      	ldr	r3, [pc, #468]	; (8003684 <ADC_Init+0x1ec>)
 80034ae:	685a      	ldr	r2, [r3, #4]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4973      	ldr	r1, [pc, #460]	; (8003684 <ADC_Init+0x1ec>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6859      	ldr	r1, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	021a      	lsls	r2, r3, #8
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6859      	ldr	r1, [r3, #4]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689a      	ldr	r2, [r3, #8]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800350e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6899      	ldr	r1, [r3, #8]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	4a58      	ldr	r2, [pc, #352]	; (8003688 <ADC_Init+0x1f0>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d022      	beq.n	8003572 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	689a      	ldr	r2, [r3, #8]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800353a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6899      	ldr	r1, [r3, #8]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	430a      	orrs	r2, r1
 800354c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689a      	ldr	r2, [r3, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800355c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	6899      	ldr	r1, [r3, #8]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	609a      	str	r2, [r3, #8]
 8003570:	e00f      	b.n	8003592 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003580:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003590:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0202 	bic.w	r2, r2, #2
 80035a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6899      	ldr	r1, [r3, #8]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	699b      	ldr	r3, [r3, #24]
 80035ac:	005a      	lsls	r2, r3, #1
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d01b      	beq.n	80035f8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6859      	ldr	r1, [r3, #4]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	3b01      	subs	r3, #1
 80035ec:	035a      	lsls	r2, r3, #13
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	430a      	orrs	r2, r1
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	e007      	b.n	8003608 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685a      	ldr	r2, [r3, #4]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003606:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	3b01      	subs	r3, #1
 8003624:	051a      	lsls	r2, r3, #20
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	430a      	orrs	r2, r1
 800362c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	689a      	ldr	r2, [r3, #8]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800363c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	6899      	ldr	r1, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800364a:	025a      	lsls	r2, r3, #9
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	430a      	orrs	r2, r1
 8003652:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003662:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6899      	ldr	r1, [r3, #8]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	029a      	lsls	r2, r3, #10
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	609a      	str	r2, [r3, #8]
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr
 8003684:	40012300 	.word	0x40012300
 8003688:	0f000001 	.word	0x0f000001

0800368c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e0ed      	b.n	800387a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d102      	bne.n	80036b0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff f9b0 	bl	8002a10 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0201 	orr.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036c0:	f7ff fd20 	bl	8003104 <HAL_GetTick>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036c6:	e012      	b.n	80036ee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80036c8:	f7ff fd1c 	bl	8003104 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b0a      	cmp	r3, #10
 80036d4:	d90b      	bls.n	80036ee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2205      	movs	r2, #5
 80036e6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e0c5      	b.n	800387a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d0e5      	beq.n	80036c8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0202 	bic.w	r2, r2, #2
 800370a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800370c:	f7ff fcfa 	bl	8003104 <HAL_GetTick>
 8003710:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003712:	e012      	b.n	800373a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003714:	f7ff fcf6 	bl	8003104 <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b0a      	cmp	r3, #10
 8003720:	d90b      	bls.n	800373a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2205      	movs	r2, #5
 8003732:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003736:	2301      	movs	r3, #1
 8003738:	e09f      	b.n	800387a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1e5      	bne.n	8003714 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	7e1b      	ldrb	r3, [r3, #24]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d108      	bne.n	8003762 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	e007      	b.n	8003772 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003770:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	7e5b      	ldrb	r3, [r3, #25]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d108      	bne.n	800378c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003788:	601a      	str	r2, [r3, #0]
 800378a:	e007      	b.n	800379c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800379a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	7e9b      	ldrb	r3, [r3, #26]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d108      	bne.n	80037b6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0220 	orr.w	r2, r2, #32
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	e007      	b.n	80037c6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f022 0220 	bic.w	r2, r2, #32
 80037c4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	7edb      	ldrb	r3, [r3, #27]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d108      	bne.n	80037e0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 0210 	bic.w	r2, r2, #16
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	e007      	b.n	80037f0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0210 	orr.w	r2, r2, #16
 80037ee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	7f1b      	ldrb	r3, [r3, #28]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d108      	bne.n	800380a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0208 	orr.w	r2, r2, #8
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	e007      	b.n	800381a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f022 0208 	bic.w	r2, r2, #8
 8003818:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	7f5b      	ldrb	r3, [r3, #29]
 800381e:	2b01      	cmp	r3, #1
 8003820:	d108      	bne.n	8003834 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f042 0204 	orr.w	r2, r2, #4
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	e007      	b.n	8003844 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0204 	bic.w	r2, r2, #4
 8003842:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	431a      	orrs	r2, r3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	695b      	ldr	r3, [r3, #20]
 8003858:	ea42 0103 	orr.w	r1, r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	1e5a      	subs	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003882:	b480      	push	{r7}
 8003884:	b087      	sub	sp, #28
 8003886:	af00      	add	r7, sp, #0
 8003888:	60f8      	str	r0, [r7, #12]
 800388a:	60b9      	str	r1, [r7, #8]
 800388c:	607a      	str	r2, [r7, #4]
 800388e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003896:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003898:	7dfb      	ldrb	r3, [r7, #23]
 800389a:	2b01      	cmp	r3, #1
 800389c:	d003      	beq.n	80038a6 <HAL_CAN_GetRxMessage+0x24>
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	f040 80f3 	bne.w	8003a8c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10e      	bne.n	80038ca <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d116      	bne.n	80038e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e0e7      	b.n	8003a9a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691b      	ldr	r3, [r3, #16]
 80038d0:	f003 0303 	and.w	r3, r3, #3
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d107      	bne.n	80038e8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d8      	b.n	8003a9a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	331b      	adds	r3, #27
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	4413      	add	r3, r2
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0204 	and.w	r2, r3, #4
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10c      	bne.n	8003920 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	331b      	adds	r3, #27
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	4413      	add	r3, r2
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	0d5b      	lsrs	r3, r3, #21
 8003916:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
 800391e:	e00b      	b.n	8003938 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	331b      	adds	r3, #27
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	4413      	add	r3, r2
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	08db      	lsrs	r3, r3, #3
 8003930:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	331b      	adds	r3, #27
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	4413      	add	r3, r2
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0202 	and.w	r2, r3, #2
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	331b      	adds	r3, #27
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	4413      	add	r3, r2
 800395a:	3304      	adds	r3, #4
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 020f 	and.w	r2, r3, #15
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	331b      	adds	r3, #27
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	4413      	add	r3, r2
 8003972:	3304      	adds	r3, #4
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	0a1b      	lsrs	r3, r3, #8
 8003978:	b2da      	uxtb	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	331b      	adds	r3, #27
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	0c1b      	lsrs	r3, r3, #16
 8003990:	b29a      	uxth	r2, r3
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	011b      	lsls	r3, r3, #4
 800399e:	4413      	add	r3, r2
 80039a0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	0a1a      	lsrs	r2, r3, #8
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	011b      	lsls	r3, r3, #4
 80039ce:	4413      	add	r3, r2
 80039d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	0c1a      	lsrs	r2, r3, #16
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	3302      	adds	r3, #2
 80039dc:	b2d2      	uxtb	r2, r2
 80039de:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	4413      	add	r3, r2
 80039ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	0e1a      	lsrs	r2, r3, #24
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	3303      	adds	r3, #3
 80039f6:	b2d2      	uxtb	r2, r2
 80039f8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	011b      	lsls	r3, r3, #4
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	b2d2      	uxtb	r2, r2
 8003a10:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	011b      	lsls	r3, r3, #4
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	0a1a      	lsrs	r2, r3, #8
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	3305      	adds	r3, #5
 8003a28:	b2d2      	uxtb	r2, r2
 8003a2a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	4413      	add	r3, r2
 8003a36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	0c1a      	lsrs	r2, r3, #16
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	3306      	adds	r3, #6
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	0e1a      	lsrs	r2, r3, #24
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	3307      	adds	r3, #7
 8003a5c:	b2d2      	uxtb	r2, r2
 8003a5e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d108      	bne.n	8003a78 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	68da      	ldr	r2, [r3, #12]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f042 0220 	orr.w	r2, r2, #32
 8003a74:	60da      	str	r2, [r3, #12]
 8003a76:	e007      	b.n	8003a88 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	691a      	ldr	r2, [r3, #16]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0220 	orr.w	r2, r2, #32
 8003a86:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	e006      	b.n	8003a9a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a90:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
  }
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	371c      	adds	r7, #28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b08a      	sub	sp, #40	; 0x28
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d07c      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	f003 0301 	and.w	r3, r3, #1
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d023      	beq.n	8003b3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f000 f983 	bl	8003e14 <HAL_CAN_TxMailbox0CompleteCallback>
 8003b0e:	e016      	b.n	8003b3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f003 0304 	and.w	r3, r3, #4
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d004      	beq.n	8003b24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
 8003b22:	e00c      	b.n	8003b3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d004      	beq.n	8003b38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
 8003b36:	e002      	b.n	8003b3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f989 	bl	8003e50 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003b3e:	69bb      	ldr	r3, [r7, #24]
 8003b40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d024      	beq.n	8003b92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f963 	bl	8003e28 <HAL_CAN_TxMailbox1CompleteCallback>
 8003b62:	e016      	b.n	8003b92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d004      	beq.n	8003b78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	e00c      	b.n	8003b92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d004      	beq.n	8003b8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b88:	627b      	str	r3, [r7, #36]	; 0x24
 8003b8a:	e002      	b.n	8003b92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003b8c:	6878      	ldr	r0, [r7, #4]
 8003b8e:	f000 f969 	bl	8003e64 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003b92:	69bb      	ldr	r3, [r7, #24]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d024      	beq.n	8003be6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ba4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ba6:	69bb      	ldr	r3, [r7, #24]
 8003ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d003      	beq.n	8003bb8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f000 f943 	bl	8003e3c <HAL_CAN_TxMailbox2CompleteCallback>
 8003bb6:	e016      	b.n	8003be6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d004      	beq.n	8003bcc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e00c      	b.n	8003be6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003bcc:	69bb      	ldr	r3, [r7, #24]
 8003bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bdc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bde:	e002      	b.n	8003be6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 f949 	bl	8003e78 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003be6:	6a3b      	ldr	r3, [r7, #32]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00c      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c00:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2210      	movs	r2, #16
 8003c08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003c0a:	6a3b      	ldr	r3, [r7, #32]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00b      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d006      	beq.n	8003c2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2208      	movs	r2, #8
 8003c24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	f000 f930 	bl	8003e8c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003c2c:	6a3b      	ldr	r3, [r7, #32]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0303 	and.w	r3, r3, #3
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7fe f9c1 	bl	8001fcc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003c4a:	6a3b      	ldr	r3, [r7, #32]
 8003c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d00c      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	f003 0310 	and.w	r3, r3, #16
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d007      	beq.n	8003c6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c60:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003c6e:	6a3b      	ldr	r3, [r7, #32]
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d006      	beq.n	8003c90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2208      	movs	r2, #8
 8003c88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f912 	bl	8003eb4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	f003 0310 	and.w	r3, r3, #16
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d009      	beq.n	8003cae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	691b      	ldr	r3, [r3, #16]
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d002      	beq.n	8003cae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 f8f9 	bl	8003ea0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003cae:	6a3b      	ldr	r3, [r7, #32]
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	f003 0310 	and.w	r3, r3, #16
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d006      	beq.n	8003cd0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2210      	movs	r2, #16
 8003cc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f8fc 	bl	8003ec8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d00b      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d006      	beq.n	8003cf2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2208      	movs	r2, #8
 8003cea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f8f5 	bl	8003edc <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d07b      	beq.n	8003df4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0304 	and.w	r3, r3, #4
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d072      	beq.n	8003dec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d003      	beq.n	8003d22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d1c:	f043 0301 	orr.w	r3, r3, #1
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d003      	beq.n	8003d3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	f043 0302 	orr.w	r3, r3, #2
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d3e:	6a3b      	ldr	r3, [r7, #32]
 8003d40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d008      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	f043 0304 	orr.w	r3, r3, #4
 8003d58:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d5a:	6a3b      	ldr	r3, [r7, #32]
 8003d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d043      	beq.n	8003dec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d03e      	beq.n	8003dec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d74:	2b60      	cmp	r3, #96	; 0x60
 8003d76:	d02b      	beq.n	8003dd0 <HAL_CAN_IRQHandler+0x32a>
 8003d78:	2b60      	cmp	r3, #96	; 0x60
 8003d7a:	d82e      	bhi.n	8003dda <HAL_CAN_IRQHandler+0x334>
 8003d7c:	2b50      	cmp	r3, #80	; 0x50
 8003d7e:	d022      	beq.n	8003dc6 <HAL_CAN_IRQHandler+0x320>
 8003d80:	2b50      	cmp	r3, #80	; 0x50
 8003d82:	d82a      	bhi.n	8003dda <HAL_CAN_IRQHandler+0x334>
 8003d84:	2b40      	cmp	r3, #64	; 0x40
 8003d86:	d019      	beq.n	8003dbc <HAL_CAN_IRQHandler+0x316>
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	d826      	bhi.n	8003dda <HAL_CAN_IRQHandler+0x334>
 8003d8c:	2b30      	cmp	r3, #48	; 0x30
 8003d8e:	d010      	beq.n	8003db2 <HAL_CAN_IRQHandler+0x30c>
 8003d90:	2b30      	cmp	r3, #48	; 0x30
 8003d92:	d822      	bhi.n	8003dda <HAL_CAN_IRQHandler+0x334>
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d002      	beq.n	8003d9e <HAL_CAN_IRQHandler+0x2f8>
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d005      	beq.n	8003da8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003d9c:	e01d      	b.n	8003dda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	f043 0308 	orr.w	r3, r3, #8
 8003da4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003da6:	e019      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003daa:	f043 0310 	orr.w	r3, r3, #16
 8003dae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003db0:	e014      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db4:	f043 0320 	orr.w	r3, r3, #32
 8003db8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dba:	e00f      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dc4:	e00a      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dcc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dce:	e005      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003dd8:	e000      	b.n	8003ddc <HAL_CAN_IRQHandler+0x336>
            break;
 8003dda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003dea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2204      	movs	r2, #4
 8003df2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d008      	beq.n	8003e0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e00:	431a      	orrs	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003e06:	6878      	ldr	r0, [r7, #4]
 8003e08:	f000 f872 	bl	8003ef0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003e0c:	bf00      	nop
 8003e0e:	3728      	adds	r7, #40	; 0x28
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003e1c:	bf00      	nop
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003ea8:	bf00      	nop
 8003eaa:	370c      	adds	r7, #12
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003edc:	b480      	push	{r7}
 8003ede:	b083      	sub	sp, #12
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003ee4:	bf00      	nop
 8003ee6:	370c      	adds	r7, #12
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr

08003ef0 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <__NVIC_SetPriorityGrouping>:
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f003 0307 	and.w	r3, r3, #7
 8003f12:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f20:	4013      	ands	r3, r2
 8003f22:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <__NVIC_SetPriorityGrouping+0x44>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f32:	4a04      	ldr	r2, [pc, #16]	; (8003f44 <__NVIC_SetPriorityGrouping+0x40>)
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	60d3      	str	r3, [r2, #12]
}
 8003f38:	bf00      	nop
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	e000ed00 	.word	0xe000ed00
 8003f48:	05fa0000 	.word	0x05fa0000

08003f4c <__NVIC_GetPriorityGrouping>:
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f50:	4b04      	ldr	r3, [pc, #16]	; (8003f64 <__NVIC_GetPriorityGrouping+0x18>)
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	0a1b      	lsrs	r3, r3, #8
 8003f56:	f003 0307 	and.w	r3, r3, #7
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <__NVIC_EnableIRQ>:
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b083      	sub	sp, #12
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	4603      	mov	r3, r0
 8003f70:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	db0b      	blt.n	8003f92 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003f7a:	79fb      	ldrb	r3, [r7, #7]
 8003f7c:	f003 021f 	and.w	r2, r3, #31
 8003f80:	4907      	ldr	r1, [pc, #28]	; (8003fa0 <__NVIC_EnableIRQ+0x38>)
 8003f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	2001      	movs	r0, #1
 8003f8a:	fa00 f202 	lsl.w	r2, r0, r2
 8003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003f92:	bf00      	nop
 8003f94:	370c      	adds	r7, #12
 8003f96:	46bd      	mov	sp, r7
 8003f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9c:	4770      	bx	lr
 8003f9e:	bf00      	nop
 8003fa0:	e000e100 	.word	0xe000e100

08003fa4 <__NVIC_DisableIRQ>:
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	4603      	mov	r3, r0
 8003fac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	db12      	blt.n	8003fdc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fb6:	79fb      	ldrb	r3, [r7, #7]
 8003fb8:	f003 021f 	and.w	r2, r3, #31
 8003fbc:	490a      	ldr	r1, [pc, #40]	; (8003fe8 <__NVIC_DisableIRQ+0x44>)
 8003fbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fc2:	095b      	lsrs	r3, r3, #5
 8003fc4:	2001      	movs	r0, #1
 8003fc6:	fa00 f202 	lsl.w	r2, r0, r2
 8003fca:	3320      	adds	r3, #32
 8003fcc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003fd0:	f3bf 8f4f 	dsb	sy
}
 8003fd4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003fd6:	f3bf 8f6f 	isb	sy
}
 8003fda:	bf00      	nop
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	; (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	; (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <SysTick_Config>:
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff8e 	bl	8003fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff05 	bl	8003f04 <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004114:	f7ff ff1a 	bl	8003f4c <__NVIC_GetPriorityGrouping>
 8004118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff8e 	bl	8004040 <NVIC_EncodePriority>
 8004124:	4602      	mov	r2, r0
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff5d 	bl	8003fec <__NVIC_SetPriority>
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff0d 	bl	8003f68 <__NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	4603      	mov	r3, r0
 800415e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004164:	4618      	mov	r0, r3
 8004166:	f7ff ff1d 	bl	8003fa4 <__NVIC_DisableIRQ>
}
 800416a:	bf00      	nop
 800416c:	3708      	adds	r7, #8
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}

08004172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004172:	b580      	push	{r7, lr}
 8004174:	b082      	sub	sp, #8
 8004176:	af00      	add	r7, sp, #0
 8004178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f7ff ff94 	bl	80040a8 <SysTick_Config>
 8004180:	4603      	mov	r3, r0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}

0800418a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b084      	sub	sp, #16
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004196:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004198:	f7fe ffb4 	bl	8003104 <HAL_GetTick>
 800419c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d008      	beq.n	80041bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2280      	movs	r2, #128	; 0x80
 80041ae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041b8:	2301      	movs	r3, #1
 80041ba:	e052      	b.n	8004262 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	681a      	ldr	r2, [r3, #0]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0216 	bic.w	r2, r2, #22
 80041ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695a      	ldr	r2, [r3, #20]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d103      	bne.n	80041ec <HAL_DMA_Abort+0x62>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d007      	beq.n	80041fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 0208 	bic.w	r2, r2, #8
 80041fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0201 	bic.w	r2, r2, #1
 800420a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800420c:	e013      	b.n	8004236 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800420e:	f7fe ff79 	bl	8003104 <HAL_GetTick>
 8004212:	4602      	mov	r2, r0
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	1ad3      	subs	r3, r2, r3
 8004218:	2b05      	cmp	r3, #5
 800421a:	d90c      	bls.n	8004236 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2220      	movs	r2, #32
 8004220:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2203      	movs	r2, #3
 8004226:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e015      	b.n	8004262 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0301 	and.w	r3, r3, #1
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e4      	bne.n	800420e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004248:	223f      	movs	r2, #63	; 0x3f
 800424a:	409a      	lsls	r2, r3
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}

0800426a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800426a:	b480      	push	{r7}
 800426c:	b083      	sub	sp, #12
 800426e:	af00      	add	r7, sp, #0
 8004270:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004278:	b2db      	uxtb	r3, r3
 800427a:	2b02      	cmp	r3, #2
 800427c:	d004      	beq.n	8004288 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2280      	movs	r2, #128	; 0x80
 8004282:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e00c      	b.n	80042a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2205      	movs	r2, #5
 800428c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f022 0201 	bic.w	r2, r2, #1
 800429e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
	...

080042b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b089      	sub	sp, #36	; 0x24
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80042c2:	2300      	movs	r3, #0
 80042c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80042c6:	2300      	movs	r3, #0
 80042c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80042ca:	2300      	movs	r3, #0
 80042cc:	61fb      	str	r3, [r7, #28]
 80042ce:	e175      	b.n	80045bc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80042d0:	2201      	movs	r2, #1
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	fa02 f303 	lsl.w	r3, r2, r3
 80042d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	4013      	ands	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80042e4:	693a      	ldr	r2, [r7, #16]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	f040 8164 	bne.w	80045b6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f003 0303 	and.w	r3, r3, #3
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d005      	beq.n	8004306 <HAL_GPIO_Init+0x56>
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f003 0303 	and.w	r3, r3, #3
 8004302:	2b02      	cmp	r3, #2
 8004304:	d130      	bne.n	8004368 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	005b      	lsls	r3, r3, #1
 8004310:	2203      	movs	r2, #3
 8004312:	fa02 f303 	lsl.w	r3, r2, r3
 8004316:	43db      	mvns	r3, r3
 8004318:	69ba      	ldr	r2, [r7, #24]
 800431a:	4013      	ands	r3, r2
 800431c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	005b      	lsls	r3, r3, #1
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	69ba      	ldr	r2, [r7, #24]
 800432c:	4313      	orrs	r3, r2
 800432e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800433c:	2201      	movs	r2, #1
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	fa02 f303 	lsl.w	r3, r2, r3
 8004344:	43db      	mvns	r3, r3
 8004346:	69ba      	ldr	r2, [r7, #24]
 8004348:	4013      	ands	r3, r2
 800434a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	091b      	lsrs	r3, r3, #4
 8004352:	f003 0201 	and.w	r2, r3, #1
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	fa02 f303 	lsl.w	r3, r2, r3
 800435c:	69ba      	ldr	r2, [r7, #24]
 800435e:	4313      	orrs	r3, r2
 8004360:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f003 0303 	and.w	r3, r3, #3
 8004370:	2b03      	cmp	r3, #3
 8004372:	d017      	beq.n	80043a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	2203      	movs	r2, #3
 8004380:	fa02 f303 	lsl.w	r3, r2, r3
 8004384:	43db      	mvns	r3, r3
 8004386:	69ba      	ldr	r2, [r7, #24]
 8004388:	4013      	ands	r3, r2
 800438a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fa02 f303 	lsl.w	r3, r2, r3
 8004398:	69ba      	ldr	r2, [r7, #24]
 800439a:	4313      	orrs	r3, r2
 800439c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	69ba      	ldr	r2, [r7, #24]
 80043a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	f003 0303 	and.w	r3, r3, #3
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d123      	bne.n	80043f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	08da      	lsrs	r2, r3, #3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	3208      	adds	r2, #8
 80043b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80043be:	69fb      	ldr	r3, [r7, #28]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	220f      	movs	r2, #15
 80043c8:	fa02 f303 	lsl.w	r3, r2, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	69ba      	ldr	r2, [r7, #24]
 80043d0:	4013      	ands	r3, r2
 80043d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	69fb      	ldr	r3, [r7, #28]
 80043da:	f003 0307 	and.w	r3, r3, #7
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	fa02 f303 	lsl.w	r3, r2, r3
 80043e4:	69ba      	ldr	r2, [r7, #24]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	08da      	lsrs	r2, r3, #3
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3208      	adds	r2, #8
 80043f2:	69b9      	ldr	r1, [r7, #24]
 80043f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	005b      	lsls	r3, r3, #1
 8004402:	2203      	movs	r2, #3
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f003 0203 	and.w	r2, r3, #3
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	005b      	lsls	r3, r3, #1
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004434:	2b00      	cmp	r3, #0
 8004436:	f000 80be 	beq.w	80045b6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800443a:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_GPIO_Init+0x324>)
 800443c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800443e:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_GPIO_Init+0x324>)
 8004440:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004444:	6453      	str	r3, [r2, #68]	; 0x44
 8004446:	4b63      	ldr	r3, [pc, #396]	; (80045d4 <HAL_GPIO_Init+0x324>)
 8004448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	60fb      	str	r3, [r7, #12]
 8004450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8004452:	4a61      	ldr	r2, [pc, #388]	; (80045d8 <HAL_GPIO_Init+0x328>)
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	089b      	lsrs	r3, r3, #2
 8004458:	3302      	adds	r3, #2
 800445a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800445e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	220f      	movs	r2, #15
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43db      	mvns	r3, r3
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	4013      	ands	r3, r2
 8004474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a58      	ldr	r2, [pc, #352]	; (80045dc <HAL_GPIO_Init+0x32c>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d037      	beq.n	80044ee <HAL_GPIO_Init+0x23e>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a57      	ldr	r2, [pc, #348]	; (80045e0 <HAL_GPIO_Init+0x330>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d031      	beq.n	80044ea <HAL_GPIO_Init+0x23a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a56      	ldr	r2, [pc, #344]	; (80045e4 <HAL_GPIO_Init+0x334>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d02b      	beq.n	80044e6 <HAL_GPIO_Init+0x236>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a55      	ldr	r2, [pc, #340]	; (80045e8 <HAL_GPIO_Init+0x338>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d025      	beq.n	80044e2 <HAL_GPIO_Init+0x232>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a54      	ldr	r2, [pc, #336]	; (80045ec <HAL_GPIO_Init+0x33c>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d01f      	beq.n	80044de <HAL_GPIO_Init+0x22e>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a53      	ldr	r2, [pc, #332]	; (80045f0 <HAL_GPIO_Init+0x340>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d019      	beq.n	80044da <HAL_GPIO_Init+0x22a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a52      	ldr	r2, [pc, #328]	; (80045f4 <HAL_GPIO_Init+0x344>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d013      	beq.n	80044d6 <HAL_GPIO_Init+0x226>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a51      	ldr	r2, [pc, #324]	; (80045f8 <HAL_GPIO_Init+0x348>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d00d      	beq.n	80044d2 <HAL_GPIO_Init+0x222>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a50      	ldr	r2, [pc, #320]	; (80045fc <HAL_GPIO_Init+0x34c>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d007      	beq.n	80044ce <HAL_GPIO_Init+0x21e>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4f      	ldr	r2, [pc, #316]	; (8004600 <HAL_GPIO_Init+0x350>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d101      	bne.n	80044ca <HAL_GPIO_Init+0x21a>
 80044c6:	2309      	movs	r3, #9
 80044c8:	e012      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ca:	230a      	movs	r3, #10
 80044cc:	e010      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ce:	2308      	movs	r3, #8
 80044d0:	e00e      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044d2:	2307      	movs	r3, #7
 80044d4:	e00c      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044d6:	2306      	movs	r3, #6
 80044d8:	e00a      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044da:	2305      	movs	r3, #5
 80044dc:	e008      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044de:	2304      	movs	r3, #4
 80044e0:	e006      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044e2:	2303      	movs	r3, #3
 80044e4:	e004      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044e6:	2302      	movs	r3, #2
 80044e8:	e002      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_GPIO_Init+0x240>
 80044ee:	2300      	movs	r3, #0
 80044f0:	69fa      	ldr	r2, [r7, #28]
 80044f2:	f002 0203 	and.w	r2, r2, #3
 80044f6:	0092      	lsls	r2, r2, #2
 80044f8:	4093      	lsls	r3, r2
 80044fa:	69ba      	ldr	r2, [r7, #24]
 80044fc:	4313      	orrs	r3, r2
 80044fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004500:	4935      	ldr	r1, [pc, #212]	; (80045d8 <HAL_GPIO_Init+0x328>)
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	089b      	lsrs	r3, r3, #2
 8004506:	3302      	adds	r3, #2
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800450e:	4b3d      	ldr	r3, [pc, #244]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	43db      	mvns	r3, r3
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	4013      	ands	r3, r2
 800451c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800452a:	69ba      	ldr	r2, [r7, #24]
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	4313      	orrs	r3, r2
 8004530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004532:	4a34      	ldr	r2, [pc, #208]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004534:	69bb      	ldr	r3, [r7, #24]
 8004536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <HAL_GPIO_Init+0x354>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800453e:	693b      	ldr	r3, [r7, #16]
 8004540:	43db      	mvns	r3, r3
 8004542:	69ba      	ldr	r2, [r7, #24]
 8004544:	4013      	ands	r3, r2
 8004546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004554:	69ba      	ldr	r2, [r7, #24]
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800455c:	4a29      	ldr	r2, [pc, #164]	; (8004604 <HAL_GPIO_Init+0x354>)
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004562:	4b28      	ldr	r3, [pc, #160]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004564:	685b      	ldr	r3, [r3, #4]
 8004566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	43db      	mvns	r3, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4013      	ands	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	4313      	orrs	r3, r2
 8004584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004586:	4a1f      	ldr	r2, [pc, #124]	; (8004604 <HAL_GPIO_Init+0x354>)
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800458c:	4b1d      	ldr	r3, [pc, #116]	; (8004604 <HAL_GPIO_Init+0x354>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	43db      	mvns	r3, r3
 8004596:	69ba      	ldr	r2, [r7, #24]
 8004598:	4013      	ands	r3, r2
 800459a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d003      	beq.n	80045b0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80045a8:	69ba      	ldr	r2, [r7, #24]
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <HAL_GPIO_Init+0x354>)
 80045b2:	69bb      	ldr	r3, [r7, #24]
 80045b4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3301      	adds	r3, #1
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	2b0f      	cmp	r3, #15
 80045c0:	f67f ae86 	bls.w	80042d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80045c4:	bf00      	nop
 80045c6:	bf00      	nop
 80045c8:	3724      	adds	r7, #36	; 0x24
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40013800 	.word	0x40013800
 80045dc:	40020000 	.word	0x40020000
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40020800 	.word	0x40020800
 80045e8:	40020c00 	.word	0x40020c00
 80045ec:	40021000 	.word	0x40021000
 80045f0:	40021400 	.word	0x40021400
 80045f4:	40021800 	.word	0x40021800
 80045f8:	40021c00 	.word	0x40021c00
 80045fc:	40022000 	.word	0x40022000
 8004600:	40022400 	.word	0x40022400
 8004604:	40013c00 	.word	0x40013c00

08004608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	460b      	mov	r3, r1
 8004612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	887b      	ldrh	r3, [r7, #2]
 800461a:	4013      	ands	r3, r2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d002      	beq.n	8004626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004620:	2301      	movs	r3, #1
 8004622:	73fb      	strb	r3, [r7, #15]
 8004624:	e001      	b.n	800462a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004626:	2300      	movs	r3, #0
 8004628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800462a:	7bfb      	ldrb	r3, [r7, #15]
}
 800462c:	4618      	mov	r0, r3
 800462e:	3714      	adds	r7, #20
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	460b      	mov	r3, r1
 8004642:	807b      	strh	r3, [r7, #2]
 8004644:	4613      	mov	r3, r2
 8004646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004648:	787b      	ldrb	r3, [r7, #1]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d003      	beq.n	8004656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800464e:	887a      	ldrh	r2, [r7, #2]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004654:	e003      	b.n	800465e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004656:	887b      	ldrh	r3, [r7, #2]
 8004658:	041a      	lsls	r2, r3, #16
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	619a      	str	r2, [r3, #24]
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr
	...

0800466c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b082      	sub	sp, #8
 8004670:	af00      	add	r7, sp, #0
 8004672:	4603      	mov	r3, r0
 8004674:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004676:	4b08      	ldr	r3, [pc, #32]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004678:	695a      	ldr	r2, [r3, #20]
 800467a:	88fb      	ldrh	r3, [r7, #6]
 800467c:	4013      	ands	r3, r2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d006      	beq.n	8004690 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004682:	4a05      	ldr	r2, [pc, #20]	; (8004698 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004684:	88fb      	ldrh	r3, [r7, #6]
 8004686:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004688:	88fb      	ldrh	r3, [r7, #6]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fd f9e4 	bl	8001a58 <HAL_GPIO_EXTI_Callback>
  }
}
 8004690:	bf00      	nop
 8004692:	3708      	adds	r7, #8
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40013c00 	.word	0x40013c00

0800469c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b082      	sub	sp, #8
 80046a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80046a2:	2300      	movs	r3, #0
 80046a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80046a6:	4b23      	ldr	r3, [pc, #140]	; (8004734 <HAL_PWREx_EnableOverDrive+0x98>)
 80046a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046aa:	4a22      	ldr	r2, [pc, #136]	; (8004734 <HAL_PWREx_EnableOverDrive+0x98>)
 80046ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046b0:	6413      	str	r3, [r2, #64]	; 0x40
 80046b2:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_PWREx_EnableOverDrive+0x98>)
 80046b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046ba:	603b      	str	r3, [r7, #0]
 80046bc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80046be:	4b1e      	ldr	r3, [pc, #120]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1d      	ldr	r2, [pc, #116]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046ca:	f7fe fd1b 	bl	8003104 <HAL_GetTick>
 80046ce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046d0:	e009      	b.n	80046e6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80046d2:	f7fe fd17 	bl	8003104 <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046e0:	d901      	bls.n	80046e6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80046e2:	2303      	movs	r3, #3
 80046e4:	e022      	b.n	800472c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80046e6:	4b14      	ldr	r3, [pc, #80]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046f2:	d1ee      	bne.n	80046d2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80046f4:	4b10      	ldr	r3, [pc, #64]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a0f      	ldr	r2, [pc, #60]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 80046fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046fe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004700:	f7fe fd00 	bl	8003104 <HAL_GetTick>
 8004704:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004706:	e009      	b.n	800471c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004708:	f7fe fcfc 	bl	8003104 <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004716:	d901      	bls.n	800471c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004718:	2303      	movs	r3, #3
 800471a:	e007      	b.n	800472c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <HAL_PWREx_EnableOverDrive+0x9c>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004724:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004728:	d1ee      	bne.n	8004708 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000

0800473c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004744:	2300      	movs	r3, #0
 8004746:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d101      	bne.n	8004752 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e291      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0301 	and.w	r3, r3, #1
 800475a:	2b00      	cmp	r3, #0
 800475c:	f000 8087 	beq.w	800486e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004760:	4b96      	ldr	r3, [pc, #600]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 030c 	and.w	r3, r3, #12
 8004768:	2b04      	cmp	r3, #4
 800476a:	d00c      	beq.n	8004786 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800476c:	4b93      	ldr	r3, [pc, #588]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 030c 	and.w	r3, r3, #12
 8004774:	2b08      	cmp	r3, #8
 8004776:	d112      	bne.n	800479e <HAL_RCC_OscConfig+0x62>
 8004778:	4b90      	ldr	r3, [pc, #576]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004780:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004784:	d10b      	bne.n	800479e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004786:	4b8d      	ldr	r3, [pc, #564]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d06c      	beq.n	800486c <HAL_RCC_OscConfig+0x130>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d168      	bne.n	800486c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800479a:	2301      	movs	r3, #1
 800479c:	e26b      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047a6:	d106      	bne.n	80047b6 <HAL_RCC_OscConfig+0x7a>
 80047a8:	4b84      	ldr	r3, [pc, #528]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a83      	ldr	r2, [pc, #524]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e02e      	b.n	8004814 <HAL_RCC_OscConfig+0xd8>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d10c      	bne.n	80047d8 <HAL_RCC_OscConfig+0x9c>
 80047be:	4b7f      	ldr	r3, [pc, #508]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a7e      	ldr	r2, [pc, #504]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047c8:	6013      	str	r3, [r2, #0]
 80047ca:	4b7c      	ldr	r3, [pc, #496]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a7b      	ldr	r2, [pc, #492]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d4:	6013      	str	r3, [r2, #0]
 80047d6:	e01d      	b.n	8004814 <HAL_RCC_OscConfig+0xd8>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0xc0>
 80047e2:	4b76      	ldr	r3, [pc, #472]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4a75      	ldr	r2, [pc, #468]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	4b73      	ldr	r3, [pc, #460]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a72      	ldr	r2, [pc, #456]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047f8:	6013      	str	r3, [r2, #0]
 80047fa:	e00b      	b.n	8004814 <HAL_RCC_OscConfig+0xd8>
 80047fc:	4b6f      	ldr	r3, [pc, #444]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a6e      	ldr	r2, [pc, #440]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004802:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	4b6c      	ldr	r3, [pc, #432]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a6b      	ldr	r2, [pc, #428]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800480e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004812:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d013      	beq.n	8004844 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481c:	f7fe fc72 	bl	8003104 <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	e008      	b.n	8004836 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004824:	f7fe fc6e 	bl	8003104 <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	2b64      	cmp	r3, #100	; 0x64
 8004830:	d901      	bls.n	8004836 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e21f      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004836:	4b61      	ldr	r3, [pc, #388]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d0f0      	beq.n	8004824 <HAL_RCC_OscConfig+0xe8>
 8004842:	e014      	b.n	800486e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004844:	f7fe fc5e 	bl	8003104 <HAL_GetTick>
 8004848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	e008      	b.n	800485e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800484c:	f7fe fc5a 	bl	8003104 <HAL_GetTick>
 8004850:	4602      	mov	r2, r0
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	1ad3      	subs	r3, r2, r3
 8004856:	2b64      	cmp	r3, #100	; 0x64
 8004858:	d901      	bls.n	800485e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e20b      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800485e:	4b57      	ldr	r3, [pc, #348]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d1f0      	bne.n	800484c <HAL_RCC_OscConfig+0x110>
 800486a:	e000      	b.n	800486e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f003 0302 	and.w	r3, r3, #2
 8004876:	2b00      	cmp	r3, #0
 8004878:	d069      	beq.n	800494e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800487a:	4b50      	ldr	r3, [pc, #320]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	f003 030c 	and.w	r3, r3, #12
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00b      	beq.n	800489e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004886:	4b4d      	ldr	r3, [pc, #308]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	f003 030c 	and.w	r3, r3, #12
 800488e:	2b08      	cmp	r3, #8
 8004890:	d11c      	bne.n	80048cc <HAL_RCC_OscConfig+0x190>
 8004892:	4b4a      	ldr	r3, [pc, #296]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d116      	bne.n	80048cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800489e:	4b47      	ldr	r3, [pc, #284]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d005      	beq.n	80048b6 <HAL_RCC_OscConfig+0x17a>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d001      	beq.n	80048b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e1df      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	4b41      	ldr	r3, [pc, #260]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	00db      	lsls	r3, r3, #3
 80048c4:	493d      	ldr	r1, [pc, #244]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	e040      	b.n	800494e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d4:	4b39      	ldr	r3, [pc, #228]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a38      	ldr	r2, [pc, #224]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048da:	f043 0301 	orr.w	r3, r3, #1
 80048de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fe fc10 	bl	8003104 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fe fc0c 	bl	8003104 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e1bd      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048fa:	4b30      	ldr	r3, [pc, #192]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b2d      	ldr	r3, [pc, #180]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4929      	ldr	r1, [pc, #164]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]
 800491a:	e018      	b.n	800494e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491c:	4b27      	ldr	r3, [pc, #156]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a26      	ldr	r2, [pc, #152]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004922:	f023 0301 	bic.w	r3, r3, #1
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fe fbec 	bl	8003104 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004930:	f7fe fbe8 	bl	8003104 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e199      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004942:	4b1e      	ldr	r3, [pc, #120]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f003 0302 	and.w	r3, r3, #2
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d038      	beq.n	80049cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	695b      	ldr	r3, [r3, #20]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d019      	beq.n	8004996 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004962:	4b16      	ldr	r3, [pc, #88]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	4a15      	ldr	r2, [pc, #84]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004968:	f043 0301 	orr.w	r3, r3, #1
 800496c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800496e:	f7fe fbc9 	bl	8003104 <HAL_GetTick>
 8004972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004974:	e008      	b.n	8004988 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004976:	f7fe fbc5 	bl	8003104 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	693b      	ldr	r3, [r7, #16]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	2b02      	cmp	r3, #2
 8004982:	d901      	bls.n	8004988 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004984:	2303      	movs	r3, #3
 8004986:	e176      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004988:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800498a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800498c:	f003 0302 	and.w	r3, r3, #2
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0f0      	beq.n	8004976 <HAL_RCC_OscConfig+0x23a>
 8004994:	e01a      	b.n	80049cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004996:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 8004998:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800499a:	4a08      	ldr	r2, [pc, #32]	; (80049bc <HAL_RCC_OscConfig+0x280>)
 800499c:	f023 0301 	bic.w	r3, r3, #1
 80049a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049a2:	f7fe fbaf 	bl	8003104 <HAL_GetTick>
 80049a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	e00a      	b.n	80049c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049aa:	f7fe fbab 	bl	8003104 <HAL_GetTick>
 80049ae:	4602      	mov	r2, r0
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	1ad3      	subs	r3, r2, r3
 80049b4:	2b02      	cmp	r3, #2
 80049b6:	d903      	bls.n	80049c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e15c      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
 80049bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049c0:	4b91      	ldr	r3, [pc, #580]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 80049c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c4:	f003 0302 	and.w	r3, r3, #2
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d1ee      	bne.n	80049aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0304 	and.w	r3, r3, #4
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	f000 80a4 	beq.w	8004b22 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049da:	4b8b      	ldr	r3, [pc, #556]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d10d      	bne.n	8004a02 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80049e6:	4b88      	ldr	r3, [pc, #544]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	4a87      	ldr	r2, [pc, #540]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 80049ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f0:	6413      	str	r3, [r2, #64]	; 0x40
 80049f2:	4b85      	ldr	r3, [pc, #532]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fa:	60bb      	str	r3, [r7, #8]
 80049fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049fe:	2301      	movs	r3, #1
 8004a00:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a02:	4b82      	ldr	r3, [pc, #520]	; (8004c0c <HAL_RCC_OscConfig+0x4d0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d118      	bne.n	8004a40 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004a0e:	4b7f      	ldr	r3, [pc, #508]	; (8004c0c <HAL_RCC_OscConfig+0x4d0>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a7e      	ldr	r2, [pc, #504]	; (8004c0c <HAL_RCC_OscConfig+0x4d0>)
 8004a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a1a:	f7fe fb73 	bl	8003104 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a22:	f7fe fb6f 	bl	8003104 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b64      	cmp	r3, #100	; 0x64
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e120      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a34:	4b75      	ldr	r3, [pc, #468]	; (8004c0c <HAL_RCC_OscConfig+0x4d0>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d0f0      	beq.n	8004a22 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d106      	bne.n	8004a56 <HAL_RCC_OscConfig+0x31a>
 8004a48:	4b6f      	ldr	r3, [pc, #444]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4c:	4a6e      	ldr	r2, [pc, #440]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a4e:	f043 0301 	orr.w	r3, r3, #1
 8004a52:	6713      	str	r3, [r2, #112]	; 0x70
 8004a54:	e02d      	b.n	8004ab2 <HAL_RCC_OscConfig+0x376>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10c      	bne.n	8004a78 <HAL_RCC_OscConfig+0x33c>
 8004a5e:	4b6a      	ldr	r3, [pc, #424]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a62:	4a69      	ldr	r2, [pc, #420]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a64:	f023 0301 	bic.w	r3, r3, #1
 8004a68:	6713      	str	r3, [r2, #112]	; 0x70
 8004a6a:	4b67      	ldr	r3, [pc, #412]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6e:	4a66      	ldr	r2, [pc, #408]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a70:	f023 0304 	bic.w	r3, r3, #4
 8004a74:	6713      	str	r3, [r2, #112]	; 0x70
 8004a76:	e01c      	b.n	8004ab2 <HAL_RCC_OscConfig+0x376>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	2b05      	cmp	r3, #5
 8004a7e:	d10c      	bne.n	8004a9a <HAL_RCC_OscConfig+0x35e>
 8004a80:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a84:	4a60      	ldr	r2, [pc, #384]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a86:	f043 0304 	orr.w	r3, r3, #4
 8004a8a:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8c:	4b5e      	ldr	r3, [pc, #376]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a90:	4a5d      	ldr	r2, [pc, #372]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a92:	f043 0301 	orr.w	r3, r3, #1
 8004a96:	6713      	str	r3, [r2, #112]	; 0x70
 8004a98:	e00b      	b.n	8004ab2 <HAL_RCC_OscConfig+0x376>
 8004a9a:	4b5b      	ldr	r3, [pc, #364]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	4a5a      	ldr	r2, [pc, #360]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004aa0:	f023 0301 	bic.w	r3, r3, #1
 8004aa4:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa6:	4b58      	ldr	r3, [pc, #352]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004aa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aaa:	4a57      	ldr	r2, [pc, #348]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004aac:	f023 0304 	bic.w	r3, r3, #4
 8004ab0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d015      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aba:	f7fe fb23 	bl	8003104 <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac0:	e00a      	b.n	8004ad8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ac2:	f7fe fb1f 	bl	8003104 <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e0ce      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ad8:	4b4b      	ldr	r3, [pc, #300]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0ee      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x386>
 8004ae4:	e014      	b.n	8004b10 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae6:	f7fe fb0d 	bl	8003104 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aec:	e00a      	b.n	8004b04 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004aee:	f7fe fb09 	bl	8003104 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d901      	bls.n	8004b04 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b00:	2303      	movs	r3, #3
 8004b02:	e0b8      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b04:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1ee      	bne.n	8004aee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b10:	7dfb      	ldrb	r3, [r7, #23]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d105      	bne.n	8004b22 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b16:	4b3c      	ldr	r3, [pc, #240]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1a:	4a3b      	ldr	r2, [pc, #236]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b20:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 80a4 	beq.w	8004c74 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004b2c:	4b36      	ldr	r3, [pc, #216]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b2e:	689b      	ldr	r3, [r3, #8]
 8004b30:	f003 030c 	and.w	r3, r3, #12
 8004b34:	2b08      	cmp	r3, #8
 8004b36:	d06b      	beq.n	8004c10 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	699b      	ldr	r3, [r3, #24]
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d149      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b40:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a30      	ldr	r2, [pc, #192]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fe fada 	bl	8003104 <HAL_GetTick>
 8004b50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b54:	f7fe fad6 	bl	8003104 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e087      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	69da      	ldr	r2, [r3, #28]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6a1b      	ldr	r3, [r3, #32]
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b80:	019b      	lsls	r3, r3, #6
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	041b      	lsls	r3, r3, #16
 8004b8e:	431a      	orrs	r2, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b94:	061b      	lsls	r3, r3, #24
 8004b96:	4313      	orrs	r3, r2
 8004b98:	4a1b      	ldr	r2, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004b9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b9e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ba0:	4b19      	ldr	r3, [pc, #100]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004baa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7fe faaa 	bl	8003104 <HAL_GetTick>
 8004bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb2:	e008      	b.n	8004bc6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7fe faa6 	bl	8003104 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	2b02      	cmp	r3, #2
 8004bc0:	d901      	bls.n	8004bc6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e057      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d0f0      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x478>
 8004bd2:	e04f      	b.n	8004c74 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd4:	4b0c      	ldr	r3, [pc, #48]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a0b      	ldr	r2, [pc, #44]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be0:	f7fe fa90 	bl	8003104 <HAL_GetTick>
 8004be4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	e008      	b.n	8004bfa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004be8:	f7fe fa8c 	bl	8003104 <HAL_GetTick>
 8004bec:	4602      	mov	r2, r0
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e03d      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfa:	4b03      	ldr	r3, [pc, #12]	; (8004c08 <HAL_RCC_OscConfig+0x4cc>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d1f0      	bne.n	8004be8 <HAL_RCC_OscConfig+0x4ac>
 8004c06:	e035      	b.n	8004c74 <HAL_RCC_OscConfig+0x538>
 8004c08:	40023800 	.word	0x40023800
 8004c0c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004c10:	4b1b      	ldr	r3, [pc, #108]	; (8004c80 <HAL_RCC_OscConfig+0x544>)
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	699b      	ldr	r3, [r3, #24]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d028      	beq.n	8004c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d121      	bne.n	8004c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c36:	429a      	cmp	r2, r3
 8004c38:	d11a      	bne.n	8004c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c40:	4013      	ands	r3, r2
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c46:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d111      	bne.n	8004c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c56:	085b      	lsrs	r3, r3, #1
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d107      	bne.n	8004c70 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d001      	beq.n	8004c74 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e000      	b.n	8004c76 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	40023800 	.word	0x40023800

08004c84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b084      	sub	sp, #16
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e0d0      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 030f 	and.w	r3, r3, #15
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d910      	bls.n	8004ccc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	4b67      	ldr	r3, [pc, #412]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f023 020f 	bic.w	r2, r3, #15
 8004cb2:	4965      	ldr	r1, [pc, #404]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cba:	4b63      	ldr	r3, [pc, #396]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 030f 	and.w	r3, r3, #15
 8004cc2:	683a      	ldr	r2, [r7, #0]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e0b8      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d020      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 0304 	and.w	r3, r3, #4
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d005      	beq.n	8004cf0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ce4:	4b59      	ldr	r3, [pc, #356]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	4a58      	ldr	r2, [pc, #352]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d005      	beq.n	8004d08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cfc:	4b53      	ldr	r3, [pc, #332]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	4a52      	ldr	r2, [pc, #328]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d08:	4b50      	ldr	r3, [pc, #320]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d0a:	689b      	ldr	r3, [r3, #8]
 8004d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	494d      	ldr	r1, [pc, #308]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d040      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d107      	bne.n	8004d3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d2e:	4b47      	ldr	r3, [pc, #284]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d115      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e07f      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2b02      	cmp	r3, #2
 8004d44:	d107      	bne.n	8004d56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d46:	4b41      	ldr	r3, [pc, #260]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d109      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	e073      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d56:	4b3d      	ldr	r3, [pc, #244]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d101      	bne.n	8004d66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004d62:	2301      	movs	r3, #1
 8004d64:	e06b      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d66:	4b39      	ldr	r3, [pc, #228]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d68:	689b      	ldr	r3, [r3, #8]
 8004d6a:	f023 0203 	bic.w	r2, r3, #3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	4936      	ldr	r1, [pc, #216]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d78:	f7fe f9c4 	bl	8003104 <HAL_GetTick>
 8004d7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d7e:	e00a      	b.n	8004d96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d80:	f7fe f9c0 	bl	8003104 <HAL_GetTick>
 8004d84:	4602      	mov	r2, r0
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	1ad3      	subs	r3, r2, r3
 8004d8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d901      	bls.n	8004d96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e053      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 020c 	and.w	r2, r3, #12
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	009b      	lsls	r3, r3, #2
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d1eb      	bne.n	8004d80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004da8:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 030f 	and.w	r3, r3, #15
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d210      	bcs.n	8004dd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f023 020f 	bic.w	r2, r3, #15
 8004dbe:	4922      	ldr	r1, [pc, #136]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dc6:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	429a      	cmp	r2, r3
 8004dd2:	d001      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	e032      	b.n	8004e3e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0304 	and.w	r3, r3, #4
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d008      	beq.n	8004df6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004de4:	4b19      	ldr	r3, [pc, #100]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	4916      	ldr	r1, [pc, #88]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	4313      	orrs	r3, r2
 8004df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0308 	and.w	r3, r3, #8
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e02:	4b12      	ldr	r3, [pc, #72]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	00db      	lsls	r3, r3, #3
 8004e10:	490e      	ldr	r1, [pc, #56]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e16:	f000 f821 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 8004e1a:	4602      	mov	r2, r0
 8004e1c:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <HAL_RCC_ClockConfig+0x1c8>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	091b      	lsrs	r3, r3, #4
 8004e22:	f003 030f 	and.w	r3, r3, #15
 8004e26:	490a      	ldr	r1, [pc, #40]	; (8004e50 <HAL_RCC_ClockConfig+0x1cc>)
 8004e28:	5ccb      	ldrb	r3, [r1, r3]
 8004e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e2e:	4a09      	ldr	r2, [pc, #36]	; (8004e54 <HAL_RCC_ClockConfig+0x1d0>)
 8004e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e32:	4b09      	ldr	r3, [pc, #36]	; (8004e58 <HAL_RCC_ClockConfig+0x1d4>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4618      	mov	r0, r3
 8004e38:	f7fe f920 	bl	800307c <HAL_InitTick>

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3710      	adds	r7, #16
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023c00 	.word	0x40023c00
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	0800878c 	.word	0x0800878c
 8004e54:	20000000 	.word	0x20000000
 8004e58:	20000004 	.word	0x20000004

08004e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b094      	sub	sp, #80	; 0x50
 8004e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004e64:	2300      	movs	r3, #0
 8004e66:	647b      	str	r3, [r7, #68]	; 0x44
 8004e68:	2300      	movs	r3, #0
 8004e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004e70:	2300      	movs	r3, #0
 8004e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004e74:	4b79      	ldr	r3, [pc, #484]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	f003 030c 	and.w	r3, r3, #12
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d00d      	beq.n	8004e9c <HAL_RCC_GetSysClockFreq+0x40>
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	f200 80e1 	bhi.w	8005048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_RCC_GetSysClockFreq+0x34>
 8004e8a:	2b04      	cmp	r3, #4
 8004e8c:	d003      	beq.n	8004e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8004e8e:	e0db      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004e90:	4b73      	ldr	r3, [pc, #460]	; (8005060 <HAL_RCC_GetSysClockFreq+0x204>)
 8004e92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e94:	e0db      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004e96:	4b73      	ldr	r3, [pc, #460]	; (8005064 <HAL_RCC_GetSysClockFreq+0x208>)
 8004e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004e9a:	e0d8      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e9c:	4b6f      	ldr	r3, [pc, #444]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004ea6:	4b6d      	ldr	r3, [pc, #436]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d063      	beq.n	8004f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eb2:	4b6a      	ldr	r3, [pc, #424]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	099b      	lsrs	r3, r3, #6
 8004eb8:	2200      	movs	r2, #0
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8004eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ece:	4622      	mov	r2, r4
 8004ed0:	462b      	mov	r3, r5
 8004ed2:	f04f 0000 	mov.w	r0, #0
 8004ed6:	f04f 0100 	mov.w	r1, #0
 8004eda:	0159      	lsls	r1, r3, #5
 8004edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ee0:	0150      	lsls	r0, r2, #5
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	1a51      	subs	r1, r2, r1
 8004eea:	6139      	str	r1, [r7, #16]
 8004eec:	4629      	mov	r1, r5
 8004eee:	eb63 0301 	sbc.w	r3, r3, r1
 8004ef2:	617b      	str	r3, [r7, #20]
 8004ef4:	f04f 0200 	mov.w	r2, #0
 8004ef8:	f04f 0300 	mov.w	r3, #0
 8004efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f00:	4659      	mov	r1, fp
 8004f02:	018b      	lsls	r3, r1, #6
 8004f04:	4651      	mov	r1, sl
 8004f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004f0a:	4651      	mov	r1, sl
 8004f0c:	018a      	lsls	r2, r1, #6
 8004f0e:	4651      	mov	r1, sl
 8004f10:	ebb2 0801 	subs.w	r8, r2, r1
 8004f14:	4659      	mov	r1, fp
 8004f16:	eb63 0901 	sbc.w	r9, r3, r1
 8004f1a:	f04f 0200 	mov.w	r2, #0
 8004f1e:	f04f 0300 	mov.w	r3, #0
 8004f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f2e:	4690      	mov	r8, r2
 8004f30:	4699      	mov	r9, r3
 8004f32:	4623      	mov	r3, r4
 8004f34:	eb18 0303 	adds.w	r3, r8, r3
 8004f38:	60bb      	str	r3, [r7, #8]
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	eb49 0303 	adc.w	r3, r9, r3
 8004f40:	60fb      	str	r3, [r7, #12]
 8004f42:	f04f 0200 	mov.w	r2, #0
 8004f46:	f04f 0300 	mov.w	r3, #0
 8004f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004f4e:	4629      	mov	r1, r5
 8004f50:	024b      	lsls	r3, r1, #9
 8004f52:	4621      	mov	r1, r4
 8004f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004f58:	4621      	mov	r1, r4
 8004f5a:	024a      	lsls	r2, r1, #9
 8004f5c:	4610      	mov	r0, r2
 8004f5e:	4619      	mov	r1, r3
 8004f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f62:	2200      	movs	r2, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8004f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004f6c:	f7fb fda2 	bl	8000ab4 <__aeabi_uldivmod>
 8004f70:	4602      	mov	r2, r0
 8004f72:	460b      	mov	r3, r1
 8004f74:	4613      	mov	r3, r2
 8004f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f78:	e058      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f7a:	4b38      	ldr	r3, [pc, #224]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	099b      	lsrs	r3, r3, #6
 8004f80:	2200      	movs	r2, #0
 8004f82:	4618      	mov	r0, r3
 8004f84:	4611      	mov	r1, r2
 8004f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004f8a:	623b      	str	r3, [r7, #32]
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8004f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004f94:	4642      	mov	r2, r8
 8004f96:	464b      	mov	r3, r9
 8004f98:	f04f 0000 	mov.w	r0, #0
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	0159      	lsls	r1, r3, #5
 8004fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fa6:	0150      	lsls	r0, r2, #5
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	4641      	mov	r1, r8
 8004fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8004fb2:	4649      	mov	r1, r9
 8004fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004fb8:	f04f 0200 	mov.w	r2, #0
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8004fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8004fd4:	f04f 0200 	mov.w	r2, #0
 8004fd8:	f04f 0300 	mov.w	r3, #0
 8004fdc:	00eb      	lsls	r3, r5, #3
 8004fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe2:	00e2      	lsls	r2, r4, #3
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	461d      	mov	r5, r3
 8004fe8:	4643      	mov	r3, r8
 8004fea:	18e3      	adds	r3, r4, r3
 8004fec:	603b      	str	r3, [r7, #0]
 8004fee:	464b      	mov	r3, r9
 8004ff0:	eb45 0303 	adc.w	r3, r5, r3
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005002:	4629      	mov	r1, r5
 8005004:	028b      	lsls	r3, r1, #10
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800500c:	4621      	mov	r1, r4
 800500e:	028a      	lsls	r2, r1, #10
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005016:	2200      	movs	r2, #0
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	61fa      	str	r2, [r7, #28]
 800501c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005020:	f7fb fd48 	bl	8000ab4 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetSysClockFreq+0x200>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800503c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800503e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetSysClockFreq+0x204>)
 800504a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005050:	4618      	mov	r0, r3
 8005052:	3750      	adds	r7, #80	; 0x50
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	007a1200 	.word	0x007a1200

08005068 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	0800879c 	.word	0x0800879c

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	0800879c 	.word	0x0800879c

080050d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b088      	sub	sp, #32
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80050d8:	2300      	movs	r3, #0
 80050da:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80050dc:	2300      	movs	r3, #0
 80050de:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80050e0:	2300      	movs	r3, #0
 80050e2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80050e4:	2300      	movs	r3, #0
 80050e6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80050e8:	2300      	movs	r3, #0
 80050ea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0301 	and.w	r3, r3, #1
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d012      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80050f8:	4b69      	ldr	r3, [pc, #420]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	4a68      	ldr	r2, [pc, #416]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005102:	6093      	str	r3, [r2, #8]
 8005104:	4b66      	ldr	r3, [pc, #408]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005106:	689a      	ldr	r2, [r3, #8]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800510c:	4964      	ldr	r1, [pc, #400]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	4313      	orrs	r3, r2
 8005110:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800511a:	2301      	movs	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d017      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800512a:	4b5d      	ldr	r3, [pc, #372]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005130:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005138:	4959      	ldr	r1, [pc, #356]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800513a:	4313      	orrs	r3, r2
 800513c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005144:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005148:	d101      	bne.n	800514e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800514a:	2301      	movs	r3, #1
 800514c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005156:	2301      	movs	r3, #1
 8005158:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005162:	2b00      	cmp	r3, #0
 8005164:	d017      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005166:	4b4e      	ldr	r3, [pc, #312]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005168:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800516c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005174:	494a      	ldr	r1, [pc, #296]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005176:	4313      	orrs	r3, r2
 8005178:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005184:	d101      	bne.n	800518a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005192:	2301      	movs	r3, #1
 8005194:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80051a2:	2301      	movs	r3, #1
 80051a4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0320 	and.w	r3, r3, #32
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	f000 808b 	beq.w	80052ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b4:	4b3a      	ldr	r3, [pc, #232]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b8:	4a39      	ldr	r2, [pc, #228]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051be:	6413      	str	r3, [r2, #64]	; 0x40
 80051c0:	4b37      	ldr	r3, [pc, #220]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051c8:	60bb      	str	r3, [r7, #8]
 80051ca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80051cc:	4b35      	ldr	r3, [pc, #212]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a34      	ldr	r2, [pc, #208]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051d8:	f7fd ff94 	bl	8003104 <HAL_GetTick>
 80051dc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051de:	e008      	b.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e0:	f7fd ff90 	bl	8003104 <HAL_GetTick>
 80051e4:	4602      	mov	r2, r0
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	2b64      	cmp	r3, #100	; 0x64
 80051ec:	d901      	bls.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e357      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80051f2:	4b2c      	ldr	r3, [pc, #176]	; (80052a4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0f0      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80051fe:	4b28      	ldr	r3, [pc, #160]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005200:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005202:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005206:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d035      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	693a      	ldr	r2, [r7, #16]
 8005218:	429a      	cmp	r2, r3
 800521a:	d02e      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521c:	4b20      	ldr	r3, [pc, #128]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800521e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005220:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005224:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522a:	4a1d      	ldr	r2, [pc, #116]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005230:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005232:	4b1b      	ldr	r3, [pc, #108]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800523e:	4a18      	ldr	r2, [pc, #96]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005244:	4b16      	ldr	r3, [pc, #88]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d114      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005250:	f7fd ff58 	bl	8003104 <HAL_GetTick>
 8005254:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005256:	e00a      	b.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005258:	f7fd ff54 	bl	8003104 <HAL_GetTick>
 800525c:	4602      	mov	r2, r0
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	1ad3      	subs	r3, r2, r3
 8005262:	f241 3288 	movw	r2, #5000	; 0x1388
 8005266:	4293      	cmp	r3, r2
 8005268:	d901      	bls.n	800526e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e319      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800526e:	4b0c      	ldr	r3, [pc, #48]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d0ee      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800527e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005286:	d111      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005294:	4b04      	ldr	r3, [pc, #16]	; (80052a8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005296:	400b      	ands	r3, r1
 8005298:	4901      	ldr	r1, [pc, #4]	; (80052a0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
 800529e:	e00b      	b.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80052a0:	40023800 	.word	0x40023800
 80052a4:	40007000 	.word	0x40007000
 80052a8:	0ffffcff 	.word	0x0ffffcff
 80052ac:	4baa      	ldr	r3, [pc, #680]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	4aa9      	ldr	r2, [pc, #676]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052b2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052b6:	6093      	str	r3, [r2, #8]
 80052b8:	4ba7      	ldr	r3, [pc, #668]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052c4:	49a4      	ldr	r1, [pc, #656]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f003 0310 	and.w	r3, r3, #16
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d010      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80052d6:	4ba0      	ldr	r3, [pc, #640]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052dc:	4a9e      	ldr	r2, [pc, #632]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052e2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80052e6:	4b9c      	ldr	r3, [pc, #624]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052e8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052f0:	4999      	ldr	r1, [pc, #612]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005300:	2b00      	cmp	r3, #0
 8005302:	d00a      	beq.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005304:	4b94      	ldr	r3, [pc, #592]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800530a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005312:	4991      	ldr	r1, [pc, #580]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005314:	4313      	orrs	r3, r2
 8005316:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d00a      	beq.n	800533c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005326:	4b8c      	ldr	r3, [pc, #560]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800532c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005334:	4988      	ldr	r1, [pc, #544]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005336:	4313      	orrs	r3, r2
 8005338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d00a      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005348:	4b83      	ldr	r3, [pc, #524]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800534a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005356:	4980      	ldr	r1, [pc, #512]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005358:	4313      	orrs	r3, r2
 800535a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d00a      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800536a:	4b7b      	ldr	r3, [pc, #492]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800536c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005370:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4977      	ldr	r1, [pc, #476]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800537a:	4313      	orrs	r3, r2
 800537c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005388:	2b00      	cmp	r3, #0
 800538a:	d00a      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800538c:	4b72      	ldr	r3, [pc, #456]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800538e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005392:	f023 0203 	bic.w	r2, r3, #3
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800539a:	496f      	ldr	r1, [pc, #444]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d00a      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80053ae:	4b6a      	ldr	r3, [pc, #424]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b4:	f023 020c 	bic.w	r2, r3, #12
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053bc:	4966      	ldr	r1, [pc, #408]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d00a      	beq.n	80053e6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053de:	495e      	ldr	r1, [pc, #376]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e0:	4313      	orrs	r3, r2
 80053e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053f2:	4b59      	ldr	r3, [pc, #356]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	4955      	ldr	r1, [pc, #340]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005402:	4313      	orrs	r3, r2
 8005404:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	2b00      	cmp	r3, #0
 8005412:	d00a      	beq.n	800542a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005414:	4b50      	ldr	r3, [pc, #320]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005422:	494d      	ldr	r1, [pc, #308]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005424:	4313      	orrs	r3, r2
 8005426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00a      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005436:	4b48      	ldr	r3, [pc, #288]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005444:	4944      	ldr	r1, [pc, #272]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00a      	beq.n	800546e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005458:	4b3f      	ldr	r3, [pc, #252]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	493c      	ldr	r1, [pc, #240]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00a      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800547a:	4b37      	ldr	r3, [pc, #220]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005480:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005488:	4933      	ldr	r1, [pc, #204]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548a:	4313      	orrs	r3, r2
 800548c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d00a      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800549c:	4b2e      	ldr	r3, [pc, #184]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800549e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054aa:	492b      	ldr	r1, [pc, #172]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ac:	4313      	orrs	r3, r2
 80054ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d011      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80054be:	4b26      	ldr	r3, [pc, #152]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054cc:	4922      	ldr	r1, [pc, #136]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054dc:	d101      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80054ee:	2301      	movs	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d00a      	beq.n	8005514 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054fe:	4b16      	ldr	r3, [pc, #88]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005504:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800550c:	4912      	ldr	r1, [pc, #72]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550e:	4313      	orrs	r3, r2
 8005510:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005520:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005526:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005530:	4909      	ldr	r1, [pc, #36]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005532:	4313      	orrs	r3, r2
 8005534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d006      	beq.n	800554c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	f000 80d9 	beq.w	80056fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800554c:	4b02      	ldr	r3, [pc, #8]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a01      	ldr	r2, [pc, #4]	; (8005558 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005552:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005556:	e001      	b.n	800555c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005558:	40023800 	.word	0x40023800
 800555c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800555e:	f7fd fdd1 	bl	8003104 <HAL_GetTick>
 8005562:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005564:	e008      	b.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005566:	f7fd fdcd 	bl	8003104 <HAL_GetTick>
 800556a:	4602      	mov	r2, r0
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	2b64      	cmp	r3, #100	; 0x64
 8005572:	d901      	bls.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	e194      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005578:	4b6c      	ldr	r3, [pc, #432]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1f0      	bne.n	8005566 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f003 0301 	and.w	r3, r3, #1
 800558c:	2b00      	cmp	r3, #0
 800558e:	d021      	beq.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11d      	bne.n	80055d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005598:	4b64      	ldr	r3, [pc, #400]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800559a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800559e:	0c1b      	lsrs	r3, r3, #16
 80055a0:	f003 0303 	and.w	r3, r3, #3
 80055a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80055a6:	4b61      	ldr	r3, [pc, #388]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ac:	0e1b      	lsrs	r3, r3, #24
 80055ae:	f003 030f 	and.w	r3, r3, #15
 80055b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	019a      	lsls	r2, r3, #6
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	431a      	orrs	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	061b      	lsls	r3, r3, #24
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	071b      	lsls	r3, r3, #28
 80055cc:	4957      	ldr	r1, [pc, #348]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ce:	4313      	orrs	r3, r2
 80055d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d004      	beq.n	80055ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e8:	d00a      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d02e      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055fe:	d129      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005600:	4b4a      	ldr	r3, [pc, #296]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005606:	0c1b      	lsrs	r3, r3, #16
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800560e:	4b47      	ldr	r3, [pc, #284]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005610:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005614:	0f1b      	lsrs	r3, r3, #28
 8005616:	f003 0307 	and.w	r3, r3, #7
 800561a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	019a      	lsls	r2, r3, #6
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	041b      	lsls	r3, r3, #16
 8005626:	431a      	orrs	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	061b      	lsls	r3, r3, #24
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	071b      	lsls	r3, r3, #28
 8005634:	493d      	ldr	r1, [pc, #244]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800563c:	4b3b      	ldr	r3, [pc, #236]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800563e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005642:	f023 021f 	bic.w	r2, r3, #31
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	3b01      	subs	r3, #1
 800564c:	4937      	ldr	r1, [pc, #220]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800564e:	4313      	orrs	r3, r2
 8005650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d01d      	beq.n	800569c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005660:	4b32      	ldr	r3, [pc, #200]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005662:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005666:	0e1b      	lsrs	r3, r3, #24
 8005668:	f003 030f 	and.w	r3, r3, #15
 800566c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800566e:	4b2f      	ldr	r3, [pc, #188]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005670:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005674:	0f1b      	lsrs	r3, r3, #28
 8005676:	f003 0307 	and.w	r3, r3, #7
 800567a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	019a      	lsls	r2, r3, #6
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	691b      	ldr	r3, [r3, #16]
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	431a      	orrs	r2, r3
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	061b      	lsls	r3, r3, #24
 800568e:	431a      	orrs	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	071b      	lsls	r3, r3, #28
 8005694:	4925      	ldr	r1, [pc, #148]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d011      	beq.n	80056cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	019a      	lsls	r2, r3, #6
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	041b      	lsls	r3, r3, #16
 80056b4:	431a      	orrs	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	061b      	lsls	r3, r3, #24
 80056bc:	431a      	orrs	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	071b      	lsls	r3, r3, #28
 80056c4:	4919      	ldr	r1, [pc, #100]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80056cc:	4b17      	ldr	r3, [pc, #92]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a16      	ldr	r2, [pc, #88]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80056d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056d8:	f7fd fd14 	bl	8003104 <HAL_GetTick>
 80056dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056de:	e008      	b.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056e0:	f7fd fd10 	bl	8003104 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b64      	cmp	r3, #100	; 0x64
 80056ec:	d901      	bls.n	80056f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0d7      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056f2:	4b0e      	ldr	r3, [pc, #56]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	2b01      	cmp	r3, #1
 8005702:	f040 80cd 	bne.w	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005706:	4b09      	ldr	r3, [pc, #36]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a08      	ldr	r2, [pc, #32]	; (800572c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800570c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005710:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005712:	f7fd fcf7 	bl	8003104 <HAL_GetTick>
 8005716:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005718:	e00a      	b.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800571a:	f7fd fcf3 	bl	8003104 <HAL_GetTick>
 800571e:	4602      	mov	r2, r0
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	1ad3      	subs	r3, r2, r3
 8005724:	2b64      	cmp	r3, #100	; 0x64
 8005726:	d903      	bls.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005728:	2303      	movs	r3, #3
 800572a:	e0ba      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800572c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005730:	4b5e      	ldr	r3, [pc, #376]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005738:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800573c:	d0ed      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005746:	2b00      	cmp	r3, #0
 8005748:	d003      	beq.n	8005752 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	2b00      	cmp	r3, #0
 8005750:	d009      	beq.n	8005766 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800575a:	2b00      	cmp	r3, #0
 800575c:	d02e      	beq.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005762:	2b00      	cmp	r3, #0
 8005764:	d12a      	bne.n	80057bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005766:	4b51      	ldr	r3, [pc, #324]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800576c:	0c1b      	lsrs	r3, r3, #16
 800576e:	f003 0303 	and.w	r3, r3, #3
 8005772:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005774:	4b4d      	ldr	r3, [pc, #308]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800577a:	0f1b      	lsrs	r3, r3, #28
 800577c:	f003 0307 	and.w	r3, r3, #7
 8005780:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	695b      	ldr	r3, [r3, #20]
 8005786:	019a      	lsls	r2, r3, #6
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	431a      	orrs	r2, r3
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	071b      	lsls	r3, r3, #28
 800579a:	4944      	ldr	r1, [pc, #272]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800579c:	4313      	orrs	r3, r2
 800579e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80057a2:	4b42      	ldr	r3, [pc, #264]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b0:	3b01      	subs	r3, #1
 80057b2:	021b      	lsls	r3, r3, #8
 80057b4:	493d      	ldr	r1, [pc, #244]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d022      	beq.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057d0:	d11d      	bne.n	800580e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80057d2:	4b36      	ldr	r3, [pc, #216]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d8:	0e1b      	lsrs	r3, r3, #24
 80057da:	f003 030f 	and.w	r3, r3, #15
 80057de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057e0:	4b32      	ldr	r3, [pc, #200]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80057e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057e6:	0f1b      	lsrs	r3, r3, #28
 80057e8:	f003 0307 	and.w	r3, r3, #7
 80057ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	019a      	lsls	r2, r3, #6
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6a1b      	ldr	r3, [r3, #32]
 80057f8:	041b      	lsls	r3, r3, #16
 80057fa:	431a      	orrs	r2, r3
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	061b      	lsls	r3, r3, #24
 8005800:	431a      	orrs	r2, r3
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	071b      	lsls	r3, r3, #28
 8005806:	4929      	ldr	r1, [pc, #164]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f003 0308 	and.w	r3, r3, #8
 8005816:	2b00      	cmp	r3, #0
 8005818:	d028      	beq.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800581a:	4b24      	ldr	r3, [pc, #144]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800581c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005820:	0e1b      	lsrs	r3, r3, #24
 8005822:	f003 030f 	and.w	r3, r3, #15
 8005826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005828:	4b20      	ldr	r3, [pc, #128]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	0c1b      	lsrs	r3, r3, #16
 8005830:	f003 0303 	and.w	r3, r3, #3
 8005834:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	019a      	lsls	r2, r3, #6
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	431a      	orrs	r2, r3
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	061b      	lsls	r3, r3, #24
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	071b      	lsls	r3, r3, #28
 800584e:	4917      	ldr	r1, [pc, #92]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005850:	4313      	orrs	r3, r2
 8005852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005856:	4b15      	ldr	r3, [pc, #84]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800585c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005864:	4911      	ldr	r1, [pc, #68]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005866:	4313      	orrs	r3, r2
 8005868:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800586c:	4b0f      	ldr	r3, [pc, #60]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a0e      	ldr	r2, [pc, #56]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005878:	f7fd fc44 	bl	8003104 <HAL_GetTick>
 800587c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800587e:	e008      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005880:	f7fd fc40 	bl	8003104 <HAL_GetTick>
 8005884:	4602      	mov	r2, r0
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	2b64      	cmp	r3, #100	; 0x64
 800588c:	d901      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800588e:	2303      	movs	r3, #3
 8005890:	e007      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005892:	4b06      	ldr	r3, [pc, #24]	; (80058ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800589a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800589e:	d1ef      	bne.n	8005880 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3720      	adds	r7, #32
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40023800 	.word	0x40023800

080058b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b082      	sub	sp, #8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d101      	bne.n	80058c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058be:	2301      	movs	r3, #1
 80058c0:	e049      	b.n	8005956 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058c8:	b2db      	uxtb	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d106      	bne.n	80058dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	2200      	movs	r2, #0
 80058d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f7fd f8e6 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2202      	movs	r2, #2
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	4610      	mov	r0, r2
 80058f0:	f000 fdac 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3708      	adds	r7, #8
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d001      	beq.n	8005978 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	e054      	b.n	8005a22 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2202      	movs	r2, #2
 800597c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f042 0201 	orr.w	r2, r2, #1
 800598e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a26      	ldr	r2, [pc, #152]	; (8005a30 <HAL_TIM_Base_Start_IT+0xd0>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d022      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059a2:	d01d      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <HAL_TIM_Base_Start_IT+0xd4>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d018      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <HAL_TIM_Base_Start_IT+0xd8>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d013      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a1f      	ldr	r2, [pc, #124]	; (8005a3c <HAL_TIM_Base_Start_IT+0xdc>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00e      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <HAL_TIM_Base_Start_IT+0xe0>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d009      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a1c      	ldr	r2, [pc, #112]	; (8005a44 <HAL_TIM_Base_Start_IT+0xe4>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d004      	beq.n	80059e0 <HAL_TIM_Base_Start_IT+0x80>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a1b      	ldr	r2, [pc, #108]	; (8005a48 <HAL_TIM_Base_Start_IT+0xe8>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d115      	bne.n	8005a0c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	4b19      	ldr	r3, [pc, #100]	; (8005a4c <HAL_TIM_Base_Start_IT+0xec>)
 80059e8:	4013      	ands	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2b06      	cmp	r3, #6
 80059f0:	d015      	beq.n	8005a1e <HAL_TIM_Base_Start_IT+0xbe>
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059f8:	d011      	beq.n	8005a1e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0201 	orr.w	r2, r2, #1
 8005a08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a0a:	e008      	b.n	8005a1e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	e000      	b.n	8005a20 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3714      	adds	r7, #20
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	40010000 	.word	0x40010000
 8005a34:	40000400 	.word	0x40000400
 8005a38:	40000800 	.word	0x40000800
 8005a3c:	40000c00 	.word	0x40000c00
 8005a40:	40010400 	.word	0x40010400
 8005a44:	40014000 	.word	0x40014000
 8005a48:	40001800 	.word	0x40001800
 8005a4c:	00010007 	.word	0x00010007

08005a50 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f022 0201 	bic.w	r2, r2, #1
 8005a66:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	6a1a      	ldr	r2, [r3, #32]
 8005a6e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005a72:	4013      	ands	r3, r2
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10f      	bne.n	8005a98 <HAL_TIM_Base_Stop_IT+0x48>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a1a      	ldr	r2, [r3, #32]
 8005a7e:	f240 4344 	movw	r3, #1092	; 0x444
 8005a82:	4013      	ands	r3, r2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d107      	bne.n	8005a98 <HAL_TIM_Base_Stop_IT+0x48>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f022 0201 	bic.w	r2, r2, #1
 8005a96:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005aa0:	2300      	movs	r3, #0
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	370c      	adds	r7, #12
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr

08005aae <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b082      	sub	sp, #8
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d101      	bne.n	8005ac0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005abc:	2301      	movs	r3, #1
 8005abe:	e049      	b.n	8005b54 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac6:	b2db      	uxtb	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d106      	bne.n	8005ada <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f841 	bl	8005b5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2202      	movs	r2, #2
 8005ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f000 fcad 	bl	800644c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2201      	movs	r2, #1
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2201      	movs	r2, #1
 8005b36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b52:	2300      	movs	r3, #0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b64:	bf00      	nop
 8005b66:	370c      	adds	r7, #12
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6e:	4770      	bx	lr

08005b70 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d109      	bne.n	8005b98 <HAL_TIM_PWM_Start_IT+0x28>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	bf14      	ite	ne
 8005b90:	2301      	movne	r3, #1
 8005b92:	2300      	moveq	r3, #0
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	e03c      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xa2>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d109      	bne.n	8005bb2 <HAL_TIM_PWM_Start_IT+0x42>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	bf14      	ite	ne
 8005baa:	2301      	movne	r3, #1
 8005bac:	2300      	moveq	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	e02f      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xa2>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d109      	bne.n	8005bcc <HAL_TIM_PWM_Start_IT+0x5c>
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b01      	cmp	r3, #1
 8005bc2:	bf14      	ite	ne
 8005bc4:	2301      	movne	r3, #1
 8005bc6:	2300      	moveq	r3, #0
 8005bc8:	b2db      	uxtb	r3, r3
 8005bca:	e022      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xa2>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	2b0c      	cmp	r3, #12
 8005bd0:	d109      	bne.n	8005be6 <HAL_TIM_PWM_Start_IT+0x76>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	bf14      	ite	ne
 8005bde:	2301      	movne	r3, #1
 8005be0:	2300      	moveq	r3, #0
 8005be2:	b2db      	uxtb	r3, r3
 8005be4:	e015      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xa2>
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	2b10      	cmp	r3, #16
 8005bea:	d109      	bne.n	8005c00 <HAL_TIM_PWM_Start_IT+0x90>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	bf14      	ite	ne
 8005bf8:	2301      	movne	r3, #1
 8005bfa:	2300      	moveq	r3, #0
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	e008      	b.n	8005c12 <HAL_TIM_PWM_Start_IT+0xa2>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d001      	beq.n	8005c1a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e0dd      	b.n	8005dd6 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <HAL_TIM_PWM_Start_IT+0xba>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2202      	movs	r2, #2
 8005c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c28:	e023      	b.n	8005c72 <HAL_TIM_PWM_Start_IT+0x102>
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b04      	cmp	r3, #4
 8005c2e:	d104      	bne.n	8005c3a <HAL_TIM_PWM_Start_IT+0xca>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2202      	movs	r2, #2
 8005c34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c38:	e01b      	b.n	8005c72 <HAL_TIM_PWM_Start_IT+0x102>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d104      	bne.n	8005c4a <HAL_TIM_PWM_Start_IT+0xda>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c48:	e013      	b.n	8005c72 <HAL_TIM_PWM_Start_IT+0x102>
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	2b0c      	cmp	r3, #12
 8005c4e:	d104      	bne.n	8005c5a <HAL_TIM_PWM_Start_IT+0xea>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2202      	movs	r2, #2
 8005c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c58:	e00b      	b.n	8005c72 <HAL_TIM_PWM_Start_IT+0x102>
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	2b10      	cmp	r3, #16
 8005c5e:	d104      	bne.n	8005c6a <HAL_TIM_PWM_Start_IT+0xfa>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c68:	e003      	b.n	8005c72 <HAL_TIM_PWM_Start_IT+0x102>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2202      	movs	r2, #2
 8005c6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	2b0c      	cmp	r3, #12
 8005c76:	d841      	bhi.n	8005cfc <HAL_TIM_PWM_Start_IT+0x18c>
 8005c78:	a201      	add	r2, pc, #4	; (adr r2, 8005c80 <HAL_TIM_PWM_Start_IT+0x110>)
 8005c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7e:	bf00      	nop
 8005c80:	08005cb5 	.word	0x08005cb5
 8005c84:	08005cfd 	.word	0x08005cfd
 8005c88:	08005cfd 	.word	0x08005cfd
 8005c8c:	08005cfd 	.word	0x08005cfd
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cfd 	.word	0x08005cfd
 8005c98:	08005cfd 	.word	0x08005cfd
 8005c9c:	08005cfd 	.word	0x08005cfd
 8005ca0:	08005cd9 	.word	0x08005cd9
 8005ca4:	08005cfd 	.word	0x08005cfd
 8005ca8:	08005cfd 	.word	0x08005cfd
 8005cac:	08005cfd 	.word	0x08005cfd
 8005cb0:	08005ceb 	.word	0x08005ceb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68da      	ldr	r2, [r3, #12]
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f042 0202 	orr.w	r2, r2, #2
 8005cc2:	60da      	str	r2, [r3, #12]
      break;
 8005cc4:	e01d      	b.n	8005d02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68da      	ldr	r2, [r3, #12]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f042 0204 	orr.w	r2, r2, #4
 8005cd4:	60da      	str	r2, [r3, #12]
      break;
 8005cd6:	e014      	b.n	8005d02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68da      	ldr	r2, [r3, #12]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f042 0208 	orr.w	r2, r2, #8
 8005ce6:	60da      	str	r2, [r3, #12]
      break;
 8005ce8:	e00b      	b.n	8005d02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f042 0210 	orr.w	r2, r2, #16
 8005cf8:	60da      	str	r2, [r3, #12]
      break;
 8005cfa:	e002      	b.n	8005d02 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005d00:	bf00      	nop
  }

  if (status == HAL_OK)
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d165      	bne.n	8005dd4 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	4618      	mov	r0, r3
 8005d12:	f000 ff33 	bl	8006b7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a31      	ldr	r2, [pc, #196]	; (8005de0 <HAL_TIM_PWM_Start_IT+0x270>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d004      	beq.n	8005d2a <HAL_TIM_PWM_Start_IT+0x1ba>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2f      	ldr	r2, [pc, #188]	; (8005de4 <HAL_TIM_PWM_Start_IT+0x274>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PWM_Start_IT+0x1be>
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e000      	b.n	8005d30 <HAL_TIM_PWM_Start_IT+0x1c0>
 8005d2e:	2300      	movs	r3, #0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d007      	beq.n	8005d44 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d42:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a25      	ldr	r2, [pc, #148]	; (8005de0 <HAL_TIM_PWM_Start_IT+0x270>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d022      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d56:	d01d      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <HAL_TIM_PWM_Start_IT+0x278>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d018      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a21      	ldr	r2, [pc, #132]	; (8005dec <HAL_TIM_PWM_Start_IT+0x27c>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a1f      	ldr	r2, [pc, #124]	; (8005df0 <HAL_TIM_PWM_Start_IT+0x280>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a1a      	ldr	r2, [pc, #104]	; (8005de4 <HAL_TIM_PWM_Start_IT+0x274>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a1b      	ldr	r2, [pc, #108]	; (8005df4 <HAL_TIM_PWM_Start_IT+0x284>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_TIM_PWM_Start_IT+0x224>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a1a      	ldr	r2, [pc, #104]	; (8005df8 <HAL_TIM_PWM_Start_IT+0x288>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d115      	bne.n	8005dc0 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	689a      	ldr	r2, [r3, #8]
 8005d9a:	4b18      	ldr	r3, [pc, #96]	; (8005dfc <HAL_TIM_PWM_Start_IT+0x28c>)
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2b06      	cmp	r3, #6
 8005da4:	d015      	beq.n	8005dd2 <HAL_TIM_PWM_Start_IT+0x262>
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005dac:	d011      	beq.n	8005dd2 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dbe:	e008      	b.n	8005dd2 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0201 	orr.w	r2, r2, #1
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	e000      	b.n	8005dd4 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	40010000 	.word	0x40010000
 8005de4:	40010400 	.word	0x40010400
 8005de8:	40000400 	.word	0x40000400
 8005dec:	40000800 	.word	0x40000800
 8005df0:	40000c00 	.word	0x40000c00
 8005df4:	40014000 	.word	0x40014000
 8005df8:	40001800 	.word	0x40001800
 8005dfc:	00010007 	.word	0x00010007

08005e00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d122      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d11b      	bne.n	8005e5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f06f 0202 	mvn.w	r2, #2
 8005e2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2201      	movs	r2, #1
 8005e32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f000 fae4 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8005e48:	e005      	b.n	8005e56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 fad6 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fae7 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	691b      	ldr	r3, [r3, #16]
 8005e62:	f003 0304 	and.w	r3, r3, #4
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d122      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f003 0304 	and.w	r3, r3, #4
 8005e74:	2b04      	cmp	r3, #4
 8005e76:	d11b      	bne.n	8005eb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f06f 0204 	mvn.w	r2, #4
 8005e80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2202      	movs	r2, #2
 8005e86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d003      	beq.n	8005e9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e96:	6878      	ldr	r0, [r7, #4]
 8005e98:	f000 faba 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8005e9c:	e005      	b.n	8005eaa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 faac 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea4:	6878      	ldr	r0, [r7, #4]
 8005ea6:	f000 fabd 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2200      	movs	r2, #0
 8005eae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b08      	cmp	r3, #8
 8005ebc:	d122      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f003 0308 	and.w	r3, r3, #8
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d11b      	bne.n	8005f04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f06f 0208 	mvn.w	r2, #8
 8005ed4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2204      	movs	r2, #4
 8005eda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69db      	ldr	r3, [r3, #28]
 8005ee2:	f003 0303 	and.w	r3, r3, #3
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fa90 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8005ef0:	e005      	b.n	8005efe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa82 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 fa93 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	691b      	ldr	r3, [r3, #16]
 8005f0a:	f003 0310 	and.w	r3, r3, #16
 8005f0e:	2b10      	cmp	r3, #16
 8005f10:	d122      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68db      	ldr	r3, [r3, #12]
 8005f18:	f003 0310 	and.w	r3, r3, #16
 8005f1c:	2b10      	cmp	r3, #16
 8005f1e:	d11b      	bne.n	8005f58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0210 	mvn.w	r2, #16
 8005f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2208      	movs	r2, #8
 8005f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	69db      	ldr	r3, [r3, #28]
 8005f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d003      	beq.n	8005f46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f3e:	6878      	ldr	r0, [r7, #4]
 8005f40:	f000 fa66 	bl	8006410 <HAL_TIM_IC_CaptureCallback>
 8005f44:	e005      	b.n	8005f52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f000 fa58 	bl	80063fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	f000 fa69 	bl	8006424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	691b      	ldr	r3, [r3, #16]
 8005f5e:	f003 0301 	and.w	r3, r3, #1
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d10e      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68db      	ldr	r3, [r3, #12]
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d107      	bne.n	8005f84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f06f 0201 	mvn.w	r2, #1
 8005f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f7fb fcd0 	bl	8001924 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	691b      	ldr	r3, [r3, #16]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d10e      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9c:	2b80      	cmp	r3, #128	; 0x80
 8005f9e:	d107      	bne.n	8005fb0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fea4 	bl	8006cf8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	691b      	ldr	r3, [r3, #16]
 8005fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fbe:	d10e      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68db      	ldr	r3, [r3, #12]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	2b80      	cmp	r3, #128	; 0x80
 8005fcc:	d107      	bne.n	8005fde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fe97 	bl	8006d0c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	691b      	ldr	r3, [r3, #16]
 8005fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe8:	2b40      	cmp	r3, #64	; 0x40
 8005fea:	d10e      	bne.n	800600a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ff6:	2b40      	cmp	r3, #64	; 0x40
 8005ff8:	d107      	bne.n	800600a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006002:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f000 fa17 	bl	8006438 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f003 0320 	and.w	r3, r3, #32
 8006014:	2b20      	cmp	r3, #32
 8006016:	d10e      	bne.n	8006036 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	f003 0320 	and.w	r3, r3, #32
 8006022:	2b20      	cmp	r3, #32
 8006024:	d107      	bne.n	8006036 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f06f 0220 	mvn.w	r2, #32
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 fe57 	bl	8006ce4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006036:	bf00      	nop
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
	...

08006040 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b086      	sub	sp, #24
 8006044:	af00      	add	r7, sp, #0
 8006046:	60f8      	str	r0, [r7, #12]
 8006048:	60b9      	str	r1, [r7, #8]
 800604a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800604c:	2300      	movs	r3, #0
 800604e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800605a:	2302      	movs	r3, #2
 800605c:	e0ff      	b.n	800625e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2b14      	cmp	r3, #20
 800606a:	f200 80f0 	bhi.w	800624e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800606e:	a201      	add	r2, pc, #4	; (adr r2, 8006074 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006074:	080060c9 	.word	0x080060c9
 8006078:	0800624f 	.word	0x0800624f
 800607c:	0800624f 	.word	0x0800624f
 8006080:	0800624f 	.word	0x0800624f
 8006084:	08006109 	.word	0x08006109
 8006088:	0800624f 	.word	0x0800624f
 800608c:	0800624f 	.word	0x0800624f
 8006090:	0800624f 	.word	0x0800624f
 8006094:	0800614b 	.word	0x0800614b
 8006098:	0800624f 	.word	0x0800624f
 800609c:	0800624f 	.word	0x0800624f
 80060a0:	0800624f 	.word	0x0800624f
 80060a4:	0800618b 	.word	0x0800618b
 80060a8:	0800624f 	.word	0x0800624f
 80060ac:	0800624f 	.word	0x0800624f
 80060b0:	0800624f 	.word	0x0800624f
 80060b4:	080061cd 	.word	0x080061cd
 80060b8:	0800624f 	.word	0x0800624f
 80060bc:	0800624f 	.word	0x0800624f
 80060c0:	0800624f 	.word	0x0800624f
 80060c4:	0800620d 	.word	0x0800620d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	68b9      	ldr	r1, [r7, #8]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f000 fa5c 	bl	800658c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699a      	ldr	r2, [r3, #24]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f042 0208 	orr.w	r2, r2, #8
 80060e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f022 0204 	bic.w	r2, r2, #4
 80060f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	6999      	ldr	r1, [r3, #24]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	691a      	ldr	r2, [r3, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	430a      	orrs	r2, r1
 8006104:	619a      	str	r2, [r3, #24]
      break;
 8006106:	e0a5      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f000 faae 	bl	8006670 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	699a      	ldr	r2, [r3, #24]
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	699a      	ldr	r2, [r3, #24]
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6999      	ldr	r1, [r3, #24]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	691b      	ldr	r3, [r3, #16]
 800613e:	021a      	lsls	r2, r3, #8
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	430a      	orrs	r2, r1
 8006146:	619a      	str	r2, [r3, #24]
      break;
 8006148:	e084      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	4618      	mov	r0, r3
 8006152:	f000 fb05 	bl	8006760 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	69da      	ldr	r2, [r3, #28]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f042 0208 	orr.w	r2, r2, #8
 8006164:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	69da      	ldr	r2, [r3, #28]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0204 	bic.w	r2, r2, #4
 8006174:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	69d9      	ldr	r1, [r3, #28]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	691a      	ldr	r2, [r3, #16]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	430a      	orrs	r2, r1
 8006186:	61da      	str	r2, [r3, #28]
      break;
 8006188:	e064      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fb5b 	bl	800684c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69da      	ldr	r2, [r3, #28]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	69da      	ldr	r2, [r3, #28]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	69d9      	ldr	r1, [r3, #28]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	691b      	ldr	r3, [r3, #16]
 80061c0:	021a      	lsls	r2, r3, #8
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	61da      	str	r2, [r3, #28]
      break;
 80061ca:	e043      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fb92 	bl	80068fc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f042 0208 	orr.w	r2, r2, #8
 80061e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0204 	bic.w	r2, r2, #4
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	691a      	ldr	r2, [r3, #16]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	430a      	orrs	r2, r1
 8006208:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800620a:	e023      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	68b9      	ldr	r1, [r7, #8]
 8006212:	4618      	mov	r0, r3
 8006214:	f000 fbc4 	bl	80069a0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006226:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006236:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	691b      	ldr	r3, [r3, #16]
 8006242:	021a      	lsls	r2, r3, #8
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	430a      	orrs	r2, r1
 800624a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800624c:	e002      	b.n	8006254 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	75fb      	strb	r3, [r7, #23]
      break;
 8006252:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800625c:	7dfb      	ldrb	r3, [r7, #23]
}
 800625e:	4618      	mov	r0, r3
 8006260:	3718      	adds	r7, #24
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
 8006266:	bf00      	nop

08006268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006272:	2300      	movs	r3, #0
 8006274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800627c:	2b01      	cmp	r3, #1
 800627e:	d101      	bne.n	8006284 <HAL_TIM_ConfigClockSource+0x1c>
 8006280:	2302      	movs	r3, #2
 8006282:	e0b4      	b.n	80063ee <HAL_TIM_ConfigClockSource+0x186>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2201      	movs	r2, #1
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2202      	movs	r2, #2
 8006290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	4b56      	ldr	r3, [pc, #344]	; (80063f8 <HAL_TIM_ConfigClockSource+0x190>)
 80062a0:	4013      	ands	r3, r2
 80062a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80062aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68ba      	ldr	r2, [r7, #8]
 80062b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062bc:	d03e      	beq.n	800633c <HAL_TIM_ConfigClockSource+0xd4>
 80062be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80062c2:	f200 8087 	bhi.w	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	f000 8086 	beq.w	80063da <HAL_TIM_ConfigClockSource+0x172>
 80062ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062d2:	d87f      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062d4:	2b70      	cmp	r3, #112	; 0x70
 80062d6:	d01a      	beq.n	800630e <HAL_TIM_ConfigClockSource+0xa6>
 80062d8:	2b70      	cmp	r3, #112	; 0x70
 80062da:	d87b      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062dc:	2b60      	cmp	r3, #96	; 0x60
 80062de:	d050      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0x11a>
 80062e0:	2b60      	cmp	r3, #96	; 0x60
 80062e2:	d877      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062e4:	2b50      	cmp	r3, #80	; 0x50
 80062e6:	d03c      	beq.n	8006362 <HAL_TIM_ConfigClockSource+0xfa>
 80062e8:	2b50      	cmp	r3, #80	; 0x50
 80062ea:	d873      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d058      	beq.n	80063a2 <HAL_TIM_ConfigClockSource+0x13a>
 80062f0:	2b40      	cmp	r3, #64	; 0x40
 80062f2:	d86f      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062f4:	2b30      	cmp	r3, #48	; 0x30
 80062f6:	d064      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x15a>
 80062f8:	2b30      	cmp	r3, #48	; 0x30
 80062fa:	d86b      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 80062fc:	2b20      	cmp	r3, #32
 80062fe:	d060      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006300:	2b20      	cmp	r3, #32
 8006302:	d867      	bhi.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d05c      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006308:	2b10      	cmp	r3, #16
 800630a:	d05a      	beq.n	80063c2 <HAL_TIM_ConfigClockSource+0x15a>
 800630c:	e062      	b.n	80063d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	6899      	ldr	r1, [r3, #8]
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	685a      	ldr	r2, [r3, #4]
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	f000 fc0d 	bl	8006b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800632a:	68bb      	ldr	r3, [r7, #8]
 800632c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68ba      	ldr	r2, [r7, #8]
 8006338:	609a      	str	r2, [r3, #8]
      break;
 800633a:	e04f      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6818      	ldr	r0, [r3, #0]
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	6899      	ldr	r1, [r3, #8]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f000 fbf6 	bl	8006b3c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689a      	ldr	r2, [r3, #8]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800635e:	609a      	str	r2, [r3, #8]
      break;
 8006360:	e03c      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	6859      	ldr	r1, [r3, #4]
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	461a      	mov	r2, r3
 8006370:	f000 fb6a 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	2150      	movs	r1, #80	; 0x50
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fbc3 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 8006380:	e02c      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6859      	ldr	r1, [r3, #4]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	461a      	mov	r2, r3
 8006390:	f000 fb89 	bl	8006aa6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	2160      	movs	r1, #96	; 0x60
 800639a:	4618      	mov	r0, r3
 800639c:	f000 fbb3 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80063a0:	e01c      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	6859      	ldr	r1, [r3, #4]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	68db      	ldr	r3, [r3, #12]
 80063ae:	461a      	mov	r2, r3
 80063b0:	f000 fb4a 	bl	8006a48 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2140      	movs	r1, #64	; 0x40
 80063ba:	4618      	mov	r0, r3
 80063bc:	f000 fba3 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80063c0:	e00c      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4619      	mov	r1, r3
 80063cc:	4610      	mov	r0, r2
 80063ce:	f000 fb9a 	bl	8006b06 <TIM_ITRx_SetConfig>
      break;
 80063d2:	e003      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
      break;
 80063d8:	e000      	b.n	80063dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80063da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3710      	adds	r7, #16
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	bf00      	nop
 80063f8:	fffeff88 	.word	0xfffeff88

080063fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006404:	bf00      	nop
 8006406:	370c      	adds	r7, #12
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr

08006410 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr

08006424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a40      	ldr	r2, [pc, #256]	; (8006560 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d013      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800646a:	d00f      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	4a3d      	ldr	r2, [pc, #244]	; (8006564 <TIM_Base_SetConfig+0x118>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d00b      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	4a3c      	ldr	r2, [pc, #240]	; (8006568 <TIM_Base_SetConfig+0x11c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d007      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a3b      	ldr	r2, [pc, #236]	; (800656c <TIM_Base_SetConfig+0x120>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d003      	beq.n	800648c <TIM_Base_SetConfig+0x40>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a3a      	ldr	r2, [pc, #232]	; (8006570 <TIM_Base_SetConfig+0x124>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d108      	bne.n	800649e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006494:	683b      	ldr	r3, [r7, #0]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2f      	ldr	r2, [pc, #188]	; (8006560 <TIM_Base_SetConfig+0x114>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d02b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d027      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <TIM_Base_SetConfig+0x118>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d023      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <TIM_Base_SetConfig+0x11c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d01f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a2a      	ldr	r2, [pc, #168]	; (800656c <TIM_Base_SetConfig+0x120>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d01b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a29      	ldr	r2, [pc, #164]	; (8006570 <TIM_Base_SetConfig+0x124>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d017      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a28      	ldr	r2, [pc, #160]	; (8006574 <TIM_Base_SetConfig+0x128>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d013      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a27      	ldr	r2, [pc, #156]	; (8006578 <TIM_Base_SetConfig+0x12c>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d00f      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a26      	ldr	r2, [pc, #152]	; (800657c <TIM_Base_SetConfig+0x130>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d00b      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a25      	ldr	r2, [pc, #148]	; (8006580 <TIM_Base_SetConfig+0x134>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d007      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a24      	ldr	r2, [pc, #144]	; (8006584 <TIM_Base_SetConfig+0x138>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d003      	beq.n	80064fe <TIM_Base_SetConfig+0xb2>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a23      	ldr	r2, [pc, #140]	; (8006588 <TIM_Base_SetConfig+0x13c>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d108      	bne.n	8006510 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	68db      	ldr	r3, [r3, #12]
 800650a:	68fa      	ldr	r2, [r7, #12]
 800650c:	4313      	orrs	r3, r2
 800650e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	4313      	orrs	r3, r2
 800651c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <TIM_Base_SetConfig+0x114>)
 8006538:	4293      	cmp	r3, r2
 800653a:	d003      	beq.n	8006544 <TIM_Base_SetConfig+0xf8>
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4a0c      	ldr	r2, [pc, #48]	; (8006570 <TIM_Base_SetConfig+0x124>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d103      	bne.n	800654c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	615a      	str	r2, [r3, #20]
}
 8006552:	bf00      	nop
 8006554:	3714      	adds	r7, #20
 8006556:	46bd      	mov	sp, r7
 8006558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655c:	4770      	bx	lr
 800655e:	bf00      	nop
 8006560:	40010000 	.word	0x40010000
 8006564:	40000400 	.word	0x40000400
 8006568:	40000800 	.word	0x40000800
 800656c:	40000c00 	.word	0x40000c00
 8006570:	40010400 	.word	0x40010400
 8006574:	40014000 	.word	0x40014000
 8006578:	40014400 	.word	0x40014400
 800657c:	40014800 	.word	0x40014800
 8006580:	40001800 	.word	0x40001800
 8006584:	40001c00 	.word	0x40001c00
 8006588:	40002000 	.word	0x40002000

0800658c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800658c:	b480      	push	{r7}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	f023 0201 	bic.w	r2, r3, #1
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6a1b      	ldr	r3, [r3, #32]
 80065a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4b2b      	ldr	r3, [pc, #172]	; (8006664 <TIM_OC1_SetConfig+0xd8>)
 80065b8:	4013      	ands	r3, r2
 80065ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f023 0303 	bic.w	r3, r3, #3
 80065c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	4313      	orrs	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	f023 0302 	bic.w	r3, r3, #2
 80065d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	689b      	ldr	r3, [r3, #8]
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	4313      	orrs	r3, r2
 80065de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_OC1_SetConfig+0xdc>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d003      	beq.n	80065f0 <TIM_OC1_SetConfig+0x64>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	4a20      	ldr	r2, [pc, #128]	; (800666c <TIM_OC1_SetConfig+0xe0>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d10c      	bne.n	800660a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f023 0308 	bic.w	r3, r3, #8
 80065f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	68db      	ldr	r3, [r3, #12]
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	4313      	orrs	r3, r2
 8006600:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	f023 0304 	bic.w	r3, r3, #4
 8006608:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <TIM_OC1_SetConfig+0xdc>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d003      	beq.n	800661a <TIM_OC1_SetConfig+0x8e>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a15      	ldr	r2, [pc, #84]	; (800666c <TIM_OC1_SetConfig+0xe0>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d111      	bne.n	800663e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006620:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006628:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	695b      	ldr	r3, [r3, #20]
 800662e:	693a      	ldr	r2, [r7, #16]
 8006630:	4313      	orrs	r3, r2
 8006632:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006634:	683b      	ldr	r3, [r7, #0]
 8006636:	699b      	ldr	r3, [r3, #24]
 8006638:	693a      	ldr	r2, [r7, #16]
 800663a:	4313      	orrs	r3, r2
 800663c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	68fa      	ldr	r2, [r7, #12]
 8006648:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	621a      	str	r2, [r3, #32]
}
 8006658:	bf00      	nop
 800665a:	371c      	adds	r7, #28
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr
 8006664:	fffeff8f 	.word	0xfffeff8f
 8006668:	40010000 	.word	0x40010000
 800666c:	40010400 	.word	0x40010400

08006670 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006670:	b480      	push	{r7}
 8006672:	b087      	sub	sp, #28
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a1b      	ldr	r3, [r3, #32]
 800667e:	f023 0210 	bic.w	r2, r3, #16
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006698:	68fa      	ldr	r2, [r7, #12]
 800669a:	4b2e      	ldr	r3, [pc, #184]	; (8006754 <TIM_OC2_SetConfig+0xe4>)
 800669c:	4013      	ands	r3, r2
 800669e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	021b      	lsls	r3, r3, #8
 80066ae:	68fa      	ldr	r2, [r7, #12]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	f023 0320 	bic.w	r3, r3, #32
 80066ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	011b      	lsls	r3, r3, #4
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4a23      	ldr	r2, [pc, #140]	; (8006758 <TIM_OC2_SetConfig+0xe8>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d003      	beq.n	80066d8 <TIM_OC2_SetConfig+0x68>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4a22      	ldr	r2, [pc, #136]	; (800675c <TIM_OC2_SetConfig+0xec>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d10d      	bne.n	80066f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	011b      	lsls	r3, r3, #4
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80066f2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	4a18      	ldr	r2, [pc, #96]	; (8006758 <TIM_OC2_SetConfig+0xe8>)
 80066f8:	4293      	cmp	r3, r2
 80066fa:	d003      	beq.n	8006704 <TIM_OC2_SetConfig+0x94>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a17      	ldr	r2, [pc, #92]	; (800675c <TIM_OC2_SetConfig+0xec>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d113      	bne.n	800672c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800670a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006712:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	693a      	ldr	r2, [r7, #16]
 8006728:	4313      	orrs	r3, r2
 800672a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	693a      	ldr	r2, [r7, #16]
 8006730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	697a      	ldr	r2, [r7, #20]
 8006744:	621a      	str	r2, [r3, #32]
}
 8006746:	bf00      	nop
 8006748:	371c      	adds	r7, #28
 800674a:	46bd      	mov	sp, r7
 800674c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	feff8fff 	.word	0xfeff8fff
 8006758:	40010000 	.word	0x40010000
 800675c:	40010400 	.word	0x40010400

08006760 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006760:	b480      	push	{r7}
 8006762:	b087      	sub	sp, #28
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
 8006768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a1b      	ldr	r3, [r3, #32]
 800676e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a1b      	ldr	r3, [r3, #32]
 800677a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	685b      	ldr	r3, [r3, #4]
 8006780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	69db      	ldr	r3, [r3, #28]
 8006786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4b2d      	ldr	r3, [pc, #180]	; (8006840 <TIM_OC3_SetConfig+0xe0>)
 800678c:	4013      	ands	r3, r2
 800678e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 0303 	bic.w	r3, r3, #3
 8006796:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	4313      	orrs	r3, r2
 80067a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	021b      	lsls	r3, r3, #8
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	4313      	orrs	r3, r2
 80067b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4a22      	ldr	r2, [pc, #136]	; (8006844 <TIM_OC3_SetConfig+0xe4>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d003      	beq.n	80067c6 <TIM_OC3_SetConfig+0x66>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a21      	ldr	r2, [pc, #132]	; (8006848 <TIM_OC3_SetConfig+0xe8>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d10d      	bne.n	80067e2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80067cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	021b      	lsls	r3, r3, #8
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80067e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a17      	ldr	r2, [pc, #92]	; (8006844 <TIM_OC3_SetConfig+0xe4>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <TIM_OC3_SetConfig+0x92>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a16      	ldr	r2, [pc, #88]	; (8006848 <TIM_OC3_SetConfig+0xe8>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d113      	bne.n	800681a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80067f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	011b      	lsls	r3, r3, #4
 8006808:	693a      	ldr	r2, [r7, #16]
 800680a:	4313      	orrs	r3, r2
 800680c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	011b      	lsls	r3, r3, #4
 8006814:	693a      	ldr	r2, [r7, #16]
 8006816:	4313      	orrs	r3, r2
 8006818:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	693a      	ldr	r2, [r7, #16]
 800681e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68fa      	ldr	r2, [r7, #12]
 8006824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	621a      	str	r2, [r3, #32]
}
 8006834:	bf00      	nop
 8006836:	371c      	adds	r7, #28
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr
 8006840:	fffeff8f 	.word	0xfffeff8f
 8006844:	40010000 	.word	0x40010000
 8006848:	40010400 	.word	0x40010400

0800684c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a1b      	ldr	r3, [r3, #32]
 800685a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6a1b      	ldr	r3, [r3, #32]
 8006866:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	69db      	ldr	r3, [r3, #28]
 8006872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006874:	68fa      	ldr	r2, [r7, #12]
 8006876:	4b1e      	ldr	r3, [pc, #120]	; (80068f0 <TIM_OC4_SetConfig+0xa4>)
 8006878:	4013      	ands	r3, r2
 800687a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006882:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	021b      	lsls	r3, r3, #8
 800688a:	68fa      	ldr	r2, [r7, #12]
 800688c:	4313      	orrs	r3, r2
 800688e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006896:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	689b      	ldr	r3, [r3, #8]
 800689c:	031b      	lsls	r3, r3, #12
 800689e:	693a      	ldr	r2, [r7, #16]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a13      	ldr	r2, [pc, #76]	; (80068f4 <TIM_OC4_SetConfig+0xa8>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d003      	beq.n	80068b4 <TIM_OC4_SetConfig+0x68>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a12      	ldr	r2, [pc, #72]	; (80068f8 <TIM_OC4_SetConfig+0xac>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d109      	bne.n	80068c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80068b4:	697b      	ldr	r3, [r7, #20]
 80068b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	695b      	ldr	r3, [r3, #20]
 80068c0:	019b      	lsls	r3, r3, #6
 80068c2:	697a      	ldr	r2, [r7, #20]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	697a      	ldr	r2, [r7, #20]
 80068cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	685a      	ldr	r2, [r3, #4]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	621a      	str	r2, [r3, #32]
}
 80068e2:	bf00      	nop
 80068e4:	371c      	adds	r7, #28
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	feff8fff 	.word	0xfeff8fff
 80068f4:	40010000 	.word	0x40010000
 80068f8:	40010400 	.word	0x40010400

080068fc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b087      	sub	sp, #28
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a1b      	ldr	r3, [r3, #32]
 800690a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a1b      	ldr	r3, [r3, #32]
 8006916:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	685b      	ldr	r3, [r3, #4]
 800691c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	4b1b      	ldr	r3, [pc, #108]	; (8006994 <TIM_OC5_SetConfig+0x98>)
 8006928:	4013      	ands	r3, r2
 800692a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	4313      	orrs	r3, r2
 8006934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800693c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	041b      	lsls	r3, r3, #16
 8006944:	693a      	ldr	r2, [r7, #16]
 8006946:	4313      	orrs	r3, r2
 8006948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a12      	ldr	r2, [pc, #72]	; (8006998 <TIM_OC5_SetConfig+0x9c>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d003      	beq.n	800695a <TIM_OC5_SetConfig+0x5e>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a11      	ldr	r2, [pc, #68]	; (800699c <TIM_OC5_SetConfig+0xa0>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d109      	bne.n	800696e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006960:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	021b      	lsls	r3, r3, #8
 8006968:	697a      	ldr	r2, [r7, #20]
 800696a:	4313      	orrs	r3, r2
 800696c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	697a      	ldr	r2, [r7, #20]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	fffeff8f 	.word	0xfffeff8f
 8006998:	40010000 	.word	0x40010000
 800699c:	40010400 	.word	0x40010400

080069a0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b087      	sub	sp, #28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6a1b      	ldr	r3, [r3, #32]
 80069ae:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <TIM_OC6_SetConfig+0x9c>)
 80069cc:	4013      	ands	r3, r2
 80069ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	051b      	lsls	r3, r3, #20
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a13      	ldr	r2, [pc, #76]	; (8006a40 <TIM_OC6_SetConfig+0xa0>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d003      	beq.n	8006a00 <TIM_OC6_SetConfig+0x60>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	4a12      	ldr	r2, [pc, #72]	; (8006a44 <TIM_OC6_SetConfig+0xa4>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d109      	bne.n	8006a14 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a08:	683b      	ldr	r3, [r7, #0]
 8006a0a:	695b      	ldr	r3, [r3, #20]
 8006a0c:	029b      	lsls	r3, r3, #10
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	4313      	orrs	r3, r2
 8006a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	697a      	ldr	r2, [r7, #20]
 8006a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	693a      	ldr	r2, [r7, #16]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr
 8006a3a:	bf00      	nop
 8006a3c:	feff8fff 	.word	0xfeff8fff
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40010400 	.word	0x40010400

08006a48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a48:	b480      	push	{r7}
 8006a4a:	b087      	sub	sp, #28
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	60b9      	str	r1, [r7, #8]
 8006a52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	6a1b      	ldr	r3, [r3, #32]
 8006a58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	f023 0201 	bic.w	r2, r3, #1
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	011b      	lsls	r3, r3, #4
 8006a78:	693a      	ldr	r2, [r7, #16]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 030a 	bic.w	r3, r3, #10
 8006a84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	621a      	str	r2, [r3, #32]
}
 8006a9a:	bf00      	nop
 8006a9c:	371c      	adds	r7, #28
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006aa6:	b480      	push	{r7}
 8006aa8:	b087      	sub	sp, #28
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6a1b      	ldr	r3, [r3, #32]
 8006ab6:	f023 0210 	bic.w	r2, r3, #16
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	699b      	ldr	r3, [r3, #24]
 8006ac2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	6a1b      	ldr	r3, [r3, #32]
 8006ac8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ad0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	031b      	lsls	r3, r3, #12
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ae2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	011b      	lsls	r3, r3, #4
 8006ae8:	693a      	ldr	r2, [r7, #16]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	697a      	ldr	r2, [r7, #20]
 8006af2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	621a      	str	r2, [r3, #32]
}
 8006afa:	bf00      	nop
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b085      	sub	sp, #20
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	689b      	ldr	r3, [r3, #8]
 8006b14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b1e:	683a      	ldr	r2, [r7, #0]
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	f043 0307 	orr.w	r3, r3, #7
 8006b28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	68fa      	ldr	r2, [r7, #12]
 8006b2e:	609a      	str	r2, [r3, #8]
}
 8006b30:	bf00      	nop
 8006b32:	3714      	adds	r7, #20
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr

08006b3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b3c:	b480      	push	{r7}
 8006b3e:	b087      	sub	sp, #28
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
 8006b48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	021a      	lsls	r2, r3, #8
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	431a      	orrs	r2, r3
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	4313      	orrs	r3, r2
 8006b68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	609a      	str	r2, [r3, #8]
}
 8006b70:	bf00      	nop
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b087      	sub	sp, #28
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	60f8      	str	r0, [r7, #12]
 8006b84:	60b9      	str	r1, [r7, #8]
 8006b86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f003 031f 	and.w	r3, r3, #31
 8006b8e:	2201      	movs	r2, #1
 8006b90:	fa02 f303 	lsl.w	r3, r2, r3
 8006b94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6a1a      	ldr	r2, [r3, #32]
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	43db      	mvns	r3, r3
 8006b9e:	401a      	ands	r2, r3
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	6a1a      	ldr	r2, [r3, #32]
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	f003 031f 	and.w	r3, r3, #31
 8006bae:	6879      	ldr	r1, [r7, #4]
 8006bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb4:	431a      	orrs	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	621a      	str	r2, [r3, #32]
}
 8006bba:	bf00      	nop
 8006bbc:	371c      	adds	r7, #28
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
	...

08006bc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
 8006bd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e06d      	b.n	8006cbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a30      	ldr	r2, [pc, #192]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d004      	beq.n	8006c14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2f      	ldr	r2, [pc, #188]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d108      	bne.n	8006c26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	4313      	orrs	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	4a20      	ldr	r2, [pc, #128]	; (8006cc8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d022      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c52:	d01d      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a1d      	ldr	r2, [pc, #116]	; (8006cd0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d018      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d013      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a1a      	ldr	r2, [pc, #104]	; (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d00e      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	4a15      	ldr	r2, [pc, #84]	; (8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d009      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a16      	ldr	r2, [pc, #88]	; (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d004      	beq.n	8006c90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a15      	ldr	r2, [pc, #84]	; (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d10c      	bne.n	8006caa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	68ba      	ldr	r2, [r7, #8]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006cba:	2300      	movs	r3, #0
}
 8006cbc:	4618      	mov	r0, r3
 8006cbe:	3714      	adds	r7, #20
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	40010000 	.word	0x40010000
 8006ccc:	40010400 	.word	0x40010400
 8006cd0:	40000400 	.word	0x40000400
 8006cd4:	40000800 	.word	0x40000800
 8006cd8:	40000c00 	.word	0x40000c00
 8006cdc:	40014000 	.word	0x40014000
 8006ce0:	40001800 	.word	0x40001800

08006ce4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b083      	sub	sp, #12
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006cec:	bf00      	nop
 8006cee:	370c      	adds	r7, #12
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b082      	sub	sp, #8
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d101      	bne.n	8006d32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d2e:	2301      	movs	r3, #1
 8006d30:	e040      	b.n	8006db4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d106      	bne.n	8006d48 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2200      	movs	r2, #0
 8006d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f7fb ff8e 	bl	8002c64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2224      	movs	r2, #36	; 0x24
 8006d4c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	f022 0201 	bic.w	r2, r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 fb16 	bl	8007390 <UART_SetConfig>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b01      	cmp	r3, #1
 8006d68:	d101      	bne.n	8006d6e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	e022      	b.n	8006db4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d002      	beq.n	8006d7c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f000 fd6e 	bl	8007858 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685a      	ldr	r2, [r3, #4]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006d8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689a      	ldr	r2, [r3, #8]
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006d9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f042 0201 	orr.w	r2, r2, #1
 8006daa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fdf5 	bl	800799c <UART_CheckIdleState>
 8006db2:	4603      	mov	r3, r0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b0ba      	sub	sp, #232	; 0xe8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	69db      	ldr	r3, [r3, #28]
 8006dca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	689b      	ldr	r3, [r3, #8]
 8006dde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006de2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006de6:	f640 030f 	movw	r3, #2063	; 0x80f
 8006dea:	4013      	ands	r3, r2
 8006dec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006df0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d115      	bne.n	8006e24 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfc:	f003 0320 	and.w	r3, r3, #32
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00f      	beq.n	8006e24 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e08:	f003 0320 	and.w	r3, r3, #32
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d009      	beq.n	8006e24 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	f000 828f 	beq.w	8007338 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	4798      	blx	r3
      }
      return;
 8006e22:	e289      	b.n	8007338 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 8117 	beq.w	800705c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e32:	f003 0301 	and.w	r3, r3, #1
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d106      	bne.n	8006e48 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e3a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e3e:	4b85      	ldr	r3, [pc, #532]	; (8007054 <HAL_UART_IRQHandler+0x298>)
 8006e40:	4013      	ands	r3, r2
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 810a 	beq.w	800705c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e4c:	f003 0301 	and.w	r3, r3, #1
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d011      	beq.n	8006e78 <HAL_UART_IRQHandler+0xbc>
 8006e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d00b      	beq.n	8006e78 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	2201      	movs	r2, #1
 8006e66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e6e:	f043 0201 	orr.w	r2, r3, #1
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006e78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e7c:	f003 0302 	and.w	r3, r3, #2
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d011      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xec>
 8006e84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d00b      	beq.n	8006ea8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2202      	movs	r2, #2
 8006e96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e9e:	f043 0204 	orr.w	r2, r3, #4
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006eac:	f003 0304 	and.w	r3, r3, #4
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d011      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x11c>
 8006eb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb8:	f003 0301 	and.w	r3, r3, #1
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d00b      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2204      	movs	r2, #4
 8006ec6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ece:	f043 0202 	orr.w	r2, r3, #2
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006edc:	f003 0308 	and.w	r3, r3, #8
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d017      	beq.n	8006f14 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ee8:	f003 0320 	and.w	r3, r3, #32
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d105      	bne.n	8006efc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ef4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2208      	movs	r2, #8
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f0a:	f043 0208 	orr.w	r2, r3, #8
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d012      	beq.n	8006f46 <HAL_UART_IRQHandler+0x18a>
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d00c      	beq.n	8006f46 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f3c:	f043 0220 	orr.w	r2, r3, #32
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	f000 81f5 	beq.w	800733c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f56:	f003 0320 	and.w	r3, r3, #32
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d00d      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d003      	beq.n	8006f7a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f8e:	2b40      	cmp	r3, #64	; 0x40
 8006f90:	d005      	beq.n	8006f9e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d04f      	beq.n	800703e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	f000 fdf3 	bl	8007b8a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fae:	2b40      	cmp	r3, #64	; 0x40
 8006fb0:	d141      	bne.n	8007036 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	3308      	adds	r3, #8
 8006fb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006fc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006fde:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006fe2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006fea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ff6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1d9      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007002:	2b00      	cmp	r3, #0
 8007004:	d013      	beq.n	800702e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800700a:	4a13      	ldr	r2, [pc, #76]	; (8007058 <HAL_UART_IRQHandler+0x29c>)
 800700c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007012:	4618      	mov	r0, r3
 8007014:	f7fd f929 	bl	800426a <HAL_DMA_Abort_IT>
 8007018:	4603      	mov	r3, r0
 800701a:	2b00      	cmp	r3, #0
 800701c:	d017      	beq.n	800704e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007024:	687a      	ldr	r2, [r7, #4]
 8007026:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007028:	4610      	mov	r0, r2
 800702a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800702c:	e00f      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f000 f998 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007034:	e00b      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f000 f994 	bl	8007364 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800703c:	e007      	b.n	800704e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 f990 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2200      	movs	r2, #0
 8007048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800704c:	e176      	b.n	800733c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800704e:	bf00      	nop
    return;
 8007050:	e174      	b.n	800733c <HAL_UART_IRQHandler+0x580>
 8007052:	bf00      	nop
 8007054:	04000120 	.word	0x04000120
 8007058:	08007c51 	.word	0x08007c51

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007060:	2b01      	cmp	r3, #1
 8007062:	f040 8144 	bne.w	80072ee <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800706a:	f003 0310 	and.w	r3, r3, #16
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 813d 	beq.w	80072ee <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007074:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007078:	f003 0310 	and.w	r3, r3, #16
 800707c:	2b00      	cmp	r3, #0
 800707e:	f000 8136 	beq.w	80072ee <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	2210      	movs	r2, #16
 8007088:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007094:	2b40      	cmp	r3, #64	; 0x40
 8007096:	f040 80b2 	bne.w	80071fe <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070a6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 8148 	beq.w	8007340 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ba:	429a      	cmp	r2, r3
 80070bc:	f080 8140 	bcs.w	8007340 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070c6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070ce:	69db      	ldr	r3, [r3, #28]
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d4:	f000 8085 	beq.w	80071e2 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80070e4:	e853 3f00 	ldrex	r3, [r3]
 80070e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80070ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007102:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007106:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800710e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007112:	e841 2300 	strex	r3, r2, [r1]
 8007116:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800711a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1da      	bne.n	80070d8 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800712a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800712c:	e853 3f00 	ldrex	r3, [r3]
 8007130:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007132:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007134:	f023 0301 	bic.w	r3, r3, #1
 8007138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	3308      	adds	r3, #8
 8007142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007146:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800714a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800714c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800714e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007152:	e841 2300 	strex	r3, r2, [r1]
 8007156:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800715a:	2b00      	cmp	r3, #0
 800715c:	d1e1      	bne.n	8007122 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007166:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007168:	e853 3f00 	ldrex	r3, [r3]
 800716c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800716e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007174:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3308      	adds	r3, #8
 800717e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007182:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007184:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007186:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007188:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800718a:	e841 2300 	strex	r3, r2, [r1]
 800718e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007192:	2b00      	cmp	r3, #0
 8007194:	d1e3      	bne.n	800715e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	2220      	movs	r2, #32
 800719a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2200      	movs	r2, #0
 80071a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071aa:	e853 3f00 	ldrex	r3, [r3]
 80071ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071b2:	f023 0310 	bic.w	r3, r3, #16
 80071b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80071c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071cc:	e841 2300 	strex	r3, r2, [r1]
 80071d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d1e4      	bne.n	80071a2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071dc:	4618      	mov	r0, r3
 80071de:	f7fc ffd4 	bl	800418a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80071ee:	b29b      	uxth	r3, r3
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	4619      	mov	r1, r3
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f8be 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071fc:	e0a0      	b.n	8007340 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800720a:	b29b      	uxth	r3, r3
 800720c:	1ad3      	subs	r3, r2, r3
 800720e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007218:	b29b      	uxth	r3, r3
 800721a:	2b00      	cmp	r3, #0
 800721c:	f000 8092 	beq.w	8007344 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007220:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007224:	2b00      	cmp	r3, #0
 8007226:	f000 808d 	beq.w	8007344 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800723a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800723e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800724c:	647b      	str	r3, [r7, #68]	; 0x44
 800724e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007250:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007254:	e841 2300 	strex	r3, r2, [r1]
 8007258:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800725a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800725c:	2b00      	cmp	r3, #0
 800725e:	d1e4      	bne.n	800722a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	3308      	adds	r3, #8
 8007266:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800726a:	e853 3f00 	ldrex	r3, [r3]
 800726e:	623b      	str	r3, [r7, #32]
   return(result);
 8007270:	6a3b      	ldr	r3, [r7, #32]
 8007272:	f023 0301 	bic.w	r3, r3, #1
 8007276:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3308      	adds	r3, #8
 8007280:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007284:	633a      	str	r2, [r7, #48]	; 0x30
 8007286:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007288:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800728a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800728c:	e841 2300 	strex	r3, r2, [r1]
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	2b00      	cmp	r3, #0
 8007296:	d1e3      	bne.n	8007260 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2220      	movs	r2, #32
 800729c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	e853 3f00 	ldrex	r3, [r3]
 80072b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0310 	bic.w	r3, r3, #16
 80072be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072cc:	61fb      	str	r3, [r7, #28]
 80072ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d0:	69b9      	ldr	r1, [r7, #24]
 80072d2:	69fa      	ldr	r2, [r7, #28]
 80072d4:	e841 2300 	strex	r3, r2, [r1]
 80072d8:	617b      	str	r3, [r7, #20]
   return(result);
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1e4      	bne.n	80072aa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80072e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f846 	bl	8007378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80072ec:	e02a      	b.n	8007344 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80072ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d00e      	beq.n	8007318 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80072fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007302:	2b00      	cmp	r3, #0
 8007304:	d008      	beq.n	8007318 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01c      	beq.n	8007348 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
    }
    return;
 8007316:	e017      	b.n	8007348 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d012      	beq.n	800734a <HAL_UART_IRQHandler+0x58e>
 8007324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00c      	beq.n	800734a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007330:	6878      	ldr	r0, [r7, #4]
 8007332:	f000 fca3 	bl	8007c7c <UART_EndTransmit_IT>
    return;
 8007336:	e008      	b.n	800734a <HAL_UART_IRQHandler+0x58e>
      return;
 8007338:	bf00      	nop
 800733a:	e006      	b.n	800734a <HAL_UART_IRQHandler+0x58e>
    return;
 800733c:	bf00      	nop
 800733e:	e004      	b.n	800734a <HAL_UART_IRQHandler+0x58e>
      return;
 8007340:	bf00      	nop
 8007342:	e002      	b.n	800734a <HAL_UART_IRQHandler+0x58e>
      return;
 8007344:	bf00      	nop
 8007346:	e000      	b.n	800734a <HAL_UART_IRQHandler+0x58e>
    return;
 8007348:	bf00      	nop
  }

}
 800734a:	37e8      	adds	r7, #232	; 0xe8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007358:	bf00      	nop
 800735a:	370c      	adds	r7, #12
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800736c:	bf00      	nop
 800736e:	370c      	adds	r7, #12
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b088      	sub	sp, #32
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007398:	2300      	movs	r3, #0
 800739a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689a      	ldr	r2, [r3, #8]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	691b      	ldr	r3, [r3, #16]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	431a      	orrs	r2, r3
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	4ba6      	ldr	r3, [pc, #664]	; (8007654 <UART_SetConfig+0x2c4>)
 80073bc:	4013      	ands	r3, r2
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	6812      	ldr	r2, [r2, #0]
 80073c2:	6979      	ldr	r1, [r7, #20]
 80073c4:	430b      	orrs	r3, r1
 80073c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	430a      	orrs	r2, r1
 80073dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	699b      	ldr	r3, [r3, #24]
 80073e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	697a      	ldr	r2, [r7, #20]
 80073ea:	4313      	orrs	r3, r2
 80073ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	430a      	orrs	r2, r1
 8007400:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	4a94      	ldr	r2, [pc, #592]	; (8007658 <UART_SetConfig+0x2c8>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d120      	bne.n	800744e <UART_SetConfig+0xbe>
 800740c:	4b93      	ldr	r3, [pc, #588]	; (800765c <UART_SetConfig+0x2cc>)
 800740e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	2b03      	cmp	r3, #3
 8007418:	d816      	bhi.n	8007448 <UART_SetConfig+0xb8>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <UART_SetConfig+0x90>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007431 	.word	0x08007431
 8007424:	0800743d 	.word	0x0800743d
 8007428:	08007437 	.word	0x08007437
 800742c:	08007443 	.word	0x08007443
 8007430:	2301      	movs	r3, #1
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e150      	b.n	80076d8 <UART_SetConfig+0x348>
 8007436:	2302      	movs	r3, #2
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e14d      	b.n	80076d8 <UART_SetConfig+0x348>
 800743c:	2304      	movs	r3, #4
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e14a      	b.n	80076d8 <UART_SetConfig+0x348>
 8007442:	2308      	movs	r3, #8
 8007444:	77fb      	strb	r3, [r7, #31]
 8007446:	e147      	b.n	80076d8 <UART_SetConfig+0x348>
 8007448:	2310      	movs	r3, #16
 800744a:	77fb      	strb	r3, [r7, #31]
 800744c:	e144      	b.n	80076d8 <UART_SetConfig+0x348>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a83      	ldr	r2, [pc, #524]	; (8007660 <UART_SetConfig+0x2d0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d132      	bne.n	80074be <UART_SetConfig+0x12e>
 8007458:	4b80      	ldr	r3, [pc, #512]	; (800765c <UART_SetConfig+0x2cc>)
 800745a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800745e:	f003 030c 	and.w	r3, r3, #12
 8007462:	2b0c      	cmp	r3, #12
 8007464:	d828      	bhi.n	80074b8 <UART_SetConfig+0x128>
 8007466:	a201      	add	r2, pc, #4	; (adr r2, 800746c <UART_SetConfig+0xdc>)
 8007468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746c:	080074a1 	.word	0x080074a1
 8007470:	080074b9 	.word	0x080074b9
 8007474:	080074b9 	.word	0x080074b9
 8007478:	080074b9 	.word	0x080074b9
 800747c:	080074ad 	.word	0x080074ad
 8007480:	080074b9 	.word	0x080074b9
 8007484:	080074b9 	.word	0x080074b9
 8007488:	080074b9 	.word	0x080074b9
 800748c:	080074a7 	.word	0x080074a7
 8007490:	080074b9 	.word	0x080074b9
 8007494:	080074b9 	.word	0x080074b9
 8007498:	080074b9 	.word	0x080074b9
 800749c:	080074b3 	.word	0x080074b3
 80074a0:	2300      	movs	r3, #0
 80074a2:	77fb      	strb	r3, [r7, #31]
 80074a4:	e118      	b.n	80076d8 <UART_SetConfig+0x348>
 80074a6:	2302      	movs	r3, #2
 80074a8:	77fb      	strb	r3, [r7, #31]
 80074aa:	e115      	b.n	80076d8 <UART_SetConfig+0x348>
 80074ac:	2304      	movs	r3, #4
 80074ae:	77fb      	strb	r3, [r7, #31]
 80074b0:	e112      	b.n	80076d8 <UART_SetConfig+0x348>
 80074b2:	2308      	movs	r3, #8
 80074b4:	77fb      	strb	r3, [r7, #31]
 80074b6:	e10f      	b.n	80076d8 <UART_SetConfig+0x348>
 80074b8:	2310      	movs	r3, #16
 80074ba:	77fb      	strb	r3, [r7, #31]
 80074bc:	e10c      	b.n	80076d8 <UART_SetConfig+0x348>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a68      	ldr	r2, [pc, #416]	; (8007664 <UART_SetConfig+0x2d4>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d120      	bne.n	800750a <UART_SetConfig+0x17a>
 80074c8:	4b64      	ldr	r3, [pc, #400]	; (800765c <UART_SetConfig+0x2cc>)
 80074ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074d2:	2b30      	cmp	r3, #48	; 0x30
 80074d4:	d013      	beq.n	80074fe <UART_SetConfig+0x16e>
 80074d6:	2b30      	cmp	r3, #48	; 0x30
 80074d8:	d814      	bhi.n	8007504 <UART_SetConfig+0x174>
 80074da:	2b20      	cmp	r3, #32
 80074dc:	d009      	beq.n	80074f2 <UART_SetConfig+0x162>
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d810      	bhi.n	8007504 <UART_SetConfig+0x174>
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <UART_SetConfig+0x15c>
 80074e6:	2b10      	cmp	r3, #16
 80074e8:	d006      	beq.n	80074f8 <UART_SetConfig+0x168>
 80074ea:	e00b      	b.n	8007504 <UART_SetConfig+0x174>
 80074ec:	2300      	movs	r3, #0
 80074ee:	77fb      	strb	r3, [r7, #31]
 80074f0:	e0f2      	b.n	80076d8 <UART_SetConfig+0x348>
 80074f2:	2302      	movs	r3, #2
 80074f4:	77fb      	strb	r3, [r7, #31]
 80074f6:	e0ef      	b.n	80076d8 <UART_SetConfig+0x348>
 80074f8:	2304      	movs	r3, #4
 80074fa:	77fb      	strb	r3, [r7, #31]
 80074fc:	e0ec      	b.n	80076d8 <UART_SetConfig+0x348>
 80074fe:	2308      	movs	r3, #8
 8007500:	77fb      	strb	r3, [r7, #31]
 8007502:	e0e9      	b.n	80076d8 <UART_SetConfig+0x348>
 8007504:	2310      	movs	r3, #16
 8007506:	77fb      	strb	r3, [r7, #31]
 8007508:	e0e6      	b.n	80076d8 <UART_SetConfig+0x348>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	4a56      	ldr	r2, [pc, #344]	; (8007668 <UART_SetConfig+0x2d8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d120      	bne.n	8007556 <UART_SetConfig+0x1c6>
 8007514:	4b51      	ldr	r3, [pc, #324]	; (800765c <UART_SetConfig+0x2cc>)
 8007516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800751a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800751e:	2bc0      	cmp	r3, #192	; 0xc0
 8007520:	d013      	beq.n	800754a <UART_SetConfig+0x1ba>
 8007522:	2bc0      	cmp	r3, #192	; 0xc0
 8007524:	d814      	bhi.n	8007550 <UART_SetConfig+0x1c0>
 8007526:	2b80      	cmp	r3, #128	; 0x80
 8007528:	d009      	beq.n	800753e <UART_SetConfig+0x1ae>
 800752a:	2b80      	cmp	r3, #128	; 0x80
 800752c:	d810      	bhi.n	8007550 <UART_SetConfig+0x1c0>
 800752e:	2b00      	cmp	r3, #0
 8007530:	d002      	beq.n	8007538 <UART_SetConfig+0x1a8>
 8007532:	2b40      	cmp	r3, #64	; 0x40
 8007534:	d006      	beq.n	8007544 <UART_SetConfig+0x1b4>
 8007536:	e00b      	b.n	8007550 <UART_SetConfig+0x1c0>
 8007538:	2300      	movs	r3, #0
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e0cc      	b.n	80076d8 <UART_SetConfig+0x348>
 800753e:	2302      	movs	r3, #2
 8007540:	77fb      	strb	r3, [r7, #31]
 8007542:	e0c9      	b.n	80076d8 <UART_SetConfig+0x348>
 8007544:	2304      	movs	r3, #4
 8007546:	77fb      	strb	r3, [r7, #31]
 8007548:	e0c6      	b.n	80076d8 <UART_SetConfig+0x348>
 800754a:	2308      	movs	r3, #8
 800754c:	77fb      	strb	r3, [r7, #31]
 800754e:	e0c3      	b.n	80076d8 <UART_SetConfig+0x348>
 8007550:	2310      	movs	r3, #16
 8007552:	77fb      	strb	r3, [r7, #31]
 8007554:	e0c0      	b.n	80076d8 <UART_SetConfig+0x348>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a44      	ldr	r2, [pc, #272]	; (800766c <UART_SetConfig+0x2dc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d125      	bne.n	80075ac <UART_SetConfig+0x21c>
 8007560:	4b3e      	ldr	r3, [pc, #248]	; (800765c <UART_SetConfig+0x2cc>)
 8007562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800756a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800756e:	d017      	beq.n	80075a0 <UART_SetConfig+0x210>
 8007570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007574:	d817      	bhi.n	80075a6 <UART_SetConfig+0x216>
 8007576:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800757a:	d00b      	beq.n	8007594 <UART_SetConfig+0x204>
 800757c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007580:	d811      	bhi.n	80075a6 <UART_SetConfig+0x216>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d003      	beq.n	800758e <UART_SetConfig+0x1fe>
 8007586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800758a:	d006      	beq.n	800759a <UART_SetConfig+0x20a>
 800758c:	e00b      	b.n	80075a6 <UART_SetConfig+0x216>
 800758e:	2300      	movs	r3, #0
 8007590:	77fb      	strb	r3, [r7, #31]
 8007592:	e0a1      	b.n	80076d8 <UART_SetConfig+0x348>
 8007594:	2302      	movs	r3, #2
 8007596:	77fb      	strb	r3, [r7, #31]
 8007598:	e09e      	b.n	80076d8 <UART_SetConfig+0x348>
 800759a:	2304      	movs	r3, #4
 800759c:	77fb      	strb	r3, [r7, #31]
 800759e:	e09b      	b.n	80076d8 <UART_SetConfig+0x348>
 80075a0:	2308      	movs	r3, #8
 80075a2:	77fb      	strb	r3, [r7, #31]
 80075a4:	e098      	b.n	80076d8 <UART_SetConfig+0x348>
 80075a6:	2310      	movs	r3, #16
 80075a8:	77fb      	strb	r3, [r7, #31]
 80075aa:	e095      	b.n	80076d8 <UART_SetConfig+0x348>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a2f      	ldr	r2, [pc, #188]	; (8007670 <UART_SetConfig+0x2e0>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d125      	bne.n	8007602 <UART_SetConfig+0x272>
 80075b6:	4b29      	ldr	r3, [pc, #164]	; (800765c <UART_SetConfig+0x2cc>)
 80075b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075c4:	d017      	beq.n	80075f6 <UART_SetConfig+0x266>
 80075c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ca:	d817      	bhi.n	80075fc <UART_SetConfig+0x26c>
 80075cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d0:	d00b      	beq.n	80075ea <UART_SetConfig+0x25a>
 80075d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075d6:	d811      	bhi.n	80075fc <UART_SetConfig+0x26c>
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d003      	beq.n	80075e4 <UART_SetConfig+0x254>
 80075dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075e0:	d006      	beq.n	80075f0 <UART_SetConfig+0x260>
 80075e2:	e00b      	b.n	80075fc <UART_SetConfig+0x26c>
 80075e4:	2301      	movs	r3, #1
 80075e6:	77fb      	strb	r3, [r7, #31]
 80075e8:	e076      	b.n	80076d8 <UART_SetConfig+0x348>
 80075ea:	2302      	movs	r3, #2
 80075ec:	77fb      	strb	r3, [r7, #31]
 80075ee:	e073      	b.n	80076d8 <UART_SetConfig+0x348>
 80075f0:	2304      	movs	r3, #4
 80075f2:	77fb      	strb	r3, [r7, #31]
 80075f4:	e070      	b.n	80076d8 <UART_SetConfig+0x348>
 80075f6:	2308      	movs	r3, #8
 80075f8:	77fb      	strb	r3, [r7, #31]
 80075fa:	e06d      	b.n	80076d8 <UART_SetConfig+0x348>
 80075fc:	2310      	movs	r3, #16
 80075fe:	77fb      	strb	r3, [r7, #31]
 8007600:	e06a      	b.n	80076d8 <UART_SetConfig+0x348>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	4a1b      	ldr	r2, [pc, #108]	; (8007674 <UART_SetConfig+0x2e4>)
 8007608:	4293      	cmp	r3, r2
 800760a:	d138      	bne.n	800767e <UART_SetConfig+0x2ee>
 800760c:	4b13      	ldr	r3, [pc, #76]	; (800765c <UART_SetConfig+0x2cc>)
 800760e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007612:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007616:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800761a:	d017      	beq.n	800764c <UART_SetConfig+0x2bc>
 800761c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007620:	d82a      	bhi.n	8007678 <UART_SetConfig+0x2e8>
 8007622:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007626:	d00b      	beq.n	8007640 <UART_SetConfig+0x2b0>
 8007628:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800762c:	d824      	bhi.n	8007678 <UART_SetConfig+0x2e8>
 800762e:	2b00      	cmp	r3, #0
 8007630:	d003      	beq.n	800763a <UART_SetConfig+0x2aa>
 8007632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007636:	d006      	beq.n	8007646 <UART_SetConfig+0x2b6>
 8007638:	e01e      	b.n	8007678 <UART_SetConfig+0x2e8>
 800763a:	2300      	movs	r3, #0
 800763c:	77fb      	strb	r3, [r7, #31]
 800763e:	e04b      	b.n	80076d8 <UART_SetConfig+0x348>
 8007640:	2302      	movs	r3, #2
 8007642:	77fb      	strb	r3, [r7, #31]
 8007644:	e048      	b.n	80076d8 <UART_SetConfig+0x348>
 8007646:	2304      	movs	r3, #4
 8007648:	77fb      	strb	r3, [r7, #31]
 800764a:	e045      	b.n	80076d8 <UART_SetConfig+0x348>
 800764c:	2308      	movs	r3, #8
 800764e:	77fb      	strb	r3, [r7, #31]
 8007650:	e042      	b.n	80076d8 <UART_SetConfig+0x348>
 8007652:	bf00      	nop
 8007654:	efff69f3 	.word	0xefff69f3
 8007658:	40011000 	.word	0x40011000
 800765c:	40023800 	.word	0x40023800
 8007660:	40004400 	.word	0x40004400
 8007664:	40004800 	.word	0x40004800
 8007668:	40004c00 	.word	0x40004c00
 800766c:	40005000 	.word	0x40005000
 8007670:	40011400 	.word	0x40011400
 8007674:	40007800 	.word	0x40007800
 8007678:	2310      	movs	r3, #16
 800767a:	77fb      	strb	r3, [r7, #31]
 800767c:	e02c      	b.n	80076d8 <UART_SetConfig+0x348>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a72      	ldr	r2, [pc, #456]	; (800784c <UART_SetConfig+0x4bc>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d125      	bne.n	80076d4 <UART_SetConfig+0x344>
 8007688:	4b71      	ldr	r3, [pc, #452]	; (8007850 <UART_SetConfig+0x4c0>)
 800768a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800768e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007692:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007696:	d017      	beq.n	80076c8 <UART_SetConfig+0x338>
 8007698:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800769c:	d817      	bhi.n	80076ce <UART_SetConfig+0x33e>
 800769e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a2:	d00b      	beq.n	80076bc <UART_SetConfig+0x32c>
 80076a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076a8:	d811      	bhi.n	80076ce <UART_SetConfig+0x33e>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d003      	beq.n	80076b6 <UART_SetConfig+0x326>
 80076ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076b2:	d006      	beq.n	80076c2 <UART_SetConfig+0x332>
 80076b4:	e00b      	b.n	80076ce <UART_SetConfig+0x33e>
 80076b6:	2300      	movs	r3, #0
 80076b8:	77fb      	strb	r3, [r7, #31]
 80076ba:	e00d      	b.n	80076d8 <UART_SetConfig+0x348>
 80076bc:	2302      	movs	r3, #2
 80076be:	77fb      	strb	r3, [r7, #31]
 80076c0:	e00a      	b.n	80076d8 <UART_SetConfig+0x348>
 80076c2:	2304      	movs	r3, #4
 80076c4:	77fb      	strb	r3, [r7, #31]
 80076c6:	e007      	b.n	80076d8 <UART_SetConfig+0x348>
 80076c8:	2308      	movs	r3, #8
 80076ca:	77fb      	strb	r3, [r7, #31]
 80076cc:	e004      	b.n	80076d8 <UART_SetConfig+0x348>
 80076ce:	2310      	movs	r3, #16
 80076d0:	77fb      	strb	r3, [r7, #31]
 80076d2:	e001      	b.n	80076d8 <UART_SetConfig+0x348>
 80076d4:	2310      	movs	r3, #16
 80076d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	69db      	ldr	r3, [r3, #28]
 80076dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076e0:	d15b      	bne.n	800779a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80076e2:	7ffb      	ldrb	r3, [r7, #31]
 80076e4:	2b08      	cmp	r3, #8
 80076e6:	d828      	bhi.n	800773a <UART_SetConfig+0x3aa>
 80076e8:	a201      	add	r2, pc, #4	; (adr r2, 80076f0 <UART_SetConfig+0x360>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007715 	.word	0x08007715
 80076f4:	0800771d 	.word	0x0800771d
 80076f8:	08007725 	.word	0x08007725
 80076fc:	0800773b 	.word	0x0800773b
 8007700:	0800772b 	.word	0x0800772b
 8007704:	0800773b 	.word	0x0800773b
 8007708:	0800773b 	.word	0x0800773b
 800770c:	0800773b 	.word	0x0800773b
 8007710:	08007733 	.word	0x08007733
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007714:	f7fd fcb4 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8007718:	61b8      	str	r0, [r7, #24]
        break;
 800771a:	e013      	b.n	8007744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800771c:	f7fd fcc4 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8007720:	61b8      	str	r0, [r7, #24]
        break;
 8007722:	e00f      	b.n	8007744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007724:	4b4b      	ldr	r3, [pc, #300]	; (8007854 <UART_SetConfig+0x4c4>)
 8007726:	61bb      	str	r3, [r7, #24]
        break;
 8007728:	e00c      	b.n	8007744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800772a:	f7fd fb97 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 800772e:	61b8      	str	r0, [r7, #24]
        break;
 8007730:	e008      	b.n	8007744 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007736:	61bb      	str	r3, [r7, #24]
        break;
 8007738:	e004      	b.n	8007744 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800773e:	2301      	movs	r3, #1
 8007740:	77bb      	strb	r3, [r7, #30]
        break;
 8007742:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d074      	beq.n	8007834 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	005a      	lsls	r2, r3, #1
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	085b      	lsrs	r3, r3, #1
 8007754:	441a      	add	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	fbb2 f3f3 	udiv	r3, r2, r3
 800775e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	2b0f      	cmp	r3, #15
 8007764:	d916      	bls.n	8007794 <UART_SetConfig+0x404>
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800776c:	d212      	bcs.n	8007794 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	b29b      	uxth	r3, r3
 8007772:	f023 030f 	bic.w	r3, r3, #15
 8007776:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007778:	693b      	ldr	r3, [r7, #16]
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	b29b      	uxth	r3, r3
 800777e:	f003 0307 	and.w	r3, r3, #7
 8007782:	b29a      	uxth	r2, r3
 8007784:	89fb      	ldrh	r3, [r7, #14]
 8007786:	4313      	orrs	r3, r2
 8007788:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	89fa      	ldrh	r2, [r7, #14]
 8007790:	60da      	str	r2, [r3, #12]
 8007792:	e04f      	b.n	8007834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007794:	2301      	movs	r3, #1
 8007796:	77bb      	strb	r3, [r7, #30]
 8007798:	e04c      	b.n	8007834 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800779a:	7ffb      	ldrb	r3, [r7, #31]
 800779c:	2b08      	cmp	r3, #8
 800779e:	d828      	bhi.n	80077f2 <UART_SetConfig+0x462>
 80077a0:	a201      	add	r2, pc, #4	; (adr r2, 80077a8 <UART_SetConfig+0x418>)
 80077a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a6:	bf00      	nop
 80077a8:	080077cd 	.word	0x080077cd
 80077ac:	080077d5 	.word	0x080077d5
 80077b0:	080077dd 	.word	0x080077dd
 80077b4:	080077f3 	.word	0x080077f3
 80077b8:	080077e3 	.word	0x080077e3
 80077bc:	080077f3 	.word	0x080077f3
 80077c0:	080077f3 	.word	0x080077f3
 80077c4:	080077f3 	.word	0x080077f3
 80077c8:	080077eb 	.word	0x080077eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077cc:	f7fd fc58 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 80077d0:	61b8      	str	r0, [r7, #24]
        break;
 80077d2:	e013      	b.n	80077fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077d4:	f7fd fc68 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 80077d8:	61b8      	str	r0, [r7, #24]
        break;
 80077da:	e00f      	b.n	80077fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077dc:	4b1d      	ldr	r3, [pc, #116]	; (8007854 <UART_SetConfig+0x4c4>)
 80077de:	61bb      	str	r3, [r7, #24]
        break;
 80077e0:	e00c      	b.n	80077fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077e2:	f7fd fb3b 	bl	8004e5c <HAL_RCC_GetSysClockFreq>
 80077e6:	61b8      	str	r0, [r7, #24]
        break;
 80077e8:	e008      	b.n	80077fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ee:	61bb      	str	r3, [r7, #24]
        break;
 80077f0:	e004      	b.n	80077fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	77bb      	strb	r3, [r7, #30]
        break;
 80077fa:	bf00      	nop
    }

    if (pclk != 0U)
 80077fc:	69bb      	ldr	r3, [r7, #24]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d018      	beq.n	8007834 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	085a      	lsrs	r2, r3, #1
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	441a      	add	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	fbb2 f3f3 	udiv	r3, r2, r3
 8007814:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b0f      	cmp	r3, #15
 800781a:	d909      	bls.n	8007830 <UART_SetConfig+0x4a0>
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007822:	d205      	bcs.n	8007830 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	b29a      	uxth	r2, r3
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	60da      	str	r2, [r3, #12]
 800782e:	e001      	b.n	8007834 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2200      	movs	r2, #0
 8007838:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2200      	movs	r2, #0
 800783e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007840:	7fbb      	ldrb	r3, [r7, #30]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3720      	adds	r7, #32
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40007c00 	.word	0x40007c00
 8007850:	40023800 	.word	0x40023800
 8007854:	00f42400 	.word	0x00f42400

08007858 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	f003 0301 	and.w	r3, r3, #1
 8007868:	2b00      	cmp	r3, #0
 800786a:	d00a      	beq.n	8007882 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	430a      	orrs	r2, r1
 8007880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	430a      	orrs	r2, r1
 80078a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d00a      	beq.n	80078c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	430a      	orrs	r2, r1
 80078c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ca:	f003 0308 	and.w	r3, r3, #8
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d00a      	beq.n	80078e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	430a      	orrs	r2, r1
 80078e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ec:	f003 0310 	and.w	r3, r3, #16
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00a      	beq.n	800790a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	689b      	ldr	r3, [r3, #8]
 80078fa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	430a      	orrs	r2, r1
 8007908:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800790e:	f003 0320 	and.w	r3, r3, #32
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007934:	2b00      	cmp	r3, #0
 8007936:	d01a      	beq.n	800796e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	685b      	ldr	r3, [r3, #4]
 800793e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	430a      	orrs	r2, r1
 800794c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007956:	d10a      	bne.n	800796e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	430a      	orrs	r2, r1
 800796c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007976:	2b00      	cmp	r3, #0
 8007978:	d00a      	beq.n	8007990 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	430a      	orrs	r2, r1
 800798e:	605a      	str	r2, [r3, #4]
  }
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af02      	add	r7, sp, #8
 80079a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079ac:	f7fb fbaa 	bl	8003104 <HAL_GetTick>
 80079b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f003 0308 	and.w	r3, r3, #8
 80079bc:	2b08      	cmp	r3, #8
 80079be:	d10e      	bne.n	80079de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2200      	movs	r2, #0
 80079ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f817 	bl	8007a02 <UART_WaitOnFlagUntilTimeout>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e00d      	b.n	80079fa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2220      	movs	r2, #32
 80079e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2220      	movs	r2, #32
 80079e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	2200      	movs	r2, #0
 80079ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2200      	movs	r2, #0
 80079f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}

08007a02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a02:	b580      	push	{r7, lr}
 8007a04:	b09c      	sub	sp, #112	; 0x70
 8007a06:	af00      	add	r7, sp, #0
 8007a08:	60f8      	str	r0, [r7, #12]
 8007a0a:	60b9      	str	r1, [r7, #8]
 8007a0c:	603b      	str	r3, [r7, #0]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a12:	e0a5      	b.n	8007b60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	f000 80a1 	beq.w	8007b60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a1e:	f7fb fb71 	bl	8003104 <HAL_GetTick>
 8007a22:	4602      	mov	r2, r0
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	1ad3      	subs	r3, r2, r3
 8007a28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	d302      	bcc.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x32>
 8007a2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d13e      	bne.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a3c:	e853 3f00 	ldrex	r3, [r3]
 8007a40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a48:	667b      	str	r3, [r7, #100]	; 0x64
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	461a      	mov	r2, r3
 8007a50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a54:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1e6      	bne.n	8007a34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	3308      	adds	r3, #8
 8007a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a70:	e853 3f00 	ldrex	r3, [r3]
 8007a74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	3308      	adds	r3, #8
 8007a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007a86:	64ba      	str	r2, [r7, #72]	; 0x48
 8007a88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007a8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a8e:	e841 2300 	strex	r3, r2, [r1]
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1e5      	bne.n	8007a66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2220      	movs	r2, #32
 8007a9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2220      	movs	r2, #32
 8007aa4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007aae:	2303      	movs	r3, #3
 8007ab0:	e067      	b.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d04f      	beq.n	8007b60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69db      	ldr	r3, [r3, #28]
 8007ac6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007aca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ace:	d147      	bne.n	8007b60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ad8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ae2:	e853 3f00 	ldrex	r3, [r3]
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	461a      	mov	r2, r3
 8007af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007af8:	637b      	str	r3, [r7, #52]	; 0x34
 8007afa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007afe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b00:	e841 2300 	strex	r3, r2, [r1]
 8007b04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e6      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	3308      	adds	r3, #8
 8007b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	e853 3f00 	ldrex	r3, [r3]
 8007b1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	f023 0301 	bic.w	r3, r3, #1
 8007b22:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	3308      	adds	r3, #8
 8007b2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b2c:	623a      	str	r2, [r7, #32]
 8007b2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b30:	69f9      	ldr	r1, [r7, #28]
 8007b32:	6a3a      	ldr	r2, [r7, #32]
 8007b34:	e841 2300 	strex	r3, r2, [r1]
 8007b38:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d1e5      	bne.n	8007b0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2220      	movs	r2, #32
 8007b44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2220      	movs	r2, #32
 8007b4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2220      	movs	r2, #32
 8007b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	e010      	b.n	8007b82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	69da      	ldr	r2, [r3, #28]
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	4013      	ands	r3, r2
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	bf0c      	ite	eq
 8007b70:	2301      	moveq	r3, #1
 8007b72:	2300      	movne	r3, #0
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	461a      	mov	r2, r3
 8007b78:	79fb      	ldrb	r3, [r7, #7]
 8007b7a:	429a      	cmp	r2, r3
 8007b7c:	f43f af4a 	beq.w	8007a14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3770      	adds	r7, #112	; 0x70
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}

08007b8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b8a:	b480      	push	{r7}
 8007b8c:	b095      	sub	sp, #84	; 0x54
 8007b8e:	af00      	add	r7, sp, #0
 8007b90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b9a:	e853 3f00 	ldrex	r3, [r3]
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ba2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	461a      	mov	r2, r3
 8007bae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb0:	643b      	str	r3, [r7, #64]	; 0x40
 8007bb2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bb8:	e841 2300 	strex	r3, r2, [r1]
 8007bbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1e6      	bne.n	8007b92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	3308      	adds	r3, #8
 8007bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	6a3b      	ldr	r3, [r7, #32]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd4:	69fb      	ldr	r3, [r7, #28]
 8007bd6:	f023 0301 	bic.w	r3, r3, #1
 8007bda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	3308      	adds	r3, #8
 8007be2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007be4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007be6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007bea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d118      	bne.n	8007c32 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	f023 0310 	bic.w	r3, r3, #16
 8007c14:	647b      	str	r3, [r7, #68]	; 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	461a      	mov	r2, r3
 8007c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c1e:	61bb      	str	r3, [r7, #24]
 8007c20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6979      	ldr	r1, [r7, #20]
 8007c24:	69ba      	ldr	r2, [r7, #24]
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e6      	bne.n	8007c00 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007c44:	bf00      	nop
 8007c46:	3754      	adds	r7, #84	; 0x54
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr

08007c50 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b084      	sub	sp, #16
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff fb78 	bl	8007364 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c74:	bf00      	nop
 8007c76:	3710      	adds	r7, #16
 8007c78:	46bd      	mov	sp, r7
 8007c7a:	bd80      	pop	{r7, pc}

08007c7c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b088      	sub	sp, #32
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	e853 3f00 	ldrex	r3, [r3]
 8007c90:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c98:	61fb      	str	r3, [r7, #28]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	61bb      	str	r3, [r7, #24]
 8007ca4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca6:	6979      	ldr	r1, [r7, #20]
 8007ca8:	69ba      	ldr	r2, [r7, #24]
 8007caa:	e841 2300 	strex	r3, r2, [r1]
 8007cae:	613b      	str	r3, [r7, #16]
   return(result);
 8007cb0:	693b      	ldr	r3, [r7, #16]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d1e6      	bne.n	8007c84 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2220      	movs	r2, #32
 8007cba:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f7ff fb44 	bl	8007350 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cc8:	bf00      	nop
 8007cca:	3720      	adds	r7, #32
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <__errno>:
 8007cd0:	4b01      	ldr	r3, [pc, #4]	; (8007cd8 <__errno+0x8>)
 8007cd2:	6818      	ldr	r0, [r3, #0]
 8007cd4:	4770      	bx	lr
 8007cd6:	bf00      	nop
 8007cd8:	2000000c 	.word	0x2000000c

08007cdc <__libc_init_array>:
 8007cdc:	b570      	push	{r4, r5, r6, lr}
 8007cde:	4d0d      	ldr	r5, [pc, #52]	; (8007d14 <__libc_init_array+0x38>)
 8007ce0:	4c0d      	ldr	r4, [pc, #52]	; (8007d18 <__libc_init_array+0x3c>)
 8007ce2:	1b64      	subs	r4, r4, r5
 8007ce4:	10a4      	asrs	r4, r4, #2
 8007ce6:	2600      	movs	r6, #0
 8007ce8:	42a6      	cmp	r6, r4
 8007cea:	d109      	bne.n	8007d00 <__libc_init_array+0x24>
 8007cec:	4d0b      	ldr	r5, [pc, #44]	; (8007d1c <__libc_init_array+0x40>)
 8007cee:	4c0c      	ldr	r4, [pc, #48]	; (8007d20 <__libc_init_array+0x44>)
 8007cf0:	f000 fd1e 	bl	8008730 <_init>
 8007cf4:	1b64      	subs	r4, r4, r5
 8007cf6:	10a4      	asrs	r4, r4, #2
 8007cf8:	2600      	movs	r6, #0
 8007cfa:	42a6      	cmp	r6, r4
 8007cfc:	d105      	bne.n	8007d0a <__libc_init_array+0x2e>
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}
 8007d00:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d04:	4798      	blx	r3
 8007d06:	3601      	adds	r6, #1
 8007d08:	e7ee      	b.n	8007ce8 <__libc_init_array+0xc>
 8007d0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d0e:	4798      	blx	r3
 8007d10:	3601      	adds	r6, #1
 8007d12:	e7f2      	b.n	8007cfa <__libc_init_array+0x1e>
 8007d14:	08008810 	.word	0x08008810
 8007d18:	08008810 	.word	0x08008810
 8007d1c:	08008810 	.word	0x08008810
 8007d20:	08008814 	.word	0x08008814

08007d24 <memset>:
 8007d24:	4402      	add	r2, r0
 8007d26:	4603      	mov	r3, r0
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d100      	bne.n	8007d2e <memset+0xa>
 8007d2c:	4770      	bx	lr
 8007d2e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d32:	e7f9      	b.n	8007d28 <memset+0x4>

08007d34 <_puts_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b118      	cbz	r0, 8007d44 <_puts_r+0x10>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_puts_r+0x10>
 8007d40:	f000 fa48 	bl	80081d4 <__sinit>
 8007d44:	69ab      	ldr	r3, [r5, #24]
 8007d46:	68ac      	ldr	r4, [r5, #8]
 8007d48:	b913      	cbnz	r3, 8007d50 <_puts_r+0x1c>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f000 fa42 	bl	80081d4 <__sinit>
 8007d50:	4b2c      	ldr	r3, [pc, #176]	; (8007e04 <_puts_r+0xd0>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d120      	bne.n	8007d98 <_puts_r+0x64>
 8007d56:	686c      	ldr	r4, [r5, #4]
 8007d58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d5a:	07db      	lsls	r3, r3, #31
 8007d5c:	d405      	bmi.n	8007d6a <_puts_r+0x36>
 8007d5e:	89a3      	ldrh	r3, [r4, #12]
 8007d60:	0598      	lsls	r0, r3, #22
 8007d62:	d402      	bmi.n	8007d6a <_puts_r+0x36>
 8007d64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d66:	f000 fad3 	bl	8008310 <__retarget_lock_acquire_recursive>
 8007d6a:	89a3      	ldrh	r3, [r4, #12]
 8007d6c:	0719      	lsls	r1, r3, #28
 8007d6e:	d51d      	bpl.n	8007dac <_puts_r+0x78>
 8007d70:	6923      	ldr	r3, [r4, #16]
 8007d72:	b1db      	cbz	r3, 8007dac <_puts_r+0x78>
 8007d74:	3e01      	subs	r6, #1
 8007d76:	68a3      	ldr	r3, [r4, #8]
 8007d78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	60a3      	str	r3, [r4, #8]
 8007d80:	bb39      	cbnz	r1, 8007dd2 <_puts_r+0x9e>
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	da38      	bge.n	8007df8 <_puts_r+0xc4>
 8007d86:	4622      	mov	r2, r4
 8007d88:	210a      	movs	r1, #10
 8007d8a:	4628      	mov	r0, r5
 8007d8c:	f000 f848 	bl	8007e20 <__swbuf_r>
 8007d90:	3001      	adds	r0, #1
 8007d92:	d011      	beq.n	8007db8 <_puts_r+0x84>
 8007d94:	250a      	movs	r5, #10
 8007d96:	e011      	b.n	8007dbc <_puts_r+0x88>
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <_puts_r+0xd4>)
 8007d9a:	429c      	cmp	r4, r3
 8007d9c:	d101      	bne.n	8007da2 <_puts_r+0x6e>
 8007d9e:	68ac      	ldr	r4, [r5, #8]
 8007da0:	e7da      	b.n	8007d58 <_puts_r+0x24>
 8007da2:	4b1a      	ldr	r3, [pc, #104]	; (8007e0c <_puts_r+0xd8>)
 8007da4:	429c      	cmp	r4, r3
 8007da6:	bf08      	it	eq
 8007da8:	68ec      	ldreq	r4, [r5, #12]
 8007daa:	e7d5      	b.n	8007d58 <_puts_r+0x24>
 8007dac:	4621      	mov	r1, r4
 8007dae:	4628      	mov	r0, r5
 8007db0:	f000 f888 	bl	8007ec4 <__swsetup_r>
 8007db4:	2800      	cmp	r0, #0
 8007db6:	d0dd      	beq.n	8007d74 <_puts_r+0x40>
 8007db8:	f04f 35ff 	mov.w	r5, #4294967295
 8007dbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007dbe:	07da      	lsls	r2, r3, #31
 8007dc0:	d405      	bmi.n	8007dce <_puts_r+0x9a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	059b      	lsls	r3, r3, #22
 8007dc6:	d402      	bmi.n	8007dce <_puts_r+0x9a>
 8007dc8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007dca:	f000 faa2 	bl	8008312 <__retarget_lock_release_recursive>
 8007dce:	4628      	mov	r0, r5
 8007dd0:	bd70      	pop	{r4, r5, r6, pc}
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	da04      	bge.n	8007de0 <_puts_r+0xac>
 8007dd6:	69a2      	ldr	r2, [r4, #24]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	dc06      	bgt.n	8007dea <_puts_r+0xb6>
 8007ddc:	290a      	cmp	r1, #10
 8007dde:	d004      	beq.n	8007dea <_puts_r+0xb6>
 8007de0:	6823      	ldr	r3, [r4, #0]
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	6022      	str	r2, [r4, #0]
 8007de6:	7019      	strb	r1, [r3, #0]
 8007de8:	e7c5      	b.n	8007d76 <_puts_r+0x42>
 8007dea:	4622      	mov	r2, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f817 	bl	8007e20 <__swbuf_r>
 8007df2:	3001      	adds	r0, #1
 8007df4:	d1bf      	bne.n	8007d76 <_puts_r+0x42>
 8007df6:	e7df      	b.n	8007db8 <_puts_r+0x84>
 8007df8:	6823      	ldr	r3, [r4, #0]
 8007dfa:	250a      	movs	r5, #10
 8007dfc:	1c5a      	adds	r2, r3, #1
 8007dfe:	6022      	str	r2, [r4, #0]
 8007e00:	701d      	strb	r5, [r3, #0]
 8007e02:	e7db      	b.n	8007dbc <_puts_r+0x88>
 8007e04:	080087c8 	.word	0x080087c8
 8007e08:	080087e8 	.word	0x080087e8
 8007e0c:	080087a8 	.word	0x080087a8

08007e10 <puts>:
 8007e10:	4b02      	ldr	r3, [pc, #8]	; (8007e1c <puts+0xc>)
 8007e12:	4601      	mov	r1, r0
 8007e14:	6818      	ldr	r0, [r3, #0]
 8007e16:	f7ff bf8d 	b.w	8007d34 <_puts_r>
 8007e1a:	bf00      	nop
 8007e1c:	2000000c 	.word	0x2000000c

08007e20 <__swbuf_r>:
 8007e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e22:	460e      	mov	r6, r1
 8007e24:	4614      	mov	r4, r2
 8007e26:	4605      	mov	r5, r0
 8007e28:	b118      	cbz	r0, 8007e32 <__swbuf_r+0x12>
 8007e2a:	6983      	ldr	r3, [r0, #24]
 8007e2c:	b90b      	cbnz	r3, 8007e32 <__swbuf_r+0x12>
 8007e2e:	f000 f9d1 	bl	80081d4 <__sinit>
 8007e32:	4b21      	ldr	r3, [pc, #132]	; (8007eb8 <__swbuf_r+0x98>)
 8007e34:	429c      	cmp	r4, r3
 8007e36:	d12b      	bne.n	8007e90 <__swbuf_r+0x70>
 8007e38:	686c      	ldr	r4, [r5, #4]
 8007e3a:	69a3      	ldr	r3, [r4, #24]
 8007e3c:	60a3      	str	r3, [r4, #8]
 8007e3e:	89a3      	ldrh	r3, [r4, #12]
 8007e40:	071a      	lsls	r2, r3, #28
 8007e42:	d52f      	bpl.n	8007ea4 <__swbuf_r+0x84>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	b36b      	cbz	r3, 8007ea4 <__swbuf_r+0x84>
 8007e48:	6923      	ldr	r3, [r4, #16]
 8007e4a:	6820      	ldr	r0, [r4, #0]
 8007e4c:	1ac0      	subs	r0, r0, r3
 8007e4e:	6963      	ldr	r3, [r4, #20]
 8007e50:	b2f6      	uxtb	r6, r6
 8007e52:	4283      	cmp	r3, r0
 8007e54:	4637      	mov	r7, r6
 8007e56:	dc04      	bgt.n	8007e62 <__swbuf_r+0x42>
 8007e58:	4621      	mov	r1, r4
 8007e5a:	4628      	mov	r0, r5
 8007e5c:	f000 f926 	bl	80080ac <_fflush_r>
 8007e60:	bb30      	cbnz	r0, 8007eb0 <__swbuf_r+0x90>
 8007e62:	68a3      	ldr	r3, [r4, #8]
 8007e64:	3b01      	subs	r3, #1
 8007e66:	60a3      	str	r3, [r4, #8]
 8007e68:	6823      	ldr	r3, [r4, #0]
 8007e6a:	1c5a      	adds	r2, r3, #1
 8007e6c:	6022      	str	r2, [r4, #0]
 8007e6e:	701e      	strb	r6, [r3, #0]
 8007e70:	6963      	ldr	r3, [r4, #20]
 8007e72:	3001      	adds	r0, #1
 8007e74:	4283      	cmp	r3, r0
 8007e76:	d004      	beq.n	8007e82 <__swbuf_r+0x62>
 8007e78:	89a3      	ldrh	r3, [r4, #12]
 8007e7a:	07db      	lsls	r3, r3, #31
 8007e7c:	d506      	bpl.n	8007e8c <__swbuf_r+0x6c>
 8007e7e:	2e0a      	cmp	r6, #10
 8007e80:	d104      	bne.n	8007e8c <__swbuf_r+0x6c>
 8007e82:	4621      	mov	r1, r4
 8007e84:	4628      	mov	r0, r5
 8007e86:	f000 f911 	bl	80080ac <_fflush_r>
 8007e8a:	b988      	cbnz	r0, 8007eb0 <__swbuf_r+0x90>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e90:	4b0a      	ldr	r3, [pc, #40]	; (8007ebc <__swbuf_r+0x9c>)
 8007e92:	429c      	cmp	r4, r3
 8007e94:	d101      	bne.n	8007e9a <__swbuf_r+0x7a>
 8007e96:	68ac      	ldr	r4, [r5, #8]
 8007e98:	e7cf      	b.n	8007e3a <__swbuf_r+0x1a>
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <__swbuf_r+0xa0>)
 8007e9c:	429c      	cmp	r4, r3
 8007e9e:	bf08      	it	eq
 8007ea0:	68ec      	ldreq	r4, [r5, #12]
 8007ea2:	e7ca      	b.n	8007e3a <__swbuf_r+0x1a>
 8007ea4:	4621      	mov	r1, r4
 8007ea6:	4628      	mov	r0, r5
 8007ea8:	f000 f80c 	bl	8007ec4 <__swsetup_r>
 8007eac:	2800      	cmp	r0, #0
 8007eae:	d0cb      	beq.n	8007e48 <__swbuf_r+0x28>
 8007eb0:	f04f 37ff 	mov.w	r7, #4294967295
 8007eb4:	e7ea      	b.n	8007e8c <__swbuf_r+0x6c>
 8007eb6:	bf00      	nop
 8007eb8:	080087c8 	.word	0x080087c8
 8007ebc:	080087e8 	.word	0x080087e8
 8007ec0:	080087a8 	.word	0x080087a8

08007ec4 <__swsetup_r>:
 8007ec4:	4b32      	ldr	r3, [pc, #200]	; (8007f90 <__swsetup_r+0xcc>)
 8007ec6:	b570      	push	{r4, r5, r6, lr}
 8007ec8:	681d      	ldr	r5, [r3, #0]
 8007eca:	4606      	mov	r6, r0
 8007ecc:	460c      	mov	r4, r1
 8007ece:	b125      	cbz	r5, 8007eda <__swsetup_r+0x16>
 8007ed0:	69ab      	ldr	r3, [r5, #24]
 8007ed2:	b913      	cbnz	r3, 8007eda <__swsetup_r+0x16>
 8007ed4:	4628      	mov	r0, r5
 8007ed6:	f000 f97d 	bl	80081d4 <__sinit>
 8007eda:	4b2e      	ldr	r3, [pc, #184]	; (8007f94 <__swsetup_r+0xd0>)
 8007edc:	429c      	cmp	r4, r3
 8007ede:	d10f      	bne.n	8007f00 <__swsetup_r+0x3c>
 8007ee0:	686c      	ldr	r4, [r5, #4]
 8007ee2:	89a3      	ldrh	r3, [r4, #12]
 8007ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee8:	0719      	lsls	r1, r3, #28
 8007eea:	d42c      	bmi.n	8007f46 <__swsetup_r+0x82>
 8007eec:	06dd      	lsls	r5, r3, #27
 8007eee:	d411      	bmi.n	8007f14 <__swsetup_r+0x50>
 8007ef0:	2309      	movs	r3, #9
 8007ef2:	6033      	str	r3, [r6, #0]
 8007ef4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007ef8:	81a3      	strh	r3, [r4, #12]
 8007efa:	f04f 30ff 	mov.w	r0, #4294967295
 8007efe:	e03e      	b.n	8007f7e <__swsetup_r+0xba>
 8007f00:	4b25      	ldr	r3, [pc, #148]	; (8007f98 <__swsetup_r+0xd4>)
 8007f02:	429c      	cmp	r4, r3
 8007f04:	d101      	bne.n	8007f0a <__swsetup_r+0x46>
 8007f06:	68ac      	ldr	r4, [r5, #8]
 8007f08:	e7eb      	b.n	8007ee2 <__swsetup_r+0x1e>
 8007f0a:	4b24      	ldr	r3, [pc, #144]	; (8007f9c <__swsetup_r+0xd8>)
 8007f0c:	429c      	cmp	r4, r3
 8007f0e:	bf08      	it	eq
 8007f10:	68ec      	ldreq	r4, [r5, #12]
 8007f12:	e7e6      	b.n	8007ee2 <__swsetup_r+0x1e>
 8007f14:	0758      	lsls	r0, r3, #29
 8007f16:	d512      	bpl.n	8007f3e <__swsetup_r+0x7a>
 8007f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f1a:	b141      	cbz	r1, 8007f2e <__swsetup_r+0x6a>
 8007f1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f20:	4299      	cmp	r1, r3
 8007f22:	d002      	beq.n	8007f2a <__swsetup_r+0x66>
 8007f24:	4630      	mov	r0, r6
 8007f26:	f000 fa5b 	bl	80083e0 <_free_r>
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	6363      	str	r3, [r4, #52]	; 0x34
 8007f2e:	89a3      	ldrh	r3, [r4, #12]
 8007f30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f34:	81a3      	strh	r3, [r4, #12]
 8007f36:	2300      	movs	r3, #0
 8007f38:	6063      	str	r3, [r4, #4]
 8007f3a:	6923      	ldr	r3, [r4, #16]
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	f043 0308 	orr.w	r3, r3, #8
 8007f44:	81a3      	strh	r3, [r4, #12]
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	b94b      	cbnz	r3, 8007f5e <__swsetup_r+0x9a>
 8007f4a:	89a3      	ldrh	r3, [r4, #12]
 8007f4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f54:	d003      	beq.n	8007f5e <__swsetup_r+0x9a>
 8007f56:	4621      	mov	r1, r4
 8007f58:	4630      	mov	r0, r6
 8007f5a:	f000 fa01 	bl	8008360 <__smakebuf_r>
 8007f5e:	89a0      	ldrh	r0, [r4, #12]
 8007f60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007f64:	f010 0301 	ands.w	r3, r0, #1
 8007f68:	d00a      	beq.n	8007f80 <__swsetup_r+0xbc>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60a3      	str	r3, [r4, #8]
 8007f6e:	6963      	ldr	r3, [r4, #20]
 8007f70:	425b      	negs	r3, r3
 8007f72:	61a3      	str	r3, [r4, #24]
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	b943      	cbnz	r3, 8007f8a <__swsetup_r+0xc6>
 8007f78:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f7c:	d1ba      	bne.n	8007ef4 <__swsetup_r+0x30>
 8007f7e:	bd70      	pop	{r4, r5, r6, pc}
 8007f80:	0781      	lsls	r1, r0, #30
 8007f82:	bf58      	it	pl
 8007f84:	6963      	ldrpl	r3, [r4, #20]
 8007f86:	60a3      	str	r3, [r4, #8]
 8007f88:	e7f4      	b.n	8007f74 <__swsetup_r+0xb0>
 8007f8a:	2000      	movs	r0, #0
 8007f8c:	e7f7      	b.n	8007f7e <__swsetup_r+0xba>
 8007f8e:	bf00      	nop
 8007f90:	2000000c 	.word	0x2000000c
 8007f94:	080087c8 	.word	0x080087c8
 8007f98:	080087e8 	.word	0x080087e8
 8007f9c:	080087a8 	.word	0x080087a8

08007fa0 <__sflush_r>:
 8007fa0:	898a      	ldrh	r2, [r1, #12]
 8007fa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007fa6:	4605      	mov	r5, r0
 8007fa8:	0710      	lsls	r0, r2, #28
 8007faa:	460c      	mov	r4, r1
 8007fac:	d458      	bmi.n	8008060 <__sflush_r+0xc0>
 8007fae:	684b      	ldr	r3, [r1, #4]
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	dc05      	bgt.n	8007fc0 <__sflush_r+0x20>
 8007fb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dc02      	bgt.n	8007fc0 <__sflush_r+0x20>
 8007fba:	2000      	movs	r0, #0
 8007fbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fc2:	2e00      	cmp	r6, #0
 8007fc4:	d0f9      	beq.n	8007fba <__sflush_r+0x1a>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007fcc:	682f      	ldr	r7, [r5, #0]
 8007fce:	602b      	str	r3, [r5, #0]
 8007fd0:	d032      	beq.n	8008038 <__sflush_r+0x98>
 8007fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	075a      	lsls	r2, r3, #29
 8007fd8:	d505      	bpl.n	8007fe6 <__sflush_r+0x46>
 8007fda:	6863      	ldr	r3, [r4, #4]
 8007fdc:	1ac0      	subs	r0, r0, r3
 8007fde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007fe0:	b10b      	cbz	r3, 8007fe6 <__sflush_r+0x46>
 8007fe2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007fe4:	1ac0      	subs	r0, r0, r3
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	4602      	mov	r2, r0
 8007fea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007fec:	6a21      	ldr	r1, [r4, #32]
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b0      	blx	r6
 8007ff2:	1c43      	adds	r3, r0, #1
 8007ff4:	89a3      	ldrh	r3, [r4, #12]
 8007ff6:	d106      	bne.n	8008006 <__sflush_r+0x66>
 8007ff8:	6829      	ldr	r1, [r5, #0]
 8007ffa:	291d      	cmp	r1, #29
 8007ffc:	d82c      	bhi.n	8008058 <__sflush_r+0xb8>
 8007ffe:	4a2a      	ldr	r2, [pc, #168]	; (80080a8 <__sflush_r+0x108>)
 8008000:	40ca      	lsrs	r2, r1
 8008002:	07d6      	lsls	r6, r2, #31
 8008004:	d528      	bpl.n	8008058 <__sflush_r+0xb8>
 8008006:	2200      	movs	r2, #0
 8008008:	6062      	str	r2, [r4, #4]
 800800a:	04d9      	lsls	r1, r3, #19
 800800c:	6922      	ldr	r2, [r4, #16]
 800800e:	6022      	str	r2, [r4, #0]
 8008010:	d504      	bpl.n	800801c <__sflush_r+0x7c>
 8008012:	1c42      	adds	r2, r0, #1
 8008014:	d101      	bne.n	800801a <__sflush_r+0x7a>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	b903      	cbnz	r3, 800801c <__sflush_r+0x7c>
 800801a:	6560      	str	r0, [r4, #84]	; 0x54
 800801c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800801e:	602f      	str	r7, [r5, #0]
 8008020:	2900      	cmp	r1, #0
 8008022:	d0ca      	beq.n	8007fba <__sflush_r+0x1a>
 8008024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008028:	4299      	cmp	r1, r3
 800802a:	d002      	beq.n	8008032 <__sflush_r+0x92>
 800802c:	4628      	mov	r0, r5
 800802e:	f000 f9d7 	bl	80083e0 <_free_r>
 8008032:	2000      	movs	r0, #0
 8008034:	6360      	str	r0, [r4, #52]	; 0x34
 8008036:	e7c1      	b.n	8007fbc <__sflush_r+0x1c>
 8008038:	6a21      	ldr	r1, [r4, #32]
 800803a:	2301      	movs	r3, #1
 800803c:	4628      	mov	r0, r5
 800803e:	47b0      	blx	r6
 8008040:	1c41      	adds	r1, r0, #1
 8008042:	d1c7      	bne.n	8007fd4 <__sflush_r+0x34>
 8008044:	682b      	ldr	r3, [r5, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d0c4      	beq.n	8007fd4 <__sflush_r+0x34>
 800804a:	2b1d      	cmp	r3, #29
 800804c:	d001      	beq.n	8008052 <__sflush_r+0xb2>
 800804e:	2b16      	cmp	r3, #22
 8008050:	d101      	bne.n	8008056 <__sflush_r+0xb6>
 8008052:	602f      	str	r7, [r5, #0]
 8008054:	e7b1      	b.n	8007fba <__sflush_r+0x1a>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	e7ad      	b.n	8007fbc <__sflush_r+0x1c>
 8008060:	690f      	ldr	r7, [r1, #16]
 8008062:	2f00      	cmp	r7, #0
 8008064:	d0a9      	beq.n	8007fba <__sflush_r+0x1a>
 8008066:	0793      	lsls	r3, r2, #30
 8008068:	680e      	ldr	r6, [r1, #0]
 800806a:	bf08      	it	eq
 800806c:	694b      	ldreq	r3, [r1, #20]
 800806e:	600f      	str	r7, [r1, #0]
 8008070:	bf18      	it	ne
 8008072:	2300      	movne	r3, #0
 8008074:	eba6 0807 	sub.w	r8, r6, r7
 8008078:	608b      	str	r3, [r1, #8]
 800807a:	f1b8 0f00 	cmp.w	r8, #0
 800807e:	dd9c      	ble.n	8007fba <__sflush_r+0x1a>
 8008080:	6a21      	ldr	r1, [r4, #32]
 8008082:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008084:	4643      	mov	r3, r8
 8008086:	463a      	mov	r2, r7
 8008088:	4628      	mov	r0, r5
 800808a:	47b0      	blx	r6
 800808c:	2800      	cmp	r0, #0
 800808e:	dc06      	bgt.n	800809e <__sflush_r+0xfe>
 8008090:	89a3      	ldrh	r3, [r4, #12]
 8008092:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008096:	81a3      	strh	r3, [r4, #12]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295
 800809c:	e78e      	b.n	8007fbc <__sflush_r+0x1c>
 800809e:	4407      	add	r7, r0
 80080a0:	eba8 0800 	sub.w	r8, r8, r0
 80080a4:	e7e9      	b.n	800807a <__sflush_r+0xda>
 80080a6:	bf00      	nop
 80080a8:	20400001 	.word	0x20400001

080080ac <_fflush_r>:
 80080ac:	b538      	push	{r3, r4, r5, lr}
 80080ae:	690b      	ldr	r3, [r1, #16]
 80080b0:	4605      	mov	r5, r0
 80080b2:	460c      	mov	r4, r1
 80080b4:	b913      	cbnz	r3, 80080bc <_fflush_r+0x10>
 80080b6:	2500      	movs	r5, #0
 80080b8:	4628      	mov	r0, r5
 80080ba:	bd38      	pop	{r3, r4, r5, pc}
 80080bc:	b118      	cbz	r0, 80080c6 <_fflush_r+0x1a>
 80080be:	6983      	ldr	r3, [r0, #24]
 80080c0:	b90b      	cbnz	r3, 80080c6 <_fflush_r+0x1a>
 80080c2:	f000 f887 	bl	80081d4 <__sinit>
 80080c6:	4b14      	ldr	r3, [pc, #80]	; (8008118 <_fflush_r+0x6c>)
 80080c8:	429c      	cmp	r4, r3
 80080ca:	d11b      	bne.n	8008104 <_fflush_r+0x58>
 80080cc:	686c      	ldr	r4, [r5, #4]
 80080ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d0ef      	beq.n	80080b6 <_fflush_r+0xa>
 80080d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80080d8:	07d0      	lsls	r0, r2, #31
 80080da:	d404      	bmi.n	80080e6 <_fflush_r+0x3a>
 80080dc:	0599      	lsls	r1, r3, #22
 80080de:	d402      	bmi.n	80080e6 <_fflush_r+0x3a>
 80080e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080e2:	f000 f915 	bl	8008310 <__retarget_lock_acquire_recursive>
 80080e6:	4628      	mov	r0, r5
 80080e8:	4621      	mov	r1, r4
 80080ea:	f7ff ff59 	bl	8007fa0 <__sflush_r>
 80080ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80080f0:	07da      	lsls	r2, r3, #31
 80080f2:	4605      	mov	r5, r0
 80080f4:	d4e0      	bmi.n	80080b8 <_fflush_r+0xc>
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	059b      	lsls	r3, r3, #22
 80080fa:	d4dd      	bmi.n	80080b8 <_fflush_r+0xc>
 80080fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080fe:	f000 f908 	bl	8008312 <__retarget_lock_release_recursive>
 8008102:	e7d9      	b.n	80080b8 <_fflush_r+0xc>
 8008104:	4b05      	ldr	r3, [pc, #20]	; (800811c <_fflush_r+0x70>)
 8008106:	429c      	cmp	r4, r3
 8008108:	d101      	bne.n	800810e <_fflush_r+0x62>
 800810a:	68ac      	ldr	r4, [r5, #8]
 800810c:	e7df      	b.n	80080ce <_fflush_r+0x22>
 800810e:	4b04      	ldr	r3, [pc, #16]	; (8008120 <_fflush_r+0x74>)
 8008110:	429c      	cmp	r4, r3
 8008112:	bf08      	it	eq
 8008114:	68ec      	ldreq	r4, [r5, #12]
 8008116:	e7da      	b.n	80080ce <_fflush_r+0x22>
 8008118:	080087c8 	.word	0x080087c8
 800811c:	080087e8 	.word	0x080087e8
 8008120:	080087a8 	.word	0x080087a8

08008124 <std>:
 8008124:	2300      	movs	r3, #0
 8008126:	b510      	push	{r4, lr}
 8008128:	4604      	mov	r4, r0
 800812a:	e9c0 3300 	strd	r3, r3, [r0]
 800812e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008132:	6083      	str	r3, [r0, #8]
 8008134:	8181      	strh	r1, [r0, #12]
 8008136:	6643      	str	r3, [r0, #100]	; 0x64
 8008138:	81c2      	strh	r2, [r0, #14]
 800813a:	6183      	str	r3, [r0, #24]
 800813c:	4619      	mov	r1, r3
 800813e:	2208      	movs	r2, #8
 8008140:	305c      	adds	r0, #92	; 0x5c
 8008142:	f7ff fdef 	bl	8007d24 <memset>
 8008146:	4b05      	ldr	r3, [pc, #20]	; (800815c <std+0x38>)
 8008148:	6263      	str	r3, [r4, #36]	; 0x24
 800814a:	4b05      	ldr	r3, [pc, #20]	; (8008160 <std+0x3c>)
 800814c:	62a3      	str	r3, [r4, #40]	; 0x28
 800814e:	4b05      	ldr	r3, [pc, #20]	; (8008164 <std+0x40>)
 8008150:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008152:	4b05      	ldr	r3, [pc, #20]	; (8008168 <std+0x44>)
 8008154:	6224      	str	r4, [r4, #32]
 8008156:	6323      	str	r3, [r4, #48]	; 0x30
 8008158:	bd10      	pop	{r4, pc}
 800815a:	bf00      	nop
 800815c:	080085c1 	.word	0x080085c1
 8008160:	080085e3 	.word	0x080085e3
 8008164:	0800861b 	.word	0x0800861b
 8008168:	0800863f 	.word	0x0800863f

0800816c <_cleanup_r>:
 800816c:	4901      	ldr	r1, [pc, #4]	; (8008174 <_cleanup_r+0x8>)
 800816e:	f000 b8af 	b.w	80082d0 <_fwalk_reent>
 8008172:	bf00      	nop
 8008174:	080080ad 	.word	0x080080ad

08008178 <__sfmoreglue>:
 8008178:	b570      	push	{r4, r5, r6, lr}
 800817a:	2268      	movs	r2, #104	; 0x68
 800817c:	1e4d      	subs	r5, r1, #1
 800817e:	4355      	muls	r5, r2
 8008180:	460e      	mov	r6, r1
 8008182:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008186:	f000 f997 	bl	80084b8 <_malloc_r>
 800818a:	4604      	mov	r4, r0
 800818c:	b140      	cbz	r0, 80081a0 <__sfmoreglue+0x28>
 800818e:	2100      	movs	r1, #0
 8008190:	e9c0 1600 	strd	r1, r6, [r0]
 8008194:	300c      	adds	r0, #12
 8008196:	60a0      	str	r0, [r4, #8]
 8008198:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800819c:	f7ff fdc2 	bl	8007d24 <memset>
 80081a0:	4620      	mov	r0, r4
 80081a2:	bd70      	pop	{r4, r5, r6, pc}

080081a4 <__sfp_lock_acquire>:
 80081a4:	4801      	ldr	r0, [pc, #4]	; (80081ac <__sfp_lock_acquire+0x8>)
 80081a6:	f000 b8b3 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80081aa:	bf00      	nop
 80081ac:	200004f1 	.word	0x200004f1

080081b0 <__sfp_lock_release>:
 80081b0:	4801      	ldr	r0, [pc, #4]	; (80081b8 <__sfp_lock_release+0x8>)
 80081b2:	f000 b8ae 	b.w	8008312 <__retarget_lock_release_recursive>
 80081b6:	bf00      	nop
 80081b8:	200004f1 	.word	0x200004f1

080081bc <__sinit_lock_acquire>:
 80081bc:	4801      	ldr	r0, [pc, #4]	; (80081c4 <__sinit_lock_acquire+0x8>)
 80081be:	f000 b8a7 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80081c2:	bf00      	nop
 80081c4:	200004f2 	.word	0x200004f2

080081c8 <__sinit_lock_release>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__sinit_lock_release+0x8>)
 80081ca:	f000 b8a2 	b.w	8008312 <__retarget_lock_release_recursive>
 80081ce:	bf00      	nop
 80081d0:	200004f2 	.word	0x200004f2

080081d4 <__sinit>:
 80081d4:	b510      	push	{r4, lr}
 80081d6:	4604      	mov	r4, r0
 80081d8:	f7ff fff0 	bl	80081bc <__sinit_lock_acquire>
 80081dc:	69a3      	ldr	r3, [r4, #24]
 80081de:	b11b      	cbz	r3, 80081e8 <__sinit+0x14>
 80081e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e4:	f7ff bff0 	b.w	80081c8 <__sinit_lock_release>
 80081e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80081ec:	6523      	str	r3, [r4, #80]	; 0x50
 80081ee:	4b13      	ldr	r3, [pc, #76]	; (800823c <__sinit+0x68>)
 80081f0:	4a13      	ldr	r2, [pc, #76]	; (8008240 <__sinit+0x6c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80081f6:	42a3      	cmp	r3, r4
 80081f8:	bf04      	itt	eq
 80081fa:	2301      	moveq	r3, #1
 80081fc:	61a3      	streq	r3, [r4, #24]
 80081fe:	4620      	mov	r0, r4
 8008200:	f000 f820 	bl	8008244 <__sfp>
 8008204:	6060      	str	r0, [r4, #4]
 8008206:	4620      	mov	r0, r4
 8008208:	f000 f81c 	bl	8008244 <__sfp>
 800820c:	60a0      	str	r0, [r4, #8]
 800820e:	4620      	mov	r0, r4
 8008210:	f000 f818 	bl	8008244 <__sfp>
 8008214:	2200      	movs	r2, #0
 8008216:	60e0      	str	r0, [r4, #12]
 8008218:	2104      	movs	r1, #4
 800821a:	6860      	ldr	r0, [r4, #4]
 800821c:	f7ff ff82 	bl	8008124 <std>
 8008220:	68a0      	ldr	r0, [r4, #8]
 8008222:	2201      	movs	r2, #1
 8008224:	2109      	movs	r1, #9
 8008226:	f7ff ff7d 	bl	8008124 <std>
 800822a:	68e0      	ldr	r0, [r4, #12]
 800822c:	2202      	movs	r2, #2
 800822e:	2112      	movs	r1, #18
 8008230:	f7ff ff78 	bl	8008124 <std>
 8008234:	2301      	movs	r3, #1
 8008236:	61a3      	str	r3, [r4, #24]
 8008238:	e7d2      	b.n	80081e0 <__sinit+0xc>
 800823a:	bf00      	nop
 800823c:	080087a4 	.word	0x080087a4
 8008240:	0800816d 	.word	0x0800816d

08008244 <__sfp>:
 8008244:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008246:	4607      	mov	r7, r0
 8008248:	f7ff ffac 	bl	80081a4 <__sfp_lock_acquire>
 800824c:	4b1e      	ldr	r3, [pc, #120]	; (80082c8 <__sfp+0x84>)
 800824e:	681e      	ldr	r6, [r3, #0]
 8008250:	69b3      	ldr	r3, [r6, #24]
 8008252:	b913      	cbnz	r3, 800825a <__sfp+0x16>
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ffbd 	bl	80081d4 <__sinit>
 800825a:	3648      	adds	r6, #72	; 0x48
 800825c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008260:	3b01      	subs	r3, #1
 8008262:	d503      	bpl.n	800826c <__sfp+0x28>
 8008264:	6833      	ldr	r3, [r6, #0]
 8008266:	b30b      	cbz	r3, 80082ac <__sfp+0x68>
 8008268:	6836      	ldr	r6, [r6, #0]
 800826a:	e7f7      	b.n	800825c <__sfp+0x18>
 800826c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008270:	b9d5      	cbnz	r5, 80082a8 <__sfp+0x64>
 8008272:	4b16      	ldr	r3, [pc, #88]	; (80082cc <__sfp+0x88>)
 8008274:	60e3      	str	r3, [r4, #12]
 8008276:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800827a:	6665      	str	r5, [r4, #100]	; 0x64
 800827c:	f000 f847 	bl	800830e <__retarget_lock_init_recursive>
 8008280:	f7ff ff96 	bl	80081b0 <__sfp_lock_release>
 8008284:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008288:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800828c:	6025      	str	r5, [r4, #0]
 800828e:	61a5      	str	r5, [r4, #24]
 8008290:	2208      	movs	r2, #8
 8008292:	4629      	mov	r1, r5
 8008294:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008298:	f7ff fd44 	bl	8007d24 <memset>
 800829c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082a4:	4620      	mov	r0, r4
 80082a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082a8:	3468      	adds	r4, #104	; 0x68
 80082aa:	e7d9      	b.n	8008260 <__sfp+0x1c>
 80082ac:	2104      	movs	r1, #4
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff ff62 	bl	8008178 <__sfmoreglue>
 80082b4:	4604      	mov	r4, r0
 80082b6:	6030      	str	r0, [r6, #0]
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d1d5      	bne.n	8008268 <__sfp+0x24>
 80082bc:	f7ff ff78 	bl	80081b0 <__sfp_lock_release>
 80082c0:	230c      	movs	r3, #12
 80082c2:	603b      	str	r3, [r7, #0]
 80082c4:	e7ee      	b.n	80082a4 <__sfp+0x60>
 80082c6:	bf00      	nop
 80082c8:	080087a4 	.word	0x080087a4
 80082cc:	ffff0001 	.word	0xffff0001

080082d0 <_fwalk_reent>:
 80082d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082d4:	4606      	mov	r6, r0
 80082d6:	4688      	mov	r8, r1
 80082d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80082dc:	2700      	movs	r7, #0
 80082de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80082e2:	f1b9 0901 	subs.w	r9, r9, #1
 80082e6:	d505      	bpl.n	80082f4 <_fwalk_reent+0x24>
 80082e8:	6824      	ldr	r4, [r4, #0]
 80082ea:	2c00      	cmp	r4, #0
 80082ec:	d1f7      	bne.n	80082de <_fwalk_reent+0xe>
 80082ee:	4638      	mov	r0, r7
 80082f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80082f4:	89ab      	ldrh	r3, [r5, #12]
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d907      	bls.n	800830a <_fwalk_reent+0x3a>
 80082fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80082fe:	3301      	adds	r3, #1
 8008300:	d003      	beq.n	800830a <_fwalk_reent+0x3a>
 8008302:	4629      	mov	r1, r5
 8008304:	4630      	mov	r0, r6
 8008306:	47c0      	blx	r8
 8008308:	4307      	orrs	r7, r0
 800830a:	3568      	adds	r5, #104	; 0x68
 800830c:	e7e9      	b.n	80082e2 <_fwalk_reent+0x12>

0800830e <__retarget_lock_init_recursive>:
 800830e:	4770      	bx	lr

08008310 <__retarget_lock_acquire_recursive>:
 8008310:	4770      	bx	lr

08008312 <__retarget_lock_release_recursive>:
 8008312:	4770      	bx	lr

08008314 <__swhatbuf_r>:
 8008314:	b570      	push	{r4, r5, r6, lr}
 8008316:	460e      	mov	r6, r1
 8008318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800831c:	2900      	cmp	r1, #0
 800831e:	b096      	sub	sp, #88	; 0x58
 8008320:	4614      	mov	r4, r2
 8008322:	461d      	mov	r5, r3
 8008324:	da08      	bge.n	8008338 <__swhatbuf_r+0x24>
 8008326:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800832a:	2200      	movs	r2, #0
 800832c:	602a      	str	r2, [r5, #0]
 800832e:	061a      	lsls	r2, r3, #24
 8008330:	d410      	bmi.n	8008354 <__swhatbuf_r+0x40>
 8008332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008336:	e00e      	b.n	8008356 <__swhatbuf_r+0x42>
 8008338:	466a      	mov	r2, sp
 800833a:	f000 f9a7 	bl	800868c <_fstat_r>
 800833e:	2800      	cmp	r0, #0
 8008340:	dbf1      	blt.n	8008326 <__swhatbuf_r+0x12>
 8008342:	9a01      	ldr	r2, [sp, #4]
 8008344:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008348:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800834c:	425a      	negs	r2, r3
 800834e:	415a      	adcs	r2, r3
 8008350:	602a      	str	r2, [r5, #0]
 8008352:	e7ee      	b.n	8008332 <__swhatbuf_r+0x1e>
 8008354:	2340      	movs	r3, #64	; 0x40
 8008356:	2000      	movs	r0, #0
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	b016      	add	sp, #88	; 0x58
 800835c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008360 <__smakebuf_r>:
 8008360:	898b      	ldrh	r3, [r1, #12]
 8008362:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008364:	079d      	lsls	r5, r3, #30
 8008366:	4606      	mov	r6, r0
 8008368:	460c      	mov	r4, r1
 800836a:	d507      	bpl.n	800837c <__smakebuf_r+0x1c>
 800836c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008370:	6023      	str	r3, [r4, #0]
 8008372:	6123      	str	r3, [r4, #16]
 8008374:	2301      	movs	r3, #1
 8008376:	6163      	str	r3, [r4, #20]
 8008378:	b002      	add	sp, #8
 800837a:	bd70      	pop	{r4, r5, r6, pc}
 800837c:	ab01      	add	r3, sp, #4
 800837e:	466a      	mov	r2, sp
 8008380:	f7ff ffc8 	bl	8008314 <__swhatbuf_r>
 8008384:	9900      	ldr	r1, [sp, #0]
 8008386:	4605      	mov	r5, r0
 8008388:	4630      	mov	r0, r6
 800838a:	f000 f895 	bl	80084b8 <_malloc_r>
 800838e:	b948      	cbnz	r0, 80083a4 <__smakebuf_r+0x44>
 8008390:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008394:	059a      	lsls	r2, r3, #22
 8008396:	d4ef      	bmi.n	8008378 <__smakebuf_r+0x18>
 8008398:	f023 0303 	bic.w	r3, r3, #3
 800839c:	f043 0302 	orr.w	r3, r3, #2
 80083a0:	81a3      	strh	r3, [r4, #12]
 80083a2:	e7e3      	b.n	800836c <__smakebuf_r+0xc>
 80083a4:	4b0d      	ldr	r3, [pc, #52]	; (80083dc <__smakebuf_r+0x7c>)
 80083a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80083a8:	89a3      	ldrh	r3, [r4, #12]
 80083aa:	6020      	str	r0, [r4, #0]
 80083ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b0:	81a3      	strh	r3, [r4, #12]
 80083b2:	9b00      	ldr	r3, [sp, #0]
 80083b4:	6163      	str	r3, [r4, #20]
 80083b6:	9b01      	ldr	r3, [sp, #4]
 80083b8:	6120      	str	r0, [r4, #16]
 80083ba:	b15b      	cbz	r3, 80083d4 <__smakebuf_r+0x74>
 80083bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083c0:	4630      	mov	r0, r6
 80083c2:	f000 f975 	bl	80086b0 <_isatty_r>
 80083c6:	b128      	cbz	r0, 80083d4 <__smakebuf_r+0x74>
 80083c8:	89a3      	ldrh	r3, [r4, #12]
 80083ca:	f023 0303 	bic.w	r3, r3, #3
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	81a3      	strh	r3, [r4, #12]
 80083d4:	89a0      	ldrh	r0, [r4, #12]
 80083d6:	4305      	orrs	r5, r0
 80083d8:	81a5      	strh	r5, [r4, #12]
 80083da:	e7cd      	b.n	8008378 <__smakebuf_r+0x18>
 80083dc:	0800816d 	.word	0x0800816d

080083e0 <_free_r>:
 80083e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083e2:	2900      	cmp	r1, #0
 80083e4:	d044      	beq.n	8008470 <_free_r+0x90>
 80083e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083ea:	9001      	str	r0, [sp, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	f1a1 0404 	sub.w	r4, r1, #4
 80083f2:	bfb8      	it	lt
 80083f4:	18e4      	addlt	r4, r4, r3
 80083f6:	f000 f97d 	bl	80086f4 <__malloc_lock>
 80083fa:	4a1e      	ldr	r2, [pc, #120]	; (8008474 <_free_r+0x94>)
 80083fc:	9801      	ldr	r0, [sp, #4]
 80083fe:	6813      	ldr	r3, [r2, #0]
 8008400:	b933      	cbnz	r3, 8008410 <_free_r+0x30>
 8008402:	6063      	str	r3, [r4, #4]
 8008404:	6014      	str	r4, [r2, #0]
 8008406:	b003      	add	sp, #12
 8008408:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800840c:	f000 b978 	b.w	8008700 <__malloc_unlock>
 8008410:	42a3      	cmp	r3, r4
 8008412:	d908      	bls.n	8008426 <_free_r+0x46>
 8008414:	6825      	ldr	r5, [r4, #0]
 8008416:	1961      	adds	r1, r4, r5
 8008418:	428b      	cmp	r3, r1
 800841a:	bf01      	itttt	eq
 800841c:	6819      	ldreq	r1, [r3, #0]
 800841e:	685b      	ldreq	r3, [r3, #4]
 8008420:	1949      	addeq	r1, r1, r5
 8008422:	6021      	streq	r1, [r4, #0]
 8008424:	e7ed      	b.n	8008402 <_free_r+0x22>
 8008426:	461a      	mov	r2, r3
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	b10b      	cbz	r3, 8008430 <_free_r+0x50>
 800842c:	42a3      	cmp	r3, r4
 800842e:	d9fa      	bls.n	8008426 <_free_r+0x46>
 8008430:	6811      	ldr	r1, [r2, #0]
 8008432:	1855      	adds	r5, r2, r1
 8008434:	42a5      	cmp	r5, r4
 8008436:	d10b      	bne.n	8008450 <_free_r+0x70>
 8008438:	6824      	ldr	r4, [r4, #0]
 800843a:	4421      	add	r1, r4
 800843c:	1854      	adds	r4, r2, r1
 800843e:	42a3      	cmp	r3, r4
 8008440:	6011      	str	r1, [r2, #0]
 8008442:	d1e0      	bne.n	8008406 <_free_r+0x26>
 8008444:	681c      	ldr	r4, [r3, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	6053      	str	r3, [r2, #4]
 800844a:	4421      	add	r1, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	e7da      	b.n	8008406 <_free_r+0x26>
 8008450:	d902      	bls.n	8008458 <_free_r+0x78>
 8008452:	230c      	movs	r3, #12
 8008454:	6003      	str	r3, [r0, #0]
 8008456:	e7d6      	b.n	8008406 <_free_r+0x26>
 8008458:	6825      	ldr	r5, [r4, #0]
 800845a:	1961      	adds	r1, r4, r5
 800845c:	428b      	cmp	r3, r1
 800845e:	bf04      	itt	eq
 8008460:	6819      	ldreq	r1, [r3, #0]
 8008462:	685b      	ldreq	r3, [r3, #4]
 8008464:	6063      	str	r3, [r4, #4]
 8008466:	bf04      	itt	eq
 8008468:	1949      	addeq	r1, r1, r5
 800846a:	6021      	streq	r1, [r4, #0]
 800846c:	6054      	str	r4, [r2, #4]
 800846e:	e7ca      	b.n	8008406 <_free_r+0x26>
 8008470:	b003      	add	sp, #12
 8008472:	bd30      	pop	{r4, r5, pc}
 8008474:	200004f4 	.word	0x200004f4

08008478 <sbrk_aligned>:
 8008478:	b570      	push	{r4, r5, r6, lr}
 800847a:	4e0e      	ldr	r6, [pc, #56]	; (80084b4 <sbrk_aligned+0x3c>)
 800847c:	460c      	mov	r4, r1
 800847e:	6831      	ldr	r1, [r6, #0]
 8008480:	4605      	mov	r5, r0
 8008482:	b911      	cbnz	r1, 800848a <sbrk_aligned+0x12>
 8008484:	f000 f88c 	bl	80085a0 <_sbrk_r>
 8008488:	6030      	str	r0, [r6, #0]
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f000 f887 	bl	80085a0 <_sbrk_r>
 8008492:	1c43      	adds	r3, r0, #1
 8008494:	d00a      	beq.n	80084ac <sbrk_aligned+0x34>
 8008496:	1cc4      	adds	r4, r0, #3
 8008498:	f024 0403 	bic.w	r4, r4, #3
 800849c:	42a0      	cmp	r0, r4
 800849e:	d007      	beq.n	80084b0 <sbrk_aligned+0x38>
 80084a0:	1a21      	subs	r1, r4, r0
 80084a2:	4628      	mov	r0, r5
 80084a4:	f000 f87c 	bl	80085a0 <_sbrk_r>
 80084a8:	3001      	adds	r0, #1
 80084aa:	d101      	bne.n	80084b0 <sbrk_aligned+0x38>
 80084ac:	f04f 34ff 	mov.w	r4, #4294967295
 80084b0:	4620      	mov	r0, r4
 80084b2:	bd70      	pop	{r4, r5, r6, pc}
 80084b4:	200004f8 	.word	0x200004f8

080084b8 <_malloc_r>:
 80084b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084bc:	1ccd      	adds	r5, r1, #3
 80084be:	f025 0503 	bic.w	r5, r5, #3
 80084c2:	3508      	adds	r5, #8
 80084c4:	2d0c      	cmp	r5, #12
 80084c6:	bf38      	it	cc
 80084c8:	250c      	movcc	r5, #12
 80084ca:	2d00      	cmp	r5, #0
 80084cc:	4607      	mov	r7, r0
 80084ce:	db01      	blt.n	80084d4 <_malloc_r+0x1c>
 80084d0:	42a9      	cmp	r1, r5
 80084d2:	d905      	bls.n	80084e0 <_malloc_r+0x28>
 80084d4:	230c      	movs	r3, #12
 80084d6:	603b      	str	r3, [r7, #0]
 80084d8:	2600      	movs	r6, #0
 80084da:	4630      	mov	r0, r6
 80084dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084e0:	4e2e      	ldr	r6, [pc, #184]	; (800859c <_malloc_r+0xe4>)
 80084e2:	f000 f907 	bl	80086f4 <__malloc_lock>
 80084e6:	6833      	ldr	r3, [r6, #0]
 80084e8:	461c      	mov	r4, r3
 80084ea:	bb34      	cbnz	r4, 800853a <_malloc_r+0x82>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4638      	mov	r0, r7
 80084f0:	f7ff ffc2 	bl	8008478 <sbrk_aligned>
 80084f4:	1c43      	adds	r3, r0, #1
 80084f6:	4604      	mov	r4, r0
 80084f8:	d14d      	bne.n	8008596 <_malloc_r+0xde>
 80084fa:	6834      	ldr	r4, [r6, #0]
 80084fc:	4626      	mov	r6, r4
 80084fe:	2e00      	cmp	r6, #0
 8008500:	d140      	bne.n	8008584 <_malloc_r+0xcc>
 8008502:	6823      	ldr	r3, [r4, #0]
 8008504:	4631      	mov	r1, r6
 8008506:	4638      	mov	r0, r7
 8008508:	eb04 0803 	add.w	r8, r4, r3
 800850c:	f000 f848 	bl	80085a0 <_sbrk_r>
 8008510:	4580      	cmp	r8, r0
 8008512:	d13a      	bne.n	800858a <_malloc_r+0xd2>
 8008514:	6821      	ldr	r1, [r4, #0]
 8008516:	3503      	adds	r5, #3
 8008518:	1a6d      	subs	r5, r5, r1
 800851a:	f025 0503 	bic.w	r5, r5, #3
 800851e:	3508      	adds	r5, #8
 8008520:	2d0c      	cmp	r5, #12
 8008522:	bf38      	it	cc
 8008524:	250c      	movcc	r5, #12
 8008526:	4629      	mov	r1, r5
 8008528:	4638      	mov	r0, r7
 800852a:	f7ff ffa5 	bl	8008478 <sbrk_aligned>
 800852e:	3001      	adds	r0, #1
 8008530:	d02b      	beq.n	800858a <_malloc_r+0xd2>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	442b      	add	r3, r5
 8008536:	6023      	str	r3, [r4, #0]
 8008538:	e00e      	b.n	8008558 <_malloc_r+0xa0>
 800853a:	6822      	ldr	r2, [r4, #0]
 800853c:	1b52      	subs	r2, r2, r5
 800853e:	d41e      	bmi.n	800857e <_malloc_r+0xc6>
 8008540:	2a0b      	cmp	r2, #11
 8008542:	d916      	bls.n	8008572 <_malloc_r+0xba>
 8008544:	1961      	adds	r1, r4, r5
 8008546:	42a3      	cmp	r3, r4
 8008548:	6025      	str	r5, [r4, #0]
 800854a:	bf18      	it	ne
 800854c:	6059      	strne	r1, [r3, #4]
 800854e:	6863      	ldr	r3, [r4, #4]
 8008550:	bf08      	it	eq
 8008552:	6031      	streq	r1, [r6, #0]
 8008554:	5162      	str	r2, [r4, r5]
 8008556:	604b      	str	r3, [r1, #4]
 8008558:	4638      	mov	r0, r7
 800855a:	f104 060b 	add.w	r6, r4, #11
 800855e:	f000 f8cf 	bl	8008700 <__malloc_unlock>
 8008562:	f026 0607 	bic.w	r6, r6, #7
 8008566:	1d23      	adds	r3, r4, #4
 8008568:	1af2      	subs	r2, r6, r3
 800856a:	d0b6      	beq.n	80084da <_malloc_r+0x22>
 800856c:	1b9b      	subs	r3, r3, r6
 800856e:	50a3      	str	r3, [r4, r2]
 8008570:	e7b3      	b.n	80084da <_malloc_r+0x22>
 8008572:	6862      	ldr	r2, [r4, #4]
 8008574:	42a3      	cmp	r3, r4
 8008576:	bf0c      	ite	eq
 8008578:	6032      	streq	r2, [r6, #0]
 800857a:	605a      	strne	r2, [r3, #4]
 800857c:	e7ec      	b.n	8008558 <_malloc_r+0xa0>
 800857e:	4623      	mov	r3, r4
 8008580:	6864      	ldr	r4, [r4, #4]
 8008582:	e7b2      	b.n	80084ea <_malloc_r+0x32>
 8008584:	4634      	mov	r4, r6
 8008586:	6876      	ldr	r6, [r6, #4]
 8008588:	e7b9      	b.n	80084fe <_malloc_r+0x46>
 800858a:	230c      	movs	r3, #12
 800858c:	603b      	str	r3, [r7, #0]
 800858e:	4638      	mov	r0, r7
 8008590:	f000 f8b6 	bl	8008700 <__malloc_unlock>
 8008594:	e7a1      	b.n	80084da <_malloc_r+0x22>
 8008596:	6025      	str	r5, [r4, #0]
 8008598:	e7de      	b.n	8008558 <_malloc_r+0xa0>
 800859a:	bf00      	nop
 800859c:	200004f4 	.word	0x200004f4

080085a0 <_sbrk_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	4d06      	ldr	r5, [pc, #24]	; (80085bc <_sbrk_r+0x1c>)
 80085a4:	2300      	movs	r3, #0
 80085a6:	4604      	mov	r4, r0
 80085a8:	4608      	mov	r0, r1
 80085aa:	602b      	str	r3, [r5, #0]
 80085ac:	f7fa fce8 	bl	8002f80 <_sbrk>
 80085b0:	1c43      	adds	r3, r0, #1
 80085b2:	d102      	bne.n	80085ba <_sbrk_r+0x1a>
 80085b4:	682b      	ldr	r3, [r5, #0]
 80085b6:	b103      	cbz	r3, 80085ba <_sbrk_r+0x1a>
 80085b8:	6023      	str	r3, [r4, #0]
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	200004fc 	.word	0x200004fc

080085c0 <__sread>:
 80085c0:	b510      	push	{r4, lr}
 80085c2:	460c      	mov	r4, r1
 80085c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c8:	f000 f8a0 	bl	800870c <_read_r>
 80085cc:	2800      	cmp	r0, #0
 80085ce:	bfab      	itete	ge
 80085d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085d2:	89a3      	ldrhlt	r3, [r4, #12]
 80085d4:	181b      	addge	r3, r3, r0
 80085d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085da:	bfac      	ite	ge
 80085dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80085de:	81a3      	strhlt	r3, [r4, #12]
 80085e0:	bd10      	pop	{r4, pc}

080085e2 <__swrite>:
 80085e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e6:	461f      	mov	r7, r3
 80085e8:	898b      	ldrh	r3, [r1, #12]
 80085ea:	05db      	lsls	r3, r3, #23
 80085ec:	4605      	mov	r5, r0
 80085ee:	460c      	mov	r4, r1
 80085f0:	4616      	mov	r6, r2
 80085f2:	d505      	bpl.n	8008600 <__swrite+0x1e>
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	2302      	movs	r3, #2
 80085fa:	2200      	movs	r2, #0
 80085fc:	f000 f868 	bl	80086d0 <_lseek_r>
 8008600:	89a3      	ldrh	r3, [r4, #12]
 8008602:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008606:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800860a:	81a3      	strh	r3, [r4, #12]
 800860c:	4632      	mov	r2, r6
 800860e:	463b      	mov	r3, r7
 8008610:	4628      	mov	r0, r5
 8008612:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008616:	f000 b817 	b.w	8008648 <_write_r>

0800861a <__sseek>:
 800861a:	b510      	push	{r4, lr}
 800861c:	460c      	mov	r4, r1
 800861e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008622:	f000 f855 	bl	80086d0 <_lseek_r>
 8008626:	1c43      	adds	r3, r0, #1
 8008628:	89a3      	ldrh	r3, [r4, #12]
 800862a:	bf15      	itete	ne
 800862c:	6560      	strne	r0, [r4, #84]	; 0x54
 800862e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008632:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008636:	81a3      	strheq	r3, [r4, #12]
 8008638:	bf18      	it	ne
 800863a:	81a3      	strhne	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__sclose>:
 800863e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008642:	f000 b813 	b.w	800866c <_close_r>
	...

08008648 <_write_r>:
 8008648:	b538      	push	{r3, r4, r5, lr}
 800864a:	4d07      	ldr	r5, [pc, #28]	; (8008668 <_write_r+0x20>)
 800864c:	4604      	mov	r4, r0
 800864e:	4608      	mov	r0, r1
 8008650:	4611      	mov	r1, r2
 8008652:	2200      	movs	r2, #0
 8008654:	602a      	str	r2, [r5, #0]
 8008656:	461a      	mov	r2, r3
 8008658:	f7f9 fcff 	bl	800205a <_write>
 800865c:	1c43      	adds	r3, r0, #1
 800865e:	d102      	bne.n	8008666 <_write_r+0x1e>
 8008660:	682b      	ldr	r3, [r5, #0]
 8008662:	b103      	cbz	r3, 8008666 <_write_r+0x1e>
 8008664:	6023      	str	r3, [r4, #0]
 8008666:	bd38      	pop	{r3, r4, r5, pc}
 8008668:	200004fc 	.word	0x200004fc

0800866c <_close_r>:
 800866c:	b538      	push	{r3, r4, r5, lr}
 800866e:	4d06      	ldr	r5, [pc, #24]	; (8008688 <_close_r+0x1c>)
 8008670:	2300      	movs	r3, #0
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	602b      	str	r3, [r5, #0]
 8008678:	f7fa fc4e 	bl	8002f18 <_close>
 800867c:	1c43      	adds	r3, r0, #1
 800867e:	d102      	bne.n	8008686 <_close_r+0x1a>
 8008680:	682b      	ldr	r3, [r5, #0]
 8008682:	b103      	cbz	r3, 8008686 <_close_r+0x1a>
 8008684:	6023      	str	r3, [r4, #0]
 8008686:	bd38      	pop	{r3, r4, r5, pc}
 8008688:	200004fc 	.word	0x200004fc

0800868c <_fstat_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	; (80086ac <_fstat_r+0x20>)
 8008690:	2300      	movs	r3, #0
 8008692:	4604      	mov	r4, r0
 8008694:	4608      	mov	r0, r1
 8008696:	4611      	mov	r1, r2
 8008698:	602b      	str	r3, [r5, #0]
 800869a:	f7fa fc49 	bl	8002f30 <_fstat>
 800869e:	1c43      	adds	r3, r0, #1
 80086a0:	d102      	bne.n	80086a8 <_fstat_r+0x1c>
 80086a2:	682b      	ldr	r3, [r5, #0]
 80086a4:	b103      	cbz	r3, 80086a8 <_fstat_r+0x1c>
 80086a6:	6023      	str	r3, [r4, #0]
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	200004fc 	.word	0x200004fc

080086b0 <_isatty_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	; (80086cc <_isatty_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7fa fc48 	bl	8002f50 <_isatty>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_isatty_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_isatty_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	200004fc 	.word	0x200004fc

080086d0 <_lseek_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_lseek_r+0x20>)
 80086d4:	4604      	mov	r4, r0
 80086d6:	4608      	mov	r0, r1
 80086d8:	4611      	mov	r1, r2
 80086da:	2200      	movs	r2, #0
 80086dc:	602a      	str	r2, [r5, #0]
 80086de:	461a      	mov	r2, r3
 80086e0:	f7fa fc41 	bl	8002f66 <_lseek>
 80086e4:	1c43      	adds	r3, r0, #1
 80086e6:	d102      	bne.n	80086ee <_lseek_r+0x1e>
 80086e8:	682b      	ldr	r3, [r5, #0]
 80086ea:	b103      	cbz	r3, 80086ee <_lseek_r+0x1e>
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	bd38      	pop	{r3, r4, r5, pc}
 80086f0:	200004fc 	.word	0x200004fc

080086f4 <__malloc_lock>:
 80086f4:	4801      	ldr	r0, [pc, #4]	; (80086fc <__malloc_lock+0x8>)
 80086f6:	f7ff be0b 	b.w	8008310 <__retarget_lock_acquire_recursive>
 80086fa:	bf00      	nop
 80086fc:	200004f0 	.word	0x200004f0

08008700 <__malloc_unlock>:
 8008700:	4801      	ldr	r0, [pc, #4]	; (8008708 <__malloc_unlock+0x8>)
 8008702:	f7ff be06 	b.w	8008312 <__retarget_lock_release_recursive>
 8008706:	bf00      	nop
 8008708:	200004f0 	.word	0x200004f0

0800870c <_read_r>:
 800870c:	b538      	push	{r3, r4, r5, lr}
 800870e:	4d07      	ldr	r5, [pc, #28]	; (800872c <_read_r+0x20>)
 8008710:	4604      	mov	r4, r0
 8008712:	4608      	mov	r0, r1
 8008714:	4611      	mov	r1, r2
 8008716:	2200      	movs	r2, #0
 8008718:	602a      	str	r2, [r5, #0]
 800871a:	461a      	mov	r2, r3
 800871c:	f7fa fbdf 	bl	8002ede <_read>
 8008720:	1c43      	adds	r3, r0, #1
 8008722:	d102      	bne.n	800872a <_read_r+0x1e>
 8008724:	682b      	ldr	r3, [r5, #0]
 8008726:	b103      	cbz	r3, 800872a <_read_r+0x1e>
 8008728:	6023      	str	r3, [r4, #0]
 800872a:	bd38      	pop	{r3, r4, r5, pc}
 800872c:	200004fc 	.word	0x200004fc

08008730 <_init>:
 8008730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008732:	bf00      	nop
 8008734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008736:	bc08      	pop	{r3}
 8008738:	469e      	mov	lr, r3
 800873a:	4770      	bx	lr

0800873c <_fini>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	bf00      	nop
 8008740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008742:	bc08      	pop	{r3}
 8008744:	469e      	mov	lr, r3
 8008746:	4770      	bx	lr
