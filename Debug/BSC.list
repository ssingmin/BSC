
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a730  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  0800a900  0800a900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aa18  0800aa18  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800aa18  0800aa18  0001aa18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aa20  0800aa20  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aa20  0800aa20  0001aa20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aa24  0800aa24  0001aa24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800aa28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004c4  20000078  0800aaa0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000053c  0800aaa0  0002053c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016883  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301f  00000000  00000000  0003692b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c8  00000000  00000000  00039950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a8  00000000  00000000  0003ab18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000280be  00000000  00000000  0003bbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ed8  00000000  00000000  00063c7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f547e  00000000  00000000  00079b56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016efd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005354  00000000  00000000  0016f024  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800a8e8 	.word	0x0800a8e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	0800a8e8 	.word	0x0800a8e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		init_state();
 8000ef4:	f000 f846 	bl	8000f84 <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <getData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the buffer.
 *
 * @return Data bit length.
 */
int getData(Format *format, uint8_t *buf, int bitlength) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
    LOCK();

    if (bitlength < data.bitcount) {
 8000f08:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <getData+0x84>)
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	da02      	bge.n	8000f18 <getData+0x1c>
        UNLOCK();
        return -1;
 8000f12:	f04f 33ff 	mov.w	r3, #4294967295
 8000f16:	e02e      	b.n	8000f76 <getData+0x7a>
    }

    const int nbits = data.bitcount;
 8000f18:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <getData+0x84>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	61bb      	str	r3, [r7, #24]
    const int nbytes = data.bitcount / 8 + (((data.bitcount % 8) != 0) ? 1 : 0);
 8000f1e:	4b18      	ldr	r3, [pc, #96]	; (8000f80 <getData+0x84>)
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da00      	bge.n	8000f28 <getData+0x2c>
 8000f26:	3307      	adds	r3, #7
 8000f28:	10db      	asrs	r3, r3, #3
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	4b14      	ldr	r3, [pc, #80]	; (8000f80 <getData+0x84>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0307 	and.w	r3, r3, #7
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	bf14      	ite	ne
 8000f38:	2301      	movne	r3, #1
 8000f3a:	2300      	moveq	r3, #0
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	4413      	add	r3, r2
 8000f40:	617b      	str	r3, [r7, #20]

    *format = data.format;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	; (8000f80 <getData+0x84>)
 8000f44:	781a      	ldrb	r2, [r3, #0]
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	61fb      	str	r3, [r7, #28]
 8000f4e:	e00b      	b.n	8000f68 <getData+0x6c>
        buf[i] = data.buffer[i];
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	4413      	add	r3, r2
 8000f56:	490a      	ldr	r1, [pc, #40]	; (8000f80 <getData+0x84>)
 8000f58:	69fa      	ldr	r2, [r7, #28]
 8000f5a:	440a      	add	r2, r1
 8000f5c:	3208      	adds	r2, #8
 8000f5e:	7812      	ldrb	r2, [r2, #0]
 8000f60:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3301      	adds	r3, #1
 8000f66:	61fb      	str	r3, [r7, #28]
 8000f68:	69fa      	ldr	r2, [r7, #28]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbef      	blt.n	8000f50 <getData+0x54>
    }

    init_state();
 8000f70:	f000 f808 	bl	8000f84 <init_state>

    UNLOCK();
    return nbits;
 8000f74:	69bb      	ldr	r3, [r7, #24]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20000094 	.word	0x20000094

08000f84 <init_state>:

void init_state(void) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <init_state+0x7c>)
 8000f8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f90:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <init_state+0x7c>)
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000f9a:	4b19      	ldr	r3, [pc, #100]	; (8001000 <init_state+0x7c>)
 8000f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa0:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000fa2:	4b17      	ldr	r3, [pc, #92]	; (8001000 <init_state+0x7c>)
 8000fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fa8:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <init_state+0x7c>)
 8000fac:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb0:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <init_state+0x7c>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000fb8:	4b12      	ldr	r3, [pc, #72]	; (8001004 <init_state+0x80>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <init_state+0x80>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);  //timer.stop();
 8000fc4:	4810      	ldr	r0, [pc, #64]	; (8001008 <init_state+0x84>)
 8000fc6:	f006 fafb 	bl	80075c0 <HAL_TIM_Base_Stop_IT>
    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
 8000fca:	2028      	movs	r0, #40	; 0x28
 8000fcc:	f004 fe61 	bl	8005c92 <HAL_NVIC_DisableIRQ>
    IR_NEC_Tick = 0;  //timer.reset();
 8000fd0:	4b0e      	ldr	r3, [pc, #56]	; (800100c <init_state+0x88>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e008      	b.n	8000fee <init_state+0x6a>
        data.buffer[i] = 0;
 8000fdc:	4a09      	ldr	r2, [pc, #36]	; (8001004 <init_state+0x80>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3308      	adds	r3, #8
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3301      	adds	r3, #1
 8000fec:	607b      	str	r3, [r7, #4]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2b3f      	cmp	r3, #63	; 0x3f
 8000ff2:	d9f3      	bls.n	8000fdc <init_state+0x58>
    }
}
 8000ff4:	bf00      	nop
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200000dc 	.word	0x200000dc
 8001004:	20000094 	.word	0x20000094
 8001008:	200003d0 	.word	0x200003d0
 800100c:	2000010c 	.word	0x2000010c

08001010 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001016:	4b96      	ldr	r3, [pc, #600]	; (8001270 <isr_fall+0x260>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	2b02      	cmp	r3, #2
 800101c:	f000 83cb 	beq.w	80017b6 <isr_fall+0x7a6>
 8001020:	2b02      	cmp	r3, #2
 8001022:	f300 83ca 	bgt.w	80017ba <isr_fall+0x7aa>
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <isr_fall+0x22>
 800102a:	2b01      	cmp	r3, #1
 800102c:	f000 8224 	beq.w	8001478 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001030:	e3c3      	b.n	80017ba <isr_fall+0x7aa>
            if (work.c1 < 0) {
 8001032:	4b8f      	ldr	r3, [pc, #572]	; (8001270 <isr_fall+0x260>)
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	da08      	bge.n	800104c <isr_fall+0x3c>
            	HAL_TIM_Base_Start_IT(&htim14);  //timer.start();
 800103a:	488e      	ldr	r0, [pc, #568]	; (8001274 <isr_fall+0x264>)
 800103c:	f006 fa48 	bl	80074d0 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8001040:	4b8d      	ldr	r3, [pc, #564]	; (8001278 <isr_fall+0x268>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b8a      	ldr	r3, [pc, #552]	; (8001270 <isr_fall+0x260>)
 8001048:	605a      	str	r2, [r3, #4]
            break;
 800104a:	e3b9      	b.n	80017c0 <isr_fall+0x7b0>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 800104c:	4b8a      	ldr	r3, [pc, #552]	; (8001278 <isr_fall+0x268>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	461a      	mov	r2, r3
 8001052:	4b87      	ldr	r3, [pc, #540]	; (8001270 <isr_fall+0x260>)
 8001054:	60da      	str	r2, [r3, #12]
                int a = work.c2 - work.c1;
 8001056:	4b86      	ldr	r3, [pc, #536]	; (8001270 <isr_fall+0x260>)
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <isr_fall+0x260>)
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 8001062:	4b83      	ldr	r3, [pc, #524]	; (8001270 <isr_fall+0x260>)
 8001064:	68da      	ldr	r2, [r3, #12]
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <isr_fall+0x260>)
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 800106e:	f240 2332 	movw	r3, #562	; 0x232
 8001072:	011b      	lsls	r3, r3, #4
 8001074:	4618      	mov	r0, r3
 8001076:	f7ff fa6d 	bl	8000554 <__aeabi_i2d>
 800107a:	a379      	add	r3, pc, #484	; (adr r3, 8001260 <isr_fall+0x250>)
 800107c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001080:	f7ff fad2 	bl	8000628 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4614      	mov	r4, r2
 800108a:	461d      	mov	r5, r3
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff fa61 	bl	8000554 <__aeabi_i2d>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4620      	mov	r0, r4
 8001098:	4629      	mov	r1, r5
 800109a:	f7ff fd37 	bl	8000b0c <__aeabi_dcmplt>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d056      	beq.n	8001152 <isr_fall+0x142>
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	f7ff fa55 	bl	8000554 <__aeabi_i2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	f240 2332 	movw	r3, #562	; 0x232
 80010b2:	011b      	lsls	r3, r3, #4
 80010b4:	4618      	mov	r0, r3
 80010b6:	f7ff fa4d 	bl	8000554 <__aeabi_i2d>
 80010ba:	a36b      	add	r3, pc, #428	; (adr r3, 8001268 <isr_fall+0x258>)
 80010bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c0:	f7ff fab2 	bl	8000628 <__aeabi_dmul>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4620      	mov	r0, r4
 80010ca:	4629      	mov	r1, r5
 80010cc:	f7ff fd1e 	bl	8000b0c <__aeabi_dcmplt>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d03d      	beq.n	8001152 <isr_fall+0x142>
 80010d6:	f240 2332 	movw	r3, #562	; 0x232
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fa39 	bl	8000554 <__aeabi_i2d>
 80010e2:	a35f      	add	r3, pc, #380	; (adr r3, 8001260 <isr_fall+0x250>)
 80010e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e8:	f7ff fa9e 	bl	8000628 <__aeabi_dmul>
 80010ec:	4602      	mov	r2, r0
 80010ee:	460b      	mov	r3, r1
 80010f0:	4614      	mov	r4, r2
 80010f2:	461d      	mov	r5, r3
 80010f4:	6838      	ldr	r0, [r7, #0]
 80010f6:	f7ff fa2d 	bl	8000554 <__aeabi_i2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	4620      	mov	r0, r4
 8001100:	4629      	mov	r1, r5
 8001102:	f7ff fd03 	bl	8000b0c <__aeabi_dcmplt>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d022      	beq.n	8001152 <isr_fall+0x142>
 800110c:	6838      	ldr	r0, [r7, #0]
 800110e:	f7ff fa21 	bl	8000554 <__aeabi_i2d>
 8001112:	4604      	mov	r4, r0
 8001114:	460d      	mov	r5, r1
 8001116:	f240 2332 	movw	r3, #562	; 0x232
 800111a:	00db      	lsls	r3, r3, #3
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff fa19 	bl	8000554 <__aeabi_i2d>
 8001122:	a351      	add	r3, pc, #324	; (adr r3, 8001268 <isr_fall+0x258>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff fa7e 	bl	8000628 <__aeabi_dmul>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4620      	mov	r0, r4
 8001132:	4629      	mov	r1, r5
 8001134:	f7ff fcea 	bl	8000b0c <__aeabi_dcmplt>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <isr_fall+0x142>
                    data.format = NEC;
 800113e:	4b4f      	ldr	r3, [pc, #316]	; (800127c <isr_fall+0x26c>)
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <isr_fall+0x260>)
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800114a:	4b4c      	ldr	r3, [pc, #304]	; (800127c <isr_fall+0x26c>)
 800114c:	2200      	movs	r2, #0
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	e191      	b.n	8001476 <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 8001152:	f240 2332 	movw	r3, #562	; 0x232
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff f9fb 	bl	8000554 <__aeabi_i2d>
 800115e:	a340      	add	r3, pc, #256	; (adr r3, 8001260 <isr_fall+0x250>)
 8001160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001164:	f7ff fa60 	bl	8000628 <__aeabi_dmul>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	4614      	mov	r4, r2
 800116e:	461d      	mov	r5, r3
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff f9ef 	bl	8000554 <__aeabi_i2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4620      	mov	r0, r4
 800117c:	4629      	mov	r1, r5
 800117e:	f7ff fcc5 	bl	8000b0c <__aeabi_dcmplt>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d07b      	beq.n	8001280 <isr_fall+0x270>
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff f9e3 	bl	8000554 <__aeabi_i2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	f240 2332 	movw	r3, #562	; 0x232
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4618      	mov	r0, r3
 800119a:	f7ff f9db 	bl	8000554 <__aeabi_i2d>
 800119e:	a332      	add	r3, pc, #200	; (adr r3, 8001268 <isr_fall+0x258>)
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f7ff fa40 	bl	8000628 <__aeabi_dmul>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4620      	mov	r0, r4
 80011ae:	4629      	mov	r1, r5
 80011b0:	f7ff fcac 	bl	8000b0c <__aeabi_dcmplt>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d062      	beq.n	8001280 <isr_fall+0x270>
 80011ba:	f240 2332 	movw	r3, #562	; 0x232
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f9c7 	bl	8000554 <__aeabi_i2d>
 80011c6:	a326      	add	r3, pc, #152	; (adr r3, 8001260 <isr_fall+0x250>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff fa2c 	bl	8000628 <__aeabi_dmul>
 80011d0:	4602      	mov	r2, r0
 80011d2:	460b      	mov	r3, r1
 80011d4:	4614      	mov	r4, r2
 80011d6:	461d      	mov	r5, r3
 80011d8:	6838      	ldr	r0, [r7, #0]
 80011da:	f7ff f9bb 	bl	8000554 <__aeabi_i2d>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4620      	mov	r0, r4
 80011e4:	4629      	mov	r1, r5
 80011e6:	f7ff fc91 	bl	8000b0c <__aeabi_dcmplt>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d047      	beq.n	8001280 <isr_fall+0x270>
 80011f0:	6838      	ldr	r0, [r7, #0]
 80011f2:	f7ff f9af 	bl	8000554 <__aeabi_i2d>
 80011f6:	4604      	mov	r4, r0
 80011f8:	460d      	mov	r5, r1
 80011fa:	f240 2332 	movw	r3, #562	; 0x232
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9a7 	bl	8000554 <__aeabi_i2d>
 8001206:	a318      	add	r3, pc, #96	; (adr r3, 8001268 <isr_fall+0x258>)
 8001208:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120c:	f7ff fa0c 	bl	8000628 <__aeabi_dmul>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7ff fc78 	bl	8000b0c <__aeabi_dcmplt>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d02e      	beq.n	8001280 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <isr_fall+0x26c>)
 8001224:	2202      	movs	r2, #2
 8001226:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001228:	4b11      	ldr	r3, [pc, #68]	; (8001270 <isr_fall+0x260>)
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800122e:	4b13      	ldr	r3, [pc, #76]	; (800127c <isr_fall+0x26c>)
 8001230:	2200      	movs	r2, #0
 8001232:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <isr_fall+0x260>)
 8001236:	f04f 32ff 	mov.w	r2, #4294967295
 800123a:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 800123c:	4b0c      	ldr	r3, [pc, #48]	; (8001270 <isr_fall+0x260>)
 800123e:	f04f 32ff 	mov.w	r2, #4294967295
 8001242:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001244:	4b0a      	ldr	r3, [pc, #40]	; (8001270 <isr_fall+0x260>)
 8001246:	f04f 32ff 	mov.w	r2, #4294967295
 800124a:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 800124c:	4b08      	ldr	r3, [pc, #32]	; (8001270 <isr_fall+0x260>)
 800124e:	f04f 32ff 	mov.w	r2, #4294967295
 8001252:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <isr_fall+0x260>)
 8001256:	f04f 32ff 	mov.w	r2, #4294967295
 800125a:	615a      	str	r2, [r3, #20]
 800125c:	e10b      	b.n	8001476 <isr_fall+0x466>
 800125e:	bf00      	nop
 8001260:	66666666 	.word	0x66666666
 8001264:	3fe66666 	.word	0x3fe66666
 8001268:	cccccccd 	.word	0xcccccccd
 800126c:	3ff4cccc 	.word	0x3ff4cccc
 8001270:	200000dc 	.word	0x200000dc
 8001274:	200003d0 	.word	0x200003d0
 8001278:	2000010c 	.word	0x2000010c
 800127c:	20000094 	.word	0x20000094
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 8001280:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff f964 	bl	8000554 <__aeabi_i2d>
 800128c:	a3dc      	add	r3, pc, #880	; (adr r3, 8001600 <isr_fall+0x5f0>)
 800128e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001292:	f7ff f9c9 	bl	8000628 <__aeabi_dmul>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	4614      	mov	r4, r2
 800129c:	461d      	mov	r5, r3
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff f958 	bl	8000554 <__aeabi_i2d>
 80012a4:	4602      	mov	r2, r0
 80012a6:	460b      	mov	r3, r1
 80012a8:	4620      	mov	r0, r4
 80012aa:	4629      	mov	r1, r5
 80012ac:	f7ff fc2e 	bl	8000b0c <__aeabi_dcmplt>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d056      	beq.n	8001364 <isr_fall+0x354>
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f94c 	bl	8000554 <__aeabi_i2d>
 80012bc:	4604      	mov	r4, r0
 80012be:	460d      	mov	r5, r1
 80012c0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012c4:	00db      	lsls	r3, r3, #3
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f944 	bl	8000554 <__aeabi_i2d>
 80012cc:	a3ce      	add	r3, pc, #824	; (adr r3, 8001608 <isr_fall+0x5f8>)
 80012ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012d2:	f7ff f9a9 	bl	8000628 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4620      	mov	r0, r4
 80012dc:	4629      	mov	r1, r5
 80012de:	f7ff fc15 	bl	8000b0c <__aeabi_dcmplt>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d03d      	beq.n	8001364 <isr_fall+0x354>
 80012e8:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f930 	bl	8000554 <__aeabi_i2d>
 80012f4:	a3c2      	add	r3, pc, #776	; (adr r3, 8001600 <isr_fall+0x5f0>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f995 	bl	8000628 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4614      	mov	r4, r2
 8001304:	461d      	mov	r5, r3
 8001306:	6838      	ldr	r0, [r7, #0]
 8001308:	f7ff f924 	bl	8000554 <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff fbfa 	bl	8000b0c <__aeabi_dcmplt>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d022      	beq.n	8001364 <isr_fall+0x354>
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f7ff f918 	bl	8000554 <__aeabi_i2d>
 8001324:	4604      	mov	r4, r0
 8001326:	460d      	mov	r5, r1
 8001328:	f240 13a9 	movw	r3, #425	; 0x1a9
 800132c:	009b      	lsls	r3, r3, #2
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f910 	bl	8000554 <__aeabi_i2d>
 8001334:	a3b4      	add	r3, pc, #720	; (adr r3, 8001608 <isr_fall+0x5f8>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f975 	bl	8000628 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7ff fbe1 	bl	8000b0c <__aeabi_dcmplt>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d009      	beq.n	8001364 <isr_fall+0x354>
                    data.format = AEHA;
 8001350:	4baf      	ldr	r3, [pc, #700]	; (8001610 <isr_fall+0x600>)
 8001352:	2203      	movs	r2, #3
 8001354:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001356:	4baf      	ldr	r3, [pc, #700]	; (8001614 <isr_fall+0x604>)
 8001358:	2201      	movs	r2, #1
 800135a:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800135c:	4bac      	ldr	r3, [pc, #688]	; (8001610 <isr_fall+0x600>)
 800135e:	2200      	movs	r2, #0
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	e088      	b.n	8001476 <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 8001364:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff f8f2 	bl	8000554 <__aeabi_i2d>
 8001370:	a3a3      	add	r3, pc, #652	; (adr r3, 8001600 <isr_fall+0x5f0>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff f957 	bl	8000628 <__aeabi_dmul>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	4614      	mov	r4, r2
 8001380:	461d      	mov	r5, r3
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff f8e6 	bl	8000554 <__aeabi_i2d>
 8001388:	4602      	mov	r2, r0
 800138a:	460b      	mov	r3, r1
 800138c:	4620      	mov	r0, r4
 800138e:	4629      	mov	r1, r5
 8001390:	f7ff fbbc 	bl	8000b0c <__aeabi_dcmplt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d06a      	beq.n	8001470 <isr_fall+0x460>
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff f8da 	bl	8000554 <__aeabi_i2d>
 80013a0:	4604      	mov	r4, r0
 80013a2:	460d      	mov	r5, r1
 80013a4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013a8:	00db      	lsls	r3, r3, #3
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f8d2 	bl	8000554 <__aeabi_i2d>
 80013b0:	a395      	add	r3, pc, #596	; (adr r3, 8001608 <isr_fall+0x5f8>)
 80013b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b6:	f7ff f937 	bl	8000628 <__aeabi_dmul>
 80013ba:	4602      	mov	r2, r0
 80013bc:	460b      	mov	r3, r1
 80013be:	4620      	mov	r0, r4
 80013c0:	4629      	mov	r1, r5
 80013c2:	f7ff fba3 	bl	8000b0c <__aeabi_dcmplt>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d051      	beq.n	8001470 <isr_fall+0x460>
 80013cc:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8be 	bl	8000554 <__aeabi_i2d>
 80013d8:	a389      	add	r3, pc, #548	; (adr r3, 8001600 <isr_fall+0x5f0>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f923 	bl	8000628 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4614      	mov	r4, r2
 80013e8:	461d      	mov	r5, r3
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7ff f8b2 	bl	8000554 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fb88 	bl	8000b0c <__aeabi_dcmplt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d036      	beq.n	8001470 <isr_fall+0x460>
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7ff f8a6 	bl	8000554 <__aeabi_i2d>
 8001408:	4604      	mov	r4, r0
 800140a:	460d      	mov	r5, r1
 800140c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f89e 	bl	8000554 <__aeabi_i2d>
 8001418:	a37b      	add	r3, pc, #492	; (adr r3, 8001608 <isr_fall+0x5f8>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f903 	bl	8000628 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4620      	mov	r0, r4
 8001428:	4629      	mov	r1, r5
 800142a:	f7ff fb6f 	bl	8000b0c <__aeabi_dcmplt>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01d      	beq.n	8001470 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 8001434:	4b76      	ldr	r3, [pc, #472]	; (8001610 <isr_fall+0x600>)
 8001436:	2204      	movs	r2, #4
 8001438:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 800143a:	4b76      	ldr	r3, [pc, #472]	; (8001614 <isr_fall+0x604>)
 800143c:	2202      	movs	r2, #2
 800143e:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001440:	4b73      	ldr	r3, [pc, #460]	; (8001610 <isr_fall+0x600>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001446:	4b73      	ldr	r3, [pc, #460]	; (8001614 <isr_fall+0x604>)
 8001448:	f04f 32ff 	mov.w	r2, #4294967295
 800144c:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 800144e:	4b71      	ldr	r3, [pc, #452]	; (8001614 <isr_fall+0x604>)
 8001450:	f04f 32ff 	mov.w	r2, #4294967295
 8001454:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001456:	4b6f      	ldr	r3, [pc, #444]	; (8001614 <isr_fall+0x604>)
 8001458:	f04f 32ff 	mov.w	r2, #4294967295
 800145c:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 800145e:	4b6d      	ldr	r3, [pc, #436]	; (8001614 <isr_fall+0x604>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001466:	4b6b      	ldr	r3, [pc, #428]	; (8001614 <isr_fall+0x604>)
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	615a      	str	r2, [r3, #20]
 800146e:	e002      	b.n	8001476 <isr_fall+0x466>
                    init_state();
 8001470:	f7ff fd88 	bl	8000f84 <init_state>
            break;
 8001474:	e1a4      	b.n	80017c0 <isr_fall+0x7b0>
 8001476:	e1a3      	b.n	80017c0 <isr_fall+0x7b0>
            if (NEC == data.format) {
 8001478:	4b65      	ldr	r3, [pc, #404]	; (8001610 <isr_fall+0x600>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	f040 80cf 	bne.w	8001620 <isr_fall+0x610>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 8001482:	4b65      	ldr	r3, [pc, #404]	; (8001618 <isr_fall+0x608>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	4b62      	ldr	r3, [pc, #392]	; (8001614 <isr_fall+0x604>)
 800148a:	615a      	str	r2, [r3, #20]
                int a = work.d2 - work.d1;
 800148c:	4b61      	ldr	r3, [pc, #388]	; (8001614 <isr_fall+0x604>)
 800148e:	695a      	ldr	r2, [r3, #20]
 8001490:	4b60      	ldr	r3, [pc, #384]	; (8001614 <isr_fall+0x604>)
 8001492:	691b      	ldr	r3, [r3, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 8001498:	f240 2232 	movw	r2, #562	; 0x232
 800149c:	4613      	mov	r3, r2
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	4413      	add	r3, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f856 	bl	8000554 <__aeabi_i2d>
 80014a8:	a355      	add	r3, pc, #340	; (adr r3, 8001600 <isr_fall+0x5f0>)
 80014aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ae:	f7ff f8bb 	bl	8000628 <__aeabi_dmul>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4614      	mov	r4, r2
 80014b8:	461d      	mov	r5, r3
 80014ba:	68b8      	ldr	r0, [r7, #8]
 80014bc:	f7ff f84a 	bl	8000554 <__aeabi_i2d>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4620      	mov	r0, r4
 80014c6:	4629      	mov	r1, r5
 80014c8:	f7ff fb20 	bl	8000b0c <__aeabi_dcmplt>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d03a      	beq.n	8001548 <isr_fall+0x538>
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff f83e 	bl	8000554 <__aeabi_i2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
 80014dc:	f240 2232 	movw	r2, #562	; 0x232
 80014e0:	4613      	mov	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	4413      	add	r3, r2
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff f834 	bl	8000554 <__aeabi_i2d>
 80014ec:	a346      	add	r3, pc, #280	; (adr r3, 8001608 <isr_fall+0x5f8>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7ff f899 	bl	8000628 <__aeabi_dmul>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4620      	mov	r0, r4
 80014fc:	4629      	mov	r1, r5
 80014fe:	f7ff fb05 	bl	8000b0c <__aeabi_dcmplt>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d01f      	beq.n	8001548 <isr_fall+0x538>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001508:	4b41      	ldr	r3, [pc, #260]	; (8001610 <isr_fall+0x600>)
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	da00      	bge.n	8001512 <isr_fall+0x502>
 8001510:	3307      	adds	r3, #7
 8001512:	10db      	asrs	r3, r3, #3
 8001514:	461a      	mov	r2, r3
 8001516:	4b3e      	ldr	r3, [pc, #248]	; (8001610 <isr_fall+0x600>)
 8001518:	4413      	add	r3, r2
 800151a:	7a1b      	ldrb	r3, [r3, #8]
 800151c:	b259      	sxtb	r1, r3
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <isr_fall+0x600>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	4258      	negs	r0, r3
 8001524:	f003 0307 	and.w	r3, r3, #7
 8001528:	f000 0007 	and.w	r0, r0, #7
 800152c:	bf58      	it	pl
 800152e:	4243      	negpl	r3, r0
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f303 	lsl.w	r3, r0, r3
 8001536:	b25b      	sxtb	r3, r3
 8001538:	430b      	orrs	r3, r1
 800153a:	b25b      	sxtb	r3, r3
 800153c:	b2d9      	uxtb	r1, r3
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <isr_fall+0x600>)
 8001540:	4413      	add	r3, r2
 8001542:	460a      	mov	r2, r1
 8001544:	721a      	strb	r2, [r3, #8]
 8001546:	e052      	b.n	80015ee <isr_fall+0x5de>
                } else if (InRange(a, TUS_NEC * 1)) {
 8001548:	f240 2332 	movw	r3, #562	; 0x232
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f801 	bl	8000554 <__aeabi_i2d>
 8001552:	a32b      	add	r3, pc, #172	; (adr r3, 8001600 <isr_fall+0x5f0>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f866 	bl	8000628 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4614      	mov	r4, r2
 8001562:	461d      	mov	r5, r3
 8001564:	68b8      	ldr	r0, [r7, #8]
 8001566:	f7fe fff5 	bl	8000554 <__aeabi_i2d>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4620      	mov	r0, r4
 8001570:	4629      	mov	r1, r5
 8001572:	f7ff facb 	bl	8000b0c <__aeabi_dcmplt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d038      	beq.n	80015ee <isr_fall+0x5de>
 800157c:	68b8      	ldr	r0, [r7, #8]
 800157e:	f7fe ffe9 	bl	8000554 <__aeabi_i2d>
 8001582:	4604      	mov	r4, r0
 8001584:	460d      	mov	r5, r1
 8001586:	f240 2332 	movw	r3, #562	; 0x232
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe ffe2 	bl	8000554 <__aeabi_i2d>
 8001590:	a31d      	add	r3, pc, #116	; (adr r3, 8001608 <isr_fall+0x5f8>)
 8001592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001596:	f7ff f847 	bl	8000628 <__aeabi_dmul>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4620      	mov	r0, r4
 80015a0:	4629      	mov	r1, r5
 80015a2:	f7ff fab3 	bl	8000b0c <__aeabi_dcmplt>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d020      	beq.n	80015ee <isr_fall+0x5de>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <isr_fall+0x600>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	da00      	bge.n	80015b6 <isr_fall+0x5a6>
 80015b4:	3307      	adds	r3, #7
 80015b6:	10db      	asrs	r3, r3, #3
 80015b8:	461a      	mov	r2, r3
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <isr_fall+0x600>)
 80015bc:	4413      	add	r3, r2
 80015be:	7a1b      	ldrb	r3, [r3, #8]
 80015c0:	b259      	sxtb	r1, r3
 80015c2:	4b13      	ldr	r3, [pc, #76]	; (8001610 <isr_fall+0x600>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4258      	negs	r0, r3
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	f000 0007 	and.w	r0, r0, #7
 80015d0:	bf58      	it	pl
 80015d2:	4243      	negpl	r3, r0
 80015d4:	2001      	movs	r0, #1
 80015d6:	fa00 f303 	lsl.w	r3, r0, r3
 80015da:	b25b      	sxtb	r3, r3
 80015dc:	43db      	mvns	r3, r3
 80015de:	b25b      	sxtb	r3, r3
 80015e0:	400b      	ands	r3, r1
 80015e2:	b25b      	sxtb	r3, r3
 80015e4:	b2d9      	uxtb	r1, r3
 80015e6:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <isr_fall+0x600>)
 80015e8:	4413      	add	r3, r2
 80015ea:	460a      	mov	r2, r1
 80015ec:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80015ee:	4b08      	ldr	r3, [pc, #32]	; (8001610 <isr_fall+0x600>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	3301      	adds	r3, #1
 80015f4:	4a06      	ldr	r2, [pc, #24]	; (8001610 <isr_fall+0x600>)
 80015f6:	6053      	str	r3, [r2, #4]
                isr_timeout_flag = 1;
 80015f8:	4b08      	ldr	r3, [pc, #32]	; (800161c <isr_fall+0x60c>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
            break;
 80015fe:	e0de      	b.n	80017be <isr_fall+0x7ae>
 8001600:	66666666 	.word	0x66666666
 8001604:	3fe66666 	.word	0x3fe66666
 8001608:	cccccccd 	.word	0xcccccccd
 800160c:	3ff4cccc 	.word	0x3ff4cccc
 8001610:	20000094 	.word	0x20000094
 8001614:	200000dc 	.word	0x200000dc
 8001618:	2000010c 	.word	0x2000010c
 800161c:	20000111 	.word	0x20000111
            } else if (AEHA == data.format) {
 8001620:	4b6d      	ldr	r3, [pc, #436]	; (80017d8 <isr_fall+0x7c8>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b03      	cmp	r3, #3
 8001626:	f040 80bc 	bne.w	80017a2 <isr_fall+0x792>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800162a:	4b6c      	ldr	r3, [pc, #432]	; (80017dc <isr_fall+0x7cc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	461a      	mov	r2, r3
 8001630:	4b6b      	ldr	r3, [pc, #428]	; (80017e0 <isr_fall+0x7d0>)
 8001632:	615a      	str	r2, [r3, #20]
                int a = work.d2 - work.d1;
 8001634:	4b6a      	ldr	r3, [pc, #424]	; (80017e0 <isr_fall+0x7d0>)
 8001636:	695a      	ldr	r2, [r3, #20]
 8001638:	4b69      	ldr	r3, [pc, #420]	; (80017e0 <isr_fall+0x7d0>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 8001640:	f240 12a9 	movw	r2, #425	; 0x1a9
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff82 	bl	8000554 <__aeabi_i2d>
 8001650:	a35d      	add	r3, pc, #372	; (adr r3, 80017c8 <isr_fall+0x7b8>)
 8001652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001656:	f7fe ffe7 	bl	8000628 <__aeabi_dmul>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4614      	mov	r4, r2
 8001660:	461d      	mov	r5, r3
 8001662:	68f8      	ldr	r0, [r7, #12]
 8001664:	f7fe ff76 	bl	8000554 <__aeabi_i2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	4620      	mov	r0, r4
 800166e:	4629      	mov	r1, r5
 8001670:	f7ff fa4c 	bl	8000b0c <__aeabi_dcmplt>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d03a      	beq.n	80016f0 <isr_fall+0x6e0>
 800167a:	68f8      	ldr	r0, [r7, #12]
 800167c:	f7fe ff6a 	bl	8000554 <__aeabi_i2d>
 8001680:	4604      	mov	r4, r0
 8001682:	460d      	mov	r5, r1
 8001684:	f240 12a9 	movw	r2, #425	; 0x1a9
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff60 	bl	8000554 <__aeabi_i2d>
 8001694:	a34e      	add	r3, pc, #312	; (adr r3, 80017d0 <isr_fall+0x7c0>)
 8001696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169a:	f7fe ffc5 	bl	8000628 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7ff fa31 	bl	8000b0c <__aeabi_dcmplt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d01f      	beq.n	80016f0 <isr_fall+0x6e0>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80016b0:	4b49      	ldr	r3, [pc, #292]	; (80017d8 <isr_fall+0x7c8>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	da00      	bge.n	80016ba <isr_fall+0x6aa>
 80016b8:	3307      	adds	r3, #7
 80016ba:	10db      	asrs	r3, r3, #3
 80016bc:	461a      	mov	r2, r3
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <isr_fall+0x7c8>)
 80016c0:	4413      	add	r3, r2
 80016c2:	7a1b      	ldrb	r3, [r3, #8]
 80016c4:	b259      	sxtb	r1, r3
 80016c6:	4b44      	ldr	r3, [pc, #272]	; (80017d8 <isr_fall+0x7c8>)
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	4258      	negs	r0, r3
 80016cc:	f003 0307 	and.w	r3, r3, #7
 80016d0:	f000 0007 	and.w	r0, r0, #7
 80016d4:	bf58      	it	pl
 80016d6:	4243      	negpl	r3, r0
 80016d8:	2001      	movs	r0, #1
 80016da:	fa00 f303 	lsl.w	r3, r0, r3
 80016de:	b25b      	sxtb	r3, r3
 80016e0:	430b      	orrs	r3, r1
 80016e2:	b25b      	sxtb	r3, r3
 80016e4:	b2d9      	uxtb	r1, r3
 80016e6:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <isr_fall+0x7c8>)
 80016e8:	4413      	add	r3, r2
 80016ea:	460a      	mov	r2, r1
 80016ec:	721a      	strb	r2, [r3, #8]
 80016ee:	e052      	b.n	8001796 <isr_fall+0x786>
                } else if (InRange(a, TUS_AEHA * 1)) {
 80016f0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7fe ff2d 	bl	8000554 <__aeabi_i2d>
 80016fa:	a333      	add	r3, pc, #204	; (adr r3, 80017c8 <isr_fall+0x7b8>)
 80016fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001700:	f7fe ff92 	bl	8000628 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4614      	mov	r4, r2
 800170a:	461d      	mov	r5, r3
 800170c:	68f8      	ldr	r0, [r7, #12]
 800170e:	f7fe ff21 	bl	8000554 <__aeabi_i2d>
 8001712:	4602      	mov	r2, r0
 8001714:	460b      	mov	r3, r1
 8001716:	4620      	mov	r0, r4
 8001718:	4629      	mov	r1, r5
 800171a:	f7ff f9f7 	bl	8000b0c <__aeabi_dcmplt>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d038      	beq.n	8001796 <isr_fall+0x786>
 8001724:	68f8      	ldr	r0, [r7, #12]
 8001726:	f7fe ff15 	bl	8000554 <__aeabi_i2d>
 800172a:	4604      	mov	r4, r0
 800172c:	460d      	mov	r5, r1
 800172e:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001732:	4618      	mov	r0, r3
 8001734:	f7fe ff0e 	bl	8000554 <__aeabi_i2d>
 8001738:	a325      	add	r3, pc, #148	; (adr r3, 80017d0 <isr_fall+0x7c0>)
 800173a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800173e:	f7fe ff73 	bl	8000628 <__aeabi_dmul>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4620      	mov	r0, r4
 8001748:	4629      	mov	r1, r5
 800174a:	f7ff f9df 	bl	8000b0c <__aeabi_dcmplt>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d020      	beq.n	8001796 <isr_fall+0x786>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001754:	4b20      	ldr	r3, [pc, #128]	; (80017d8 <isr_fall+0x7c8>)
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b00      	cmp	r3, #0
 800175a:	da00      	bge.n	800175e <isr_fall+0x74e>
 800175c:	3307      	adds	r3, #7
 800175e:	10db      	asrs	r3, r3, #3
 8001760:	461a      	mov	r2, r3
 8001762:	4b1d      	ldr	r3, [pc, #116]	; (80017d8 <isr_fall+0x7c8>)
 8001764:	4413      	add	r3, r2
 8001766:	7a1b      	ldrb	r3, [r3, #8]
 8001768:	b259      	sxtb	r1, r3
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <isr_fall+0x7c8>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	4258      	negs	r0, r3
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	f000 0007 	and.w	r0, r0, #7
 8001778:	bf58      	it	pl
 800177a:	4243      	negpl	r3, r0
 800177c:	2001      	movs	r0, #1
 800177e:	fa00 f303 	lsl.w	r3, r0, r3
 8001782:	b25b      	sxtb	r3, r3
 8001784:	43db      	mvns	r3, r3
 8001786:	b25b      	sxtb	r3, r3
 8001788:	400b      	ands	r3, r1
 800178a:	b25b      	sxtb	r3, r3
 800178c:	b2d9      	uxtb	r1, r3
 800178e:	4b12      	ldr	r3, [pc, #72]	; (80017d8 <isr_fall+0x7c8>)
 8001790:	4413      	add	r3, r2
 8001792:	460a      	mov	r2, r1
 8001794:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <isr_fall+0x7c8>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	3301      	adds	r3, #1
 800179c:	4a0e      	ldr	r2, [pc, #56]	; (80017d8 <isr_fall+0x7c8>)
 800179e:	6053      	str	r3, [r2, #4]
            break;
 80017a0:	e00d      	b.n	80017be <isr_fall+0x7ae>
            } else if (SONY == data.format) {
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <isr_fall+0x7c8>)
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	2b05      	cmp	r3, #5
 80017a8:	d109      	bne.n	80017be <isr_fall+0x7ae>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80017aa:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <isr_fall+0x7cc>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <isr_fall+0x7d0>)
 80017b2:	611a      	str	r2, [r3, #16]
            break;
 80017b4:	e003      	b.n	80017be <isr_fall+0x7ae>
            break;
 80017b6:	bf00      	nop
 80017b8:	e002      	b.n	80017c0 <isr_fall+0x7b0>
            break;
 80017ba:	bf00      	nop
 80017bc:	e000      	b.n	80017c0 <isr_fall+0x7b0>
            break;
 80017be:	bf00      	nop
    }
    UNLOCK();
}
 80017c0:	bf00      	nop
 80017c2:	3710      	adds	r7, #16
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bdb0      	pop	{r4, r5, r7, pc}
 80017c8:	66666666 	.word	0x66666666
 80017cc:	3fe66666 	.word	0x3fe66666
 80017d0:	cccccccd 	.word	0xcccccccd
 80017d4:	3ff4cccc 	.word	0x3ff4cccc
 80017d8:	20000094 	.word	0x20000094
 80017dc:	2000010c 	.word	0x2000010c
 80017e0:	200000dc 	.word	0x200000dc
 80017e4:	00000000 	.word	0x00000000

080017e8 <isr_rise>:

void isr_rise(void) {
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b082      	sub	sp, #8
 80017ec:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 80017ee:	4ba6      	ldr	r3, [pc, #664]	; (8001a88 <isr_rise+0x2a0>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	f000 8132 	beq.w	8001a5c <isr_rise+0x274>
 80017f8:	2b02      	cmp	r3, #2
 80017fa:	f300 8131 	bgt.w	8001a60 <isr_rise+0x278>
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d002      	beq.n	8001808 <isr_rise+0x20>
 8001802:	2b01      	cmp	r3, #1
 8001804:	d059      	beq.n	80018ba <isr_rise+0xd2>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001806:	e12b      	b.n	8001a60 <isr_rise+0x278>
            if (0 <= work.c1) {
 8001808:	4b9f      	ldr	r3, [pc, #636]	; (8001a88 <isr_rise+0x2a0>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db51      	blt.n	80018b4 <isr_rise+0xcc>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001810:	4b9e      	ldr	r3, [pc, #632]	; (8001a8c <isr_rise+0x2a4>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	4b9c      	ldr	r3, [pc, #624]	; (8001a88 <isr_rise+0x2a0>)
 8001818:	609a      	str	r2, [r3, #8]
                int a = work.c2 - work.c1;
 800181a:	4b9b      	ldr	r3, [pc, #620]	; (8001a88 <isr_rise+0x2a0>)
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	4b9a      	ldr	r3, [pc, #616]	; (8001a88 <isr_rise+0x2a0>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 8001826:	f44f 7316 	mov.w	r3, #600	; 0x258
 800182a:	009b      	lsls	r3, r3, #2
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fe91 	bl	8000554 <__aeabi_i2d>
 8001832:	a391      	add	r3, pc, #580	; (adr r3, 8001a78 <isr_rise+0x290>)
 8001834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001838:	f7fe fef6 	bl	8000628 <__aeabi_dmul>
 800183c:	4602      	mov	r2, r0
 800183e:	460b      	mov	r3, r1
 8001840:	4614      	mov	r4, r2
 8001842:	461d      	mov	r5, r3
 8001844:	6838      	ldr	r0, [r7, #0]
 8001846:	f7fe fe85 	bl	8000554 <__aeabi_i2d>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4620      	mov	r0, r4
 8001850:	4629      	mov	r1, r5
 8001852:	f7ff f95b 	bl	8000b0c <__aeabi_dcmplt>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d022      	beq.n	80018a2 <isr_rise+0xba>
 800185c:	6838      	ldr	r0, [r7, #0]
 800185e:	f7fe fe79 	bl	8000554 <__aeabi_i2d>
 8001862:	4604      	mov	r4, r0
 8001864:	460d      	mov	r5, r1
 8001866:	f44f 7316 	mov.w	r3, #600	; 0x258
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	4618      	mov	r0, r3
 800186e:	f7fe fe71 	bl	8000554 <__aeabi_i2d>
 8001872:	a383      	add	r3, pc, #524	; (adr r3, 8001a80 <isr_rise+0x298>)
 8001874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001878:	f7fe fed6 	bl	8000628 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7ff f942 	bl	8000b0c <__aeabi_dcmplt>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d009      	beq.n	80018a2 <isr_rise+0xba>
                    data.format = SONY;
 800188e:	4b80      	ldr	r3, [pc, #512]	; (8001a90 <isr_rise+0x2a8>)
 8001890:	2205      	movs	r2, #5
 8001892:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001894:	4b7c      	ldr	r3, [pc, #496]	; (8001a88 <isr_rise+0x2a0>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800189a:	4b7d      	ldr	r3, [pc, #500]	; (8001a90 <isr_rise+0x2a8>)
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
            break;
 80018a0:	e0e0      	b.n	8001a64 <isr_rise+0x27c>
                    if (a < MINIMUM_LEADER_WIDTH) {
 80018a2:	4b7c      	ldr	r3, [pc, #496]	; (8001a94 <isr_rise+0x2ac>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	f280 80db 	bge.w	8001a64 <isr_rise+0x27c>
                        init_state();
 80018ae:	f7ff fb69 	bl	8000f84 <init_state>
            break;
 80018b2:	e0d7      	b.n	8001a64 <isr_rise+0x27c>
                init_state();
 80018b4:	f7ff fb66 	bl	8000f84 <init_state>
            break;
 80018b8:	e0d4      	b.n	8001a64 <isr_rise+0x27c>
            if (NEC == data.format) {
 80018ba:	4b75      	ldr	r3, [pc, #468]	; (8001a90 <isr_rise+0x2a8>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d105      	bne.n	80018ce <isr_rise+0xe6>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80018c2:	4b72      	ldr	r3, [pc, #456]	; (8001a8c <isr_rise+0x2a4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	461a      	mov	r2, r3
 80018c8:	4b6f      	ldr	r3, [pc, #444]	; (8001a88 <isr_rise+0x2a0>)
 80018ca:	611a      	str	r2, [r3, #16]
            break;
 80018cc:	e0cc      	b.n	8001a68 <isr_rise+0x280>
            } else if (AEHA == data.format) {
 80018ce:	4b70      	ldr	r3, [pc, #448]	; (8001a90 <isr_rise+0x2a8>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b03      	cmp	r3, #3
 80018d4:	d105      	bne.n	80018e2 <isr_rise+0xfa>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80018d6:	4b6d      	ldr	r3, [pc, #436]	; (8001a8c <isr_rise+0x2a4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	461a      	mov	r2, r3
 80018dc:	4b6a      	ldr	r3, [pc, #424]	; (8001a88 <isr_rise+0x2a0>)
 80018de:	611a      	str	r2, [r3, #16]
            break;
 80018e0:	e0c2      	b.n	8001a68 <isr_rise+0x280>
            } else if (SONY == data.format) {
 80018e2:	4b6b      	ldr	r3, [pc, #428]	; (8001a90 <isr_rise+0x2a8>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b05      	cmp	r3, #5
 80018e8:	f040 80be 	bne.w	8001a68 <isr_rise+0x280>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80018ec:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <isr_rise+0x2a4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b65      	ldr	r3, [pc, #404]	; (8001a88 <isr_rise+0x2a0>)
 80018f4:	615a      	str	r2, [r3, #20]
                int a = work.d2 - work.d1;
 80018f6:	4b64      	ldr	r3, [pc, #400]	; (8001a88 <isr_rise+0x2a0>)
 80018f8:	695a      	ldr	r2, [r3, #20]
 80018fa:	4b63      	ldr	r3, [pc, #396]	; (8001a88 <isr_rise+0x2a0>)
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 8001902:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe23 	bl	8000554 <__aeabi_i2d>
 800190e:	a35a      	add	r3, pc, #360	; (adr r3, 8001a78 <isr_rise+0x290>)
 8001910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001914:	f7fe fe88 	bl	8000628 <__aeabi_dmul>
 8001918:	4602      	mov	r2, r0
 800191a:	460b      	mov	r3, r1
 800191c:	4614      	mov	r4, r2
 800191e:	461d      	mov	r5, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7fe fe17 	bl	8000554 <__aeabi_i2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4620      	mov	r0, r4
 800192c:	4629      	mov	r1, r5
 800192e:	f7ff f8ed 	bl	8000b0c <__aeabi_dcmplt>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d038      	beq.n	80019aa <isr_rise+0x1c2>
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fe0b 	bl	8000554 <__aeabi_i2d>
 800193e:	4604      	mov	r4, r0
 8001940:	460d      	mov	r5, r1
 8001942:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe03 	bl	8000554 <__aeabi_i2d>
 800194e:	a34c      	add	r3, pc, #304	; (adr r3, 8001a80 <isr_rise+0x298>)
 8001950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001954:	f7fe fe68 	bl	8000628 <__aeabi_dmul>
 8001958:	4602      	mov	r2, r0
 800195a:	460b      	mov	r3, r1
 800195c:	4620      	mov	r0, r4
 800195e:	4629      	mov	r1, r5
 8001960:	f7ff f8d4 	bl	8000b0c <__aeabi_dcmplt>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01f      	beq.n	80019aa <isr_rise+0x1c2>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800196a:	4b49      	ldr	r3, [pc, #292]	; (8001a90 <isr_rise+0x2a8>)
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	da00      	bge.n	8001974 <isr_rise+0x18c>
 8001972:	3307      	adds	r3, #7
 8001974:	10db      	asrs	r3, r3, #3
 8001976:	461a      	mov	r2, r3
 8001978:	4b45      	ldr	r3, [pc, #276]	; (8001a90 <isr_rise+0x2a8>)
 800197a:	4413      	add	r3, r2
 800197c:	7a1b      	ldrb	r3, [r3, #8]
 800197e:	b259      	sxtb	r1, r3
 8001980:	4b43      	ldr	r3, [pc, #268]	; (8001a90 <isr_rise+0x2a8>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4258      	negs	r0, r3
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	f000 0007 	and.w	r0, r0, #7
 800198e:	bf58      	it	pl
 8001990:	4243      	negpl	r3, r0
 8001992:	2001      	movs	r0, #1
 8001994:	fa00 f303 	lsl.w	r3, r0, r3
 8001998:	b25b      	sxtb	r3, r3
 800199a:	430b      	orrs	r3, r1
 800199c:	b25b      	sxtb	r3, r3
 800199e:	b2d9      	uxtb	r1, r3
 80019a0:	4b3b      	ldr	r3, [pc, #236]	; (8001a90 <isr_rise+0x2a8>)
 80019a2:	4413      	add	r3, r2
 80019a4:	460a      	mov	r2, r1
 80019a6:	721a      	strb	r2, [r3, #8]
 80019a8:	e052      	b.n	8001a50 <isr_rise+0x268>
                } else if (InRange(a, TUS_SONY * 1)) {
 80019aa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fdd0 	bl	8000554 <__aeabi_i2d>
 80019b4:	a330      	add	r3, pc, #192	; (adr r3, 8001a78 <isr_rise+0x290>)
 80019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ba:	f7fe fe35 	bl	8000628 <__aeabi_dmul>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4614      	mov	r4, r2
 80019c4:	461d      	mov	r5, r3
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe fdc4 	bl	8000554 <__aeabi_i2d>
 80019cc:	4602      	mov	r2, r0
 80019ce:	460b      	mov	r3, r1
 80019d0:	4620      	mov	r0, r4
 80019d2:	4629      	mov	r1, r5
 80019d4:	f7ff f89a 	bl	8000b0c <__aeabi_dcmplt>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d038      	beq.n	8001a50 <isr_rise+0x268>
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4604      	mov	r4, r0
 80019e6:	460d      	mov	r5, r1
 80019e8:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019ec:	4618      	mov	r0, r3
 80019ee:	f7fe fdb1 	bl	8000554 <__aeabi_i2d>
 80019f2:	a323      	add	r3, pc, #140	; (adr r3, 8001a80 <isr_rise+0x298>)
 80019f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019f8:	f7fe fe16 	bl	8000628 <__aeabi_dmul>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7ff f882 	bl	8000b0c <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d020      	beq.n	8001a50 <isr_rise+0x268>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001a0e:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <isr_rise+0x2a8>)
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	da00      	bge.n	8001a18 <isr_rise+0x230>
 8001a16:	3307      	adds	r3, #7
 8001a18:	10db      	asrs	r3, r3, #3
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <isr_rise+0x2a8>)
 8001a1e:	4413      	add	r3, r2
 8001a20:	7a1b      	ldrb	r3, [r3, #8]
 8001a22:	b259      	sxtb	r1, r3
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <isr_rise+0x2a8>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	4258      	negs	r0, r3
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	f000 0007 	and.w	r0, r0, #7
 8001a32:	bf58      	it	pl
 8001a34:	4243      	negpl	r3, r0
 8001a36:	2001      	movs	r0, #1
 8001a38:	fa00 f303 	lsl.w	r3, r0, r3
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	400b      	ands	r3, r1
 8001a44:	b25b      	sxtb	r3, r3
 8001a46:	b2d9      	uxtb	r1, r3
 8001a48:	4b11      	ldr	r3, [pc, #68]	; (8001a90 <isr_rise+0x2a8>)
 8001a4a:	4413      	add	r3, r2
 8001a4c:	460a      	mov	r2, r1
 8001a4e:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001a50:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <isr_rise+0x2a8>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	3301      	adds	r3, #1
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <isr_rise+0x2a8>)
 8001a58:	6053      	str	r3, [r2, #4]
            break;
 8001a5a:	e005      	b.n	8001a68 <isr_rise+0x280>
            break;
 8001a5c:	bf00      	nop
 8001a5e:	e004      	b.n	8001a6a <isr_rise+0x282>
            break;
 8001a60:	bf00      	nop
 8001a62:	e002      	b.n	8001a6a <isr_rise+0x282>
            break;
 8001a64:	bf00      	nop
 8001a66:	e000      	b.n	8001a6a <isr_rise+0x282>
            break;
 8001a68:	bf00      	nop
    }
    UNLOCK();
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bdb0      	pop	{r4, r5, r7, pc}
 8001a72:	bf00      	nop
 8001a74:	f3af 8000 	nop.w
 8001a78:	66666666 	.word	0x66666666
 8001a7c:	3fe66666 	.word	0x3fe66666
 8001a80:	cccccccd 	.word	0xcccccccd
 8001a84:	3ff4cccc 	.word	0x3ff4cccc
 8001a88:	200000dc 	.word	0x200000dc
 8001a8c:	2000010c 	.word	0x2000010c
 8001a90:	20000094 	.word	0x20000094
 8001a94:	0800a934 	.word	0x0800a934

08001a98 <isr_timeout>:

void isr_timeout(void) {
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <isr_timeout+0x44>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d116      	bne.n	8001ad2 <isr_timeout+0x3a>
        work.state = Received;
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <isr_timeout+0x44>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001aaa:	4b0c      	ldr	r3, [pc, #48]	; (8001adc <isr_timeout+0x44>)
 8001aac:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab0:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <isr_timeout+0x44>)
 8001ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab8:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <isr_timeout+0x44>)
 8001abc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac0:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001ac2:	4b06      	ldr	r3, [pc, #24]	; (8001adc <isr_timeout+0x44>)
 8001ac4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ac8:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001aca:	4b04      	ldr	r3, [pc, #16]	; (8001adc <isr_timeout+0x44>)
 8001acc:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad0:	615a      	str	r2, [r3, #20]
    }
    UNLOCK();
}
 8001ad2:	bf00      	nop
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	200000dc 	.word	0x200000dc

08001ae0 <HAL_TIM_PeriodElapsedCallback>:

uint8_t recv_buf[32] = {0,};


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a33      	ldr	r2, [pc, #204]	; (8001bbc <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d10c      	bne.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  us_Tick++;
 8001af2:	4b33      	ldr	r3, [pc, #204]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	3301      	adds	r3, #1
 8001af8:	4a31      	ldr	r2, [pc, #196]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001afa:	6013      	str	r3, [r2, #0]
	  if(us_Tick>0xffff0000){us_Tick=0;}
 8001afc:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b04:	d902      	bls.n	8001b0c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001b06:	4b2e      	ldr	r3, [pc, #184]	; (8001bc0 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM6)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a2c      	ldr	r2, [pc, #176]	; (8001bc4 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d116      	bne.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x64>
  {
	  gTick++;
 8001b16:	4b2c      	ldr	r3, [pc, #176]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	4a2a      	ldr	r2, [pc, #168]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b1e:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001b20:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b22:	6819      	ldr	r1, [r3, #0]
 8001b24:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b26:	fba3 2301 	umull	r2, r3, r3, r1
 8001b2a:	08da      	lsrs	r2, r3, #3
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	1aca      	subs	r2, r1, r3
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d104      	bne.n	8001b44 <HAL_TIM_PeriodElapsedCallback+0x64>
 8001b3a:	4b25      	ldr	r3, [pc, #148]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	4a23      	ldr	r2, [pc, #140]	; (8001bd0 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b42:	6013      	str	r3, [r2, #0]
  }

  if(htim->Instance == TIM7)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d10c      	bne.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>
  {
	  USS_tick++;
 8001b4e:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	3301      	adds	r3, #1
 8001b54:	4a20      	ldr	r2, [pc, #128]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b56:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8001b58:	4b1f      	ldr	r3, [pc, #124]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b60:	d902      	bls.n	8001b68 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001b62:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1b      	ldr	r2, [pc, #108]	; (8001bdc <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d115      	bne.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0xbe>
  {
	  if(TIR_setData_flag)tick();
 8001b72:	4b1b      	ldr	r3, [pc, #108]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001b7a:	f000 ff25 	bl	80029c8 <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 8001b7e:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d005      	beq.n	8001b92 <HAL_TIM_PeriodElapsedCallback+0xb2>
 8001b86:	4b18      	ldr	r3, [pc, #96]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b90:	701a      	strb	r2, [r3, #0]
	  if(isr_timeout_counter>5){isr_timeout();}
 8001b92:	4b15      	ldr	r3, [pc, #84]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b05      	cmp	r3, #5
 8001b98:	d901      	bls.n	8001b9e <HAL_TIM_PeriodElapsedCallback+0xbe>
 8001b9a:	f7ff ff7d 	bl	8001a98 <isr_timeout>
  }

  if(htim->Instance == TIM14)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d104      	bne.n	8001bb2 <HAL_TIM_PeriodElapsedCallback+0xd2>
  {
	  IR_NEC_Tick++;
 8001ba8:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	3301      	adds	r3, #1
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001bb0:	6013      	str	r3, [r2, #0]
  }
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40000c00 	.word	0x40000c00
 8001bc0:	200000f4 	.word	0x200000f4
 8001bc4:	40001000 	.word	0x40001000
 8001bc8:	200000f8 	.word	0x200000f8
 8001bcc:	cccccccd 	.word	0xcccccccd
 8001bd0:	20000100 	.word	0x20000100
 8001bd4:	40001400 	.word	0x40001400
 8001bd8:	20000130 	.word	0x20000130
 8001bdc:	40014000 	.word	0x40014000
 8001be0:	20000108 	.word	0x20000108
 8001be4:	20000111 	.word	0x20000111
 8001be8:	20000110 	.word	0x20000110
 8001bec:	40002000 	.word	0x40002000
 8001bf0:	2000010c 	.word	0x2000010c

08001bf4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001bfe:	88fb      	ldrh	r3, [r7, #6]
 8001c00:	2b40      	cmp	r3, #64	; 0x40
 8001c02:	d103      	bne.n	8001c0c <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = us_Tick;
 8001c04:	4b0f      	ldr	r3, [pc, #60]	; (8001c44 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a0f      	ldr	r2, [pc, #60]	; (8001c48 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c0a:	6013      	str	r3, [r2, #0]
    }

//    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
//    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);

    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c12:	d113      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x48>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ //check pin state
 8001c14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c18:	480c      	ldr	r0, [pc, #48]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x58>)
 8001c1a:	f004 fa93 	bl	8006144 <HAL_GPIO_ReadPin>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_GPIO_EXTI_Callback+0x34>
                /* do something */ //high edge
            	//HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
            	//HAL_GPIO_WritePin(BLUEtest_GPIO_Port, BLUEtest_Pin, SET);
            	isr_rise();
 8001c24:	f7ff fde0 	bl	80017e8 <isr_rise>
            }

            if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){
 8001c28:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c2c:	4807      	ldr	r0, [pc, #28]	; (8001c4c <HAL_GPIO_EXTI_Callback+0x58>)
 8001c2e:	f004 fa89 	bl	8006144 <HAL_GPIO_ReadPin>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <HAL_GPIO_EXTI_Callback+0x48>
                /* do something */ //low edge
            	//HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
            	//HAL_GPIO_WritePin(BLUEtest_GPIO_Port, BLUEtest_Pin, RESET);
            	isr_fall();
 8001c38:	f7ff f9ea 	bl	8001010 <isr_fall>
            }
        }
}
 8001c3c:	bf00      	nop
 8001c3e:	3708      	adds	r7, #8
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	200000f4 	.word	0x200000f4
 8001c48:	2000012c 	.word	0x2000012c
 8001c4c:	40021000 	.word	0x40021000

08001c50 <startTTS>:


void startTTS()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	1c5a      	adds	r2, r3, #1
 8001c5e:	60fa      	str	r2, [r7, #12]
 8001c60:	3310      	adds	r3, #16
 8001c62:	443b      	add	r3, r7
 8001c64:	2200      	movs	r2, #0
 8001c66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	1c5a      	adds	r2, r3, #1
 8001c6e:	60fa      	str	r2, [r7, #12]
 8001c70:	3310      	adds	r3, #16
 8001c72:	443b      	add	r3, r7
 8001c74:	2200      	movs	r2, #0
 8001c76:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	1c5a      	adds	r2, r3, #1
 8001c7e:	60fa      	str	r2, [r7, #12]
 8001c80:	3310      	adds	r3, #16
 8001c82:	443b      	add	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1c5a      	adds	r2, r3, #1
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	3310      	adds	r3, #16
 8001c92:	443b      	add	r3, r7
 8001c94:	2200      	movs	r2, #0
 8001c96:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	1c5a      	adds	r2, r3, #1
 8001c9e:	60fa      	str	r2, [r7, #12]
 8001ca0:	3310      	adds	r3, #16
 8001ca2:	443b      	add	r3, r7
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	1c5a      	adds	r2, r3, #1
 8001cae:	60fa      	str	r2, [r7, #12]
 8001cb0:	3310      	adds	r3, #16
 8001cb2:	443b      	add	r3, r7
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	1c5a      	adds	r2, r3, #1
 8001cbe:	60fa      	str	r2, [r7, #12]
 8001cc0:	3310      	adds	r3, #16
 8001cc2:	443b      	add	r3, r7
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	60fa      	str	r2, [r7, #12]
 8001cd0:	3310      	adds	r3, #16
 8001cd2:	443b      	add	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001cda:	1d39      	adds	r1, r7, #4
 8001cdc:	2301      	movs	r3, #1
 8001cde:	2208      	movs	r2, #8
 8001ce0:	f241 3089 	movw	r0, #5001	; 0x1389
 8001ce4:	f001 f924 	bl	8002f30 <sendCan>
}
 8001ce8:	bf00      	nop
 8001cea:	3710      	adds	r7, #16
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bd80      	pop	{r7, pc}

08001cf0 <parsePmm>:
//        can->reset();
    sendCan(5001, packit, 8, 1);
}

void parsePmm(uint8_t *msg)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3307      	adds	r3, #7
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <parsePmm+0x5c>)
 8001d02:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	3306      	adds	r3, #6
 8001d08:	781a      	ldrb	r2, [r3, #0]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <parsePmm+0x60>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	09d2      	lsrs	r2, r2, #7
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3306      	adds	r3, #6
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	119b      	asrs	r3, r3, #6
 8001d1c:	b2da      	uxtb	r2, r3
 8001d1e:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <parsePmm+0x60>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f002 0201 	and.w	r2, r2, #1
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3306      	adds	r3, #6
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	115b      	asrs	r3, r3, #5
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <parsePmm+0x60>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f002 0201 	and.w	r2, r2, #1
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	745a      	strb	r2, [r3, #17]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	2000014c 	.word	0x2000014c
 8001d50:	20000148 	.word	0x20000148

08001d54 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	e012      	b.n	8001d88 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	3307      	adds	r3, #7
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	fa42 f303 	asr.w	r3, r2, r3
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	b2d9      	uxtb	r1, r3
 8001d78:	4a0a      	ldr	r2, [pc, #40]	; (8001da4 <parseTop+0x50>)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	460a      	mov	r2, r1
 8001d80:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2b05      	cmp	r3, #5
 8001d8c:	dde9      	ble.n	8001d62 <parseTop+0xe>
    touch = msg[6];
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	799a      	ldrb	r2, [r3, #6]
 8001d92:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <parseTop+0x54>)
 8001d94:	701a      	strb	r2, [r3, #0]
}
 8001d96:	bf00      	nop
 8001d98:	3714      	adds	r7, #20
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	20000140 	.word	0x20000140
 8001da8:	2000013d 	.word	0x2000013d

08001dac <parseState>:


void parseState(uint8_t *msg)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3307      	adds	r3, #7
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	461a      	mov	r2, r3
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <parseState+0x78>)
 8001dbe:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3305      	adds	r3, #5
 8001dc4:	781b      	ldrb	r3, [r3, #0]
 8001dc6:	09db      	lsrs	r3, r3, #7
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <parseState+0x7c>)
 8001dcc:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	3305      	adds	r3, #5
 8001dd2:	781b      	ldrb	r3, [r3, #0]
 8001dd4:	119b      	asrs	r3, r3, #6
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <parseState+0x80>)
 8001de0:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3304      	adds	r3, #4
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	09db      	lsrs	r3, r3, #7
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b10      	ldr	r3, [pc, #64]	; (8001e30 <parseState+0x84>)
 8001dee:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	3304      	adds	r3, #4
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	119b      	asrs	r3, r3, #6
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	b2da      	uxtb	r2, r3
 8001e00:	4b0c      	ldr	r3, [pc, #48]	; (8001e34 <parseState+0x88>)
 8001e02:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3304      	adds	r3, #4
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	115b      	asrs	r3, r3, #5
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <parseState+0x8c>)
 8001e16:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001e18:	bf00      	nop
 8001e1a:	370c      	adds	r7, #12
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	20000134 	.word	0x20000134
 8001e28:	20000138 	.word	0x20000138
 8001e2c:	20000139 	.word	0x20000139
 8001e30:	2000013a 	.word	0x2000013a
 8001e34:	2000013b 	.word	0x2000013b
 8001e38:	2000013c 	.word	0x2000013c

08001e3c <controlMotor>:

void controlMotor()
{
 8001e3c:	b598      	push	{r3, r4, r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 8001e40:	4b35      	ldr	r3, [pc, #212]	; (8001f18 <controlMotor+0xdc>)
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d060      	beq.n	8001f0a <controlMotor+0xce>
    {
        if(motor_disable_flag)
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <controlMotor+0xe0>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d004      	beq.n	8001e5a <controlMotor+0x1e>
        {
            enable();
 8001e50:	f002 f896 	bl	8003f80 <enable>
            motor_disable_flag = 0;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <controlMotor+0xe0>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <controlMotor+0xe4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d11e      	bne.n	8001ea0 <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001e62:	4b30      	ldr	r3, [pc, #192]	; (8001f24 <controlMotor+0xe8>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	f7fe fe75 	bl	8000b5c <__aeabi_d2iz>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b21c      	sxth	r4, r3
 8001e76:	4b2b      	ldr	r3, [pc, #172]	; (8001f24 <controlMotor+0xe8>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e7e:	4610      	mov	r0, r2
 8001e80:	4619      	mov	r1, r3
 8001e82:	f7fe fe6b 	bl	8000b5c <__aeabi_d2iz>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b21b      	sxth	r3, r3
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4620      	mov	r0, r4
 8001e8e:	f002 fa17 	bl	80042c0 <control>
            motor_break = 2;
 8001e92:	4b23      	ldr	r3, [pc, #140]	; (8001f20 <controlMotor+0xe4>)
 8001e94:	2202      	movs	r2, #2
 8001e96:	601a      	str	r2, [r3, #0]
            count = 0;
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <controlMotor+0xec>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 8001e9e:	e039      	b.n	8001f14 <controlMotor+0xd8>
        else if(motor_break == 2)
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <controlMotor+0xe4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d124      	bne.n	8001ef2 <controlMotor+0xb6>
            count ++;
 8001ea8:	4b1f      	ldr	r3, [pc, #124]	; (8001f28 <controlMotor+0xec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	3301      	adds	r3, #1
 8001eae:	4a1e      	ldr	r2, [pc, #120]	; (8001f28 <controlMotor+0xec>)
 8001eb0:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001eb2:	4b1c      	ldr	r3, [pc, #112]	; (8001f24 <controlMotor+0xe8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eba:	4610      	mov	r0, r2
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	f7fe fe4d 	bl	8000b5c <__aeabi_d2iz>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b21c      	sxth	r4, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <controlMotor+0xe8>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001ece:	4610      	mov	r0, r2
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	f7fe fe43 	bl	8000b5c <__aeabi_d2iz>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b21b      	sxth	r3, r3
 8001eda:	4619      	mov	r1, r3
 8001edc:	4620      	mov	r0, r4
 8001ede:	f002 f9ef 	bl	80042c0 <control>
            if(count == 20)
 8001ee2:	4b11      	ldr	r3, [pc, #68]	; (8001f28 <controlMotor+0xec>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b14      	cmp	r3, #20
 8001ee8:	d114      	bne.n	8001f14 <controlMotor+0xd8>
                motor_break = 3;
 8001eea:	4b0d      	ldr	r3, [pc, #52]	; (8001f20 <controlMotor+0xe4>)
 8001eec:	2203      	movs	r2, #3
 8001eee:	601a      	str	r2, [r3, #0]
}
 8001ef0:	e010      	b.n	8001f14 <controlMotor+0xd8>
        else if(motor_break == 3)
 8001ef2:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <controlMotor+0xe4>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	2b03      	cmp	r3, #3
 8001ef8:	d10c      	bne.n	8001f14 <controlMotor+0xd8>
            control(0,0);
 8001efa:	2100      	movs	r1, #0
 8001efc:	2000      	movs	r0, #0
 8001efe:	f002 f9df 	bl	80042c0 <control>
            count = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	; (8001f28 <controlMotor+0xec>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
}
 8001f08:	e004      	b.n	8001f14 <controlMotor+0xd8>
        disable();
 8001f0a:	f002 f89d 	bl	8004048 <disable>
        motor_disable_flag = 1;
 8001f0e:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <controlMotor+0xe0>)
 8001f10:	2201      	movs	r2, #1
 8001f12:	601a      	str	r2, [r3, #0]
}
 8001f14:	bf00      	nop
 8001f16:	bd98      	pop	{r3, r4, r7, pc}
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000124 	.word	0x20000124
 8001f20:	20000120 	.word	0x20000120
 8001f24:	20000158 	.word	0x20000158
 8001f28:	2000017c 	.word	0x2000017c
 8001f2c:	00000000 	.word	0x00000000

08001f30 <toRPM>:


int toRPM()
{
 8001f30:	b5b0      	push	{r4, r5, r7, lr}
 8001f32:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001f34:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <toRPM+0xa8>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f3c:	4b26      	ldr	r3, [pc, #152]	; (8001fd8 <toRPM+0xa8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f44:	a320      	add	r3, pc, #128	; (adr r3, 8001fc8 <toRPM+0x98>)
 8001f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f4a:	f7fe fb6d 	bl	8000628 <__aeabi_dmul>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4620      	mov	r0, r4
 8001f54:	4629      	mov	r1, r5
 8001f56:	f7fe f9b1 	bl	80002bc <__adddf3>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4610      	mov	r0, r2
 8001f60:	4619      	mov	r1, r3
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <toRPM+0xa8>)
 8001f64:	681c      	ldr	r4, [r3, #0]
 8001f66:	a31a      	add	r3, pc, #104	; (adr r3, 8001fd0 <toRPM+0xa0>)
 8001f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6c:	f7fe fb5c 	bl	8000628 <__aeabi_dmul>
 8001f70:	4602      	mov	r2, r0
 8001f72:	460b      	mov	r3, r1
 8001f74:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001f78:	4b17      	ldr	r3, [pc, #92]	; (8001fd8 <toRPM+0xa8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f80:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <toRPM+0xa8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f88:	a30f      	add	r3, pc, #60	; (adr r3, 8001fc8 <toRPM+0x98>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fb4b 	bl	8000628 <__aeabi_dmul>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	4620      	mov	r0, r4
 8001f98:	4629      	mov	r1, r5
 8001f9a:	f7fe f98d 	bl	80002b8 <__aeabi_dsub>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	4610      	mov	r0, r2
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <toRPM+0xa8>)
 8001fa8:	681c      	ldr	r4, [r3, #0]
 8001faa:	a309      	add	r3, pc, #36	; (adr r3, 8001fd0 <toRPM+0xa0>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fb3a 	bl	8000628 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	bdb0      	pop	{r4, r5, r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	f3af 8000 	nop.w
 8001fc8:	0e560419 	.word	0x0e560419
 8001fcc:	3fcdb22d 	.word	0x3fcdb22d
 8001fd0:	31bcaa49 	.word	0x31bcaa49
 8001fd4:	40625d31 	.word	0x40625d31
 8001fd8:	20000158 	.word	0x20000158

08001fdc <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	b21a      	sxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	3301      	adds	r3, #1
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	021b      	lsls	r3, r3, #8
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8001ff8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe faa9 	bl	8000554 <__aeabi_i2d>
 8002002:	4b19      	ldr	r3, [pc, #100]	; (8002068 <parseCmdvel+0x8c>)
 8002004:	681c      	ldr	r4, [r3, #0]
 8002006:	f04f 0200 	mov.w	r2, #0
 800200a:	4b18      	ldr	r3, [pc, #96]	; (800206c <parseCmdvel+0x90>)
 800200c:	f7fe fc36 	bl	800087c <__aeabi_ddiv>
 8002010:	4602      	mov	r2, r0
 8002012:	460b      	mov	r3, r1
 8002014:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3302      	adds	r3, #2
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	b21a      	sxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3303      	adds	r3, #3
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	021b      	lsls	r3, r3, #8
 8002028:	b21b      	sxth	r3, r3
 800202a:	4313      	orrs	r3, r2
 800202c:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 800202e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa8e 	bl	8000554 <__aeabi_i2d>
 8002038:	4b0b      	ldr	r3, [pc, #44]	; (8002068 <parseCmdvel+0x8c>)
 800203a:	681c      	ldr	r4, [r3, #0]
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b0a      	ldr	r3, [pc, #40]	; (800206c <parseCmdvel+0x90>)
 8002042:	f7fe fc1b 	bl	800087c <__aeabi_ddiv>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	791a      	ldrb	r2, [r3, #4]
 8002052:	4b07      	ldr	r3, [pc, #28]	; (8002070 <parseCmdvel+0x94>)
 8002054:	701a      	strb	r2, [r3, #0]
    toRPM();
 8002056:	f7ff ff6b 	bl	8001f30 <toRPM>
    motor_break = 1;
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <parseCmdvel+0x98>)
 800205c:	2201      	movs	r2, #1
 800205e:	601a      	str	r2, [r3, #0]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	bd90      	pop	{r4, r7, pc}
 8002068:	20000158 	.word	0x20000158
 800206c:	40590000 	.word	0x40590000
 8002070:	20000000 	.word	0x20000000
 8002074:	20000120 	.word	0x20000120

08002078 <sendEnc>:



void sendEnc(int id)
{
 8002078:	b590      	push	{r4, r7, lr}
 800207a:	b087      	sub	sp, #28
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8002080:	2300      	movs	r3, #0
 8002082:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <sendEnc+0x18c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800208c:	f04f 0200 	mov.w	r2, #0
 8002090:	4b5d      	ldr	r3, [pc, #372]	; (8002208 <sendEnc+0x190>)
 8002092:	f7fe fac9 	bl	8000628 <__aeabi_dmul>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	f7fe fd5d 	bl	8000b5c <__aeabi_d2iz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	b219      	sxth	r1, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	1c5a      	adds	r2, r3, #1
 80020aa:	617a      	str	r2, [r7, #20]
 80020ac:	b2ca      	uxtb	r2, r1
 80020ae:	3318      	adds	r3, #24
 80020b0:	443b      	add	r3, r7
 80020b2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80020b6:	4b53      	ldr	r3, [pc, #332]	; (8002204 <sendEnc+0x18c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	4b51      	ldr	r3, [pc, #324]	; (8002208 <sendEnc+0x190>)
 80020c4:	f7fe fab0 	bl	8000628 <__aeabi_dmul>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	4610      	mov	r0, r2
 80020ce:	4619      	mov	r1, r3
 80020d0:	f7fe fd44 	bl	8000b5c <__aeabi_d2iz>
 80020d4:	4603      	mov	r3, r0
 80020d6:	b21b      	sxth	r3, r3
 80020d8:	121b      	asrs	r3, r3, #8
 80020da:	b219      	sxth	r1, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	617a      	str	r2, [r7, #20]
 80020e2:	b2ca      	uxtb	r2, r1
 80020e4:	3318      	adds	r3, #24
 80020e6:	443b      	add	r3, r7
 80020e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 80020ec:	4b45      	ldr	r3, [pc, #276]	; (8002204 <sendEnc+0x18c>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020f4:	f04f 0200 	mov.w	r2, #0
 80020f8:	4b43      	ldr	r3, [pc, #268]	; (8002208 <sendEnc+0x190>)
 80020fa:	f7fe fa95 	bl	8000628 <__aeabi_dmul>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f7fe fd29 	bl	8000b5c <__aeabi_d2iz>
 800210a:	4603      	mov	r3, r0
 800210c:	b219      	sxth	r1, r3
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	617a      	str	r2, [r7, #20]
 8002114:	b2ca      	uxtb	r2, r1
 8002116:	3318      	adds	r3, #24
 8002118:	443b      	add	r3, r7
 800211a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800211e:	4b39      	ldr	r3, [pc, #228]	; (8002204 <sendEnc+0x18c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b37      	ldr	r3, [pc, #220]	; (8002208 <sendEnc+0x190>)
 800212c:	f7fe fa7c 	bl	8000628 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fd10 	bl	8000b5c <__aeabi_d2iz>
 800213c:	4603      	mov	r3, r0
 800213e:	b21b      	sxth	r3, r3
 8002140:	121b      	asrs	r3, r3, #8
 8002142:	b219      	sxth	r1, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	617a      	str	r2, [r7, #20]
 800214a:	b2ca      	uxtb	r2, r1
 800214c:	3318      	adds	r3, #24
 800214e:	443b      	add	r3, r7
 8002150:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 8002154:	4b2d      	ldr	r3, [pc, #180]	; (800220c <sendEnc+0x194>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	7c1b      	ldrb	r3, [r3, #16]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	b25a      	sxtb	r2, r3
 800215e:	4b2b      	ldr	r3, [pc, #172]	; (800220c <sendEnc+0x194>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	7bdb      	ldrb	r3, [r3, #15]
 8002164:	b25b      	sxtb	r3, r3
 8002166:	4313      	orrs	r3, r2
 8002168:	b259      	sxtb	r1, r3
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	1c5a      	adds	r2, r3, #1
 800216e:	617a      	str	r2, [r7, #20]
 8002170:	b2ca      	uxtb	r2, r1
 8002172:	3318      	adds	r3, #24
 8002174:	443b      	add	r3, r7
 8002176:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 800217a:	4b22      	ldr	r3, [pc, #136]	; (8002204 <sendEnc+0x18c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002182:	f04f 0200 	mov.w	r2, #0
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <sendEnc+0x190>)
 8002188:	f7fe fa4e 	bl	8000628 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4610      	mov	r0, r2
 8002192:	4619      	mov	r1, r3
 8002194:	697c      	ldr	r4, [r7, #20]
 8002196:	1c63      	adds	r3, r4, #1
 8002198:	617b      	str	r3, [r7, #20]
 800219a:	f7fe fd07 	bl	8000bac <__aeabi_d2uiz>
 800219e:	4603      	mov	r3, r0
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	f104 0318 	add.w	r3, r4, #24
 80021a6:	443b      	add	r3, r7
 80021a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 80021ac:	4b15      	ldr	r3, [pc, #84]	; (8002204 <sendEnc+0x18c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80021b4:	f04f 0200 	mov.w	r2, #0
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <sendEnc+0x190>)
 80021ba:	f7fe fa35 	bl	8000628 <__aeabi_dmul>
 80021be:	4602      	mov	r2, r0
 80021c0:	460b      	mov	r3, r1
 80021c2:	4610      	mov	r0, r2
 80021c4:	4619      	mov	r1, r3
 80021c6:	697c      	ldr	r4, [r7, #20]
 80021c8:	1c63      	adds	r3, r4, #1
 80021ca:	617b      	str	r3, [r7, #20]
 80021cc:	f7fe fcee 	bl	8000bac <__aeabi_d2uiz>
 80021d0:	4603      	mov	r3, r0
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	f104 0318 	add.w	r3, r4, #24
 80021d8:	443b      	add	r3, r7
 80021da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	1c5a      	adds	r2, r3, #1
 80021e2:	617a      	str	r2, [r7, #20]
 80021e4:	3318      	adds	r3, #24
 80021e6:	443b      	add	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	f107 010c 	add.w	r1, r7, #12
 80021f4:	2301      	movs	r3, #1
 80021f6:	2208      	movs	r2, #8
 80021f8:	f000 fe9a 	bl	8002f30 <sendCan>
}
 80021fc:	bf00      	nop
 80021fe:	371c      	adds	r7, #28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd90      	pop	{r4, r7, pc}
 8002204:	20000158 	.word	0x20000158
 8002208:	40590000 	.word	0x40590000
 800220c:	20000148 	.word	0x20000148

08002210 <toVW>:


int toVW(void)
{
 8002210:	b598      	push	{r3, r4, r7, lr}
 8002212:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 8002214:	4b2c      	ldr	r3, [pc, #176]	; (80022c8 <toVW+0xb8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800221c:	4a2a      	ldr	r2, [pc, #168]	; (80022c8 <toVW+0xb8>)
 800221e:	6814      	ldr	r4, [r2, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f7fe f997 	bl	8000554 <__aeabi_i2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 800222e:	4b26      	ldr	r3, [pc, #152]	; (80022c8 <toVW+0xb8>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8002236:	4a24      	ldr	r2, [pc, #144]	; (80022c8 <toVW+0xb8>)
 8002238:	6814      	ldr	r4, [r2, #0]
 800223a:	4618      	mov	r0, r3
 800223c:	f7fe f98a 	bl	8000554 <__aeabi_i2d>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 8002248:	4b1f      	ldr	r3, [pc, #124]	; (80022c8 <toVW+0xb8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <toVW+0xb8>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002258:	f7fe f830 	bl	80002bc <__adddf3>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	4610      	mov	r0, r2
 8002262:	4619      	mov	r1, r3
 8002264:	4b18      	ldr	r3, [pc, #96]	; (80022c8 <toVW+0xb8>)
 8002266:	681c      	ldr	r4, [r3, #0]
 8002268:	a313      	add	r3, pc, #76	; (adr r3, 80022b8 <toVW+0xa8>)
 800226a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800226e:	f7fe f9db 	bl	8000628 <__aeabi_dmul>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 800227a:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <toVW+0xb8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <toVW+0xb8>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800228a:	f7fe f815 	bl	80002b8 <__aeabi_dsub>
 800228e:	4602      	mov	r2, r0
 8002290:	460b      	mov	r3, r1
 8002292:	4610      	mov	r0, r2
 8002294:	4619      	mov	r1, r3
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <toVW+0xb8>)
 8002298:	681c      	ldr	r4, [r3, #0]
 800229a:	a309      	add	r3, pc, #36	; (adr r3, 80022c0 <toVW+0xb0>)
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f7fe f9c2 	bl	8000628 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	bd98      	pop	{r3, r4, r7, pc}
 80022b2:	bf00      	nop
 80022b4:	f3af 8000 	nop.w
 80022b8:	306c65e9 	.word	0x306c65e9
 80022bc:	3f6be16e 	.word	0x3f6be16e
 80022c0:	5313b470 	.word	0x5313b470
 80022c4:	3f8e0b32 	.word	0x3f8e0b32
 80022c8:	20000158 	.word	0x20000158

080022cc <parseEnc>:


void parseEnc(uint8_t *msg)
{
 80022cc:	b590      	push	{r4, r7, lr}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2bd8      	cmp	r3, #216	; 0xd8
 80022da:	d136      	bne.n	800234a <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3302      	adds	r3, #2
 80022e0:	781b      	ldrb	r3, [r3, #0]
 80022e2:	b219      	sxth	r1, r3
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	3303      	adds	r3, #3
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	b21a      	sxth	r2, r3
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <parseEnc+0xf4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	b212      	sxth	r2, r2
 80022f6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3305      	adds	r3, #5
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	b219      	sxth	r1, r3
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3306      	adds	r3, #6
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	b21a      	sxth	r2, r3
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <parseEnc+0xf4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	430a      	orrs	r2, r1
 8002312:	b212      	sxth	r2, r2
 8002314:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8002318:	4b29      	ldr	r3, [pc, #164]	; (80023c0 <parseEnc+0xf4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002320:	b29b      	uxth	r3, r3
 8002322:	425b      	negs	r3, r3
 8002324:	b29a      	uxth	r2, r3
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <parseEnc+0xf4>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b212      	sxth	r2, r2
 800232c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 8002330:	4b24      	ldr	r3, [pc, #144]	; (80023c4 <parseEnc+0xf8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	7852      	ldrb	r2, [r2, #1]
 8002338:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 800233a:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <parseEnc+0xf8>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	7912      	ldrb	r2, [r2, #4]
 8002342:	741a      	strb	r2, [r3, #16]

        toVW();
 8002344:	f7ff ff64 	bl	8002210 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 8002348:	e036      	b.n	80023b8 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	2bc1      	cmp	r3, #193	; 0xc1
 8002350:	d117      	bne.n	8002382 <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	461a      	mov	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	3305      	adds	r3, #5
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	021b      	lsls	r3, r3, #8
 8002362:	4313      	orrs	r3, r2
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f8f5 	bl	8000554 <__aeabi_i2d>
 800236a:	4b15      	ldr	r3, [pc, #84]	; (80023c0 <parseEnc+0xf4>)
 800236c:	681c      	ldr	r4, [r3, #0]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	4b15      	ldr	r3, [pc, #84]	; (80023c8 <parseEnc+0xfc>)
 8002374:	f7fe fa82 	bl	800087c <__aeabi_ddiv>
 8002378:	4602      	mov	r2, r0
 800237a:	460b      	mov	r3, r1
 800237c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8002380:	e01a      	b.n	80023b8 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2bc8      	cmp	r3, #200	; 0xc8
 8002388:	d116      	bne.n	80023b8 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	3305      	adds	r3, #5
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	021b      	lsls	r3, r3, #8
 800239a:	4313      	orrs	r3, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f8d9 	bl	8000554 <__aeabi_i2d>
 80023a2:	4b07      	ldr	r3, [pc, #28]	; (80023c0 <parseEnc+0xf4>)
 80023a4:	681c      	ldr	r4, [r3, #0]
 80023a6:	f04f 0200 	mov.w	r2, #0
 80023aa:	4b07      	ldr	r3, [pc, #28]	; (80023c8 <parseEnc+0xfc>)
 80023ac:	f7fe fa66 	bl	800087c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd90      	pop	{r4, r7, pc}
 80023c0:	20000158 	.word	0x20000158
 80023c4:	20000148 	.word	0x20000148
 80023c8:	40240000 	.word	0x40240000

080023cc <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 80023cc:	b590      	push	{r4, r7, lr}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3304      	adds	r3, #4
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b21a      	sxth	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3305      	adds	r3, #5
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3306      	adds	r3, #6
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	b21a      	sxth	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3307      	adds	r3, #7
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	021b      	lsls	r3, r3, #8
 80023fa:	b21b      	sxth	r3, r3
 80023fc:	4313      	orrs	r3, r2
 80023fe:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 8002400:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002404:	425b      	negs	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe f8a4 	bl	8000554 <__aeabi_i2d>
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	4b15      	ldr	r3, [pc, #84]	; (8002468 <parseEnc114+0x9c>)
 8002412:	f7fe fa33 	bl	800087c <__aeabi_ddiv>
 8002416:	4602      	mov	r2, r0
 8002418:	460b      	mov	r3, r1
 800241a:	4914      	ldr	r1, [pc, #80]	; (800246c <parseEnc114+0xa0>)
 800241c:	680c      	ldr	r4, [r1, #0]
 800241e:	4610      	mov	r0, r2
 8002420:	4619      	mov	r1, r3
 8002422:	f7fe fb9b 	bl	8000b5c <__aeabi_d2iz>
 8002426:	4603      	mov	r3, r0
 8002428:	b21b      	sxth	r3, r3
 800242a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 800242e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002432:	4618      	mov	r0, r3
 8002434:	f7fe f88e 	bl	8000554 <__aeabi_i2d>
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <parseEnc114+0x9c>)
 800243e:	f7fe fa1d 	bl	800087c <__aeabi_ddiv>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4909      	ldr	r1, [pc, #36]	; (800246c <parseEnc114+0xa0>)
 8002448:	680c      	ldr	r4, [r1, #0]
 800244a:	4610      	mov	r0, r2
 800244c:	4619      	mov	r1, r3
 800244e:	f7fe fb85 	bl	8000b5c <__aeabi_d2iz>
 8002452:	4603      	mov	r3, r0
 8002454:	b21b      	sxth	r3, r3
 8002456:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 800245a:	f7ff fed9 	bl	8002210 <toVW>
}
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
 8002466:	bf00      	nop
 8002468:	40240000 	.word	0x40240000
 800246c:	20000158 	.word	0x20000158

08002470 <parseState114>:

void parseState114(uint8_t *msg)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3304      	adds	r3, #4
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	b25a      	sxtb	r2, r3
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	3305      	adds	r3, #5
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	021b      	lsls	r3, r3, #8
 8002488:	b25b      	sxtb	r3, r3
 800248a:	4313      	orrs	r3, r2
 800248c:	b25a      	sxtb	r2, r3
 800248e:	4b12      	ldr	r3, [pc, #72]	; (80024d8 <parseState114+0x68>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	3306      	adds	r3, #6
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b25a      	sxtb	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	3307      	adds	r3, #7
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	b25b      	sxtb	r3, r3
 80024a8:	4313      	orrs	r3, r2
 80024aa:	b25a      	sxtb	r2, r3
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <parseState114+0x68>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 80024b4:	4b08      	ldr	r3, [pc, #32]	; (80024d8 <parseState114+0x68>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	7bdb      	ldrb	r3, [r3, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d104      	bne.n	80024c8 <parseState114+0x58>
 80024be:	4b06      	ldr	r3, [pc, #24]	; (80024d8 <parseState114+0x68>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	7c1b      	ldrb	r3, [r3, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <parseState114+0x60>
    {
        reset();
 80024c8:	f001 fe10 	bl	80040ec <reset>
        startMotor();
 80024cc:	f001 fd4e 	bl	8003f6c <startMotor>
    }
}
 80024d0:	bf00      	nop
 80024d2:	3708      	adds	r7, #8
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20000148 	.word	0x20000148

080024dc <spinonce>:

void spinonce(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	; 0x30
 80024e0:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 80024e2:	4a96      	ldr	r2, [pc, #600]	; (800273c <spinonce+0x260>)
 80024e4:	f107 0314 	add.w	r3, r7, #20
 80024e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ec:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	62fb      	str	r3, [r7, #44]	; 0x2c

    uint32_t CanId = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28

    uint8_t robot_standby[4] = {0xCA, 0x35, 0x9A, 0x65};//RsTb
 80024f8:	4b91      	ldr	r3, [pc, #580]	; (8002740 <spinonce+0x264>)
 80024fa:	60bb      	str	r3, [r7, #8]


	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 80024fc:	2100      	movs	r1, #0
 80024fe:	2000      	movs	r0, #0
 8002500:	f000 fcca 	bl	8002e98 <CanInit>


   // HAL_Delay(10000);
    HAL_Delay(1000);
 8002504:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002508:	f002 fbde 	bl	8004cc8 <HAL_Delay>
    startTTS();
 800250c:	f7ff fba0 	bl	8001c50 <startTTS>
    //state->set(IDLE);
    ready_flag = 1;
 8002510:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <spinonce+0x268>)
 8002512:	2201      	movs	r2, #1
 8002514:	701a      	strb	r2, [r3, #0]
    start_docking_flag = 0;
 8002516:	4b8c      	ldr	r3, [pc, #560]	; (8002748 <spinonce+0x26c>)
 8002518:	2200      	movs	r2, #0
 800251a:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 800251c:	4b8b      	ldr	r3, [pc, #556]	; (800274c <spinonce+0x270>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 8002522:	2301      	movs	r3, #1
 8002524:	71fb      	strb	r3, [r7, #7]
    int start_docking_count_tmp = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	627b      	str	r3, [r7, #36]	; 0x24

    settingMotor();
 800252a:	f001 fff9 	bl	8004520 <settingMotor>
    startMotor();
 800252e:	f001 fd1d 	bl	8003f6c <startMotor>

    TransmitterIR_init();
 8002532:	f000 f9bd 	bl	80028b0 <TransmitterIR_init>
    ReceiverIR_init();
 8002536:	f7fe fcdb 	bl	8000ef0 <ReceiverIR_init>
    //setData(format, robot_standby, 32);

	while(1)
	{

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 800253a:	4b85      	ldr	r3, [pc, #532]	; (8002750 <spinonce+0x274>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	1d5a      	adds	r2, r3, #5
 8002540:	4b84      	ldr	r3, [pc, #528]	; (8002754 <spinonce+0x278>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d20f      	bcs.n	8002568 <spinonce+0x8c>
    		toggle_seq = Tick_100ms;
 8002548:	4b82      	ldr	r3, [pc, #520]	; (8002754 <spinonce+0x278>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a80      	ldr	r2, [pc, #512]	; (8002750 <spinonce+0x274>)
 800254e:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 8002550:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002554:	4880      	ldr	r0, [pc, #512]	; (8002758 <spinonce+0x27c>)
 8002556:	f003 fe26 	bl	80061a6 <HAL_GPIO_TogglePin>
    		setData(format, robot_standby, 32);/////must be to make ir_seq
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	f107 0108 	add.w	r1, r7, #8
 8002560:	2220      	movs	r2, #32
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f9ca 	bl	80028fc <setData>

    	}


    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 8002568:	4b7c      	ldr	r3, [pc, #496]	; (800275c <spinonce+0x280>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1d1a      	adds	r2, r3, #4
 800256e:	4b7c      	ldr	r3, [pc, #496]	; (8002760 <spinonce+0x284>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d209      	bcs.n	800258a <spinonce+0xae>
    		controlmotor_seq = gTick;
 8002576:	4b7a      	ldr	r3, [pc, #488]	; (8002760 <spinonce+0x284>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a78      	ldr	r2, [pc, #480]	; (800275c <spinonce+0x280>)
 800257c:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 800257e:	f7ff fc5d 	bl	8001e3c <controlMotor>
            sendEnc(CANID3);
 8002582:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8002586:	f7ff fd77 	bl	8002078 <sendEnc>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 800258a:	4b76      	ldr	r3, [pc, #472]	; (8002764 <spinonce+0x288>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	1cda      	adds	r2, r3, #3
 8002590:	4b73      	ldr	r3, [pc, #460]	; (8002760 <spinonce+0x284>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d20e      	bcs.n	80025b6 <spinonce+0xda>
    		reqmotor_seq = gTick;
 8002598:	4b71      	ldr	r3, [pc, #452]	; (8002760 <spinonce+0x284>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a71      	ldr	r2, [pc, #452]	; (8002764 <spinonce+0x288>)
 800259e:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 80025a0:	4b70      	ldr	r3, [pc, #448]	; (8002764 <spinonce+0x288>)
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f003 0307 	and.w	r3, r3, #7
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d102      	bne.n	80025b2 <spinonce+0xd6>
 80025ac:	f001 fdee 	bl	800418c <reqEnc>
 80025b0:	e001      	b.n	80025b6 <spinonce+0xda>
    		else{reqState();}
 80025b2:	f001 fe38 	bl	8004226 <reqState>
    	}



		if((Tick_100ms>sendsensor_seq)){
 80025b6:	4b67      	ldr	r3, [pc, #412]	; (8002754 <spinonce+0x278>)
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	4b6b      	ldr	r3, [pc, #428]	; (8002768 <spinonce+0x28c>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	429a      	cmp	r2, r3
 80025c0:	f240 8097 	bls.w	80026f2 <spinonce+0x216>
			sendsensor_seq = Tick_100ms;
 80025c4:	4b63      	ldr	r3, [pc, #396]	; (8002754 <spinonce+0x278>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a67      	ldr	r2, [pc, #412]	; (8002768 <spinonce+0x28c>)
 80025ca:	6013      	str	r3, [r2, #0]

			getData(&format, recv_buf, sizeof(recv_buf)*8);
 80025cc:	1dfb      	adds	r3, r7, #7
 80025ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025d2:	4966      	ldr	r1, [pc, #408]	; (800276c <spinonce+0x290>)
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe fc91 	bl	8000efc <getData>
		    for(int i = 0; i<4; i++)
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	e00f      	b.n	8002600 <spinonce+0x124>
		    {
		        if(recv_buf[i] == start_docking[i])
 80025e0:	4a62      	ldr	r2, [pc, #392]	; (800276c <spinonce+0x290>)
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	4413      	add	r3, r2
 80025e6:	781a      	ldrb	r2, [r3, #0]
 80025e8:	4961      	ldr	r1, [pc, #388]	; (8002770 <spinonce+0x294>)
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	440b      	add	r3, r1
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d102      	bne.n	80025fa <spinonce+0x11e>
		        {
		            start_docking_count_tmp++;
 80025f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f6:	3301      	adds	r3, #1
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
		    for(int i = 0; i<4; i++)
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	3301      	adds	r3, #1
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	2b03      	cmp	r3, #3
 8002604:	ddec      	ble.n	80025e0 <spinonce+0x104>
		        }
		    }
		    if(start_docking_count_tmp == 4){
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	2b04      	cmp	r3, #4
 800260a:	d104      	bne.n	8002616 <spinonce+0x13a>
		    	HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 800260c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002610:	4851      	ldr	r0, [pc, #324]	; (8002758 <spinonce+0x27c>)
 8002612:	f003 fdc8 	bl	80061a6 <HAL_GPIO_TogglePin>


			//printf("hihi: %d\n", USS_tick);

			/////////must need USS of fine Tuning/////////
			USS_start = us_Tick;
 8002616:	4b57      	ldr	r3, [pc, #348]	; (8002774 <spinonce+0x298>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a57      	ldr	r2, [pc, #348]	; (8002778 <spinonce+0x29c>)
 800261c:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, SET);
 800261e:	2201      	movs	r2, #1
 8002620:	2120      	movs	r1, #32
 8002622:	4856      	ldr	r0, [pc, #344]	; (800277c <spinonce+0x2a0>)
 8002624:	f003 fda6 	bl	8006174 <HAL_GPIO_WritePin>
			pre_usTick = us_Tick;
 8002628:	4b52      	ldr	r3, [pc, #328]	; (8002774 <spinonce+0x298>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a54      	ldr	r2, [pc, #336]	; (8002780 <spinonce+0x2a4>)
 800262e:	6013      	str	r3, [r2, #0]
			while(us_Tick == pre_usTick){;}//wait 500us
 8002630:	bf00      	nop
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <spinonce+0x298>)
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	4b52      	ldr	r3, [pc, #328]	; (8002780 <spinonce+0x2a4>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0f9      	beq.n	8002632 <spinonce+0x156>
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);
 800263e:	2200      	movs	r2, #0
 8002640:	2120      	movs	r1, #32
 8002642:	484e      	ldr	r0, [pc, #312]	; (800277c <spinonce+0x2a0>)
 8002644:	f003 fd96 	bl	8006174 <HAL_GPIO_WritePin>


			printf("sonic value start, end, diff: %d  %d  %d\n", USS_start, USS_end, (USS_end-USS_start));
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <spinonce+0x29c>)
 800264a:	6819      	ldr	r1, [r3, #0]
 800264c:	4b4d      	ldr	r3, [pc, #308]	; (8002784 <spinonce+0x2a8>)
 800264e:	6818      	ldr	r0, [r3, #0]
 8002650:	4b4c      	ldr	r3, [pc, #304]	; (8002784 <spinonce+0x2a8>)
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <spinonce+0x29c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	4602      	mov	r2, r0
 800265c:	484a      	ldr	r0, [pc, #296]	; (8002788 <spinonce+0x2ac>)
 800265e:	f007 f9b5 	bl	80099cc <iprintf>
			//////////////////////////////////////////////

			buf[index++] = 0;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002668:	3330      	adds	r3, #48	; 0x30
 800266a:	443b      	add	r3, r7
 800266c:	2200      	movs	r2, #0
 800266e:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 8002672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002678:	3330      	adds	r3, #48	; 0x30
 800267a:	443b      	add	r3, r7
 800267c:	2200      	movs	r2, #0
 800267e:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 8002682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002688:	3330      	adds	r3, #48	; 0x30
 800268a:	443b      	add	r3, r7
 800268c:	2200      	movs	r2, #0
 800268e:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 8002692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002698:	3330      	adds	r3, #48	; 0x30
 800269a:	443b      	add	r3, r7
 800269c:	2200      	movs	r2, #0
 800269e:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026a8:	3330      	adds	r3, #48	; 0x30
 80026aa:	443b      	add	r3, r7
 80026ac:	2200      	movs	r2, #0
 80026ae:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026b8:	3330      	adds	r3, #48	; 0x30
 80026ba:	443b      	add	r3, r7
 80026bc:	2200      	movs	r2, #0
 80026be:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80026c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026c8:	3330      	adds	r3, #48	; 0x30
 80026ca:	443b      	add	r3, r7
 80026cc:	2200      	movs	r2, #0
 80026ce:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index] = 0;
 80026d2:	f107 020c 	add.w	r2, r7, #12
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	4413      	add	r3, r2
 80026da:	2200      	movs	r2, #0
 80026dc:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 80026de:	f107 010c 	add.w	r1, r7, #12
 80026e2:	2301      	movs	r3, #1
 80026e4:	2208      	movs	r2, #8
 80026e6:	f240 70d2 	movw	r0, #2002	; 0x7d2
 80026ea:	f000 fc21 	bl	8002f30 <sendCan>
			index = 0;
 80026ee:	2300      	movs	r3, #0
 80026f0:	62fb      	str	r3, [r7, #44]	; 0x2c


		}
		if(FLAG_RxCplt){
 80026f2:	4b26      	ldr	r3, [pc, #152]	; (800278c <spinonce+0x2b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f43f af1f 	beq.w	800253a <spinonce+0x5e>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 80026fc:	2300      	movs	r3, #0
 80026fe:	61fb      	str	r3, [r7, #28]
 8002700:	e00c      	b.n	800271c <spinonce+0x240>
 8002702:	4a23      	ldr	r2, [pc, #140]	; (8002790 <spinonce+0x2b4>)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	4413      	add	r3, r2
 8002708:	7819      	ldrb	r1, [r3, #0]
 800270a:	f107 0214 	add.w	r2, r7, #20
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	4413      	add	r3, r2
 8002712:	460a      	mov	r2, r1
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	3301      	adds	r3, #1
 800271a:	61fb      	str	r3, [r7, #28]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	2b07      	cmp	r3, #7
 8002720:	ddef      	ble.n	8002702 <spinonce+0x226>
    		FLAG_RxCplt=0;
 8002722:	4b1a      	ldr	r3, [pc, #104]	; (800278c <spinonce+0x2b0>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8002728:	4b1a      	ldr	r3, [pc, #104]	; (8002794 <spinonce+0x2b8>)
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	4b19      	ldr	r3, [pc, #100]	; (8002794 <spinonce+0x2b8>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	d931      	bls.n	8002798 <spinonce+0x2bc>
 8002734:	4b17      	ldr	r3, [pc, #92]	; (8002794 <spinonce+0x2b8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
 800273a:	e030      	b.n	800279e <spinonce+0x2c2>
 800273c:	0800a92c 	.word	0x0800a92c
 8002740:	659a35ca 	.word	0x659a35ca
 8002744:	20000150 	.word	0x20000150
 8002748:	20000151 	.word	0x20000151
 800274c:	20000154 	.word	0x20000154
 8002750:	20000104 	.word	0x20000104
 8002754:	20000100 	.word	0x20000100
 8002758:	40020400 	.word	0x40020400
 800275c:	20000118 	.word	0x20000118
 8002760:	200000f8 	.word	0x200000f8
 8002764:	2000011c 	.word	0x2000011c
 8002768:	20000114 	.word	0x20000114
 800276c:	2000015c 	.word	0x2000015c
 8002770:	20000004 	.word	0x20000004
 8002774:	200000f4 	.word	0x200000f4
 8002778:	20000128 	.word	0x20000128
 800277c:	40020c00 	.word	0x40020c00
 8002780:	200000fc 	.word	0x200000fc
 8002784:	2000012c 	.word	0x2000012c
 8002788:	0800a900 	.word	0x0800a900
 800278c:	200001dc 	.word	0x200001dc
 8002790:	200001e0 	.word	0x200001e0
 8002794:	200001e8 	.word	0x200001e8
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8002798:	4b42      	ldr	r3, [pc, #264]	; (80028a4 <spinonce+0x3c8>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28

			if(ready_flag)
 800279e:	4b42      	ldr	r3, [pc, #264]	; (80028a8 <spinonce+0x3cc>)
 80027a0:	781b      	ldrb	r3, [r3, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d072      	beq.n	800288c <spinonce+0x3b0>
			{
				switch(CanId)
 80027a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a8:	4a40      	ldr	r2, [pc, #256]	; (80028ac <spinonce+0x3d0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d04e      	beq.n	800284c <spinonce+0x370>
 80027ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b0:	4a3e      	ldr	r2, [pc, #248]	; (80028ac <spinonce+0x3d0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d86d      	bhi.n	8002892 <spinonce+0x3b6>
 80027b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027b8:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80027bc:	4293      	cmp	r3, r2
 80027be:	d03f      	beq.n	8002840 <spinonce+0x364>
 80027c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c2:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d863      	bhi.n	8002892 <spinonce+0x3b6>
 80027ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027cc:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d02f      	beq.n	8002834 <spinonce+0x358>
 80027d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d6:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80027da:	4293      	cmp	r3, r2
 80027dc:	d859      	bhi.n	8002892 <spinonce+0x3b6>
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	f240 7201 	movw	r2, #1793	; 0x701
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d04e      	beq.n	8002886 <spinonce+0x3aa>
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	f240 7201 	movw	r2, #1793	; 0x701
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d84f      	bhi.n	8002892 <spinonce+0x3b6>
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	f240 5281 	movw	r2, #1409	; 0x581
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02d      	beq.n	8002858 <spinonce+0x37c>
 80027fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027fe:	f240 5281 	movw	r2, #1409	; 0x581
 8002802:	4293      	cmp	r3, r2
 8002804:	d845      	bhi.n	8002892 <spinonce+0x3b6>
 8002806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002808:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800280c:	4293      	cmp	r3, r2
 800280e:	d005      	beq.n	800281c <spinonce+0x340>
 8002810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002812:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8002816:	4293      	cmp	r3, r2
 8002818:	d006      	beq.n	8002828 <spinonce+0x34c>
 800281a:	e03a      	b.n	8002892 <spinonce+0x3b6>
				{
				case CANID1:
					parseCmdvel(canbuf);
 800281c:	f107 0314 	add.w	r3, r7, #20
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff fbdb 	bl	8001fdc <parseCmdvel>
					break;
 8002826:	e034      	b.n	8002892 <spinonce+0x3b6>

				case CANID2:
					parseState(canbuf);
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	4618      	mov	r0, r3
 800282e:	f7ff fabd 	bl	8001dac <parseState>
					break;
 8002832:	e02e      	b.n	8002892 <spinonce+0x3b6>

				case CANID5:
					parseTop(canbuf);
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff fa8b 	bl	8001d54 <parseTop>
					break;
 800283e:	e028      	b.n	8002892 <spinonce+0x3b6>

				case CANID6:
					parsePmm(canbuf);
 8002840:	f107 0314 	add.w	r3, r7, #20
 8002844:	4618      	mov	r0, r3
 8002846:	f7ff fa53 	bl	8001cf0 <parsePmm>
					break;
 800284a:	e022      	b.n	8002892 <spinonce+0x3b6>

				case CANID7:
					parseEnc(canbuf);
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	4618      	mov	r0, r3
 8002852:	f7ff fd3b 	bl	80022cc <parseEnc>
					break;
 8002856:	e01c      	b.n	8002892 <spinonce+0x3b6>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8002858:	7d7b      	ldrb	r3, [r7, #21]
 800285a:	2b6c      	cmp	r3, #108	; 0x6c
 800285c:	d107      	bne.n	800286e <spinonce+0x392>
 800285e:	7dbb      	ldrb	r3, [r7, #22]
 8002860:	2b60      	cmp	r3, #96	; 0x60
 8002862:	d104      	bne.n	800286e <spinonce+0x392>
						parseEnc114(canbuf);
 8002864:	f107 0314 	add.w	r3, r7, #20
 8002868:	4618      	mov	r0, r3
 800286a:	f7ff fdaf 	bl	80023cc <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 800286e:	7d7b      	ldrb	r3, [r7, #21]
 8002870:	2b3f      	cmp	r3, #63	; 0x3f
 8002872:	d10d      	bne.n	8002890 <spinonce+0x3b4>
 8002874:	7dbb      	ldrb	r3, [r7, #22]
 8002876:	2b60      	cmp	r3, #96	; 0x60
 8002878:	d10a      	bne.n	8002890 <spinonce+0x3b4>
						parseState114(canbuf);
 800287a:	f107 0314 	add.w	r3, r7, #20
 800287e:	4618      	mov	r0, r3
 8002880:	f7ff fdf6 	bl	8002470 <parseState114>
					break;
 8002884:	e004      	b.n	8002890 <spinonce+0x3b4>

				case MOTOR114_START_ID:
					startMotor();
 8002886:	f001 fb71 	bl	8003f6c <startMotor>
					break;
 800288a:	e002      	b.n	8002892 <spinonce+0x3b6>
				}
			}
 800288c:	bf00      	nop
 800288e:	e000      	b.n	8002892 <spinonce+0x3b6>
					break;
 8002890:	bf00      	nop
//					  state->set(IDLE);
//					  ready_flag = 1;
//					  start_docking_flag = 0;
//				  }
//			  }
			g_tCan_Rx_Header.StdId=0;
 8002892:	4b04      	ldr	r3, [pc, #16]	; (80028a4 <spinonce+0x3c8>)
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8002898:	4b02      	ldr	r3, [pc, #8]	; (80028a4 <spinonce+0x3c8>)
 800289a:	2200      	movs	r2, #0
 800289c:	605a      	str	r2, [r3, #4]
			CanId = 0;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80028a2:	e64a      	b.n	800253a <spinonce+0x5e>
 80028a4:	200001e8 	.word	0x200001e8
 80028a8:	20000150 	.word	0x20000150
 80028ac:	00b8b701 	.word	0x00b8b701

080028b0 <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 80028b0:	b480      	push	{r7}
 80028b2:	af00      	add	r7, sp, #0




	IRDUTY0;
 80028b4:	4b0e      	ldr	r3, [pc, #56]	; (80028f0 <TransmitterIR_init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2200      	movs	r2, #0
 80028ba:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 80028bc:	4b0d      	ldr	r3, [pc, #52]	; (80028f4 <TransmitterIR_init+0x44>)
 80028be:	2200      	movs	r2, #0
 80028c0:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 80028c2:	4b0c      	ldr	r3, [pc, #48]	; (80028f4 <TransmitterIR_init+0x44>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 80028c8:	4b0a      	ldr	r3, [pc, #40]	; (80028f4 <TransmitterIR_init+0x44>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <TransmitterIR_init+0x44>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 80028d4:	4b07      	ldr	r3, [pc, #28]	; (80028f4 <TransmitterIR_init+0x44>)
 80028d6:	2200      	movs	r2, #0
 80028d8:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <TransmitterIR_init+0x48>)
 80028dc:	2200      	movs	r2, #0
 80028de:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <TransmitterIR_init+0x48>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	605a      	str	r2, [r3, #4]




}
 80028e6:	bf00      	nop
 80028e8:	46bd      	mov	sp, r7
 80028ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ee:	4770      	bx	lr
 80028f0:	20000254 	.word	0x20000254
 80028f4:	200001c8 	.word	0x200001c8
 80028f8:	20000180 	.word	0x20000180

080028fc <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b086      	sub	sp, #24
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (TIR_work.state != TIR_Idle) {
 800290a:	4b2b      	ldr	r3, [pc, #172]	; (80029b8 <setData+0xbc>)
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d002      	beq.n	8002918 <setData+0x1c>
        UNLOCK();
        return -1;
 8002912:	f04f 33ff 	mov.w	r3, #4294967295
 8002916:	e04a      	b.n	80029ae <setData+0xb2>
    }

    TIR_work.state = Leader;
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <setData+0xbc>)
 800291a:	2201      	movs	r2, #1
 800291c:	701a      	strb	r2, [r3, #0]
    TIR_work.bitcount = 0;
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <setData+0xbc>)
 8002920:	2200      	movs	r2, #0
 8002922:	605a      	str	r2, [r3, #4]
    TIR_work.leader = 0;
 8002924:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <setData+0xbc>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
    TIR_work.data = 0;
 800292a:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <setData+0xbc>)
 800292c:	2200      	movs	r2, #0
 800292e:	60da      	str	r2, [r3, #12]
    TIR_work.trailer = 0;
 8002930:	4b21      	ldr	r3, [pc, #132]	; (80029b8 <setData+0xbc>)
 8002932:	2200      	movs	r2, #0
 8002934:	611a      	str	r2, [r3, #16]

    TIR_data.format = format;
 8002936:	4a21      	ldr	r2, [pc, #132]	; (80029bc <setData+0xc0>)
 8002938:	7bfb      	ldrb	r3, [r7, #15]
 800293a:	7013      	strb	r3, [r2, #0]
    TIR_data.bitlength = bitlength;
 800293c:	4a1f      	ldr	r2, [pc, #124]	; (80029bc <setData+0xc0>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	da00      	bge.n	800294a <setData+0x4e>
 8002948:	3307      	adds	r3, #7
 800294a:	10db      	asrs	r3, r3, #3
 800294c:	461a      	mov	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	2b00      	cmp	r3, #0
 8002956:	bf14      	ite	ne
 8002958:	2301      	movne	r3, #1
 800295a:	2300      	moveq	r3, #0
 800295c:	b2db      	uxtb	r3, r3
 800295e:	4413      	add	r3, r2
 8002960:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8002962:	2300      	movs	r3, #0
 8002964:	617b      	str	r3, [r7, #20]
 8002966:	e00c      	b.n	8002982 <setData+0x86>
        TIR_data.buffer[i] = buf[i];
 8002968:	697b      	ldr	r3, [r7, #20]
 800296a:	68ba      	ldr	r2, [r7, #8]
 800296c:	4413      	add	r3, r2
 800296e:	7819      	ldrb	r1, [r3, #0]
 8002970:	4a12      	ldr	r2, [pc, #72]	; (80029bc <setData+0xc0>)
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	4413      	add	r3, r2
 8002976:	3308      	adds	r3, #8
 8002978:	460a      	mov	r2, r1
 800297a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	3301      	adds	r3, #1
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	697a      	ldr	r2, [r7, #20]
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	429a      	cmp	r2, r3
 8002988:	dbee      	blt.n	8002968 <setData+0x6c>
    }

    switch (format) {
 800298a:	7bfb      	ldrb	r3, [r7, #15]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d00c      	beq.n	80029aa <setData+0xae>
 8002990:	2b05      	cmp	r3, #5
 8002992:	dc0b      	bgt.n	80029ac <setData+0xb0>
 8002994:	2b01      	cmp	r3, #1
 8002996:	d001      	beq.n	800299c <setData+0xa0>
 8002998:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 800299a:	e007      	b.n	80029ac <setData+0xb0>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 800299c:	4808      	ldr	r0, [pc, #32]	; (80029c0 <setData+0xc4>)
 800299e:	f004 fd97 	bl	80074d0 <HAL_TIM_Base_Start_IT>
        		TIR_setData_flag = 1;
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <setData+0xc8>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
            break;
 80029a8:	e000      	b.n	80029ac <setData+0xb0>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 80029aa:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 80029ac:	687b      	ldr	r3, [r7, #4]
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3718      	adds	r7, #24
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	200001c8 	.word	0x200001c8
 80029bc:	20000180 	.word	0x20000180
 80029c0:	20000384 	.word	0x20000384
 80029c4:	20000108 	.word	0x20000108

080029c8 <tick>:

void tick(void) {
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 80029cc:	4b83      	ldr	r3, [pc, #524]	; (8002bdc <tick+0x214>)
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	f200 824f 	bhi.w	8002e74 <tick+0x4ac>
 80029d6:	a201      	add	r2, pc, #4	; (adr r2, 80029dc <tick+0x14>)
 80029d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029dc:	080029ed 	.word	0x080029ed
 80029e0:	08002a07 	.word	0x08002a07
 80029e4:	08002af3 	.word	0x08002af3
 80029e8:	08002d61 	.word	0x08002d61
        case TIR_Idle:
            TIR_work.bitcount = 0;
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <tick+0x214>)
 80029ee:	2200      	movs	r2, #0
 80029f0:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 80029f2:	4b7a      	ldr	r3, [pc, #488]	; (8002bdc <tick+0x214>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 80029f8:	4b78      	ldr	r3, [pc, #480]	; (8002bdc <tick+0x214>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 80029fe:	4b77      	ldr	r3, [pc, #476]	; (8002bdc <tick+0x214>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	611a      	str	r2, [r3, #16]
            break;
 8002a04:	e23d      	b.n	8002e82 <tick+0x4ba>
        case Leader:
            if (TIR_data.format == NEC) {
 8002a06:	4b76      	ldr	r3, [pc, #472]	; (8002be0 <tick+0x218>)
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d122      	bne.n	8002a54 <tick+0x8c>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <tick+0x214>)
 8002a10:	689a      	ldr	r2, [r3, #8]
 8002a12:	4b74      	ldr	r3, [pc, #464]	; (8002be4 <tick+0x21c>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	da05      	bge.n	8002a26 <tick+0x5e>
                    IRDUTY50;
 8002a1a:	4b73      	ldr	r3, [pc, #460]	; (8002be8 <tick+0x220>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a22:	635a      	str	r2, [r3, #52]	; 0x34
 8002a24:	e003      	b.n	8002a2e <tick+0x66>
                } else {
                    IRDUTY0;
 8002a26:	4b70      	ldr	r3, [pc, #448]	; (8002be8 <tick+0x220>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002a2e:	4b6b      	ldr	r3, [pc, #428]	; (8002bdc <tick+0x214>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	3301      	adds	r3, #1
 8002a34:	4a69      	ldr	r2, [pc, #420]	; (8002bdc <tick+0x214>)
 8002a36:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002a38:	4b6a      	ldr	r3, [pc, #424]	; (8002be4 <tick+0x21c>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b6b      	ldr	r3, [pc, #428]	; (8002bec <tick+0x224>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	441a      	add	r2, r3
 8002a42:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <tick+0x214>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	429a      	cmp	r2, r3
 8002a48:	f300 8216 	bgt.w	8002e78 <tick+0x4b0>
                    TIR_work.state = Data;
 8002a4c:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <tick+0x214>)
 8002a4e:	2202      	movs	r2, #2
 8002a50:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002a52:	e211      	b.n	8002e78 <tick+0x4b0>
            } else if (TIR_data.format == AEHA) {
 8002a54:	4b62      	ldr	r3, [pc, #392]	; (8002be0 <tick+0x218>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d122      	bne.n	8002aa2 <tick+0xda>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002a5c:	4b5f      	ldr	r3, [pc, #380]	; (8002bdc <tick+0x214>)
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	4b63      	ldr	r3, [pc, #396]	; (8002bf0 <tick+0x228>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	da05      	bge.n	8002a74 <tick+0xac>
                    IRDUTY50;
 8002a68:	4b5f      	ldr	r3, [pc, #380]	; (8002be8 <tick+0x220>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34
 8002a72:	e003      	b.n	8002a7c <tick+0xb4>
                    IRDUTY0;
 8002a74:	4b5c      	ldr	r3, [pc, #368]	; (8002be8 <tick+0x220>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002a7c:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <tick+0x214>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	3301      	adds	r3, #1
 8002a82:	4a56      	ldr	r2, [pc, #344]	; (8002bdc <tick+0x214>)
 8002a84:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8002a86:	4b5a      	ldr	r3, [pc, #360]	; (8002bf0 <tick+0x228>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	4b5a      	ldr	r3, [pc, #360]	; (8002bf4 <tick+0x22c>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	441a      	add	r2, r3
 8002a90:	4b52      	ldr	r3, [pc, #328]	; (8002bdc <tick+0x214>)
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	429a      	cmp	r2, r3
 8002a96:	f300 81ef 	bgt.w	8002e78 <tick+0x4b0>
                    TIR_work.state = Data;
 8002a9a:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <tick+0x214>)
 8002a9c:	2202      	movs	r2, #2
 8002a9e:	701a      	strb	r2, [r3, #0]
            break;
 8002aa0:	e1ea      	b.n	8002e78 <tick+0x4b0>
            } else if (TIR_data.format == SONY) {
 8002aa2:	4b4f      	ldr	r3, [pc, #316]	; (8002be0 <tick+0x218>)
 8002aa4:	781b      	ldrb	r3, [r3, #0]
 8002aa6:	2b05      	cmp	r3, #5
 8002aa8:	f040 81e6 	bne.w	8002e78 <tick+0x4b0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <tick+0x214>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	4b51      	ldr	r3, [pc, #324]	; (8002bf8 <tick+0x230>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	429a      	cmp	r2, r3
 8002ab6:	da05      	bge.n	8002ac4 <tick+0xfc>
                    IRDUTY50;
 8002ab8:	4b4b      	ldr	r3, [pc, #300]	; (8002be8 <tick+0x220>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ac2:	e003      	b.n	8002acc <tick+0x104>
                    IRDUTY0;
 8002ac4:	4b48      	ldr	r3, [pc, #288]	; (8002be8 <tick+0x220>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002acc:	4b43      	ldr	r3, [pc, #268]	; (8002bdc <tick+0x214>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	3301      	adds	r3, #1
 8002ad2:	4a42      	ldr	r2, [pc, #264]	; (8002bdc <tick+0x214>)
 8002ad4:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8002ad6:	4b48      	ldr	r3, [pc, #288]	; (8002bf8 <tick+0x230>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	4b48      	ldr	r3, [pc, #288]	; (8002bfc <tick+0x234>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	441a      	add	r2, r3
 8002ae0:	4b3e      	ldr	r3, [pc, #248]	; (8002bdc <tick+0x214>)
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	f300 81c7 	bgt.w	8002e78 <tick+0x4b0>
                    TIR_work.state = Data;
 8002aea:	4b3c      	ldr	r3, [pc, #240]	; (8002bdc <tick+0x214>)
 8002aec:	2202      	movs	r2, #2
 8002aee:	701a      	strb	r2, [r3, #0]
            break;
 8002af0:	e1c2      	b.n	8002e78 <tick+0x4b0>
        case Data:
            if (TIR_data.format == NEC) {
 8002af2:	4b3b      	ldr	r3, [pc, #236]	; (8002be0 <tick+0x218>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b01      	cmp	r3, #1
 8002af8:	d15c      	bne.n	8002bb4 <tick+0x1ec>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8002afa:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <tick+0x214>)
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10a      	bne.n	8002b18 <tick+0x150>
                    IRDUTY50;
 8002b02:	4b39      	ldr	r3, [pc, #228]	; (8002be8 <tick+0x220>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b0a:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002b0c:	4b33      	ldr	r3, [pc, #204]	; (8002bdc <tick+0x214>)
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	3301      	adds	r3, #1
 8002b12:	4a32      	ldr	r2, [pc, #200]	; (8002bdc <tick+0x214>)
 8002b14:	60d3      	str	r3, [r2, #12]
 8002b16:	e042      	b.n	8002b9e <tick+0x1d6>
                } else {
                    IRDUTY0;
 8002b18:	4b33      	ldr	r3, [pc, #204]	; (8002be8 <tick+0x220>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002b20:	4b2e      	ldr	r3, [pc, #184]	; (8002bdc <tick+0x214>)
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	da00      	bge.n	8002b2a <tick+0x162>
 8002b28:	3307      	adds	r3, #7
 8002b2a:	10db      	asrs	r3, r3, #3
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <tick+0x218>)
 8002b30:	4413      	add	r3, r2
 8002b32:	7a1b      	ldrb	r3, [r3, #8]
 8002b34:	4619      	mov	r1, r3
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <tick+0x214>)
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	425a      	negs	r2, r3
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	f002 0207 	and.w	r2, r2, #7
 8002b44:	bf58      	it	pl
 8002b46:	4253      	negpl	r3, r2
 8002b48:	fa41 f303 	asr.w	r3, r1, r3
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d012      	beq.n	8002b7a <tick+0x1b2>
                        if (3 <= TIR_work.data) {
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <tick+0x214>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	dd08      	ble.n	8002b6e <tick+0x1a6>
                            TIR_work.bitcount++;
 8002b5c:	4b1f      	ldr	r3, [pc, #124]	; (8002bdc <tick+0x214>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	3301      	adds	r3, #1
 8002b62:	4a1e      	ldr	r2, [pc, #120]	; (8002bdc <tick+0x214>)
 8002b64:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <tick+0x214>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	60da      	str	r2, [r3, #12]
 8002b6c:	e017      	b.n	8002b9e <tick+0x1d6>
                        } else {
                            TIR_work.data++;
 8002b6e:	4b1b      	ldr	r3, [pc, #108]	; (8002bdc <tick+0x214>)
 8002b70:	68db      	ldr	r3, [r3, #12]
 8002b72:	3301      	adds	r3, #1
 8002b74:	4a19      	ldr	r2, [pc, #100]	; (8002bdc <tick+0x214>)
 8002b76:	60d3      	str	r3, [r2, #12]
 8002b78:	e011      	b.n	8002b9e <tick+0x1d6>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8002b7a:	4b18      	ldr	r3, [pc, #96]	; (8002bdc <tick+0x214>)
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	dd08      	ble.n	8002b94 <tick+0x1cc>
                            TIR_work.bitcount++;
 8002b82:	4b16      	ldr	r3, [pc, #88]	; (8002bdc <tick+0x214>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a14      	ldr	r2, [pc, #80]	; (8002bdc <tick+0x214>)
 8002b8a:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002b8c:	4b13      	ldr	r3, [pc, #76]	; (8002bdc <tick+0x214>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	60da      	str	r2, [r3, #12]
 8002b92:	e004      	b.n	8002b9e <tick+0x1d6>
                        } else {
                            TIR_work.data++;
 8002b94:	4b11      	ldr	r3, [pc, #68]	; (8002bdc <tick+0x214>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a10      	ldr	r2, [pc, #64]	; (8002bdc <tick+0x214>)
 8002b9c:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002b9e:	4b10      	ldr	r3, [pc, #64]	; (8002be0 <tick+0x218>)
 8002ba0:	685a      	ldr	r2, [r3, #4]
 8002ba2:	4b0e      	ldr	r3, [pc, #56]	; (8002bdc <tick+0x214>)
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	429a      	cmp	r2, r3
 8002ba8:	f300 8168 	bgt.w	8002e7c <tick+0x4b4>
                    TIR_work.state = Trailer;
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <tick+0x214>)
 8002bae:	2203      	movs	r2, #3
 8002bb0:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8002bb2:	e163      	b.n	8002e7c <tick+0x4b4>
            } else if (TIR_data.format == AEHA) {
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <tick+0x218>)
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b03      	cmp	r3, #3
 8002bba:	d16f      	bne.n	8002c9c <tick+0x2d4>
                if (TIR_work.data == 0) {
 8002bbc:	4b07      	ldr	r3, [pc, #28]	; (8002bdc <tick+0x214>)
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d11d      	bne.n	8002c00 <tick+0x238>
                    IRDUTY50;
 8002bc4:	4b08      	ldr	r3, [pc, #32]	; (8002be8 <tick+0x220>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002bcc:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002bce:	4b03      	ldr	r3, [pc, #12]	; (8002bdc <tick+0x214>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	3301      	adds	r3, #1
 8002bd4:	4a01      	ldr	r2, [pc, #4]	; (8002bdc <tick+0x214>)
 8002bd6:	60d3      	str	r3, [r2, #12]
 8002bd8:	e055      	b.n	8002c86 <tick+0x2be>
 8002bda:	bf00      	nop
 8002bdc:	200001c8 	.word	0x200001c8
 8002be0:	20000180 	.word	0x20000180
 8002be4:	0800a938 	.word	0x0800a938
 8002be8:	20000254 	.word	0x20000254
 8002bec:	0800a93c 	.word	0x0800a93c
 8002bf0:	0800a940 	.word	0x0800a940
 8002bf4:	0800a944 	.word	0x0800a944
 8002bf8:	0800a948 	.word	0x0800a948
 8002bfc:	0800a94c 	.word	0x0800a94c
                    IRDUTY0;
 8002c00:	4b88      	ldr	r3, [pc, #544]	; (8002e24 <tick+0x45c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2200      	movs	r2, #0
 8002c06:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002c08:	4b87      	ldr	r3, [pc, #540]	; (8002e28 <tick+0x460>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	da00      	bge.n	8002c12 <tick+0x24a>
 8002c10:	3307      	adds	r3, #7
 8002c12:	10db      	asrs	r3, r3, #3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4b85      	ldr	r3, [pc, #532]	; (8002e2c <tick+0x464>)
 8002c18:	4413      	add	r3, r2
 8002c1a:	7a1b      	ldrb	r3, [r3, #8]
 8002c1c:	4619      	mov	r1, r3
 8002c1e:	4b82      	ldr	r3, [pc, #520]	; (8002e28 <tick+0x460>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	425a      	negs	r2, r3
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	f002 0207 	and.w	r2, r2, #7
 8002c2c:	bf58      	it	pl
 8002c2e:	4253      	negpl	r3, r2
 8002c30:	fa41 f303 	asr.w	r3, r1, r3
 8002c34:	f003 0301 	and.w	r3, r3, #1
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <tick+0x29a>
                        if (3 <= TIR_work.data) {
 8002c3c:	4b7a      	ldr	r3, [pc, #488]	; (8002e28 <tick+0x460>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	dd08      	ble.n	8002c56 <tick+0x28e>
                            TIR_work.bitcount++;
 8002c44:	4b78      	ldr	r3, [pc, #480]	; (8002e28 <tick+0x460>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	3301      	adds	r3, #1
 8002c4a:	4a77      	ldr	r2, [pc, #476]	; (8002e28 <tick+0x460>)
 8002c4c:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c4e:	4b76      	ldr	r3, [pc, #472]	; (8002e28 <tick+0x460>)
 8002c50:	2200      	movs	r2, #0
 8002c52:	60da      	str	r2, [r3, #12]
 8002c54:	e017      	b.n	8002c86 <tick+0x2be>
                            TIR_work.data++;
 8002c56:	4b74      	ldr	r3, [pc, #464]	; (8002e28 <tick+0x460>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	3301      	adds	r3, #1
 8002c5c:	4a72      	ldr	r2, [pc, #456]	; (8002e28 <tick+0x460>)
 8002c5e:	60d3      	str	r3, [r2, #12]
 8002c60:	e011      	b.n	8002c86 <tick+0x2be>
                        if (1 <= TIR_work.data) {
 8002c62:	4b71      	ldr	r3, [pc, #452]	; (8002e28 <tick+0x460>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	dd08      	ble.n	8002c7c <tick+0x2b4>
                            TIR_work.bitcount++;
 8002c6a:	4b6f      	ldr	r3, [pc, #444]	; (8002e28 <tick+0x460>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	3301      	adds	r3, #1
 8002c70:	4a6d      	ldr	r2, [pc, #436]	; (8002e28 <tick+0x460>)
 8002c72:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c74:	4b6c      	ldr	r3, [pc, #432]	; (8002e28 <tick+0x460>)
 8002c76:	2200      	movs	r2, #0
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	e004      	b.n	8002c86 <tick+0x2be>
                            TIR_work.data++;
 8002c7c:	4b6a      	ldr	r3, [pc, #424]	; (8002e28 <tick+0x460>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	3301      	adds	r3, #1
 8002c82:	4a69      	ldr	r2, [pc, #420]	; (8002e28 <tick+0x460>)
 8002c84:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002c86:	4b69      	ldr	r3, [pc, #420]	; (8002e2c <tick+0x464>)
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <tick+0x460>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	f300 80f4 	bgt.w	8002e7c <tick+0x4b4>
                    TIR_work.state = Trailer;
 8002c94:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <tick+0x460>)
 8002c96:	2203      	movs	r2, #3
 8002c98:	701a      	strb	r2, [r3, #0]
            break;
 8002c9a:	e0ef      	b.n	8002e7c <tick+0x4b4>
            } else if (TIR_data.format == SONY) {
 8002c9c:	4b63      	ldr	r3, [pc, #396]	; (8002e2c <tick+0x464>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b05      	cmp	r3, #5
 8002ca2:	f040 80eb 	bne.w	8002e7c <tick+0x4b4>
                if (TIR_work.data == 0) {
 8002ca6:	4b60      	ldr	r3, [pc, #384]	; (8002e28 <tick+0x460>)
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <tick+0x2fa>
                    IRDUTY0;
 8002cae:	4b5d      	ldr	r3, [pc, #372]	; (8002e24 <tick+0x45c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002cb6:	4b5c      	ldr	r3, [pc, #368]	; (8002e28 <tick+0x460>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	3301      	adds	r3, #1
 8002cbc:	4a5a      	ldr	r2, [pc, #360]	; (8002e28 <tick+0x460>)
 8002cbe:	60d3      	str	r3, [r2, #12]
 8002cc0:	e043      	b.n	8002d4a <tick+0x382>
                    IRDUTY50;
 8002cc2:	4b58      	ldr	r3, [pc, #352]	; (8002e24 <tick+0x45c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002cca:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002ccc:	4b56      	ldr	r3, [pc, #344]	; (8002e28 <tick+0x460>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	da00      	bge.n	8002cd6 <tick+0x30e>
 8002cd4:	3307      	adds	r3, #7
 8002cd6:	10db      	asrs	r3, r3, #3
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b54      	ldr	r3, [pc, #336]	; (8002e2c <tick+0x464>)
 8002cdc:	4413      	add	r3, r2
 8002cde:	7a1b      	ldrb	r3, [r3, #8]
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <tick+0x460>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	425a      	negs	r2, r3
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	f002 0207 	and.w	r2, r2, #7
 8002cf0:	bf58      	it	pl
 8002cf2:	4253      	negpl	r3, r2
 8002cf4:	fa41 f303 	asr.w	r3, r1, r3
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d012      	beq.n	8002d26 <tick+0x35e>
                        if (2 <= TIR_work.data) {
 8002d00:	4b49      	ldr	r3, [pc, #292]	; (8002e28 <tick+0x460>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	dd08      	ble.n	8002d1a <tick+0x352>
                            TIR_work.bitcount++;
 8002d08:	4b47      	ldr	r3, [pc, #284]	; (8002e28 <tick+0x460>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a46      	ldr	r2, [pc, #280]	; (8002e28 <tick+0x460>)
 8002d10:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d12:	4b45      	ldr	r3, [pc, #276]	; (8002e28 <tick+0x460>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	60da      	str	r2, [r3, #12]
 8002d18:	e017      	b.n	8002d4a <tick+0x382>
                            TIR_work.data++;
 8002d1a:	4b43      	ldr	r3, [pc, #268]	; (8002e28 <tick+0x460>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	3301      	adds	r3, #1
 8002d20:	4a41      	ldr	r2, [pc, #260]	; (8002e28 <tick+0x460>)
 8002d22:	60d3      	str	r3, [r2, #12]
 8002d24:	e011      	b.n	8002d4a <tick+0x382>
                        if (1 <= TIR_work.data) {
 8002d26:	4b40      	ldr	r3, [pc, #256]	; (8002e28 <tick+0x460>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	dd08      	ble.n	8002d40 <tick+0x378>
                            TIR_work.bitcount++;
 8002d2e:	4b3e      	ldr	r3, [pc, #248]	; (8002e28 <tick+0x460>)
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	3301      	adds	r3, #1
 8002d34:	4a3c      	ldr	r2, [pc, #240]	; (8002e28 <tick+0x460>)
 8002d36:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d38:	4b3b      	ldr	r3, [pc, #236]	; (8002e28 <tick+0x460>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
 8002d3e:	e004      	b.n	8002d4a <tick+0x382>
                            TIR_work.data++;
 8002d40:	4b39      	ldr	r3, [pc, #228]	; (8002e28 <tick+0x460>)
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	3301      	adds	r3, #1
 8002d46:	4a38      	ldr	r2, [pc, #224]	; (8002e28 <tick+0x460>)
 8002d48:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002d4a:	4b38      	ldr	r3, [pc, #224]	; (8002e2c <tick+0x464>)
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	4b36      	ldr	r3, [pc, #216]	; (8002e28 <tick+0x460>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	f300 8092 	bgt.w	8002e7c <tick+0x4b4>
                    TIR_work.state = Trailer;
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <tick+0x460>)
 8002d5a:	2203      	movs	r2, #3
 8002d5c:	701a      	strb	r2, [r3, #0]
            break;
 8002d5e:	e08d      	b.n	8002e7c <tick+0x4b4>
        case Trailer:
            if (TIR_data.format == NEC) {
 8002d60:	4b32      	ldr	r3, [pc, #200]	; (8002e2c <tick+0x464>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d127      	bne.n	8002db8 <tick+0x3f0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8002d68:	4b2f      	ldr	r3, [pc, #188]	; (8002e28 <tick+0x460>)
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	4b30      	ldr	r3, [pc, #192]	; (8002e30 <tick+0x468>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	da05      	bge.n	8002d80 <tick+0x3b8>
                    IRDUTY50;
 8002d74:	4b2b      	ldr	r3, [pc, #172]	; (8002e24 <tick+0x45c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002d7c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d7e:	e003      	b.n	8002d88 <tick+0x3c0>
                } else {
                    IRDUTY0;
 8002d80:	4b28      	ldr	r3, [pc, #160]	; (8002e24 <tick+0x45c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8002d88:	4b27      	ldr	r3, [pc, #156]	; (8002e28 <tick+0x460>)
 8002d8a:	691b      	ldr	r3, [r3, #16]
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	4a26      	ldr	r2, [pc, #152]	; (8002e28 <tick+0x460>)
 8002d90:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8002d92:	4b27      	ldr	r3, [pc, #156]	; (8002e30 <tick+0x468>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <tick+0x46c>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	441a      	add	r2, r3
 8002d9c:	4b22      	ldr	r3, [pc, #136]	; (8002e28 <tick+0x460>)
 8002d9e:	691b      	ldr	r3, [r3, #16]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	dc6d      	bgt.n	8002e80 <tick+0x4b8>
                    TIR_work.state = TIR_Idle;
 8002da4:	4b20      	ldr	r3, [pc, #128]	; (8002e28 <tick+0x460>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8002daa:	4823      	ldr	r0, [pc, #140]	; (8002e38 <tick+0x470>)
 8002dac:	f004 fc08 	bl	80075c0 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
 8002db0:	2028      	movs	r0, #40	; 0x28
 8002db2:	f002 ff60 	bl	8005c76 <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8002db6:	e063      	b.n	8002e80 <tick+0x4b8>
            } else if (TIR_data.format == AEHA) {
 8002db8:	4b1c      	ldr	r3, [pc, #112]	; (8002e2c <tick+0x464>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d121      	bne.n	8002e04 <tick+0x43c>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8002dc0:	4b19      	ldr	r3, [pc, #100]	; (8002e28 <tick+0x460>)
 8002dc2:	691a      	ldr	r2, [r3, #16]
 8002dc4:	4b1d      	ldr	r3, [pc, #116]	; (8002e3c <tick+0x474>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	da05      	bge.n	8002dd8 <tick+0x410>
                    IRDUTY50;
 8002dcc:	4b15      	ldr	r3, [pc, #84]	; (8002e24 <tick+0x45c>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002dd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002dd6:	e003      	b.n	8002de0 <tick+0x418>
                    IRDUTY0;
 8002dd8:	4b12      	ldr	r3, [pc, #72]	; (8002e24 <tick+0x45c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002de0:	4b11      	ldr	r3, [pc, #68]	; (8002e28 <tick+0x460>)
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	3301      	adds	r3, #1
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <tick+0x460>)
 8002de8:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8002dea:	4b14      	ldr	r3, [pc, #80]	; (8002e3c <tick+0x474>)
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4b14      	ldr	r3, [pc, #80]	; (8002e40 <tick+0x478>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	441a      	add	r2, r3
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <tick+0x460>)
 8002df6:	691b      	ldr	r3, [r3, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	dc41      	bgt.n	8002e80 <tick+0x4b8>
                    TIR_work.state = TIR_Idle;
 8002dfc:	4b0a      	ldr	r3, [pc, #40]	; (8002e28 <tick+0x460>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	701a      	strb	r2, [r3, #0]
            break;
 8002e02:	e03d      	b.n	8002e80 <tick+0x4b8>
            } else if (TIR_data.format == SONY) {
 8002e04:	4b09      	ldr	r3, [pc, #36]	; (8002e2c <tick+0x464>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b05      	cmp	r3, #5
 8002e0a:	d139      	bne.n	8002e80 <tick+0x4b8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8002e0c:	4b06      	ldr	r3, [pc, #24]	; (8002e28 <tick+0x460>)
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	4b0c      	ldr	r3, [pc, #48]	; (8002e44 <tick+0x47c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	429a      	cmp	r2, r3
 8002e16:	da17      	bge.n	8002e48 <tick+0x480>
                    IRDUTY50;
 8002e18:	4b02      	ldr	r3, [pc, #8]	; (8002e24 <tick+0x45c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002e20:	635a      	str	r2, [r3, #52]	; 0x34
 8002e22:	e015      	b.n	8002e50 <tick+0x488>
 8002e24:	20000254 	.word	0x20000254
 8002e28:	200001c8 	.word	0x200001c8
 8002e2c:	20000180 	.word	0x20000180
 8002e30:	0800a950 	.word	0x0800a950
 8002e34:	0800a954 	.word	0x0800a954
 8002e38:	20000384 	.word	0x20000384
 8002e3c:	0800a958 	.word	0x0800a958
 8002e40:	0800a95c 	.word	0x0800a95c
 8002e44:	0800a960 	.word	0x0800a960
                    IRDUTY0;
 8002e48:	4b0f      	ldr	r3, [pc, #60]	; (8002e88 <tick+0x4c0>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002e50:	4b0e      	ldr	r3, [pc, #56]	; (8002e8c <tick+0x4c4>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a0d      	ldr	r2, [pc, #52]	; (8002e8c <tick+0x4c4>)
 8002e58:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	; (8002e90 <tick+0x4c8>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <tick+0x4cc>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	441a      	add	r2, r3
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <tick+0x4c4>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dc09      	bgt.n	8002e80 <tick+0x4b8>
                    TIR_work.state = TIR_Idle;
 8002e6c:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <tick+0x4c4>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
            break;
 8002e72:	e005      	b.n	8002e80 <tick+0x4b8>
        default:
            break;
 8002e74:	bf00      	nop
 8002e76:	e004      	b.n	8002e82 <tick+0x4ba>
            break;
 8002e78:	bf00      	nop
 8002e7a:	e002      	b.n	8002e82 <tick+0x4ba>
            break;
 8002e7c:	bf00      	nop
 8002e7e:	e000      	b.n	8002e82 <tick+0x4ba>
            break;
 8002e80:	bf00      	nop
    }
    UNLOCK();
}
 8002e82:	bf00      	nop
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	20000254 	.word	0x20000254
 8002e8c:	200001c8 	.word	0x200001c8
 8002e90:	0800a960 	.word	0x0800a960
 8002e94:	0800a964 	.word	0x0800a964

08002e98 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8002ea2:	4b21      	ldr	r3, [pc, #132]	; (8002f28 <CanInit+0x90>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ea8:	4b1f      	ldr	r3, [pc, #124]	; (8002f28 <CanInit+0x90>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002eae:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <CanInit+0x90>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	0c1b      	lsrs	r3, r3, #16
 8002eb8:	4a1b      	ldr	r2, [pc, #108]	; (8002f28 <CanInit+0x90>)
 8002eba:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	4a18      	ldr	r2, [pc, #96]	; (8002f28 <CanInit+0x90>)
 8002ec6:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	0c1b      	lsrs	r3, r3, #16
 8002ecc:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <CanInit+0x90>)
 8002ece:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	4a13      	ldr	r2, [pc, #76]	; (8002f28 <CanInit+0x90>)
 8002eda:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002edc:	4b12      	ldr	r3, [pc, #72]	; (8002f28 <CanInit+0x90>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8002ee2:	4b11      	ldr	r3, [pc, #68]	; (8002f28 <CanInit+0x90>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <CanInit+0x90>)
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8002eee:	480f      	ldr	r0, [pc, #60]	; (8002f2c <CanInit+0x94>)
 8002ef0:	f002 f8ea 	bl	80050c8 <HAL_CAN_Start>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <CanInit+0x66>
 8002efa:	f000 fc7d 	bl	80037f8 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8002efe:	2102      	movs	r1, #2
 8002f00:	480a      	ldr	r0, [pc, #40]	; (8002f2c <CanInit+0x94>)
 8002f02:	f002 fb47 	bl	8005594 <HAL_CAN_ActivateNotification>
 8002f06:	4603      	mov	r3, r0
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d000      	beq.n	8002f0e <CanInit+0x76>
 8002f0c:	e7fe      	b.n	8002f0c <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002f0e:	4906      	ldr	r1, [pc, #24]	; (8002f28 <CanInit+0x90>)
 8002f10:	4806      	ldr	r0, [pc, #24]	; (8002f2c <CanInit+0x94>)
 8002f12:	f001 fff9 	bl	8004f08 <HAL_CAN_ConfigFilter>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8002f1c:	f000 fc6c 	bl	80037f8 <Error_Handler>
    }
}
 8002f20:	bf00      	nop
 8002f22:	3708      	adds	r7, #8
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}
 8002f28:	20000204 	.word	0x20000204
 8002f2c:	2000022c 	.word	0x2000022c

08002f30 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b08c      	sub	sp, #48	; 0x30
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	60f8      	str	r0, [r7, #12]
 8002f38:	60b9      	str	r1, [r7, #8]
 8002f3a:	4611      	mov	r1, r2
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	460b      	mov	r3, r1
 8002f40:	71fb      	strb	r3, [r7, #7]
 8002f42:	4613      	mov	r3, r2
 8002f44:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8002f52:	79bb      	ldrb	r3, [r7, #6]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d001      	beq.n	8002f5c <sendCan+0x2c>
 8002f58:	2304      	movs	r3, #4
 8002f5a:	e000      	b.n	8002f5e <sendCan+0x2e>
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8002f60:	79fb      	ldrb	r3, [r7, #7]
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8002f64:	2301      	movs	r3, #1
 8002f66:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8002f6a:	480d      	ldr	r0, [pc, #52]	; (8002fa0 <sendCan+0x70>)
 8002f6c:	f002 f9cb 	bl	8005306 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002f70:	4603      	mov	r3, r0
 8002f72:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00d      	beq.n	8002f96 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8002f7a:	f107 0310 	add.w	r3, r7, #16
 8002f7e:	f107 0114 	add.w	r1, r7, #20
 8002f82:	68ba      	ldr	r2, [r7, #8]
 8002f84:	4806      	ldr	r0, [pc, #24]	; (8002fa0 <sendCan+0x70>)
 8002f86:	f002 f8e3 	bl	8005150 <HAL_CAN_AddTxMessage>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d000      	beq.n	8002f96 <sendCan+0x66>
 8002f94:	e7fe      	b.n	8002f94 <sendCan+0x64>
    }
}
 8002f96:	bf00      	nop
 8002f98:	3730      	adds	r7, #48	; 0x30
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	2000022c 	.word	0x2000022c

08002fa4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b082      	sub	sp, #8
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8002fac:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8002fae:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002fb0:	2100      	movs	r1, #0
 8002fb2:	480a      	ldr	r0, [pc, #40]	; (8002fdc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002fb4:	f002 f9dc 	bl	8005370 <HAL_CAN_GetRxMessage>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d000      	beq.n	8002fc0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8002fbe:	e7fe      	b.n	8002fbe <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8002fc0:	4b07      	ldr	r3, [pc, #28]	; (8002fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	4a06      	ldr	r2, [pc, #24]	; (8002fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002fc8:	6013      	str	r3, [r2, #0]

}
 8002fca:	bf00      	nop
 8002fcc:	3708      	adds	r7, #8
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200001e0 	.word	0x200001e0
 8002fd8:	200001e8 	.word	0x200001e8
 8002fdc:	2000022c 	.word	0x2000022c
 8002fe0:	200001dc 	.word	0x200001dc

08002fe4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	2364      	movs	r3, #100	; 0x64
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	4803      	ldr	r0, [pc, #12]	; (8003008 <_write+0x24>)
 8002ffa:	f005 fc97 	bl	800892c <HAL_UART_Transmit>
	return (len);
 8002ffe:	687b      	ldr	r3, [r7, #4]
}
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	200004a0 	.word	0x200004a0

0800300c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003010:	f001 fdfd 	bl	8004c0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003014:	f000 f83a 	bl	800308c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003018:	f000 fac6 	bl	80035a8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800301c:	f000 fa94 	bl	8003548 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8003020:	f000 f8a0 	bl	8003164 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003024:	f000 f8d4 	bl	80031d0 <MX_TIM2_Init>
  MX_UART8_Init();
 8003028:	f000 fa5e 	bl	80034e8 <MX_UART8_Init>
  MX_TIM6_Init();
 800302c:	f000 f994 	bl	8003358 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003030:	f000 f9c8 	bl	80033c4 <MX_TIM7_Init>
  MX_TIM5_Init();
 8003034:	f000 f942 	bl	80032bc <MX_TIM5_Init>
  MX_TIM9_Init();
 8003038:	f000 f9fa 	bl	8003430 <MX_TIM9_Init>
  MX_TIM14_Init();
 800303c:	f000 fa32 	bl	80034a4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//uss timer, 2khz
 8003040:	480c      	ldr	r0, [pc, #48]	; (8003074 <main+0x68>)
 8003042:	f004 fa45 	bl	80074d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 8003046:	480c      	ldr	r0, [pc, #48]	; (8003078 <main+0x6c>)
 8003048:	f004 fa42 	bl	80074d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
 800304c:	480b      	ldr	r0, [pc, #44]	; (800307c <main+0x70>)
 800304e:	f004 fa3f 	bl	80074d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8003052:	480b      	ldr	r0, [pc, #44]	; (8003080 <main+0x74>)
 8003054:	f004 fa3c 	bl	80074d0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim14);//IR NEC timer, 1Mhz
 8003058:	480a      	ldr	r0, [pc, #40]	; (8003084 <main+0x78>)
 800305a:	f004 fa39 	bl	80074d0 <HAL_TIM_Base_Start_IT>


//  HAL_TIMEx_OCN_Start(&htim2, TIM_CHANNEL_1);


  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 800305e:	2100      	movs	r1, #0
 8003060:	4809      	ldr	r0, [pc, #36]	; (8003088 <main+0x7c>)
 8003062:	f004 fb3d 	bl	80076e0 <HAL_TIM_PWM_Start_IT>
//
  htim2.Instance->CCR1 = 100;
 8003066:	4b08      	ldr	r3, [pc, #32]	; (8003088 <main+0x7c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2264      	movs	r2, #100	; 0x64
 800306c:	635a      	str	r2, [r3, #52]	; 0x34
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 800306e:	f7ff fa35 	bl	80024dc <spinonce>
 8003072:	e7fc      	b.n	800306e <main+0x62>
 8003074:	200002a0 	.word	0x200002a0
 8003078:	200002ec 	.word	0x200002ec
 800307c:	20000338 	.word	0x20000338
 8003080:	20000384 	.word	0x20000384
 8003084:	200003d0 	.word	0x200003d0
 8003088:	20000254 	.word	0x20000254

0800308c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b094      	sub	sp, #80	; 0x50
 8003090:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003092:	f107 0320 	add.w	r3, r7, #32
 8003096:	2230      	movs	r2, #48	; 0x30
 8003098:	2100      	movs	r1, #0
 800309a:	4618      	mov	r0, r3
 800309c:	f006 fc8e 	bl	80099bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030a0:	f107 030c 	add.w	r3, r7, #12
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b2a      	ldr	r3, [pc, #168]	; (800315c <SystemClock_Config+0xd0>)
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	4a29      	ldr	r2, [pc, #164]	; (800315c <SystemClock_Config+0xd0>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6413      	str	r3, [r2, #64]	; 0x40
 80030bc:	4b27      	ldr	r3, [pc, #156]	; (800315c <SystemClock_Config+0xd0>)
 80030be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60bb      	str	r3, [r7, #8]
 80030c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030c8:	4b25      	ldr	r3, [pc, #148]	; (8003160 <SystemClock_Config+0xd4>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a24      	ldr	r2, [pc, #144]	; (8003160 <SystemClock_Config+0xd4>)
 80030ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030d2:	6013      	str	r3, [r2, #0]
 80030d4:	4b22      	ldr	r3, [pc, #136]	; (8003160 <SystemClock_Config+0xd4>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030e0:	2301      	movs	r3, #1
 80030e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80030e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030ea:	2302      	movs	r3, #2
 80030ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80030f4:	2304      	movs	r3, #4
 80030f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80030f8:	23d8      	movs	r3, #216	; 0xd8
 80030fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030fc:	2302      	movs	r3, #2
 80030fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003100:	2302      	movs	r3, #2
 8003102:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003104:	f107 0320 	add.w	r3, r7, #32
 8003108:	4618      	mov	r0, r3
 800310a:	f003 f8cf 	bl	80062ac <HAL_RCC_OscConfig>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003114:	f000 fb70 	bl	80037f8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003118:	f003 f878 	bl	800620c <HAL_PWREx_EnableOverDrive>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d001      	beq.n	8003126 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003122:	f000 fb69 	bl	80037f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003126:	230f      	movs	r3, #15
 8003128:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800312a:	2302      	movs	r3, #2
 800312c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003132:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003136:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003138:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800313c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800313e:	f107 030c 	add.w	r3, r7, #12
 8003142:	2107      	movs	r1, #7
 8003144:	4618      	mov	r0, r3
 8003146:	f003 fb55 	bl	80067f4 <HAL_RCC_ClockConfig>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8003150:	f000 fb52 	bl	80037f8 <Error_Handler>
  }
}
 8003154:	bf00      	nop
 8003156:	3750      	adds	r7, #80	; 0x50
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}
 800315c:	40023800 	.word	0x40023800
 8003160:	40007000 	.word	0x40007000

08003164 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003168:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <MX_CAN1_Init+0x64>)
 800316a:	4a18      	ldr	r2, [pc, #96]	; (80031cc <MX_CAN1_Init+0x68>)
 800316c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 800316e:	4b16      	ldr	r3, [pc, #88]	; (80031c8 <MX_CAN1_Init+0x64>)
 8003170:	221b      	movs	r2, #27
 8003172:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003174:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <MX_CAN1_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800317a:	4b13      	ldr	r3, [pc, #76]	; (80031c8 <MX_CAN1_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <MX_CAN1_Init+0x64>)
 8003182:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003186:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <MX_CAN1_Init+0x64>)
 800318a:	2200      	movs	r2, #0
 800318c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800318e:	4b0e      	ldr	r3, [pc, #56]	; (80031c8 <MX_CAN1_Init+0x64>)
 8003190:	2200      	movs	r2, #0
 8003192:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <MX_CAN1_Init+0x64>)
 8003196:	2201      	movs	r2, #1
 8003198:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800319a:	4b0b      	ldr	r3, [pc, #44]	; (80031c8 <MX_CAN1_Init+0x64>)
 800319c:	2200      	movs	r2, #0
 800319e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80031a0:	4b09      	ldr	r3, [pc, #36]	; (80031c8 <MX_CAN1_Init+0x64>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80031a6:	4b08      	ldr	r3, [pc, #32]	; (80031c8 <MX_CAN1_Init+0x64>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80031ac:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <MX_CAN1_Init+0x64>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80031b2:	4805      	ldr	r0, [pc, #20]	; (80031c8 <MX_CAN1_Init+0x64>)
 80031b4:	f001 fdac 	bl	8004d10 <HAL_CAN_Init>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80031be:	f000 fb1b 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80031c2:	bf00      	nop
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	2000022c 	.word	0x2000022c
 80031cc:	40006400 	.word	0x40006400

080031d0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	; 0x38
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80031da:	2200      	movs	r2, #0
 80031dc:	601a      	str	r2, [r3, #0]
 80031de:	605a      	str	r2, [r3, #4]
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e4:	f107 031c 	add.w	r3, r7, #28
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
 80031ec:	605a      	str	r2, [r3, #4]
 80031ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80031f0:	463b      	mov	r3, r7
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	611a      	str	r2, [r3, #16]
 80031fe:	615a      	str	r2, [r3, #20]
 8003200:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003202:	4b2d      	ldr	r3, [pc, #180]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003204:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003208:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 800320a:	4b2b      	ldr	r3, [pc, #172]	; (80032b8 <MX_TIM2_Init+0xe8>)
 800320c:	226b      	movs	r2, #107	; 0x6b
 800320e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003210:	4b29      	ldr	r3, [pc, #164]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003212:	2200      	movs	r2, #0
 8003214:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 263-1;
 8003216:	4b28      	ldr	r3, [pc, #160]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003218:	f44f 7283 	mov.w	r2, #262	; 0x106
 800321c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800321e:	4b26      	ldr	r3, [pc, #152]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003220:	2200      	movs	r2, #0
 8003222:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003224:	4b24      	ldr	r3, [pc, #144]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003226:	2200      	movs	r2, #0
 8003228:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800322a:	4823      	ldr	r0, [pc, #140]	; (80032b8 <MX_TIM2_Init+0xe8>)
 800322c:	f004 f8f8 	bl	8007420 <HAL_TIM_Base_Init>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8003236:	f000 fadf 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800323a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800323e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003240:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003244:	4619      	mov	r1, r3
 8003246:	481c      	ldr	r0, [pc, #112]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003248:	f004 fdc6 	bl	8007dd8 <HAL_TIM_ConfigClockSource>
 800324c:	4603      	mov	r3, r0
 800324e:	2b00      	cmp	r3, #0
 8003250:	d001      	beq.n	8003256 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8003252:	f000 fad1 	bl	80037f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003256:	4818      	ldr	r0, [pc, #96]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003258:	f004 f9e1 	bl	800761e <HAL_TIM_PWM_Init>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8003262:	f000 fac9 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800326a:	2300      	movs	r3, #0
 800326c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	4619      	mov	r1, r3
 8003274:	4810      	ldr	r0, [pc, #64]	; (80032b8 <MX_TIM2_Init+0xe8>)
 8003276:	f005 fa5f 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 800327a:	4603      	mov	r3, r0
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003280:	f000 faba 	bl	80037f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003284:	2360      	movs	r3, #96	; 0x60
 8003286:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 131-1;
 8003288:	2382      	movs	r3, #130	; 0x82
 800328a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800328c:	2300      	movs	r3, #0
 800328e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003290:	2300      	movs	r3, #0
 8003292:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003294:	463b      	mov	r3, r7
 8003296:	2200      	movs	r2, #0
 8003298:	4619      	mov	r1, r3
 800329a:	4807      	ldr	r0, [pc, #28]	; (80032b8 <MX_TIM2_Init+0xe8>)
 800329c:	f004 fc88 	bl	8007bb0 <HAL_TIM_PWM_ConfigChannel>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d001      	beq.n	80032aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80032a6:	f000 faa7 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80032aa:	4803      	ldr	r0, [pc, #12]	; (80032b8 <MX_TIM2_Init+0xe8>)
 80032ac:	f001 fa80 	bl	80047b0 <HAL_TIM_MspPostInit>

}
 80032b0:	bf00      	nop
 80032b2:	3738      	adds	r7, #56	; 0x38
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000254 	.word	0x20000254

080032bc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80032c2:	f107 0310 	add.w	r3, r7, #16
 80032c6:	2200      	movs	r2, #0
 80032c8:	601a      	str	r2, [r3, #0]
 80032ca:	605a      	str	r2, [r3, #4]
 80032cc:	609a      	str	r2, [r3, #8]
 80032ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80032d0:	1d3b      	adds	r3, r7, #4
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]
 80032d6:	605a      	str	r2, [r3, #4]
 80032d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80032da:	4b1d      	ldr	r3, [pc, #116]	; (8003350 <MX_TIM5_Init+0x94>)
 80032dc:	4a1d      	ldr	r2, [pc, #116]	; (8003354 <MX_TIM5_Init+0x98>)
 80032de:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 80032e0:	4b1b      	ldr	r3, [pc, #108]	; (8003350 <MX_TIM5_Init+0x94>)
 80032e2:	226b      	movs	r2, #107	; 0x6b
 80032e4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032e6:	4b1a      	ldr	r3, [pc, #104]	; (8003350 <MX_TIM5_Init+0x94>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80032ec:	4b18      	ldr	r3, [pc, #96]	; (8003350 <MX_TIM5_Init+0x94>)
 80032ee:	f240 12f3 	movw	r2, #499	; 0x1f3
 80032f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032f4:	4b16      	ldr	r3, [pc, #88]	; (8003350 <MX_TIM5_Init+0x94>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032fa:	4b15      	ldr	r3, [pc, #84]	; (8003350 <MX_TIM5_Init+0x94>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003300:	4813      	ldr	r0, [pc, #76]	; (8003350 <MX_TIM5_Init+0x94>)
 8003302:	f004 f88d 	bl	8007420 <HAL_TIM_Base_Init>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800330c:	f000 fa74 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003314:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003316:	f107 0310 	add.w	r3, r7, #16
 800331a:	4619      	mov	r1, r3
 800331c:	480c      	ldr	r0, [pc, #48]	; (8003350 <MX_TIM5_Init+0x94>)
 800331e:	f004 fd5b 	bl	8007dd8 <HAL_TIM_ConfigClockSource>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003328:	f000 fa66 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800332c:	2300      	movs	r3, #0
 800332e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003330:	2300      	movs	r3, #0
 8003332:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003334:	1d3b      	adds	r3, r7, #4
 8003336:	4619      	mov	r1, r3
 8003338:	4805      	ldr	r0, [pc, #20]	; (8003350 <MX_TIM5_Init+0x94>)
 800333a:	f005 f9fd 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8003344:	f000 fa58 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003348:	bf00      	nop
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}
 8003350:	200002a0 	.word	0x200002a0
 8003354:	40000c00 	.word	0x40000c00

08003358 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800335e:	1d3b      	adds	r3, r7, #4
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <MX_TIM6_Init+0x64>)
 800336a:	4a15      	ldr	r2, [pc, #84]	; (80033c0 <MX_TIM6_Init+0x68>)
 800336c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 800336e:	4b13      	ldr	r3, [pc, #76]	; (80033bc <MX_TIM6_Init+0x64>)
 8003370:	226b      	movs	r2, #107	; 0x6b
 8003372:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003374:	4b11      	ldr	r3, [pc, #68]	; (80033bc <MX_TIM6_Init+0x64>)
 8003376:	2200      	movs	r2, #0
 8003378:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800337a:	4b10      	ldr	r3, [pc, #64]	; (80033bc <MX_TIM6_Init+0x64>)
 800337c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003380:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003382:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <MX_TIM6_Init+0x64>)
 8003384:	2200      	movs	r2, #0
 8003386:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003388:	480c      	ldr	r0, [pc, #48]	; (80033bc <MX_TIM6_Init+0x64>)
 800338a:	f004 f849 	bl	8007420 <HAL_TIM_Base_Init>
 800338e:	4603      	mov	r3, r0
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003394:	f000 fa30 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003398:	2300      	movs	r3, #0
 800339a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800339c:	2300      	movs	r3, #0
 800339e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80033a0:	1d3b      	adds	r3, r7, #4
 80033a2:	4619      	mov	r1, r3
 80033a4:	4805      	ldr	r0, [pc, #20]	; (80033bc <MX_TIM6_Init+0x64>)
 80033a6:	f005 f9c7 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80033b0:	f000 fa22 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	200002ec 	.word	0x200002ec
 80033c0:	40001000 	.word	0x40001000

080033c4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80033ca:	1d3b      	adds	r3, r7, #4
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_TIM7_Init+0x64>)
 80033d6:	4a15      	ldr	r2, [pc, #84]	; (800342c <MX_TIM7_Init+0x68>)
 80033d8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <MX_TIM7_Init+0x64>)
 80033dc:	226b      	movs	r2, #107	; 0x6b
 80033de:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_TIM7_Init+0x64>)
 80033e2:	2200      	movs	r2, #0
 80033e4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80033e6:	4b10      	ldr	r3, [pc, #64]	; (8003428 <MX_TIM7_Init+0x64>)
 80033e8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80033ec:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_TIM7_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80033f4:	480c      	ldr	r0, [pc, #48]	; (8003428 <MX_TIM7_Init+0x64>)
 80033f6:	f004 f813 	bl	8007420 <HAL_TIM_Base_Init>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003400:	f000 f9fa 	bl	80037f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003404:	2300      	movs	r3, #0
 8003406:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800340c:	1d3b      	adds	r3, r7, #4
 800340e:	4619      	mov	r1, r3
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_TIM7_Init+0x64>)
 8003412:	f005 f991 	bl	8008738 <HAL_TIMEx_MasterConfigSynchronization>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d001      	beq.n	8003420 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800341c:	f000 f9ec 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003420:	bf00      	nop
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}
 8003428:	20000338 	.word	0x20000338
 800342c:	40001400 	.word	0x40001400

08003430 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003436:	463b      	mov	r3, r7
 8003438:	2200      	movs	r2, #0
 800343a:	601a      	str	r2, [r3, #0]
 800343c:	605a      	str	r2, [r3, #4]
 800343e:	609a      	str	r2, [r3, #8]
 8003440:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003442:	4b16      	ldr	r3, [pc, #88]	; (800349c <MX_TIM9_Init+0x6c>)
 8003444:	4a16      	ldr	r2, [pc, #88]	; (80034a0 <MX_TIM9_Init+0x70>)
 8003446:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 8003448:	4b14      	ldr	r3, [pc, #80]	; (800349c <MX_TIM9_Init+0x6c>)
 800344a:	22d7      	movs	r2, #215	; 0xd7
 800344c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800344e:	4b13      	ldr	r3, [pc, #76]	; (800349c <MX_TIM9_Init+0x6c>)
 8003450:	2200      	movs	r2, #0
 8003452:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <MX_TIM9_Init+0x6c>)
 8003456:	f240 2231 	movw	r2, #561	; 0x231
 800345a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800345c:	4b0f      	ldr	r3, [pc, #60]	; (800349c <MX_TIM9_Init+0x6c>)
 800345e:	2200      	movs	r2, #0
 8003460:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003462:	4b0e      	ldr	r3, [pc, #56]	; (800349c <MX_TIM9_Init+0x6c>)
 8003464:	2200      	movs	r2, #0
 8003466:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003468:	480c      	ldr	r0, [pc, #48]	; (800349c <MX_TIM9_Init+0x6c>)
 800346a:	f003 ffd9 	bl	8007420 <HAL_TIM_Base_Init>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d001      	beq.n	8003478 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003474:	f000 f9c0 	bl	80037f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003478:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800347c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800347e:	463b      	mov	r3, r7
 8003480:	4619      	mov	r1, r3
 8003482:	4806      	ldr	r0, [pc, #24]	; (800349c <MX_TIM9_Init+0x6c>)
 8003484:	f004 fca8 	bl	8007dd8 <HAL_TIM_ConfigClockSource>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d001      	beq.n	8003492 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800348e:	f000 f9b3 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003492:	bf00      	nop
 8003494:	3710      	adds	r7, #16
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20000384 	.word	0x20000384
 80034a0:	40014000 	.word	0x40014000

080034a4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80034a8:	4b0d      	ldr	r3, [pc, #52]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034aa:	4a0e      	ldr	r2, [pc, #56]	; (80034e4 <MX_TIM14_Init+0x40>)
 80034ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108;
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034b0:	226c      	movs	r2, #108	; 0x6c
 80034b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034b4:	4b0a      	ldr	r3, [pc, #40]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1-1;
 80034ba:	4b09      	ldr	r3, [pc, #36]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034bc:	2200      	movs	r2, #0
 80034be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034c0:	4b07      	ldr	r3, [pc, #28]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034c6:	4b06      	ldr	r3, [pc, #24]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034c8:	2200      	movs	r2, #0
 80034ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80034cc:	4804      	ldr	r0, [pc, #16]	; (80034e0 <MX_TIM14_Init+0x3c>)
 80034ce:	f003 ffa7 	bl	8007420 <HAL_TIM_Base_Init>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d001      	beq.n	80034dc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80034d8:	f000 f98e 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80034dc:	bf00      	nop
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	200003d0 	.word	0x200003d0
 80034e4:	40002000 	.word	0x40002000

080034e8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80034ec:	4b14      	ldr	r3, [pc, #80]	; (8003540 <MX_UART8_Init+0x58>)
 80034ee:	4a15      	ldr	r2, [pc, #84]	; (8003544 <MX_UART8_Init+0x5c>)
 80034f0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <MX_UART8_Init+0x58>)
 80034f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80034f8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80034fa:	4b11      	ldr	r3, [pc, #68]	; (8003540 <MX_UART8_Init+0x58>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003500:	4b0f      	ldr	r3, [pc, #60]	; (8003540 <MX_UART8_Init+0x58>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003506:	4b0e      	ldr	r3, [pc, #56]	; (8003540 <MX_UART8_Init+0x58>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800350c:	4b0c      	ldr	r3, [pc, #48]	; (8003540 <MX_UART8_Init+0x58>)
 800350e:	220c      	movs	r2, #12
 8003510:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003512:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <MX_UART8_Init+0x58>)
 8003514:	2200      	movs	r2, #0
 8003516:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003518:	4b09      	ldr	r3, [pc, #36]	; (8003540 <MX_UART8_Init+0x58>)
 800351a:	2200      	movs	r2, #0
 800351c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800351e:	4b08      	ldr	r3, [pc, #32]	; (8003540 <MX_UART8_Init+0x58>)
 8003520:	2200      	movs	r2, #0
 8003522:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003524:	4b06      	ldr	r3, [pc, #24]	; (8003540 <MX_UART8_Init+0x58>)
 8003526:	2200      	movs	r2, #0
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800352a:	4805      	ldr	r0, [pc, #20]	; (8003540 <MX_UART8_Init+0x58>)
 800352c:	f005 f9b0 	bl	8008890 <HAL_UART_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d001      	beq.n	800353a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8003536:	f000 f95f 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800353a:	bf00      	nop
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	2000041c 	.word	0x2000041c
 8003544:	40007c00 	.word	0x40007c00

08003548 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800354c:	4b14      	ldr	r3, [pc, #80]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 800354e:	4a15      	ldr	r2, [pc, #84]	; (80035a4 <MX_USART1_UART_Init+0x5c>)
 8003550:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003552:	4b13      	ldr	r3, [pc, #76]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003558:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800355a:	4b11      	ldr	r3, [pc, #68]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 800355c:	2200      	movs	r2, #0
 800355e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003560:	4b0f      	ldr	r3, [pc, #60]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003562:	2200      	movs	r2, #0
 8003564:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003566:	4b0e      	ldr	r3, [pc, #56]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003568:	2200      	movs	r2, #0
 800356a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800356c:	4b0c      	ldr	r3, [pc, #48]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 800356e:	220c      	movs	r2, #12
 8003570:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003572:	4b0b      	ldr	r3, [pc, #44]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 800357a:	2200      	movs	r2, #0
 800357c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800357e:	4b08      	ldr	r3, [pc, #32]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003580:	2200      	movs	r2, #0
 8003582:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003584:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 8003586:	2200      	movs	r2, #0
 8003588:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800358a:	4805      	ldr	r0, [pc, #20]	; (80035a0 <MX_USART1_UART_Init+0x58>)
 800358c:	f005 f980 	bl	8008890 <HAL_UART_Init>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003596:	f000 f92f 	bl	80037f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800359a:	bf00      	nop
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	200004a0 	.word	0x200004a0
 80035a4:	40011000 	.word	0x40011000

080035a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b08c      	sub	sp, #48	; 0x30
 80035ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035ae:	f107 031c 	add.w	r3, r7, #28
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	605a      	str	r2, [r3, #4]
 80035b8:	609a      	str	r2, [r3, #8]
 80035ba:	60da      	str	r2, [r3, #12]
 80035bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80035be:	4b87      	ldr	r3, [pc, #540]	; (80037dc <MX_GPIO_Init+0x234>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	4a86      	ldr	r2, [pc, #536]	; (80037dc <MX_GPIO_Init+0x234>)
 80035c4:	f043 0320 	orr.w	r3, r3, #32
 80035c8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ca:	4b84      	ldr	r3, [pc, #528]	; (80037dc <MX_GPIO_Init+0x234>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ce:	f003 0320 	and.w	r3, r3, #32
 80035d2:	61bb      	str	r3, [r7, #24]
 80035d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80035d6:	4b81      	ldr	r3, [pc, #516]	; (80037dc <MX_GPIO_Init+0x234>)
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	4a80      	ldr	r2, [pc, #512]	; (80037dc <MX_GPIO_Init+0x234>)
 80035dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035e0:	6313      	str	r3, [r2, #48]	; 0x30
 80035e2:	4b7e      	ldr	r3, [pc, #504]	; (80037dc <MX_GPIO_Init+0x234>)
 80035e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	617b      	str	r3, [r7, #20]
 80035ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ee:	4b7b      	ldr	r3, [pc, #492]	; (80037dc <MX_GPIO_Init+0x234>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a7a      	ldr	r2, [pc, #488]	; (80037dc <MX_GPIO_Init+0x234>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b78      	ldr	r3, [pc, #480]	; (80037dc <MX_GPIO_Init+0x234>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003606:	4b75      	ldr	r3, [pc, #468]	; (80037dc <MX_GPIO_Init+0x234>)
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	4a74      	ldr	r2, [pc, #464]	; (80037dc <MX_GPIO_Init+0x234>)
 800360c:	f043 0310 	orr.w	r3, r3, #16
 8003610:	6313      	str	r3, [r2, #48]	; 0x30
 8003612:	4b72      	ldr	r3, [pc, #456]	; (80037dc <MX_GPIO_Init+0x234>)
 8003614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003616:	f003 0310 	and.w	r3, r3, #16
 800361a:	60fb      	str	r3, [r7, #12]
 800361c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800361e:	4b6f      	ldr	r3, [pc, #444]	; (80037dc <MX_GPIO_Init+0x234>)
 8003620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003622:	4a6e      	ldr	r2, [pc, #440]	; (80037dc <MX_GPIO_Init+0x234>)
 8003624:	f043 0302 	orr.w	r3, r3, #2
 8003628:	6313      	str	r3, [r2, #48]	; 0x30
 800362a:	4b6c      	ldr	r3, [pc, #432]	; (80037dc <MX_GPIO_Init+0x234>)
 800362c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	60bb      	str	r3, [r7, #8]
 8003634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003636:	4b69      	ldr	r3, [pc, #420]	; (80037dc <MX_GPIO_Init+0x234>)
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	4a68      	ldr	r2, [pc, #416]	; (80037dc <MX_GPIO_Init+0x234>)
 800363c:	f043 0308 	orr.w	r3, r3, #8
 8003640:	6313      	str	r3, [r2, #48]	; 0x30
 8003642:	4b66      	ldr	r3, [pc, #408]	; (80037dc <MX_GPIO_Init+0x234>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	f003 0308 	and.w	r3, r3, #8
 800364a:	607b      	str	r3, [r7, #4]
 800364c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800364e:	4b63      	ldr	r3, [pc, #396]	; (80037dc <MX_GPIO_Init+0x234>)
 8003650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003652:	4a62      	ldr	r2, [pc, #392]	; (80037dc <MX_GPIO_Init+0x234>)
 8003654:	f043 0304 	orr.w	r3, r3, #4
 8003658:	6313      	str	r3, [r2, #48]	; 0x30
 800365a:	4b60      	ldr	r3, [pc, #384]	; (80037dc <MX_GPIO_Init+0x234>)
 800365c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365e:	f003 0304 	and.w	r3, r3, #4
 8003662:	603b      	str	r3, [r7, #0]
 8003664:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8003666:	2200      	movs	r2, #0
 8003668:	2180      	movs	r1, #128	; 0x80
 800366a:	485d      	ldr	r0, [pc, #372]	; (80037e0 <MX_GPIO_Init+0x238>)
 800366c:	f002 fd82 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8003670:	2200      	movs	r2, #0
 8003672:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8003676:	485b      	ldr	r0, [pc, #364]	; (80037e4 <MX_GPIO_Init+0x23c>)
 8003678:	f002 fd7c 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 800367c:	2200      	movs	r2, #0
 800367e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8003682:	4859      	ldr	r0, [pc, #356]	; (80037e8 <MX_GPIO_Init+0x240>)
 8003684:	f002 fd76 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8003688:	2200      	movs	r2, #0
 800368a:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 800368e:	4857      	ldr	r0, [pc, #348]	; (80037ec <MX_GPIO_Init+0x244>)
 8003690:	f002 fd70 	bl	8006174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003694:	2380      	movs	r3, #128	; 0x80
 8003696:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003698:	2301      	movs	r3, #1
 800369a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800369c:	2300      	movs	r3, #0
 800369e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036a0:	2300      	movs	r3, #0
 80036a2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80036a4:	f107 031c 	add.w	r3, r7, #28
 80036a8:	4619      	mov	r1, r3
 80036aa:	484d      	ldr	r0, [pc, #308]	; (80037e0 <MX_GPIO_Init+0x238>)
 80036ac:	f002 fb9e 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80036b0:	231e      	movs	r3, #30
 80036b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b4:	2303      	movs	r3, #3
 80036b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b8:	2300      	movs	r3, #0
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	f107 031c 	add.w	r3, r7, #28
 80036c0:	4619      	mov	r1, r3
 80036c2:	484b      	ldr	r0, [pc, #300]	; (80037f0 <MX_GPIO_Init+0x248>)
 80036c4:	f002 fb92 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 80036c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80036cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80036ce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80036d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80036d4:	2301      	movs	r3, #1
 80036d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 80036d8:	f107 031c 	add.w	r3, r7, #28
 80036dc:	4619      	mov	r1, r3
 80036de:	4845      	ldr	r0, [pc, #276]	; (80037f4 <MX_GPIO_Init+0x24c>)
 80036e0:	f002 fb84 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 80036e4:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 80036e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80036ea:	2301      	movs	r3, #1
 80036ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036ee:	2300      	movs	r3, #0
 80036f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036f2:	2300      	movs	r3, #0
 80036f4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036f6:	f107 031c 	add.w	r3, r7, #28
 80036fa:	4619      	mov	r1, r3
 80036fc:	4839      	ldr	r0, [pc, #228]	; (80037e4 <MX_GPIO_Init+0x23c>)
 80036fe:	f002 fb75 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8003702:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003706:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003708:	2301      	movs	r3, #1
 800370a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800370c:	2300      	movs	r3, #0
 800370e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003710:	2300      	movs	r3, #0
 8003712:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003714:	f107 031c 	add.w	r3, r7, #28
 8003718:	4619      	mov	r1, r3
 800371a:	4833      	ldr	r0, [pc, #204]	; (80037e8 <MX_GPIO_Init+0x240>)
 800371c:	f002 fb66 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8003720:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003724:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003726:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800372a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800372c:	2300      	movs	r3, #0
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003730:	f107 031c 	add.w	r3, r7, #28
 8003734:	4619      	mov	r1, r3
 8003736:	482c      	ldr	r0, [pc, #176]	; (80037e8 <MX_GPIO_Init+0x240>)
 8003738:	f002 fb58 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800373c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003740:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800374a:	2300      	movs	r3, #0
 800374c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800374e:	2302      	movs	r3, #2
 8003750:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003752:	f107 031c 	add.w	r3, r7, #28
 8003756:	4619      	mov	r1, r3
 8003758:	4823      	ldr	r0, [pc, #140]	; (80037e8 <MX_GPIO_Init+0x240>)
 800375a:	f002 fb47 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 800375e:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8003762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003764:	2301      	movs	r3, #1
 8003766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003768:	2300      	movs	r3, #0
 800376a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800376c:	2300      	movs	r3, #0
 800376e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003770:	f107 031c 	add.w	r3, r7, #28
 8003774:	4619      	mov	r1, r3
 8003776:	481d      	ldr	r0, [pc, #116]	; (80037ec <MX_GPIO_Init+0x244>)
 8003778:	f002 fb38 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 800377c:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003782:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003786:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003788:	2300      	movs	r3, #0
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800378c:	f107 031c 	add.w	r3, r7, #28
 8003790:	4619      	mov	r1, r3
 8003792:	4816      	ldr	r0, [pc, #88]	; (80037ec <MX_GPIO_Init+0x244>)
 8003794:	f002 fb2a 	bl	8005dec <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 8003798:	2340      	movs	r3, #64	; 0x40
 800379a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800379c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80037a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80037a2:	2301      	movs	r3, #1
 80037a4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	480e      	ldr	r0, [pc, #56]	; (80037e8 <MX_GPIO_Init+0x240>)
 80037ae:	f002 fb1d 	bl	8005dec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80037b2:	2200      	movs	r2, #0
 80037b4:	2100      	movs	r1, #0
 80037b6:	2017      	movs	r0, #23
 80037b8:	f002 fa41 	bl	8005c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80037bc:	2017      	movs	r0, #23
 80037be:	f002 fa5a 	bl	8005c76 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80037c2:	2200      	movs	r2, #0
 80037c4:	2100      	movs	r1, #0
 80037c6:	2028      	movs	r0, #40	; 0x28
 80037c8:	f002 fa39 	bl	8005c3e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80037cc:	2028      	movs	r0, #40	; 0x28
 80037ce:	f002 fa52 	bl	8005c76 <HAL_NVIC_EnableIRQ>

}
 80037d2:	bf00      	nop
 80037d4:	3730      	adds	r7, #48	; 0x30
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40021400 	.word	0x40021400
 80037e4:	40020400 	.word	0x40020400
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40020800 	.word	0x40020800
 80037f0:	40020000 	.word	0x40020000
 80037f4:	40021000 	.word	0x40021000

080037f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037fc:	b672      	cpsid	i
}
 80037fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003800:	e7fe      	b.n	8003800 <Error_Handler+0x8>

08003802 <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8003802:	b580      	push	{r7, lr}
 8003804:	b084      	sub	sp, #16
 8003806:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	60fa      	str	r2, [r7, #12]
 8003812:	3310      	adds	r3, #16
 8003814:	443b      	add	r3, r7
 8003816:	222f      	movs	r2, #47	; 0x2f
 8003818:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	1c5a      	adds	r2, r3, #1
 8003820:	60fa      	str	r2, [r7, #12]
 8003822:	3310      	adds	r3, #16
 8003824:	443b      	add	r3, r7
 8003826:	2260      	movs	r2, #96	; 0x60
 8003828:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1c5a      	adds	r2, r3, #1
 8003830:	60fa      	str	r2, [r7, #12]
 8003832:	3310      	adds	r3, #16
 8003834:	443b      	add	r3, r7
 8003836:	2260      	movs	r2, #96	; 0x60
 8003838:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	1c5a      	adds	r2, r3, #1
 8003840:	60fa      	str	r2, [r7, #12]
 8003842:	3310      	adds	r3, #16
 8003844:	443b      	add	r3, r7
 8003846:	2200      	movs	r2, #0
 8003848:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	60fa      	str	r2, [r7, #12]
 8003852:	3310      	adds	r3, #16
 8003854:	443b      	add	r3, r7
 8003856:	2203      	movs	r2, #3
 8003858:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	60fa      	str	r2, [r7, #12]
 8003862:	3310      	adds	r3, #16
 8003864:	443b      	add	r3, r7
 8003866:	2200      	movs	r2, #0
 8003868:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	1c5a      	adds	r2, r3, #1
 8003870:	60fa      	str	r2, [r7, #12]
 8003872:	3310      	adds	r3, #16
 8003874:	443b      	add	r3, r7
 8003876:	2200      	movs	r2, #0
 8003878:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800387c:	1d3a      	adds	r2, r7, #4
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4413      	add	r3, r2
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003886:	1d39      	adds	r1, r7, #4
 8003888:	2300      	movs	r3, #0
 800388a:	2208      	movs	r2, #8
 800388c:	f240 6001 	movw	r0, #1537	; 0x601
 8003890:	f7ff fb4e 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003894:	2064      	movs	r0, #100	; 0x64
 8003896:	f001 fa17 	bl	8004cc8 <HAL_Delay>
}
 800389a:	bf00      	nop
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}

080038a2 <synchronousMode>:

void synchronousMode()
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	60fa      	str	r2, [r7, #12]
 80038b2:	3310      	adds	r3, #16
 80038b4:	443b      	add	r3, r7
 80038b6:	222b      	movs	r2, #43	; 0x2b
 80038b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1c5a      	adds	r2, r3, #1
 80038c0:	60fa      	str	r2, [r7, #12]
 80038c2:	3310      	adds	r3, #16
 80038c4:	443b      	add	r3, r7
 80038c6:	220f      	movs	r2, #15
 80038c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	1c5a      	adds	r2, r3, #1
 80038d0:	60fa      	str	r2, [r7, #12]
 80038d2:	3310      	adds	r3, #16
 80038d4:	443b      	add	r3, r7
 80038d6:	2220      	movs	r2, #32
 80038d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1c5a      	adds	r2, r3, #1
 80038e0:	60fa      	str	r2, [r7, #12]
 80038e2:	3310      	adds	r3, #16
 80038e4:	443b      	add	r3, r7
 80038e6:	2200      	movs	r2, #0
 80038e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	60fa      	str	r2, [r7, #12]
 80038f2:	3310      	adds	r3, #16
 80038f4:	443b      	add	r3, r7
 80038f6:	2201      	movs	r2, #1
 80038f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	1c5a      	adds	r2, r3, #1
 8003900:	60fa      	str	r2, [r7, #12]
 8003902:	3310      	adds	r3, #16
 8003904:	443b      	add	r3, r7
 8003906:	2200      	movs	r2, #0
 8003908:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	1c5a      	adds	r2, r3, #1
 8003910:	60fa      	str	r2, [r7, #12]
 8003912:	3310      	adds	r3, #16
 8003914:	443b      	add	r3, r7
 8003916:	2200      	movs	r2, #0
 8003918:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800391c:	1d3a      	adds	r2, r7, #4
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	4413      	add	r3, r2
 8003922:	2200      	movs	r2, #0
 8003924:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003926:	1d39      	adds	r1, r7, #4
 8003928:	2300      	movs	r3, #0
 800392a:	2208      	movs	r2, #8
 800392c:	f240 6001 	movw	r0, #1537	; 0x601
 8003930:	f7ff fafe 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003934:	2064      	movs	r0, #100	; 0x64
 8003936:	f001 f9c7 	bl	8004cc8 <HAL_Delay>
}
 800393a:	bf00      	nop
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <settingEnc>:

void settingEnc(int16_t enc)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	4603      	mov	r3, r0
 800394a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800394c:	2300      	movs	r3, #0
 800394e:	617b      	str	r3, [r7, #20]
 8003950:	e055      	b.n	80039fe <settingEnc+0xbc>
    {
        int index = 0;
 8003952:	2300      	movs	r3, #0
 8003954:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	1c5a      	adds	r2, r3, #1
 800395a:	613a      	str	r2, [r7, #16]
 800395c:	3318      	adds	r3, #24
 800395e:	443b      	add	r3, r7
 8003960:	222b      	movs	r2, #43	; 0x2b
 8003962:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	613a      	str	r2, [r7, #16]
 800396c:	3318      	adds	r3, #24
 800396e:	443b      	add	r3, r7
 8003970:	220e      	movs	r2, #14
 8003972:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	613a      	str	r2, [r7, #16]
 800397c:	3318      	adds	r3, #24
 800397e:	443b      	add	r3, r7
 8003980:	2220      	movs	r2, #32
 8003982:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1c59      	adds	r1, r3, #1
 800398e:	6139      	str	r1, [r7, #16]
 8003990:	3201      	adds	r2, #1
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	3318      	adds	r3, #24
 8003996:	443b      	add	r3, r7
 8003998:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1c5a      	adds	r2, r3, #1
 80039a0:	613a      	str	r2, [r7, #16]
 80039a2:	88fa      	ldrh	r2, [r7, #6]
 80039a4:	b2d2      	uxtb	r2, r2
 80039a6:	3318      	adds	r3, #24
 80039a8:	443b      	add	r3, r7
 80039aa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 80039ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80039b2:	121b      	asrs	r3, r3, #8
 80039b4:	b219      	sxth	r1, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	1c5a      	adds	r2, r3, #1
 80039ba:	613a      	str	r2, [r7, #16]
 80039bc:	b2ca      	uxtb	r2, r1
 80039be:	3318      	adds	r3, #24
 80039c0:	443b      	add	r3, r7
 80039c2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1c5a      	adds	r2, r3, #1
 80039ca:	613a      	str	r2, [r7, #16]
 80039cc:	3318      	adds	r3, #24
 80039ce:	443b      	add	r3, r7
 80039d0:	2200      	movs	r2, #0
 80039d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80039d6:	f107 0208 	add.w	r2, r7, #8
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	4413      	add	r3, r2
 80039de:	2200      	movs	r2, #0
 80039e0:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80039e2:	f107 0108 	add.w	r1, r7, #8
 80039e6:	2300      	movs	r3, #0
 80039e8:	2208      	movs	r2, #8
 80039ea:	f240 6001 	movw	r0, #1537	; 0x601
 80039ee:	f7ff fa9f 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80039f2:	2064      	movs	r0, #100	; 0x64
 80039f4:	f001 f968 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	3301      	adds	r3, #1
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	dda6      	ble.n	8003952 <settingEnc+0x10>
    }
}
 8003a04:	bf00      	nop
 8003a06:	bf00      	nop
 8003a08:	3718      	adds	r7, #24
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <settingPole>:

void settingPole(int16_t pole)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	4603      	mov	r3, r0
 8003a16:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003a18:	2300      	movs	r3, #0
 8003a1a:	617b      	str	r3, [r7, #20]
 8003a1c:	e055      	b.n	8003aca <settingPole+0xbc>
    {
        int index = 0;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	613a      	str	r2, [r7, #16]
 8003a28:	3318      	adds	r3, #24
 8003a2a:	443b      	add	r3, r7
 8003a2c:	222b      	movs	r2, #43	; 0x2b
 8003a2e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8003a32:	693b      	ldr	r3, [r7, #16]
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	613a      	str	r2, [r7, #16]
 8003a38:	3318      	adds	r3, #24
 8003a3a:	443b      	add	r3, r7
 8003a3c:	220c      	movs	r2, #12
 8003a3e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	613a      	str	r2, [r7, #16]
 8003a48:	3318      	adds	r3, #24
 8003a4a:	443b      	add	r3, r7
 8003a4c:	2220      	movs	r2, #32
 8003a4e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	b2da      	uxtb	r2, r3
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1c59      	adds	r1, r3, #1
 8003a5a:	6139      	str	r1, [r7, #16]
 8003a5c:	3201      	adds	r2, #1
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	3318      	adds	r3, #24
 8003a62:	443b      	add	r3, r7
 8003a64:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	613a      	str	r2, [r7, #16]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	b2d2      	uxtb	r2, r2
 8003a72:	3318      	adds	r3, #24
 8003a74:	443b      	add	r3, r7
 8003a76:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 8003a7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003a7e:	121b      	asrs	r3, r3, #8
 8003a80:	b219      	sxth	r1, r3
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	1c5a      	adds	r2, r3, #1
 8003a86:	613a      	str	r2, [r7, #16]
 8003a88:	b2ca      	uxtb	r2, r1
 8003a8a:	3318      	adds	r3, #24
 8003a8c:	443b      	add	r3, r7
 8003a8e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1c5a      	adds	r2, r3, #1
 8003a96:	613a      	str	r2, [r7, #16]
 8003a98:	3318      	adds	r3, #24
 8003a9a:	443b      	add	r3, r7
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003aa2:	f107 0208 	add.w	r2, r7, #8
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003aae:	f107 0108 	add.w	r1, r7, #8
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	2208      	movs	r2, #8
 8003ab6:	f240 6001 	movw	r0, #1537	; 0x601
 8003aba:	f7ff fa39 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003abe:	2064      	movs	r0, #100	; 0x64
 8003ac0:	f001 f902 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	2b01      	cmp	r3, #1
 8003ace:	dda6      	ble.n	8003a1e <settingPole+0x10>
    }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <settingBreak>:

void settingBreak(uint8_t enable)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b086      	sub	sp, #24
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	617a      	str	r2, [r7, #20]
 8003aee:	3318      	adds	r3, #24
 8003af0:	443b      	add	r3, r7
 8003af2:	222b      	movs	r2, #43	; 0x2b
 8003af4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8003af8:	697b      	ldr	r3, [r7, #20]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	617a      	str	r2, [r7, #20]
 8003afe:	3318      	adds	r3, #24
 8003b00:	443b      	add	r3, r7
 8003b02:	2207      	movs	r2, #7
 8003b04:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	617a      	str	r2, [r7, #20]
 8003b0e:	3318      	adds	r3, #24
 8003b10:	443b      	add	r3, r7
 8003b12:	2220      	movs	r2, #32
 8003b14:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	617a      	str	r2, [r7, #20]
 8003b1e:	3318      	adds	r3, #24
 8003b20:	443b      	add	r3, r7
 8003b22:	2200      	movs	r2, #0
 8003b24:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	617a      	str	r2, [r7, #20]
 8003b2e:	3318      	adds	r3, #24
 8003b30:	443b      	add	r3, r7
 8003b32:	79fa      	ldrb	r2, [r7, #7]
 8003b34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	617a      	str	r2, [r7, #20]
 8003b3e:	3318      	adds	r3, #24
 8003b40:	443b      	add	r3, r7
 8003b42:	2200      	movs	r2, #0
 8003b44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	1c5a      	adds	r2, r3, #1
 8003b4c:	617a      	str	r2, [r7, #20]
 8003b4e:	3318      	adds	r3, #24
 8003b50:	443b      	add	r3, r7
 8003b52:	2200      	movs	r2, #0
 8003b54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003b58:	f107 020c 	add.w	r2, r7, #12
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	4413      	add	r3, r2
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003b64:	f107 010c 	add.w	r1, r7, #12
 8003b68:	2300      	movs	r3, #0
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	f240 6001 	movw	r0, #1537	; 0x601
 8003b70:	f7ff f9de 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003b74:	2064      	movs	r0, #100	; 0x64
 8003b76:	f001 f8a7 	bl	8004cc8 <HAL_Delay>
}
 8003b7a:	bf00      	nop
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8003b82:	b580      	push	{r7, lr}
 8003b84:	b086      	sub	sp, #24
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	4603      	mov	r3, r0
 8003b8a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	617a      	str	r2, [r7, #20]
 8003b96:	3318      	adds	r3, #24
 8003b98:	443b      	add	r3, r7
 8003b9a:	222b      	movs	r2, #43	; 0x2b
 8003b9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	617a      	str	r2, [r7, #20]
 8003ba6:	3318      	adds	r3, #24
 8003ba8:	443b      	add	r3, r7
 8003baa:	2208      	movs	r2, #8
 8003bac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	1c5a      	adds	r2, r3, #1
 8003bb4:	617a      	str	r2, [r7, #20]
 8003bb6:	3318      	adds	r3, #24
 8003bb8:	443b      	add	r3, r7
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	1c5a      	adds	r2, r3, #1
 8003bc4:	617a      	str	r2, [r7, #20]
 8003bc6:	3318      	adds	r3, #24
 8003bc8:	443b      	add	r3, r7
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	617a      	str	r2, [r7, #20]
 8003bd6:	88fa      	ldrh	r2, [r7, #6]
 8003bd8:	b2d2      	uxtb	r2, r2
 8003bda:	3318      	adds	r3, #24
 8003bdc:	443b      	add	r3, r7
 8003bde:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8003be2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003be6:	121b      	asrs	r3, r3, #8
 8003be8:	b219      	sxth	r1, r3
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	1c5a      	adds	r2, r3, #1
 8003bee:	617a      	str	r2, [r7, #20]
 8003bf0:	b2ca      	uxtb	r2, r1
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	443b      	add	r3, r7
 8003bf6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	617a      	str	r2, [r7, #20]
 8003c00:	3318      	adds	r3, #24
 8003c02:	443b      	add	r3, r7
 8003c04:	2200      	movs	r2, #0
 8003c06:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003c0a:	f107 020c 	add.w	r2, r7, #12
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	4413      	add	r3, r2
 8003c12:	2200      	movs	r2, #0
 8003c14:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003c16:	f107 010c 	add.w	r1, r7, #12
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	2208      	movs	r2, #8
 8003c1e:	f240 6001 	movw	r0, #1537	; 0x601
 8003c22:	f7ff f985 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003c26:	2064      	movs	r0, #100	; 0x64
 8003c28:	f001 f84e 	bl	8004cc8 <HAL_Delay>
}
 8003c2c:	bf00      	nop
 8003c2e:	3718      	adds	r7, #24
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e05e      	b.n	8003d02 <settingRatedCurrent+0xce>
    {
        int index = 0;
 8003c44:	2300      	movs	r3, #0
 8003c46:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	1c5a      	adds	r2, r3, #1
 8003c4c:	613a      	str	r2, [r7, #16]
 8003c4e:	3318      	adds	r3, #24
 8003c50:	443b      	add	r3, r7
 8003c52:	222b      	movs	r2, #43	; 0x2b
 8003c54:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	613a      	str	r2, [r7, #16]
 8003c5e:	3318      	adds	r3, #24
 8003c60:	443b      	add	r3, r7
 8003c62:	2214      	movs	r2, #20
 8003c64:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	613a      	str	r2, [r7, #16]
 8003c6e:	3318      	adds	r3, #24
 8003c70:	443b      	add	r3, r7
 8003c72:	2220      	movs	r2, #32
 8003c74:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	b2da      	uxtb	r2, r3
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	1c59      	adds	r1, r3, #1
 8003c80:	6139      	str	r1, [r7, #16]
 8003c82:	3201      	adds	r2, #1
 8003c84:	b2d2      	uxtb	r2, r2
 8003c86:	3318      	adds	r3, #24
 8003c88:	443b      	add	r3, r7
 8003c8a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	4b20      	ldr	r3, [pc, #128]	; (8003d14 <settingRatedCurrent+0xe0>)
 8003c94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003c98:	f7fc fcc6 	bl	8000628 <__aeabi_dmul>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	f7fc ff5a 	bl	8000b5c <__aeabi_d2iz>
 8003ca8:	4601      	mov	r1, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1c5a      	adds	r2, r3, #1
 8003cae:	613a      	str	r2, [r7, #16]
 8003cb0:	b2ca      	uxtb	r2, r1
 8003cb2:	3318      	adds	r3, #24
 8003cb4:	443b      	add	r3, r7
 8003cb6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	1c5a      	adds	r2, r3, #1
 8003cbe:	613a      	str	r2, [r7, #16]
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	443b      	add	r3, r7
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1c5a      	adds	r2, r3, #1
 8003cce:	613a      	str	r2, [r7, #16]
 8003cd0:	3318      	adds	r3, #24
 8003cd2:	443b      	add	r3, r7
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003cda:	f107 0208 	add.w	r2, r7, #8
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	4413      	add	r3, r2
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ce6:	f107 0108 	add.w	r1, r7, #8
 8003cea:	2300      	movs	r3, #0
 8003cec:	2208      	movs	r2, #8
 8003cee:	f240 6001 	movw	r0, #1537	; 0x601
 8003cf2:	f7ff f91d 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003cf6:	2064      	movs	r0, #100	; 0x64
 8003cf8:	f000 ffe6 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	617b      	str	r3, [r7, #20]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	dd9d      	ble.n	8003c44 <settingRatedCurrent+0x10>
    }
}
 8003d08:	bf00      	nop
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40240000 	.word	0x40240000

08003d18 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003d22:	2300      	movs	r3, #0
 8003d24:	617b      	str	r3, [r7, #20]
 8003d26:	e05e      	b.n	8003de6 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	1c5a      	adds	r2, r3, #1
 8003d30:	613a      	str	r2, [r7, #16]
 8003d32:	3318      	adds	r3, #24
 8003d34:	443b      	add	r3, r7
 8003d36:	222b      	movs	r2, #43	; 0x2b
 8003d38:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1c5a      	adds	r2, r3, #1
 8003d40:	613a      	str	r2, [r7, #16]
 8003d42:	3318      	adds	r3, #24
 8003d44:	443b      	add	r3, r7
 8003d46:	2215      	movs	r2, #21
 8003d48:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1c5a      	adds	r2, r3, #1
 8003d50:	613a      	str	r2, [r7, #16]
 8003d52:	3318      	adds	r3, #24
 8003d54:	443b      	add	r3, r7
 8003d56:	2220      	movs	r2, #32
 8003d58:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	b2da      	uxtb	r2, r3
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1c59      	adds	r1, r3, #1
 8003d64:	6139      	str	r1, [r7, #16]
 8003d66:	3201      	adds	r2, #1
 8003d68:	b2d2      	uxtb	r2, r2
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	443b      	add	r3, r7
 8003d6e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	4b20      	ldr	r3, [pc, #128]	; (8003df8 <settingMaxCurrent+0xe0>)
 8003d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003d7c:	f7fc fc54 	bl	8000628 <__aeabi_dmul>
 8003d80:	4602      	mov	r2, r0
 8003d82:	460b      	mov	r3, r1
 8003d84:	4610      	mov	r0, r2
 8003d86:	4619      	mov	r1, r3
 8003d88:	f7fc fee8 	bl	8000b5c <__aeabi_d2iz>
 8003d8c:	4601      	mov	r1, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	613a      	str	r2, [r7, #16]
 8003d94:	b2ca      	uxtb	r2, r1
 8003d96:	3318      	adds	r3, #24
 8003d98:	443b      	add	r3, r7
 8003d9a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1c5a      	adds	r2, r3, #1
 8003da2:	613a      	str	r2, [r7, #16]
 8003da4:	3318      	adds	r3, #24
 8003da6:	443b      	add	r3, r7
 8003da8:	2200      	movs	r2, #0
 8003daa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	1c5a      	adds	r2, r3, #1
 8003db2:	613a      	str	r2, [r7, #16]
 8003db4:	3318      	adds	r3, #24
 8003db6:	443b      	add	r3, r7
 8003db8:	2200      	movs	r2, #0
 8003dba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003dbe:	f107 0208 	add.w	r2, r7, #8
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003dca:	f107 0108 	add.w	r1, r7, #8
 8003dce:	2300      	movs	r3, #0
 8003dd0:	2208      	movs	r2, #8
 8003dd2:	f240 6001 	movw	r0, #1537	; 0x601
 8003dd6:	f7ff f8ab 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003dda:	2064      	movs	r0, #100	; 0x64
 8003ddc:	f000 ff74 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	3301      	adds	r3, #1
 8003de4:	617b      	str	r3, [r7, #20]
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	dd9d      	ble.n	8003d28 <settingMaxCurrent+0x10>
    }
}
 8003dec:	bf00      	nop
 8003dee:	bf00      	nop
 8003df0:	3718      	adds	r7, #24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	40240000 	.word	0x40240000

08003dfc <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e055      	b.n	8003eb8 <settingHallOffset+0xbc>
    {
        int index = 0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	613a      	str	r2, [r7, #16]
 8003e16:	3318      	adds	r3, #24
 8003e18:	443b      	add	r3, r7
 8003e1a:	222b      	movs	r2, #43	; 0x2b
 8003e1c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	613a      	str	r2, [r7, #16]
 8003e26:	3318      	adds	r3, #24
 8003e28:	443b      	add	r3, r7
 8003e2a:	2211      	movs	r2, #17
 8003e2c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	613a      	str	r2, [r7, #16]
 8003e36:	3318      	adds	r3, #24
 8003e38:	443b      	add	r3, r7
 8003e3a:	2220      	movs	r2, #32
 8003e3c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	b2da      	uxtb	r2, r3
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	1c59      	adds	r1, r3, #1
 8003e48:	6139      	str	r1, [r7, #16]
 8003e4a:	3201      	adds	r2, #1
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	3318      	adds	r3, #24
 8003e50:	443b      	add	r3, r7
 8003e52:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1c5a      	adds	r2, r3, #1
 8003e5a:	613a      	str	r2, [r7, #16]
 8003e5c:	88fa      	ldrh	r2, [r7, #6]
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	3318      	adds	r3, #24
 8003e62:	443b      	add	r3, r7
 8003e64:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 8003e68:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6c:	121b      	asrs	r3, r3, #8
 8003e6e:	b219      	sxth	r1, r3
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	1c5a      	adds	r2, r3, #1
 8003e74:	613a      	str	r2, [r7, #16]
 8003e76:	b2ca      	uxtb	r2, r1
 8003e78:	3318      	adds	r3, #24
 8003e7a:	443b      	add	r3, r7
 8003e7c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	613a      	str	r2, [r7, #16]
 8003e86:	3318      	adds	r3, #24
 8003e88:	443b      	add	r3, r7
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003e90:	f107 0208 	add.w	r2, r7, #8
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003e9c:	f107 0108 	add.w	r1, r7, #8
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2208      	movs	r2, #8
 8003ea4:	f240 6001 	movw	r0, #1537	; 0x601
 8003ea8:	f7ff f842 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003eac:	2064      	movs	r0, #100	; 0x64
 8003eae:	f000 ff0b 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	697b      	ldr	r3, [r7, #20]
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	dda6      	ble.n	8003e0c <settingHallOffset+0x10>
    }
}
 8003ebe:	bf00      	nop
 8003ec0:	bf00      	nop
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <save>:

void save()
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	60fa      	str	r2, [r7, #12]
 8003ed8:	3310      	adds	r3, #16
 8003eda:	443b      	add	r3, r7
 8003edc:	222b      	movs	r2, #43	; 0x2b
 8003ede:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	1c5a      	adds	r2, r3, #1
 8003ee6:	60fa      	str	r2, [r7, #12]
 8003ee8:	3310      	adds	r3, #16
 8003eea:	443b      	add	r3, r7
 8003eec:	2210      	movs	r2, #16
 8003eee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	3310      	adds	r3, #16
 8003efa:	443b      	add	r3, r7
 8003efc:	2220      	movs	r2, #32
 8003efe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	60fa      	str	r2, [r7, #12]
 8003f08:	3310      	adds	r3, #16
 8003f0a:	443b      	add	r3, r7
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	60fa      	str	r2, [r7, #12]
 8003f18:	3310      	adds	r3, #16
 8003f1a:	443b      	add	r3, r7
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1c5a      	adds	r2, r3, #1
 8003f26:	60fa      	str	r2, [r7, #12]
 8003f28:	3310      	adds	r3, #16
 8003f2a:	443b      	add	r3, r7
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	60fa      	str	r2, [r7, #12]
 8003f38:	3310      	adds	r3, #16
 8003f3a:	443b      	add	r3, r7
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003f42:	1d3a      	adds	r2, r7, #4
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4413      	add	r3, r2
 8003f48:	2200      	movs	r2, #0
 8003f4a:	701a      	strb	r2, [r3, #0]
    index = 0;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003f50:	1d39      	adds	r1, r7, #4
 8003f52:	2300      	movs	r3, #0
 8003f54:	2208      	movs	r2, #8
 8003f56:	f240 6001 	movw	r0, #1537	; 0x601
 8003f5a:	f7fe ffe9 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003f5e:	2064      	movs	r0, #100	; 0x64
 8003f60:	f000 feb2 	bl	8004cc8 <HAL_Delay>
}
 8003f64:	bf00      	nop
 8003f66:	3710      	adds	r7, #16
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <startMotor>:



void startMotor()
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	af00      	add	r7, sp, #0
    enable();
 8003f70:	f000 f806 	bl	8003f80 <enable>
    velocityMode();
 8003f74:	f7ff fc45 	bl	8003802 <velocityMode>
    synchronousMode();
 8003f78:	f7ff fc93 	bl	80038a2 <synchronousMode>
}
 8003f7c:	bf00      	nop
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <enable>:

void enable()
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 8003f86:	4b2f      	ldr	r3, [pc, #188]	; (8004044 <enable+0xc4>)
 8003f88:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	617b      	str	r3, [r7, #20]
 8003f8e:	e050      	b.n	8004032 <enable+0xb2>
    {
        int index = 0;
 8003f90:	2300      	movs	r3, #0
 8003f92:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	1c5a      	adds	r2, r3, #1
 8003f98:	613a      	str	r2, [r7, #16]
 8003f9a:	3318      	adds	r3, #24
 8003f9c:	443b      	add	r3, r7
 8003f9e:	222b      	movs	r2, #43	; 0x2b
 8003fa0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	1c5a      	adds	r2, r3, #1
 8003fa8:	613a      	str	r2, [r7, #16]
 8003faa:	3318      	adds	r3, #24
 8003fac:	443b      	add	r3, r7
 8003fae:	2240      	movs	r2, #64	; 0x40
 8003fb0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1c5a      	adds	r2, r3, #1
 8003fb8:	613a      	str	r2, [r7, #16]
 8003fba:	3318      	adds	r3, #24
 8003fbc:	443b      	add	r3, r7
 8003fbe:	2260      	movs	r2, #96	; 0x60
 8003fc0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	1c5a      	adds	r2, r3, #1
 8003fc8:	613a      	str	r2, [r7, #16]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	443b      	add	r3, r7
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	1c5a      	adds	r2, r3, #1
 8003fd8:	613a      	str	r2, [r7, #16]
 8003fda:	1d39      	adds	r1, r7, #4
 8003fdc:	697a      	ldr	r2, [r7, #20]
 8003fde:	440a      	add	r2, r1
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	3318      	adds	r3, #24
 8003fe4:	443b      	add	r3, r7
 8003fe6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	1c5a      	adds	r2, r3, #1
 8003fee:	613a      	str	r2, [r7, #16]
 8003ff0:	3318      	adds	r3, #24
 8003ff2:	443b      	add	r3, r7
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1c5a      	adds	r2, r3, #1
 8003ffe:	613a      	str	r2, [r7, #16]
 8004000:	3318      	adds	r3, #24
 8004002:	443b      	add	r3, r7
 8004004:	2200      	movs	r2, #0
 8004006:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800400a:	f107 0208 	add.w	r2, r7, #8
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	2200      	movs	r2, #0
 8004014:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004016:	f107 0108 	add.w	r1, r7, #8
 800401a:	2300      	movs	r3, #0
 800401c:	2208      	movs	r2, #8
 800401e:	f240 6001 	movw	r0, #1537	; 0x601
 8004022:	f7fe ff85 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004026:	2064      	movs	r0, #100	; 0x64
 8004028:	f000 fe4e 	bl	8004cc8 <HAL_Delay>
    for(int i =0;i<4;i++)
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	3301      	adds	r3, #1
 8004030:	617b      	str	r3, [r7, #20]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b03      	cmp	r3, #3
 8004036:	ddab      	ble.n	8003f90 <enable+0x10>
    }
}
 8004038:	bf00      	nop
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	0f070600 	.word	0x0f070600

08004048 <disable>:

void disable()
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	60fa      	str	r2, [r7, #12]
 8004058:	3310      	adds	r3, #16
 800405a:	443b      	add	r3, r7
 800405c:	222b      	movs	r2, #43	; 0x2b
 800405e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	1c5a      	adds	r2, r3, #1
 8004066:	60fa      	str	r2, [r7, #12]
 8004068:	3310      	adds	r3, #16
 800406a:	443b      	add	r3, r7
 800406c:	2240      	movs	r2, #64	; 0x40
 800406e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	1c5a      	adds	r2, r3, #1
 8004076:	60fa      	str	r2, [r7, #12]
 8004078:	3310      	adds	r3, #16
 800407a:	443b      	add	r3, r7
 800407c:	2260      	movs	r2, #96	; 0x60
 800407e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	60fa      	str	r2, [r7, #12]
 8004088:	3310      	adds	r3, #16
 800408a:	443b      	add	r3, r7
 800408c:	2200      	movs	r2, #0
 800408e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1c5a      	adds	r2, r3, #1
 8004096:	60fa      	str	r2, [r7, #12]
 8004098:	3310      	adds	r3, #16
 800409a:	443b      	add	r3, r7
 800409c:	2200      	movs	r2, #0
 800409e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	1c5a      	adds	r2, r3, #1
 80040a6:	60fa      	str	r2, [r7, #12]
 80040a8:	3310      	adds	r3, #16
 80040aa:	443b      	add	r3, r7
 80040ac:	2200      	movs	r2, #0
 80040ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	1c5a      	adds	r2, r3, #1
 80040b6:	60fa      	str	r2, [r7, #12]
 80040b8:	3310      	adds	r3, #16
 80040ba:	443b      	add	r3, r7
 80040bc:	2200      	movs	r2, #0
 80040be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80040c2:	1d3a      	adds	r2, r7, #4
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	2200      	movs	r2, #0
 80040ca:	701a      	strb	r2, [r3, #0]
    index = 0;
 80040cc:	2300      	movs	r3, #0
 80040ce:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80040d0:	1d39      	adds	r1, r7, #4
 80040d2:	2300      	movs	r3, #0
 80040d4:	2208      	movs	r2, #8
 80040d6:	f240 6001 	movw	r0, #1537	; 0x601
 80040da:	f7fe ff29 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80040de:	2064      	movs	r0, #100	; 0x64
 80040e0:	f000 fdf2 	bl	8004cc8 <HAL_Delay>
}
 80040e4:	bf00      	nop
 80040e6:	3710      	adds	r7, #16
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <reset>:

void reset()
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80040f2:	2300      	movs	r3, #0
 80040f4:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1c5a      	adds	r2, r3, #1
 80040fa:	60fa      	str	r2, [r7, #12]
 80040fc:	3310      	adds	r3, #16
 80040fe:	443b      	add	r3, r7
 8004100:	222b      	movs	r2, #43	; 0x2b
 8004102:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	60fa      	str	r2, [r7, #12]
 800410c:	3310      	adds	r3, #16
 800410e:	443b      	add	r3, r7
 8004110:	2240      	movs	r2, #64	; 0x40
 8004112:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	1c5a      	adds	r2, r3, #1
 800411a:	60fa      	str	r2, [r7, #12]
 800411c:	3310      	adds	r3, #16
 800411e:	443b      	add	r3, r7
 8004120:	2260      	movs	r2, #96	; 0x60
 8004122:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1c5a      	adds	r2, r3, #1
 800412a:	60fa      	str	r2, [r7, #12]
 800412c:	3310      	adds	r3, #16
 800412e:	443b      	add	r3, r7
 8004130:	2200      	movs	r2, #0
 8004132:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	3310      	adds	r3, #16
 800413e:	443b      	add	r3, r7
 8004140:	2280      	movs	r2, #128	; 0x80
 8004142:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1c5a      	adds	r2, r3, #1
 800414a:	60fa      	str	r2, [r7, #12]
 800414c:	3310      	adds	r3, #16
 800414e:	443b      	add	r3, r7
 8004150:	2200      	movs	r2, #0
 8004152:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	60fa      	str	r2, [r7, #12]
 800415c:	3310      	adds	r3, #16
 800415e:	443b      	add	r3, r7
 8004160:	2200      	movs	r2, #0
 8004162:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004166:	1d3a      	adds	r2, r7, #4
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	4413      	add	r3, r2
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004170:	1d39      	adds	r1, r7, #4
 8004172:	2300      	movs	r3, #0
 8004174:	2208      	movs	r2, #8
 8004176:	f240 6001 	movw	r0, #1537	; 0x601
 800417a:	f7fe fed9 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800417e:	2064      	movs	r0, #100	; 0x64
 8004180:	f000 fda2 	bl	8004cc8 <HAL_Delay>
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <reqEnc>:

void reqEnc()
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004192:	2300      	movs	r3, #0
 8004194:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	60fa      	str	r2, [r7, #12]
 800419c:	3310      	adds	r3, #16
 800419e:	443b      	add	r3, r7
 80041a0:	2240      	movs	r2, #64	; 0x40
 80041a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	60fa      	str	r2, [r7, #12]
 80041ac:	3310      	adds	r3, #16
 80041ae:	443b      	add	r3, r7
 80041b0:	226c      	movs	r2, #108	; 0x6c
 80041b2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	60fa      	str	r2, [r7, #12]
 80041bc:	3310      	adds	r3, #16
 80041be:	443b      	add	r3, r7
 80041c0:	2260      	movs	r2, #96	; 0x60
 80041c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	60fa      	str	r2, [r7, #12]
 80041cc:	3310      	adds	r3, #16
 80041ce:	443b      	add	r3, r7
 80041d0:	2203      	movs	r2, #3
 80041d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	1c5a      	adds	r2, r3, #1
 80041da:	60fa      	str	r2, [r7, #12]
 80041dc:	3310      	adds	r3, #16
 80041de:	443b      	add	r3, r7
 80041e0:	2200      	movs	r2, #0
 80041e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	1c5a      	adds	r2, r3, #1
 80041ea:	60fa      	str	r2, [r7, #12]
 80041ec:	3310      	adds	r3, #16
 80041ee:	443b      	add	r3, r7
 80041f0:	2200      	movs	r2, #0
 80041f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	60fa      	str	r2, [r7, #12]
 80041fc:	3310      	adds	r3, #16
 80041fe:	443b      	add	r3, r7
 8004200:	2200      	movs	r2, #0
 8004202:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004206:	1d3a      	adds	r2, r7, #4
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	4413      	add	r3, r2
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004210:	1d39      	adds	r1, r7, #4
 8004212:	2300      	movs	r3, #0
 8004214:	2208      	movs	r2, #8
 8004216:	f240 6001 	movw	r0, #1537	; 0x601
 800421a:	f7fe fe89 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800421e:	bf00      	nop
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}

08004226 <reqState>:

void reqState()
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b084      	sub	sp, #16
 800422a:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800422c:	2300      	movs	r3, #0
 800422e:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60fa      	str	r2, [r7, #12]
 8004236:	3310      	adds	r3, #16
 8004238:	443b      	add	r3, r7
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	60fa      	str	r2, [r7, #12]
 8004246:	3310      	adds	r3, #16
 8004248:	443b      	add	r3, r7
 800424a:	223f      	movs	r2, #63	; 0x3f
 800424c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1c5a      	adds	r2, r3, #1
 8004254:	60fa      	str	r2, [r7, #12]
 8004256:	3310      	adds	r3, #16
 8004258:	443b      	add	r3, r7
 800425a:	2260      	movs	r2, #96	; 0x60
 800425c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	60fa      	str	r2, [r7, #12]
 8004266:	3310      	adds	r3, #16
 8004268:	443b      	add	r3, r7
 800426a:	2200      	movs	r2, #0
 800426c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	60fa      	str	r2, [r7, #12]
 8004276:	3310      	adds	r3, #16
 8004278:	443b      	add	r3, r7
 800427a:	2200      	movs	r2, #0
 800427c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	60fa      	str	r2, [r7, #12]
 8004286:	3310      	adds	r3, #16
 8004288:	443b      	add	r3, r7
 800428a:	2200      	movs	r2, #0
 800428c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	60fa      	str	r2, [r7, #12]
 8004296:	3310      	adds	r3, #16
 8004298:	443b      	add	r3, r7
 800429a:	2200      	movs	r2, #0
 800429c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80042a0:	1d3a      	adds	r2, r7, #4
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	2200      	movs	r2, #0
 80042a8:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80042aa:	1d39      	adds	r1, r7, #4
 80042ac:	2300      	movs	r3, #0
 80042ae:	2208      	movs	r2, #8
 80042b0:	f240 6001 	movw	r0, #1537	; 0x601
 80042b4:	f7fe fe3c 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80042b8:	bf00      	nop
 80042ba:	3710      	adds	r7, #16
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	4603      	mov	r3, r0
 80042c8:	460a      	mov	r2, r1
 80042ca:	80fb      	strh	r3, [r7, #6]
 80042cc:	4613      	mov	r3, r2
 80042ce:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 80042d0:	88fb      	ldrh	r3, [r7, #6]
 80042d2:	425b      	negs	r3, r3
 80042d4:	b29b      	uxth	r3, r3
 80042d6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	1c5a      	adds	r2, r3, #1
 80042e0:	617a      	str	r2, [r7, #20]
 80042e2:	3318      	adds	r3, #24
 80042e4:	443b      	add	r3, r7
 80042e6:	2223      	movs	r2, #35	; 0x23
 80042e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	617a      	str	r2, [r7, #20]
 80042f2:	3318      	adds	r3, #24
 80042f4:	443b      	add	r3, r7
 80042f6:	22ff      	movs	r2, #255	; 0xff
 80042f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	1c5a      	adds	r2, r3, #1
 8004300:	617a      	str	r2, [r7, #20]
 8004302:	3318      	adds	r3, #24
 8004304:	443b      	add	r3, r7
 8004306:	2260      	movs	r2, #96	; 0x60
 8004308:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	617a      	str	r2, [r7, #20]
 8004312:	3318      	adds	r3, #24
 8004314:	443b      	add	r3, r7
 8004316:	2203      	movs	r2, #3
 8004318:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	1c5a      	adds	r2, r3, #1
 8004320:	617a      	str	r2, [r7, #20]
 8004322:	88fa      	ldrh	r2, [r7, #6]
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	3318      	adds	r3, #24
 8004328:	443b      	add	r3, r7
 800432a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 800432e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004332:	121b      	asrs	r3, r3, #8
 8004334:	b219      	sxth	r1, r3
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	1c5a      	adds	r2, r3, #1
 800433a:	617a      	str	r2, [r7, #20]
 800433c:	b2ca      	uxtb	r2, r1
 800433e:	3318      	adds	r3, #24
 8004340:	443b      	add	r3, r7
 8004342:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	617a      	str	r2, [r7, #20]
 800434c:	88ba      	ldrh	r2, [r7, #4]
 800434e:	b2d2      	uxtb	r2, r2
 8004350:	3318      	adds	r3, #24
 8004352:	443b      	add	r3, r7
 8004354:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 8004358:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800435c:	121b      	asrs	r3, r3, #8
 800435e:	b21b      	sxth	r3, r3
 8004360:	b2d9      	uxtb	r1, r3
 8004362:	f107 020c 	add.w	r2, r7, #12
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	4413      	add	r3, r2
 800436a:	460a      	mov	r2, r1
 800436c:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800436e:	f107 010c 	add.w	r1, r7, #12
 8004372:	2300      	movs	r3, #0
 8004374:	2208      	movs	r2, #8
 8004376:	f240 6001 	movw	r0, #1537	; 0x601
 800437a:	f7fe fdd9 	bl	8002f30 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800437e:	bf00      	nop
 8004380:	3718      	adds	r7, #24
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <settingKP>:

void settingKP(int16_t kp)
{
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	4603      	mov	r3, r0
 800438e:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004390:	2300      	movs	r3, #0
 8004392:	617b      	str	r3, [r7, #20]
 8004394:	e055      	b.n	8004442 <settingKP+0xbc>
    {
        int index = 0;
 8004396:	2300      	movs	r3, #0
 8004398:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	1c5a      	adds	r2, r3, #1
 800439e:	613a      	str	r2, [r7, #16]
 80043a0:	3318      	adds	r3, #24
 80043a2:	443b      	add	r3, r7
 80043a4:	221d      	movs	r2, #29
 80043a6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1c5a      	adds	r2, r3, #1
 80043ae:	613a      	str	r2, [r7, #16]
 80043b0:	3318      	adds	r3, #24
 80043b2:	443b      	add	r3, r7
 80043b4:	2220      	movs	r2, #32
 80043b6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	613a      	str	r2, [r7, #16]
 80043c0:	3318      	adds	r3, #24
 80043c2:	443b      	add	r3, r7
 80043c4:	2220      	movs	r2, #32
 80043c6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	b2da      	uxtb	r2, r3
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	1c59      	adds	r1, r3, #1
 80043d2:	6139      	str	r1, [r7, #16]
 80043d4:	3201      	adds	r2, #1
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	3318      	adds	r3, #24
 80043da:	443b      	add	r3, r7
 80043dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	1c5a      	adds	r2, r3, #1
 80043e4:	613a      	str	r2, [r7, #16]
 80043e6:	88fa      	ldrh	r2, [r7, #6]
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	3318      	adds	r3, #24
 80043ec:	443b      	add	r3, r7
 80043ee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 80043f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043f6:	121b      	asrs	r3, r3, #8
 80043f8:	b219      	sxth	r1, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	613a      	str	r2, [r7, #16]
 8004400:	b2ca      	uxtb	r2, r1
 8004402:	3318      	adds	r3, #24
 8004404:	443b      	add	r3, r7
 8004406:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	1c5a      	adds	r2, r3, #1
 800440e:	613a      	str	r2, [r7, #16]
 8004410:	3318      	adds	r3, #24
 8004412:	443b      	add	r3, r7
 8004414:	2200      	movs	r2, #0
 8004416:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800441a:	f107 0208 	add.w	r2, r7, #8
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004426:	f107 0108 	add.w	r1, r7, #8
 800442a:	2300      	movs	r3, #0
 800442c:	2208      	movs	r2, #8
 800442e:	f240 6001 	movw	r0, #1537	; 0x601
 8004432:	f7fe fd7d 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8004436:	2064      	movs	r0, #100	; 0x64
 8004438:	f000 fc46 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	3301      	adds	r3, #1
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	2b01      	cmp	r3, #1
 8004446:	dda6      	ble.n	8004396 <settingKP+0x10>
    }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <settingKI>:

void settingKI(int16_t ki)
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b086      	sub	sp, #24
 8004456:	af00      	add	r7, sp, #0
 8004458:	4603      	mov	r3, r0
 800445a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
 8004460:	e055      	b.n	800450e <settingKI+0xbc>
    {
        int index = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1c5a      	adds	r2, r3, #1
 800446a:	613a      	str	r2, [r7, #16]
 800446c:	3318      	adds	r3, #24
 800446e:	443b      	add	r3, r7
 8004470:	221e      	movs	r2, #30
 8004472:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1c5a      	adds	r2, r3, #1
 800447a:	613a      	str	r2, [r7, #16]
 800447c:	3318      	adds	r3, #24
 800447e:	443b      	add	r3, r7
 8004480:	2220      	movs	r2, #32
 8004482:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	1c5a      	adds	r2, r3, #1
 800448a:	613a      	str	r2, [r7, #16]
 800448c:	3318      	adds	r3, #24
 800448e:	443b      	add	r3, r7
 8004490:	2220      	movs	r2, #32
 8004492:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	b2da      	uxtb	r2, r3
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1c59      	adds	r1, r3, #1
 800449e:	6139      	str	r1, [r7, #16]
 80044a0:	3201      	adds	r2, #1
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	3318      	adds	r3, #24
 80044a6:	443b      	add	r3, r7
 80044a8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	613a      	str	r2, [r7, #16]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	b2d2      	uxtb	r2, r2
 80044b6:	3318      	adds	r3, #24
 80044b8:	443b      	add	r3, r7
 80044ba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 80044be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044c2:	121b      	asrs	r3, r3, #8
 80044c4:	b219      	sxth	r1, r3
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1c5a      	adds	r2, r3, #1
 80044ca:	613a      	str	r2, [r7, #16]
 80044cc:	b2ca      	uxtb	r2, r1
 80044ce:	3318      	adds	r3, #24
 80044d0:	443b      	add	r3, r7
 80044d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1c5a      	adds	r2, r3, #1
 80044da:	613a      	str	r2, [r7, #16]
 80044dc:	3318      	adds	r3, #24
 80044de:	443b      	add	r3, r7
 80044e0:	2200      	movs	r2, #0
 80044e2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80044e6:	f107 0208 	add.w	r2, r7, #8
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	4413      	add	r3, r2
 80044ee:	2200      	movs	r2, #0
 80044f0:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80044f2:	f107 0108 	add.w	r1, r7, #8
 80044f6:	2300      	movs	r3, #0
 80044f8:	2208      	movs	r2, #8
 80044fa:	f240 6001 	movw	r0, #1537	; 0x601
 80044fe:	f7fe fd17 	bl	8002f30 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004502:	2064      	movs	r0, #100	; 0x64
 8004504:	f000 fbe0 	bl	8004cc8 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	3301      	adds	r3, #1
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	2b01      	cmp	r3, #1
 8004512:	dda6      	ble.n	8004462 <settingKI+0x10>
    }
}
 8004514:	bf00      	nop
 8004516:	bf00      	nop
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <settingMotor>:
void settingMotor()
{
 8004520:	b580      	push	{r7, lr}
 8004522:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8004524:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004528:	f7ff fa0b 	bl	8003942 <settingEnc>
    settingPole(POLE_PAIR);
 800452c:	200a      	movs	r0, #10
 800452e:	f7ff fa6e 	bl	8003a0e <settingPole>
    settingBreak(BREAK_OPTION);
 8004532:	2001      	movs	r0, #1
 8004534:	f7ff fad1 	bl	8003ada <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004538:	20c8      	movs	r0, #200	; 0xc8
 800453a:	f7ff fb22 	bl	8003b82 <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 800453e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004570 <settingMotor+0x50>
 8004542:	f7ff fb77 	bl	8003c34 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 8004546:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004578 <settingMotor+0x58>
 800454a:	f7ff fbe5 	bl	8003d18 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 800454e:	20f0      	movs	r0, #240	; 0xf0
 8004550:	f7ff fc54 	bl	8003dfc <settingHallOffset>
    settingKP(KP_GAIN);
 8004554:	f240 2026 	movw	r0, #550	; 0x226
 8004558:	f7ff ff15 	bl	8004386 <settingKP>
    settingKI(KI_GAIN);
 800455c:	206e      	movs	r0, #110	; 0x6e
 800455e:	f7ff ff78 	bl	8004452 <settingKI>
    save();
 8004562:	f7ff fcb1 	bl	8003ec8 <save>
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	f3af 8000 	nop.w
 8004570:	00000000 	.word	0x00000000
 8004574:	40200000 	.word	0x40200000
 8004578:	00000000 	.word	0x00000000
 800457c:	40300000 	.word	0x40300000

08004580 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <HAL_MspInit+0x44>)
 8004588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800458a:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <HAL_MspInit+0x44>)
 800458c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004590:	6413      	str	r3, [r2, #64]	; 0x40
 8004592:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <HAL_MspInit+0x44>)
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800459a:	607b      	str	r3, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800459e:	4b09      	ldr	r3, [pc, #36]	; (80045c4 <HAL_MspInit+0x44>)
 80045a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a2:	4a08      	ldr	r2, [pc, #32]	; (80045c4 <HAL_MspInit+0x44>)
 80045a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045a8:	6453      	str	r3, [r2, #68]	; 0x44
 80045aa:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_MspInit+0x44>)
 80045ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045b6:	bf00      	nop
 80045b8:	370c      	adds	r7, #12
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	; 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_CAN_MspInit+0x8c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d12f      	bne.n	800464a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045ea:	4b1b      	ldr	r3, [pc, #108]	; (8004658 <HAL_CAN_MspInit+0x90>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ee:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_CAN_MspInit+0x90>)
 80045f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f4:	6413      	str	r3, [r2, #64]	; 0x40
 80045f6:	4b18      	ldr	r3, [pc, #96]	; (8004658 <HAL_CAN_MspInit+0x90>)
 80045f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004602:	4b15      	ldr	r3, [pc, #84]	; (8004658 <HAL_CAN_MspInit+0x90>)
 8004604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004606:	4a14      	ldr	r2, [pc, #80]	; (8004658 <HAL_CAN_MspInit+0x90>)
 8004608:	f043 0308 	orr.w	r3, r3, #8
 800460c:	6313      	str	r3, [r2, #48]	; 0x30
 800460e:	4b12      	ldr	r3, [pc, #72]	; (8004658 <HAL_CAN_MspInit+0x90>)
 8004610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	60fb      	str	r3, [r7, #12]
 8004618:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800461a:	2303      	movs	r3, #3
 800461c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800461e:	2302      	movs	r3, #2
 8004620:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004622:	2300      	movs	r3, #0
 8004624:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004626:	2303      	movs	r3, #3
 8004628:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800462a:	2309      	movs	r3, #9
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800462e:	f107 0314 	add.w	r3, r7, #20
 8004632:	4619      	mov	r1, r3
 8004634:	4809      	ldr	r0, [pc, #36]	; (800465c <HAL_CAN_MspInit+0x94>)
 8004636:	f001 fbd9 	bl	8005dec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800463a:	2200      	movs	r2, #0
 800463c:	2100      	movs	r1, #0
 800463e:	2014      	movs	r0, #20
 8004640:	f001 fafd 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004644:	2014      	movs	r0, #20
 8004646:	f001 fb16 	bl	8005c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800464a:	bf00      	nop
 800464c:	3728      	adds	r7, #40	; 0x28
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	40006400 	.word	0x40006400
 8004658:	40023800 	.word	0x40023800
 800465c:	40020c00 	.word	0x40020c00

08004660 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b088      	sub	sp, #32
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004670:	d10c      	bne.n	800468c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004672:	4b49      	ldr	r3, [pc, #292]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004676:	4a48      	ldr	r2, [pc, #288]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004678:	f043 0301 	orr.w	r3, r3, #1
 800467c:	6413      	str	r3, [r2, #64]	; 0x40
 800467e:	4b46      	ldr	r3, [pc, #280]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	61fb      	str	r3, [r7, #28]
 8004688:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 800468a:	e080      	b.n	800478e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a42      	ldr	r2, [pc, #264]	; (800479c <HAL_TIM_Base_MspInit+0x13c>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d114      	bne.n	80046c0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004696:	4b40      	ldr	r3, [pc, #256]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800469a:	4a3f      	ldr	r2, [pc, #252]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 800469c:	f043 0308 	orr.w	r3, r3, #8
 80046a0:	6413      	str	r3, [r2, #64]	; 0x40
 80046a2:	4b3d      	ldr	r3, [pc, #244]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 80046a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046a6:	f003 0308 	and.w	r3, r3, #8
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80046ae:	2200      	movs	r2, #0
 80046b0:	2100      	movs	r1, #0
 80046b2:	2032      	movs	r0, #50	; 0x32
 80046b4:	f001 fac3 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80046b8:	2032      	movs	r0, #50	; 0x32
 80046ba:	f001 fadc 	bl	8005c76 <HAL_NVIC_EnableIRQ>
}
 80046be:	e066      	b.n	800478e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a36      	ldr	r2, [pc, #216]	; (80047a0 <HAL_TIM_Base_MspInit+0x140>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d114      	bne.n	80046f4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80046ca:	4b33      	ldr	r3, [pc, #204]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 80046cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ce:	4a32      	ldr	r2, [pc, #200]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 80046d0:	f043 0310 	orr.w	r3, r3, #16
 80046d4:	6413      	str	r3, [r2, #64]	; 0x40
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	f003 0310 	and.w	r3, r3, #16
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80046e2:	2200      	movs	r2, #0
 80046e4:	2100      	movs	r1, #0
 80046e6:	2036      	movs	r0, #54	; 0x36
 80046e8:	f001 faa9 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80046ec:	2036      	movs	r0, #54	; 0x36
 80046ee:	f001 fac2 	bl	8005c76 <HAL_NVIC_EnableIRQ>
}
 80046f2:	e04c      	b.n	800478e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2a      	ldr	r2, [pc, #168]	; (80047a4 <HAL_TIM_Base_MspInit+0x144>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d114      	bne.n	8004728 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80046fe:	4b26      	ldr	r3, [pc, #152]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004702:	4a25      	ldr	r2, [pc, #148]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004704:	f043 0320 	orr.w	r3, r3, #32
 8004708:	6413      	str	r3, [r2, #64]	; 0x40
 800470a:	4b23      	ldr	r3, [pc, #140]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 800470c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800470e:	f003 0320 	and.w	r3, r3, #32
 8004712:	613b      	str	r3, [r7, #16]
 8004714:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	2037      	movs	r0, #55	; 0x37
 800471c:	f001 fa8f 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004720:	2037      	movs	r0, #55	; 0x37
 8004722:	f001 faa8 	bl	8005c76 <HAL_NVIC_EnableIRQ>
}
 8004726:	e032      	b.n	800478e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a1e      	ldr	r2, [pc, #120]	; (80047a8 <HAL_TIM_Base_MspInit+0x148>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d114      	bne.n	800475c <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004732:	4b19      	ldr	r3, [pc, #100]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	4a18      	ldr	r2, [pc, #96]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800473c:	6453      	str	r3, [r2, #68]	; 0x44
 800473e:	4b16      	ldr	r3, [pc, #88]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004742:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800474a:	2200      	movs	r2, #0
 800474c:	2100      	movs	r1, #0
 800474e:	2018      	movs	r0, #24
 8004750:	f001 fa75 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004754:	2018      	movs	r0, #24
 8004756:	f001 fa8e 	bl	8005c76 <HAL_NVIC_EnableIRQ>
}
 800475a:	e018      	b.n	800478e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a12      	ldr	r2, [pc, #72]	; (80047ac <HAL_TIM_Base_MspInit+0x14c>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d113      	bne.n	800478e <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004766:	4b0c      	ldr	r3, [pc, #48]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 800476c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004770:	6413      	str	r3, [r2, #64]	; 0x40
 8004772:	4b09      	ldr	r3, [pc, #36]	; (8004798 <HAL_TIM_Base_MspInit+0x138>)
 8004774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800477a:	60bb      	str	r3, [r7, #8]
 800477c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2100      	movs	r1, #0
 8004782:	202d      	movs	r0, #45	; 0x2d
 8004784:	f001 fa5b 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004788:	202d      	movs	r0, #45	; 0x2d
 800478a:	f001 fa74 	bl	8005c76 <HAL_NVIC_EnableIRQ>
}
 800478e:	bf00      	nop
 8004790:	3720      	adds	r7, #32
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800
 800479c:	40000c00 	.word	0x40000c00
 80047a0:	40001000 	.word	0x40001000
 80047a4:	40001400 	.word	0x40001400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40002000 	.word	0x40002000

080047b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b088      	sub	sp, #32
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047b8:	f107 030c 	add.w	r3, r7, #12
 80047bc:	2200      	movs	r2, #0
 80047be:	601a      	str	r2, [r3, #0]
 80047c0:	605a      	str	r2, [r3, #4]
 80047c2:	609a      	str	r2, [r3, #8]
 80047c4:	60da      	str	r2, [r3, #12]
 80047c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d11b      	bne.n	800480a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_TIM_MspPostInit+0x64>)
 80047d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d6:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <HAL_TIM_MspPostInit+0x64>)
 80047d8:	f043 0301 	orr.w	r3, r3, #1
 80047dc:	6313      	str	r3, [r2, #48]	; 0x30
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_TIM_MspPostInit+0x64>)
 80047e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e2:	f003 0301 	and.w	r3, r3, #1
 80047e6:	60bb      	str	r3, [r7, #8]
 80047e8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80047ea:	2320      	movs	r3, #32
 80047ec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047ee:	2302      	movs	r3, #2
 80047f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047f2:	2300      	movs	r3, #0
 80047f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047f6:	2300      	movs	r3, #0
 80047f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80047fa:	2301      	movs	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fe:	f107 030c 	add.w	r3, r7, #12
 8004802:	4619      	mov	r1, r3
 8004804:	4804      	ldr	r0, [pc, #16]	; (8004818 <HAL_TIM_MspPostInit+0x68>)
 8004806:	f001 faf1 	bl	8005dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800480a:	bf00      	nop
 800480c:	3720      	adds	r7, #32
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}
 8004812:	bf00      	nop
 8004814:	40023800 	.word	0x40023800
 8004818:	40020000 	.word	0x40020000

0800481c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b0ac      	sub	sp, #176	; 0xb0
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004824:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	605a      	str	r2, [r3, #4]
 800482e:	609a      	str	r2, [r3, #8]
 8004830:	60da      	str	r2, [r3, #12]
 8004832:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004834:	f107 0318 	add.w	r3, r7, #24
 8004838:	2284      	movs	r2, #132	; 0x84
 800483a:	2100      	movs	r1, #0
 800483c:	4618      	mov	r0, r3
 800483e:	f005 f8bd 	bl	80099bc <memset>
  if(huart->Instance==UART8)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a46      	ldr	r2, [pc, #280]	; (8004960 <HAL_UART_MspInit+0x144>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d144      	bne.n	80048d6 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 800484c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004850:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8004852:	2300      	movs	r3, #0
 8004854:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004856:	f107 0318 	add.w	r3, r7, #24
 800485a:	4618      	mov	r0, r3
 800485c:	f002 f9f0 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 8004860:	4603      	mov	r3, r0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d001      	beq.n	800486a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004866:	f7fe ffc7 	bl	80037f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800486a:	4b3e      	ldr	r3, [pc, #248]	; (8004964 <HAL_UART_MspInit+0x148>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a3d      	ldr	r2, [pc, #244]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004870:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b3b      	ldr	r3, [pc, #236]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800487e:	617b      	str	r3, [r7, #20]
 8004880:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004882:	4b38      	ldr	r3, [pc, #224]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004886:	4a37      	ldr	r2, [pc, #220]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004888:	f043 0310 	orr.w	r3, r3, #16
 800488c:	6313      	str	r3, [r2, #48]	; 0x30
 800488e:	4b35      	ldr	r3, [pc, #212]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004892:	f003 0310 	and.w	r3, r3, #16
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800489a:	2303      	movs	r3, #3
 800489c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048a0:	2302      	movs	r3, #2
 80048a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048a6:	2300      	movs	r3, #0
 80048a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048ac:	2303      	movs	r3, #3
 80048ae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80048b2:	2308      	movs	r3, #8
 80048b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80048bc:	4619      	mov	r1, r3
 80048be:	482a      	ldr	r0, [pc, #168]	; (8004968 <HAL_UART_MspInit+0x14c>)
 80048c0:	f001 fa94 	bl	8005dec <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 80048c4:	2200      	movs	r2, #0
 80048c6:	2100      	movs	r1, #0
 80048c8:	2053      	movs	r0, #83	; 0x53
 80048ca:	f001 f9b8 	bl	8005c3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 80048ce:	2053      	movs	r0, #83	; 0x53
 80048d0:	f001 f9d1 	bl	8005c76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80048d4:	e03f      	b.n	8004956 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a24      	ldr	r2, [pc, #144]	; (800496c <HAL_UART_MspInit+0x150>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d13a      	bne.n	8004956 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80048e0:	2340      	movs	r3, #64	; 0x40
 80048e2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80048e4:	2300      	movs	r3, #0
 80048e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80048e8:	f107 0318 	add.w	r3, r7, #24
 80048ec:	4618      	mov	r0, r3
 80048ee:	f002 f9a7 	bl	8006c40 <HAL_RCCEx_PeriphCLKConfig>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d001      	beq.n	80048fc <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80048f8:	f7fe ff7e 	bl	80037f8 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80048fc:	4b19      	ldr	r3, [pc, #100]	; (8004964 <HAL_UART_MspInit+0x148>)
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	4a18      	ldr	r2, [pc, #96]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004902:	f043 0310 	orr.w	r3, r3, #16
 8004906:	6453      	str	r3, [r2, #68]	; 0x44
 8004908:	4b16      	ldr	r3, [pc, #88]	; (8004964 <HAL_UART_MspInit+0x148>)
 800490a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	60fb      	str	r3, [r7, #12]
 8004912:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004914:	4b13      	ldr	r3, [pc, #76]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	4a12      	ldr	r2, [pc, #72]	; (8004964 <HAL_UART_MspInit+0x148>)
 800491a:	f043 0302 	orr.w	r3, r3, #2
 800491e:	6313      	str	r3, [r2, #48]	; 0x30
 8004920:	4b10      	ldr	r3, [pc, #64]	; (8004964 <HAL_UART_MspInit+0x148>)
 8004922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800492c:	23c0      	movs	r3, #192	; 0xc0
 800492e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004932:	2302      	movs	r3, #2
 8004934:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004938:	2300      	movs	r3, #0
 800493a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493e:	2303      	movs	r3, #3
 8004940:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004944:	2307      	movs	r3, #7
 8004946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800494a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800494e:	4619      	mov	r1, r3
 8004950:	4807      	ldr	r0, [pc, #28]	; (8004970 <HAL_UART_MspInit+0x154>)
 8004952:	f001 fa4b 	bl	8005dec <HAL_GPIO_Init>
}
 8004956:	bf00      	nop
 8004958:	37b0      	adds	r7, #176	; 0xb0
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40007c00 	.word	0x40007c00
 8004964:	40023800 	.word	0x40023800
 8004968:	40021000 	.word	0x40021000
 800496c:	40011000 	.word	0x40011000
 8004970:	40020400 	.word	0x40020400

08004974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004978:	e7fe      	b.n	8004978 <NMI_Handler+0x4>

0800497a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800497a:	b480      	push	{r7}
 800497c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800497e:	e7fe      	b.n	800497e <HardFault_Handler+0x4>

08004980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004984:	e7fe      	b.n	8004984 <MemManage_Handler+0x4>

08004986 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004986:	b480      	push	{r7}
 8004988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800498a:	e7fe      	b.n	800498a <BusFault_Handler+0x4>

0800498c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004990:	e7fe      	b.n	8004990 <UsageFault_Handler+0x4>

08004992 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004992:	b480      	push	{r7}
 8004994:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004996:	bf00      	nop
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr

080049a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049a0:	b480      	push	{r7}
 80049a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049a4:	bf00      	nop
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049c0:	f000 f962 	bl	8004c88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049c4:	bf00      	nop
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80049cc:	4802      	ldr	r0, [pc, #8]	; (80049d8 <CAN1_RX0_IRQHandler+0x10>)
 80049ce:	f000 fe07 	bl	80055e0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80049d2:	bf00      	nop
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	2000022c 	.word	0x2000022c

080049dc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 80049e0:	2040      	movs	r0, #64	; 0x40
 80049e2:	f001 fbfb 	bl	80061dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80049e6:	2080      	movs	r0, #128	; 0x80
 80049e8:	f001 fbf8 	bl	80061dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80049ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80049f0:	f001 fbf4 	bl	80061dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80049f4:	bf00      	nop
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80049fc:	4802      	ldr	r0, [pc, #8]	; (8004a08 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80049fe:	f002 ffb7 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004a02:	bf00      	nop
 8004a04:	bd80      	pop	{r7, pc}
 8004a06:	bf00      	nop
 8004a08:	20000384 	.word	0x20000384

08004a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004a0c:	b580      	push	{r7, lr}
 8004a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004a10:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004a14:	f001 fbe2 	bl	80061dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8004a18:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004a1c:	f001 fbde 	bl	80061dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004a20:	bf00      	nop
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004a2a:	f002 ffa1 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	200003d0 	.word	0x200003d0

08004a38 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004a3c:	4802      	ldr	r0, [pc, #8]	; (8004a48 <TIM5_IRQHandler+0x10>)
 8004a3e:	f002 ff97 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004a42:	bf00      	nop
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	200002a0 	.word	0x200002a0

08004a4c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004a4c:	b580      	push	{r7, lr}
 8004a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004a50:	4802      	ldr	r0, [pc, #8]	; (8004a5c <TIM6_DAC_IRQHandler+0x10>)
 8004a52:	f002 ff8d 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004a56:	bf00      	nop
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	200002ec 	.word	0x200002ec

08004a60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004a64:	4802      	ldr	r0, [pc, #8]	; (8004a70 <TIM7_IRQHandler+0x10>)
 8004a66:	f002 ff83 	bl	8007970 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	20000338 	.word	0x20000338

08004a74 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004a78:	4802      	ldr	r0, [pc, #8]	; (8004a84 <UART8_IRQHandler+0x10>)
 8004a7a:	f003 ffeb 	bl	8008a54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004a7e:	bf00      	nop
 8004a80:	bd80      	pop	{r7, pc}
 8004a82:	bf00      	nop
 8004a84:	2000041c 	.word	0x2000041c

08004a88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b086      	sub	sp, #24
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	60f8      	str	r0, [r7, #12]
 8004a90:	60b9      	str	r1, [r7, #8]
 8004a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e00a      	b.n	8004ab0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a9a:	f3af 8000 	nop.w
 8004a9e:	4601      	mov	r1, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1c5a      	adds	r2, r3, #1
 8004aa4:	60ba      	str	r2, [r7, #8]
 8004aa6:	b2ca      	uxtb	r2, r1
 8004aa8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	3301      	adds	r3, #1
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	dbf0      	blt.n	8004a9a <_read+0x12>
	}

return len;
 8004ab8:	687b      	ldr	r3, [r7, #4]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3718      	adds	r7, #24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}

08004ac2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
	return -1;
 8004aca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ada:	b480      	push	{r7}
 8004adc:	b083      	sub	sp, #12
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
 8004ae2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004ae4:	683b      	ldr	r3, [r7, #0]
 8004ae6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004aea:	605a      	str	r2, [r3, #4]
	return 0;
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	370c      	adds	r7, #12
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr

08004afa <_isatty>:

int _isatty(int file)
{
 8004afa:	b480      	push	{r7}
 8004afc:	b083      	sub	sp, #12
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
	return 1;
 8004b02:	2301      	movs	r3, #1
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004b10:	b480      	push	{r7}
 8004b12:	b085      	sub	sp, #20
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	607a      	str	r2, [r7, #4]
	return 0;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3714      	adds	r7, #20
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
	...

08004b2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b34:	4a14      	ldr	r2, [pc, #80]	; (8004b88 <_sbrk+0x5c>)
 8004b36:	4b15      	ldr	r3, [pc, #84]	; (8004b8c <_sbrk+0x60>)
 8004b38:	1ad3      	subs	r3, r2, r3
 8004b3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <_sbrk+0x64>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d102      	bne.n	8004b4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b48:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <_sbrk+0x64>)
 8004b4a:	4a12      	ldr	r2, [pc, #72]	; (8004b94 <_sbrk+0x68>)
 8004b4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b4e:	4b10      	ldr	r3, [pc, #64]	; (8004b90 <_sbrk+0x64>)
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4413      	add	r3, r2
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d207      	bcs.n	8004b6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b5c:	f004 ff04 	bl	8009968 <__errno>
 8004b60:	4603      	mov	r3, r0
 8004b62:	220c      	movs	r2, #12
 8004b64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004b66:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6a:	e009      	b.n	8004b80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b6c:	4b08      	ldr	r3, [pc, #32]	; (8004b90 <_sbrk+0x64>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b72:	4b07      	ldr	r3, [pc, #28]	; (8004b90 <_sbrk+0x64>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	4413      	add	r3, r2
 8004b7a:	4a05      	ldr	r2, [pc, #20]	; (8004b90 <_sbrk+0x64>)
 8004b7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3718      	adds	r7, #24
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	20050000 	.word	0x20050000
 8004b8c:	00000400 	.word	0x00000400
 8004b90:	20000524 	.word	0x20000524
 8004b94:	20000540 	.word	0x20000540

08004b98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004b9c:	4b06      	ldr	r3, [pc, #24]	; (8004bb8 <SystemInit+0x20>)
 8004b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba2:	4a05      	ldr	r2, [pc, #20]	; (8004bb8 <SystemInit+0x20>)
 8004ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004bac:	bf00      	nop
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
 8004bb6:	bf00      	nop
 8004bb8:	e000ed00 	.word	0xe000ed00

08004bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004bc0:	480d      	ldr	r0, [pc, #52]	; (8004bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004bc2:	490e      	ldr	r1, [pc, #56]	; (8004bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004bc4:	4a0e      	ldr	r2, [pc, #56]	; (8004c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004bc8:	e002      	b.n	8004bd0 <LoopCopyDataInit>

08004bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bce:	3304      	adds	r3, #4

08004bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bd4:	d3f9      	bcc.n	8004bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bd6:	4a0b      	ldr	r2, [pc, #44]	; (8004c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004bd8:	4c0b      	ldr	r4, [pc, #44]	; (8004c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bdc:	e001      	b.n	8004be2 <LoopFillZerobss>

08004bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004be0:	3204      	adds	r2, #4

08004be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004be4:	d3fb      	bcc.n	8004bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004be6:	f7ff ffd7 	bl	8004b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bea:	f004 fec3 	bl	8009974 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bee:	f7fe fa0d 	bl	800300c <main>
  bx  lr    
 8004bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004bf4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004bfc:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8004c00:	0800aa28 	.word	0x0800aa28
  ldr r2, =_sbss
 8004c04:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8004c08:	2000053c 	.word	0x2000053c

08004c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c0c:	e7fe      	b.n	8004c0c <ADC_IRQHandler>

08004c0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c0e:	b580      	push	{r7, lr}
 8004c10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c12:	2003      	movs	r0, #3
 8004c14:	f001 f808 	bl	8005c28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c18:	200f      	movs	r0, #15
 8004c1a:	f000 f805 	bl	8004c28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004c1e:	f7ff fcaf 	bl	8004580 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004c30:	4b12      	ldr	r3, [pc, #72]	; (8004c7c <HAL_InitTick+0x54>)
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	4b12      	ldr	r3, [pc, #72]	; (8004c80 <HAL_InitTick+0x58>)
 8004c36:	781b      	ldrb	r3, [r3, #0]
 8004c38:	4619      	mov	r1, r3
 8004c3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	4618      	mov	r0, r3
 8004c48:	f001 f831 	bl	8005cae <HAL_SYSTICK_Config>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e00e      	b.n	8004c74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b0f      	cmp	r3, #15
 8004c5a:	d80a      	bhi.n	8004c72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	6879      	ldr	r1, [r7, #4]
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	f000 ffeb 	bl	8005c3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c68:	4a06      	ldr	r2, [pc, #24]	; (8004c84 <HAL_InitTick+0x5c>)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	e000      	b.n	8004c74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3708      	adds	r7, #8
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}
 8004c7c:	20000008 	.word	0x20000008
 8004c80:	20000010 	.word	0x20000010
 8004c84:	2000000c 	.word	0x2000000c

08004c88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c8c:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_IncTick+0x20>)
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_IncTick+0x24>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4413      	add	r3, r2
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_IncTick+0x24>)
 8004c9a:	6013      	str	r3, [r2, #0]
}
 8004c9c:	bf00      	nop
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000010 	.word	0x20000010
 8004cac:	20000528 	.word	0x20000528

08004cb0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_GetTick+0x14>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	20000528 	.word	0x20000528

08004cc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b084      	sub	sp, #16
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cd0:	f7ff ffee 	bl	8004cb0 <HAL_GetTick>
 8004cd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ce0:	d005      	beq.n	8004cee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ce2:	4b0a      	ldr	r3, [pc, #40]	; (8004d0c <HAL_Delay+0x44>)
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	4413      	add	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cee:	bf00      	nop
 8004cf0:	f7ff ffde 	bl	8004cb0 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	68fa      	ldr	r2, [r7, #12]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d8f7      	bhi.n	8004cf0 <HAL_Delay+0x28>
  {
  }
}
 8004d00:	bf00      	nop
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	20000010 	.word	0x20000010

08004d10 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e0ed      	b.n	8004efe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d102      	bne.n	8004d34 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f7ff fc4a 	bl	80045c8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f042 0201 	orr.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d44:	f7ff ffb4 	bl	8004cb0 <HAL_GetTick>
 8004d48:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d4a:	e012      	b.n	8004d72 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d4c:	f7ff ffb0 	bl	8004cb0 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	2b0a      	cmp	r3, #10
 8004d58:	d90b      	bls.n	8004d72 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2205      	movs	r2, #5
 8004d6a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e0c5      	b.n	8004efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0e5      	beq.n	8004d4c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f022 0202 	bic.w	r2, r2, #2
 8004d8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d90:	f7ff ff8e 	bl	8004cb0 <HAL_GetTick>
 8004d94:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d96:	e012      	b.n	8004dbe <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d98:	f7ff ff8a 	bl	8004cb0 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b0a      	cmp	r3, #10
 8004da4:	d90b      	bls.n	8004dbe <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2205      	movs	r2, #5
 8004db6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e09f      	b.n	8004efe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	7e1b      	ldrb	r3, [r3, #24]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d108      	bne.n	8004de6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e007      	b.n	8004df6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	7e5b      	ldrb	r3, [r3, #25]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d108      	bne.n	8004e10 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e0c:	601a      	str	r2, [r3, #0]
 8004e0e:	e007      	b.n	8004e20 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e1e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	7e9b      	ldrb	r3, [r3, #26]
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d108      	bne.n	8004e3a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0220 	orr.w	r2, r2, #32
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	e007      	b.n	8004e4a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f022 0220 	bic.w	r2, r2, #32
 8004e48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	7edb      	ldrb	r3, [r3, #27]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d108      	bne.n	8004e64 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0210 	bic.w	r2, r2, #16
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	e007      	b.n	8004e74 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f042 0210 	orr.w	r2, r2, #16
 8004e72:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	7f1b      	ldrb	r3, [r3, #28]
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	d108      	bne.n	8004e8e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f042 0208 	orr.w	r2, r2, #8
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	e007      	b.n	8004e9e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f022 0208 	bic.w	r2, r2, #8
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	7f5b      	ldrb	r3, [r3, #29]
 8004ea2:	2b01      	cmp	r3, #1
 8004ea4:	d108      	bne.n	8004eb8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0204 	orr.w	r2, r2, #4
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	e007      	b.n	8004ec8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	431a      	orrs	r2, r3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	691b      	ldr	r3, [r3, #16]
 8004ed6:	431a      	orrs	r2, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	695b      	ldr	r3, [r3, #20]
 8004edc:	ea42 0103 	orr.w	r1, r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	1e5a      	subs	r2, r3, #1
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	430a      	orrs	r2, r1
 8004eec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d003      	beq.n	8004f2e <HAL_CAN_ConfigFilter+0x26>
 8004f26:	7cfb      	ldrb	r3, [r7, #19]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f040 80be 	bne.w	80050aa <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004f2e:	4b65      	ldr	r3, [pc, #404]	; (80050c4 <HAL_CAN_ConfigFilter+0x1bc>)
 8004f30:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f38:	f043 0201 	orr.w	r2, r3, #1
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f48:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	021b      	lsls	r3, r3, #8
 8004f5e:	431a      	orrs	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	695b      	ldr	r3, [r3, #20]
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2201      	movs	r2, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	401a      	ands	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	69db      	ldr	r3, [r3, #28]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d123      	bne.n	8004fd8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	43db      	mvns	r3, r3
 8004f9a:	401a      	ands	r2, r3
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fae:	683a      	ldr	r2, [r7, #0]
 8004fb0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004fb2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	3248      	adds	r2, #72	; 0x48
 8004fb8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fcc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fce:	6979      	ldr	r1, [r7, #20]
 8004fd0:	3348      	adds	r3, #72	; 0x48
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	440b      	add	r3, r1
 8004fd6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d122      	bne.n	8005026 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005000:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3248      	adds	r2, #72	; 0x48
 8005006:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800501a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	3348      	adds	r3, #72	; 0x48
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	440b      	add	r3, r1
 8005024:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	43db      	mvns	r3, r3
 8005038:	401a      	ands	r2, r3
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005040:	e007      	b.n	8005052 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	431a      	orrs	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d109      	bne.n	800506e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	401a      	ands	r2, r3
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800506c:	e007      	b.n	800507e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	431a      	orrs	r2, r3
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	2b01      	cmp	r3, #1
 8005084:	d107      	bne.n	8005096 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	431a      	orrs	r2, r3
 8005090:	697b      	ldr	r3, [r7, #20]
 8005092:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800509c:	f023 0201 	bic.w	r2, r3, #1
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	e006      	b.n	80050b8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ae:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
  }
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	371c      	adds	r7, #28
 80050bc:	46bd      	mov	sp, r7
 80050be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c2:	4770      	bx	lr
 80050c4:	40006400 	.word	0x40006400

080050c8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d12e      	bne.n	800513a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2202      	movs	r2, #2
 80050e0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f022 0201 	bic.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050f4:	f7ff fddc 	bl	8004cb0 <HAL_GetTick>
 80050f8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050fa:	e012      	b.n	8005122 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050fc:	f7ff fdd8 	bl	8004cb0 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	2b0a      	cmp	r3, #10
 8005108:	d90b      	bls.n	8005122 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800510e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2205      	movs	r2, #5
 800511a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800511e:	2301      	movs	r3, #1
 8005120:	e012      	b.n	8005148 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e5      	bne.n	80050fc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005136:	2300      	movs	r3, #0
 8005138:	e006      	b.n	8005148 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800513e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
  }
}
 8005148:	4618      	mov	r0, r3
 800514a:	3710      	adds	r7, #16
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005150:	b480      	push	{r7}
 8005152:	b089      	sub	sp, #36	; 0x24
 8005154:	af00      	add	r7, sp, #0
 8005156:	60f8      	str	r0, [r7, #12]
 8005158:	60b9      	str	r1, [r7, #8]
 800515a:	607a      	str	r2, [r7, #4]
 800515c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005164:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800516e:	7ffb      	ldrb	r3, [r7, #31]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d003      	beq.n	800517c <HAL_CAN_AddTxMessage+0x2c>
 8005174:	7ffb      	ldrb	r3, [r7, #31]
 8005176:	2b02      	cmp	r3, #2
 8005178:	f040 80b8 	bne.w	80052ec <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10a      	bne.n	800519c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800518c:	2b00      	cmp	r3, #0
 800518e:	d105      	bne.n	800519c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005190:	69bb      	ldr	r3, [r7, #24]
 8005192:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005196:	2b00      	cmp	r3, #0
 8005198:	f000 80a0 	beq.w	80052dc <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800519c:	69bb      	ldr	r3, [r7, #24]
 800519e:	0e1b      	lsrs	r3, r3, #24
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	2b02      	cmp	r3, #2
 80051aa:	d907      	bls.n	80051bc <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051b0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	e09e      	b.n	80052fa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80051bc:	2201      	movs	r2, #1
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	409a      	lsls	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d10d      	bne.n	80051ea <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051d8:	68f9      	ldr	r1, [r7, #12]
 80051da:	6809      	ldr	r1, [r1, #0]
 80051dc:	431a      	orrs	r2, r3
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3318      	adds	r3, #24
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	440b      	add	r3, r1
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	e00f      	b.n	800520a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051f4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051fa:	68f9      	ldr	r1, [r7, #12]
 80051fc:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80051fe:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	3318      	adds	r3, #24
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	440b      	add	r3, r1
 8005208:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6819      	ldr	r1, [r3, #0]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	691a      	ldr	r2, [r3, #16]
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	3318      	adds	r3, #24
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	440b      	add	r3, r1
 800521a:	3304      	adds	r3, #4
 800521c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	7d1b      	ldrb	r3, [r3, #20]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d111      	bne.n	800524a <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	3318      	adds	r3, #24
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	68fa      	ldr	r2, [r7, #12]
 8005238:	6811      	ldr	r1, [r2, #0]
 800523a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	3318      	adds	r3, #24
 8005242:	011b      	lsls	r3, r3, #4
 8005244:	440b      	add	r3, r1
 8005246:	3304      	adds	r3, #4
 8005248:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	3307      	adds	r3, #7
 800524e:	781b      	ldrb	r3, [r3, #0]
 8005250:	061a      	lsls	r2, r3, #24
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	3306      	adds	r3, #6
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	041b      	lsls	r3, r3, #16
 800525a:	431a      	orrs	r2, r3
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3305      	adds	r3, #5
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	021b      	lsls	r3, r3, #8
 8005264:	4313      	orrs	r3, r2
 8005266:	687a      	ldr	r2, [r7, #4]
 8005268:	3204      	adds	r2, #4
 800526a:	7812      	ldrb	r2, [r2, #0]
 800526c:	4610      	mov	r0, r2
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	6811      	ldr	r1, [r2, #0]
 8005272:	ea43 0200 	orr.w	r2, r3, r0
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	440b      	add	r3, r1
 800527c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8005280:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	3303      	adds	r3, #3
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	061a      	lsls	r2, r3, #24
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	3302      	adds	r3, #2
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	041b      	lsls	r3, r3, #16
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	3301      	adds	r3, #1
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	4313      	orrs	r3, r2
 800529e:	687a      	ldr	r2, [r7, #4]
 80052a0:	7812      	ldrb	r2, [r2, #0]
 80052a2:	4610      	mov	r0, r2
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	6811      	ldr	r1, [r2, #0]
 80052a8:	ea43 0200 	orr.w	r2, r3, r0
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	011b      	lsls	r3, r3, #4
 80052b0:	440b      	add	r3, r1
 80052b2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80052b6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	3318      	adds	r3, #24
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	68fa      	ldr	r2, [r7, #12]
 80052c8:	6811      	ldr	r1, [r2, #0]
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	3318      	adds	r3, #24
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	440b      	add	r3, r1
 80052d6:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80052d8:	2300      	movs	r3, #0
 80052da:	e00e      	b.n	80052fa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052e0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e006      	b.n	80052fa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
  }
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3724      	adds	r7, #36	; 0x24
 80052fe:	46bd      	mov	sp, r7
 8005300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005304:	4770      	bx	lr

08005306 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005306:	b480      	push	{r7}
 8005308:	b085      	sub	sp, #20
 800530a:	af00      	add	r7, sp, #0
 800530c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005318:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800531a:	7afb      	ldrb	r3, [r7, #11]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d002      	beq.n	8005326 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005320:	7afb      	ldrb	r3, [r7, #11]
 8005322:	2b02      	cmp	r3, #2
 8005324:	d11d      	bne.n	8005362 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d002      	beq.n	800533a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	3301      	adds	r3, #1
 8005338:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005344:	2b00      	cmp	r3, #0
 8005346:	d002      	beq.n	800534e <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	3301      	adds	r3, #1
 800534c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	3301      	adds	r3, #1
 8005360:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005362:	68fb      	ldr	r3, [r7, #12]
}
 8005364:	4618      	mov	r0, r3
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005370:	b480      	push	{r7}
 8005372:	b087      	sub	sp, #28
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	607a      	str	r2, [r7, #4]
 800537c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005384:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005386:	7dfb      	ldrb	r3, [r7, #23]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d003      	beq.n	8005394 <HAL_CAN_GetRxMessage+0x24>
 800538c:	7dfb      	ldrb	r3, [r7, #23]
 800538e:	2b02      	cmp	r3, #2
 8005390:	f040 80f3 	bne.w	800557a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10e      	bne.n	80053b8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d116      	bne.n	80053d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e0e7      	b.n	8005588 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	f003 0303 	and.w	r3, r3, #3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0d8      	b.n	8005588 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	331b      	adds	r3, #27
 80053de:	011b      	lsls	r3, r3, #4
 80053e0:	4413      	add	r3, r2
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0204 	and.w	r2, r3, #4
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10c      	bne.n	800540e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	331b      	adds	r3, #27
 80053fc:	011b      	lsls	r3, r3, #4
 80053fe:	4413      	add	r3, r2
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	0d5b      	lsrs	r3, r3, #21
 8005404:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	601a      	str	r2, [r3, #0]
 800540c:	e00b      	b.n	8005426 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	331b      	adds	r3, #27
 8005416:	011b      	lsls	r3, r3, #4
 8005418:	4413      	add	r3, r2
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	08db      	lsrs	r3, r3, #3
 800541e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	331b      	adds	r3, #27
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	4413      	add	r3, r2
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0202 	and.w	r2, r3, #2
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	331b      	adds	r3, #27
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4413      	add	r3, r2
 8005448:	3304      	adds	r3, #4
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f003 020f 	and.w	r2, r3, #15
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	331b      	adds	r3, #27
 800545c:	011b      	lsls	r3, r3, #4
 800545e:	4413      	add	r3, r2
 8005460:	3304      	adds	r3, #4
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	0a1b      	lsrs	r3, r3, #8
 8005466:	b2da      	uxtb	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	331b      	adds	r3, #27
 8005474:	011b      	lsls	r3, r3, #4
 8005476:	4413      	add	r3, r2
 8005478:	3304      	adds	r3, #4
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	0c1b      	lsrs	r3, r3, #16
 800547e:	b29a      	uxth	r2, r3
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	4413      	add	r3, r2
 800548e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	b2da      	uxtb	r2, r3
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0a1a      	lsrs	r2, r3, #8
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	3301      	adds	r3, #1
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	4413      	add	r3, r2
 80054be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	0c1a      	lsrs	r2, r3, #16
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	3302      	adds	r3, #2
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	011b      	lsls	r3, r3, #4
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	0e1a      	lsrs	r2, r3, #24
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	3303      	adds	r3, #3
 80054e4:	b2d2      	uxtb	r2, r2
 80054e6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	011b      	lsls	r3, r3, #4
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	3304      	adds	r3, #4
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	0a1a      	lsrs	r2, r3, #8
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	3305      	adds	r3, #5
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681a      	ldr	r2, [r3, #0]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	4413      	add	r3, r2
 8005524:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	0c1a      	lsrs	r2, r3, #16
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	3306      	adds	r3, #6
 8005530:	b2d2      	uxtb	r2, r2
 8005532:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	011b      	lsls	r3, r3, #4
 800553c:	4413      	add	r3, r2
 800553e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0e1a      	lsrs	r2, r3, #24
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3307      	adds	r3, #7
 800554a:	b2d2      	uxtb	r2, r2
 800554c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d108      	bne.n	8005566 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	68da      	ldr	r2, [r3, #12]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f042 0220 	orr.w	r2, r2, #32
 8005562:	60da      	str	r2, [r3, #12]
 8005564:	e007      	b.n	8005576 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	691a      	ldr	r2, [r3, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f042 0220 	orr.w	r2, r2, #32
 8005574:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e006      	b.n	8005588 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800557e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
  }
}
 8005588:	4618      	mov	r0, r3
 800558a:	371c      	adds	r7, #28
 800558c:	46bd      	mov	sp, r7
 800558e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005592:	4770      	bx	lr

08005594 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005594:	b480      	push	{r7}
 8005596:	b085      	sub	sp, #20
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055a6:	7bfb      	ldrb	r3, [r7, #15]
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d002      	beq.n	80055b2 <HAL_CAN_ActivateNotification+0x1e>
 80055ac:	7bfb      	ldrb	r3, [r7, #15]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d109      	bne.n	80055c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	6959      	ldr	r1, [r3, #20]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	430a      	orrs	r2, r1
 80055c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e006      	b.n	80055d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
  }
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3714      	adds	r7, #20
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b08a      	sub	sp, #40	; 0x28
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80055e8:	2300      	movs	r3, #0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	695b      	ldr	r3, [r3, #20]
 80055f2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	685b      	ldr	r3, [r3, #4]
 80055fa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d07c      	beq.n	8005720 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	f003 0301 	and.w	r3, r3, #1
 800562c:	2b00      	cmp	r3, #0
 800562e:	d023      	beq.n	8005678 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2201      	movs	r2, #1
 8005636:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f983 	bl	800594e <HAL_CAN_TxMailbox0CompleteCallback>
 8005648:	e016      	b.n	8005678 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	d004      	beq.n	800565e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005656:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
 800565c:	e00c      	b.n	8005678 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800565e:	69bb      	ldr	r3, [r7, #24]
 8005660:	f003 0308 	and.w	r3, r3, #8
 8005664:	2b00      	cmp	r3, #0
 8005666:	d004      	beq.n	8005672 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800566a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800566e:	627b      	str	r3, [r7, #36]	; 0x24
 8005670:	e002      	b.n	8005678 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f989 	bl	800598a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800567e:	2b00      	cmp	r3, #0
 8005680:	d024      	beq.n	80056cc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f44f 7280 	mov.w	r2, #256	; 0x100
 800568a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005692:	2b00      	cmp	r3, #0
 8005694:	d003      	beq.n	800569e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f963 	bl	8005962 <HAL_CAN_TxMailbox1CompleteCallback>
 800569c:	e016      	b.n	80056cc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d004      	beq.n	80056b2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ae:	627b      	str	r3, [r7, #36]	; 0x24
 80056b0:	e00c      	b.n	80056cc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056b2:	69bb      	ldr	r3, [r7, #24]
 80056b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d004      	beq.n	80056c6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056c2:	627b      	str	r3, [r7, #36]	; 0x24
 80056c4:	e002      	b.n	80056cc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f000 f969 	bl	800599e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d024      	beq.n	8005720 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056de:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056e0:	69bb      	ldr	r3, [r7, #24]
 80056e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f943 	bl	8005976 <HAL_CAN_TxMailbox2CompleteCallback>
 80056f0:	e016      	b.n	8005720 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d004      	beq.n	8005706 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005702:	627b      	str	r3, [r7, #36]	; 0x24
 8005704:	e00c      	b.n	8005720 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800570c:	2b00      	cmp	r3, #0
 800570e:	d004      	beq.n	800571a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005716:	627b      	str	r3, [r7, #36]	; 0x24
 8005718:	e002      	b.n	8005720 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 f949 	bl	80059b2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	f003 0310 	and.w	r3, r3, #16
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005736:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800573a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2210      	movs	r2, #16
 8005742:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	f003 0304 	and.w	r3, r3, #4
 800574a:	2b00      	cmp	r3, #0
 800574c:	d00b      	beq.n	8005766 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f003 0308 	and.w	r3, r3, #8
 8005754:	2b00      	cmp	r3, #0
 8005756:	d006      	beq.n	8005766 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2208      	movs	r2, #8
 800575e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 f930 	bl	80059c6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005766:	6a3b      	ldr	r3, [r7, #32]
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	2b00      	cmp	r3, #0
 800576e:	d009      	beq.n	8005784 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	f003 0303 	and.w	r3, r3, #3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d002      	beq.n	8005784 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fd fc10 	bl	8002fa4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800578a:	2b00      	cmp	r3, #0
 800578c:	d00c      	beq.n	80057a8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f003 0310 	and.w	r3, r3, #16
 8005794:	2b00      	cmp	r3, #0
 8005796:	d007      	beq.n	80057a8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800579e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2210      	movs	r2, #16
 80057a6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057a8:	6a3b      	ldr	r3, [r7, #32]
 80057aa:	f003 0320 	and.w	r3, r3, #32
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d00b      	beq.n	80057ca <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057b2:	693b      	ldr	r3, [r7, #16]
 80057b4:	f003 0308 	and.w	r3, r3, #8
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d006      	beq.n	80057ca <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2208      	movs	r2, #8
 80057c2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f000 f912 	bl	80059ee <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80057ca:	6a3b      	ldr	r3, [r7, #32]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	691b      	ldr	r3, [r3, #16]
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d002      	beq.n	80057e8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8f9 	bl	80059da <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80057e8:	6a3b      	ldr	r3, [r7, #32]
 80057ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d00b      	beq.n	800580a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	f003 0310 	and.w	r3, r3, #16
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d006      	beq.n	800580a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2210      	movs	r2, #16
 8005802:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f8fc 	bl	8005a02 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00b      	beq.n	800582c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	f003 0308 	and.w	r3, r3, #8
 800581a:	2b00      	cmp	r3, #0
 800581c:	d006      	beq.n	800582c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2208      	movs	r2, #8
 8005824:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f000 f8f5 	bl	8005a16 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800582c:	6a3b      	ldr	r3, [r7, #32]
 800582e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d07b      	beq.n	800592e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005836:	69fb      	ldr	r3, [r7, #28]
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d072      	beq.n	8005926 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005840:	6a3b      	ldr	r3, [r7, #32]
 8005842:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005846:	2b00      	cmp	r3, #0
 8005848:	d008      	beq.n	800585c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005850:	2b00      	cmp	r3, #0
 8005852:	d003      	beq.n	800585c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	f043 0301 	orr.w	r3, r3, #1
 800585a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f043 0302 	orr.w	r3, r3, #2
 8005876:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f043 0304 	orr.w	r3, r3, #4
 8005892:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800589a:	2b00      	cmp	r3, #0
 800589c:	d043      	beq.n	8005926 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d03e      	beq.n	8005926 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ae:	2b60      	cmp	r3, #96	; 0x60
 80058b0:	d02b      	beq.n	800590a <HAL_CAN_IRQHandler+0x32a>
 80058b2:	2b60      	cmp	r3, #96	; 0x60
 80058b4:	d82e      	bhi.n	8005914 <HAL_CAN_IRQHandler+0x334>
 80058b6:	2b50      	cmp	r3, #80	; 0x50
 80058b8:	d022      	beq.n	8005900 <HAL_CAN_IRQHandler+0x320>
 80058ba:	2b50      	cmp	r3, #80	; 0x50
 80058bc:	d82a      	bhi.n	8005914 <HAL_CAN_IRQHandler+0x334>
 80058be:	2b40      	cmp	r3, #64	; 0x40
 80058c0:	d019      	beq.n	80058f6 <HAL_CAN_IRQHandler+0x316>
 80058c2:	2b40      	cmp	r3, #64	; 0x40
 80058c4:	d826      	bhi.n	8005914 <HAL_CAN_IRQHandler+0x334>
 80058c6:	2b30      	cmp	r3, #48	; 0x30
 80058c8:	d010      	beq.n	80058ec <HAL_CAN_IRQHandler+0x30c>
 80058ca:	2b30      	cmp	r3, #48	; 0x30
 80058cc:	d822      	bhi.n	8005914 <HAL_CAN_IRQHandler+0x334>
 80058ce:	2b10      	cmp	r3, #16
 80058d0:	d002      	beq.n	80058d8 <HAL_CAN_IRQHandler+0x2f8>
 80058d2:	2b20      	cmp	r3, #32
 80058d4:	d005      	beq.n	80058e2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058d6:	e01d      	b.n	8005914 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058da:	f043 0308 	orr.w	r3, r3, #8
 80058de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058e0:	e019      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e4:	f043 0310 	orr.w	r3, r3, #16
 80058e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058ea:	e014      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80058ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ee:	f043 0320 	orr.w	r3, r3, #32
 80058f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058f4:	e00f      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80058f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058fe:	e00a      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005906:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005908:	e005      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800590a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005910:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005912:	e000      	b.n	8005916 <HAL_CAN_IRQHandler+0x336>
            break;
 8005914:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	699a      	ldr	r2, [r3, #24]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005924:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	2204      	movs	r2, #4
 800592c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800592e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005930:	2b00      	cmp	r3, #0
 8005932:	d008      	beq.n	8005946 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593a:	431a      	orrs	r2, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 f872 	bl	8005a2a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005946:	bf00      	nop
 8005948:	3728      	adds	r7, #40	; 0x28
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}

0800594e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800594e:	b480      	push	{r7}
 8005950:	b083      	sub	sp, #12
 8005952:	af00      	add	r7, sp, #0
 8005954:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005956:	bf00      	nop
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005976:	b480      	push	{r7}
 8005978:	b083      	sub	sp, #12
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800598a:	b480      	push	{r7}
 800598c:	b083      	sub	sp, #12
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005992:	bf00      	nop
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800599e:	b480      	push	{r7}
 80059a0:	b083      	sub	sp, #12
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80059a6:	bf00      	nop
 80059a8:	370c      	adds	r7, #12
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr

080059b2 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80059b2:	b480      	push	{r7}
 80059b4:	b083      	sub	sp, #12
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80059ba:	bf00      	nop
 80059bc:	370c      	adds	r7, #12
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr

080059c6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059c6:	b480      	push	{r7}
 80059c8:	b083      	sub	sp, #12
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80059ce:	bf00      	nop
 80059d0:	370c      	adds	r7, #12
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr

080059da <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059da:	b480      	push	{r7}
 80059dc:	b083      	sub	sp, #12
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059e2:	bf00      	nop
 80059e4:	370c      	adds	r7, #12
 80059e6:	46bd      	mov	sp, r7
 80059e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ec:	4770      	bx	lr

080059ee <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b083      	sub	sp, #12
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059f6:	bf00      	nop
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005a0a:	bf00      	nop
 8005a0c:	370c      	adds	r7, #12
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005a16:	b480      	push	{r7}
 8005a18:	b083      	sub	sp, #12
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005a1e:	bf00      	nop
 8005a20:	370c      	adds	r7, #12
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr

08005a2a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a2a:	b480      	push	{r7}
 8005a2c:	b083      	sub	sp, #12
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a32:	bf00      	nop
 8005a34:	370c      	adds	r7, #12
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
	...

08005a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0307 	and.w	r3, r3, #7
 8005a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a50:	4b0b      	ldr	r3, [pc, #44]	; (8005a80 <__NVIC_SetPriorityGrouping+0x40>)
 8005a52:	68db      	ldr	r3, [r3, #12]
 8005a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005a68:	4b06      	ldr	r3, [pc, #24]	; (8005a84 <__NVIC_SetPriorityGrouping+0x44>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a6e:	4a04      	ldr	r2, [pc, #16]	; (8005a80 <__NVIC_SetPriorityGrouping+0x40>)
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	60d3      	str	r3, [r2, #12]
}
 8005a74:	bf00      	nop
 8005a76:	3714      	adds	r7, #20
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	05fa0000 	.word	0x05fa0000

08005a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a8c:	4b04      	ldr	r3, [pc, #16]	; (8005aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	0a1b      	lsrs	r3, r3, #8
 8005a92:	f003 0307 	and.w	r3, r3, #7
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr
 8005aa0:	e000ed00 	.word	0xe000ed00

08005aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	db0b      	blt.n	8005ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	f003 021f 	and.w	r2, r3, #31
 8005abc:	4907      	ldr	r1, [pc, #28]	; (8005adc <__NVIC_EnableIRQ+0x38>)
 8005abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	2001      	movs	r0, #1
 8005ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005ace:	bf00      	nop
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	e000e100 	.word	0xe000e100

08005ae0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	db12      	blt.n	8005b18 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005af2:	79fb      	ldrb	r3, [r7, #7]
 8005af4:	f003 021f 	and.w	r2, r3, #31
 8005af8:	490a      	ldr	r1, [pc, #40]	; (8005b24 <__NVIC_DisableIRQ+0x44>)
 8005afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005afe:	095b      	lsrs	r3, r3, #5
 8005b00:	2001      	movs	r0, #1
 8005b02:	fa00 f202 	lsl.w	r2, r0, r2
 8005b06:	3320      	adds	r3, #32
 8005b08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8005b0c:	f3bf 8f4f 	dsb	sy
}
 8005b10:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005b12:	f3bf 8f6f 	isb	sy
}
 8005b16:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8005b18:	bf00      	nop
 8005b1a:	370c      	adds	r7, #12
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b22:	4770      	bx	lr
 8005b24:	e000e100 	.word	0xe000e100

08005b28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	4603      	mov	r3, r0
 8005b30:	6039      	str	r1, [r7, #0]
 8005b32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005b34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	db0a      	blt.n	8005b52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	b2da      	uxtb	r2, r3
 8005b40:	490c      	ldr	r1, [pc, #48]	; (8005b74 <__NVIC_SetPriority+0x4c>)
 8005b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005b46:	0112      	lsls	r2, r2, #4
 8005b48:	b2d2      	uxtb	r2, r2
 8005b4a:	440b      	add	r3, r1
 8005b4c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005b50:	e00a      	b.n	8005b68 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	b2da      	uxtb	r2, r3
 8005b56:	4908      	ldr	r1, [pc, #32]	; (8005b78 <__NVIC_SetPriority+0x50>)
 8005b58:	79fb      	ldrb	r3, [r7, #7]
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	3b04      	subs	r3, #4
 8005b60:	0112      	lsls	r2, r2, #4
 8005b62:	b2d2      	uxtb	r2, r2
 8005b64:	440b      	add	r3, r1
 8005b66:	761a      	strb	r2, [r3, #24]
}
 8005b68:	bf00      	nop
 8005b6a:	370c      	adds	r7, #12
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr
 8005b74:	e000e100 	.word	0xe000e100
 8005b78:	e000ed00 	.word	0xe000ed00

08005b7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b089      	sub	sp, #36	; 0x24
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f003 0307 	and.w	r3, r3, #7
 8005b8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	f1c3 0307 	rsb	r3, r3, #7
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	bf28      	it	cs
 8005b9a:	2304      	movcs	r3, #4
 8005b9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	2b06      	cmp	r3, #6
 8005ba4:	d902      	bls.n	8005bac <NVIC_EncodePriority+0x30>
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3b03      	subs	r3, #3
 8005baa:	e000      	b.n	8005bae <NVIC_EncodePriority+0x32>
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005bba:	43da      	mvns	r2, r3
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	401a      	ands	r2, r3
 8005bc0:	697b      	ldr	r3, [r7, #20]
 8005bc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bc4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	fa01 f303 	lsl.w	r3, r1, r3
 8005bce:	43d9      	mvns	r1, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005bd4:	4313      	orrs	r3, r2
         );
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3724      	adds	r7, #36	; 0x24
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr
	...

08005be4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005bf4:	d301      	bcc.n	8005bfa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	e00f      	b.n	8005c1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	; (8005c24 <SysTick_Config+0x40>)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005c02:	210f      	movs	r1, #15
 8005c04:	f04f 30ff 	mov.w	r0, #4294967295
 8005c08:	f7ff ff8e 	bl	8005b28 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c0c:	4b05      	ldr	r3, [pc, #20]	; (8005c24 <SysTick_Config+0x40>)
 8005c0e:	2200      	movs	r2, #0
 8005c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c12:	4b04      	ldr	r3, [pc, #16]	; (8005c24 <SysTick_Config+0x40>)
 8005c14:	2207      	movs	r2, #7
 8005c16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	3708      	adds	r7, #8
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	e000e010 	.word	0xe000e010

08005c28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f7ff ff05 	bl	8005a40 <__NVIC_SetPriorityGrouping>
}
 8005c36:	bf00      	nop
 8005c38:	3708      	adds	r7, #8
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	bd80      	pop	{r7, pc}

08005c3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005c3e:	b580      	push	{r7, lr}
 8005c40:	b086      	sub	sp, #24
 8005c42:	af00      	add	r7, sp, #0
 8005c44:	4603      	mov	r3, r0
 8005c46:	60b9      	str	r1, [r7, #8]
 8005c48:	607a      	str	r2, [r7, #4]
 8005c4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005c50:	f7ff ff1a 	bl	8005a88 <__NVIC_GetPriorityGrouping>
 8005c54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68b9      	ldr	r1, [r7, #8]
 8005c5a:	6978      	ldr	r0, [r7, #20]
 8005c5c:	f7ff ff8e 	bl	8005b7c <NVIC_EncodePriority>
 8005c60:	4602      	mov	r2, r0
 8005c62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005c66:	4611      	mov	r1, r2
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f7ff ff5d 	bl	8005b28 <__NVIC_SetPriority>
}
 8005c6e:	bf00      	nop
 8005c70:	3718      	adds	r7, #24
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b082      	sub	sp, #8
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c84:	4618      	mov	r0, r3
 8005c86:	f7ff ff0d 	bl	8005aa4 <__NVIC_EnableIRQ>
}
 8005c8a:	bf00      	nop
 8005c8c:	3708      	adds	r7, #8
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b082      	sub	sp, #8
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	4603      	mov	r3, r0
 8005c9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff1d 	bl	8005ae0 <__NVIC_DisableIRQ>
}
 8005ca6:	bf00      	nop
 8005ca8:	3708      	adds	r7, #8
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}

08005cae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005cae:	b580      	push	{r7, lr}
 8005cb0:	b082      	sub	sp, #8
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f7ff ff94 	bl	8005be4 <SysTick_Config>
 8005cbc:	4603      	mov	r3, r0
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3708      	adds	r7, #8
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	bd80      	pop	{r7, pc}

08005cc6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005cc6:	b580      	push	{r7, lr}
 8005cc8:	b084      	sub	sp, #16
 8005cca:	af00      	add	r7, sp, #0
 8005ccc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005cd4:	f7fe ffec 	bl	8004cb0 <HAL_GetTick>
 8005cd8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d008      	beq.n	8005cf8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2280      	movs	r2, #128	; 0x80
 8005cea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e052      	b.n	8005d9e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 0216 	bic.w	r2, r2, #22
 8005d06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	695a      	ldr	r2, [r3, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005d16:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d103      	bne.n	8005d28 <HAL_DMA_Abort+0x62>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d007      	beq.n	8005d38 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0208 	bic.w	r2, r2, #8
 8005d36:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0201 	bic.w	r2, r2, #1
 8005d46:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d48:	e013      	b.n	8005d72 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005d4a:	f7fe ffb1 	bl	8004cb0 <HAL_GetTick>
 8005d4e:	4602      	mov	r2, r0
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	1ad3      	subs	r3, r2, r3
 8005d54:	2b05      	cmp	r3, #5
 8005d56:	d90c      	bls.n	8005d72 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2220      	movs	r2, #32
 8005d5c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2203      	movs	r2, #3
 8005d62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e015      	b.n	8005d9e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1e4      	bne.n	8005d4a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d84:	223f      	movs	r2, #63	; 0x3f
 8005d86:	409a      	lsls	r2, r3
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	2200      	movs	r2, #0
 8005d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	3710      	adds	r7, #16
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}

08005da6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005da6:	b480      	push	{r7}
 8005da8:	b083      	sub	sp, #12
 8005daa:	af00      	add	r7, sp, #0
 8005dac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005db4:	b2db      	uxtb	r3, r3
 8005db6:	2b02      	cmp	r3, #2
 8005db8:	d004      	beq.n	8005dc4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2280      	movs	r2, #128	; 0x80
 8005dbe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e00c      	b.n	8005dde <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2205      	movs	r2, #5
 8005dc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ddc:	2300      	movs	r3, #0
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	370c      	adds	r7, #12
 8005de2:	46bd      	mov	sp, r7
 8005de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de8:	4770      	bx	lr
	...

08005dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b089      	sub	sp, #36	; 0x24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005df6:	2300      	movs	r3, #0
 8005df8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005e02:	2300      	movs	r3, #0
 8005e04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005e06:	2300      	movs	r3, #0
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	e175      	b.n	80060f8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005e20:	693a      	ldr	r2, [r7, #16]
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	429a      	cmp	r2, r3
 8005e26:	f040 8164 	bne.w	80060f2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f003 0303 	and.w	r3, r3, #3
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d005      	beq.n	8005e42 <HAL_GPIO_Init+0x56>
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	f003 0303 	and.w	r3, r3, #3
 8005e3e:	2b02      	cmp	r3, #2
 8005e40:	d130      	bne.n	8005ea4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005e48:	69fb      	ldr	r3, [r7, #28]
 8005e4a:	005b      	lsls	r3, r3, #1
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e52:	43db      	mvns	r3, r3
 8005e54:	69ba      	ldr	r2, [r7, #24]
 8005e56:	4013      	ands	r3, r2
 8005e58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	68da      	ldr	r2, [r3, #12]
 8005e5e:	69fb      	ldr	r3, [r7, #28]
 8005e60:	005b      	lsls	r3, r3, #1
 8005e62:	fa02 f303 	lsl.w	r3, r2, r3
 8005e66:	69ba      	ldr	r2, [r7, #24]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e78:	2201      	movs	r2, #1
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	685b      	ldr	r3, [r3, #4]
 8005e8c:	091b      	lsrs	r3, r3, #4
 8005e8e:	f003 0201 	and.w	r2, r3, #1
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	fa02 f303 	lsl.w	r3, r2, r3
 8005e98:	69ba      	ldr	r2, [r7, #24]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69ba      	ldr	r2, [r7, #24]
 8005ea2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	f003 0303 	and.w	r3, r3, #3
 8005eac:	2b03      	cmp	r3, #3
 8005eae:	d017      	beq.n	8005ee0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005eb6:	69fb      	ldr	r3, [r7, #28]
 8005eb8:	005b      	lsls	r3, r3, #1
 8005eba:	2203      	movs	r2, #3
 8005ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec0:	43db      	mvns	r3, r3
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689a      	ldr	r2, [r3, #8]
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	005b      	lsls	r3, r3, #1
 8005ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	69ba      	ldr	r2, [r7, #24]
 8005ede:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	f003 0303 	and.w	r3, r3, #3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d123      	bne.n	8005f34 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	08da      	lsrs	r2, r3, #3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3208      	adds	r2, #8
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	220f      	movs	r2, #15
 8005f04:	fa02 f303 	lsl.w	r3, r2, r3
 8005f08:	43db      	mvns	r3, r3
 8005f0a:	69ba      	ldr	r2, [r7, #24]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	691a      	ldr	r2, [r3, #16]
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	f003 0307 	and.w	r3, r3, #7
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	08da      	lsrs	r2, r3, #3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	3208      	adds	r2, #8
 8005f2e:	69b9      	ldr	r1, [r7, #24]
 8005f30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	005b      	lsls	r3, r3, #1
 8005f3e:	2203      	movs	r2, #3
 8005f40:	fa02 f303 	lsl.w	r3, r2, r3
 8005f44:	43db      	mvns	r3, r3
 8005f46:	69ba      	ldr	r2, [r7, #24]
 8005f48:	4013      	ands	r3, r2
 8005f4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	f003 0203 	and.w	r2, r3, #3
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	005b      	lsls	r3, r3, #1
 8005f58:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	69ba      	ldr	r2, [r7, #24]
 8005f66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 80be 	beq.w	80060f2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f76:	4b66      	ldr	r3, [pc, #408]	; (8006110 <HAL_GPIO_Init+0x324>)
 8005f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7a:	4a65      	ldr	r2, [pc, #404]	; (8006110 <HAL_GPIO_Init+0x324>)
 8005f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f80:	6453      	str	r3, [r2, #68]	; 0x44
 8005f82:	4b63      	ldr	r3, [pc, #396]	; (8006110 <HAL_GPIO_Init+0x324>)
 8005f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f8a:	60fb      	str	r3, [r7, #12]
 8005f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f8e:	4a61      	ldr	r2, [pc, #388]	; (8006114 <HAL_GPIO_Init+0x328>)
 8005f90:	69fb      	ldr	r3, [r7, #28]
 8005f92:	089b      	lsrs	r3, r3, #2
 8005f94:	3302      	adds	r3, #2
 8005f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	f003 0303 	and.w	r3, r3, #3
 8005fa2:	009b      	lsls	r3, r3, #2
 8005fa4:	220f      	movs	r2, #15
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	43db      	mvns	r3, r3
 8005fac:	69ba      	ldr	r2, [r7, #24]
 8005fae:	4013      	ands	r3, r2
 8005fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a58      	ldr	r2, [pc, #352]	; (8006118 <HAL_GPIO_Init+0x32c>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d037      	beq.n	800602a <HAL_GPIO_Init+0x23e>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a57      	ldr	r2, [pc, #348]	; (800611c <HAL_GPIO_Init+0x330>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d031      	beq.n	8006026 <HAL_GPIO_Init+0x23a>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	4a56      	ldr	r2, [pc, #344]	; (8006120 <HAL_GPIO_Init+0x334>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d02b      	beq.n	8006022 <HAL_GPIO_Init+0x236>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	4a55      	ldr	r2, [pc, #340]	; (8006124 <HAL_GPIO_Init+0x338>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d025      	beq.n	800601e <HAL_GPIO_Init+0x232>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	4a54      	ldr	r2, [pc, #336]	; (8006128 <HAL_GPIO_Init+0x33c>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d01f      	beq.n	800601a <HAL_GPIO_Init+0x22e>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	4a53      	ldr	r2, [pc, #332]	; (800612c <HAL_GPIO_Init+0x340>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d019      	beq.n	8006016 <HAL_GPIO_Init+0x22a>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4a52      	ldr	r2, [pc, #328]	; (8006130 <HAL_GPIO_Init+0x344>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d013      	beq.n	8006012 <HAL_GPIO_Init+0x226>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	4a51      	ldr	r2, [pc, #324]	; (8006134 <HAL_GPIO_Init+0x348>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00d      	beq.n	800600e <HAL_GPIO_Init+0x222>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	4a50      	ldr	r2, [pc, #320]	; (8006138 <HAL_GPIO_Init+0x34c>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d007      	beq.n	800600a <HAL_GPIO_Init+0x21e>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	4a4f      	ldr	r2, [pc, #316]	; (800613c <HAL_GPIO_Init+0x350>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <HAL_GPIO_Init+0x21a>
 8006002:	2309      	movs	r3, #9
 8006004:	e012      	b.n	800602c <HAL_GPIO_Init+0x240>
 8006006:	230a      	movs	r3, #10
 8006008:	e010      	b.n	800602c <HAL_GPIO_Init+0x240>
 800600a:	2308      	movs	r3, #8
 800600c:	e00e      	b.n	800602c <HAL_GPIO_Init+0x240>
 800600e:	2307      	movs	r3, #7
 8006010:	e00c      	b.n	800602c <HAL_GPIO_Init+0x240>
 8006012:	2306      	movs	r3, #6
 8006014:	e00a      	b.n	800602c <HAL_GPIO_Init+0x240>
 8006016:	2305      	movs	r3, #5
 8006018:	e008      	b.n	800602c <HAL_GPIO_Init+0x240>
 800601a:	2304      	movs	r3, #4
 800601c:	e006      	b.n	800602c <HAL_GPIO_Init+0x240>
 800601e:	2303      	movs	r3, #3
 8006020:	e004      	b.n	800602c <HAL_GPIO_Init+0x240>
 8006022:	2302      	movs	r3, #2
 8006024:	e002      	b.n	800602c <HAL_GPIO_Init+0x240>
 8006026:	2301      	movs	r3, #1
 8006028:	e000      	b.n	800602c <HAL_GPIO_Init+0x240>
 800602a:	2300      	movs	r3, #0
 800602c:	69fa      	ldr	r2, [r7, #28]
 800602e:	f002 0203 	and.w	r2, r2, #3
 8006032:	0092      	lsls	r2, r2, #2
 8006034:	4093      	lsls	r3, r2
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	4313      	orrs	r3, r2
 800603a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800603c:	4935      	ldr	r1, [pc, #212]	; (8006114 <HAL_GPIO_Init+0x328>)
 800603e:	69fb      	ldr	r3, [r7, #28]
 8006040:	089b      	lsrs	r3, r3, #2
 8006042:	3302      	adds	r3, #2
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800604a:	4b3d      	ldr	r3, [pc, #244]	; (8006140 <HAL_GPIO_Init+0x354>)
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	43db      	mvns	r3, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4013      	ands	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800606e:	4a34      	ldr	r2, [pc, #208]	; (8006140 <HAL_GPIO_Init+0x354>)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006074:	4b32      	ldr	r3, [pc, #200]	; (8006140 <HAL_GPIO_Init+0x354>)
 8006076:	68db      	ldr	r3, [r3, #12]
 8006078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006098:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_GPIO_Init+0x354>)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800609e:	4b28      	ldr	r3, [pc, #160]	; (8006140 <HAL_GPIO_Init+0x354>)
 80060a0:	685b      	ldr	r3, [r3, #4]
 80060a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	43db      	mvns	r3, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4013      	ands	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d003      	beq.n	80060c2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	693b      	ldr	r3, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80060c2:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <HAL_GPIO_Init+0x354>)
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80060c8:	4b1d      	ldr	r3, [pc, #116]	; (8006140 <HAL_GPIO_Init+0x354>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80060ce:	693b      	ldr	r3, [r7, #16]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d003      	beq.n	80060ec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	693b      	ldr	r3, [r7, #16]
 80060e8:	4313      	orrs	r3, r2
 80060ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80060ec:	4a14      	ldr	r2, [pc, #80]	; (8006140 <HAL_GPIO_Init+0x354>)
 80060ee:	69bb      	ldr	r3, [r7, #24]
 80060f0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	3301      	adds	r3, #1
 80060f6:	61fb      	str	r3, [r7, #28]
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	2b0f      	cmp	r3, #15
 80060fc:	f67f ae86 	bls.w	8005e0c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	3724      	adds	r7, #36	; 0x24
 8006106:	46bd      	mov	sp, r7
 8006108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop
 8006110:	40023800 	.word	0x40023800
 8006114:	40013800 	.word	0x40013800
 8006118:	40020000 	.word	0x40020000
 800611c:	40020400 	.word	0x40020400
 8006120:	40020800 	.word	0x40020800
 8006124:	40020c00 	.word	0x40020c00
 8006128:	40021000 	.word	0x40021000
 800612c:	40021400 	.word	0x40021400
 8006130:	40021800 	.word	0x40021800
 8006134:	40021c00 	.word	0x40021c00
 8006138:	40022000 	.word	0x40022000
 800613c:	40022400 	.word	0x40022400
 8006140:	40013c00 	.word	0x40013c00

08006144 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006144:	b480      	push	{r7}
 8006146:	b085      	sub	sp, #20
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	460b      	mov	r3, r1
 800614e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	691a      	ldr	r2, [r3, #16]
 8006154:	887b      	ldrh	r3, [r7, #2]
 8006156:	4013      	ands	r3, r2
 8006158:	2b00      	cmp	r3, #0
 800615a:	d002      	beq.n	8006162 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800615c:	2301      	movs	r3, #1
 800615e:	73fb      	strb	r3, [r7, #15]
 8006160:	e001      	b.n	8006166 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006162:	2300      	movs	r3, #0
 8006164:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
}
 8006168:	4618      	mov	r0, r3
 800616a:	3714      	adds	r7, #20
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	460b      	mov	r3, r1
 800617e:	807b      	strh	r3, [r7, #2]
 8006180:	4613      	mov	r3, r2
 8006182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006184:	787b      	ldrb	r3, [r7, #1]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800618a:	887a      	ldrh	r2, [r7, #2]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006190:	e003      	b.n	800619a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006192:	887b      	ldrh	r3, [r7, #2]
 8006194:	041a      	lsls	r2, r3, #16
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	619a      	str	r2, [r3, #24]
}
 800619a:	bf00      	nop
 800619c:	370c      	adds	r7, #12
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b085      	sub	sp, #20
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	695b      	ldr	r3, [r3, #20]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80061b8:	887a      	ldrh	r2, [r7, #2]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	4013      	ands	r3, r2
 80061be:	041a      	lsls	r2, r3, #16
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	43d9      	mvns	r1, r3
 80061c4:	887b      	ldrh	r3, [r7, #2]
 80061c6:	400b      	ands	r3, r1
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	619a      	str	r2, [r3, #24]
}
 80061ce:	bf00      	nop
 80061d0:	3714      	adds	r7, #20
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	4603      	mov	r3, r0
 80061e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061e8:	695a      	ldr	r2, [r3, #20]
 80061ea:	88fb      	ldrh	r3, [r7, #6]
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d006      	beq.n	8006200 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80061f2:	4a05      	ldr	r2, [pc, #20]	; (8006208 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80061f4:	88fb      	ldrh	r3, [r7, #6]
 80061f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80061f8:	88fb      	ldrh	r3, [r7, #6]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f7fb fcfa 	bl	8001bf4 <HAL_GPIO_EXTI_Callback>
  }
}
 8006200:	bf00      	nop
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	40013c00 	.word	0x40013c00

0800620c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b082      	sub	sp, #8
 8006210:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006212:	2300      	movs	r3, #0
 8006214:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006216:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621a:	4a22      	ldr	r2, [pc, #136]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800621c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006220:	6413      	str	r3, [r2, #64]	; 0x40
 8006222:	4b20      	ldr	r3, [pc, #128]	; (80062a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8006224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800622e:	4b1e      	ldr	r3, [pc, #120]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a1d      	ldr	r2, [pc, #116]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006234:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006238:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800623a:	f7fe fd39 	bl	8004cb0 <HAL_GetTick>
 800623e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006240:	e009      	b.n	8006256 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006242:	f7fe fd35 	bl	8004cb0 <HAL_GetTick>
 8006246:	4602      	mov	r2, r0
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	1ad3      	subs	r3, r2, r3
 800624c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006250:	d901      	bls.n	8006256 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e022      	b.n	800629c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006256:	4b14      	ldr	r3, [pc, #80]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800625e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006262:	d1ee      	bne.n	8006242 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006264:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a0f      	ldr	r2, [pc, #60]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800626a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800626e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006270:	f7fe fd1e 	bl	8004cb0 <HAL_GetTick>
 8006274:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006276:	e009      	b.n	800628c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006278:	f7fe fd1a 	bl	8004cb0 <HAL_GetTick>
 800627c:	4602      	mov	r2, r0
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	1ad3      	subs	r3, r2, r3
 8006282:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006286:	d901      	bls.n	800628c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006288:	2303      	movs	r3, #3
 800628a:	e007      	b.n	800629c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800628c:	4b06      	ldr	r3, [pc, #24]	; (80062a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006294:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006298:	d1ee      	bne.n	8006278 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	40023800 	.word	0x40023800
 80062a8:	40007000 	.word	0x40007000

080062ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b086      	sub	sp, #24
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80062b4:	2300      	movs	r3, #0
 80062b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d101      	bne.n	80062c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e291      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0301 	and.w	r3, r3, #1
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 8087 	beq.w	80063de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062d0:	4b96      	ldr	r3, [pc, #600]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80062d2:	689b      	ldr	r3, [r3, #8]
 80062d4:	f003 030c 	and.w	r3, r3, #12
 80062d8:	2b04      	cmp	r3, #4
 80062da:	d00c      	beq.n	80062f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062dc:	4b93      	ldr	r3, [pc, #588]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f003 030c 	and.w	r3, r3, #12
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d112      	bne.n	800630e <HAL_RCC_OscConfig+0x62>
 80062e8:	4b90      	ldr	r3, [pc, #576]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062f4:	d10b      	bne.n	800630e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062f6:	4b8d      	ldr	r3, [pc, #564]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d06c      	beq.n	80063dc <HAL_RCC_OscConfig+0x130>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d168      	bne.n	80063dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e26b      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006316:	d106      	bne.n	8006326 <HAL_RCC_OscConfig+0x7a>
 8006318:	4b84      	ldr	r3, [pc, #528]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a83      	ldr	r2, [pc, #524]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800631e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	e02e      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d10c      	bne.n	8006348 <HAL_RCC_OscConfig+0x9c>
 800632e:	4b7f      	ldr	r3, [pc, #508]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a7e      	ldr	r2, [pc, #504]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006334:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4b7c      	ldr	r3, [pc, #496]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a7b      	ldr	r2, [pc, #492]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006340:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e01d      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006350:	d10c      	bne.n	800636c <HAL_RCC_OscConfig+0xc0>
 8006352:	4b76      	ldr	r3, [pc, #472]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a75      	ldr	r2, [pc, #468]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006358:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b73      	ldr	r3, [pc, #460]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a72      	ldr	r2, [pc, #456]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e00b      	b.n	8006384 <HAL_RCC_OscConfig+0xd8>
 800636c:	4b6f      	ldr	r3, [pc, #444]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a6e      	ldr	r2, [pc, #440]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006372:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006376:	6013      	str	r3, [r2, #0]
 8006378:	4b6c      	ldr	r3, [pc, #432]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a6b      	ldr	r2, [pc, #428]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800637e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006382:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d013      	beq.n	80063b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638c:	f7fe fc90 	bl	8004cb0 <HAL_GetTick>
 8006390:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006392:	e008      	b.n	80063a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006394:	f7fe fc8c 	bl	8004cb0 <HAL_GetTick>
 8006398:	4602      	mov	r2, r0
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	1ad3      	subs	r3, r2, r3
 800639e:	2b64      	cmp	r3, #100	; 0x64
 80063a0:	d901      	bls.n	80063a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063a2:	2303      	movs	r3, #3
 80063a4:	e21f      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	4b61      	ldr	r3, [pc, #388]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0f0      	beq.n	8006394 <HAL_RCC_OscConfig+0xe8>
 80063b2:	e014      	b.n	80063de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b4:	f7fe fc7c 	bl	8004cb0 <HAL_GetTick>
 80063b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ba:	e008      	b.n	80063ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063bc:	f7fe fc78 	bl	8004cb0 <HAL_GetTick>
 80063c0:	4602      	mov	r2, r0
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	1ad3      	subs	r3, r2, r3
 80063c6:	2b64      	cmp	r3, #100	; 0x64
 80063c8:	d901      	bls.n	80063ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063ca:	2303      	movs	r3, #3
 80063cc:	e20b      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ce:	4b57      	ldr	r3, [pc, #348]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1f0      	bne.n	80063bc <HAL_RCC_OscConfig+0x110>
 80063da:	e000      	b.n	80063de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d069      	beq.n	80064be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80063ea:	4b50      	ldr	r3, [pc, #320]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	f003 030c 	and.w	r3, r3, #12
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d00b      	beq.n	800640e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f6:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f003 030c 	and.w	r3, r3, #12
 80063fe:	2b08      	cmp	r3, #8
 8006400:	d11c      	bne.n	800643c <HAL_RCC_OscConfig+0x190>
 8006402:	4b4a      	ldr	r3, [pc, #296]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800640a:	2b00      	cmp	r3, #0
 800640c:	d116      	bne.n	800643c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800640e:	4b47      	ldr	r3, [pc, #284]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0302 	and.w	r3, r3, #2
 8006416:	2b00      	cmp	r3, #0
 8006418:	d005      	beq.n	8006426 <HAL_RCC_OscConfig+0x17a>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d001      	beq.n	8006426 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e1df      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006426:	4b41      	ldr	r3, [pc, #260]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	691b      	ldr	r3, [r3, #16]
 8006432:	00db      	lsls	r3, r3, #3
 8006434:	493d      	ldr	r1, [pc, #244]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006436:	4313      	orrs	r3, r2
 8006438:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800643a:	e040      	b.n	80064be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	68db      	ldr	r3, [r3, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d023      	beq.n	800648c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006444:	4b39      	ldr	r3, [pc, #228]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a38      	ldr	r2, [pc, #224]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006450:	f7fe fc2e 	bl	8004cb0 <HAL_GetTick>
 8006454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006456:	e008      	b.n	800646a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006458:	f7fe fc2a 	bl	8004cb0 <HAL_GetTick>
 800645c:	4602      	mov	r2, r0
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	1ad3      	subs	r3, r2, r3
 8006462:	2b02      	cmp	r3, #2
 8006464:	d901      	bls.n	800646a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006466:	2303      	movs	r3, #3
 8006468:	e1bd      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800646a:	4b30      	ldr	r3, [pc, #192]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f003 0302 	and.w	r3, r3, #2
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0f0      	beq.n	8006458 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006476:	4b2d      	ldr	r3, [pc, #180]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	00db      	lsls	r3, r3, #3
 8006484:	4929      	ldr	r1, [pc, #164]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006486:	4313      	orrs	r3, r2
 8006488:	600b      	str	r3, [r1, #0]
 800648a:	e018      	b.n	80064be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800648c:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a26      	ldr	r2, [pc, #152]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006492:	f023 0301 	bic.w	r3, r3, #1
 8006496:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006498:	f7fe fc0a 	bl	8004cb0 <HAL_GetTick>
 800649c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800649e:	e008      	b.n	80064b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a0:	f7fe fc06 	bl	8004cb0 <HAL_GetTick>
 80064a4:	4602      	mov	r2, r0
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	1ad3      	subs	r3, r2, r3
 80064aa:	2b02      	cmp	r3, #2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e199      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064b2:	4b1e      	ldr	r3, [pc, #120]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f003 0302 	and.w	r3, r3, #2
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1f0      	bne.n	80064a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d038      	beq.n	800653c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	695b      	ldr	r3, [r3, #20]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d019      	beq.n	8006506 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064d2:	4b16      	ldr	r3, [pc, #88]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80064d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064d6:	4a15      	ldr	r2, [pc, #84]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80064d8:	f043 0301 	orr.w	r3, r3, #1
 80064dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064de:	f7fe fbe7 	bl	8004cb0 <HAL_GetTick>
 80064e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e4:	e008      	b.n	80064f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e6:	f7fe fbe3 	bl	8004cb0 <HAL_GetTick>
 80064ea:	4602      	mov	r2, r0
 80064ec:	693b      	ldr	r3, [r7, #16]
 80064ee:	1ad3      	subs	r3, r2, r3
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d901      	bls.n	80064f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80064f4:	2303      	movs	r3, #3
 80064f6:	e176      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064f8:	4b0c      	ldr	r3, [pc, #48]	; (800652c <HAL_RCC_OscConfig+0x280>)
 80064fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d0f0      	beq.n	80064e6 <HAL_RCC_OscConfig+0x23a>
 8006504:	e01a      	b.n	800653c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <HAL_RCC_OscConfig+0x280>)
 8006508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800650a:	4a08      	ldr	r2, [pc, #32]	; (800652c <HAL_RCC_OscConfig+0x280>)
 800650c:	f023 0301 	bic.w	r3, r3, #1
 8006510:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006512:	f7fe fbcd 	bl	8004cb0 <HAL_GetTick>
 8006516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006518:	e00a      	b.n	8006530 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800651a:	f7fe fbc9 	bl	8004cb0 <HAL_GetTick>
 800651e:	4602      	mov	r2, r0
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	2b02      	cmp	r3, #2
 8006526:	d903      	bls.n	8006530 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006528:	2303      	movs	r3, #3
 800652a:	e15c      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
 800652c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006530:	4b91      	ldr	r3, [pc, #580]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006532:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006534:	f003 0302 	and.w	r3, r3, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d1ee      	bne.n	800651a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 0304 	and.w	r3, r3, #4
 8006544:	2b00      	cmp	r3, #0
 8006546:	f000 80a4 	beq.w	8006692 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800654a:	4b8b      	ldr	r3, [pc, #556]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d10d      	bne.n	8006572 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006556:	4b88      	ldr	r3, [pc, #544]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a87      	ldr	r2, [pc, #540]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800655c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
 8006562:	4b85      	ldr	r3, [pc, #532]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800656a:	60bb      	str	r3, [r7, #8]
 800656c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006572:	4b82      	ldr	r3, [pc, #520]	; (800677c <HAL_RCC_OscConfig+0x4d0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800657a:	2b00      	cmp	r3, #0
 800657c:	d118      	bne.n	80065b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800657e:	4b7f      	ldr	r3, [pc, #508]	; (800677c <HAL_RCC_OscConfig+0x4d0>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a7e      	ldr	r2, [pc, #504]	; (800677c <HAL_RCC_OscConfig+0x4d0>)
 8006584:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006588:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800658a:	f7fe fb91 	bl	8004cb0 <HAL_GetTick>
 800658e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006590:	e008      	b.n	80065a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006592:	f7fe fb8d 	bl	8004cb0 <HAL_GetTick>
 8006596:	4602      	mov	r2, r0
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	1ad3      	subs	r3, r2, r3
 800659c:	2b64      	cmp	r3, #100	; 0x64
 800659e:	d901      	bls.n	80065a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065a0:	2303      	movs	r3, #3
 80065a2:	e120      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065a4:	4b75      	ldr	r3, [pc, #468]	; (800677c <HAL_RCC_OscConfig+0x4d0>)
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d0f0      	beq.n	8006592 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d106      	bne.n	80065c6 <HAL_RCC_OscConfig+0x31a>
 80065b8:	4b6f      	ldr	r3, [pc, #444]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065bc:	4a6e      	ldr	r2, [pc, #440]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6713      	str	r3, [r2, #112]	; 0x70
 80065c4:	e02d      	b.n	8006622 <HAL_RCC_OscConfig+0x376>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10c      	bne.n	80065e8 <HAL_RCC_OscConfig+0x33c>
 80065ce:	4b6a      	ldr	r3, [pc, #424]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d2:	4a69      	ldr	r2, [pc, #420]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065d4:	f023 0301 	bic.w	r3, r3, #1
 80065d8:	6713      	str	r3, [r2, #112]	; 0x70
 80065da:	4b67      	ldr	r3, [pc, #412]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065de:	4a66      	ldr	r2, [pc, #408]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065e0:	f023 0304 	bic.w	r3, r3, #4
 80065e4:	6713      	str	r3, [r2, #112]	; 0x70
 80065e6:	e01c      	b.n	8006622 <HAL_RCC_OscConfig+0x376>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b05      	cmp	r3, #5
 80065ee:	d10c      	bne.n	800660a <HAL_RCC_OscConfig+0x35e>
 80065f0:	4b61      	ldr	r3, [pc, #388]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f4:	4a60      	ldr	r2, [pc, #384]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065f6:	f043 0304 	orr.w	r3, r3, #4
 80065fa:	6713      	str	r3, [r2, #112]	; 0x70
 80065fc:	4b5e      	ldr	r3, [pc, #376]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80065fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006600:	4a5d      	ldr	r2, [pc, #372]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006602:	f043 0301 	orr.w	r3, r3, #1
 8006606:	6713      	str	r3, [r2, #112]	; 0x70
 8006608:	e00b      	b.n	8006622 <HAL_RCC_OscConfig+0x376>
 800660a:	4b5b      	ldr	r3, [pc, #364]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	4a5a      	ldr	r2, [pc, #360]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006610:	f023 0301 	bic.w	r3, r3, #1
 8006614:	6713      	str	r3, [r2, #112]	; 0x70
 8006616:	4b58      	ldr	r3, [pc, #352]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661a:	4a57      	ldr	r2, [pc, #348]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800661c:	f023 0304 	bic.w	r3, r3, #4
 8006620:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d015      	beq.n	8006656 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800662a:	f7fe fb41 	bl	8004cb0 <HAL_GetTick>
 800662e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006630:	e00a      	b.n	8006648 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006632:	f7fe fb3d 	bl	8004cb0 <HAL_GetTick>
 8006636:	4602      	mov	r2, r0
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	1ad3      	subs	r3, r2, r3
 800663c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006640:	4293      	cmp	r3, r2
 8006642:	d901      	bls.n	8006648 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e0ce      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006648:	4b4b      	ldr	r3, [pc, #300]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800664a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b00      	cmp	r3, #0
 8006652:	d0ee      	beq.n	8006632 <HAL_RCC_OscConfig+0x386>
 8006654:	e014      	b.n	8006680 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006656:	f7fe fb2b 	bl	8004cb0 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665c:	e00a      	b.n	8006674 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800665e:	f7fe fb27 	bl	8004cb0 <HAL_GetTick>
 8006662:	4602      	mov	r2, r0
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	f241 3288 	movw	r2, #5000	; 0x1388
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e0b8      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006674:	4b40      	ldr	r3, [pc, #256]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006678:	f003 0302 	and.w	r3, r3, #2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d1ee      	bne.n	800665e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d105      	bne.n	8006692 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006686:	4b3c      	ldr	r3, [pc, #240]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	4a3b      	ldr	r2, [pc, #236]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800668c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006690:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 80a4 	beq.w	80067e4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800669c:	4b36      	ldr	r3, [pc, #216]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800669e:	689b      	ldr	r3, [r3, #8]
 80066a0:	f003 030c 	and.w	r3, r3, #12
 80066a4:	2b08      	cmp	r3, #8
 80066a6:	d06b      	beq.n	8006780 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d149      	bne.n	8006744 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066b0:	4b31      	ldr	r3, [pc, #196]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a30      	ldr	r2, [pc, #192]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80066b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066bc:	f7fe faf8 	bl	8004cb0 <HAL_GetTick>
 80066c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066c2:	e008      	b.n	80066d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066c4:	f7fe faf4 	bl	8004cb0 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d901      	bls.n	80066d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80066d2:	2303      	movs	r3, #3
 80066d4:	e087      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066d6:	4b28      	ldr	r3, [pc, #160]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1f0      	bne.n	80066c4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	69da      	ldr	r2, [r3, #28]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a1b      	ldr	r3, [r3, #32]
 80066ea:	431a      	orrs	r2, r3
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f0:	019b      	lsls	r3, r3, #6
 80066f2:	431a      	orrs	r2, r3
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	085b      	lsrs	r3, r3, #1
 80066fa:	3b01      	subs	r3, #1
 80066fc:	041b      	lsls	r3, r3, #16
 80066fe:	431a      	orrs	r2, r3
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	061b      	lsls	r3, r3, #24
 8006706:	4313      	orrs	r3, r2
 8006708:	4a1b      	ldr	r2, [pc, #108]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800670a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800670e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006710:	4b19      	ldr	r3, [pc, #100]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a18      	ldr	r2, [pc, #96]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006716:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800671a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800671c:	f7fe fac8 	bl	8004cb0 <HAL_GetTick>
 8006720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006722:	e008      	b.n	8006736 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006724:	f7fe fac4 	bl	8004cb0 <HAL_GetTick>
 8006728:	4602      	mov	r2, r0
 800672a:	693b      	ldr	r3, [r7, #16]
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	2b02      	cmp	r3, #2
 8006730:	d901      	bls.n	8006736 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006732:	2303      	movs	r3, #3
 8006734:	e057      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006736:	4b10      	ldr	r3, [pc, #64]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0f0      	beq.n	8006724 <HAL_RCC_OscConfig+0x478>
 8006742:	e04f      	b.n	80067e4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006744:	4b0c      	ldr	r3, [pc, #48]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a0b      	ldr	r2, [pc, #44]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800674a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800674e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006750:	f7fe faae 	bl	8004cb0 <HAL_GetTick>
 8006754:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006756:	e008      	b.n	800676a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006758:	f7fe faaa 	bl	8004cb0 <HAL_GetTick>
 800675c:	4602      	mov	r2, r0
 800675e:	693b      	ldr	r3, [r7, #16]
 8006760:	1ad3      	subs	r3, r2, r3
 8006762:	2b02      	cmp	r3, #2
 8006764:	d901      	bls.n	800676a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006766:	2303      	movs	r3, #3
 8006768:	e03d      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800676a:	4b03      	ldr	r3, [pc, #12]	; (8006778 <HAL_RCC_OscConfig+0x4cc>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1f0      	bne.n	8006758 <HAL_RCC_OscConfig+0x4ac>
 8006776:	e035      	b.n	80067e4 <HAL_RCC_OscConfig+0x538>
 8006778:	40023800 	.word	0x40023800
 800677c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006780:	4b1b      	ldr	r3, [pc, #108]	; (80067f0 <HAL_RCC_OscConfig+0x544>)
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	699b      	ldr	r3, [r3, #24]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d028      	beq.n	80067e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006798:	429a      	cmp	r2, r3
 800679a:	d121      	bne.n	80067e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d11a      	bne.n	80067e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067b0:	4013      	ands	r3, r2
 80067b2:	687a      	ldr	r2, [r7, #4]
 80067b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067b6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d111      	bne.n	80067e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c6:	085b      	lsrs	r3, r3, #1
 80067c8:	3b01      	subs	r3, #1
 80067ca:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d107      	bne.n	80067e0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067dc:	429a      	cmp	r2, r3
 80067de:	d001      	beq.n	80067e4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	e000      	b.n	80067e6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	40023800 	.word	0x40023800

080067f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067f4:	b580      	push	{r7, lr}
 80067f6:	b084      	sub	sp, #16
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
 80067fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80067fe:	2300      	movs	r3, #0
 8006800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2b00      	cmp	r3, #0
 8006806:	d101      	bne.n	800680c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006808:	2301      	movs	r3, #1
 800680a:	e0d0      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800680c:	4b6a      	ldr	r3, [pc, #424]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 030f 	and.w	r3, r3, #15
 8006814:	683a      	ldr	r2, [r7, #0]
 8006816:	429a      	cmp	r2, r3
 8006818:	d910      	bls.n	800683c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681a:	4b67      	ldr	r3, [pc, #412]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f023 020f 	bic.w	r2, r3, #15
 8006822:	4965      	ldr	r1, [pc, #404]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	4313      	orrs	r3, r2
 8006828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682a:	4b63      	ldr	r3, [pc, #396]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	429a      	cmp	r2, r3
 8006836:	d001      	beq.n	800683c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e0b8      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d020      	beq.n	800688a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f003 0304 	and.w	r3, r3, #4
 8006850:	2b00      	cmp	r3, #0
 8006852:	d005      	beq.n	8006860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006854:	4b59      	ldr	r3, [pc, #356]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006856:	689b      	ldr	r3, [r3, #8]
 8006858:	4a58      	ldr	r2, [pc, #352]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 800685a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800685e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0308 	and.w	r3, r3, #8
 8006868:	2b00      	cmp	r3, #0
 800686a:	d005      	beq.n	8006878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800686c:	4b53      	ldr	r3, [pc, #332]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 800686e:	689b      	ldr	r3, [r3, #8]
 8006870:	4a52      	ldr	r2, [pc, #328]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006878:	4b50      	ldr	r3, [pc, #320]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	494d      	ldr	r1, [pc, #308]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006886:	4313      	orrs	r3, r2
 8006888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f003 0301 	and.w	r3, r3, #1
 8006892:	2b00      	cmp	r3, #0
 8006894:	d040      	beq.n	8006918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d107      	bne.n	80068ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800689e:	4b47      	ldr	r3, [pc, #284]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d115      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e07f      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	685b      	ldr	r3, [r3, #4]
 80068b2:	2b02      	cmp	r3, #2
 80068b4:	d107      	bne.n	80068c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068b6:	4b41      	ldr	r3, [pc, #260]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d109      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e073      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068c6:	4b3d      	ldr	r3, [pc, #244]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e06b      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068d6:	4b39      	ldr	r3, [pc, #228]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f023 0203 	bic.w	r2, r3, #3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	4936      	ldr	r1, [pc, #216]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 80068e4:	4313      	orrs	r3, r2
 80068e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80068e8:	f7fe f9e2 	bl	8004cb0 <HAL_GetTick>
 80068ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ee:	e00a      	b.n	8006906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068f0:	f7fe f9de 	bl	8004cb0 <HAL_GetTick>
 80068f4:	4602      	mov	r2, r0
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80068fe:	4293      	cmp	r3, r2
 8006900:	d901      	bls.n	8006906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006902:	2303      	movs	r3, #3
 8006904:	e053      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006906:	4b2d      	ldr	r3, [pc, #180]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	f003 020c 	and.w	r2, r3, #12
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	429a      	cmp	r2, r3
 8006916:	d1eb      	bne.n	80068f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006918:	4b27      	ldr	r3, [pc, #156]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 030f 	and.w	r3, r3, #15
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d210      	bcs.n	8006948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006926:	4b24      	ldr	r3, [pc, #144]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	f023 020f 	bic.w	r2, r3, #15
 800692e:	4922      	ldr	r1, [pc, #136]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	4313      	orrs	r3, r2
 8006934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006936:	4b20      	ldr	r3, [pc, #128]	; (80069b8 <HAL_RCC_ClockConfig+0x1c4>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	429a      	cmp	r2, r3
 8006942:	d001      	beq.n	8006948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e032      	b.n	80069ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d008      	beq.n	8006966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006954:	4b19      	ldr	r3, [pc, #100]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	4916      	ldr	r1, [pc, #88]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006962:	4313      	orrs	r3, r2
 8006964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0308 	and.w	r3, r3, #8
 800696e:	2b00      	cmp	r3, #0
 8006970:	d009      	beq.n	8006986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006972:	4b12      	ldr	r3, [pc, #72]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	00db      	lsls	r3, r3, #3
 8006980:	490e      	ldr	r1, [pc, #56]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 8006982:	4313      	orrs	r3, r2
 8006984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006986:	f000 f821 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 800698a:	4602      	mov	r2, r0
 800698c:	4b0b      	ldr	r3, [pc, #44]	; (80069bc <HAL_RCC_ClockConfig+0x1c8>)
 800698e:	689b      	ldr	r3, [r3, #8]
 8006990:	091b      	lsrs	r3, r3, #4
 8006992:	f003 030f 	and.w	r3, r3, #15
 8006996:	490a      	ldr	r1, [pc, #40]	; (80069c0 <HAL_RCC_ClockConfig+0x1cc>)
 8006998:	5ccb      	ldrb	r3, [r1, r3]
 800699a:	fa22 f303 	lsr.w	r3, r2, r3
 800699e:	4a09      	ldr	r2, [pc, #36]	; (80069c4 <HAL_RCC_ClockConfig+0x1d0>)
 80069a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <HAL_RCC_ClockConfig+0x1d4>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7fe f93e 	bl	8004c28 <HAL_InitTick>

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	40023c00 	.word	0x40023c00
 80069bc:	40023800 	.word	0x40023800
 80069c0:	0800a968 	.word	0x0800a968
 80069c4:	20000008 	.word	0x20000008
 80069c8:	2000000c 	.word	0x2000000c

080069cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069d0:	b094      	sub	sp, #80	; 0x50
 80069d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069d4:	2300      	movs	r3, #0
 80069d6:	647b      	str	r3, [r7, #68]	; 0x44
 80069d8:	2300      	movs	r3, #0
 80069da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069dc:	2300      	movs	r3, #0
 80069de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80069e0:	2300      	movs	r3, #0
 80069e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069e4:	4b79      	ldr	r3, [pc, #484]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f003 030c 	and.w	r3, r3, #12
 80069ec:	2b08      	cmp	r3, #8
 80069ee:	d00d      	beq.n	8006a0c <HAL_RCC_GetSysClockFreq+0x40>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	f200 80e1 	bhi.w	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d002      	beq.n	8006a00 <HAL_RCC_GetSysClockFreq+0x34>
 80069fa:	2b04      	cmp	r3, #4
 80069fc:	d003      	beq.n	8006a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80069fe:	e0db      	b.n	8006bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a00:	4b73      	ldr	r3, [pc, #460]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a04:	e0db      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a06:	4b73      	ldr	r3, [pc, #460]	; (8006bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a0a:	e0d8      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a0c:	4b6f      	ldr	r3, [pc, #444]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a16:	4b6d      	ldr	r3, [pc, #436]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d063      	beq.n	8006aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a22:	4b6a      	ldr	r3, [pc, #424]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	099b      	lsrs	r3, r3, #6
 8006a28:	2200      	movs	r2, #0
 8006a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
 8006a36:	2300      	movs	r3, #0
 8006a38:	637b      	str	r3, [r7, #52]	; 0x34
 8006a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a3e:	4622      	mov	r2, r4
 8006a40:	462b      	mov	r3, r5
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f04f 0100 	mov.w	r1, #0
 8006a4a:	0159      	lsls	r1, r3, #5
 8006a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a50:	0150      	lsls	r0, r2, #5
 8006a52:	4602      	mov	r2, r0
 8006a54:	460b      	mov	r3, r1
 8006a56:	4621      	mov	r1, r4
 8006a58:	1a51      	subs	r1, r2, r1
 8006a5a:	6139      	str	r1, [r7, #16]
 8006a5c:	4629      	mov	r1, r5
 8006a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006a62:	617b      	str	r3, [r7, #20]
 8006a64:	f04f 0200 	mov.w	r2, #0
 8006a68:	f04f 0300 	mov.w	r3, #0
 8006a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a70:	4659      	mov	r1, fp
 8006a72:	018b      	lsls	r3, r1, #6
 8006a74:	4651      	mov	r1, sl
 8006a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a7a:	4651      	mov	r1, sl
 8006a7c:	018a      	lsls	r2, r1, #6
 8006a7e:	4651      	mov	r1, sl
 8006a80:	ebb2 0801 	subs.w	r8, r2, r1
 8006a84:	4659      	mov	r1, fp
 8006a86:	eb63 0901 	sbc.w	r9, r3, r1
 8006a8a:	f04f 0200 	mov.w	r2, #0
 8006a8e:	f04f 0300 	mov.w	r3, #0
 8006a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a9e:	4690      	mov	r8, r2
 8006aa0:	4699      	mov	r9, r3
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	eb18 0303 	adds.w	r3, r8, r3
 8006aa8:	60bb      	str	r3, [r7, #8]
 8006aaa:	462b      	mov	r3, r5
 8006aac:	eb49 0303 	adc.w	r3, r9, r3
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	f04f 0200 	mov.w	r2, #0
 8006ab6:	f04f 0300 	mov.w	r3, #0
 8006aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006abe:	4629      	mov	r1, r5
 8006ac0:	024b      	lsls	r3, r1, #9
 8006ac2:	4621      	mov	r1, r4
 8006ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006ac8:	4621      	mov	r1, r4
 8006aca:	024a      	lsls	r2, r1, #9
 8006acc:	4610      	mov	r0, r2
 8006ace:	4619      	mov	r1, r3
 8006ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006adc:	f7fa f886 	bl	8000bec <__aeabi_uldivmod>
 8006ae0:	4602      	mov	r2, r0
 8006ae2:	460b      	mov	r3, r1
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ae8:	e058      	b.n	8006b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006aea:	4b38      	ldr	r3, [pc, #224]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	099b      	lsrs	r3, r3, #6
 8006af0:	2200      	movs	r2, #0
 8006af2:	4618      	mov	r0, r3
 8006af4:	4611      	mov	r1, r2
 8006af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006afa:	623b      	str	r3, [r7, #32]
 8006afc:	2300      	movs	r3, #0
 8006afe:	627b      	str	r3, [r7, #36]	; 0x24
 8006b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b04:	4642      	mov	r2, r8
 8006b06:	464b      	mov	r3, r9
 8006b08:	f04f 0000 	mov.w	r0, #0
 8006b0c:	f04f 0100 	mov.w	r1, #0
 8006b10:	0159      	lsls	r1, r3, #5
 8006b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b16:	0150      	lsls	r0, r2, #5
 8006b18:	4602      	mov	r2, r0
 8006b1a:	460b      	mov	r3, r1
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b22:	4649      	mov	r1, r9
 8006b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b28:	f04f 0200 	mov.w	r2, #0
 8006b2c:	f04f 0300 	mov.w	r3, #0
 8006b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8006b40:	eb63 050b 	sbc.w	r5, r3, fp
 8006b44:	f04f 0200 	mov.w	r2, #0
 8006b48:	f04f 0300 	mov.w	r3, #0
 8006b4c:	00eb      	lsls	r3, r5, #3
 8006b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b52:	00e2      	lsls	r2, r4, #3
 8006b54:	4614      	mov	r4, r2
 8006b56:	461d      	mov	r5, r3
 8006b58:	4643      	mov	r3, r8
 8006b5a:	18e3      	adds	r3, r4, r3
 8006b5c:	603b      	str	r3, [r7, #0]
 8006b5e:	464b      	mov	r3, r9
 8006b60:	eb45 0303 	adc.w	r3, r5, r3
 8006b64:	607b      	str	r3, [r7, #4]
 8006b66:	f04f 0200 	mov.w	r2, #0
 8006b6a:	f04f 0300 	mov.w	r3, #0
 8006b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b72:	4629      	mov	r1, r5
 8006b74:	028b      	lsls	r3, r1, #10
 8006b76:	4621      	mov	r1, r4
 8006b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b7c:	4621      	mov	r1, r4
 8006b7e:	028a      	lsls	r2, r1, #10
 8006b80:	4610      	mov	r0, r2
 8006b82:	4619      	mov	r1, r3
 8006b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b86:	2200      	movs	r2, #0
 8006b88:	61bb      	str	r3, [r7, #24]
 8006b8a:	61fa      	str	r2, [r7, #28]
 8006b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b90:	f7fa f82c 	bl	8000bec <__aeabi_uldivmod>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	4613      	mov	r3, r2
 8006b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006b9c:	4b0b      	ldr	r3, [pc, #44]	; (8006bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	0c1b      	lsrs	r3, r3, #16
 8006ba2:	f003 0303 	and.w	r3, r3, #3
 8006ba6:	3301      	adds	r3, #1
 8006ba8:	005b      	lsls	r3, r3, #1
 8006baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bb6:	e002      	b.n	8006bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bb8:	4b05      	ldr	r3, [pc, #20]	; (8006bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3750      	adds	r7, #80	; 0x50
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bca:	bf00      	nop
 8006bcc:	40023800 	.word	0x40023800
 8006bd0:	00f42400 	.word	0x00f42400
 8006bd4:	007a1200 	.word	0x007a1200

08006bd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bdc:	4b03      	ldr	r3, [pc, #12]	; (8006bec <HAL_RCC_GetHCLKFreq+0x14>)
 8006bde:	681b      	ldr	r3, [r3, #0]
}
 8006be0:	4618      	mov	r0, r3
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	20000008 	.word	0x20000008

08006bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006bf4:	f7ff fff0 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	4b05      	ldr	r3, [pc, #20]	; (8006c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	0a9b      	lsrs	r3, r3, #10
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	4903      	ldr	r1, [pc, #12]	; (8006c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c06:	5ccb      	ldrb	r3, [r1, r3]
 8006c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	40023800 	.word	0x40023800
 8006c14:	0800a978 	.word	0x0800a978

08006c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c1c:	f7ff ffdc 	bl	8006bd8 <HAL_RCC_GetHCLKFreq>
 8006c20:	4602      	mov	r2, r0
 8006c22:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	0b5b      	lsrs	r3, r3, #13
 8006c28:	f003 0307 	and.w	r3, r3, #7
 8006c2c:	4903      	ldr	r1, [pc, #12]	; (8006c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c2e:	5ccb      	ldrb	r3, [r1, r3]
 8006c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	40023800 	.word	0x40023800
 8006c3c:	0800a978 	.word	0x0800a978

08006c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b088      	sub	sp, #32
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c48:	2300      	movs	r3, #0
 8006c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c50:	2300      	movs	r3, #0
 8006c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c54:	2300      	movs	r3, #0
 8006c56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 0301 	and.w	r3, r3, #1
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d012      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c68:	4b69      	ldr	r3, [pc, #420]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4a68      	ldr	r2, [pc, #416]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c72:	6093      	str	r3, [r2, #8]
 8006c74:	4b66      	ldr	r3, [pc, #408]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c76:	689a      	ldr	r2, [r3, #8]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c7c:	4964      	ldr	r1, [pc, #400]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d017      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006c9a:	4b5d      	ldr	r3, [pc, #372]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ca8:	4959      	ldr	r1, [pc, #356]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	4313      	orrs	r3, r2
 8006cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb8:	d101      	bne.n	8006cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d017      	beq.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cd6:	4b4e      	ldr	r3, [pc, #312]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce4:	494a      	ldr	r1, [pc, #296]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006cf4:	d101      	bne.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d101      	bne.n	8006d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d001      	beq.n	8006d16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d12:	2301      	movs	r3, #1
 8006d14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0320 	and.w	r3, r3, #32
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 808b 	beq.w	8006e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d24:	4b3a      	ldr	r3, [pc, #232]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d28:	4a39      	ldr	r2, [pc, #228]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d30:	4b37      	ldr	r3, [pc, #220]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d38:	60bb      	str	r3, [r7, #8]
 8006d3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d3c:	4b35      	ldr	r3, [pc, #212]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a34      	ldr	r2, [pc, #208]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d48:	f7fd ffb2 	bl	8004cb0 <HAL_GetTick>
 8006d4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d4e:	e008      	b.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d50:	f7fd ffae 	bl	8004cb0 <HAL_GetTick>
 8006d54:	4602      	mov	r2, r0
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	2b64      	cmp	r3, #100	; 0x64
 8006d5c:	d901      	bls.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	e357      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d62:	4b2c      	ldr	r3, [pc, #176]	; (8006e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0f0      	beq.n	8006d50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d78:	693b      	ldr	r3, [r7, #16]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d035      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d86:	693a      	ldr	r2, [r7, #16]
 8006d88:	429a      	cmp	r2, r3
 8006d8a:	d02e      	beq.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d8c:	4b20      	ldr	r3, [pc, #128]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006d96:	4b1e      	ldr	r3, [pc, #120]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9a:	4a1d      	ldr	r2, [pc, #116]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006da0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006da6:	4a1a      	ldr	r2, [pc, #104]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dae:	4a18      	ldr	r2, [pc, #96]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db8:	f003 0301 	and.w	r3, r3, #1
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d114      	bne.n	8006dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc0:	f7fd ff76 	bl	8004cb0 <HAL_GetTick>
 8006dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dc6:	e00a      	b.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006dc8:	f7fd ff72 	bl	8004cb0 <HAL_GetTick>
 8006dcc:	4602      	mov	r2, r0
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d901      	bls.n	8006dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dda:	2303      	movs	r3, #3
 8006ddc:	e319      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dde:	4b0c      	ldr	r3, [pc, #48]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006de2:	f003 0302 	and.w	r3, r3, #2
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d0ee      	beq.n	8006dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006df6:	d111      	bne.n	8006e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006df8:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dfa:	689b      	ldr	r3, [r3, #8]
 8006dfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e04:	4b04      	ldr	r3, [pc, #16]	; (8006e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e06:	400b      	ands	r3, r1
 8006e08:	4901      	ldr	r1, [pc, #4]	; (8006e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	608b      	str	r3, [r1, #8]
 8006e0e:	e00b      	b.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e10:	40023800 	.word	0x40023800
 8006e14:	40007000 	.word	0x40007000
 8006e18:	0ffffcff 	.word	0x0ffffcff
 8006e1c:	4baa      	ldr	r3, [pc, #680]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4aa9      	ldr	r2, [pc, #676]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e26:	6093      	str	r3, [r2, #8]
 8006e28:	4ba7      	ldr	r3, [pc, #668]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e34:	49a4      	ldr	r1, [pc, #656]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0310 	and.w	r3, r3, #16
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d010      	beq.n	8006e68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e46:	4ba0      	ldr	r3, [pc, #640]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e4c:	4a9e      	ldr	r2, [pc, #632]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e56:	4b9c      	ldr	r3, [pc, #624]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e60:	4999      	ldr	r1, [pc, #612]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00a      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e74:	4b94      	ldr	r3, [pc, #592]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e82:	4991      	ldr	r1, [pc, #580]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d00a      	beq.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006e96:	4b8c      	ldr	r3, [pc, #560]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ea4:	4988      	ldr	r1, [pc, #544]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00a      	beq.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006eb8:	4b83      	ldr	r3, [pc, #524]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec6:	4980      	ldr	r1, [pc, #512]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00a      	beq.n	8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006eda:	4b7b      	ldr	r3, [pc, #492]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ee8:	4977      	ldr	r1, [pc, #476]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006eea:	4313      	orrs	r3, r2
 8006eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00a      	beq.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006efc:	4b72      	ldr	r3, [pc, #456]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f02:	f023 0203 	bic.w	r2, r3, #3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f0a:	496f      	ldr	r1, [pc, #444]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f1e:	4b6a      	ldr	r3, [pc, #424]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f24:	f023 020c 	bic.w	r2, r3, #12
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f2c:	4966      	ldr	r1, [pc, #408]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d00a      	beq.n	8006f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f40:	4b61      	ldr	r3, [pc, #388]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f4e:	495e      	ldr	r1, [pc, #376]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f50:	4313      	orrs	r3, r2
 8006f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00a      	beq.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f62:	4b59      	ldr	r3, [pc, #356]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f70:	4955      	ldr	r1, [pc, #340]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d00a      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006f84:	4b50      	ldr	r3, [pc, #320]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f92:	494d      	ldr	r1, [pc, #308]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006f94:	4313      	orrs	r3, r2
 8006f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d00a      	beq.n	8006fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fa6:	4b48      	ldr	r3, [pc, #288]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb4:	4944      	ldr	r1, [pc, #272]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00a      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fc8:	4b3f      	ldr	r3, [pc, #252]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006fd6:	493c      	ldr	r1, [pc, #240]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00a      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006fea:	4b37      	ldr	r3, [pc, #220]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff8:	4933      	ldr	r1, [pc, #204]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800700c:	4b2e      	ldr	r3, [pc, #184]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800700e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007012:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800701a:	492b      	ldr	r1, [pc, #172]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800701c:	4313      	orrs	r3, r2
 800701e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800702a:	2b00      	cmp	r3, #0
 800702c:	d011      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800702e:	4b26      	ldr	r3, [pc, #152]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007034:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800703c:	4922      	ldr	r1, [pc, #136]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800704c:	d101      	bne.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800704e:	2301      	movs	r3, #1
 8007050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f003 0308 	and.w	r3, r3, #8
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800705e:	2301      	movs	r3, #1
 8007060:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00a      	beq.n	8007084 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800706e:	4b16      	ldr	r3, [pc, #88]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007074:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800707c:	4912      	ldr	r1, [pc, #72]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707e:	4313      	orrs	r3, r2
 8007080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00b      	beq.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007096:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070a0:	4909      	ldr	r1, [pc, #36]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a2:	4313      	orrs	r3, r2
 80070a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	2b01      	cmp	r3, #1
 80070ac:	d006      	beq.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f000 80d9 	beq.w	800726e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070bc:	4b02      	ldr	r3, [pc, #8]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a01      	ldr	r2, [pc, #4]	; (80070c8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070c6:	e001      	b.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80070c8:	40023800 	.word	0x40023800
 80070cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ce:	f7fd fdef 	bl	8004cb0 <HAL_GetTick>
 80070d2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070d4:	e008      	b.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070d6:	f7fd fdeb 	bl	8004cb0 <HAL_GetTick>
 80070da:	4602      	mov	r2, r0
 80070dc:	697b      	ldr	r3, [r7, #20]
 80070de:	1ad3      	subs	r3, r2, r3
 80070e0:	2b64      	cmp	r3, #100	; 0x64
 80070e2:	d901      	bls.n	80070e8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070e4:	2303      	movs	r3, #3
 80070e6:	e194      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070e8:	4b6c      	ldr	r3, [pc, #432]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d1f0      	bne.n	80070d6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	f003 0301 	and.w	r3, r3, #1
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d021      	beq.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007104:	2b00      	cmp	r3, #0
 8007106:	d11d      	bne.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007108:	4b64      	ldr	r3, [pc, #400]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800710a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800710e:	0c1b      	lsrs	r3, r3, #16
 8007110:	f003 0303 	and.w	r3, r3, #3
 8007114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007116:	4b61      	ldr	r3, [pc, #388]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	0e1b      	lsrs	r3, r3, #24
 800711e:	f003 030f 	and.w	r3, r3, #15
 8007122:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	019a      	lsls	r2, r3, #6
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	041b      	lsls	r3, r3, #16
 800712e:	431a      	orrs	r2, r3
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	061b      	lsls	r3, r3, #24
 8007134:	431a      	orrs	r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	689b      	ldr	r3, [r3, #8]
 800713a:	071b      	lsls	r3, r3, #28
 800713c:	4957      	ldr	r1, [pc, #348]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800713e:	4313      	orrs	r3, r2
 8007140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d004      	beq.n	800715a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007154:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007158:	d00a      	beq.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02e      	beq.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800716a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800716e:	d129      	bne.n	80071c4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007170:	4b4a      	ldr	r3, [pc, #296]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007176:	0c1b      	lsrs	r3, r3, #16
 8007178:	f003 0303 	and.w	r3, r3, #3
 800717c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800717e:	4b47      	ldr	r3, [pc, #284]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007184:	0f1b      	lsrs	r3, r3, #28
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	019a      	lsls	r2, r3, #6
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	431a      	orrs	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	061b      	lsls	r3, r3, #24
 800719e:	431a      	orrs	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	071b      	lsls	r3, r3, #28
 80071a4:	493d      	ldr	r1, [pc, #244]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071ac:	4b3b      	ldr	r3, [pc, #236]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071b2:	f023 021f 	bic.w	r2, r3, #31
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ba:	3b01      	subs	r3, #1
 80071bc:	4937      	ldr	r1, [pc, #220]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01d      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071d0:	4b32      	ldr	r3, [pc, #200]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071d6:	0e1b      	lsrs	r3, r3, #24
 80071d8:	f003 030f 	and.w	r3, r3, #15
 80071dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071de:	4b2f      	ldr	r3, [pc, #188]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80071e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e4:	0f1b      	lsrs	r3, r3, #28
 80071e6:	f003 0307 	and.w	r3, r3, #7
 80071ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	685b      	ldr	r3, [r3, #4]
 80071f0:	019a      	lsls	r2, r3, #6
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	041b      	lsls	r3, r3, #16
 80071f8:	431a      	orrs	r2, r3
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	061b      	lsls	r3, r3, #24
 80071fe:	431a      	orrs	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	071b      	lsls	r3, r3, #28
 8007204:	4925      	ldr	r1, [pc, #148]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007206:	4313      	orrs	r3, r2
 8007208:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d011      	beq.n	800723c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	019a      	lsls	r2, r3, #6
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	041b      	lsls	r3, r3, #16
 8007224:	431a      	orrs	r2, r3
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	68db      	ldr	r3, [r3, #12]
 800722a:	061b      	lsls	r3, r3, #24
 800722c:	431a      	orrs	r2, r3
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	071b      	lsls	r3, r3, #28
 8007234:	4919      	ldr	r1, [pc, #100]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007236:	4313      	orrs	r3, r2
 8007238:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800723c:	4b17      	ldr	r3, [pc, #92]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	4a16      	ldr	r2, [pc, #88]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007242:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007246:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007248:	f7fd fd32 	bl	8004cb0 <HAL_GetTick>
 800724c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800724e:	e008      	b.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007250:	f7fd fd2e 	bl	8004cb0 <HAL_GetTick>
 8007254:	4602      	mov	r2, r0
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	1ad3      	subs	r3, r2, r3
 800725a:	2b64      	cmp	r3, #100	; 0x64
 800725c:	d901      	bls.n	8007262 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e0d7      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007262:	4b0e      	ldr	r3, [pc, #56]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0f0      	beq.n	8007250 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	2b01      	cmp	r3, #1
 8007272:	f040 80cd 	bne.w	8007410 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007276:	4b09      	ldr	r3, [pc, #36]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a08      	ldr	r2, [pc, #32]	; (800729c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800727c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007280:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007282:	f7fd fd15 	bl	8004cb0 <HAL_GetTick>
 8007286:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007288:	e00a      	b.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800728a:	f7fd fd11 	bl	8004cb0 <HAL_GetTick>
 800728e:	4602      	mov	r2, r0
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	1ad3      	subs	r3, r2, r3
 8007294:	2b64      	cmp	r3, #100	; 0x64
 8007296:	d903      	bls.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007298:	2303      	movs	r3, #3
 800729a:	e0ba      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800729c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072a0:	4b5e      	ldr	r3, [pc, #376]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ac:	d0ed      	beq.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d003      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d02e      	beq.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d12a      	bne.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072d6:	4b51      	ldr	r3, [pc, #324]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072dc:	0c1b      	lsrs	r3, r3, #16
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072e4:	4b4d      	ldr	r3, [pc, #308]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072ea:	0f1b      	lsrs	r3, r3, #28
 80072ec:	f003 0307 	and.w	r3, r3, #7
 80072f0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	695b      	ldr	r3, [r3, #20]
 80072f6:	019a      	lsls	r2, r3, #6
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	041b      	lsls	r3, r3, #16
 80072fc:	431a      	orrs	r2, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	699b      	ldr	r3, [r3, #24]
 8007302:	061b      	lsls	r3, r3, #24
 8007304:	431a      	orrs	r2, r3
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	071b      	lsls	r3, r3, #28
 800730a:	4944      	ldr	r1, [pc, #272]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800730c:	4313      	orrs	r3, r2
 800730e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007312:	4b42      	ldr	r3, [pc, #264]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007318:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007320:	3b01      	subs	r3, #1
 8007322:	021b      	lsls	r3, r3, #8
 8007324:	493d      	ldr	r1, [pc, #244]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007326:	4313      	orrs	r3, r2
 8007328:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007334:	2b00      	cmp	r3, #0
 8007336:	d022      	beq.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800733c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007340:	d11d      	bne.n	800737e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007342:	4b36      	ldr	r3, [pc, #216]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007348:	0e1b      	lsrs	r3, r3, #24
 800734a:	f003 030f 	and.w	r3, r3, #15
 800734e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007350:	4b32      	ldr	r3, [pc, #200]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007356:	0f1b      	lsrs	r3, r3, #28
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	695b      	ldr	r3, [r3, #20]
 8007362:	019a      	lsls	r2, r3, #6
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6a1b      	ldr	r3, [r3, #32]
 8007368:	041b      	lsls	r3, r3, #16
 800736a:	431a      	orrs	r2, r3
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	061b      	lsls	r3, r3, #24
 8007370:	431a      	orrs	r2, r3
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	071b      	lsls	r3, r3, #28
 8007376:	4929      	ldr	r1, [pc, #164]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007378:	4313      	orrs	r3, r2
 800737a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d028      	beq.n	80073dc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800738a:	4b24      	ldr	r3, [pc, #144]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800738c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007390:	0e1b      	lsrs	r3, r3, #24
 8007392:	f003 030f 	and.w	r3, r3, #15
 8007396:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007398:	4b20      	ldr	r3, [pc, #128]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800739a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800739e:	0c1b      	lsrs	r3, r3, #16
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	019a      	lsls	r2, r3, #6
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	041b      	lsls	r3, r3, #16
 80073b0:	431a      	orrs	r2, r3
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	061b      	lsls	r3, r3, #24
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	69db      	ldr	r3, [r3, #28]
 80073bc:	071b      	lsls	r3, r3, #28
 80073be:	4917      	ldr	r1, [pc, #92]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073c0:	4313      	orrs	r3, r2
 80073c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80073c6:	4b15      	ldr	r3, [pc, #84]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80073cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073d4:	4911      	ldr	r1, [pc, #68]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073d6:	4313      	orrs	r3, r2
 80073d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80073dc:	4b0f      	ldr	r3, [pc, #60]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a0e      	ldr	r2, [pc, #56]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80073e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80073e8:	f7fd fc62 	bl	8004cb0 <HAL_GetTick>
 80073ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073ee:	e008      	b.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073f0:	f7fd fc5e 	bl	8004cb0 <HAL_GetTick>
 80073f4:	4602      	mov	r2, r0
 80073f6:	697b      	ldr	r3, [r7, #20]
 80073f8:	1ad3      	subs	r3, r2, r3
 80073fa:	2b64      	cmp	r3, #100	; 0x64
 80073fc:	d901      	bls.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073fe:	2303      	movs	r3, #3
 8007400:	e007      	b.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007402:	4b06      	ldr	r3, [pc, #24]	; (800741c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800740a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800740e:	d1ef      	bne.n	80073f0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3720      	adds	r7, #32
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	40023800 	.word	0x40023800

08007420 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b082      	sub	sp, #8
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d101      	bne.n	8007432 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800742e:	2301      	movs	r3, #1
 8007430:	e049      	b.n	80074c6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	d106      	bne.n	800744c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f7fd f90a 	bl	8004660 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3304      	adds	r3, #4
 800745c:	4619      	mov	r1, r3
 800745e:	4610      	mov	r0, r2
 8007460:	f000 fdac 	bl	8007fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2201      	movs	r2, #1
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2201      	movs	r2, #1
 8007488:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	2201      	movs	r2, #1
 8007498:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2201      	movs	r2, #1
 80074a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b085      	sub	sp, #20
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d001      	beq.n	80074e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e054      	b.n	8007592 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2202      	movs	r2, #2
 80074ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68da      	ldr	r2, [r3, #12]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f042 0201 	orr.w	r2, r2, #1
 80074fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	4a26      	ldr	r2, [pc, #152]	; (80075a0 <HAL_TIM_Base_Start_IT+0xd0>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d022      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007512:	d01d      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a22      	ldr	r2, [pc, #136]	; (80075a4 <HAL_TIM_Base_Start_IT+0xd4>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d018      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a21      	ldr	r2, [pc, #132]	; (80075a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d013      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a1f      	ldr	r2, [pc, #124]	; (80075ac <HAL_TIM_Base_Start_IT+0xdc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00e      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a1e      	ldr	r2, [pc, #120]	; (80075b0 <HAL_TIM_Base_Start_IT+0xe0>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d009      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1c      	ldr	r2, [pc, #112]	; (80075b4 <HAL_TIM_Base_Start_IT+0xe4>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d004      	beq.n	8007550 <HAL_TIM_Base_Start_IT+0x80>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1b      	ldr	r2, [pc, #108]	; (80075b8 <HAL_TIM_Base_Start_IT+0xe8>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d115      	bne.n	800757c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	689a      	ldr	r2, [r3, #8]
 8007556:	4b19      	ldr	r3, [pc, #100]	; (80075bc <HAL_TIM_Base_Start_IT+0xec>)
 8007558:	4013      	ands	r3, r2
 800755a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	2b06      	cmp	r3, #6
 8007560:	d015      	beq.n	800758e <HAL_TIM_Base_Start_IT+0xbe>
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007568:	d011      	beq.n	800758e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f042 0201 	orr.w	r2, r2, #1
 8007578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800757a:	e008      	b.n	800758e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f042 0201 	orr.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]
 800758c:	e000      	b.n	8007590 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007590:	2300      	movs	r3, #0
}
 8007592:	4618      	mov	r0, r3
 8007594:	3714      	adds	r7, #20
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40001800 	.word	0x40001800
 80075bc:	00010007 	.word	0x00010007

080075c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68da      	ldr	r2, [r3, #12]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f022 0201 	bic.w	r2, r2, #1
 80075d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	6a1a      	ldr	r2, [r3, #32]
 80075de:	f241 1311 	movw	r3, #4369	; 0x1111
 80075e2:	4013      	ands	r3, r2
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10f      	bne.n	8007608 <HAL_TIM_Base_Stop_IT+0x48>
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6a1a      	ldr	r2, [r3, #32]
 80075ee:	f240 4344 	movw	r3, #1092	; 0x444
 80075f2:	4013      	ands	r3, r2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d107      	bne.n	8007608 <HAL_TIM_Base_Stop_IT+0x48>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	f022 0201 	bic.w	r2, r2, #1
 8007606:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	370c      	adds	r7, #12
 8007616:	46bd      	mov	sp, r7
 8007618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761c:	4770      	bx	lr

0800761e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b082      	sub	sp, #8
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d101      	bne.n	8007630 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e049      	b.n	80076c4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	d106      	bne.n	800764a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	2200      	movs	r2, #0
 8007640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f841 	bl	80076cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2202      	movs	r2, #2
 800764e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681a      	ldr	r2, [r3, #0]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	3304      	adds	r3, #4
 800765a:	4619      	mov	r1, r3
 800765c:	4610      	mov	r0, r2
 800765e:	f000 fcad 	bl	8007fbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2201      	movs	r2, #1
 800766e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2201      	movs	r2, #1
 8007676:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2201      	movs	r2, #1
 800767e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2201      	movs	r2, #1
 8007686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2201      	movs	r2, #1
 800768e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2201      	movs	r2, #1
 8007696:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2201      	movs	r2, #1
 80076a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2201      	movs	r2, #1
 80076ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2201      	movs	r2, #1
 80076b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2201      	movs	r2, #1
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3708      	adds	r7, #8
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b083      	sub	sp, #12
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80076d4:	bf00      	nop
 80076d6:	370c      	adds	r7, #12
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b084      	sub	sp, #16
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80076ea:	2300      	movs	r3, #0
 80076ec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d109      	bne.n	8007708 <HAL_TIM_PWM_Start_IT+0x28>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	bf14      	ite	ne
 8007700:	2301      	movne	r3, #1
 8007702:	2300      	moveq	r3, #0
 8007704:	b2db      	uxtb	r3, r3
 8007706:	e03c      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0xa2>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	2b04      	cmp	r3, #4
 800770c:	d109      	bne.n	8007722 <HAL_TIM_PWM_Start_IT+0x42>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007714:	b2db      	uxtb	r3, r3
 8007716:	2b01      	cmp	r3, #1
 8007718:	bf14      	ite	ne
 800771a:	2301      	movne	r3, #1
 800771c:	2300      	moveq	r3, #0
 800771e:	b2db      	uxtb	r3, r3
 8007720:	e02f      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0xa2>
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	2b08      	cmp	r3, #8
 8007726:	d109      	bne.n	800773c <HAL_TIM_PWM_Start_IT+0x5c>
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b01      	cmp	r3, #1
 8007732:	bf14      	ite	ne
 8007734:	2301      	movne	r3, #1
 8007736:	2300      	moveq	r3, #0
 8007738:	b2db      	uxtb	r3, r3
 800773a:	e022      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0xa2>
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	2b0c      	cmp	r3, #12
 8007740:	d109      	bne.n	8007756 <HAL_TIM_PWM_Start_IT+0x76>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007748:	b2db      	uxtb	r3, r3
 800774a:	2b01      	cmp	r3, #1
 800774c:	bf14      	ite	ne
 800774e:	2301      	movne	r3, #1
 8007750:	2300      	moveq	r3, #0
 8007752:	b2db      	uxtb	r3, r3
 8007754:	e015      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0xa2>
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	2b10      	cmp	r3, #16
 800775a:	d109      	bne.n	8007770 <HAL_TIM_PWM_Start_IT+0x90>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b01      	cmp	r3, #1
 8007766:	bf14      	ite	ne
 8007768:	2301      	movne	r3, #1
 800776a:	2300      	moveq	r3, #0
 800776c:	b2db      	uxtb	r3, r3
 800776e:	e008      	b.n	8007782 <HAL_TIM_PWM_Start_IT+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007776:	b2db      	uxtb	r3, r3
 8007778:	2b01      	cmp	r3, #1
 800777a:	bf14      	ite	ne
 800777c:	2301      	movne	r3, #1
 800777e:	2300      	moveq	r3, #0
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e0dd      	b.n	8007946 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d104      	bne.n	800779a <HAL_TIM_PWM_Start_IT+0xba>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007798:	e023      	b.n	80077e2 <HAL_TIM_PWM_Start_IT+0x102>
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2b04      	cmp	r3, #4
 800779e:	d104      	bne.n	80077aa <HAL_TIM_PWM_Start_IT+0xca>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a8:	e01b      	b.n	80077e2 <HAL_TIM_PWM_Start_IT+0x102>
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	2b08      	cmp	r3, #8
 80077ae:	d104      	bne.n	80077ba <HAL_TIM_PWM_Start_IT+0xda>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2202      	movs	r2, #2
 80077b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077b8:	e013      	b.n	80077e2 <HAL_TIM_PWM_Start_IT+0x102>
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	2b0c      	cmp	r3, #12
 80077be:	d104      	bne.n	80077ca <HAL_TIM_PWM_Start_IT+0xea>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80077c8:	e00b      	b.n	80077e2 <HAL_TIM_PWM_Start_IT+0x102>
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	2b10      	cmp	r3, #16
 80077ce:	d104      	bne.n	80077da <HAL_TIM_PWM_Start_IT+0xfa>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2202      	movs	r2, #2
 80077d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077d8:	e003      	b.n	80077e2 <HAL_TIM_PWM_Start_IT+0x102>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2202      	movs	r2, #2
 80077de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 80077e2:	683b      	ldr	r3, [r7, #0]
 80077e4:	2b0c      	cmp	r3, #12
 80077e6:	d841      	bhi.n	800786c <HAL_TIM_PWM_Start_IT+0x18c>
 80077e8:	a201      	add	r2, pc, #4	; (adr r2, 80077f0 <HAL_TIM_PWM_Start_IT+0x110>)
 80077ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ee:	bf00      	nop
 80077f0:	08007825 	.word	0x08007825
 80077f4:	0800786d 	.word	0x0800786d
 80077f8:	0800786d 	.word	0x0800786d
 80077fc:	0800786d 	.word	0x0800786d
 8007800:	08007837 	.word	0x08007837
 8007804:	0800786d 	.word	0x0800786d
 8007808:	0800786d 	.word	0x0800786d
 800780c:	0800786d 	.word	0x0800786d
 8007810:	08007849 	.word	0x08007849
 8007814:	0800786d 	.word	0x0800786d
 8007818:	0800786d 	.word	0x0800786d
 800781c:	0800786d 	.word	0x0800786d
 8007820:	0800785b 	.word	0x0800785b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f042 0202 	orr.w	r2, r2, #2
 8007832:	60da      	str	r2, [r3, #12]
      break;
 8007834:	e01d      	b.n	8007872 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f042 0204 	orr.w	r2, r2, #4
 8007844:	60da      	str	r2, [r3, #12]
      break;
 8007846:	e014      	b.n	8007872 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	68da      	ldr	r2, [r3, #12]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f042 0208 	orr.w	r2, r2, #8
 8007856:	60da      	str	r2, [r3, #12]
      break;
 8007858:	e00b      	b.n	8007872 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	68da      	ldr	r2, [r3, #12]
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 0210 	orr.w	r2, r2, #16
 8007868:	60da      	str	r2, [r3, #12]
      break;
 800786a:	e002      	b.n	8007872 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	73fb      	strb	r3, [r7, #15]
      break;
 8007870:	bf00      	nop
  }

  if (status == HAL_OK)
 8007872:	7bfb      	ldrb	r3, [r7, #15]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d165      	bne.n	8007944 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	2201      	movs	r2, #1
 800787e:	6839      	ldr	r1, [r7, #0]
 8007880:	4618      	mov	r0, r3
 8007882:	f000 ff33 	bl	80086ec <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a31      	ldr	r2, [pc, #196]	; (8007950 <HAL_TIM_PWM_Start_IT+0x270>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d004      	beq.n	800789a <HAL_TIM_PWM_Start_IT+0x1ba>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a2f      	ldr	r2, [pc, #188]	; (8007954 <HAL_TIM_PWM_Start_IT+0x274>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d101      	bne.n	800789e <HAL_TIM_PWM_Start_IT+0x1be>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_TIM_PWM_Start_IT+0x1c0>
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d007      	beq.n	80078b4 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80078b2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a25      	ldr	r2, [pc, #148]	; (8007950 <HAL_TIM_PWM_Start_IT+0x270>)
 80078ba:	4293      	cmp	r3, r2
 80078bc:	d022      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078c6:	d01d      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a22      	ldr	r2, [pc, #136]	; (8007958 <HAL_TIM_PWM_Start_IT+0x278>)
 80078ce:	4293      	cmp	r3, r2
 80078d0:	d018      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	4a21      	ldr	r2, [pc, #132]	; (800795c <HAL_TIM_PWM_Start_IT+0x27c>)
 80078d8:	4293      	cmp	r3, r2
 80078da:	d013      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	4a1f      	ldr	r2, [pc, #124]	; (8007960 <HAL_TIM_PWM_Start_IT+0x280>)
 80078e2:	4293      	cmp	r3, r2
 80078e4:	d00e      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	4a1a      	ldr	r2, [pc, #104]	; (8007954 <HAL_TIM_PWM_Start_IT+0x274>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d009      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a1b      	ldr	r2, [pc, #108]	; (8007964 <HAL_TIM_PWM_Start_IT+0x284>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d004      	beq.n	8007904 <HAL_TIM_PWM_Start_IT+0x224>
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	4a1a      	ldr	r2, [pc, #104]	; (8007968 <HAL_TIM_PWM_Start_IT+0x288>)
 8007900:	4293      	cmp	r3, r2
 8007902:	d115      	bne.n	8007930 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689a      	ldr	r2, [r3, #8]
 800790a:	4b18      	ldr	r3, [pc, #96]	; (800796c <HAL_TIM_PWM_Start_IT+0x28c>)
 800790c:	4013      	ands	r3, r2
 800790e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b06      	cmp	r3, #6
 8007914:	d015      	beq.n	8007942 <HAL_TIM_PWM_Start_IT+0x262>
 8007916:	68bb      	ldr	r3, [r7, #8]
 8007918:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800791c:	d011      	beq.n	8007942 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	681a      	ldr	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f042 0201 	orr.w	r2, r2, #1
 800792c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800792e:	e008      	b.n	8007942 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	681a      	ldr	r2, [r3, #0]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f042 0201 	orr.w	r2, r2, #1
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	e000      	b.n	8007944 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007942:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
}
 8007946:	4618      	mov	r0, r3
 8007948:	3710      	adds	r7, #16
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}
 800794e:	bf00      	nop
 8007950:	40010000 	.word	0x40010000
 8007954:	40010400 	.word	0x40010400
 8007958:	40000400 	.word	0x40000400
 800795c:	40000800 	.word	0x40000800
 8007960:	40000c00 	.word	0x40000c00
 8007964:	40014000 	.word	0x40014000
 8007968:	40001800 	.word	0x40001800
 800796c:	00010007 	.word	0x00010007

08007970 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f003 0302 	and.w	r3, r3, #2
 8007982:	2b02      	cmp	r3, #2
 8007984:	d122      	bne.n	80079cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f003 0302 	and.w	r3, r3, #2
 8007990:	2b02      	cmp	r3, #2
 8007992:	d11b      	bne.n	80079cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f06f 0202 	mvn.w	r2, #2
 800799c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2201      	movs	r2, #1
 80079a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	699b      	ldr	r3, [r3, #24]
 80079aa:	f003 0303 	and.w	r3, r3, #3
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d003      	beq.n	80079ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 fae4 	bl	8007f80 <HAL_TIM_IC_CaptureCallback>
 80079b8:	e005      	b.n	80079c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fad6 	bl	8007f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f000 fae7 	bl	8007f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	691b      	ldr	r3, [r3, #16]
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b04      	cmp	r3, #4
 80079d8:	d122      	bne.n	8007a20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	f003 0304 	and.w	r3, r3, #4
 80079e4:	2b04      	cmp	r3, #4
 80079e6:	d11b      	bne.n	8007a20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f06f 0204 	mvn.w	r2, #4
 80079f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2202      	movs	r2, #2
 80079f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 faba 	bl	8007f80 <HAL_TIM_IC_CaptureCallback>
 8007a0c:	e005      	b.n	8007a1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 faac 	bl	8007f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fabd 	bl	8007f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	f003 0308 	and.w	r3, r3, #8
 8007a2a:	2b08      	cmp	r3, #8
 8007a2c:	d122      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68db      	ldr	r3, [r3, #12]
 8007a34:	f003 0308 	and.w	r3, r3, #8
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d11b      	bne.n	8007a74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f06f 0208 	mvn.w	r2, #8
 8007a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2204      	movs	r2, #4
 8007a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	f003 0303 	and.w	r3, r3, #3
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f000 fa90 	bl	8007f80 <HAL_TIM_IC_CaptureCallback>
 8007a60:	e005      	b.n	8007a6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f000 fa82 	bl	8007f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fa93 	bl	8007f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f003 0310 	and.w	r3, r3, #16
 8007a7e:	2b10      	cmp	r3, #16
 8007a80:	d122      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f003 0310 	and.w	r3, r3, #16
 8007a8c:	2b10      	cmp	r3, #16
 8007a8e:	d11b      	bne.n	8007ac8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f06f 0210 	mvn.w	r2, #16
 8007a98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2208      	movs	r2, #8
 8007a9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	69db      	ldr	r3, [r3, #28]
 8007aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fa66 	bl	8007f80 <HAL_TIM_IC_CaptureCallback>
 8007ab4:	e005      	b.n	8007ac2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fa58 	bl	8007f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fa69 	bl	8007f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	691b      	ldr	r3, [r3, #16]
 8007ace:	f003 0301 	and.w	r3, r3, #1
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10e      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	f003 0301 	and.w	r3, r3, #1
 8007ae0:	2b01      	cmp	r3, #1
 8007ae2:	d107      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f06f 0201 	mvn.w	r2, #1
 8007aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7f9 fff6 	bl	8001ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007afe:	2b80      	cmp	r3, #128	; 0x80
 8007b00:	d10e      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b0c:	2b80      	cmp	r3, #128	; 0x80
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fea4 	bl	8008868 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b2e:	d10e      	bne.n	8007b4e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3a:	2b80      	cmp	r3, #128	; 0x80
 8007b3c:	d107      	bne.n	8007b4e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007b46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 fe97 	bl	800887c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	691b      	ldr	r3, [r3, #16]
 8007b54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b58:	2b40      	cmp	r3, #64	; 0x40
 8007b5a:	d10e      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b66:	2b40      	cmp	r3, #64	; 0x40
 8007b68:	d107      	bne.n	8007b7a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007b72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	f000 fa17 	bl	8007fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	691b      	ldr	r3, [r3, #16]
 8007b80:	f003 0320 	and.w	r3, r3, #32
 8007b84:	2b20      	cmp	r3, #32
 8007b86:	d10e      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	f003 0320 	and.w	r3, r3, #32
 8007b92:	2b20      	cmp	r3, #32
 8007b94:	d107      	bne.n	8007ba6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f06f 0220 	mvn.w	r2, #32
 8007b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fe57 	bl	8008854 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ba6:	bf00      	nop
 8007ba8:	3708      	adds	r7, #8
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
	...

08007bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b086      	sub	sp, #24
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	60f8      	str	r0, [r7, #12]
 8007bb8:	60b9      	str	r1, [r7, #8]
 8007bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bc6:	2b01      	cmp	r3, #1
 8007bc8:	d101      	bne.n	8007bce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007bca:	2302      	movs	r3, #2
 8007bcc:	e0ff      	b.n	8007dce <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2b14      	cmp	r3, #20
 8007bda:	f200 80f0 	bhi.w	8007dbe <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007bde:	a201      	add	r2, pc, #4	; (adr r2, 8007be4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007be4:	08007c39 	.word	0x08007c39
 8007be8:	08007dbf 	.word	0x08007dbf
 8007bec:	08007dbf 	.word	0x08007dbf
 8007bf0:	08007dbf 	.word	0x08007dbf
 8007bf4:	08007c79 	.word	0x08007c79
 8007bf8:	08007dbf 	.word	0x08007dbf
 8007bfc:	08007dbf 	.word	0x08007dbf
 8007c00:	08007dbf 	.word	0x08007dbf
 8007c04:	08007cbb 	.word	0x08007cbb
 8007c08:	08007dbf 	.word	0x08007dbf
 8007c0c:	08007dbf 	.word	0x08007dbf
 8007c10:	08007dbf 	.word	0x08007dbf
 8007c14:	08007cfb 	.word	0x08007cfb
 8007c18:	08007dbf 	.word	0x08007dbf
 8007c1c:	08007dbf 	.word	0x08007dbf
 8007c20:	08007dbf 	.word	0x08007dbf
 8007c24:	08007d3d 	.word	0x08007d3d
 8007c28:	08007dbf 	.word	0x08007dbf
 8007c2c:	08007dbf 	.word	0x08007dbf
 8007c30:	08007dbf 	.word	0x08007dbf
 8007c34:	08007d7d 	.word	0x08007d7d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68b9      	ldr	r1, [r7, #8]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f000 fa5c 	bl	80080fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f042 0208 	orr.w	r2, r2, #8
 8007c52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f022 0204 	bic.w	r2, r2, #4
 8007c62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	6999      	ldr	r1, [r3, #24]
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	691a      	ldr	r2, [r3, #16]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	430a      	orrs	r2, r1
 8007c74:	619a      	str	r2, [r3, #24]
      break;
 8007c76:	e0a5      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	68b9      	ldr	r1, [r7, #8]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f000 faae 	bl	80081e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699a      	ldr	r2, [r3, #24]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699a      	ldr	r2, [r3, #24]
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ca2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	6999      	ldr	r1, [r3, #24]
 8007caa:	68bb      	ldr	r3, [r7, #8]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	021a      	lsls	r2, r3, #8
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	430a      	orrs	r2, r1
 8007cb6:	619a      	str	r2, [r3, #24]
      break;
 8007cb8:	e084      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68b9      	ldr	r1, [r7, #8]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f000 fb05 	bl	80082d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	69da      	ldr	r2, [r3, #28]
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f042 0208 	orr.w	r2, r2, #8
 8007cd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	69da      	ldr	r2, [r3, #28]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f022 0204 	bic.w	r2, r2, #4
 8007ce4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	69d9      	ldr	r1, [r3, #28]
 8007cec:	68bb      	ldr	r3, [r7, #8]
 8007cee:	691a      	ldr	r2, [r3, #16]
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	430a      	orrs	r2, r1
 8007cf6:	61da      	str	r2, [r3, #28]
      break;
 8007cf8:	e064      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68b9      	ldr	r1, [r7, #8]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb5b 	bl	80083bc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	69da      	ldr	r2, [r3, #28]
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	69da      	ldr	r2, [r3, #28]
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69d9      	ldr	r1, [r3, #28]
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	691b      	ldr	r3, [r3, #16]
 8007d30:	021a      	lsls	r2, r3, #8
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	430a      	orrs	r2, r1
 8007d38:	61da      	str	r2, [r3, #28]
      break;
 8007d3a:	e043      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	68b9      	ldr	r1, [r7, #8]
 8007d42:	4618      	mov	r0, r3
 8007d44:	f000 fb92 	bl	800846c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	f042 0208 	orr.w	r2, r2, #8
 8007d56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f022 0204 	bic.w	r2, r2, #4
 8007d66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007d6e:	68bb      	ldr	r3, [r7, #8]
 8007d70:	691a      	ldr	r2, [r3, #16]
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	430a      	orrs	r2, r1
 8007d78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007d7a:	e023      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	68b9      	ldr	r1, [r7, #8]
 8007d82:	4618      	mov	r0, r3
 8007d84:	f000 fbc4 	bl	8008510 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007da6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	691b      	ldr	r3, [r3, #16]
 8007db2:	021a      	lsls	r2, r3, #8
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	430a      	orrs	r2, r1
 8007dba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007dbc:	e002      	b.n	8007dc4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop

08007dd8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
 8007de0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007dec:	2b01      	cmp	r3, #1
 8007dee:	d101      	bne.n	8007df4 <HAL_TIM_ConfigClockSource+0x1c>
 8007df0:	2302      	movs	r3, #2
 8007df2:	e0b4      	b.n	8007f5e <HAL_TIM_ConfigClockSource+0x186>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	689b      	ldr	r3, [r3, #8]
 8007e0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007e0c:	68ba      	ldr	r2, [r7, #8]
 8007e0e:	4b56      	ldr	r3, [pc, #344]	; (8007f68 <HAL_TIM_ConfigClockSource+0x190>)
 8007e10:	4013      	ands	r3, r2
 8007e12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007e1a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	68ba      	ldr	r2, [r7, #8]
 8007e22:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e2c:	d03e      	beq.n	8007eac <HAL_TIM_ConfigClockSource+0xd4>
 8007e2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e32:	f200 8087 	bhi.w	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e3a:	f000 8086 	beq.w	8007f4a <HAL_TIM_ConfigClockSource+0x172>
 8007e3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e42:	d87f      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e44:	2b70      	cmp	r3, #112	; 0x70
 8007e46:	d01a      	beq.n	8007e7e <HAL_TIM_ConfigClockSource+0xa6>
 8007e48:	2b70      	cmp	r3, #112	; 0x70
 8007e4a:	d87b      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e4c:	2b60      	cmp	r3, #96	; 0x60
 8007e4e:	d050      	beq.n	8007ef2 <HAL_TIM_ConfigClockSource+0x11a>
 8007e50:	2b60      	cmp	r3, #96	; 0x60
 8007e52:	d877      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e54:	2b50      	cmp	r3, #80	; 0x50
 8007e56:	d03c      	beq.n	8007ed2 <HAL_TIM_ConfigClockSource+0xfa>
 8007e58:	2b50      	cmp	r3, #80	; 0x50
 8007e5a:	d873      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e5c:	2b40      	cmp	r3, #64	; 0x40
 8007e5e:	d058      	beq.n	8007f12 <HAL_TIM_ConfigClockSource+0x13a>
 8007e60:	2b40      	cmp	r3, #64	; 0x40
 8007e62:	d86f      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e64:	2b30      	cmp	r3, #48	; 0x30
 8007e66:	d064      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15a>
 8007e68:	2b30      	cmp	r3, #48	; 0x30
 8007e6a:	d86b      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d060      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15a>
 8007e70:	2b20      	cmp	r3, #32
 8007e72:	d867      	bhi.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d05c      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15a>
 8007e78:	2b10      	cmp	r3, #16
 8007e7a:	d05a      	beq.n	8007f32 <HAL_TIM_ConfigClockSource+0x15a>
 8007e7c:	e062      	b.n	8007f44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6818      	ldr	r0, [r3, #0]
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	6899      	ldr	r1, [r3, #8]
 8007e86:	683b      	ldr	r3, [r7, #0]
 8007e88:	685a      	ldr	r2, [r3, #4]
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	f000 fc0d 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	609a      	str	r2, [r3, #8]
      break;
 8007eaa:	e04f      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6818      	ldr	r0, [r3, #0]
 8007eb0:	683b      	ldr	r3, [r7, #0]
 8007eb2:	6899      	ldr	r1, [r3, #8]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	685a      	ldr	r2, [r3, #4]
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	68db      	ldr	r3, [r3, #12]
 8007ebc:	f000 fbf6 	bl	80086ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	689a      	ldr	r2, [r3, #8]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ece:	609a      	str	r2, [r3, #8]
      break;
 8007ed0:	e03c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6818      	ldr	r0, [r3, #0]
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6859      	ldr	r1, [r3, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f000 fb6a 	bl	80085b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2150      	movs	r1, #80	; 0x50
 8007eea:	4618      	mov	r0, r3
 8007eec:	f000 fbc3 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007ef0:	e02c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6818      	ldr	r0, [r3, #0]
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	6859      	ldr	r1, [r3, #4]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	461a      	mov	r2, r3
 8007f00:	f000 fb89 	bl	8008616 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	2160      	movs	r1, #96	; 0x60
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f000 fbb3 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007f10:	e01c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6818      	ldr	r0, [r3, #0]
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	6859      	ldr	r1, [r3, #4]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	461a      	mov	r2, r3
 8007f20:	f000 fb4a 	bl	80085b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	2140      	movs	r1, #64	; 0x40
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	f000 fba3 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007f30:	e00c      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681a      	ldr	r2, [r3, #0]
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	4610      	mov	r0, r2
 8007f3e:	f000 fb9a 	bl	8008676 <TIM_ITRx_SetConfig>
      break;
 8007f42:	e003      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007f44:	2301      	movs	r3, #1
 8007f46:	73fb      	strb	r3, [r7, #15]
      break;
 8007f48:	e000      	b.n	8007f4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007f4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	3710      	adds	r7, #16
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	fffeff88 	.word	0xfffeff88

08007f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b083      	sub	sp, #12
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f88:	bf00      	nop
 8007f8a:	370c      	adds	r7, #12
 8007f8c:	46bd      	mov	sp, r7
 8007f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b083      	sub	sp, #12
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f9c:	bf00      	nop
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007fb0:	bf00      	nop
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	b085      	sub	sp, #20
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
 8007fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4a40      	ldr	r2, [pc, #256]	; (80080d0 <TIM_Base_SetConfig+0x114>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d013      	beq.n	8007ffc <TIM_Base_SetConfig+0x40>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fda:	d00f      	beq.n	8007ffc <TIM_Base_SetConfig+0x40>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	4a3d      	ldr	r2, [pc, #244]	; (80080d4 <TIM_Base_SetConfig+0x118>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d00b      	beq.n	8007ffc <TIM_Base_SetConfig+0x40>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	4a3c      	ldr	r2, [pc, #240]	; (80080d8 <TIM_Base_SetConfig+0x11c>)
 8007fe8:	4293      	cmp	r3, r2
 8007fea:	d007      	beq.n	8007ffc <TIM_Base_SetConfig+0x40>
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a3b      	ldr	r2, [pc, #236]	; (80080dc <TIM_Base_SetConfig+0x120>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d003      	beq.n	8007ffc <TIM_Base_SetConfig+0x40>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	4a3a      	ldr	r2, [pc, #232]	; (80080e0 <TIM_Base_SetConfig+0x124>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d108      	bne.n	800800e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	685b      	ldr	r3, [r3, #4]
 8008008:	68fa      	ldr	r2, [r7, #12]
 800800a:	4313      	orrs	r3, r2
 800800c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4a2f      	ldr	r2, [pc, #188]	; (80080d0 <TIM_Base_SetConfig+0x114>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d02b      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800801c:	d027      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	4a2c      	ldr	r2, [pc, #176]	; (80080d4 <TIM_Base_SetConfig+0x118>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d023      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	4a2b      	ldr	r2, [pc, #172]	; (80080d8 <TIM_Base_SetConfig+0x11c>)
 800802a:	4293      	cmp	r3, r2
 800802c:	d01f      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4a2a      	ldr	r2, [pc, #168]	; (80080dc <TIM_Base_SetConfig+0x120>)
 8008032:	4293      	cmp	r3, r2
 8008034:	d01b      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	4a29      	ldr	r2, [pc, #164]	; (80080e0 <TIM_Base_SetConfig+0x124>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d017      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	4a28      	ldr	r2, [pc, #160]	; (80080e4 <TIM_Base_SetConfig+0x128>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d013      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	4a27      	ldr	r2, [pc, #156]	; (80080e8 <TIM_Base_SetConfig+0x12c>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d00f      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	4a26      	ldr	r2, [pc, #152]	; (80080ec <TIM_Base_SetConfig+0x130>)
 8008052:	4293      	cmp	r3, r2
 8008054:	d00b      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	4a25      	ldr	r2, [pc, #148]	; (80080f0 <TIM_Base_SetConfig+0x134>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d007      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	4a24      	ldr	r2, [pc, #144]	; (80080f4 <TIM_Base_SetConfig+0x138>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d003      	beq.n	800806e <TIM_Base_SetConfig+0xb2>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a23      	ldr	r2, [pc, #140]	; (80080f8 <TIM_Base_SetConfig+0x13c>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d108      	bne.n	8008080 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008074:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	68fa      	ldr	r2, [r7, #12]
 800807c:	4313      	orrs	r3, r2
 800807e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	695b      	ldr	r3, [r3, #20]
 800808a:	4313      	orrs	r3, r2
 800808c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68fa      	ldr	r2, [r7, #12]
 8008092:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	681a      	ldr	r2, [r3, #0]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a0a      	ldr	r2, [pc, #40]	; (80080d0 <TIM_Base_SetConfig+0x114>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d003      	beq.n	80080b4 <TIM_Base_SetConfig+0xf8>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <TIM_Base_SetConfig+0x124>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d103      	bne.n	80080bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	691a      	ldr	r2, [r3, #16]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	615a      	str	r2, [r3, #20]
}
 80080c2:	bf00      	nop
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	40010000 	.word	0x40010000
 80080d4:	40000400 	.word	0x40000400
 80080d8:	40000800 	.word	0x40000800
 80080dc:	40000c00 	.word	0x40000c00
 80080e0:	40010400 	.word	0x40010400
 80080e4:	40014000 	.word	0x40014000
 80080e8:	40014400 	.word	0x40014400
 80080ec:	40014800 	.word	0x40014800
 80080f0:	40001800 	.word	0x40001800
 80080f4:	40001c00 	.word	0x40001c00
 80080f8:	40002000 	.word	0x40002000

080080fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6a1b      	ldr	r3, [r3, #32]
 800810a:	f023 0201 	bic.w	r2, r3, #1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4b2b      	ldr	r3, [pc, #172]	; (80081d4 <TIM_OC1_SetConfig+0xd8>)
 8008128:	4013      	ands	r3, r2
 800812a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f023 0303 	bic.w	r3, r3, #3
 8008132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	68fa      	ldr	r2, [r7, #12]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	f023 0302 	bic.w	r3, r3, #2
 8008144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008146:	683b      	ldr	r3, [r7, #0]
 8008148:	689b      	ldr	r3, [r3, #8]
 800814a:	697a      	ldr	r2, [r7, #20]
 800814c:	4313      	orrs	r3, r2
 800814e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	4a21      	ldr	r2, [pc, #132]	; (80081d8 <TIM_OC1_SetConfig+0xdc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d003      	beq.n	8008160 <TIM_OC1_SetConfig+0x64>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a20      	ldr	r2, [pc, #128]	; (80081dc <TIM_OC1_SetConfig+0xe0>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10c      	bne.n	800817a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	f023 0308 	bic.w	r3, r3, #8
 8008166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	68db      	ldr	r3, [r3, #12]
 800816c:	697a      	ldr	r2, [r7, #20]
 800816e:	4313      	orrs	r3, r2
 8008170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	f023 0304 	bic.w	r3, r3, #4
 8008178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a16      	ldr	r2, [pc, #88]	; (80081d8 <TIM_OC1_SetConfig+0xdc>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d003      	beq.n	800818a <TIM_OC1_SetConfig+0x8e>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a15      	ldr	r2, [pc, #84]	; (80081dc <TIM_OC1_SetConfig+0xe0>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d111      	bne.n	80081ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008192:	693b      	ldr	r3, [r7, #16]
 8008194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	695b      	ldr	r3, [r3, #20]
 800819e:	693a      	ldr	r2, [r7, #16]
 80081a0:	4313      	orrs	r3, r2
 80081a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	693a      	ldr	r2, [r7, #16]
 80081aa:	4313      	orrs	r3, r2
 80081ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	693a      	ldr	r2, [r7, #16]
 80081b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	685a      	ldr	r2, [r3, #4]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	697a      	ldr	r2, [r7, #20]
 80081c6:	621a      	str	r2, [r3, #32]
}
 80081c8:	bf00      	nop
 80081ca:	371c      	adds	r7, #28
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr
 80081d4:	fffeff8f 	.word	0xfffeff8f
 80081d8:	40010000 	.word	0x40010000
 80081dc:	40010400 	.word	0x40010400

080081e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b087      	sub	sp, #28
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	6a1b      	ldr	r3, [r3, #32]
 80081ee:	f023 0210 	bic.w	r2, r3, #16
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6a1b      	ldr	r3, [r3, #32]
 80081fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <TIM_OC2_SetConfig+0xe4>)
 800820c:	4013      	ands	r3, r2
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f023 0320 	bic.w	r3, r3, #32
 800822a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	011b      	lsls	r3, r3, #4
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a23      	ldr	r2, [pc, #140]	; (80082c8 <TIM_OC2_SetConfig+0xe8>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC2_SetConfig+0x68>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a22      	ldr	r2, [pc, #136]	; (80082cc <TIM_OC2_SetConfig+0xec>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10d      	bne.n	8008264 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	011b      	lsls	r3, r3, #4
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a18      	ldr	r2, [pc, #96]	; (80082c8 <TIM_OC2_SetConfig+0xe8>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d003      	beq.n	8008274 <TIM_OC2_SetConfig+0x94>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a17      	ldr	r2, [pc, #92]	; (80082cc <TIM_OC2_SetConfig+0xec>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d113      	bne.n	800829c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008274:	693b      	ldr	r3, [r7, #16]
 8008276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800827a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	695b      	ldr	r3, [r3, #20]
 8008288:	009b      	lsls	r3, r3, #2
 800828a:	693a      	ldr	r2, [r7, #16]
 800828c:	4313      	orrs	r3, r2
 800828e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	693a      	ldr	r2, [r7, #16]
 8008298:	4313      	orrs	r3, r2
 800829a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	693a      	ldr	r2, [r7, #16]
 80082a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	68fa      	ldr	r2, [r7, #12]
 80082a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	685a      	ldr	r2, [r3, #4]
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	697a      	ldr	r2, [r7, #20]
 80082b4:	621a      	str	r2, [r3, #32]
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	feff8fff 	.word	0xfeff8fff
 80082c8:	40010000 	.word	0x40010000
 80082cc:	40010400 	.word	0x40010400

080082d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b087      	sub	sp, #28
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a1b      	ldr	r3, [r3, #32]
 80082de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	685b      	ldr	r3, [r3, #4]
 80082f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	69db      	ldr	r3, [r3, #28]
 80082f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	4b2d      	ldr	r3, [pc, #180]	; (80083b0 <TIM_OC3_SetConfig+0xe0>)
 80082fc:	4013      	ands	r3, r2
 80082fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f023 0303 	bic.w	r3, r3, #3
 8008306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008308:	683b      	ldr	r3, [r7, #0]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	4313      	orrs	r3, r2
 8008310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800831a:	683b      	ldr	r3, [r7, #0]
 800831c:	689b      	ldr	r3, [r3, #8]
 800831e:	021b      	lsls	r3, r3, #8
 8008320:	697a      	ldr	r2, [r7, #20]
 8008322:	4313      	orrs	r3, r2
 8008324:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a22      	ldr	r2, [pc, #136]	; (80083b4 <TIM_OC3_SetConfig+0xe4>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d003      	beq.n	8008336 <TIM_OC3_SetConfig+0x66>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a21      	ldr	r2, [pc, #132]	; (80083b8 <TIM_OC3_SetConfig+0xe8>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d10d      	bne.n	8008352 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800833c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	68db      	ldr	r3, [r3, #12]
 8008342:	021b      	lsls	r3, r3, #8
 8008344:	697a      	ldr	r2, [r7, #20]
 8008346:	4313      	orrs	r3, r2
 8008348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a17      	ldr	r2, [pc, #92]	; (80083b4 <TIM_OC3_SetConfig+0xe4>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d003      	beq.n	8008362 <TIM_OC3_SetConfig+0x92>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a16      	ldr	r2, [pc, #88]	; (80083b8 <TIM_OC3_SetConfig+0xe8>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d113      	bne.n	800838a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008362:	693b      	ldr	r3, [r7, #16]
 8008364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	011b      	lsls	r3, r3, #4
 8008378:	693a      	ldr	r2, [r7, #16]
 800837a:	4313      	orrs	r3, r2
 800837c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	693a      	ldr	r2, [r7, #16]
 8008386:	4313      	orrs	r3, r2
 8008388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	693a      	ldr	r2, [r7, #16]
 800838e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68fa      	ldr	r2, [r7, #12]
 8008394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr
 80083b0:	fffeff8f 	.word	0xfffeff8f
 80083b4:	40010000 	.word	0x40010000
 80083b8:	40010400 	.word	0x40010400

080083bc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80083bc:	b480      	push	{r7}
 80083be:	b087      	sub	sp, #28
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
 80083c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a1b      	ldr	r3, [r3, #32]
 80083ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	69db      	ldr	r3, [r3, #28]
 80083e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80083e4:	68fa      	ldr	r2, [r7, #12]
 80083e6:	4b1e      	ldr	r3, [pc, #120]	; (8008460 <TIM_OC4_SetConfig+0xa4>)
 80083e8:	4013      	ands	r3, r2
 80083ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083f4:	683b      	ldr	r3, [r7, #0]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008406:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008408:	683b      	ldr	r3, [r7, #0]
 800840a:	689b      	ldr	r3, [r3, #8]
 800840c:	031b      	lsls	r3, r3, #12
 800840e:	693a      	ldr	r2, [r7, #16]
 8008410:	4313      	orrs	r3, r2
 8008412:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a13      	ldr	r2, [pc, #76]	; (8008464 <TIM_OC4_SetConfig+0xa8>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d003      	beq.n	8008424 <TIM_OC4_SetConfig+0x68>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a12      	ldr	r2, [pc, #72]	; (8008468 <TIM_OC4_SetConfig+0xac>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d109      	bne.n	8008438 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800842a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	695b      	ldr	r3, [r3, #20]
 8008430:	019b      	lsls	r3, r3, #6
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	4313      	orrs	r3, r2
 8008436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	697a      	ldr	r2, [r7, #20]
 800843c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	693a      	ldr	r2, [r7, #16]
 8008450:	621a      	str	r2, [r3, #32]
}
 8008452:	bf00      	nop
 8008454:	371c      	adds	r7, #28
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
 800845e:	bf00      	nop
 8008460:	feff8fff 	.word	0xfeff8fff
 8008464:	40010000 	.word	0x40010000
 8008468:	40010400 	.word	0x40010400

0800846c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800846c:	b480      	push	{r7}
 800846e:	b087      	sub	sp, #28
 8008470:	af00      	add	r7, sp, #0
 8008472:	6078      	str	r0, [r7, #4]
 8008474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a1b      	ldr	r3, [r3, #32]
 8008486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008494:	68fa      	ldr	r2, [r7, #12]
 8008496:	4b1b      	ldr	r3, [pc, #108]	; (8008504 <TIM_OC5_SetConfig+0x98>)
 8008498:	4013      	ands	r3, r2
 800849a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68fa      	ldr	r2, [r7, #12]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80084ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	041b      	lsls	r3, r3, #16
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a12      	ldr	r2, [pc, #72]	; (8008508 <TIM_OC5_SetConfig+0x9c>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d003      	beq.n	80084ca <TIM_OC5_SetConfig+0x5e>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	4a11      	ldr	r2, [pc, #68]	; (800850c <TIM_OC5_SetConfig+0xa0>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d109      	bne.n	80084de <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	021b      	lsls	r3, r3, #8
 80084d8:	697a      	ldr	r2, [r7, #20]
 80084da:	4313      	orrs	r3, r2
 80084dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	697a      	ldr	r2, [r7, #20]
 80084e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	68fa      	ldr	r2, [r7, #12]
 80084e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80084ea:	683b      	ldr	r3, [r7, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	693a      	ldr	r2, [r7, #16]
 80084f6:	621a      	str	r2, [r3, #32]
}
 80084f8:	bf00      	nop
 80084fa:	371c      	adds	r7, #28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008502:	4770      	bx	lr
 8008504:	fffeff8f 	.word	0xfffeff8f
 8008508:	40010000 	.word	0x40010000
 800850c:	40010400 	.word	0x40010400

08008510 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008510:	b480      	push	{r7}
 8008512:	b087      	sub	sp, #28
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a1b      	ldr	r3, [r3, #32]
 800851e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a1b      	ldr	r3, [r3, #32]
 800852a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	685b      	ldr	r3, [r3, #4]
 8008530:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	4b1c      	ldr	r3, [pc, #112]	; (80085ac <TIM_OC6_SetConfig+0x9c>)
 800853c:	4013      	ands	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	021b      	lsls	r3, r3, #8
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	4313      	orrs	r3, r2
 800854a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008554:	683b      	ldr	r3, [r7, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	051b      	lsls	r3, r3, #20
 800855a:	693a      	ldr	r2, [r7, #16]
 800855c:	4313      	orrs	r3, r2
 800855e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4a13      	ldr	r2, [pc, #76]	; (80085b0 <TIM_OC6_SetConfig+0xa0>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d003      	beq.n	8008570 <TIM_OC6_SetConfig+0x60>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	4a12      	ldr	r2, [pc, #72]	; (80085b4 <TIM_OC6_SetConfig+0xa4>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d109      	bne.n	8008584 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	029b      	lsls	r3, r3, #10
 800857e:	697a      	ldr	r2, [r7, #20]
 8008580:	4313      	orrs	r3, r2
 8008582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	697a      	ldr	r2, [r7, #20]
 8008588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	68fa      	ldr	r2, [r7, #12]
 800858e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	685a      	ldr	r2, [r3, #4]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	621a      	str	r2, [r3, #32]
}
 800859e:	bf00      	nop
 80085a0:	371c      	adds	r7, #28
 80085a2:	46bd      	mov	sp, r7
 80085a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	feff8fff 	.word	0xfeff8fff
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40010400 	.word	0x40010400

080085b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0201 	bic.w	r2, r3, #1
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	699b      	ldr	r3, [r3, #24]
 80085da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	011b      	lsls	r3, r3, #4
 80085e8:	693a      	ldr	r2, [r7, #16]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	f023 030a 	bic.w	r3, r3, #10
 80085f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	4313      	orrs	r3, r2
 80085fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	697a      	ldr	r2, [r7, #20]
 8008608:	621a      	str	r2, [r3, #32]
}
 800860a:	bf00      	nop
 800860c:	371c      	adds	r7, #28
 800860e:	46bd      	mov	sp, r7
 8008610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008614:	4770      	bx	lr

08008616 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008616:	b480      	push	{r7}
 8008618:	b087      	sub	sp, #28
 800861a:	af00      	add	r7, sp, #0
 800861c:	60f8      	str	r0, [r7, #12]
 800861e:	60b9      	str	r1, [r7, #8]
 8008620:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	6a1b      	ldr	r3, [r3, #32]
 8008626:	f023 0210 	bic.w	r2, r3, #16
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6a1b      	ldr	r3, [r3, #32]
 8008638:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008640:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	031b      	lsls	r3, r3, #12
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	4313      	orrs	r3, r2
 800864a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008652:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	011b      	lsls	r3, r3, #4
 8008658:	693a      	ldr	r2, [r7, #16]
 800865a:	4313      	orrs	r3, r2
 800865c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	693a      	ldr	r2, [r7, #16]
 8008668:	621a      	str	r2, [r3, #32]
}
 800866a:	bf00      	nop
 800866c:	371c      	adds	r7, #28
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008676:	b480      	push	{r7}
 8008678:	b085      	sub	sp, #20
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
 800867e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	689b      	ldr	r3, [r3, #8]
 8008684:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800868c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800868e:	683a      	ldr	r2, [r7, #0]
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	4313      	orrs	r3, r2
 8008694:	f043 0307 	orr.w	r3, r3, #7
 8008698:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	68fa      	ldr	r2, [r7, #12]
 800869e:	609a      	str	r2, [r3, #8]
}
 80086a0:	bf00      	nop
 80086a2:	3714      	adds	r7, #20
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b087      	sub	sp, #28
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
 80086b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	689b      	ldr	r3, [r3, #8]
 80086be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	021a      	lsls	r2, r3, #8
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	431a      	orrs	r2, r3
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	4313      	orrs	r3, r2
 80086d4:	697a      	ldr	r2, [r7, #20]
 80086d6:	4313      	orrs	r3, r2
 80086d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	697a      	ldr	r2, [r7, #20]
 80086de:	609a      	str	r2, [r3, #8]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086f8:	68bb      	ldr	r3, [r7, #8]
 80086fa:	f003 031f 	and.w	r3, r3, #31
 80086fe:	2201      	movs	r2, #1
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	6a1a      	ldr	r2, [r3, #32]
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	43db      	mvns	r3, r3
 800870e:	401a      	ands	r2, r3
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a1a      	ldr	r2, [r3, #32]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	f003 031f 	and.w	r3, r3, #31
 800871e:	6879      	ldr	r1, [r7, #4]
 8008720:	fa01 f303 	lsl.w	r3, r1, r3
 8008724:	431a      	orrs	r2, r3
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	621a      	str	r2, [r3, #32]
}
 800872a:	bf00      	nop
 800872c:	371c      	adds	r7, #28
 800872e:	46bd      	mov	sp, r7
 8008730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008734:	4770      	bx	lr
	...

08008738 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008738:	b480      	push	{r7}
 800873a:	b085      	sub	sp, #20
 800873c:	af00      	add	r7, sp, #0
 800873e:	6078      	str	r0, [r7, #4]
 8008740:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008748:	2b01      	cmp	r3, #1
 800874a:	d101      	bne.n	8008750 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800874c:	2302      	movs	r3, #2
 800874e:	e06d      	b.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	2202      	movs	r2, #2
 800875c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	689b      	ldr	r3, [r3, #8]
 800876e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a30      	ldr	r2, [pc, #192]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d004      	beq.n	8008784 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a2f      	ldr	r2, [pc, #188]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d108      	bne.n	8008796 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800878a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	68fa      	ldr	r2, [r7, #12]
 8008792:	4313      	orrs	r3, r2
 8008794:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800879c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	68fa      	ldr	r2, [r7, #12]
 80087a4:	4313      	orrs	r3, r2
 80087a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a20      	ldr	r2, [pc, #128]	; (8008838 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d022      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087c2:	d01d      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a1d      	ldr	r2, [pc, #116]	; (8008840 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d018      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a1c      	ldr	r2, [pc, #112]	; (8008844 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d013      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	4a1a      	ldr	r2, [pc, #104]	; (8008848 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80087de:	4293      	cmp	r3, r2
 80087e0:	d00e      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a15      	ldr	r2, [pc, #84]	; (800883c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d009      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a16      	ldr	r2, [pc, #88]	; (800884c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d004      	beq.n	8008800 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	4a15      	ldr	r2, [pc, #84]	; (8008850 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d10c      	bne.n	800881a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008806:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	68ba      	ldr	r2, [r7, #8]
 800880e:	4313      	orrs	r3, r2
 8008810:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68ba      	ldr	r2, [r7, #8]
 8008818:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800882a:	2300      	movs	r3, #0
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr
 8008838:	40010000 	.word	0x40010000
 800883c:	40010400 	.word	0x40010400
 8008840:	40000400 	.word	0x40000400
 8008844:	40000800 	.word	0x40000800
 8008848:	40000c00 	.word	0x40000c00
 800884c:	40014000 	.word	0x40014000
 8008850:	40001800 	.word	0x40001800

08008854 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008854:	b480      	push	{r7}
 8008856:	b083      	sub	sp, #12
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800885c:	bf00      	nop
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008868:	b480      	push	{r7}
 800886a:	b083      	sub	sp, #12
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008870:	bf00      	nop
 8008872:	370c      	adds	r7, #12
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr

0800887c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800887c:	b480      	push	{r7}
 800887e:	b083      	sub	sp, #12
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008884:	bf00      	nop
 8008886:	370c      	adds	r7, #12
 8008888:	46bd      	mov	sp, r7
 800888a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888e:	4770      	bx	lr

08008890 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e040      	b.n	8008924 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d106      	bne.n	80088b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2200      	movs	r2, #0
 80088ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f7fb ffb2 	bl	800481c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2224      	movs	r2, #36	; 0x24
 80088bc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681a      	ldr	r2, [r3, #0]
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f022 0201 	bic.w	r2, r2, #1
 80088cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088ce:	6878      	ldr	r0, [r7, #4]
 80088d0:	f000 fbaa 	bl	8009028 <UART_SetConfig>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d101      	bne.n	80088de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e022      	b.n	8008924 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d002      	beq.n	80088ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 fe02 	bl	80094f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80088fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	689a      	ldr	r2, [r3, #8]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800890a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f042 0201 	orr.w	r2, r2, #1
 800891a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 fe89 	bl	8009634 <UART_CheckIdleState>
 8008922:	4603      	mov	r3, r0
}
 8008924:	4618      	mov	r0, r3
 8008926:	3708      	adds	r7, #8
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}

0800892c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b08a      	sub	sp, #40	; 0x28
 8008930:	af02      	add	r7, sp, #8
 8008932:	60f8      	str	r0, [r7, #12]
 8008934:	60b9      	str	r1, [r7, #8]
 8008936:	603b      	str	r3, [r7, #0]
 8008938:	4613      	mov	r3, r2
 800893a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008940:	2b20      	cmp	r3, #32
 8008942:	f040 8081 	bne.w	8008a48 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d002      	beq.n	8008952 <HAL_UART_Transmit+0x26>
 800894c:	88fb      	ldrh	r3, [r7, #6]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d101      	bne.n	8008956 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008952:	2301      	movs	r3, #1
 8008954:	e079      	b.n	8008a4a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800895c:	2b01      	cmp	r3, #1
 800895e:	d101      	bne.n	8008964 <HAL_UART_Transmit+0x38>
 8008960:	2302      	movs	r3, #2
 8008962:	e072      	b.n	8008a4a <HAL_UART_Transmit+0x11e>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2201      	movs	r2, #1
 8008968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2221      	movs	r2, #33	; 0x21
 8008978:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800897a:	f7fc f999 	bl	8004cb0 <HAL_GetTick>
 800897e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	88fa      	ldrh	r2, [r7, #6]
 8008984:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	88fa      	ldrh	r2, [r7, #6]
 800898c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008998:	d108      	bne.n	80089ac <HAL_UART_Transmit+0x80>
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	691b      	ldr	r3, [r3, #16]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d104      	bne.n	80089ac <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80089a2:	2300      	movs	r3, #0
 80089a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	61bb      	str	r3, [r7, #24]
 80089aa:	e003      	b.n	80089b4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80089ac:	68bb      	ldr	r3, [r7, #8]
 80089ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80089b0:	2300      	movs	r3, #0
 80089b2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80089bc:	e02c      	b.n	8008a18 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	9300      	str	r3, [sp, #0]
 80089c2:	697b      	ldr	r3, [r7, #20]
 80089c4:	2200      	movs	r2, #0
 80089c6:	2180      	movs	r1, #128	; 0x80
 80089c8:	68f8      	ldr	r0, [r7, #12]
 80089ca:	f000 fe66 	bl	800969a <UART_WaitOnFlagUntilTimeout>
 80089ce:	4603      	mov	r3, r0
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d001      	beq.n	80089d8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e038      	b.n	8008a4a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d10b      	bne.n	80089f6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	881b      	ldrh	r3, [r3, #0]
 80089e2:	461a      	mov	r2, r3
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80089ec:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	3302      	adds	r3, #2
 80089f2:	61bb      	str	r3, [r7, #24]
 80089f4:	e007      	b.n	8008a06 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80089f6:	69fb      	ldr	r3, [r7, #28]
 80089f8:	781a      	ldrb	r2, [r3, #0]
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008a00:	69fb      	ldr	r3, [r7, #28]
 8008a02:	3301      	adds	r3, #1
 8008a04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d1cc      	bne.n	80089be <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	9300      	str	r3, [sp, #0]
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	2140      	movs	r1, #64	; 0x40
 8008a2e:	68f8      	ldr	r0, [r7, #12]
 8008a30:	f000 fe33 	bl	800969a <UART_WaitOnFlagUntilTimeout>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e005      	b.n	8008a4a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2220      	movs	r2, #32
 8008a42:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008a44:	2300      	movs	r3, #0
 8008a46:	e000      	b.n	8008a4a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008a48:	2302      	movs	r3, #2
  }
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	3720      	adds	r7, #32
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}
	...

08008a54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b0ba      	sub	sp, #232	; 0xe8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	69db      	ldr	r3, [r3, #28]
 8008a62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008a7a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a7e:	f640 030f 	movw	r3, #2063	; 0x80f
 8008a82:	4013      	ands	r3, r2
 8008a84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008a88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d115      	bne.n	8008abc <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d00f      	beq.n	8008abc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d009      	beq.n	8008abc <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 828f 	beq.w	8008fd0 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	4798      	blx	r3
      }
      return;
 8008aba:	e289      	b.n	8008fd0 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008abc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	f000 8117 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008ac6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008aca:	f003 0301 	and.w	r3, r3, #1
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008ad2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008ad6:	4b85      	ldr	r3, [pc, #532]	; (8008cec <HAL_UART_IRQHandler+0x298>)
 8008ad8:	4013      	ands	r3, r2
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 810a 	beq.w	8008cf4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008ae0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ae4:	f003 0301 	and.w	r3, r3, #1
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d011      	beq.n	8008b10 <HAL_UART_IRQHandler+0xbc>
 8008aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d00b      	beq.n	8008b10 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	2201      	movs	r2, #1
 8008afe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b06:	f043 0201 	orr.w	r2, r3, #1
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d011      	beq.n	8008b40 <HAL_UART_IRQHandler+0xec>
 8008b1c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b20:	f003 0301 	and.w	r3, r3, #1
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d00b      	beq.n	8008b40 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b36:	f043 0204 	orr.w	r2, r3, #4
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b44:	f003 0304 	and.w	r3, r3, #4
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d011      	beq.n	8008b70 <HAL_UART_IRQHandler+0x11c>
 8008b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d00b      	beq.n	8008b70 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	2204      	movs	r2, #4
 8008b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b66:	f043 0202 	orr.w	r2, r3, #2
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b74:	f003 0308 	and.w	r3, r3, #8
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d017      	beq.n	8008bac <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b80:	f003 0320 	and.w	r3, r3, #32
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008b88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b8c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d00b      	beq.n	8008bac <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	2208      	movs	r2, #8
 8008b9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008ba2:	f043 0208 	orr.w	r2, r3, #8
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008bac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d012      	beq.n	8008bde <HAL_UART_IRQHandler+0x18a>
 8008bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d00c      	beq.n	8008bde <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008bcc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008bd4:	f043 0220 	orr.w	r2, r3, #32
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	f000 81f5 	beq.w	8008fd4 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008bea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bee:	f003 0320 	and.w	r3, r3, #32
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d00d      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008bf6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d007      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d003      	beq.n	8008c12 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c18:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b40      	cmp	r3, #64	; 0x40
 8008c28:	d005      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008c2a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c2e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d04f      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fdf3 	bl	8009822 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	689b      	ldr	r3, [r3, #8]
 8008c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c46:	2b40      	cmp	r3, #64	; 0x40
 8008c48:	d141      	bne.n	8008cce <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	3308      	adds	r3, #8
 8008c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008c58:	e853 3f00 	ldrex	r3, [r3]
 8008c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3308      	adds	r3, #8
 8008c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1d9      	bne.n	8008c4a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d013      	beq.n	8008cc6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca2:	4a13      	ldr	r2, [pc, #76]	; (8008cf0 <HAL_UART_IRQHandler+0x29c>)
 8008ca4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008caa:	4618      	mov	r0, r3
 8008cac:	f7fd f87b 	bl	8005da6 <HAL_DMA_Abort_IT>
 8008cb0:	4603      	mov	r3, r0
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d017      	beq.n	8008ce6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cbc:	687a      	ldr	r2, [r7, #4]
 8008cbe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cc4:	e00f      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 f998 	bl	8008ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ccc:	e00b      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f994 	bl	8008ffc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008cd4:	e007      	b.n	8008ce6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008cd6:	6878      	ldr	r0, [r7, #4]
 8008cd8:	f000 f990 	bl	8008ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008ce4:	e176      	b.n	8008fd4 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ce6:	bf00      	nop
    return;
 8008ce8:	e174      	b.n	8008fd4 <HAL_UART_IRQHandler+0x580>
 8008cea:	bf00      	nop
 8008cec:	04000120 	.word	0x04000120
 8008cf0:	080098e9 	.word	0x080098e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	f040 8144 	bne.w	8008f86 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d02:	f003 0310 	and.w	r3, r3, #16
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f000 813d 	beq.w	8008f86 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d10:	f003 0310 	and.w	r3, r3, #16
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	f000 8136 	beq.w	8008f86 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2210      	movs	r2, #16
 8008d20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	689b      	ldr	r3, [r3, #8]
 8008d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d2c:	2b40      	cmp	r3, #64	; 0x40
 8008d2e:	f040 80b2 	bne.w	8008e96 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008d3e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 8148 	beq.w	8008fd8 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d52:	429a      	cmp	r2, r3
 8008d54:	f080 8140 	bcs.w	8008fd8 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008d5e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d6c:	f000 8085 	beq.w	8008e7a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	461a      	mov	r2, r3
 8008d96:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d9e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008daa:	e841 2300 	strex	r3, r2, [r1]
 8008dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d1da      	bne.n	8008d70 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	3308      	adds	r3, #8
 8008dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dc4:	e853 3f00 	ldrex	r3, [r3]
 8008dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008dcc:	f023 0301 	bic.w	r3, r3, #1
 8008dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008dea:	e841 2300 	strex	r3, r2, [r1]
 8008dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1e1      	bne.n	8008dba <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	3308      	adds	r3, #8
 8008dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e00:	e853 3f00 	ldrex	r3, [r3]
 8008e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	3308      	adds	r3, #8
 8008e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008e22:	e841 2300 	strex	r3, r2, [r1]
 8008e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d1e3      	bne.n	8008df6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2220      	movs	r2, #32
 8008e32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e42:	e853 3f00 	ldrex	r3, [r3]
 8008e46:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008e48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e4a:	f023 0310 	bic.w	r3, r3, #16
 8008e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	461a      	mov	r2, r3
 8008e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8008e5e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e60:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008e62:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008e64:	e841 2300 	strex	r3, r2, [r1]
 8008e68:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008e6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d1e4      	bne.n	8008e3a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7fc ff26 	bl	8005cc6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	1ad3      	subs	r3, r2, r3
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f8be 	bl	8009010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008e94:	e0a0      	b.n	8008fd8 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008eb0:	b29b      	uxth	r3, r3
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	f000 8092 	beq.w	8008fdc <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8008eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	f000 808d 	beq.w	8008fdc <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008eca:	e853 3f00 	ldrex	r3, [r3]
 8008ece:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ed2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ed6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008ee4:	647b      	str	r3, [r7, #68]	; 0x44
 8008ee6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008eea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008eec:	e841 2300 	strex	r3, r2, [r1]
 8008ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d1e4      	bne.n	8008ec2 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	3308      	adds	r3, #8
 8008efe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	623b      	str	r3, [r7, #32]
   return(result);
 8008f08:	6a3b      	ldr	r3, [r7, #32]
 8008f0a:	f023 0301 	bic.w	r3, r3, #1
 8008f0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	3308      	adds	r3, #8
 8008f18:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008f1c:	633a      	str	r2, [r7, #48]	; 0x30
 8008f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008f22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008f24:	e841 2300 	strex	r3, r2, [r1]
 8008f28:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d1e3      	bne.n	8008ef8 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	2220      	movs	r2, #32
 8008f34:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0310 	bic.w	r3, r3, #16
 8008f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008f64:	61fb      	str	r3, [r7, #28]
 8008f66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	69b9      	ldr	r1, [r7, #24]
 8008f6a:	69fa      	ldr	r2, [r7, #28]
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	617b      	str	r3, [r7, #20]
   return(result);
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e4      	bne.n	8008f42 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f846 	bl	8009010 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008f84:	e02a      	b.n	8008fdc <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d00e      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8008f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d008      	beq.n	8008fb0 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d01c      	beq.n	8008fe0 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	4798      	blx	r3
    }
    return;
 8008fae:	e017      	b.n	8008fe0 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d012      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
 8008fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00c      	beq.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	f000 fca3 	bl	8009914 <UART_EndTransmit_IT>
    return;
 8008fce:	e008      	b.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
      return;
 8008fd0:	bf00      	nop
 8008fd2:	e006      	b.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
    return;
 8008fd4:	bf00      	nop
 8008fd6:	e004      	b.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
      return;
 8008fd8:	bf00      	nop
 8008fda:	e002      	b.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
      return;
 8008fdc:	bf00      	nop
 8008fde:	e000      	b.n	8008fe2 <HAL_UART_IRQHandler+0x58e>
    return;
 8008fe0:	bf00      	nop
  }

}
 8008fe2:	37e8      	adds	r7, #232	; 0xe8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008fe8:	b480      	push	{r7}
 8008fea:	b083      	sub	sp, #12
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ff0:	bf00      	nop
 8008ff2:	370c      	adds	r7, #12
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffa:	4770      	bx	lr

08008ffc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009004:	bf00      	nop
 8009006:	370c      	adds	r7, #12
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr

08009010 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
 8009018:	460b      	mov	r3, r1
 800901a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b088      	sub	sp, #32
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	695b      	ldr	r3, [r3, #20]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	69db      	ldr	r3, [r3, #28]
 8009048:	4313      	orrs	r3, r2
 800904a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	4ba6      	ldr	r3, [pc, #664]	; (80092ec <UART_SetConfig+0x2c4>)
 8009054:	4013      	ands	r3, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	6812      	ldr	r2, [r2, #0]
 800905a:	6979      	ldr	r1, [r7, #20]
 800905c:	430b      	orrs	r3, r1
 800905e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	685b      	ldr	r3, [r3, #4]
 8009066:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	68da      	ldr	r2, [r3, #12]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	430a      	orrs	r2, r1
 8009074:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	699b      	ldr	r3, [r3, #24]
 800907a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6a1b      	ldr	r3, [r3, #32]
 8009080:	697a      	ldr	r2, [r7, #20]
 8009082:	4313      	orrs	r3, r2
 8009084:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	697a      	ldr	r2, [r7, #20]
 8009096:	430a      	orrs	r2, r1
 8009098:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a94      	ldr	r2, [pc, #592]	; (80092f0 <UART_SetConfig+0x2c8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d120      	bne.n	80090e6 <UART_SetConfig+0xbe>
 80090a4:	4b93      	ldr	r3, [pc, #588]	; (80092f4 <UART_SetConfig+0x2cc>)
 80090a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090aa:	f003 0303 	and.w	r3, r3, #3
 80090ae:	2b03      	cmp	r3, #3
 80090b0:	d816      	bhi.n	80090e0 <UART_SetConfig+0xb8>
 80090b2:	a201      	add	r2, pc, #4	; (adr r2, 80090b8 <UART_SetConfig+0x90>)
 80090b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090b8:	080090c9 	.word	0x080090c9
 80090bc:	080090d5 	.word	0x080090d5
 80090c0:	080090cf 	.word	0x080090cf
 80090c4:	080090db 	.word	0x080090db
 80090c8:	2301      	movs	r3, #1
 80090ca:	77fb      	strb	r3, [r7, #31]
 80090cc:	e150      	b.n	8009370 <UART_SetConfig+0x348>
 80090ce:	2302      	movs	r3, #2
 80090d0:	77fb      	strb	r3, [r7, #31]
 80090d2:	e14d      	b.n	8009370 <UART_SetConfig+0x348>
 80090d4:	2304      	movs	r3, #4
 80090d6:	77fb      	strb	r3, [r7, #31]
 80090d8:	e14a      	b.n	8009370 <UART_SetConfig+0x348>
 80090da:	2308      	movs	r3, #8
 80090dc:	77fb      	strb	r3, [r7, #31]
 80090de:	e147      	b.n	8009370 <UART_SetConfig+0x348>
 80090e0:	2310      	movs	r3, #16
 80090e2:	77fb      	strb	r3, [r7, #31]
 80090e4:	e144      	b.n	8009370 <UART_SetConfig+0x348>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	4a83      	ldr	r2, [pc, #524]	; (80092f8 <UART_SetConfig+0x2d0>)
 80090ec:	4293      	cmp	r3, r2
 80090ee:	d132      	bne.n	8009156 <UART_SetConfig+0x12e>
 80090f0:	4b80      	ldr	r3, [pc, #512]	; (80092f4 <UART_SetConfig+0x2cc>)
 80090f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090f6:	f003 030c 	and.w	r3, r3, #12
 80090fa:	2b0c      	cmp	r3, #12
 80090fc:	d828      	bhi.n	8009150 <UART_SetConfig+0x128>
 80090fe:	a201      	add	r2, pc, #4	; (adr r2, 8009104 <UART_SetConfig+0xdc>)
 8009100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009104:	08009139 	.word	0x08009139
 8009108:	08009151 	.word	0x08009151
 800910c:	08009151 	.word	0x08009151
 8009110:	08009151 	.word	0x08009151
 8009114:	08009145 	.word	0x08009145
 8009118:	08009151 	.word	0x08009151
 800911c:	08009151 	.word	0x08009151
 8009120:	08009151 	.word	0x08009151
 8009124:	0800913f 	.word	0x0800913f
 8009128:	08009151 	.word	0x08009151
 800912c:	08009151 	.word	0x08009151
 8009130:	08009151 	.word	0x08009151
 8009134:	0800914b 	.word	0x0800914b
 8009138:	2300      	movs	r3, #0
 800913a:	77fb      	strb	r3, [r7, #31]
 800913c:	e118      	b.n	8009370 <UART_SetConfig+0x348>
 800913e:	2302      	movs	r3, #2
 8009140:	77fb      	strb	r3, [r7, #31]
 8009142:	e115      	b.n	8009370 <UART_SetConfig+0x348>
 8009144:	2304      	movs	r3, #4
 8009146:	77fb      	strb	r3, [r7, #31]
 8009148:	e112      	b.n	8009370 <UART_SetConfig+0x348>
 800914a:	2308      	movs	r3, #8
 800914c:	77fb      	strb	r3, [r7, #31]
 800914e:	e10f      	b.n	8009370 <UART_SetConfig+0x348>
 8009150:	2310      	movs	r3, #16
 8009152:	77fb      	strb	r3, [r7, #31]
 8009154:	e10c      	b.n	8009370 <UART_SetConfig+0x348>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a68      	ldr	r2, [pc, #416]	; (80092fc <UART_SetConfig+0x2d4>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d120      	bne.n	80091a2 <UART_SetConfig+0x17a>
 8009160:	4b64      	ldr	r3, [pc, #400]	; (80092f4 <UART_SetConfig+0x2cc>)
 8009162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009166:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800916a:	2b30      	cmp	r3, #48	; 0x30
 800916c:	d013      	beq.n	8009196 <UART_SetConfig+0x16e>
 800916e:	2b30      	cmp	r3, #48	; 0x30
 8009170:	d814      	bhi.n	800919c <UART_SetConfig+0x174>
 8009172:	2b20      	cmp	r3, #32
 8009174:	d009      	beq.n	800918a <UART_SetConfig+0x162>
 8009176:	2b20      	cmp	r3, #32
 8009178:	d810      	bhi.n	800919c <UART_SetConfig+0x174>
 800917a:	2b00      	cmp	r3, #0
 800917c:	d002      	beq.n	8009184 <UART_SetConfig+0x15c>
 800917e:	2b10      	cmp	r3, #16
 8009180:	d006      	beq.n	8009190 <UART_SetConfig+0x168>
 8009182:	e00b      	b.n	800919c <UART_SetConfig+0x174>
 8009184:	2300      	movs	r3, #0
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e0f2      	b.n	8009370 <UART_SetConfig+0x348>
 800918a:	2302      	movs	r3, #2
 800918c:	77fb      	strb	r3, [r7, #31]
 800918e:	e0ef      	b.n	8009370 <UART_SetConfig+0x348>
 8009190:	2304      	movs	r3, #4
 8009192:	77fb      	strb	r3, [r7, #31]
 8009194:	e0ec      	b.n	8009370 <UART_SetConfig+0x348>
 8009196:	2308      	movs	r3, #8
 8009198:	77fb      	strb	r3, [r7, #31]
 800919a:	e0e9      	b.n	8009370 <UART_SetConfig+0x348>
 800919c:	2310      	movs	r3, #16
 800919e:	77fb      	strb	r3, [r7, #31]
 80091a0:	e0e6      	b.n	8009370 <UART_SetConfig+0x348>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a56      	ldr	r2, [pc, #344]	; (8009300 <UART_SetConfig+0x2d8>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d120      	bne.n	80091ee <UART_SetConfig+0x1c6>
 80091ac:	4b51      	ldr	r3, [pc, #324]	; (80092f4 <UART_SetConfig+0x2cc>)
 80091ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091b6:	2bc0      	cmp	r3, #192	; 0xc0
 80091b8:	d013      	beq.n	80091e2 <UART_SetConfig+0x1ba>
 80091ba:	2bc0      	cmp	r3, #192	; 0xc0
 80091bc:	d814      	bhi.n	80091e8 <UART_SetConfig+0x1c0>
 80091be:	2b80      	cmp	r3, #128	; 0x80
 80091c0:	d009      	beq.n	80091d6 <UART_SetConfig+0x1ae>
 80091c2:	2b80      	cmp	r3, #128	; 0x80
 80091c4:	d810      	bhi.n	80091e8 <UART_SetConfig+0x1c0>
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d002      	beq.n	80091d0 <UART_SetConfig+0x1a8>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d006      	beq.n	80091dc <UART_SetConfig+0x1b4>
 80091ce:	e00b      	b.n	80091e8 <UART_SetConfig+0x1c0>
 80091d0:	2300      	movs	r3, #0
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e0cc      	b.n	8009370 <UART_SetConfig+0x348>
 80091d6:	2302      	movs	r3, #2
 80091d8:	77fb      	strb	r3, [r7, #31]
 80091da:	e0c9      	b.n	8009370 <UART_SetConfig+0x348>
 80091dc:	2304      	movs	r3, #4
 80091de:	77fb      	strb	r3, [r7, #31]
 80091e0:	e0c6      	b.n	8009370 <UART_SetConfig+0x348>
 80091e2:	2308      	movs	r3, #8
 80091e4:	77fb      	strb	r3, [r7, #31]
 80091e6:	e0c3      	b.n	8009370 <UART_SetConfig+0x348>
 80091e8:	2310      	movs	r3, #16
 80091ea:	77fb      	strb	r3, [r7, #31]
 80091ec:	e0c0      	b.n	8009370 <UART_SetConfig+0x348>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a44      	ldr	r2, [pc, #272]	; (8009304 <UART_SetConfig+0x2dc>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d125      	bne.n	8009244 <UART_SetConfig+0x21c>
 80091f8:	4b3e      	ldr	r3, [pc, #248]	; (80092f4 <UART_SetConfig+0x2cc>)
 80091fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009206:	d017      	beq.n	8009238 <UART_SetConfig+0x210>
 8009208:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800920c:	d817      	bhi.n	800923e <UART_SetConfig+0x216>
 800920e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009212:	d00b      	beq.n	800922c <UART_SetConfig+0x204>
 8009214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009218:	d811      	bhi.n	800923e <UART_SetConfig+0x216>
 800921a:	2b00      	cmp	r3, #0
 800921c:	d003      	beq.n	8009226 <UART_SetConfig+0x1fe>
 800921e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009222:	d006      	beq.n	8009232 <UART_SetConfig+0x20a>
 8009224:	e00b      	b.n	800923e <UART_SetConfig+0x216>
 8009226:	2300      	movs	r3, #0
 8009228:	77fb      	strb	r3, [r7, #31]
 800922a:	e0a1      	b.n	8009370 <UART_SetConfig+0x348>
 800922c:	2302      	movs	r3, #2
 800922e:	77fb      	strb	r3, [r7, #31]
 8009230:	e09e      	b.n	8009370 <UART_SetConfig+0x348>
 8009232:	2304      	movs	r3, #4
 8009234:	77fb      	strb	r3, [r7, #31]
 8009236:	e09b      	b.n	8009370 <UART_SetConfig+0x348>
 8009238:	2308      	movs	r3, #8
 800923a:	77fb      	strb	r3, [r7, #31]
 800923c:	e098      	b.n	8009370 <UART_SetConfig+0x348>
 800923e:	2310      	movs	r3, #16
 8009240:	77fb      	strb	r3, [r7, #31]
 8009242:	e095      	b.n	8009370 <UART_SetConfig+0x348>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a2f      	ldr	r2, [pc, #188]	; (8009308 <UART_SetConfig+0x2e0>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d125      	bne.n	800929a <UART_SetConfig+0x272>
 800924e:	4b29      	ldr	r3, [pc, #164]	; (80092f4 <UART_SetConfig+0x2cc>)
 8009250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800925c:	d017      	beq.n	800928e <UART_SetConfig+0x266>
 800925e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009262:	d817      	bhi.n	8009294 <UART_SetConfig+0x26c>
 8009264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009268:	d00b      	beq.n	8009282 <UART_SetConfig+0x25a>
 800926a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800926e:	d811      	bhi.n	8009294 <UART_SetConfig+0x26c>
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <UART_SetConfig+0x254>
 8009274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009278:	d006      	beq.n	8009288 <UART_SetConfig+0x260>
 800927a:	e00b      	b.n	8009294 <UART_SetConfig+0x26c>
 800927c:	2301      	movs	r3, #1
 800927e:	77fb      	strb	r3, [r7, #31]
 8009280:	e076      	b.n	8009370 <UART_SetConfig+0x348>
 8009282:	2302      	movs	r3, #2
 8009284:	77fb      	strb	r3, [r7, #31]
 8009286:	e073      	b.n	8009370 <UART_SetConfig+0x348>
 8009288:	2304      	movs	r3, #4
 800928a:	77fb      	strb	r3, [r7, #31]
 800928c:	e070      	b.n	8009370 <UART_SetConfig+0x348>
 800928e:	2308      	movs	r3, #8
 8009290:	77fb      	strb	r3, [r7, #31]
 8009292:	e06d      	b.n	8009370 <UART_SetConfig+0x348>
 8009294:	2310      	movs	r3, #16
 8009296:	77fb      	strb	r3, [r7, #31]
 8009298:	e06a      	b.n	8009370 <UART_SetConfig+0x348>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	4a1b      	ldr	r2, [pc, #108]	; (800930c <UART_SetConfig+0x2e4>)
 80092a0:	4293      	cmp	r3, r2
 80092a2:	d138      	bne.n	8009316 <UART_SetConfig+0x2ee>
 80092a4:	4b13      	ldr	r3, [pc, #76]	; (80092f4 <UART_SetConfig+0x2cc>)
 80092a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80092ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092b2:	d017      	beq.n	80092e4 <UART_SetConfig+0x2bc>
 80092b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092b8:	d82a      	bhi.n	8009310 <UART_SetConfig+0x2e8>
 80092ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092be:	d00b      	beq.n	80092d8 <UART_SetConfig+0x2b0>
 80092c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092c4:	d824      	bhi.n	8009310 <UART_SetConfig+0x2e8>
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d003      	beq.n	80092d2 <UART_SetConfig+0x2aa>
 80092ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80092ce:	d006      	beq.n	80092de <UART_SetConfig+0x2b6>
 80092d0:	e01e      	b.n	8009310 <UART_SetConfig+0x2e8>
 80092d2:	2300      	movs	r3, #0
 80092d4:	77fb      	strb	r3, [r7, #31]
 80092d6:	e04b      	b.n	8009370 <UART_SetConfig+0x348>
 80092d8:	2302      	movs	r3, #2
 80092da:	77fb      	strb	r3, [r7, #31]
 80092dc:	e048      	b.n	8009370 <UART_SetConfig+0x348>
 80092de:	2304      	movs	r3, #4
 80092e0:	77fb      	strb	r3, [r7, #31]
 80092e2:	e045      	b.n	8009370 <UART_SetConfig+0x348>
 80092e4:	2308      	movs	r3, #8
 80092e6:	77fb      	strb	r3, [r7, #31]
 80092e8:	e042      	b.n	8009370 <UART_SetConfig+0x348>
 80092ea:	bf00      	nop
 80092ec:	efff69f3 	.word	0xefff69f3
 80092f0:	40011000 	.word	0x40011000
 80092f4:	40023800 	.word	0x40023800
 80092f8:	40004400 	.word	0x40004400
 80092fc:	40004800 	.word	0x40004800
 8009300:	40004c00 	.word	0x40004c00
 8009304:	40005000 	.word	0x40005000
 8009308:	40011400 	.word	0x40011400
 800930c:	40007800 	.word	0x40007800
 8009310:	2310      	movs	r3, #16
 8009312:	77fb      	strb	r3, [r7, #31]
 8009314:	e02c      	b.n	8009370 <UART_SetConfig+0x348>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a72      	ldr	r2, [pc, #456]	; (80094e4 <UART_SetConfig+0x4bc>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d125      	bne.n	800936c <UART_SetConfig+0x344>
 8009320:	4b71      	ldr	r3, [pc, #452]	; (80094e8 <UART_SetConfig+0x4c0>)
 8009322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009326:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800932a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800932e:	d017      	beq.n	8009360 <UART_SetConfig+0x338>
 8009330:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009334:	d817      	bhi.n	8009366 <UART_SetConfig+0x33e>
 8009336:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800933a:	d00b      	beq.n	8009354 <UART_SetConfig+0x32c>
 800933c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009340:	d811      	bhi.n	8009366 <UART_SetConfig+0x33e>
 8009342:	2b00      	cmp	r3, #0
 8009344:	d003      	beq.n	800934e <UART_SetConfig+0x326>
 8009346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800934a:	d006      	beq.n	800935a <UART_SetConfig+0x332>
 800934c:	e00b      	b.n	8009366 <UART_SetConfig+0x33e>
 800934e:	2300      	movs	r3, #0
 8009350:	77fb      	strb	r3, [r7, #31]
 8009352:	e00d      	b.n	8009370 <UART_SetConfig+0x348>
 8009354:	2302      	movs	r3, #2
 8009356:	77fb      	strb	r3, [r7, #31]
 8009358:	e00a      	b.n	8009370 <UART_SetConfig+0x348>
 800935a:	2304      	movs	r3, #4
 800935c:	77fb      	strb	r3, [r7, #31]
 800935e:	e007      	b.n	8009370 <UART_SetConfig+0x348>
 8009360:	2308      	movs	r3, #8
 8009362:	77fb      	strb	r3, [r7, #31]
 8009364:	e004      	b.n	8009370 <UART_SetConfig+0x348>
 8009366:	2310      	movs	r3, #16
 8009368:	77fb      	strb	r3, [r7, #31]
 800936a:	e001      	b.n	8009370 <UART_SetConfig+0x348>
 800936c:	2310      	movs	r3, #16
 800936e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	69db      	ldr	r3, [r3, #28]
 8009374:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009378:	d15b      	bne.n	8009432 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800937a:	7ffb      	ldrb	r3, [r7, #31]
 800937c:	2b08      	cmp	r3, #8
 800937e:	d828      	bhi.n	80093d2 <UART_SetConfig+0x3aa>
 8009380:	a201      	add	r2, pc, #4	; (adr r2, 8009388 <UART_SetConfig+0x360>)
 8009382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009386:	bf00      	nop
 8009388:	080093ad 	.word	0x080093ad
 800938c:	080093b5 	.word	0x080093b5
 8009390:	080093bd 	.word	0x080093bd
 8009394:	080093d3 	.word	0x080093d3
 8009398:	080093c3 	.word	0x080093c3
 800939c:	080093d3 	.word	0x080093d3
 80093a0:	080093d3 	.word	0x080093d3
 80093a4:	080093d3 	.word	0x080093d3
 80093a8:	080093cb 	.word	0x080093cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ac:	f7fd fc20 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 80093b0:	61b8      	str	r0, [r7, #24]
        break;
 80093b2:	e013      	b.n	80093dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093b4:	f7fd fc30 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 80093b8:	61b8      	str	r0, [r7, #24]
        break;
 80093ba:	e00f      	b.n	80093dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093bc:	4b4b      	ldr	r3, [pc, #300]	; (80094ec <UART_SetConfig+0x4c4>)
 80093be:	61bb      	str	r3, [r7, #24]
        break;
 80093c0:	e00c      	b.n	80093dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093c2:	f7fd fb03 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 80093c6:	61b8      	str	r0, [r7, #24]
        break;
 80093c8:	e008      	b.n	80093dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80093ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80093ce:	61bb      	str	r3, [r7, #24]
        break;
 80093d0:	e004      	b.n	80093dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80093d2:	2300      	movs	r3, #0
 80093d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80093d6:	2301      	movs	r3, #1
 80093d8:	77bb      	strb	r3, [r7, #30]
        break;
 80093da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d074      	beq.n	80094cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	005a      	lsls	r2, r3, #1
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	085b      	lsrs	r3, r3, #1
 80093ec:	441a      	add	r2, r3
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80093f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f8:	693b      	ldr	r3, [r7, #16]
 80093fa:	2b0f      	cmp	r3, #15
 80093fc:	d916      	bls.n	800942c <UART_SetConfig+0x404>
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009404:	d212      	bcs.n	800942c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009406:	693b      	ldr	r3, [r7, #16]
 8009408:	b29b      	uxth	r3, r3
 800940a:	f023 030f 	bic.w	r3, r3, #15
 800940e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	085b      	lsrs	r3, r3, #1
 8009414:	b29b      	uxth	r3, r3
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	b29a      	uxth	r2, r3
 800941c:	89fb      	ldrh	r3, [r7, #14]
 800941e:	4313      	orrs	r3, r2
 8009420:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	89fa      	ldrh	r2, [r7, #14]
 8009428:	60da      	str	r2, [r3, #12]
 800942a:	e04f      	b.n	80094cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800942c:	2301      	movs	r3, #1
 800942e:	77bb      	strb	r3, [r7, #30]
 8009430:	e04c      	b.n	80094cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009432:	7ffb      	ldrb	r3, [r7, #31]
 8009434:	2b08      	cmp	r3, #8
 8009436:	d828      	bhi.n	800948a <UART_SetConfig+0x462>
 8009438:	a201      	add	r2, pc, #4	; (adr r2, 8009440 <UART_SetConfig+0x418>)
 800943a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800943e:	bf00      	nop
 8009440:	08009465 	.word	0x08009465
 8009444:	0800946d 	.word	0x0800946d
 8009448:	08009475 	.word	0x08009475
 800944c:	0800948b 	.word	0x0800948b
 8009450:	0800947b 	.word	0x0800947b
 8009454:	0800948b 	.word	0x0800948b
 8009458:	0800948b 	.word	0x0800948b
 800945c:	0800948b 	.word	0x0800948b
 8009460:	08009483 	.word	0x08009483
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009464:	f7fd fbc4 	bl	8006bf0 <HAL_RCC_GetPCLK1Freq>
 8009468:	61b8      	str	r0, [r7, #24]
        break;
 800946a:	e013      	b.n	8009494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800946c:	f7fd fbd4 	bl	8006c18 <HAL_RCC_GetPCLK2Freq>
 8009470:	61b8      	str	r0, [r7, #24]
        break;
 8009472:	e00f      	b.n	8009494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009474:	4b1d      	ldr	r3, [pc, #116]	; (80094ec <UART_SetConfig+0x4c4>)
 8009476:	61bb      	str	r3, [r7, #24]
        break;
 8009478:	e00c      	b.n	8009494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800947a:	f7fd faa7 	bl	80069cc <HAL_RCC_GetSysClockFreq>
 800947e:	61b8      	str	r0, [r7, #24]
        break;
 8009480:	e008      	b.n	8009494 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009482:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009486:	61bb      	str	r3, [r7, #24]
        break;
 8009488:	e004      	b.n	8009494 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800948a:	2300      	movs	r3, #0
 800948c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	77bb      	strb	r3, [r7, #30]
        break;
 8009492:	bf00      	nop
    }

    if (pclk != 0U)
 8009494:	69bb      	ldr	r3, [r7, #24]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d018      	beq.n	80094cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	085a      	lsrs	r2, r3, #1
 80094a0:	69bb      	ldr	r3, [r7, #24]
 80094a2:	441a      	add	r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	2b0f      	cmp	r3, #15
 80094b2:	d909      	bls.n	80094c8 <UART_SetConfig+0x4a0>
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094ba:	d205      	bcs.n	80094c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	b29a      	uxth	r2, r3
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	60da      	str	r2, [r3, #12]
 80094c6:	e001      	b.n	80094cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2200      	movs	r2, #0
 80094d0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2200      	movs	r2, #0
 80094d6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80094d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80094da:	4618      	mov	r0, r3
 80094dc:	3720      	adds	r7, #32
 80094de:	46bd      	mov	sp, r7
 80094e0:	bd80      	pop	{r7, pc}
 80094e2:	bf00      	nop
 80094e4:	40007c00 	.word	0x40007c00
 80094e8:	40023800 	.word	0x40023800
 80094ec:	00f42400 	.word	0x00f42400

080094f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80094f0:	b480      	push	{r7}
 80094f2:	b083      	sub	sp, #12
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094fc:	f003 0301 	and.w	r3, r3, #1
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00a      	beq.n	800951a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	430a      	orrs	r2, r1
 8009518:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951e:	f003 0302 	and.w	r3, r3, #2
 8009522:	2b00      	cmp	r3, #0
 8009524:	d00a      	beq.n	800953c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	685b      	ldr	r3, [r3, #4]
 800952c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	430a      	orrs	r2, r1
 800953a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009540:	f003 0304 	and.w	r3, r3, #4
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	685b      	ldr	r3, [r3, #4]
 800954e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	430a      	orrs	r2, r1
 800955c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	f003 0308 	and.w	r3, r3, #8
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	430a      	orrs	r2, r1
 800957e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009584:	f003 0310 	and.w	r3, r3, #16
 8009588:	2b00      	cmp	r3, #0
 800958a:	d00a      	beq.n	80095a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	689b      	ldr	r3, [r3, #8]
 8009592:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	430a      	orrs	r2, r1
 80095a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d00a      	beq.n	80095c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	689b      	ldr	r3, [r3, #8]
 80095b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	430a      	orrs	r2, r1
 80095c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d01a      	beq.n	8009606 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	685b      	ldr	r3, [r3, #4]
 80095d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	430a      	orrs	r2, r1
 80095e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80095ee:	d10a      	bne.n	8009606 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	685b      	ldr	r3, [r3, #4]
 80095f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	430a      	orrs	r2, r1
 8009604:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800960e:	2b00      	cmp	r3, #0
 8009610:	d00a      	beq.n	8009628 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	685b      	ldr	r3, [r3, #4]
 8009618:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	430a      	orrs	r2, r1
 8009626:	605a      	str	r2, [r3, #4]
  }
}
 8009628:	bf00      	nop
 800962a:	370c      	adds	r7, #12
 800962c:	46bd      	mov	sp, r7
 800962e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009632:	4770      	bx	lr

08009634 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009634:	b580      	push	{r7, lr}
 8009636:	b086      	sub	sp, #24
 8009638:	af02      	add	r7, sp, #8
 800963a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2200      	movs	r2, #0
 8009640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009644:	f7fb fb34 	bl	8004cb0 <HAL_GetTick>
 8009648:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f003 0308 	and.w	r3, r3, #8
 8009654:	2b08      	cmp	r3, #8
 8009656:	d10e      	bne.n	8009676 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009658:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800965c:	9300      	str	r3, [sp, #0]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	2200      	movs	r2, #0
 8009662:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f817 	bl	800969a <UART_WaitOnFlagUntilTimeout>
 800966c:	4603      	mov	r3, r0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d001      	beq.n	8009676 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e00d      	b.n	8009692 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	2220      	movs	r2, #32
 800967a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2200      	movs	r2, #0
 800968c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b09c      	sub	sp, #112	; 0x70
 800969e:	af00      	add	r7, sp, #0
 80096a0:	60f8      	str	r0, [r7, #12]
 80096a2:	60b9      	str	r1, [r7, #8]
 80096a4:	603b      	str	r3, [r7, #0]
 80096a6:	4613      	mov	r3, r2
 80096a8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096aa:	e0a5      	b.n	80097f8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096b2:	f000 80a1 	beq.w	80097f8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096b6:	f7fb fafb 	bl	8004cb0 <HAL_GetTick>
 80096ba:	4602      	mov	r2, r0
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	1ad3      	subs	r3, r2, r3
 80096c0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d302      	bcc.n	80096cc <UART_WaitOnFlagUntilTimeout+0x32>
 80096c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d13e      	bne.n	800974a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096d4:	e853 3f00 	ldrex	r3, [r3]
 80096d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096dc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80096e0:	667b      	str	r3, [r7, #100]	; 0x64
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	461a      	mov	r2, r3
 80096e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80096ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 80096ec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80096f0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80096f2:	e841 2300 	strex	r3, r2, [r1]
 80096f6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80096f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d1e6      	bne.n	80096cc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	3308      	adds	r3, #8
 8009704:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009708:	e853 3f00 	ldrex	r3, [r3]
 800970c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800970e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009710:	f023 0301 	bic.w	r3, r3, #1
 8009714:	663b      	str	r3, [r7, #96]	; 0x60
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	3308      	adds	r3, #8
 800971c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800971e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009720:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009722:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009726:	e841 2300 	strex	r3, r2, [r1]
 800972a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800972c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800972e:	2b00      	cmp	r3, #0
 8009730:	d1e5      	bne.n	80096fe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2220      	movs	r2, #32
 8009736:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2220      	movs	r2, #32
 800973c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009746:	2303      	movs	r3, #3
 8009748:	e067      	b.n	800981a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f003 0304 	and.w	r3, r3, #4
 8009754:	2b00      	cmp	r3, #0
 8009756:	d04f      	beq.n	80097f8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	69db      	ldr	r3, [r3, #28]
 800975e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009762:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009766:	d147      	bne.n	80097f8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009770:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800977a:	e853 3f00 	ldrex	r3, [r3]
 800977e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009782:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009786:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	461a      	mov	r2, r3
 800978e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009790:	637b      	str	r3, [r7, #52]	; 0x34
 8009792:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009794:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009796:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009798:	e841 2300 	strex	r3, r2, [r1]
 800979c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800979e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e6      	bne.n	8009772 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	3308      	adds	r3, #8
 80097aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ac:	697b      	ldr	r3, [r7, #20]
 80097ae:	e853 3f00 	ldrex	r3, [r3]
 80097b2:	613b      	str	r3, [r7, #16]
   return(result);
 80097b4:	693b      	ldr	r3, [r7, #16]
 80097b6:	f023 0301 	bic.w	r3, r3, #1
 80097ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	3308      	adds	r3, #8
 80097c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80097c4:	623a      	str	r2, [r7, #32]
 80097c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c8:	69f9      	ldr	r1, [r7, #28]
 80097ca:	6a3a      	ldr	r2, [r7, #32]
 80097cc:	e841 2300 	strex	r3, r2, [r1]
 80097d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80097d2:	69bb      	ldr	r3, [r7, #24]
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d1e5      	bne.n	80097a4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2220      	movs	r2, #32
 80097dc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	2220      	movs	r2, #32
 80097e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	2220      	movs	r2, #32
 80097e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80097f4:	2303      	movs	r3, #3
 80097f6:	e010      	b.n	800981a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	69da      	ldr	r2, [r3, #28]
 80097fe:	68bb      	ldr	r3, [r7, #8]
 8009800:	4013      	ands	r3, r2
 8009802:	68ba      	ldr	r2, [r7, #8]
 8009804:	429a      	cmp	r2, r3
 8009806:	bf0c      	ite	eq
 8009808:	2301      	moveq	r3, #1
 800980a:	2300      	movne	r3, #0
 800980c:	b2db      	uxtb	r3, r3
 800980e:	461a      	mov	r2, r3
 8009810:	79fb      	ldrb	r3, [r7, #7]
 8009812:	429a      	cmp	r2, r3
 8009814:	f43f af4a 	beq.w	80096ac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3770      	adds	r7, #112	; 0x70
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009822:	b480      	push	{r7}
 8009824:	b095      	sub	sp, #84	; 0x54
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009832:	e853 3f00 	ldrex	r3, [r3]
 8009836:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800983e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	461a      	mov	r2, r3
 8009846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009848:	643b      	str	r3, [r7, #64]	; 0x40
 800984a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800984e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009850:	e841 2300 	strex	r3, r2, [r1]
 8009854:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009858:	2b00      	cmp	r3, #0
 800985a:	d1e6      	bne.n	800982a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	3308      	adds	r3, #8
 8009862:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009864:	6a3b      	ldr	r3, [r7, #32]
 8009866:	e853 3f00 	ldrex	r3, [r3]
 800986a:	61fb      	str	r3, [r7, #28]
   return(result);
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f023 0301 	bic.w	r3, r3, #1
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	3308      	adds	r3, #8
 800987a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800987c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800987e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009880:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009882:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009884:	e841 2300 	strex	r3, r2, [r1]
 8009888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800988a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800988c:	2b00      	cmp	r3, #0
 800988e:	d1e5      	bne.n	800985c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009894:	2b01      	cmp	r3, #1
 8009896:	d118      	bne.n	80098ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	e853 3f00 	ldrex	r3, [r3]
 80098a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	f023 0310 	bic.w	r3, r3, #16
 80098ac:	647b      	str	r3, [r7, #68]	; 0x44
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	461a      	mov	r2, r3
 80098b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80098b6:	61bb      	str	r3, [r7, #24]
 80098b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098ba:	6979      	ldr	r1, [r7, #20]
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	e841 2300 	strex	r3, r2, [r1]
 80098c2:	613b      	str	r3, [r7, #16]
   return(result);
 80098c4:	693b      	ldr	r3, [r7, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d1e6      	bne.n	8009898 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2220      	movs	r2, #32
 80098ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2200      	movs	r2, #0
 80098d4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2200      	movs	r2, #0
 80098da:	665a      	str	r2, [r3, #100]	; 0x64
}
 80098dc:	bf00      	nop
 80098de:	3754      	adds	r7, #84	; 0x54
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b084      	sub	sp, #16
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	2200      	movs	r2, #0
 80098fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009906:	68f8      	ldr	r0, [r7, #12]
 8009908:	f7ff fb78 	bl	8008ffc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800990c:	bf00      	nop
 800990e:	3710      	adds	r7, #16
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	60bb      	str	r3, [r7, #8]
   return(result);
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009930:	61fb      	str	r3, [r7, #28]
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	61bb      	str	r3, [r7, #24]
 800993c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	6979      	ldr	r1, [r7, #20]
 8009940:	69ba      	ldr	r2, [r7, #24]
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	613b      	str	r3, [r7, #16]
   return(result);
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e6      	bne.n	800991c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2220      	movs	r2, #32
 8009952:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2200      	movs	r2, #0
 8009958:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f7ff fb44 	bl	8008fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009960:	bf00      	nop
 8009962:	3720      	adds	r7, #32
 8009964:	46bd      	mov	sp, r7
 8009966:	bd80      	pop	{r7, pc}

08009968 <__errno>:
 8009968:	4b01      	ldr	r3, [pc, #4]	; (8009970 <__errno+0x8>)
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	4770      	bx	lr
 800996e:	bf00      	nop
 8009970:	20000014 	.word	0x20000014

08009974 <__libc_init_array>:
 8009974:	b570      	push	{r4, r5, r6, lr}
 8009976:	4d0d      	ldr	r5, [pc, #52]	; (80099ac <__libc_init_array+0x38>)
 8009978:	4c0d      	ldr	r4, [pc, #52]	; (80099b0 <__libc_init_array+0x3c>)
 800997a:	1b64      	subs	r4, r4, r5
 800997c:	10a4      	asrs	r4, r4, #2
 800997e:	2600      	movs	r6, #0
 8009980:	42a6      	cmp	r6, r4
 8009982:	d109      	bne.n	8009998 <__libc_init_array+0x24>
 8009984:	4d0b      	ldr	r5, [pc, #44]	; (80099b4 <__libc_init_array+0x40>)
 8009986:	4c0c      	ldr	r4, [pc, #48]	; (80099b8 <__libc_init_array+0x44>)
 8009988:	f000 ffae 	bl	800a8e8 <_init>
 800998c:	1b64      	subs	r4, r4, r5
 800998e:	10a4      	asrs	r4, r4, #2
 8009990:	2600      	movs	r6, #0
 8009992:	42a6      	cmp	r6, r4
 8009994:	d105      	bne.n	80099a2 <__libc_init_array+0x2e>
 8009996:	bd70      	pop	{r4, r5, r6, pc}
 8009998:	f855 3b04 	ldr.w	r3, [r5], #4
 800999c:	4798      	blx	r3
 800999e:	3601      	adds	r6, #1
 80099a0:	e7ee      	b.n	8009980 <__libc_init_array+0xc>
 80099a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80099a6:	4798      	blx	r3
 80099a8:	3601      	adds	r6, #1
 80099aa:	e7f2      	b.n	8009992 <__libc_init_array+0x1e>
 80099ac:	0800aa20 	.word	0x0800aa20
 80099b0:	0800aa20 	.word	0x0800aa20
 80099b4:	0800aa20 	.word	0x0800aa20
 80099b8:	0800aa24 	.word	0x0800aa24

080099bc <memset>:
 80099bc:	4402      	add	r2, r0
 80099be:	4603      	mov	r3, r0
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d100      	bne.n	80099c6 <memset+0xa>
 80099c4:	4770      	bx	lr
 80099c6:	f803 1b01 	strb.w	r1, [r3], #1
 80099ca:	e7f9      	b.n	80099c0 <memset+0x4>

080099cc <iprintf>:
 80099cc:	b40f      	push	{r0, r1, r2, r3}
 80099ce:	4b0a      	ldr	r3, [pc, #40]	; (80099f8 <iprintf+0x2c>)
 80099d0:	b513      	push	{r0, r1, r4, lr}
 80099d2:	681c      	ldr	r4, [r3, #0]
 80099d4:	b124      	cbz	r4, 80099e0 <iprintf+0x14>
 80099d6:	69a3      	ldr	r3, [r4, #24]
 80099d8:	b913      	cbnz	r3, 80099e0 <iprintf+0x14>
 80099da:	4620      	mov	r0, r4
 80099dc:	f000 f866 	bl	8009aac <__sinit>
 80099e0:	ab05      	add	r3, sp, #20
 80099e2:	9a04      	ldr	r2, [sp, #16]
 80099e4:	68a1      	ldr	r1, [r4, #8]
 80099e6:	9301      	str	r3, [sp, #4]
 80099e8:	4620      	mov	r0, r4
 80099ea:	f000 f9bd 	bl	8009d68 <_vfiprintf_r>
 80099ee:	b002      	add	sp, #8
 80099f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80099f4:	b004      	add	sp, #16
 80099f6:	4770      	bx	lr
 80099f8:	20000014 	.word	0x20000014

080099fc <std>:
 80099fc:	2300      	movs	r3, #0
 80099fe:	b510      	push	{r4, lr}
 8009a00:	4604      	mov	r4, r0
 8009a02:	e9c0 3300 	strd	r3, r3, [r0]
 8009a06:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009a0a:	6083      	str	r3, [r0, #8]
 8009a0c:	8181      	strh	r1, [r0, #12]
 8009a0e:	6643      	str	r3, [r0, #100]	; 0x64
 8009a10:	81c2      	strh	r2, [r0, #14]
 8009a12:	6183      	str	r3, [r0, #24]
 8009a14:	4619      	mov	r1, r3
 8009a16:	2208      	movs	r2, #8
 8009a18:	305c      	adds	r0, #92	; 0x5c
 8009a1a:	f7ff ffcf 	bl	80099bc <memset>
 8009a1e:	4b05      	ldr	r3, [pc, #20]	; (8009a34 <std+0x38>)
 8009a20:	6263      	str	r3, [r4, #36]	; 0x24
 8009a22:	4b05      	ldr	r3, [pc, #20]	; (8009a38 <std+0x3c>)
 8009a24:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a26:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <std+0x40>)
 8009a28:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a2a:	4b05      	ldr	r3, [pc, #20]	; (8009a40 <std+0x44>)
 8009a2c:	6224      	str	r4, [r4, #32]
 8009a2e:	6323      	str	r3, [r4, #48]	; 0x30
 8009a30:	bd10      	pop	{r4, pc}
 8009a32:	bf00      	nop
 8009a34:	0800a311 	.word	0x0800a311
 8009a38:	0800a333 	.word	0x0800a333
 8009a3c:	0800a36b 	.word	0x0800a36b
 8009a40:	0800a38f 	.word	0x0800a38f

08009a44 <_cleanup_r>:
 8009a44:	4901      	ldr	r1, [pc, #4]	; (8009a4c <_cleanup_r+0x8>)
 8009a46:	f000 b8af 	b.w	8009ba8 <_fwalk_reent>
 8009a4a:	bf00      	nop
 8009a4c:	0800a669 	.word	0x0800a669

08009a50 <__sfmoreglue>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	2268      	movs	r2, #104	; 0x68
 8009a54:	1e4d      	subs	r5, r1, #1
 8009a56:	4355      	muls	r5, r2
 8009a58:	460e      	mov	r6, r1
 8009a5a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009a5e:	f000 f8e5 	bl	8009c2c <_malloc_r>
 8009a62:	4604      	mov	r4, r0
 8009a64:	b140      	cbz	r0, 8009a78 <__sfmoreglue+0x28>
 8009a66:	2100      	movs	r1, #0
 8009a68:	e9c0 1600 	strd	r1, r6, [r0]
 8009a6c:	300c      	adds	r0, #12
 8009a6e:	60a0      	str	r0, [r4, #8]
 8009a70:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009a74:	f7ff ffa2 	bl	80099bc <memset>
 8009a78:	4620      	mov	r0, r4
 8009a7a:	bd70      	pop	{r4, r5, r6, pc}

08009a7c <__sfp_lock_acquire>:
 8009a7c:	4801      	ldr	r0, [pc, #4]	; (8009a84 <__sfp_lock_acquire+0x8>)
 8009a7e:	f000 b8b3 	b.w	8009be8 <__retarget_lock_acquire_recursive>
 8009a82:	bf00      	nop
 8009a84:	2000052d 	.word	0x2000052d

08009a88 <__sfp_lock_release>:
 8009a88:	4801      	ldr	r0, [pc, #4]	; (8009a90 <__sfp_lock_release+0x8>)
 8009a8a:	f000 b8ae 	b.w	8009bea <__retarget_lock_release_recursive>
 8009a8e:	bf00      	nop
 8009a90:	2000052d 	.word	0x2000052d

08009a94 <__sinit_lock_acquire>:
 8009a94:	4801      	ldr	r0, [pc, #4]	; (8009a9c <__sinit_lock_acquire+0x8>)
 8009a96:	f000 b8a7 	b.w	8009be8 <__retarget_lock_acquire_recursive>
 8009a9a:	bf00      	nop
 8009a9c:	2000052e 	.word	0x2000052e

08009aa0 <__sinit_lock_release>:
 8009aa0:	4801      	ldr	r0, [pc, #4]	; (8009aa8 <__sinit_lock_release+0x8>)
 8009aa2:	f000 b8a2 	b.w	8009bea <__retarget_lock_release_recursive>
 8009aa6:	bf00      	nop
 8009aa8:	2000052e 	.word	0x2000052e

08009aac <__sinit>:
 8009aac:	b510      	push	{r4, lr}
 8009aae:	4604      	mov	r4, r0
 8009ab0:	f7ff fff0 	bl	8009a94 <__sinit_lock_acquire>
 8009ab4:	69a3      	ldr	r3, [r4, #24]
 8009ab6:	b11b      	cbz	r3, 8009ac0 <__sinit+0x14>
 8009ab8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009abc:	f7ff bff0 	b.w	8009aa0 <__sinit_lock_release>
 8009ac0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009ac4:	6523      	str	r3, [r4, #80]	; 0x50
 8009ac6:	4b13      	ldr	r3, [pc, #76]	; (8009b14 <__sinit+0x68>)
 8009ac8:	4a13      	ldr	r2, [pc, #76]	; (8009b18 <__sinit+0x6c>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	62a2      	str	r2, [r4, #40]	; 0x28
 8009ace:	42a3      	cmp	r3, r4
 8009ad0:	bf04      	itt	eq
 8009ad2:	2301      	moveq	r3, #1
 8009ad4:	61a3      	streq	r3, [r4, #24]
 8009ad6:	4620      	mov	r0, r4
 8009ad8:	f000 f820 	bl	8009b1c <__sfp>
 8009adc:	6060      	str	r0, [r4, #4]
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 f81c 	bl	8009b1c <__sfp>
 8009ae4:	60a0      	str	r0, [r4, #8]
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 f818 	bl	8009b1c <__sfp>
 8009aec:	2200      	movs	r2, #0
 8009aee:	60e0      	str	r0, [r4, #12]
 8009af0:	2104      	movs	r1, #4
 8009af2:	6860      	ldr	r0, [r4, #4]
 8009af4:	f7ff ff82 	bl	80099fc <std>
 8009af8:	68a0      	ldr	r0, [r4, #8]
 8009afa:	2201      	movs	r2, #1
 8009afc:	2109      	movs	r1, #9
 8009afe:	f7ff ff7d 	bl	80099fc <std>
 8009b02:	68e0      	ldr	r0, [r4, #12]
 8009b04:	2202      	movs	r2, #2
 8009b06:	2112      	movs	r1, #18
 8009b08:	f7ff ff78 	bl	80099fc <std>
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	61a3      	str	r3, [r4, #24]
 8009b10:	e7d2      	b.n	8009ab8 <__sinit+0xc>
 8009b12:	bf00      	nop
 8009b14:	0800a980 	.word	0x0800a980
 8009b18:	08009a45 	.word	0x08009a45

08009b1c <__sfp>:
 8009b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b1e:	4607      	mov	r7, r0
 8009b20:	f7ff ffac 	bl	8009a7c <__sfp_lock_acquire>
 8009b24:	4b1e      	ldr	r3, [pc, #120]	; (8009ba0 <__sfp+0x84>)
 8009b26:	681e      	ldr	r6, [r3, #0]
 8009b28:	69b3      	ldr	r3, [r6, #24]
 8009b2a:	b913      	cbnz	r3, 8009b32 <__sfp+0x16>
 8009b2c:	4630      	mov	r0, r6
 8009b2e:	f7ff ffbd 	bl	8009aac <__sinit>
 8009b32:	3648      	adds	r6, #72	; 0x48
 8009b34:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	d503      	bpl.n	8009b44 <__sfp+0x28>
 8009b3c:	6833      	ldr	r3, [r6, #0]
 8009b3e:	b30b      	cbz	r3, 8009b84 <__sfp+0x68>
 8009b40:	6836      	ldr	r6, [r6, #0]
 8009b42:	e7f7      	b.n	8009b34 <__sfp+0x18>
 8009b44:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009b48:	b9d5      	cbnz	r5, 8009b80 <__sfp+0x64>
 8009b4a:	4b16      	ldr	r3, [pc, #88]	; (8009ba4 <__sfp+0x88>)
 8009b4c:	60e3      	str	r3, [r4, #12]
 8009b4e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009b52:	6665      	str	r5, [r4, #100]	; 0x64
 8009b54:	f000 f847 	bl	8009be6 <__retarget_lock_init_recursive>
 8009b58:	f7ff ff96 	bl	8009a88 <__sfp_lock_release>
 8009b5c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009b60:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009b64:	6025      	str	r5, [r4, #0]
 8009b66:	61a5      	str	r5, [r4, #24]
 8009b68:	2208      	movs	r2, #8
 8009b6a:	4629      	mov	r1, r5
 8009b6c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009b70:	f7ff ff24 	bl	80099bc <memset>
 8009b74:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009b78:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009b80:	3468      	adds	r4, #104	; 0x68
 8009b82:	e7d9      	b.n	8009b38 <__sfp+0x1c>
 8009b84:	2104      	movs	r1, #4
 8009b86:	4638      	mov	r0, r7
 8009b88:	f7ff ff62 	bl	8009a50 <__sfmoreglue>
 8009b8c:	4604      	mov	r4, r0
 8009b8e:	6030      	str	r0, [r6, #0]
 8009b90:	2800      	cmp	r0, #0
 8009b92:	d1d5      	bne.n	8009b40 <__sfp+0x24>
 8009b94:	f7ff ff78 	bl	8009a88 <__sfp_lock_release>
 8009b98:	230c      	movs	r3, #12
 8009b9a:	603b      	str	r3, [r7, #0]
 8009b9c:	e7ee      	b.n	8009b7c <__sfp+0x60>
 8009b9e:	bf00      	nop
 8009ba0:	0800a980 	.word	0x0800a980
 8009ba4:	ffff0001 	.word	0xffff0001

08009ba8 <_fwalk_reent>:
 8009ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bac:	4606      	mov	r6, r0
 8009bae:	4688      	mov	r8, r1
 8009bb0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009bb4:	2700      	movs	r7, #0
 8009bb6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009bba:	f1b9 0901 	subs.w	r9, r9, #1
 8009bbe:	d505      	bpl.n	8009bcc <_fwalk_reent+0x24>
 8009bc0:	6824      	ldr	r4, [r4, #0]
 8009bc2:	2c00      	cmp	r4, #0
 8009bc4:	d1f7      	bne.n	8009bb6 <_fwalk_reent+0xe>
 8009bc6:	4638      	mov	r0, r7
 8009bc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bcc:	89ab      	ldrh	r3, [r5, #12]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d907      	bls.n	8009be2 <_fwalk_reent+0x3a>
 8009bd2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	d003      	beq.n	8009be2 <_fwalk_reent+0x3a>
 8009bda:	4629      	mov	r1, r5
 8009bdc:	4630      	mov	r0, r6
 8009bde:	47c0      	blx	r8
 8009be0:	4307      	orrs	r7, r0
 8009be2:	3568      	adds	r5, #104	; 0x68
 8009be4:	e7e9      	b.n	8009bba <_fwalk_reent+0x12>

08009be6 <__retarget_lock_init_recursive>:
 8009be6:	4770      	bx	lr

08009be8 <__retarget_lock_acquire_recursive>:
 8009be8:	4770      	bx	lr

08009bea <__retarget_lock_release_recursive>:
 8009bea:	4770      	bx	lr

08009bec <sbrk_aligned>:
 8009bec:	b570      	push	{r4, r5, r6, lr}
 8009bee:	4e0e      	ldr	r6, [pc, #56]	; (8009c28 <sbrk_aligned+0x3c>)
 8009bf0:	460c      	mov	r4, r1
 8009bf2:	6831      	ldr	r1, [r6, #0]
 8009bf4:	4605      	mov	r5, r0
 8009bf6:	b911      	cbnz	r1, 8009bfe <sbrk_aligned+0x12>
 8009bf8:	f000 fb7a 	bl	800a2f0 <_sbrk_r>
 8009bfc:	6030      	str	r0, [r6, #0]
 8009bfe:	4621      	mov	r1, r4
 8009c00:	4628      	mov	r0, r5
 8009c02:	f000 fb75 	bl	800a2f0 <_sbrk_r>
 8009c06:	1c43      	adds	r3, r0, #1
 8009c08:	d00a      	beq.n	8009c20 <sbrk_aligned+0x34>
 8009c0a:	1cc4      	adds	r4, r0, #3
 8009c0c:	f024 0403 	bic.w	r4, r4, #3
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d007      	beq.n	8009c24 <sbrk_aligned+0x38>
 8009c14:	1a21      	subs	r1, r4, r0
 8009c16:	4628      	mov	r0, r5
 8009c18:	f000 fb6a 	bl	800a2f0 <_sbrk_r>
 8009c1c:	3001      	adds	r0, #1
 8009c1e:	d101      	bne.n	8009c24 <sbrk_aligned+0x38>
 8009c20:	f04f 34ff 	mov.w	r4, #4294967295
 8009c24:	4620      	mov	r0, r4
 8009c26:	bd70      	pop	{r4, r5, r6, pc}
 8009c28:	20000534 	.word	0x20000534

08009c2c <_malloc_r>:
 8009c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009c30:	1ccd      	adds	r5, r1, #3
 8009c32:	f025 0503 	bic.w	r5, r5, #3
 8009c36:	3508      	adds	r5, #8
 8009c38:	2d0c      	cmp	r5, #12
 8009c3a:	bf38      	it	cc
 8009c3c:	250c      	movcc	r5, #12
 8009c3e:	2d00      	cmp	r5, #0
 8009c40:	4607      	mov	r7, r0
 8009c42:	db01      	blt.n	8009c48 <_malloc_r+0x1c>
 8009c44:	42a9      	cmp	r1, r5
 8009c46:	d905      	bls.n	8009c54 <_malloc_r+0x28>
 8009c48:	230c      	movs	r3, #12
 8009c4a:	603b      	str	r3, [r7, #0]
 8009c4c:	2600      	movs	r6, #0
 8009c4e:	4630      	mov	r0, r6
 8009c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009c54:	4e2e      	ldr	r6, [pc, #184]	; (8009d10 <_malloc_r+0xe4>)
 8009c56:	f000 fdbb 	bl	800a7d0 <__malloc_lock>
 8009c5a:	6833      	ldr	r3, [r6, #0]
 8009c5c:	461c      	mov	r4, r3
 8009c5e:	bb34      	cbnz	r4, 8009cae <_malloc_r+0x82>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4638      	mov	r0, r7
 8009c64:	f7ff ffc2 	bl	8009bec <sbrk_aligned>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	4604      	mov	r4, r0
 8009c6c:	d14d      	bne.n	8009d0a <_malloc_r+0xde>
 8009c6e:	6834      	ldr	r4, [r6, #0]
 8009c70:	4626      	mov	r6, r4
 8009c72:	2e00      	cmp	r6, #0
 8009c74:	d140      	bne.n	8009cf8 <_malloc_r+0xcc>
 8009c76:	6823      	ldr	r3, [r4, #0]
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4638      	mov	r0, r7
 8009c7c:	eb04 0803 	add.w	r8, r4, r3
 8009c80:	f000 fb36 	bl	800a2f0 <_sbrk_r>
 8009c84:	4580      	cmp	r8, r0
 8009c86:	d13a      	bne.n	8009cfe <_malloc_r+0xd2>
 8009c88:	6821      	ldr	r1, [r4, #0]
 8009c8a:	3503      	adds	r5, #3
 8009c8c:	1a6d      	subs	r5, r5, r1
 8009c8e:	f025 0503 	bic.w	r5, r5, #3
 8009c92:	3508      	adds	r5, #8
 8009c94:	2d0c      	cmp	r5, #12
 8009c96:	bf38      	it	cc
 8009c98:	250c      	movcc	r5, #12
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	4638      	mov	r0, r7
 8009c9e:	f7ff ffa5 	bl	8009bec <sbrk_aligned>
 8009ca2:	3001      	adds	r0, #1
 8009ca4:	d02b      	beq.n	8009cfe <_malloc_r+0xd2>
 8009ca6:	6823      	ldr	r3, [r4, #0]
 8009ca8:	442b      	add	r3, r5
 8009caa:	6023      	str	r3, [r4, #0]
 8009cac:	e00e      	b.n	8009ccc <_malloc_r+0xa0>
 8009cae:	6822      	ldr	r2, [r4, #0]
 8009cb0:	1b52      	subs	r2, r2, r5
 8009cb2:	d41e      	bmi.n	8009cf2 <_malloc_r+0xc6>
 8009cb4:	2a0b      	cmp	r2, #11
 8009cb6:	d916      	bls.n	8009ce6 <_malloc_r+0xba>
 8009cb8:	1961      	adds	r1, r4, r5
 8009cba:	42a3      	cmp	r3, r4
 8009cbc:	6025      	str	r5, [r4, #0]
 8009cbe:	bf18      	it	ne
 8009cc0:	6059      	strne	r1, [r3, #4]
 8009cc2:	6863      	ldr	r3, [r4, #4]
 8009cc4:	bf08      	it	eq
 8009cc6:	6031      	streq	r1, [r6, #0]
 8009cc8:	5162      	str	r2, [r4, r5]
 8009cca:	604b      	str	r3, [r1, #4]
 8009ccc:	4638      	mov	r0, r7
 8009cce:	f104 060b 	add.w	r6, r4, #11
 8009cd2:	f000 fd83 	bl	800a7dc <__malloc_unlock>
 8009cd6:	f026 0607 	bic.w	r6, r6, #7
 8009cda:	1d23      	adds	r3, r4, #4
 8009cdc:	1af2      	subs	r2, r6, r3
 8009cde:	d0b6      	beq.n	8009c4e <_malloc_r+0x22>
 8009ce0:	1b9b      	subs	r3, r3, r6
 8009ce2:	50a3      	str	r3, [r4, r2]
 8009ce4:	e7b3      	b.n	8009c4e <_malloc_r+0x22>
 8009ce6:	6862      	ldr	r2, [r4, #4]
 8009ce8:	42a3      	cmp	r3, r4
 8009cea:	bf0c      	ite	eq
 8009cec:	6032      	streq	r2, [r6, #0]
 8009cee:	605a      	strne	r2, [r3, #4]
 8009cf0:	e7ec      	b.n	8009ccc <_malloc_r+0xa0>
 8009cf2:	4623      	mov	r3, r4
 8009cf4:	6864      	ldr	r4, [r4, #4]
 8009cf6:	e7b2      	b.n	8009c5e <_malloc_r+0x32>
 8009cf8:	4634      	mov	r4, r6
 8009cfa:	6876      	ldr	r6, [r6, #4]
 8009cfc:	e7b9      	b.n	8009c72 <_malloc_r+0x46>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	603b      	str	r3, [r7, #0]
 8009d02:	4638      	mov	r0, r7
 8009d04:	f000 fd6a 	bl	800a7dc <__malloc_unlock>
 8009d08:	e7a1      	b.n	8009c4e <_malloc_r+0x22>
 8009d0a:	6025      	str	r5, [r4, #0]
 8009d0c:	e7de      	b.n	8009ccc <_malloc_r+0xa0>
 8009d0e:	bf00      	nop
 8009d10:	20000530 	.word	0x20000530

08009d14 <__sfputc_r>:
 8009d14:	6893      	ldr	r3, [r2, #8]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	b410      	push	{r4}
 8009d1c:	6093      	str	r3, [r2, #8]
 8009d1e:	da08      	bge.n	8009d32 <__sfputc_r+0x1e>
 8009d20:	6994      	ldr	r4, [r2, #24]
 8009d22:	42a3      	cmp	r3, r4
 8009d24:	db01      	blt.n	8009d2a <__sfputc_r+0x16>
 8009d26:	290a      	cmp	r1, #10
 8009d28:	d103      	bne.n	8009d32 <__sfputc_r+0x1e>
 8009d2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d2e:	f000 bb33 	b.w	800a398 <__swbuf_r>
 8009d32:	6813      	ldr	r3, [r2, #0]
 8009d34:	1c58      	adds	r0, r3, #1
 8009d36:	6010      	str	r0, [r2, #0]
 8009d38:	7019      	strb	r1, [r3, #0]
 8009d3a:	4608      	mov	r0, r1
 8009d3c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009d40:	4770      	bx	lr

08009d42 <__sfputs_r>:
 8009d42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d44:	4606      	mov	r6, r0
 8009d46:	460f      	mov	r7, r1
 8009d48:	4614      	mov	r4, r2
 8009d4a:	18d5      	adds	r5, r2, r3
 8009d4c:	42ac      	cmp	r4, r5
 8009d4e:	d101      	bne.n	8009d54 <__sfputs_r+0x12>
 8009d50:	2000      	movs	r0, #0
 8009d52:	e007      	b.n	8009d64 <__sfputs_r+0x22>
 8009d54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d58:	463a      	mov	r2, r7
 8009d5a:	4630      	mov	r0, r6
 8009d5c:	f7ff ffda 	bl	8009d14 <__sfputc_r>
 8009d60:	1c43      	adds	r3, r0, #1
 8009d62:	d1f3      	bne.n	8009d4c <__sfputs_r+0xa>
 8009d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009d68 <_vfiprintf_r>:
 8009d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d6c:	460d      	mov	r5, r1
 8009d6e:	b09d      	sub	sp, #116	; 0x74
 8009d70:	4614      	mov	r4, r2
 8009d72:	4698      	mov	r8, r3
 8009d74:	4606      	mov	r6, r0
 8009d76:	b118      	cbz	r0, 8009d80 <_vfiprintf_r+0x18>
 8009d78:	6983      	ldr	r3, [r0, #24]
 8009d7a:	b90b      	cbnz	r3, 8009d80 <_vfiprintf_r+0x18>
 8009d7c:	f7ff fe96 	bl	8009aac <__sinit>
 8009d80:	4b89      	ldr	r3, [pc, #548]	; (8009fa8 <_vfiprintf_r+0x240>)
 8009d82:	429d      	cmp	r5, r3
 8009d84:	d11b      	bne.n	8009dbe <_vfiprintf_r+0x56>
 8009d86:	6875      	ldr	r5, [r6, #4]
 8009d88:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d8a:	07d9      	lsls	r1, r3, #31
 8009d8c:	d405      	bmi.n	8009d9a <_vfiprintf_r+0x32>
 8009d8e:	89ab      	ldrh	r3, [r5, #12]
 8009d90:	059a      	lsls	r2, r3, #22
 8009d92:	d402      	bmi.n	8009d9a <_vfiprintf_r+0x32>
 8009d94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d96:	f7ff ff27 	bl	8009be8 <__retarget_lock_acquire_recursive>
 8009d9a:	89ab      	ldrh	r3, [r5, #12]
 8009d9c:	071b      	lsls	r3, r3, #28
 8009d9e:	d501      	bpl.n	8009da4 <_vfiprintf_r+0x3c>
 8009da0:	692b      	ldr	r3, [r5, #16]
 8009da2:	b9eb      	cbnz	r3, 8009de0 <_vfiprintf_r+0x78>
 8009da4:	4629      	mov	r1, r5
 8009da6:	4630      	mov	r0, r6
 8009da8:	f000 fb5a 	bl	800a460 <__swsetup_r>
 8009dac:	b1c0      	cbz	r0, 8009de0 <_vfiprintf_r+0x78>
 8009dae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009db0:	07dc      	lsls	r4, r3, #31
 8009db2:	d50e      	bpl.n	8009dd2 <_vfiprintf_r+0x6a>
 8009db4:	f04f 30ff 	mov.w	r0, #4294967295
 8009db8:	b01d      	add	sp, #116	; 0x74
 8009dba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dbe:	4b7b      	ldr	r3, [pc, #492]	; (8009fac <_vfiprintf_r+0x244>)
 8009dc0:	429d      	cmp	r5, r3
 8009dc2:	d101      	bne.n	8009dc8 <_vfiprintf_r+0x60>
 8009dc4:	68b5      	ldr	r5, [r6, #8]
 8009dc6:	e7df      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009dc8:	4b79      	ldr	r3, [pc, #484]	; (8009fb0 <_vfiprintf_r+0x248>)
 8009dca:	429d      	cmp	r5, r3
 8009dcc:	bf08      	it	eq
 8009dce:	68f5      	ldreq	r5, [r6, #12]
 8009dd0:	e7da      	b.n	8009d88 <_vfiprintf_r+0x20>
 8009dd2:	89ab      	ldrh	r3, [r5, #12]
 8009dd4:	0598      	lsls	r0, r3, #22
 8009dd6:	d4ed      	bmi.n	8009db4 <_vfiprintf_r+0x4c>
 8009dd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009dda:	f7ff ff06 	bl	8009bea <__retarget_lock_release_recursive>
 8009dde:	e7e9      	b.n	8009db4 <_vfiprintf_r+0x4c>
 8009de0:	2300      	movs	r3, #0
 8009de2:	9309      	str	r3, [sp, #36]	; 0x24
 8009de4:	2320      	movs	r3, #32
 8009de6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dea:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dee:	2330      	movs	r3, #48	; 0x30
 8009df0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009fb4 <_vfiprintf_r+0x24c>
 8009df4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009df8:	f04f 0901 	mov.w	r9, #1
 8009dfc:	4623      	mov	r3, r4
 8009dfe:	469a      	mov	sl, r3
 8009e00:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e04:	b10a      	cbz	r2, 8009e0a <_vfiprintf_r+0xa2>
 8009e06:	2a25      	cmp	r2, #37	; 0x25
 8009e08:	d1f9      	bne.n	8009dfe <_vfiprintf_r+0x96>
 8009e0a:	ebba 0b04 	subs.w	fp, sl, r4
 8009e0e:	d00b      	beq.n	8009e28 <_vfiprintf_r+0xc0>
 8009e10:	465b      	mov	r3, fp
 8009e12:	4622      	mov	r2, r4
 8009e14:	4629      	mov	r1, r5
 8009e16:	4630      	mov	r0, r6
 8009e18:	f7ff ff93 	bl	8009d42 <__sfputs_r>
 8009e1c:	3001      	adds	r0, #1
 8009e1e:	f000 80aa 	beq.w	8009f76 <_vfiprintf_r+0x20e>
 8009e22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e24:	445a      	add	r2, fp
 8009e26:	9209      	str	r2, [sp, #36]	; 0x24
 8009e28:	f89a 3000 	ldrb.w	r3, [sl]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	f000 80a2 	beq.w	8009f76 <_vfiprintf_r+0x20e>
 8009e32:	2300      	movs	r3, #0
 8009e34:	f04f 32ff 	mov.w	r2, #4294967295
 8009e38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e3c:	f10a 0a01 	add.w	sl, sl, #1
 8009e40:	9304      	str	r3, [sp, #16]
 8009e42:	9307      	str	r3, [sp, #28]
 8009e44:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e48:	931a      	str	r3, [sp, #104]	; 0x68
 8009e4a:	4654      	mov	r4, sl
 8009e4c:	2205      	movs	r2, #5
 8009e4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e52:	4858      	ldr	r0, [pc, #352]	; (8009fb4 <_vfiprintf_r+0x24c>)
 8009e54:	f7f6 f9dc 	bl	8000210 <memchr>
 8009e58:	9a04      	ldr	r2, [sp, #16]
 8009e5a:	b9d8      	cbnz	r0, 8009e94 <_vfiprintf_r+0x12c>
 8009e5c:	06d1      	lsls	r1, r2, #27
 8009e5e:	bf44      	itt	mi
 8009e60:	2320      	movmi	r3, #32
 8009e62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e66:	0713      	lsls	r3, r2, #28
 8009e68:	bf44      	itt	mi
 8009e6a:	232b      	movmi	r3, #43	; 0x2b
 8009e6c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e70:	f89a 3000 	ldrb.w	r3, [sl]
 8009e74:	2b2a      	cmp	r3, #42	; 0x2a
 8009e76:	d015      	beq.n	8009ea4 <_vfiprintf_r+0x13c>
 8009e78:	9a07      	ldr	r2, [sp, #28]
 8009e7a:	4654      	mov	r4, sl
 8009e7c:	2000      	movs	r0, #0
 8009e7e:	f04f 0c0a 	mov.w	ip, #10
 8009e82:	4621      	mov	r1, r4
 8009e84:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e88:	3b30      	subs	r3, #48	; 0x30
 8009e8a:	2b09      	cmp	r3, #9
 8009e8c:	d94e      	bls.n	8009f2c <_vfiprintf_r+0x1c4>
 8009e8e:	b1b0      	cbz	r0, 8009ebe <_vfiprintf_r+0x156>
 8009e90:	9207      	str	r2, [sp, #28]
 8009e92:	e014      	b.n	8009ebe <_vfiprintf_r+0x156>
 8009e94:	eba0 0308 	sub.w	r3, r0, r8
 8009e98:	fa09 f303 	lsl.w	r3, r9, r3
 8009e9c:	4313      	orrs	r3, r2
 8009e9e:	9304      	str	r3, [sp, #16]
 8009ea0:	46a2      	mov	sl, r4
 8009ea2:	e7d2      	b.n	8009e4a <_vfiprintf_r+0xe2>
 8009ea4:	9b03      	ldr	r3, [sp, #12]
 8009ea6:	1d19      	adds	r1, r3, #4
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	9103      	str	r1, [sp, #12]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	bfbb      	ittet	lt
 8009eb0:	425b      	neglt	r3, r3
 8009eb2:	f042 0202 	orrlt.w	r2, r2, #2
 8009eb6:	9307      	strge	r3, [sp, #28]
 8009eb8:	9307      	strlt	r3, [sp, #28]
 8009eba:	bfb8      	it	lt
 8009ebc:	9204      	strlt	r2, [sp, #16]
 8009ebe:	7823      	ldrb	r3, [r4, #0]
 8009ec0:	2b2e      	cmp	r3, #46	; 0x2e
 8009ec2:	d10c      	bne.n	8009ede <_vfiprintf_r+0x176>
 8009ec4:	7863      	ldrb	r3, [r4, #1]
 8009ec6:	2b2a      	cmp	r3, #42	; 0x2a
 8009ec8:	d135      	bne.n	8009f36 <_vfiprintf_r+0x1ce>
 8009eca:	9b03      	ldr	r3, [sp, #12]
 8009ecc:	1d1a      	adds	r2, r3, #4
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	9203      	str	r2, [sp, #12]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	bfb8      	it	lt
 8009ed6:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eda:	3402      	adds	r4, #2
 8009edc:	9305      	str	r3, [sp, #20]
 8009ede:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009fc4 <_vfiprintf_r+0x25c>
 8009ee2:	7821      	ldrb	r1, [r4, #0]
 8009ee4:	2203      	movs	r2, #3
 8009ee6:	4650      	mov	r0, sl
 8009ee8:	f7f6 f992 	bl	8000210 <memchr>
 8009eec:	b140      	cbz	r0, 8009f00 <_vfiprintf_r+0x198>
 8009eee:	2340      	movs	r3, #64	; 0x40
 8009ef0:	eba0 000a 	sub.w	r0, r0, sl
 8009ef4:	fa03 f000 	lsl.w	r0, r3, r0
 8009ef8:	9b04      	ldr	r3, [sp, #16]
 8009efa:	4303      	orrs	r3, r0
 8009efc:	3401      	adds	r4, #1
 8009efe:	9304      	str	r3, [sp, #16]
 8009f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f04:	482c      	ldr	r0, [pc, #176]	; (8009fb8 <_vfiprintf_r+0x250>)
 8009f06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f0a:	2206      	movs	r2, #6
 8009f0c:	f7f6 f980 	bl	8000210 <memchr>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	d03f      	beq.n	8009f94 <_vfiprintf_r+0x22c>
 8009f14:	4b29      	ldr	r3, [pc, #164]	; (8009fbc <_vfiprintf_r+0x254>)
 8009f16:	bb1b      	cbnz	r3, 8009f60 <_vfiprintf_r+0x1f8>
 8009f18:	9b03      	ldr	r3, [sp, #12]
 8009f1a:	3307      	adds	r3, #7
 8009f1c:	f023 0307 	bic.w	r3, r3, #7
 8009f20:	3308      	adds	r3, #8
 8009f22:	9303      	str	r3, [sp, #12]
 8009f24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f26:	443b      	add	r3, r7
 8009f28:	9309      	str	r3, [sp, #36]	; 0x24
 8009f2a:	e767      	b.n	8009dfc <_vfiprintf_r+0x94>
 8009f2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f30:	460c      	mov	r4, r1
 8009f32:	2001      	movs	r0, #1
 8009f34:	e7a5      	b.n	8009e82 <_vfiprintf_r+0x11a>
 8009f36:	2300      	movs	r3, #0
 8009f38:	3401      	adds	r4, #1
 8009f3a:	9305      	str	r3, [sp, #20]
 8009f3c:	4619      	mov	r1, r3
 8009f3e:	f04f 0c0a 	mov.w	ip, #10
 8009f42:	4620      	mov	r0, r4
 8009f44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f48:	3a30      	subs	r2, #48	; 0x30
 8009f4a:	2a09      	cmp	r2, #9
 8009f4c:	d903      	bls.n	8009f56 <_vfiprintf_r+0x1ee>
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d0c5      	beq.n	8009ede <_vfiprintf_r+0x176>
 8009f52:	9105      	str	r1, [sp, #20]
 8009f54:	e7c3      	b.n	8009ede <_vfiprintf_r+0x176>
 8009f56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f5a:	4604      	mov	r4, r0
 8009f5c:	2301      	movs	r3, #1
 8009f5e:	e7f0      	b.n	8009f42 <_vfiprintf_r+0x1da>
 8009f60:	ab03      	add	r3, sp, #12
 8009f62:	9300      	str	r3, [sp, #0]
 8009f64:	462a      	mov	r2, r5
 8009f66:	4b16      	ldr	r3, [pc, #88]	; (8009fc0 <_vfiprintf_r+0x258>)
 8009f68:	a904      	add	r1, sp, #16
 8009f6a:	4630      	mov	r0, r6
 8009f6c:	f3af 8000 	nop.w
 8009f70:	4607      	mov	r7, r0
 8009f72:	1c78      	adds	r0, r7, #1
 8009f74:	d1d6      	bne.n	8009f24 <_vfiprintf_r+0x1bc>
 8009f76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009f78:	07d9      	lsls	r1, r3, #31
 8009f7a:	d405      	bmi.n	8009f88 <_vfiprintf_r+0x220>
 8009f7c:	89ab      	ldrh	r3, [r5, #12]
 8009f7e:	059a      	lsls	r2, r3, #22
 8009f80:	d402      	bmi.n	8009f88 <_vfiprintf_r+0x220>
 8009f82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009f84:	f7ff fe31 	bl	8009bea <__retarget_lock_release_recursive>
 8009f88:	89ab      	ldrh	r3, [r5, #12]
 8009f8a:	065b      	lsls	r3, r3, #25
 8009f8c:	f53f af12 	bmi.w	8009db4 <_vfiprintf_r+0x4c>
 8009f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f92:	e711      	b.n	8009db8 <_vfiprintf_r+0x50>
 8009f94:	ab03      	add	r3, sp, #12
 8009f96:	9300      	str	r3, [sp, #0]
 8009f98:	462a      	mov	r2, r5
 8009f9a:	4b09      	ldr	r3, [pc, #36]	; (8009fc0 <_vfiprintf_r+0x258>)
 8009f9c:	a904      	add	r1, sp, #16
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f000 f880 	bl	800a0a4 <_printf_i>
 8009fa4:	e7e4      	b.n	8009f70 <_vfiprintf_r+0x208>
 8009fa6:	bf00      	nop
 8009fa8:	0800a9a4 	.word	0x0800a9a4
 8009fac:	0800a9c4 	.word	0x0800a9c4
 8009fb0:	0800a984 	.word	0x0800a984
 8009fb4:	0800a9e4 	.word	0x0800a9e4
 8009fb8:	0800a9ee 	.word	0x0800a9ee
 8009fbc:	00000000 	.word	0x00000000
 8009fc0:	08009d43 	.word	0x08009d43
 8009fc4:	0800a9ea 	.word	0x0800a9ea

08009fc8 <_printf_common>:
 8009fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fcc:	4616      	mov	r6, r2
 8009fce:	4699      	mov	r9, r3
 8009fd0:	688a      	ldr	r2, [r1, #8]
 8009fd2:	690b      	ldr	r3, [r1, #16]
 8009fd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fd8:	4293      	cmp	r3, r2
 8009fda:	bfb8      	it	lt
 8009fdc:	4613      	movlt	r3, r2
 8009fde:	6033      	str	r3, [r6, #0]
 8009fe0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fe4:	4607      	mov	r7, r0
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	b10a      	cbz	r2, 8009fee <_printf_common+0x26>
 8009fea:	3301      	adds	r3, #1
 8009fec:	6033      	str	r3, [r6, #0]
 8009fee:	6823      	ldr	r3, [r4, #0]
 8009ff0:	0699      	lsls	r1, r3, #26
 8009ff2:	bf42      	ittt	mi
 8009ff4:	6833      	ldrmi	r3, [r6, #0]
 8009ff6:	3302      	addmi	r3, #2
 8009ff8:	6033      	strmi	r3, [r6, #0]
 8009ffa:	6825      	ldr	r5, [r4, #0]
 8009ffc:	f015 0506 	ands.w	r5, r5, #6
 800a000:	d106      	bne.n	800a010 <_printf_common+0x48>
 800a002:	f104 0a19 	add.w	sl, r4, #25
 800a006:	68e3      	ldr	r3, [r4, #12]
 800a008:	6832      	ldr	r2, [r6, #0]
 800a00a:	1a9b      	subs	r3, r3, r2
 800a00c:	42ab      	cmp	r3, r5
 800a00e:	dc26      	bgt.n	800a05e <_printf_common+0x96>
 800a010:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a014:	1e13      	subs	r3, r2, #0
 800a016:	6822      	ldr	r2, [r4, #0]
 800a018:	bf18      	it	ne
 800a01a:	2301      	movne	r3, #1
 800a01c:	0692      	lsls	r2, r2, #26
 800a01e:	d42b      	bmi.n	800a078 <_printf_common+0xb0>
 800a020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a024:	4649      	mov	r1, r9
 800a026:	4638      	mov	r0, r7
 800a028:	47c0      	blx	r8
 800a02a:	3001      	adds	r0, #1
 800a02c:	d01e      	beq.n	800a06c <_printf_common+0xa4>
 800a02e:	6823      	ldr	r3, [r4, #0]
 800a030:	68e5      	ldr	r5, [r4, #12]
 800a032:	6832      	ldr	r2, [r6, #0]
 800a034:	f003 0306 	and.w	r3, r3, #6
 800a038:	2b04      	cmp	r3, #4
 800a03a:	bf08      	it	eq
 800a03c:	1aad      	subeq	r5, r5, r2
 800a03e:	68a3      	ldr	r3, [r4, #8]
 800a040:	6922      	ldr	r2, [r4, #16]
 800a042:	bf0c      	ite	eq
 800a044:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a048:	2500      	movne	r5, #0
 800a04a:	4293      	cmp	r3, r2
 800a04c:	bfc4      	itt	gt
 800a04e:	1a9b      	subgt	r3, r3, r2
 800a050:	18ed      	addgt	r5, r5, r3
 800a052:	2600      	movs	r6, #0
 800a054:	341a      	adds	r4, #26
 800a056:	42b5      	cmp	r5, r6
 800a058:	d11a      	bne.n	800a090 <_printf_common+0xc8>
 800a05a:	2000      	movs	r0, #0
 800a05c:	e008      	b.n	800a070 <_printf_common+0xa8>
 800a05e:	2301      	movs	r3, #1
 800a060:	4652      	mov	r2, sl
 800a062:	4649      	mov	r1, r9
 800a064:	4638      	mov	r0, r7
 800a066:	47c0      	blx	r8
 800a068:	3001      	adds	r0, #1
 800a06a:	d103      	bne.n	800a074 <_printf_common+0xac>
 800a06c:	f04f 30ff 	mov.w	r0, #4294967295
 800a070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a074:	3501      	adds	r5, #1
 800a076:	e7c6      	b.n	800a006 <_printf_common+0x3e>
 800a078:	18e1      	adds	r1, r4, r3
 800a07a:	1c5a      	adds	r2, r3, #1
 800a07c:	2030      	movs	r0, #48	; 0x30
 800a07e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a082:	4422      	add	r2, r4
 800a084:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a088:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a08c:	3302      	adds	r3, #2
 800a08e:	e7c7      	b.n	800a020 <_printf_common+0x58>
 800a090:	2301      	movs	r3, #1
 800a092:	4622      	mov	r2, r4
 800a094:	4649      	mov	r1, r9
 800a096:	4638      	mov	r0, r7
 800a098:	47c0      	blx	r8
 800a09a:	3001      	adds	r0, #1
 800a09c:	d0e6      	beq.n	800a06c <_printf_common+0xa4>
 800a09e:	3601      	adds	r6, #1
 800a0a0:	e7d9      	b.n	800a056 <_printf_common+0x8e>
	...

0800a0a4 <_printf_i>:
 800a0a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a0a8:	7e0f      	ldrb	r7, [r1, #24]
 800a0aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0ac:	2f78      	cmp	r7, #120	; 0x78
 800a0ae:	4691      	mov	r9, r2
 800a0b0:	4680      	mov	r8, r0
 800a0b2:	460c      	mov	r4, r1
 800a0b4:	469a      	mov	sl, r3
 800a0b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ba:	d807      	bhi.n	800a0cc <_printf_i+0x28>
 800a0bc:	2f62      	cmp	r7, #98	; 0x62
 800a0be:	d80a      	bhi.n	800a0d6 <_printf_i+0x32>
 800a0c0:	2f00      	cmp	r7, #0
 800a0c2:	f000 80d8 	beq.w	800a276 <_printf_i+0x1d2>
 800a0c6:	2f58      	cmp	r7, #88	; 0x58
 800a0c8:	f000 80a3 	beq.w	800a212 <_printf_i+0x16e>
 800a0cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0d4:	e03a      	b.n	800a14c <_printf_i+0xa8>
 800a0d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0da:	2b15      	cmp	r3, #21
 800a0dc:	d8f6      	bhi.n	800a0cc <_printf_i+0x28>
 800a0de:	a101      	add	r1, pc, #4	; (adr r1, 800a0e4 <_printf_i+0x40>)
 800a0e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0e4:	0800a13d 	.word	0x0800a13d
 800a0e8:	0800a151 	.word	0x0800a151
 800a0ec:	0800a0cd 	.word	0x0800a0cd
 800a0f0:	0800a0cd 	.word	0x0800a0cd
 800a0f4:	0800a0cd 	.word	0x0800a0cd
 800a0f8:	0800a0cd 	.word	0x0800a0cd
 800a0fc:	0800a151 	.word	0x0800a151
 800a100:	0800a0cd 	.word	0x0800a0cd
 800a104:	0800a0cd 	.word	0x0800a0cd
 800a108:	0800a0cd 	.word	0x0800a0cd
 800a10c:	0800a0cd 	.word	0x0800a0cd
 800a110:	0800a25d 	.word	0x0800a25d
 800a114:	0800a181 	.word	0x0800a181
 800a118:	0800a23f 	.word	0x0800a23f
 800a11c:	0800a0cd 	.word	0x0800a0cd
 800a120:	0800a0cd 	.word	0x0800a0cd
 800a124:	0800a27f 	.word	0x0800a27f
 800a128:	0800a0cd 	.word	0x0800a0cd
 800a12c:	0800a181 	.word	0x0800a181
 800a130:	0800a0cd 	.word	0x0800a0cd
 800a134:	0800a0cd 	.word	0x0800a0cd
 800a138:	0800a247 	.word	0x0800a247
 800a13c:	682b      	ldr	r3, [r5, #0]
 800a13e:	1d1a      	adds	r2, r3, #4
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	602a      	str	r2, [r5, #0]
 800a144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a148:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a14c:	2301      	movs	r3, #1
 800a14e:	e0a3      	b.n	800a298 <_printf_i+0x1f4>
 800a150:	6820      	ldr	r0, [r4, #0]
 800a152:	6829      	ldr	r1, [r5, #0]
 800a154:	0606      	lsls	r6, r0, #24
 800a156:	f101 0304 	add.w	r3, r1, #4
 800a15a:	d50a      	bpl.n	800a172 <_printf_i+0xce>
 800a15c:	680e      	ldr	r6, [r1, #0]
 800a15e:	602b      	str	r3, [r5, #0]
 800a160:	2e00      	cmp	r6, #0
 800a162:	da03      	bge.n	800a16c <_printf_i+0xc8>
 800a164:	232d      	movs	r3, #45	; 0x2d
 800a166:	4276      	negs	r6, r6
 800a168:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16c:	485e      	ldr	r0, [pc, #376]	; (800a2e8 <_printf_i+0x244>)
 800a16e:	230a      	movs	r3, #10
 800a170:	e019      	b.n	800a1a6 <_printf_i+0x102>
 800a172:	680e      	ldr	r6, [r1, #0]
 800a174:	602b      	str	r3, [r5, #0]
 800a176:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a17a:	bf18      	it	ne
 800a17c:	b236      	sxthne	r6, r6
 800a17e:	e7ef      	b.n	800a160 <_printf_i+0xbc>
 800a180:	682b      	ldr	r3, [r5, #0]
 800a182:	6820      	ldr	r0, [r4, #0]
 800a184:	1d19      	adds	r1, r3, #4
 800a186:	6029      	str	r1, [r5, #0]
 800a188:	0601      	lsls	r1, r0, #24
 800a18a:	d501      	bpl.n	800a190 <_printf_i+0xec>
 800a18c:	681e      	ldr	r6, [r3, #0]
 800a18e:	e002      	b.n	800a196 <_printf_i+0xf2>
 800a190:	0646      	lsls	r6, r0, #25
 800a192:	d5fb      	bpl.n	800a18c <_printf_i+0xe8>
 800a194:	881e      	ldrh	r6, [r3, #0]
 800a196:	4854      	ldr	r0, [pc, #336]	; (800a2e8 <_printf_i+0x244>)
 800a198:	2f6f      	cmp	r7, #111	; 0x6f
 800a19a:	bf0c      	ite	eq
 800a19c:	2308      	moveq	r3, #8
 800a19e:	230a      	movne	r3, #10
 800a1a0:	2100      	movs	r1, #0
 800a1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a1a6:	6865      	ldr	r5, [r4, #4]
 800a1a8:	60a5      	str	r5, [r4, #8]
 800a1aa:	2d00      	cmp	r5, #0
 800a1ac:	bfa2      	ittt	ge
 800a1ae:	6821      	ldrge	r1, [r4, #0]
 800a1b0:	f021 0104 	bicge.w	r1, r1, #4
 800a1b4:	6021      	strge	r1, [r4, #0]
 800a1b6:	b90e      	cbnz	r6, 800a1bc <_printf_i+0x118>
 800a1b8:	2d00      	cmp	r5, #0
 800a1ba:	d04d      	beq.n	800a258 <_printf_i+0x1b4>
 800a1bc:	4615      	mov	r5, r2
 800a1be:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1c2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1c6:	5dc7      	ldrb	r7, [r0, r7]
 800a1c8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1cc:	4637      	mov	r7, r6
 800a1ce:	42bb      	cmp	r3, r7
 800a1d0:	460e      	mov	r6, r1
 800a1d2:	d9f4      	bls.n	800a1be <_printf_i+0x11a>
 800a1d4:	2b08      	cmp	r3, #8
 800a1d6:	d10b      	bne.n	800a1f0 <_printf_i+0x14c>
 800a1d8:	6823      	ldr	r3, [r4, #0]
 800a1da:	07de      	lsls	r6, r3, #31
 800a1dc:	d508      	bpl.n	800a1f0 <_printf_i+0x14c>
 800a1de:	6923      	ldr	r3, [r4, #16]
 800a1e0:	6861      	ldr	r1, [r4, #4]
 800a1e2:	4299      	cmp	r1, r3
 800a1e4:	bfde      	ittt	le
 800a1e6:	2330      	movle	r3, #48	; 0x30
 800a1e8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1ec:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1f0:	1b52      	subs	r2, r2, r5
 800a1f2:	6122      	str	r2, [r4, #16]
 800a1f4:	f8cd a000 	str.w	sl, [sp]
 800a1f8:	464b      	mov	r3, r9
 800a1fa:	aa03      	add	r2, sp, #12
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4640      	mov	r0, r8
 800a200:	f7ff fee2 	bl	8009fc8 <_printf_common>
 800a204:	3001      	adds	r0, #1
 800a206:	d14c      	bne.n	800a2a2 <_printf_i+0x1fe>
 800a208:	f04f 30ff 	mov.w	r0, #4294967295
 800a20c:	b004      	add	sp, #16
 800a20e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a212:	4835      	ldr	r0, [pc, #212]	; (800a2e8 <_printf_i+0x244>)
 800a214:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a218:	6829      	ldr	r1, [r5, #0]
 800a21a:	6823      	ldr	r3, [r4, #0]
 800a21c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a220:	6029      	str	r1, [r5, #0]
 800a222:	061d      	lsls	r5, r3, #24
 800a224:	d514      	bpl.n	800a250 <_printf_i+0x1ac>
 800a226:	07df      	lsls	r7, r3, #31
 800a228:	bf44      	itt	mi
 800a22a:	f043 0320 	orrmi.w	r3, r3, #32
 800a22e:	6023      	strmi	r3, [r4, #0]
 800a230:	b91e      	cbnz	r6, 800a23a <_printf_i+0x196>
 800a232:	6823      	ldr	r3, [r4, #0]
 800a234:	f023 0320 	bic.w	r3, r3, #32
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	2310      	movs	r3, #16
 800a23c:	e7b0      	b.n	800a1a0 <_printf_i+0xfc>
 800a23e:	6823      	ldr	r3, [r4, #0]
 800a240:	f043 0320 	orr.w	r3, r3, #32
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	2378      	movs	r3, #120	; 0x78
 800a248:	4828      	ldr	r0, [pc, #160]	; (800a2ec <_printf_i+0x248>)
 800a24a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a24e:	e7e3      	b.n	800a218 <_printf_i+0x174>
 800a250:	0659      	lsls	r1, r3, #25
 800a252:	bf48      	it	mi
 800a254:	b2b6      	uxthmi	r6, r6
 800a256:	e7e6      	b.n	800a226 <_printf_i+0x182>
 800a258:	4615      	mov	r5, r2
 800a25a:	e7bb      	b.n	800a1d4 <_printf_i+0x130>
 800a25c:	682b      	ldr	r3, [r5, #0]
 800a25e:	6826      	ldr	r6, [r4, #0]
 800a260:	6961      	ldr	r1, [r4, #20]
 800a262:	1d18      	adds	r0, r3, #4
 800a264:	6028      	str	r0, [r5, #0]
 800a266:	0635      	lsls	r5, r6, #24
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	d501      	bpl.n	800a270 <_printf_i+0x1cc>
 800a26c:	6019      	str	r1, [r3, #0]
 800a26e:	e002      	b.n	800a276 <_printf_i+0x1d2>
 800a270:	0670      	lsls	r0, r6, #25
 800a272:	d5fb      	bpl.n	800a26c <_printf_i+0x1c8>
 800a274:	8019      	strh	r1, [r3, #0]
 800a276:	2300      	movs	r3, #0
 800a278:	6123      	str	r3, [r4, #16]
 800a27a:	4615      	mov	r5, r2
 800a27c:	e7ba      	b.n	800a1f4 <_printf_i+0x150>
 800a27e:	682b      	ldr	r3, [r5, #0]
 800a280:	1d1a      	adds	r2, r3, #4
 800a282:	602a      	str	r2, [r5, #0]
 800a284:	681d      	ldr	r5, [r3, #0]
 800a286:	6862      	ldr	r2, [r4, #4]
 800a288:	2100      	movs	r1, #0
 800a28a:	4628      	mov	r0, r5
 800a28c:	f7f5 ffc0 	bl	8000210 <memchr>
 800a290:	b108      	cbz	r0, 800a296 <_printf_i+0x1f2>
 800a292:	1b40      	subs	r0, r0, r5
 800a294:	6060      	str	r0, [r4, #4]
 800a296:	6863      	ldr	r3, [r4, #4]
 800a298:	6123      	str	r3, [r4, #16]
 800a29a:	2300      	movs	r3, #0
 800a29c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2a0:	e7a8      	b.n	800a1f4 <_printf_i+0x150>
 800a2a2:	6923      	ldr	r3, [r4, #16]
 800a2a4:	462a      	mov	r2, r5
 800a2a6:	4649      	mov	r1, r9
 800a2a8:	4640      	mov	r0, r8
 800a2aa:	47d0      	blx	sl
 800a2ac:	3001      	adds	r0, #1
 800a2ae:	d0ab      	beq.n	800a208 <_printf_i+0x164>
 800a2b0:	6823      	ldr	r3, [r4, #0]
 800a2b2:	079b      	lsls	r3, r3, #30
 800a2b4:	d413      	bmi.n	800a2de <_printf_i+0x23a>
 800a2b6:	68e0      	ldr	r0, [r4, #12]
 800a2b8:	9b03      	ldr	r3, [sp, #12]
 800a2ba:	4298      	cmp	r0, r3
 800a2bc:	bfb8      	it	lt
 800a2be:	4618      	movlt	r0, r3
 800a2c0:	e7a4      	b.n	800a20c <_printf_i+0x168>
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	4632      	mov	r2, r6
 800a2c6:	4649      	mov	r1, r9
 800a2c8:	4640      	mov	r0, r8
 800a2ca:	47d0      	blx	sl
 800a2cc:	3001      	adds	r0, #1
 800a2ce:	d09b      	beq.n	800a208 <_printf_i+0x164>
 800a2d0:	3501      	adds	r5, #1
 800a2d2:	68e3      	ldr	r3, [r4, #12]
 800a2d4:	9903      	ldr	r1, [sp, #12]
 800a2d6:	1a5b      	subs	r3, r3, r1
 800a2d8:	42ab      	cmp	r3, r5
 800a2da:	dcf2      	bgt.n	800a2c2 <_printf_i+0x21e>
 800a2dc:	e7eb      	b.n	800a2b6 <_printf_i+0x212>
 800a2de:	2500      	movs	r5, #0
 800a2e0:	f104 0619 	add.w	r6, r4, #25
 800a2e4:	e7f5      	b.n	800a2d2 <_printf_i+0x22e>
 800a2e6:	bf00      	nop
 800a2e8:	0800a9f5 	.word	0x0800a9f5
 800a2ec:	0800aa06 	.word	0x0800aa06

0800a2f0 <_sbrk_r>:
 800a2f0:	b538      	push	{r3, r4, r5, lr}
 800a2f2:	4d06      	ldr	r5, [pc, #24]	; (800a30c <_sbrk_r+0x1c>)
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	4604      	mov	r4, r0
 800a2f8:	4608      	mov	r0, r1
 800a2fa:	602b      	str	r3, [r5, #0]
 800a2fc:	f7fa fc16 	bl	8004b2c <_sbrk>
 800a300:	1c43      	adds	r3, r0, #1
 800a302:	d102      	bne.n	800a30a <_sbrk_r+0x1a>
 800a304:	682b      	ldr	r3, [r5, #0]
 800a306:	b103      	cbz	r3, 800a30a <_sbrk_r+0x1a>
 800a308:	6023      	str	r3, [r4, #0]
 800a30a:	bd38      	pop	{r3, r4, r5, pc}
 800a30c:	20000538 	.word	0x20000538

0800a310 <__sread>:
 800a310:	b510      	push	{r4, lr}
 800a312:	460c      	mov	r4, r1
 800a314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a318:	f000 fab2 	bl	800a880 <_read_r>
 800a31c:	2800      	cmp	r0, #0
 800a31e:	bfab      	itete	ge
 800a320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a322:	89a3      	ldrhlt	r3, [r4, #12]
 800a324:	181b      	addge	r3, r3, r0
 800a326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a32a:	bfac      	ite	ge
 800a32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a32e:	81a3      	strhlt	r3, [r4, #12]
 800a330:	bd10      	pop	{r4, pc}

0800a332 <__swrite>:
 800a332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a336:	461f      	mov	r7, r3
 800a338:	898b      	ldrh	r3, [r1, #12]
 800a33a:	05db      	lsls	r3, r3, #23
 800a33c:	4605      	mov	r5, r0
 800a33e:	460c      	mov	r4, r1
 800a340:	4616      	mov	r6, r2
 800a342:	d505      	bpl.n	800a350 <__swrite+0x1e>
 800a344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a348:	2302      	movs	r3, #2
 800a34a:	2200      	movs	r2, #0
 800a34c:	f000 f9c8 	bl	800a6e0 <_lseek_r>
 800a350:	89a3      	ldrh	r3, [r4, #12]
 800a352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a35a:	81a3      	strh	r3, [r4, #12]
 800a35c:	4632      	mov	r2, r6
 800a35e:	463b      	mov	r3, r7
 800a360:	4628      	mov	r0, r5
 800a362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a366:	f000 b869 	b.w	800a43c <_write_r>

0800a36a <__sseek>:
 800a36a:	b510      	push	{r4, lr}
 800a36c:	460c      	mov	r4, r1
 800a36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a372:	f000 f9b5 	bl	800a6e0 <_lseek_r>
 800a376:	1c43      	adds	r3, r0, #1
 800a378:	89a3      	ldrh	r3, [r4, #12]
 800a37a:	bf15      	itete	ne
 800a37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a386:	81a3      	strheq	r3, [r4, #12]
 800a388:	bf18      	it	ne
 800a38a:	81a3      	strhne	r3, [r4, #12]
 800a38c:	bd10      	pop	{r4, pc}

0800a38e <__sclose>:
 800a38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a392:	f000 b8d3 	b.w	800a53c <_close_r>
	...

0800a398 <__swbuf_r>:
 800a398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a39a:	460e      	mov	r6, r1
 800a39c:	4614      	mov	r4, r2
 800a39e:	4605      	mov	r5, r0
 800a3a0:	b118      	cbz	r0, 800a3aa <__swbuf_r+0x12>
 800a3a2:	6983      	ldr	r3, [r0, #24]
 800a3a4:	b90b      	cbnz	r3, 800a3aa <__swbuf_r+0x12>
 800a3a6:	f7ff fb81 	bl	8009aac <__sinit>
 800a3aa:	4b21      	ldr	r3, [pc, #132]	; (800a430 <__swbuf_r+0x98>)
 800a3ac:	429c      	cmp	r4, r3
 800a3ae:	d12b      	bne.n	800a408 <__swbuf_r+0x70>
 800a3b0:	686c      	ldr	r4, [r5, #4]
 800a3b2:	69a3      	ldr	r3, [r4, #24]
 800a3b4:	60a3      	str	r3, [r4, #8]
 800a3b6:	89a3      	ldrh	r3, [r4, #12]
 800a3b8:	071a      	lsls	r2, r3, #28
 800a3ba:	d52f      	bpl.n	800a41c <__swbuf_r+0x84>
 800a3bc:	6923      	ldr	r3, [r4, #16]
 800a3be:	b36b      	cbz	r3, 800a41c <__swbuf_r+0x84>
 800a3c0:	6923      	ldr	r3, [r4, #16]
 800a3c2:	6820      	ldr	r0, [r4, #0]
 800a3c4:	1ac0      	subs	r0, r0, r3
 800a3c6:	6963      	ldr	r3, [r4, #20]
 800a3c8:	b2f6      	uxtb	r6, r6
 800a3ca:	4283      	cmp	r3, r0
 800a3cc:	4637      	mov	r7, r6
 800a3ce:	dc04      	bgt.n	800a3da <__swbuf_r+0x42>
 800a3d0:	4621      	mov	r1, r4
 800a3d2:	4628      	mov	r0, r5
 800a3d4:	f000 f948 	bl	800a668 <_fflush_r>
 800a3d8:	bb30      	cbnz	r0, 800a428 <__swbuf_r+0x90>
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	3b01      	subs	r3, #1
 800a3de:	60a3      	str	r3, [r4, #8]
 800a3e0:	6823      	ldr	r3, [r4, #0]
 800a3e2:	1c5a      	adds	r2, r3, #1
 800a3e4:	6022      	str	r2, [r4, #0]
 800a3e6:	701e      	strb	r6, [r3, #0]
 800a3e8:	6963      	ldr	r3, [r4, #20]
 800a3ea:	3001      	adds	r0, #1
 800a3ec:	4283      	cmp	r3, r0
 800a3ee:	d004      	beq.n	800a3fa <__swbuf_r+0x62>
 800a3f0:	89a3      	ldrh	r3, [r4, #12]
 800a3f2:	07db      	lsls	r3, r3, #31
 800a3f4:	d506      	bpl.n	800a404 <__swbuf_r+0x6c>
 800a3f6:	2e0a      	cmp	r6, #10
 800a3f8:	d104      	bne.n	800a404 <__swbuf_r+0x6c>
 800a3fa:	4621      	mov	r1, r4
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	f000 f933 	bl	800a668 <_fflush_r>
 800a402:	b988      	cbnz	r0, 800a428 <__swbuf_r+0x90>
 800a404:	4638      	mov	r0, r7
 800a406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a408:	4b0a      	ldr	r3, [pc, #40]	; (800a434 <__swbuf_r+0x9c>)
 800a40a:	429c      	cmp	r4, r3
 800a40c:	d101      	bne.n	800a412 <__swbuf_r+0x7a>
 800a40e:	68ac      	ldr	r4, [r5, #8]
 800a410:	e7cf      	b.n	800a3b2 <__swbuf_r+0x1a>
 800a412:	4b09      	ldr	r3, [pc, #36]	; (800a438 <__swbuf_r+0xa0>)
 800a414:	429c      	cmp	r4, r3
 800a416:	bf08      	it	eq
 800a418:	68ec      	ldreq	r4, [r5, #12]
 800a41a:	e7ca      	b.n	800a3b2 <__swbuf_r+0x1a>
 800a41c:	4621      	mov	r1, r4
 800a41e:	4628      	mov	r0, r5
 800a420:	f000 f81e 	bl	800a460 <__swsetup_r>
 800a424:	2800      	cmp	r0, #0
 800a426:	d0cb      	beq.n	800a3c0 <__swbuf_r+0x28>
 800a428:	f04f 37ff 	mov.w	r7, #4294967295
 800a42c:	e7ea      	b.n	800a404 <__swbuf_r+0x6c>
 800a42e:	bf00      	nop
 800a430:	0800a9a4 	.word	0x0800a9a4
 800a434:	0800a9c4 	.word	0x0800a9c4
 800a438:	0800a984 	.word	0x0800a984

0800a43c <_write_r>:
 800a43c:	b538      	push	{r3, r4, r5, lr}
 800a43e:	4d07      	ldr	r5, [pc, #28]	; (800a45c <_write_r+0x20>)
 800a440:	4604      	mov	r4, r0
 800a442:	4608      	mov	r0, r1
 800a444:	4611      	mov	r1, r2
 800a446:	2200      	movs	r2, #0
 800a448:	602a      	str	r2, [r5, #0]
 800a44a:	461a      	mov	r2, r3
 800a44c:	f7f8 fdca 	bl	8002fe4 <_write>
 800a450:	1c43      	adds	r3, r0, #1
 800a452:	d102      	bne.n	800a45a <_write_r+0x1e>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	b103      	cbz	r3, 800a45a <_write_r+0x1e>
 800a458:	6023      	str	r3, [r4, #0]
 800a45a:	bd38      	pop	{r3, r4, r5, pc}
 800a45c:	20000538 	.word	0x20000538

0800a460 <__swsetup_r>:
 800a460:	4b32      	ldr	r3, [pc, #200]	; (800a52c <__swsetup_r+0xcc>)
 800a462:	b570      	push	{r4, r5, r6, lr}
 800a464:	681d      	ldr	r5, [r3, #0]
 800a466:	4606      	mov	r6, r0
 800a468:	460c      	mov	r4, r1
 800a46a:	b125      	cbz	r5, 800a476 <__swsetup_r+0x16>
 800a46c:	69ab      	ldr	r3, [r5, #24]
 800a46e:	b913      	cbnz	r3, 800a476 <__swsetup_r+0x16>
 800a470:	4628      	mov	r0, r5
 800a472:	f7ff fb1b 	bl	8009aac <__sinit>
 800a476:	4b2e      	ldr	r3, [pc, #184]	; (800a530 <__swsetup_r+0xd0>)
 800a478:	429c      	cmp	r4, r3
 800a47a:	d10f      	bne.n	800a49c <__swsetup_r+0x3c>
 800a47c:	686c      	ldr	r4, [r5, #4]
 800a47e:	89a3      	ldrh	r3, [r4, #12]
 800a480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a484:	0719      	lsls	r1, r3, #28
 800a486:	d42c      	bmi.n	800a4e2 <__swsetup_r+0x82>
 800a488:	06dd      	lsls	r5, r3, #27
 800a48a:	d411      	bmi.n	800a4b0 <__swsetup_r+0x50>
 800a48c:	2309      	movs	r3, #9
 800a48e:	6033      	str	r3, [r6, #0]
 800a490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a494:	81a3      	strh	r3, [r4, #12]
 800a496:	f04f 30ff 	mov.w	r0, #4294967295
 800a49a:	e03e      	b.n	800a51a <__swsetup_r+0xba>
 800a49c:	4b25      	ldr	r3, [pc, #148]	; (800a534 <__swsetup_r+0xd4>)
 800a49e:	429c      	cmp	r4, r3
 800a4a0:	d101      	bne.n	800a4a6 <__swsetup_r+0x46>
 800a4a2:	68ac      	ldr	r4, [r5, #8]
 800a4a4:	e7eb      	b.n	800a47e <__swsetup_r+0x1e>
 800a4a6:	4b24      	ldr	r3, [pc, #144]	; (800a538 <__swsetup_r+0xd8>)
 800a4a8:	429c      	cmp	r4, r3
 800a4aa:	bf08      	it	eq
 800a4ac:	68ec      	ldreq	r4, [r5, #12]
 800a4ae:	e7e6      	b.n	800a47e <__swsetup_r+0x1e>
 800a4b0:	0758      	lsls	r0, r3, #29
 800a4b2:	d512      	bpl.n	800a4da <__swsetup_r+0x7a>
 800a4b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4b6:	b141      	cbz	r1, 800a4ca <__swsetup_r+0x6a>
 800a4b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4bc:	4299      	cmp	r1, r3
 800a4be:	d002      	beq.n	800a4c6 <__swsetup_r+0x66>
 800a4c0:	4630      	mov	r0, r6
 800a4c2:	f000 f991 	bl	800a7e8 <_free_r>
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	6363      	str	r3, [r4, #52]	; 0x34
 800a4ca:	89a3      	ldrh	r3, [r4, #12]
 800a4cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a4d0:	81a3      	strh	r3, [r4, #12]
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	6063      	str	r3, [r4, #4]
 800a4d6:	6923      	ldr	r3, [r4, #16]
 800a4d8:	6023      	str	r3, [r4, #0]
 800a4da:	89a3      	ldrh	r3, [r4, #12]
 800a4dc:	f043 0308 	orr.w	r3, r3, #8
 800a4e0:	81a3      	strh	r3, [r4, #12]
 800a4e2:	6923      	ldr	r3, [r4, #16]
 800a4e4:	b94b      	cbnz	r3, 800a4fa <__swsetup_r+0x9a>
 800a4e6:	89a3      	ldrh	r3, [r4, #12]
 800a4e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a4ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a4f0:	d003      	beq.n	800a4fa <__swsetup_r+0x9a>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4630      	mov	r0, r6
 800a4f6:	f000 f92b 	bl	800a750 <__smakebuf_r>
 800a4fa:	89a0      	ldrh	r0, [r4, #12]
 800a4fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a500:	f010 0301 	ands.w	r3, r0, #1
 800a504:	d00a      	beq.n	800a51c <__swsetup_r+0xbc>
 800a506:	2300      	movs	r3, #0
 800a508:	60a3      	str	r3, [r4, #8]
 800a50a:	6963      	ldr	r3, [r4, #20]
 800a50c:	425b      	negs	r3, r3
 800a50e:	61a3      	str	r3, [r4, #24]
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	b943      	cbnz	r3, 800a526 <__swsetup_r+0xc6>
 800a514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a518:	d1ba      	bne.n	800a490 <__swsetup_r+0x30>
 800a51a:	bd70      	pop	{r4, r5, r6, pc}
 800a51c:	0781      	lsls	r1, r0, #30
 800a51e:	bf58      	it	pl
 800a520:	6963      	ldrpl	r3, [r4, #20]
 800a522:	60a3      	str	r3, [r4, #8]
 800a524:	e7f4      	b.n	800a510 <__swsetup_r+0xb0>
 800a526:	2000      	movs	r0, #0
 800a528:	e7f7      	b.n	800a51a <__swsetup_r+0xba>
 800a52a:	bf00      	nop
 800a52c:	20000014 	.word	0x20000014
 800a530:	0800a9a4 	.word	0x0800a9a4
 800a534:	0800a9c4 	.word	0x0800a9c4
 800a538:	0800a984 	.word	0x0800a984

0800a53c <_close_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_close_r+0x1c>)
 800a540:	2300      	movs	r3, #0
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	f7fa fabb 	bl	8004ac2 <_close>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_close_r+0x1a>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_close_r+0x1a>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	20000538 	.word	0x20000538

0800a55c <__sflush_r>:
 800a55c:	898a      	ldrh	r2, [r1, #12]
 800a55e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a562:	4605      	mov	r5, r0
 800a564:	0710      	lsls	r0, r2, #28
 800a566:	460c      	mov	r4, r1
 800a568:	d458      	bmi.n	800a61c <__sflush_r+0xc0>
 800a56a:	684b      	ldr	r3, [r1, #4]
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	dc05      	bgt.n	800a57c <__sflush_r+0x20>
 800a570:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a572:	2b00      	cmp	r3, #0
 800a574:	dc02      	bgt.n	800a57c <__sflush_r+0x20>
 800a576:	2000      	movs	r0, #0
 800a578:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a57c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a57e:	2e00      	cmp	r6, #0
 800a580:	d0f9      	beq.n	800a576 <__sflush_r+0x1a>
 800a582:	2300      	movs	r3, #0
 800a584:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a588:	682f      	ldr	r7, [r5, #0]
 800a58a:	602b      	str	r3, [r5, #0]
 800a58c:	d032      	beq.n	800a5f4 <__sflush_r+0x98>
 800a58e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a590:	89a3      	ldrh	r3, [r4, #12]
 800a592:	075a      	lsls	r2, r3, #29
 800a594:	d505      	bpl.n	800a5a2 <__sflush_r+0x46>
 800a596:	6863      	ldr	r3, [r4, #4]
 800a598:	1ac0      	subs	r0, r0, r3
 800a59a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a59c:	b10b      	cbz	r3, 800a5a2 <__sflush_r+0x46>
 800a59e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a5a0:	1ac0      	subs	r0, r0, r3
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a5a8:	6a21      	ldr	r1, [r4, #32]
 800a5aa:	4628      	mov	r0, r5
 800a5ac:	47b0      	blx	r6
 800a5ae:	1c43      	adds	r3, r0, #1
 800a5b0:	89a3      	ldrh	r3, [r4, #12]
 800a5b2:	d106      	bne.n	800a5c2 <__sflush_r+0x66>
 800a5b4:	6829      	ldr	r1, [r5, #0]
 800a5b6:	291d      	cmp	r1, #29
 800a5b8:	d82c      	bhi.n	800a614 <__sflush_r+0xb8>
 800a5ba:	4a2a      	ldr	r2, [pc, #168]	; (800a664 <__sflush_r+0x108>)
 800a5bc:	40ca      	lsrs	r2, r1
 800a5be:	07d6      	lsls	r6, r2, #31
 800a5c0:	d528      	bpl.n	800a614 <__sflush_r+0xb8>
 800a5c2:	2200      	movs	r2, #0
 800a5c4:	6062      	str	r2, [r4, #4]
 800a5c6:	04d9      	lsls	r1, r3, #19
 800a5c8:	6922      	ldr	r2, [r4, #16]
 800a5ca:	6022      	str	r2, [r4, #0]
 800a5cc:	d504      	bpl.n	800a5d8 <__sflush_r+0x7c>
 800a5ce:	1c42      	adds	r2, r0, #1
 800a5d0:	d101      	bne.n	800a5d6 <__sflush_r+0x7a>
 800a5d2:	682b      	ldr	r3, [r5, #0]
 800a5d4:	b903      	cbnz	r3, 800a5d8 <__sflush_r+0x7c>
 800a5d6:	6560      	str	r0, [r4, #84]	; 0x54
 800a5d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a5da:	602f      	str	r7, [r5, #0]
 800a5dc:	2900      	cmp	r1, #0
 800a5de:	d0ca      	beq.n	800a576 <__sflush_r+0x1a>
 800a5e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5e4:	4299      	cmp	r1, r3
 800a5e6:	d002      	beq.n	800a5ee <__sflush_r+0x92>
 800a5e8:	4628      	mov	r0, r5
 800a5ea:	f000 f8fd 	bl	800a7e8 <_free_r>
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f2:	e7c1      	b.n	800a578 <__sflush_r+0x1c>
 800a5f4:	6a21      	ldr	r1, [r4, #32]
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	4628      	mov	r0, r5
 800a5fa:	47b0      	blx	r6
 800a5fc:	1c41      	adds	r1, r0, #1
 800a5fe:	d1c7      	bne.n	800a590 <__sflush_r+0x34>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	2b00      	cmp	r3, #0
 800a604:	d0c4      	beq.n	800a590 <__sflush_r+0x34>
 800a606:	2b1d      	cmp	r3, #29
 800a608:	d001      	beq.n	800a60e <__sflush_r+0xb2>
 800a60a:	2b16      	cmp	r3, #22
 800a60c:	d101      	bne.n	800a612 <__sflush_r+0xb6>
 800a60e:	602f      	str	r7, [r5, #0]
 800a610:	e7b1      	b.n	800a576 <__sflush_r+0x1a>
 800a612:	89a3      	ldrh	r3, [r4, #12]
 800a614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a618:	81a3      	strh	r3, [r4, #12]
 800a61a:	e7ad      	b.n	800a578 <__sflush_r+0x1c>
 800a61c:	690f      	ldr	r7, [r1, #16]
 800a61e:	2f00      	cmp	r7, #0
 800a620:	d0a9      	beq.n	800a576 <__sflush_r+0x1a>
 800a622:	0793      	lsls	r3, r2, #30
 800a624:	680e      	ldr	r6, [r1, #0]
 800a626:	bf08      	it	eq
 800a628:	694b      	ldreq	r3, [r1, #20]
 800a62a:	600f      	str	r7, [r1, #0]
 800a62c:	bf18      	it	ne
 800a62e:	2300      	movne	r3, #0
 800a630:	eba6 0807 	sub.w	r8, r6, r7
 800a634:	608b      	str	r3, [r1, #8]
 800a636:	f1b8 0f00 	cmp.w	r8, #0
 800a63a:	dd9c      	ble.n	800a576 <__sflush_r+0x1a>
 800a63c:	6a21      	ldr	r1, [r4, #32]
 800a63e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a640:	4643      	mov	r3, r8
 800a642:	463a      	mov	r2, r7
 800a644:	4628      	mov	r0, r5
 800a646:	47b0      	blx	r6
 800a648:	2800      	cmp	r0, #0
 800a64a:	dc06      	bgt.n	800a65a <__sflush_r+0xfe>
 800a64c:	89a3      	ldrh	r3, [r4, #12]
 800a64e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	f04f 30ff 	mov.w	r0, #4294967295
 800a658:	e78e      	b.n	800a578 <__sflush_r+0x1c>
 800a65a:	4407      	add	r7, r0
 800a65c:	eba8 0800 	sub.w	r8, r8, r0
 800a660:	e7e9      	b.n	800a636 <__sflush_r+0xda>
 800a662:	bf00      	nop
 800a664:	20400001 	.word	0x20400001

0800a668 <_fflush_r>:
 800a668:	b538      	push	{r3, r4, r5, lr}
 800a66a:	690b      	ldr	r3, [r1, #16]
 800a66c:	4605      	mov	r5, r0
 800a66e:	460c      	mov	r4, r1
 800a670:	b913      	cbnz	r3, 800a678 <_fflush_r+0x10>
 800a672:	2500      	movs	r5, #0
 800a674:	4628      	mov	r0, r5
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	b118      	cbz	r0, 800a682 <_fflush_r+0x1a>
 800a67a:	6983      	ldr	r3, [r0, #24]
 800a67c:	b90b      	cbnz	r3, 800a682 <_fflush_r+0x1a>
 800a67e:	f7ff fa15 	bl	8009aac <__sinit>
 800a682:	4b14      	ldr	r3, [pc, #80]	; (800a6d4 <_fflush_r+0x6c>)
 800a684:	429c      	cmp	r4, r3
 800a686:	d11b      	bne.n	800a6c0 <_fflush_r+0x58>
 800a688:	686c      	ldr	r4, [r5, #4]
 800a68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d0ef      	beq.n	800a672 <_fflush_r+0xa>
 800a692:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a694:	07d0      	lsls	r0, r2, #31
 800a696:	d404      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a698:	0599      	lsls	r1, r3, #22
 800a69a:	d402      	bmi.n	800a6a2 <_fflush_r+0x3a>
 800a69c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a69e:	f7ff faa3 	bl	8009be8 <__retarget_lock_acquire_recursive>
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	4621      	mov	r1, r4
 800a6a6:	f7ff ff59 	bl	800a55c <__sflush_r>
 800a6aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a6ac:	07da      	lsls	r2, r3, #31
 800a6ae:	4605      	mov	r5, r0
 800a6b0:	d4e0      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b2:	89a3      	ldrh	r3, [r4, #12]
 800a6b4:	059b      	lsls	r3, r3, #22
 800a6b6:	d4dd      	bmi.n	800a674 <_fflush_r+0xc>
 800a6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a6ba:	f7ff fa96 	bl	8009bea <__retarget_lock_release_recursive>
 800a6be:	e7d9      	b.n	800a674 <_fflush_r+0xc>
 800a6c0:	4b05      	ldr	r3, [pc, #20]	; (800a6d8 <_fflush_r+0x70>)
 800a6c2:	429c      	cmp	r4, r3
 800a6c4:	d101      	bne.n	800a6ca <_fflush_r+0x62>
 800a6c6:	68ac      	ldr	r4, [r5, #8]
 800a6c8:	e7df      	b.n	800a68a <_fflush_r+0x22>
 800a6ca:	4b04      	ldr	r3, [pc, #16]	; (800a6dc <_fflush_r+0x74>)
 800a6cc:	429c      	cmp	r4, r3
 800a6ce:	bf08      	it	eq
 800a6d0:	68ec      	ldreq	r4, [r5, #12]
 800a6d2:	e7da      	b.n	800a68a <_fflush_r+0x22>
 800a6d4:	0800a9a4 	.word	0x0800a9a4
 800a6d8:	0800a9c4 	.word	0x0800a9c4
 800a6dc:	0800a984 	.word	0x0800a984

0800a6e0 <_lseek_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	4d07      	ldr	r5, [pc, #28]	; (800a700 <_lseek_r+0x20>)
 800a6e4:	4604      	mov	r4, r0
 800a6e6:	4608      	mov	r0, r1
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	2200      	movs	r2, #0
 800a6ec:	602a      	str	r2, [r5, #0]
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	f7fa fa0e 	bl	8004b10 <_lseek>
 800a6f4:	1c43      	adds	r3, r0, #1
 800a6f6:	d102      	bne.n	800a6fe <_lseek_r+0x1e>
 800a6f8:	682b      	ldr	r3, [r5, #0]
 800a6fa:	b103      	cbz	r3, 800a6fe <_lseek_r+0x1e>
 800a6fc:	6023      	str	r3, [r4, #0]
 800a6fe:	bd38      	pop	{r3, r4, r5, pc}
 800a700:	20000538 	.word	0x20000538

0800a704 <__swhatbuf_r>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	460e      	mov	r6, r1
 800a708:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a70c:	2900      	cmp	r1, #0
 800a70e:	b096      	sub	sp, #88	; 0x58
 800a710:	4614      	mov	r4, r2
 800a712:	461d      	mov	r5, r3
 800a714:	da08      	bge.n	800a728 <__swhatbuf_r+0x24>
 800a716:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	602a      	str	r2, [r5, #0]
 800a71e:	061a      	lsls	r2, r3, #24
 800a720:	d410      	bmi.n	800a744 <__swhatbuf_r+0x40>
 800a722:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a726:	e00e      	b.n	800a746 <__swhatbuf_r+0x42>
 800a728:	466a      	mov	r2, sp
 800a72a:	f000 f8bb 	bl	800a8a4 <_fstat_r>
 800a72e:	2800      	cmp	r0, #0
 800a730:	dbf1      	blt.n	800a716 <__swhatbuf_r+0x12>
 800a732:	9a01      	ldr	r2, [sp, #4]
 800a734:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a738:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a73c:	425a      	negs	r2, r3
 800a73e:	415a      	adcs	r2, r3
 800a740:	602a      	str	r2, [r5, #0]
 800a742:	e7ee      	b.n	800a722 <__swhatbuf_r+0x1e>
 800a744:	2340      	movs	r3, #64	; 0x40
 800a746:	2000      	movs	r0, #0
 800a748:	6023      	str	r3, [r4, #0]
 800a74a:	b016      	add	sp, #88	; 0x58
 800a74c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a750 <__smakebuf_r>:
 800a750:	898b      	ldrh	r3, [r1, #12]
 800a752:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a754:	079d      	lsls	r5, r3, #30
 800a756:	4606      	mov	r6, r0
 800a758:	460c      	mov	r4, r1
 800a75a:	d507      	bpl.n	800a76c <__smakebuf_r+0x1c>
 800a75c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a760:	6023      	str	r3, [r4, #0]
 800a762:	6123      	str	r3, [r4, #16]
 800a764:	2301      	movs	r3, #1
 800a766:	6163      	str	r3, [r4, #20]
 800a768:	b002      	add	sp, #8
 800a76a:	bd70      	pop	{r4, r5, r6, pc}
 800a76c:	ab01      	add	r3, sp, #4
 800a76e:	466a      	mov	r2, sp
 800a770:	f7ff ffc8 	bl	800a704 <__swhatbuf_r>
 800a774:	9900      	ldr	r1, [sp, #0]
 800a776:	4605      	mov	r5, r0
 800a778:	4630      	mov	r0, r6
 800a77a:	f7ff fa57 	bl	8009c2c <_malloc_r>
 800a77e:	b948      	cbnz	r0, 800a794 <__smakebuf_r+0x44>
 800a780:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a784:	059a      	lsls	r2, r3, #22
 800a786:	d4ef      	bmi.n	800a768 <__smakebuf_r+0x18>
 800a788:	f023 0303 	bic.w	r3, r3, #3
 800a78c:	f043 0302 	orr.w	r3, r3, #2
 800a790:	81a3      	strh	r3, [r4, #12]
 800a792:	e7e3      	b.n	800a75c <__smakebuf_r+0xc>
 800a794:	4b0d      	ldr	r3, [pc, #52]	; (800a7cc <__smakebuf_r+0x7c>)
 800a796:	62b3      	str	r3, [r6, #40]	; 0x28
 800a798:	89a3      	ldrh	r3, [r4, #12]
 800a79a:	6020      	str	r0, [r4, #0]
 800a79c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a0:	81a3      	strh	r3, [r4, #12]
 800a7a2:	9b00      	ldr	r3, [sp, #0]
 800a7a4:	6163      	str	r3, [r4, #20]
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	6120      	str	r0, [r4, #16]
 800a7aa:	b15b      	cbz	r3, 800a7c4 <__smakebuf_r+0x74>
 800a7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7b0:	4630      	mov	r0, r6
 800a7b2:	f000 f889 	bl	800a8c8 <_isatty_r>
 800a7b6:	b128      	cbz	r0, 800a7c4 <__smakebuf_r+0x74>
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	f023 0303 	bic.w	r3, r3, #3
 800a7be:	f043 0301 	orr.w	r3, r3, #1
 800a7c2:	81a3      	strh	r3, [r4, #12]
 800a7c4:	89a0      	ldrh	r0, [r4, #12]
 800a7c6:	4305      	orrs	r5, r0
 800a7c8:	81a5      	strh	r5, [r4, #12]
 800a7ca:	e7cd      	b.n	800a768 <__smakebuf_r+0x18>
 800a7cc:	08009a45 	.word	0x08009a45

0800a7d0 <__malloc_lock>:
 800a7d0:	4801      	ldr	r0, [pc, #4]	; (800a7d8 <__malloc_lock+0x8>)
 800a7d2:	f7ff ba09 	b.w	8009be8 <__retarget_lock_acquire_recursive>
 800a7d6:	bf00      	nop
 800a7d8:	2000052c 	.word	0x2000052c

0800a7dc <__malloc_unlock>:
 800a7dc:	4801      	ldr	r0, [pc, #4]	; (800a7e4 <__malloc_unlock+0x8>)
 800a7de:	f7ff ba04 	b.w	8009bea <__retarget_lock_release_recursive>
 800a7e2:	bf00      	nop
 800a7e4:	2000052c 	.word	0x2000052c

0800a7e8 <_free_r>:
 800a7e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a7ea:	2900      	cmp	r1, #0
 800a7ec:	d044      	beq.n	800a878 <_free_r+0x90>
 800a7ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f2:	9001      	str	r0, [sp, #4]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	f1a1 0404 	sub.w	r4, r1, #4
 800a7fa:	bfb8      	it	lt
 800a7fc:	18e4      	addlt	r4, r4, r3
 800a7fe:	f7ff ffe7 	bl	800a7d0 <__malloc_lock>
 800a802:	4a1e      	ldr	r2, [pc, #120]	; (800a87c <_free_r+0x94>)
 800a804:	9801      	ldr	r0, [sp, #4]
 800a806:	6813      	ldr	r3, [r2, #0]
 800a808:	b933      	cbnz	r3, 800a818 <_free_r+0x30>
 800a80a:	6063      	str	r3, [r4, #4]
 800a80c:	6014      	str	r4, [r2, #0]
 800a80e:	b003      	add	sp, #12
 800a810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a814:	f7ff bfe2 	b.w	800a7dc <__malloc_unlock>
 800a818:	42a3      	cmp	r3, r4
 800a81a:	d908      	bls.n	800a82e <_free_r+0x46>
 800a81c:	6825      	ldr	r5, [r4, #0]
 800a81e:	1961      	adds	r1, r4, r5
 800a820:	428b      	cmp	r3, r1
 800a822:	bf01      	itttt	eq
 800a824:	6819      	ldreq	r1, [r3, #0]
 800a826:	685b      	ldreq	r3, [r3, #4]
 800a828:	1949      	addeq	r1, r1, r5
 800a82a:	6021      	streq	r1, [r4, #0]
 800a82c:	e7ed      	b.n	800a80a <_free_r+0x22>
 800a82e:	461a      	mov	r2, r3
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	b10b      	cbz	r3, 800a838 <_free_r+0x50>
 800a834:	42a3      	cmp	r3, r4
 800a836:	d9fa      	bls.n	800a82e <_free_r+0x46>
 800a838:	6811      	ldr	r1, [r2, #0]
 800a83a:	1855      	adds	r5, r2, r1
 800a83c:	42a5      	cmp	r5, r4
 800a83e:	d10b      	bne.n	800a858 <_free_r+0x70>
 800a840:	6824      	ldr	r4, [r4, #0]
 800a842:	4421      	add	r1, r4
 800a844:	1854      	adds	r4, r2, r1
 800a846:	42a3      	cmp	r3, r4
 800a848:	6011      	str	r1, [r2, #0]
 800a84a:	d1e0      	bne.n	800a80e <_free_r+0x26>
 800a84c:	681c      	ldr	r4, [r3, #0]
 800a84e:	685b      	ldr	r3, [r3, #4]
 800a850:	6053      	str	r3, [r2, #4]
 800a852:	4421      	add	r1, r4
 800a854:	6011      	str	r1, [r2, #0]
 800a856:	e7da      	b.n	800a80e <_free_r+0x26>
 800a858:	d902      	bls.n	800a860 <_free_r+0x78>
 800a85a:	230c      	movs	r3, #12
 800a85c:	6003      	str	r3, [r0, #0]
 800a85e:	e7d6      	b.n	800a80e <_free_r+0x26>
 800a860:	6825      	ldr	r5, [r4, #0]
 800a862:	1961      	adds	r1, r4, r5
 800a864:	428b      	cmp	r3, r1
 800a866:	bf04      	itt	eq
 800a868:	6819      	ldreq	r1, [r3, #0]
 800a86a:	685b      	ldreq	r3, [r3, #4]
 800a86c:	6063      	str	r3, [r4, #4]
 800a86e:	bf04      	itt	eq
 800a870:	1949      	addeq	r1, r1, r5
 800a872:	6021      	streq	r1, [r4, #0]
 800a874:	6054      	str	r4, [r2, #4]
 800a876:	e7ca      	b.n	800a80e <_free_r+0x26>
 800a878:	b003      	add	sp, #12
 800a87a:	bd30      	pop	{r4, r5, pc}
 800a87c:	20000530 	.word	0x20000530

0800a880 <_read_r>:
 800a880:	b538      	push	{r3, r4, r5, lr}
 800a882:	4d07      	ldr	r5, [pc, #28]	; (800a8a0 <_read_r+0x20>)
 800a884:	4604      	mov	r4, r0
 800a886:	4608      	mov	r0, r1
 800a888:	4611      	mov	r1, r2
 800a88a:	2200      	movs	r2, #0
 800a88c:	602a      	str	r2, [r5, #0]
 800a88e:	461a      	mov	r2, r3
 800a890:	f7fa f8fa 	bl	8004a88 <_read>
 800a894:	1c43      	adds	r3, r0, #1
 800a896:	d102      	bne.n	800a89e <_read_r+0x1e>
 800a898:	682b      	ldr	r3, [r5, #0]
 800a89a:	b103      	cbz	r3, 800a89e <_read_r+0x1e>
 800a89c:	6023      	str	r3, [r4, #0]
 800a89e:	bd38      	pop	{r3, r4, r5, pc}
 800a8a0:	20000538 	.word	0x20000538

0800a8a4 <_fstat_r>:
 800a8a4:	b538      	push	{r3, r4, r5, lr}
 800a8a6:	4d07      	ldr	r5, [pc, #28]	; (800a8c4 <_fstat_r+0x20>)
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	4604      	mov	r4, r0
 800a8ac:	4608      	mov	r0, r1
 800a8ae:	4611      	mov	r1, r2
 800a8b0:	602b      	str	r3, [r5, #0]
 800a8b2:	f7fa f912 	bl	8004ada <_fstat>
 800a8b6:	1c43      	adds	r3, r0, #1
 800a8b8:	d102      	bne.n	800a8c0 <_fstat_r+0x1c>
 800a8ba:	682b      	ldr	r3, [r5, #0]
 800a8bc:	b103      	cbz	r3, 800a8c0 <_fstat_r+0x1c>
 800a8be:	6023      	str	r3, [r4, #0]
 800a8c0:	bd38      	pop	{r3, r4, r5, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000538 	.word	0x20000538

0800a8c8 <_isatty_r>:
 800a8c8:	b538      	push	{r3, r4, r5, lr}
 800a8ca:	4d06      	ldr	r5, [pc, #24]	; (800a8e4 <_isatty_r+0x1c>)
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	4604      	mov	r4, r0
 800a8d0:	4608      	mov	r0, r1
 800a8d2:	602b      	str	r3, [r5, #0]
 800a8d4:	f7fa f911 	bl	8004afa <_isatty>
 800a8d8:	1c43      	adds	r3, r0, #1
 800a8da:	d102      	bne.n	800a8e2 <_isatty_r+0x1a>
 800a8dc:	682b      	ldr	r3, [r5, #0]
 800a8de:	b103      	cbz	r3, 800a8e2 <_isatty_r+0x1a>
 800a8e0:	6023      	str	r3, [r4, #0]
 800a8e2:	bd38      	pop	{r3, r4, r5, pc}
 800a8e4:	20000538 	.word	0x20000538

0800a8e8 <_init>:
 800a8e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8ea:	bf00      	nop
 800a8ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8ee:	bc08      	pop	{r3}
 800a8f0:	469e      	mov	lr, r3
 800a8f2:	4770      	bx	lr

0800a8f4 <_fini>:
 800a8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a8f6:	bf00      	nop
 800a8f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a8fa:	bc08      	pop	{r3}
 800a8fc:	469e      	mov	lr, r3
 800a8fe:	4770      	bx	lr
