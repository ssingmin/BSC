
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008118  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080082e8  080082e8  000182e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080083a8  080083a8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080083a8  080083a8  000183a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080083b0  080083b0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080083b0  080083b0  000183b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080083b4  080083b4  000183b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080083b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000070  08008428  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08008428  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014703  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6b  00000000  00000000  000347a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010e8  00000000  00000000  00037210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  000382f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027bf2  00000000  00000000  000392c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014598  00000000  00000000  00060eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f4f12  00000000  00000000  00075452  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016a364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f7c  00000000  00000000  0016a3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080082d0 	.word	0x080082d0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080082d0 	.word	0x080082d0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t g_uCAN_Rx_Data[8];
extern uint32_t FLAG_RxCplt;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a1d      	ldr	r2, [pc, #116]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d104      	bne.n	8000dfc <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8000df2:	4b1d      	ldr	r3, [pc, #116]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a1b      	ldr	r2, [pc, #108]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000dfa:	6013      	str	r3, [r2, #0]
//		  HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
//	  }

  }

  if(htim->Instance == TIM6)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1a      	ldr	r2, [pc, #104]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d116      	bne.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x54>
  {
	  gTick++;
 8000e06:	4b1a      	ldr	r3, [pc, #104]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a18      	ldr	r2, [pc, #96]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e0e:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8000e10:	4b17      	ldr	r3, [pc, #92]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e12:	6819      	ldr	r1, [r3, #0]
 8000e14:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e16:	fba3 2301 	umull	r2, r3, r3, r1
 8000e1a:	08da      	lsrs	r2, r3, #3
 8000e1c:	4613      	mov	r3, r2
 8000e1e:	009b      	lsls	r3, r3, #2
 8000e20:	4413      	add	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	1aca      	subs	r2, r1, r3
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d104      	bne.n	8000e34 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000e2a:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	4a11      	ldr	r2, [pc, #68]	; (8000e78 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e32:	6013      	str	r3, [r2, #0]
  }
  if(htim->Instance == TIM7)
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e3a:	4293      	cmp	r3, r2
 8000e3c:	d10c      	bne.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x78>
  {
	  USS_tick++;
 8000e3e:	4b10      	ldr	r3, [pc, #64]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e46:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8000e48:	4b0d      	ldr	r3, [pc, #52]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e50:	d902      	bls.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000e52:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
  }

}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	40000c00 	.word	0x40000c00
 8000e68:	2000008c 	.word	0x2000008c
 8000e6c:	40001000 	.word	0x40001000
 8000e70:	20000090 	.word	0x20000090
 8000e74:	cccccccd 	.word	0xcccccccd
 8000e78:	20000094 	.word	0x20000094
 8000e7c:	40001400 	.word	0x40001400
 8000e80:	200000b4 	.word	0x200000b4

08000e84 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	2b40      	cmp	r3, #64	; 0x40
 8000e92:	d103      	bne.n	8000e9c <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = USS_tick;
 8000e94:	4b04      	ldr	r3, [pc, #16]	; (8000ea8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a04      	ldr	r2, [pc, #16]	; (8000eac <HAL_GPIO_EXTI_Callback+0x28>)
 8000e9a:	6013      	str	r3, [r2, #0]
    }

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	200000b4 	.word	0x200000b4
 8000eac:	200000b0 	.word	0x200000b0

08000eb0 <controlMotor>:

void controlMotor()
{
 8000eb0:	b598      	push	{r3, r4, r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 8000eb4:	4b35      	ldr	r3, [pc, #212]	; (8000f8c <controlMotor+0xdc>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d060      	beq.n	8000f7e <controlMotor+0xce>
    {
        if(motor_disable_flag)
 8000ebc:	4b34      	ldr	r3, [pc, #208]	; (8000f90 <controlMotor+0xe0>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d004      	beq.n	8000ece <controlMotor+0x1e>
        {
            enable();
 8000ec4:	f001 f95e 	bl	8002184 <enable>
            motor_disable_flag = 0;
 8000ec8:	4b31      	ldr	r3, [pc, #196]	; (8000f90 <controlMotor+0xe0>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8000ece:	4b31      	ldr	r3, [pc, #196]	; (8000f94 <controlMotor+0xe4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b01      	cmp	r3, #1
 8000ed4:	d11e      	bne.n	8000f14 <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8000ed6:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <controlMotor+0xe8>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ede:	4610      	mov	r0, r2
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	f7ff fdb3 	bl	8000a4c <__aeabi_d2iz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b21c      	sxth	r4, r3
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <controlMotor+0xe8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fda9 	bl	8000a4c <__aeabi_d2iz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b21b      	sxth	r3, r3
 8000efe:	4619      	mov	r1, r3
 8000f00:	4620      	mov	r0, r4
 8000f02:	f001 fa3b 	bl	800237c <control>
            motor_break = 2;
 8000f06:	4b23      	ldr	r3, [pc, #140]	; (8000f94 <controlMotor+0xe4>)
 8000f08:	2202      	movs	r2, #2
 8000f0a:	601a      	str	r2, [r3, #0]
            count = 0;
 8000f0c:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <controlMotor+0xec>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 8000f12:	e039      	b.n	8000f88 <controlMotor+0xd8>
        else if(motor_break == 2)
 8000f14:	4b1f      	ldr	r3, [pc, #124]	; (8000f94 <controlMotor+0xe4>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2b02      	cmp	r3, #2
 8000f1a:	d124      	bne.n	8000f66 <controlMotor+0xb6>
            count ++;
 8000f1c:	4b1f      	ldr	r3, [pc, #124]	; (8000f9c <controlMotor+0xec>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a1e      	ldr	r2, [pc, #120]	; (8000f9c <controlMotor+0xec>)
 8000f24:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <controlMotor+0xe8>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2e:	4610      	mov	r0, r2
 8000f30:	4619      	mov	r1, r3
 8000f32:	f7ff fd8b 	bl	8000a4c <__aeabi_d2iz>
 8000f36:	4603      	mov	r3, r0
 8000f38:	b21c      	sxth	r4, r3
 8000f3a:	4b17      	ldr	r3, [pc, #92]	; (8000f98 <controlMotor+0xe8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000f42:	4610      	mov	r0, r2
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fd81 	bl	8000a4c <__aeabi_d2iz>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b21b      	sxth	r3, r3
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4620      	mov	r0, r4
 8000f52:	f001 fa13 	bl	800237c <control>
            if(count == 20)
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <controlMotor+0xec>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	2b14      	cmp	r3, #20
 8000f5c:	d114      	bne.n	8000f88 <controlMotor+0xd8>
                motor_break = 3;
 8000f5e:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <controlMotor+0xe4>)
 8000f60:	2203      	movs	r2, #3
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	e010      	b.n	8000f88 <controlMotor+0xd8>
        else if(motor_break == 3)
 8000f66:	4b0b      	ldr	r3, [pc, #44]	; (8000f94 <controlMotor+0xe4>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	2b03      	cmp	r3, #3
 8000f6c:	d10c      	bne.n	8000f88 <controlMotor+0xd8>
            control(0,0);
 8000f6e:	2100      	movs	r1, #0
 8000f70:	2000      	movs	r0, #0
 8000f72:	f001 fa03 	bl	800237c <control>
            count = 0;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <controlMotor+0xec>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
}
 8000f7c:	e004      	b.n	8000f88 <controlMotor+0xd8>
        disable();
 8000f7e:	f001 f961 	bl	8002244 <disable>
        motor_disable_flag = 1;
 8000f82:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <controlMotor+0xe0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	601a      	str	r2, [r3, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	bd98      	pop	{r3, r4, r7, pc}
 8000f8c:	200000a4 	.word	0x200000a4
 8000f90:	200000ac 	.word	0x200000ac
 8000f94:	200000a8 	.word	0x200000a8
 8000f98:	200000b8 	.word	0x200000b8
 8000f9c:	200000c0 	.word	0x200000c0

08000fa0 <toRPM>:


int toRPM()
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <toRPM+0xa8>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8000fac:	4b26      	ldr	r3, [pc, #152]	; (8001048 <toRPM+0xa8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000fb4:	a320      	add	r3, pc, #128	; (adr r3, 8001038 <toRPM+0x98>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff fb35 	bl	8000628 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4620      	mov	r0, r4
 8000fc4:	4629      	mov	r1, r5
 8000fc6:	f7ff f979 	bl	80002bc <__adddf3>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	4610      	mov	r0, r2
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4b1d      	ldr	r3, [pc, #116]	; (8001048 <toRPM+0xa8>)
 8000fd4:	681c      	ldr	r4, [r3, #0]
 8000fd6:	a31a      	add	r3, pc, #104	; (adr r3, 8001040 <toRPM+0xa0>)
 8000fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fdc:	f7ff fb24 	bl	8000628 <__aeabi_dmul>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	460b      	mov	r3, r1
 8000fe4:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8000fe8:	4b17      	ldr	r3, [pc, #92]	; (8001048 <toRPM+0xa8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8000ff0:	4b15      	ldr	r3, [pc, #84]	; (8001048 <toRPM+0xa8>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8000ff8:	a30f      	add	r3, pc, #60	; (adr r3, 8001038 <toRPM+0x98>)
 8000ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffe:	f7ff fb13 	bl	8000628 <__aeabi_dmul>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff f955 	bl	80002b8 <__aeabi_dsub>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <toRPM+0xa8>)
 8001018:	681c      	ldr	r4, [r3, #0]
 800101a:	a309      	add	r3, pc, #36	; (adr r3, 8001040 <toRPM+0xa0>)
 800101c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001020:	f7ff fb02 	bl	8000628 <__aeabi_dmul>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bdb0      	pop	{r4, r5, r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	0e560419 	.word	0x0e560419
 800103c:	3fcdb22d 	.word	0x3fcdb22d
 8001040:	31bcaa49 	.word	0x31bcaa49
 8001044:	40625d31 	.word	0x40625d31
 8001048:	200000b8 	.word	0x200000b8

0800104c <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b21a      	sxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3301      	adds	r3, #1
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	021b      	lsls	r3, r3, #8
 8001062:	b21b      	sxth	r3, r3
 8001064:	4313      	orrs	r3, r2
 8001066:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8001068:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff fa71 	bl	8000554 <__aeabi_i2d>
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <parseCmdvel+0x8c>)
 8001074:	681c      	ldr	r4, [r3, #0]
 8001076:	f04f 0200 	mov.w	r2, #0
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <parseCmdvel+0x90>)
 800107c:	f7ff fbfe 	bl	800087c <__aeabi_ddiv>
 8001080:	4602      	mov	r2, r0
 8001082:	460b      	mov	r3, r1
 8001084:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3302      	adds	r3, #2
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	b21a      	sxth	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3303      	adds	r3, #3
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b21b      	sxth	r3, r3
 800109a:	4313      	orrs	r3, r2
 800109c:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 800109e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff fa56 	bl	8000554 <__aeabi_i2d>
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <parseCmdvel+0x8c>)
 80010aa:	681c      	ldr	r4, [r3, #0]
 80010ac:	f04f 0200 	mov.w	r2, #0
 80010b0:	4b0a      	ldr	r3, [pc, #40]	; (80010dc <parseCmdvel+0x90>)
 80010b2:	f7ff fbe3 	bl	800087c <__aeabi_ddiv>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	791a      	ldrb	r2, [r3, #4]
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <parseCmdvel+0x94>)
 80010c4:	701a      	strb	r2, [r3, #0]
    toRPM();
 80010c6:	f7ff ff6b 	bl	8000fa0 <toRPM>
    motor_break = 1;
 80010ca:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <parseCmdvel+0x98>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	bf00      	nop
 80010d2:	3714      	adds	r7, #20
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd90      	pop	{r4, r7, pc}
 80010d8:	200000b8 	.word	0x200000b8
 80010dc:	40590000 	.word	0x40590000
 80010e0:	200000a4 	.word	0x200000a4
 80010e4:	200000a8 	.word	0x200000a8

080010e8 <sendEnc>:



void sendEnc(int id)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 80010f4:	4b5f      	ldr	r3, [pc, #380]	; (8001274 <sendEnc+0x18c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80010fc:	f04f 0200 	mov.w	r2, #0
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <sendEnc+0x190>)
 8001102:	f7ff fa91 	bl	8000628 <__aeabi_dmul>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fc9d 	bl	8000a4c <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b219      	sxth	r1, r3
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	1c5a      	adds	r2, r3, #1
 800111a:	617a      	str	r2, [r7, #20]
 800111c:	b2ca      	uxtb	r2, r1
 800111e:	3318      	adds	r3, #24
 8001120:	443b      	add	r3, r7
 8001122:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8001126:	4b53      	ldr	r3, [pc, #332]	; (8001274 <sendEnc+0x18c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b51      	ldr	r3, [pc, #324]	; (8001278 <sendEnc+0x190>)
 8001134:	f7ff fa78 	bl	8000628 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4610      	mov	r0, r2
 800113e:	4619      	mov	r1, r3
 8001140:	f7ff fc84 	bl	8000a4c <__aeabi_d2iz>
 8001144:	4603      	mov	r3, r0
 8001146:	b21b      	sxth	r3, r3
 8001148:	121b      	asrs	r3, r3, #8
 800114a:	b219      	sxth	r1, r3
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	1c5a      	adds	r2, r3, #1
 8001150:	617a      	str	r2, [r7, #20]
 8001152:	b2ca      	uxtb	r2, r1
 8001154:	3318      	adds	r3, #24
 8001156:	443b      	add	r3, r7
 8001158:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 800115c:	4b45      	ldr	r3, [pc, #276]	; (8001274 <sendEnc+0x18c>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b43      	ldr	r3, [pc, #268]	; (8001278 <sendEnc+0x190>)
 800116a:	f7ff fa5d 	bl	8000628 <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc69 	bl	8000a4c <__aeabi_d2iz>
 800117a:	4603      	mov	r3, r0
 800117c:	b219      	sxth	r1, r3
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	1c5a      	adds	r2, r3, #1
 8001182:	617a      	str	r2, [r7, #20]
 8001184:	b2ca      	uxtb	r2, r1
 8001186:	3318      	adds	r3, #24
 8001188:	443b      	add	r3, r7
 800118a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800118e:	4b39      	ldr	r3, [pc, #228]	; (8001274 <sendEnc+0x18c>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b37      	ldr	r3, [pc, #220]	; (8001278 <sendEnc+0x190>)
 800119c:	f7ff fa44 	bl	8000628 <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fc50 	bl	8000a4c <__aeabi_d2iz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	b21b      	sxth	r3, r3
 80011b0:	121b      	asrs	r3, r3, #8
 80011b2:	b219      	sxth	r1, r3
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	1c5a      	adds	r2, r3, #1
 80011b8:	617a      	str	r2, [r7, #20]
 80011ba:	b2ca      	uxtb	r2, r1
 80011bc:	3318      	adds	r3, #24
 80011be:	443b      	add	r3, r7
 80011c0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 80011c4:	4b2d      	ldr	r3, [pc, #180]	; (800127c <sendEnc+0x194>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	7c1b      	ldrb	r3, [r3, #16]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	b25a      	sxtb	r2, r3
 80011ce:	4b2b      	ldr	r3, [pc, #172]	; (800127c <sendEnc+0x194>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	7bdb      	ldrb	r3, [r3, #15]
 80011d4:	b25b      	sxtb	r3, r3
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b259      	sxtb	r1, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	1c5a      	adds	r2, r3, #1
 80011de:	617a      	str	r2, [r7, #20]
 80011e0:	b2ca      	uxtb	r2, r1
 80011e2:	3318      	adds	r3, #24
 80011e4:	443b      	add	r3, r7
 80011e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 80011ea:	4b22      	ldr	r3, [pc, #136]	; (8001274 <sendEnc+0x18c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <sendEnc+0x190>)
 80011f8:	f7ff fa16 	bl	8000628 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4610      	mov	r0, r2
 8001202:	4619      	mov	r1, r3
 8001204:	697c      	ldr	r4, [r7, #20]
 8001206:	1c63      	adds	r3, r4, #1
 8001208:	617b      	str	r3, [r7, #20]
 800120a:	f7ff fc47 	bl	8000a9c <__aeabi_d2uiz>
 800120e:	4603      	mov	r3, r0
 8001210:	b2da      	uxtb	r2, r3
 8001212:	f104 0318 	add.w	r3, r4, #24
 8001216:	443b      	add	r3, r7
 8001218:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 800121c:	4b15      	ldr	r3, [pc, #84]	; (8001274 <sendEnc+0x18c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8001224:	f04f 0200 	mov.w	r2, #0
 8001228:	4b13      	ldr	r3, [pc, #76]	; (8001278 <sendEnc+0x190>)
 800122a:	f7ff f9fd 	bl	8000628 <__aeabi_dmul>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4610      	mov	r0, r2
 8001234:	4619      	mov	r1, r3
 8001236:	697c      	ldr	r4, [r7, #20]
 8001238:	1c63      	adds	r3, r4, #1
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	f7ff fc2e 	bl	8000a9c <__aeabi_d2uiz>
 8001240:	4603      	mov	r3, r0
 8001242:	b2da      	uxtb	r2, r3
 8001244:	f104 0318 	add.w	r3, r4, #24
 8001248:	443b      	add	r3, r7
 800124a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	1c5a      	adds	r2, r3, #1
 8001252:	617a      	str	r2, [r7, #20]
 8001254:	3318      	adds	r3, #24
 8001256:	443b      	add	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f107 010c 	add.w	r1, r7, #12
 8001264:	2301      	movs	r3, #1
 8001266:	2208      	movs	r2, #8
 8001268:	f000 faf2 	bl	8001850 <sendCan>
}
 800126c:	bf00      	nop
 800126e:	371c      	adds	r7, #28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd90      	pop	{r4, r7, pc}
 8001274:	200000b8 	.word	0x200000b8
 8001278:	40590000 	.word	0x40590000
 800127c:	200000bc 	.word	0x200000bc

08001280 <toVW>:


int toVW(void)
{
 8001280:	b598      	push	{r3, r4, r7, lr}
 8001282:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 8001284:	4b2c      	ldr	r3, [pc, #176]	; (8001338 <toVW+0xb8>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800128c:	4a2a      	ldr	r2, [pc, #168]	; (8001338 <toVW+0xb8>)
 800128e:	6814      	ldr	r4, [r2, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f95f 	bl	8000554 <__aeabi_i2d>
 8001296:	4602      	mov	r2, r0
 8001298:	460b      	mov	r3, r1
 800129a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 800129e:	4b26      	ldr	r3, [pc, #152]	; (8001338 <toVW+0xb8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80012a6:	4a24      	ldr	r2, [pc, #144]	; (8001338 <toVW+0xb8>)
 80012a8:	6814      	ldr	r4, [r2, #0]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff f952 	bl	8000554 <__aeabi_i2d>
 80012b0:	4602      	mov	r2, r0
 80012b2:	460b      	mov	r3, r1
 80012b4:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 80012b8:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <toVW+0xb8>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80012c0:	4b1d      	ldr	r3, [pc, #116]	; (8001338 <toVW+0xb8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80012c8:	f7fe fff8 	bl	80002bc <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4610      	mov	r0, r2
 80012d2:	4619      	mov	r1, r3
 80012d4:	4b18      	ldr	r3, [pc, #96]	; (8001338 <toVW+0xb8>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	a313      	add	r3, pc, #76	; (adr r3, 8001328 <toVW+0xa8>)
 80012da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012de:	f7ff f9a3 	bl	8000628 <__aeabi_dmul>
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <toVW+0xb8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <toVW+0xb8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80012fa:	f7fe ffdd 	bl	80002b8 <__aeabi_dsub>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <toVW+0xb8>)
 8001308:	681c      	ldr	r4, [r3, #0]
 800130a:	a309      	add	r3, pc, #36	; (adr r3, 8001330 <toVW+0xb0>)
 800130c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001310:	f7ff f98a 	bl	8000628 <__aeabi_dmul>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	bd98      	pop	{r3, r4, r7, pc}
 8001322:	bf00      	nop
 8001324:	f3af 8000 	nop.w
 8001328:	306c65e9 	.word	0x306c65e9
 800132c:	3f6be16e 	.word	0x3f6be16e
 8001330:	5313b470 	.word	0x5313b470
 8001334:	3f8e0b32 	.word	0x3f8e0b32
 8001338:	200000b8 	.word	0x200000b8

0800133c <parseEnc>:


void parseEnc(uint8_t *msg)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2bd8      	cmp	r3, #216	; 0xd8
 800134a:	d136      	bne.n	80013ba <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	3302      	adds	r3, #2
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	b219      	sxth	r1, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3303      	adds	r3, #3
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	021b      	lsls	r3, r3, #8
 800135c:	b21a      	sxth	r2, r3
 800135e:	4b34      	ldr	r3, [pc, #208]	; (8001430 <parseEnc+0xf4>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	430a      	orrs	r2, r1
 8001364:	b212      	sxth	r2, r2
 8001366:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3305      	adds	r3, #5
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b219      	sxth	r1, r3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3306      	adds	r3, #6
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	021b      	lsls	r3, r3, #8
 800137a:	b21a      	sxth	r2, r3
 800137c:	4b2c      	ldr	r3, [pc, #176]	; (8001430 <parseEnc+0xf4>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	430a      	orrs	r2, r1
 8001382:	b212      	sxth	r2, r2
 8001384:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8001388:	4b29      	ldr	r3, [pc, #164]	; (8001430 <parseEnc+0xf4>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001390:	b29b      	uxth	r3, r3
 8001392:	425b      	negs	r3, r3
 8001394:	b29a      	uxth	r2, r3
 8001396:	4b26      	ldr	r3, [pc, #152]	; (8001430 <parseEnc+0xf4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	b212      	sxth	r2, r2
 800139c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <parseEnc+0xf8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	7852      	ldrb	r2, [r2, #1]
 80013a8:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 80013aa:	4b22      	ldr	r3, [pc, #136]	; (8001434 <parseEnc+0xf8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	7912      	ldrb	r2, [r2, #4]
 80013b2:	741a      	strb	r2, [r3, #16]

        toVW();
 80013b4:	f7ff ff64 	bl	8001280 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 80013b8:	e036      	b.n	8001428 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2bc1      	cmp	r3, #193	; 0xc1
 80013c0:	d117      	bne.n	80013f2 <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3304      	adds	r3, #4
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	3305      	adds	r3, #5
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	021b      	lsls	r3, r3, #8
 80013d2:	4313      	orrs	r3, r2
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff f8bd 	bl	8000554 <__aeabi_i2d>
 80013da:	4b15      	ldr	r3, [pc, #84]	; (8001430 <parseEnc+0xf4>)
 80013dc:	681c      	ldr	r4, [r3, #0]
 80013de:	f04f 0200 	mov.w	r2, #0
 80013e2:	4b15      	ldr	r3, [pc, #84]	; (8001438 <parseEnc+0xfc>)
 80013e4:	f7ff fa4a 	bl	800087c <__aeabi_ddiv>
 80013e8:	4602      	mov	r2, r0
 80013ea:	460b      	mov	r3, r1
 80013ec:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 80013f0:	e01a      	b.n	8001428 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2bc8      	cmp	r3, #200	; 0xc8
 80013f8:	d116      	bne.n	8001428 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3304      	adds	r3, #4
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	461a      	mov	r2, r3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	3305      	adds	r3, #5
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	4313      	orrs	r3, r2
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8a1 	bl	8000554 <__aeabi_i2d>
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <parseEnc+0xf4>)
 8001414:	681c      	ldr	r4, [r3, #0]
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	4b07      	ldr	r3, [pc, #28]	; (8001438 <parseEnc+0xfc>)
 800141c:	f7ff fa2e 	bl	800087c <__aeabi_ddiv>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	200000b8 	.word	0x200000b8
 8001434:	200000bc 	.word	0x200000bc
 8001438:	40240000 	.word	0x40240000

0800143c <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3304      	adds	r3, #4
 8001448:	781b      	ldrb	r3, [r3, #0]
 800144a:	b21a      	sxth	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	3305      	adds	r3, #5
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	b21b      	sxth	r3, r3
 8001456:	4313      	orrs	r3, r2
 8001458:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3306      	adds	r3, #6
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b21a      	sxth	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3307      	adds	r3, #7
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	b21b      	sxth	r3, r3
 800146c:	4313      	orrs	r3, r2
 800146e:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 8001470:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001474:	425b      	negs	r3, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f7ff f86c 	bl	8000554 <__aeabi_i2d>
 800147c:	f04f 0200 	mov.w	r2, #0
 8001480:	4b15      	ldr	r3, [pc, #84]	; (80014d8 <parseEnc114+0x9c>)
 8001482:	f7ff f9fb 	bl	800087c <__aeabi_ddiv>
 8001486:	4602      	mov	r2, r0
 8001488:	460b      	mov	r3, r1
 800148a:	4914      	ldr	r1, [pc, #80]	; (80014dc <parseEnc114+0xa0>)
 800148c:	680c      	ldr	r4, [r1, #0]
 800148e:	4610      	mov	r0, r2
 8001490:	4619      	mov	r1, r3
 8001492:	f7ff fadb 	bl	8000a4c <__aeabi_d2iz>
 8001496:	4603      	mov	r3, r0
 8001498:	b21b      	sxth	r3, r3
 800149a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 800149e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f856 	bl	8000554 <__aeabi_i2d>
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <parseEnc114+0x9c>)
 80014ae:	f7ff f9e5 	bl	800087c <__aeabi_ddiv>
 80014b2:	4602      	mov	r2, r0
 80014b4:	460b      	mov	r3, r1
 80014b6:	4909      	ldr	r1, [pc, #36]	; (80014dc <parseEnc114+0xa0>)
 80014b8:	680c      	ldr	r4, [r1, #0]
 80014ba:	4610      	mov	r0, r2
 80014bc:	4619      	mov	r1, r3
 80014be:	f7ff fac5 	bl	8000a4c <__aeabi_d2iz>
 80014c2:	4603      	mov	r3, r0
 80014c4:	b21b      	sxth	r3, r3
 80014c6:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 80014ca:	f7ff fed9 	bl	8001280 <toVW>
}
 80014ce:	bf00      	nop
 80014d0:	3714      	adds	r7, #20
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40240000 	.word	0x40240000
 80014dc:	200000b8 	.word	0x200000b8

080014e0 <parseState114>:

void parseState114(uint8_t *msg)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3304      	adds	r3, #4
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	b25a      	sxtb	r2, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3305      	adds	r3, #5
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	021b      	lsls	r3, r3, #8
 80014f8:	b25b      	sxtb	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b25a      	sxtb	r2, r3
 80014fe:	4b12      	ldr	r3, [pc, #72]	; (8001548 <parseState114+0x68>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	b2d2      	uxtb	r2, r2
 8001504:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	3306      	adds	r3, #6
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	b25a      	sxtb	r2, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	3307      	adds	r3, #7
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b25b      	sxtb	r3, r3
 8001518:	4313      	orrs	r3, r2
 800151a:	b25a      	sxtb	r2, r3
 800151c:	4b0a      	ldr	r3, [pc, #40]	; (8001548 <parseState114+0x68>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 8001524:	4b08      	ldr	r3, [pc, #32]	; (8001548 <parseState114+0x68>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	7bdb      	ldrb	r3, [r3, #15]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <parseState114+0x58>
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <parseState114+0x68>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	7c1b      	ldrb	r3, [r3, #16]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <parseState114+0x60>
    {
        reset();
 8001538:	f000 fed3 	bl	80022e2 <reset>
        startMotor();
 800153c:	f000 fe17 	bl	800216e <startMotor>
    }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	200000bc 	.word	0x200000bc

0800154c <spinonce>:

void spinonce(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 8001552:	4a8d      	ldr	r2, [pc, #564]	; (8001788 <spinonce+0x23c>)
 8001554:	f107 030c 	add.w	r3, r7, #12
 8001558:	e892 0003 	ldmia.w	r2, {r0, r1}
 800155c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8001560:	2300      	movs	r3, #0
 8001562:	61fb      	str	r3, [r7, #28]
//    int tmpindex = 0;

    uint32_t CanId = 0;
 8001564:	2300      	movs	r3, #0
 8001566:	61bb      	str	r3, [r7, #24]
//	double cmd_motor_rpm_right;
//    double cmd_v;
//    double cmd_w;


	CanInit(0x100,0x1104);//filter id, mask
 8001568:	f241 1104 	movw	r1, #4356	; 0x1104
 800156c:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001570:	f000 f922 	bl	80017b8 <CanInit>


	while(1)
	{
    	if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 8001574:	4b85      	ldr	r3, [pc, #532]	; (800178c <spinonce+0x240>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	1d5a      	adds	r2, r3, #5
 800157a:	4b85      	ldr	r3, [pc, #532]	; (8001790 <spinonce+0x244>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d208      	bcs.n	8001594 <spinonce+0x48>
    		toggle_seq = Tick_100ms;
 8001582:	4b83      	ldr	r3, [pc, #524]	; (8001790 <spinonce+0x244>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a81      	ldr	r2, [pc, #516]	; (800178c <spinonce+0x240>)
 8001588:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 800158a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800158e:	4881      	ldr	r0, [pc, #516]	; (8001794 <spinonce+0x248>)
 8001590:	f002 fc9b 	bl	8003eca <HAL_GPIO_TogglePin>

    	}



    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 8001594:	4b80      	ldr	r3, [pc, #512]	; (8001798 <spinonce+0x24c>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	1d1a      	adds	r2, r3, #4
 800159a:	4b80      	ldr	r3, [pc, #512]	; (800179c <spinonce+0x250>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d20c      	bcs.n	80015bc <spinonce+0x70>
    		controlmotor_seq = gTick;
 80015a2:	4b7e      	ldr	r3, [pc, #504]	; (800179c <spinonce+0x250>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a7c      	ldr	r2, [pc, #496]	; (8001798 <spinonce+0x24c>)
 80015a8:	6013      	str	r3, [r2, #0]
    		printf("hihi");
 80015aa:	487d      	ldr	r0, [pc, #500]	; (80017a0 <spinonce+0x254>)
 80015ac:	f005 ff02 	bl	80073b4 <iprintf>
    		controlMotor();
 80015b0:	f7ff fc7e 	bl	8000eb0 <controlMotor>
            sendEnc(CANID3);
 80015b4:	f240 70d1 	movw	r0, #2001	; 0x7d1
 80015b8:	f7ff fd96 	bl	80010e8 <sendEnc>
    	}


		if((Tick_100ms>sendsensor_seq)){
 80015bc:	4b74      	ldr	r3, [pc, #464]	; (8001790 <spinonce+0x244>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b78      	ldr	r3, [pc, #480]	; (80017a4 <spinonce+0x258>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	d949      	bls.n	800165c <spinonce+0x110>
			sendsensor_seq = Tick_100ms;
 80015c8:	4b71      	ldr	r3, [pc, #452]	; (8001790 <spinonce+0x244>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a75      	ldr	r2, [pc, #468]	; (80017a4 <spinonce+0x258>)
 80015ce:	6013      	str	r3, [r2, #0]
//			while(USS_tick<10){;}
//			USS_tick = 0;
//			printf("sonic value start, end, diff: %d  %d  %d\n", USS_start, USS_end, (USS_end-USS_start));
			//////////////////////////////////////////////

			buf[index++] = 0;
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	1c5a      	adds	r2, r3, #1
 80015d4:	61fa      	str	r2, [r7, #28]
 80015d6:	3320      	adds	r3, #32
 80015d8:	443b      	add	r3, r7
 80015da:	2200      	movs	r2, #0
 80015dc:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80015e0:	69fb      	ldr	r3, [r7, #28]
 80015e2:	1c5a      	adds	r2, r3, #1
 80015e4:	61fa      	str	r2, [r7, #28]
 80015e6:	3320      	adds	r3, #32
 80015e8:	443b      	add	r3, r7
 80015ea:	2200      	movs	r2, #0
 80015ec:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	1c5a      	adds	r2, r3, #1
 80015f4:	61fa      	str	r2, [r7, #28]
 80015f6:	3320      	adds	r3, #32
 80015f8:	443b      	add	r3, r7
 80015fa:	2200      	movs	r2, #0
 80015fc:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	61fa      	str	r2, [r7, #28]
 8001606:	3320      	adds	r3, #32
 8001608:	443b      	add	r3, r7
 800160a:	2200      	movs	r2, #0
 800160c:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	1c5a      	adds	r2, r3, #1
 8001614:	61fa      	str	r2, [r7, #28]
 8001616:	3320      	adds	r3, #32
 8001618:	443b      	add	r3, r7
 800161a:	2200      	movs	r2, #0
 800161c:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	1c5a      	adds	r2, r3, #1
 8001624:	61fa      	str	r2, [r7, #28]
 8001626:	3320      	adds	r3, #32
 8001628:	443b      	add	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	1c5a      	adds	r2, r3, #1
 8001634:	61fa      	str	r2, [r7, #28]
 8001636:	3320      	adds	r3, #32
 8001638:	443b      	add	r3, r7
 800163a:	2200      	movs	r2, #0
 800163c:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index] = 0;
 8001640:	1d3a      	adds	r2, r7, #4
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	4413      	add	r3, r2
 8001646:	2200      	movs	r2, #0
 8001648:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 800164a:	1d39      	adds	r1, r7, #4
 800164c:	2301      	movs	r3, #1
 800164e:	2208      	movs	r2, #8
 8001650:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8001654:	f000 f8fc 	bl	8001850 <sendCan>
			index = 0;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]


		}
		if(FLAG_RxCplt){
 800165c:	4b52      	ldr	r3, [pc, #328]	; (80017a8 <spinonce+0x25c>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d087      	beq.n	8001574 <spinonce+0x28>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00c      	b.n	8001684 <spinonce+0x138>
 800166a:	4a50      	ldr	r2, [pc, #320]	; (80017ac <spinonce+0x260>)
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	7819      	ldrb	r1, [r3, #0]
 8001672:	f107 020c 	add.w	r2, r7, #12
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	4413      	add	r3, r2
 800167a:	460a      	mov	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	2b07      	cmp	r3, #7
 8001688:	ddef      	ble.n	800166a <spinonce+0x11e>
    		FLAG_RxCplt=0;
 800168a:	4b47      	ldr	r3, [pc, #284]	; (80017a8 <spinonce+0x25c>)
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8001690:	4b47      	ldr	r3, [pc, #284]	; (80017b0 <spinonce+0x264>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <spinonce+0x264>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	d903      	bls.n	80016a4 <spinonce+0x158>
 800169c:	4b44      	ldr	r3, [pc, #272]	; (80017b0 <spinonce+0x264>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
 80016a2:	e002      	b.n	80016aa <spinonce+0x15e>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 80016a4:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <spinonce+0x264>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	61bb      	str	r3, [r7, #24]

    		switch(CanId)
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	4a41      	ldr	r2, [pc, #260]	; (80017b4 <spinonce+0x268>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d03b      	beq.n	800172a <spinonce+0x1de>
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	4a3f      	ldr	r2, [pc, #252]	; (80017b4 <spinonce+0x268>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d85c      	bhi.n	8001774 <spinonce+0x228>
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d052      	beq.n	800176a <spinonce+0x21e>
 80016c4:	69bb      	ldr	r3, [r7, #24]
 80016c6:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d852      	bhi.n	8001774 <spinonce+0x228>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04a      	beq.n	800176e <spinonce+0x222>
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80016de:	4293      	cmp	r3, r2
 80016e0:	d848      	bhi.n	8001774 <spinonce+0x228>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	f240 7201 	movw	r2, #1793	; 0x701
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d03b      	beq.n	8001764 <spinonce+0x218>
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	f240 7201 	movw	r2, #1793	; 0x701
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d83e      	bhi.n	8001774 <spinonce+0x228>
 80016f6:	69bb      	ldr	r3, [r7, #24]
 80016f8:	f240 5281 	movw	r2, #1409	; 0x581
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01a      	beq.n	8001736 <spinonce+0x1ea>
 8001700:	69bb      	ldr	r3, [r7, #24]
 8001702:	f240 5281 	movw	r2, #1409	; 0x581
 8001706:	4293      	cmp	r3, r2
 8001708:	d834      	bhi.n	8001774 <spinonce+0x228>
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001710:	4293      	cmp	r3, r2
 8001712:	d004      	beq.n	800171e <spinonce+0x1d2>
 8001714:	69bb      	ldr	r3, [r7, #24]
 8001716:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800171a:	4293      	cmp	r3, r2
            	 parseCmdvel(canbuf);
                break;

            case CANID2:
                //parseState(msg);
                break;
 800171c:	e02a      	b.n	8001774 <spinonce+0x228>
            	 parseCmdvel(canbuf);
 800171e:	f107 030c 	add.w	r3, r7, #12
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff fc92 	bl	800104c <parseCmdvel>
                break;
 8001728:	e024      	b.n	8001774 <spinonce+0x228>
                break;
            case CANID6:
                //parsePmm(msg);
                break;
            case CANID7:
            	parseEnc(canbuf);
 800172a:	f107 030c 	add.w	r3, r7, #12
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff fe04 	bl	800133c <parseEnc>
                break;
 8001734:	e01e      	b.n	8001774 <spinonce+0x228>
            case MOTOR114_RES_ID:

                if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8001736:	7b7b      	ldrb	r3, [r7, #13]
 8001738:	2b6c      	cmp	r3, #108	; 0x6c
 800173a:	d107      	bne.n	800174c <spinonce+0x200>
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	2b60      	cmp	r3, #96	; 0x60
 8001740:	d104      	bne.n	800174c <spinonce+0x200>
                    parseEnc114(canbuf);
 8001742:	f107 030c 	add.w	r3, r7, #12
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff fe78 	bl	800143c <parseEnc114>
                if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 800174c:	7b7b      	ldrb	r3, [r7, #13]
 800174e:	2b3f      	cmp	r3, #63	; 0x3f
 8001750:	d10f      	bne.n	8001772 <spinonce+0x226>
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	2b60      	cmp	r3, #96	; 0x60
 8001756:	d10c      	bne.n	8001772 <spinonce+0x226>
                    parseState114(canbuf);
 8001758:	f107 030c 	add.w	r3, r7, #12
 800175c:	4618      	mov	r0, r3
 800175e:	f7ff febf 	bl	80014e0 <parseState114>
                break;
 8001762:	e006      	b.n	8001772 <spinonce+0x226>
            case MOTOR114_START_ID:
                startMotor();
 8001764:	f000 fd03 	bl	800216e <startMotor>
                break;
 8001768:	e004      	b.n	8001774 <spinonce+0x228>
                break;
 800176a:	bf00      	nop
 800176c:	e002      	b.n	8001774 <spinonce+0x228>
                break;
 800176e:	bf00      	nop
 8001770:	e000      	b.n	8001774 <spinonce+0x228>
                break;
 8001772:	bf00      	nop
    		}

		    g_tCan_Rx_Header.StdId=0;
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <spinonce+0x264>)
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 800177a:	4b0d      	ldr	r3, [pc, #52]	; (80017b0 <spinonce+0x264>)
 800177c:	2200      	movs	r2, #0
 800177e:	605a      	str	r2, [r3, #4]
			CanId = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	61bb      	str	r3, [r7, #24]
    	if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 8001784:	e6f6      	b.n	8001574 <spinonce+0x28>
 8001786:	bf00      	nop
 8001788:	080082f0 	.word	0x080082f0
 800178c:	20000098 	.word	0x20000098
 8001790:	20000094 	.word	0x20000094
 8001794:	40020400 	.word	0x40020400
 8001798:	200000a0 	.word	0x200000a0
 800179c:	20000090 	.word	0x20000090
 80017a0:	080082e8 	.word	0x080082e8
 80017a4:	2000009c 	.word	0x2000009c
 80017a8:	200000c4 	.word	0x200000c4
 80017ac:	200000c8 	.word	0x200000c8
 80017b0:	200000d0 	.word	0x200000d0
 80017b4:	00b8b701 	.word	0x00b8b701

080017b8 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <CanInit+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <CanInit+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <CanInit+0x90>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <CanInit+0x90>)
 80017da:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <CanInit+0x90>)
 80017e6:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <CanInit+0x90>)
 80017ee:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <CanInit+0x90>)
 80017fa:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <CanInit+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <CanInit+0x90>)
 8001804:	2201      	movs	r2, #1
 8001806:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <CanInit+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <CanInit+0x94>)
 8001810:	f001 fb36 	bl	8002e80 <HAL_CAN_Start>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <CanInit+0x66>
 800181a:	f000 fc09 	bl	8002030 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800181e:	2102      	movs	r1, #2
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <CanInit+0x94>)
 8001822:	f001 fd93 	bl	800334c <HAL_CAN_ActivateNotification>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <CanInit+0x76>
 800182c:	e7fe      	b.n	800182c <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800182e:	4906      	ldr	r1, [pc, #24]	; (8001848 <CanInit+0x90>)
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <CanInit+0x94>)
 8001832:	f001 fa45 	bl	8002cc0 <HAL_CAN_ConfigFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 800183c:	f000 fbf8 	bl	8002030 <Error_Handler>
    }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	200000ec 	.word	0x200000ec
 800184c:	20000114 	.word	0x20000114

08001850 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	460b      	mov	r3, r1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	4613      	mov	r3, r2
 8001864:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <sendCan+0x2c>
 8001878:	2304      	movs	r3, #4
 800187a:	e000      	b.n	800187e <sendCan+0x2e>
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <sendCan+0x70>)
 800188c:	f001 fc17 	bl	80030be <HAL_CAN_GetTxMailboxesFreeLevel>
 8001890:	4603      	mov	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	f107 0114 	add.w	r1, r7, #20
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <sendCan+0x70>)
 80018a6:	f001 fb2f 	bl	8002f08 <HAL_CAN_AddTxMessage>
 80018aa:	4603      	mov	r3, r0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d000      	beq.n	80018b6 <sendCan+0x66>
 80018b4:	e7fe      	b.n	80018b4 <sendCan+0x64>
    }
}
 80018b6:	bf00      	nop
 80018b8:	3730      	adds	r7, #48	; 0x30
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	20000114 	.word	0x20000114

080018c4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018d4:	f001 fc28 	bl	8003128 <HAL_CAN_GetRxMessage>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d000      	beq.n	80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 80018de:	e7fe      	b.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018e8:	6013      	str	r3, [r2, #0]

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200000c8 	.word	0x200000c8
 80018f8:	200000d0 	.word	0x200000d0
 80018fc:	20000114 	.word	0x20000114
 8001900:	200000c4 	.word	0x200000c4

08001904 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	60f8      	str	r0, [r7, #12]
 800190c:	60b9      	str	r1, [r7, #8]
 800190e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	b29a      	uxth	r2, r3
 8001914:	2364      	movs	r3, #100	; 0x64
 8001916:	68b9      	ldr	r1, [r7, #8]
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <_write+0x24>)
 800191a:	f004 fcfb 	bl	8006314 <HAL_UART_Transmit>
	return (len);
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3710      	adds	r7, #16
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	200002f0 	.word	0x200002f0

0800192c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001930:	f001 f86d 	bl	8002a0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001934:	f000 f822 	bl	800197c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001938:	f000 fa54 	bl	8001de4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800193c:	f000 fa22 	bl	8001d84 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001940:	f000 f888 	bl	8001a54 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001944:	f000 f8bc 	bl	8001ac0 <MX_TIM2_Init>
  MX_UART8_Init();
 8001948:	f000 f9ec 	bl	8001d24 <MX_UART8_Init>
  MX_TIM6_Init();
 800194c:	f000 f97e 	bl	8001c4c <MX_TIM6_Init>
  MX_TIM7_Init();
 8001950:	f000 f9b2 	bl	8001cb8 <MX_TIM7_Init>
  MX_TIM5_Init();
 8001954:	f000 f92c 	bl	8001bb0 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//tmp timer, 2khz
 8001958:	4805      	ldr	r0, [pc, #20]	; (8001970 <main+0x44>)
 800195a:	f003 fc4b 	bl	80051f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//tmp timer, 100hz
 800195e:	4805      	ldr	r0, [pc, #20]	; (8001974 <main+0x48>)
 8001960:	f003 fc48 	bl	80051f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim7);//tmp timer, 1khz
 8001964:	4804      	ldr	r0, [pc, #16]	; (8001978 <main+0x4c>)
 8001966:	f003 fc45 	bl	80051f4 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 800196a:	f7ff fdef 	bl	800154c <spinonce>
 800196e:	e7fc      	b.n	800196a <main+0x3e>
 8001970:	20000188 	.word	0x20000188
 8001974:	200001d4 	.word	0x200001d4
 8001978:	20000220 	.word	0x20000220

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b094      	sub	sp, #80	; 0x50
 8001980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001982:	f107 0320 	add.w	r3, r7, #32
 8001986:	2230      	movs	r2, #48	; 0x30
 8001988:	2100      	movs	r1, #0
 800198a:	4618      	mov	r0, r3
 800198c:	f005 fd0a 	bl	80073a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001990:	f107 030c 	add.w	r3, r7, #12
 8001994:	2200      	movs	r2, #0
 8001996:	601a      	str	r2, [r3, #0]
 8001998:	605a      	str	r2, [r3, #4]
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	60da      	str	r2, [r3, #12]
 800199e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a0:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <SystemClock_Config+0xd0>)
 80019a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a4:	4a29      	ldr	r2, [pc, #164]	; (8001a4c <SystemClock_Config+0xd0>)
 80019a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019aa:	6413      	str	r3, [r2, #64]	; 0x40
 80019ac:	4b27      	ldr	r3, [pc, #156]	; (8001a4c <SystemClock_Config+0xd0>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <SystemClock_Config+0xd4>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <SystemClock_Config+0xd4>)
 80019be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <SystemClock_Config+0xd4>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019cc:	607b      	str	r3, [r7, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019d0:	2301      	movs	r3, #1
 80019d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019d4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019da:	2302      	movs	r3, #2
 80019dc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019e4:	2304      	movs	r3, #4
 80019e6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019e8:	23d8      	movs	r3, #216	; 0xd8
 80019ea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019ec:	2302      	movs	r3, #2
 80019ee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019f0:	2302      	movs	r3, #2
 80019f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019f4:	f107 0320 	add.w	r3, r7, #32
 80019f8:	4618      	mov	r0, r3
 80019fa:	f002 fae9 	bl	8003fd0 <HAL_RCC_OscConfig>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d001      	beq.n	8001a08 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001a04:	f000 fb14 	bl	8002030 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001a08:	f002 fa92 	bl	8003f30 <HAL_PWREx_EnableOverDrive>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001a12:	f000 fb0d 	bl	8002030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a16:	230f      	movs	r3, #15
 8001a18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001a2e:	f107 030c 	add.w	r3, r7, #12
 8001a32:	2107      	movs	r1, #7
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fd6f 	bl	8004518 <HAL_RCC_ClockConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001a40:	f000 faf6 	bl	8002030 <Error_Handler>
  }
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	; 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a5a:	4a18      	ldr	r2, [pc, #96]	; (8001abc <MX_CAN1_Init+0x68>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a60:	221b      	movs	r2, #27
 8001a62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a70:	4b11      	ldr	r3, [pc, #68]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a72:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a96:	4b08      	ldr	r3, [pc, #32]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001aa2:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_CAN1_Init+0x64>)
 8001aa4:	f001 f810 	bl	8002ac8 <HAL_CAN_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001aae:	f000 fabf 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000114 	.word	0x20000114
 8001abc:	40006400 	.word	0x40006400

08001ac0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af2:	4b2e      	ldr	r3, [pc, #184]	; (8001bac <MX_TIM2_Init+0xec>)
 8001af4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001af8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001afa:	4b2c      	ldr	r3, [pc, #176]	; (8001bac <MX_TIM2_Init+0xec>)
 8001afc:	2201      	movs	r2, #1
 8001afe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 843-1;
 8001b06:	4b29      	ldr	r3, [pc, #164]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b08:	f240 324a 	movw	r2, #842	; 0x34a
 8001b0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0e:	4b27      	ldr	r3, [pc, #156]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b14:	4b25      	ldr	r3, [pc, #148]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b1a:	4824      	ldr	r0, [pc, #144]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b1c:	f003 fb12 	bl	8005144 <HAL_TIM_Base_Init>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b26:	f000 fa83 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b34:	4619      	mov	r1, r3
 8001b36:	481d      	ldr	r0, [pc, #116]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b38:	f003 fe68 	bl	800580c <HAL_TIM_ConfigClockSource>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d001      	beq.n	8001b46 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b42:	f000 fa75 	bl	8002030 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b46:	4819      	ldr	r0, [pc, #100]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b48:	f003 fbcc 	bl	80052e4 <HAL_TIM_PWM_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b52:	f000 fa6d 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	f107 031c 	add.w	r3, r7, #28
 8001b62:	4619      	mov	r1, r3
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b66:	f004 fadb 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b70:	f000 fa5e 	bl	8002030 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b74:	2360      	movs	r3, #96	; 0x60
 8001b76:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001b78:	f241 3387 	movw	r3, #4999	; 0x1387
 8001b7c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b86:	463b      	mov	r3, r7
 8001b88:	2200      	movs	r2, #0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	4807      	ldr	r0, [pc, #28]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b8e:	f003 fd29 	bl	80055e4 <HAL_TIM_PWM_ConfigChannel>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001b98:	f000 fa4a 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b9c:	4803      	ldr	r0, [pc, #12]	; (8001bac <MX_TIM2_Init+0xec>)
 8001b9e:	f000 fd29 	bl	80025f4 <HAL_TIM_MspPostInit>

}
 8001ba2:	bf00      	nop
 8001ba4:	3738      	adds	r7, #56	; 0x38
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	2000013c 	.word	0x2000013c

08001bb0 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b088      	sub	sp, #32
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bb6:	f107 0310 	add.w	r3, r7, #16
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <MX_TIM5_Init+0x98>)
 8001bd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8001bd4:	4b1b      	ldr	r3, [pc, #108]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bd6:	226b      	movs	r2, #107	; 0x6b
 8001bd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bda:	4b1a      	ldr	r3, [pc, #104]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8001be0:	4b18      	ldr	r3, [pc, #96]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001be2:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001be6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bee:	4b15      	ldr	r3, [pc, #84]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001bf4:	4813      	ldr	r0, [pc, #76]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001bf6:	f003 faa5 	bl	8005144 <HAL_TIM_Base_Init>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001c00:	f000 fa16 	bl	8002030 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c08:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001c0a:	f107 0310 	add.w	r3, r7, #16
 8001c0e:	4619      	mov	r1, r3
 8001c10:	480c      	ldr	r0, [pc, #48]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001c12:	f003 fdfb 	bl	800580c <HAL_TIM_ConfigClockSource>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001c1c:	f000 fa08 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c20:	2300      	movs	r3, #0
 8001c22:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4805      	ldr	r0, [pc, #20]	; (8001c44 <MX_TIM5_Init+0x94>)
 8001c2e:	f004 fa77 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001c38:	f000 f9fa 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	20000188 	.word	0x20000188
 8001c48:	40000c00 	.word	0x40000c00

08001c4c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	605a      	str	r2, [r3, #4]
 8001c5a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001c5c:	4b14      	ldr	r3, [pc, #80]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c5e:	4a15      	ldr	r2, [pc, #84]	; (8001cb4 <MX_TIM6_Init+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8001c62:	4b13      	ldr	r3, [pc, #76]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c64:	226b      	movs	r2, #107	; 0x6b
 8001c66:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b11      	ldr	r3, [pc, #68]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001c6e:	4b10      	ldr	r3, [pc, #64]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001c74:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001c7c:	480c      	ldr	r0, [pc, #48]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c7e:	f003 fa61 	bl	8005144 <HAL_TIM_Base_Init>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001c88:	f000 f9d2 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c90:	2300      	movs	r3, #0
 8001c92:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	4619      	mov	r1, r3
 8001c98:	4805      	ldr	r0, [pc, #20]	; (8001cb0 <MX_TIM6_Init+0x64>)
 8001c9a:	f004 fa41 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ca4:	f000 f9c4 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ca8:	bf00      	nop
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	200001d4 	.word	0x200001d4
 8001cb4:	40001000 	.word	0x40001000

08001cb8 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	605a      	str	r2, [r3, #4]
 8001cc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <MX_TIM7_Init+0x68>)
 8001ccc:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001cd0:	226b      	movs	r2, #107	; 0x6b
 8001cd2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cd4:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001cda:	4b10      	ldr	r3, [pc, #64]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ce0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ce8:	480c      	ldr	r0, [pc, #48]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001cea:	f003 fa2b 	bl	8005144 <HAL_TIM_Base_Init>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001cf4:	f000 f99c 	bl	8002030 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_TIM7_Init+0x64>)
 8001d06:	f004 fa0b 	bl	8006120 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001d10:	f000 f98e 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20000220 	.word	0x20000220
 8001d20:	40001400 	.word	0x40001400

08001d24 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001d28:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <MX_UART8_Init+0x5c>)
 8001d2c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d34:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d4a:	220c      	movs	r2, #12
 8001d4c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d4e:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001d66:	4805      	ldr	r0, [pc, #20]	; (8001d7c <MX_UART8_Init+0x58>)
 8001d68:	f004 fa86 	bl	8006278 <HAL_UART_Init>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d001      	beq.n	8001d76 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001d72:	f000 f95d 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	2000026c 	.word	0x2000026c
 8001d80:	40007c00 	.word	0x40007c00

08001d84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d88:	4b14      	ldr	r3, [pc, #80]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001d8a:	4a15      	ldr	r2, [pc, #84]	; (8001de0 <MX_USART1_UART_Init+0x5c>)
 8001d8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d8e:	4b13      	ldr	r3, [pc, #76]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001d90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d96:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d9c:	4b0f      	ldr	r3, [pc, #60]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001da2:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001da8:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001daa:	220c      	movs	r2, #12
 8001dac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db4:	4b09      	ldr	r3, [pc, #36]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001dba:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001dc0:	4b06      	ldr	r3, [pc, #24]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dc6:	4805      	ldr	r0, [pc, #20]	; (8001ddc <MX_USART1_UART_Init+0x58>)
 8001dc8:	f004 fa56 	bl	8006278 <HAL_UART_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001dd2:	f000 f92d 	bl	8002030 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	200002f0 	.word	0x200002f0
 8001de0:	40011000 	.word	0x40011000

08001de4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b08c      	sub	sp, #48	; 0x30
 8001de8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]
 8001df8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dfa:	4b86      	ldr	r3, [pc, #536]	; (8002014 <MX_GPIO_Init+0x230>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	4a85      	ldr	r2, [pc, #532]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e00:	f043 0320 	orr.w	r3, r3, #32
 8001e04:	6313      	str	r3, [r2, #48]	; 0x30
 8001e06:	4b83      	ldr	r3, [pc, #524]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	f003 0320 	and.w	r3, r3, #32
 8001e0e:	61bb      	str	r3, [r7, #24]
 8001e10:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e12:	4b80      	ldr	r3, [pc, #512]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	4a7f      	ldr	r2, [pc, #508]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e1e:	4b7d      	ldr	r3, [pc, #500]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e26:	617b      	str	r3, [r7, #20]
 8001e28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	4b7a      	ldr	r3, [pc, #488]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	4a79      	ldr	r2, [pc, #484]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6313      	str	r3, [r2, #48]	; 0x30
 8001e36:	4b77      	ldr	r3, [pc, #476]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e42:	4b74      	ldr	r3, [pc, #464]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a73      	ldr	r2, [pc, #460]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e48:	f043 0310 	orr.w	r3, r3, #16
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b71      	ldr	r3, [pc, #452]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0310 	and.w	r3, r3, #16
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e5a:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	4a6d      	ldr	r2, [pc, #436]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e60:	f043 0302 	orr.w	r3, r3, #2
 8001e64:	6313      	str	r3, [r2, #48]	; 0x30
 8001e66:	4b6b      	ldr	r3, [pc, #428]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	60bb      	str	r3, [r7, #8]
 8001e70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e72:	4b68      	ldr	r3, [pc, #416]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a67      	ldr	r2, [pc, #412]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e78:	f043 0308 	orr.w	r3, r3, #8
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b65      	ldr	r3, [pc, #404]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e8a:	4b62      	ldr	r3, [pc, #392]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a61      	ldr	r2, [pc, #388]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b5f      	ldr	r3, [pc, #380]	; (8002014 <MX_GPIO_Init+0x230>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	603b      	str	r3, [r7, #0]
 8001ea0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	2180      	movs	r1, #128	; 0x80
 8001ea6:	485c      	ldr	r0, [pc, #368]	; (8002018 <MX_GPIO_Init+0x234>)
 8001ea8:	f001 fff6 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8001eac:	2200      	movs	r2, #0
 8001eae:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001eb2:	485a      	ldr	r0, [pc, #360]	; (800201c <MX_GPIO_Init+0x238>)
 8001eb4:	f001 fff0 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001ebe:	4858      	ldr	r0, [pc, #352]	; (8002020 <MX_GPIO_Init+0x23c>)
 8001ec0:	f001 ffea 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8001eca:	4856      	ldr	r0, [pc, #344]	; (8002024 <MX_GPIO_Init+0x240>)
 8001ecc:	f001 ffe4 	bl	8003e98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	484c      	ldr	r0, [pc, #304]	; (8002018 <MX_GPIO_Init+0x234>)
 8001ee8:	f001 fe2a 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001eec:	231e      	movs	r3, #30
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ef8:	f107 031c 	add.w	r3, r7, #28
 8001efc:	4619      	mov	r1, r3
 8001efe:	484a      	ldr	r0, [pc, #296]	; (8002028 <MX_GPIO_Init+0x244>)
 8001f00:	f001 fe1e 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001f04:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f12:	f107 031c 	add.w	r3, r7, #28
 8001f16:	4619      	mov	r1, r3
 8001f18:	4844      	ldr	r0, [pc, #272]	; (800202c <MX_GPIO_Init+0x248>)
 8001f1a:	f001 fe11 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8001f1e:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f24:	2301      	movs	r3, #1
 8001f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f30:	f107 031c 	add.w	r3, r7, #28
 8001f34:	4619      	mov	r1, r3
 8001f36:	4839      	ldr	r0, [pc, #228]	; (800201c <MX_GPIO_Init+0x238>)
 8001f38:	f001 fe02 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8001f3c:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f42:	2301      	movs	r3, #1
 8001f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f46:	2300      	movs	r3, #0
 8001f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f4e:	f107 031c 	add.w	r3, r7, #28
 8001f52:	4619      	mov	r1, r3
 8001f54:	4832      	ldr	r0, [pc, #200]	; (8002020 <MX_GPIO_Init+0x23c>)
 8001f56:	f001 fdf3 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8001f5a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001f5e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f60:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f6a:	f107 031c 	add.w	r3, r7, #28
 8001f6e:	4619      	mov	r1, r3
 8001f70:	482b      	ldr	r0, [pc, #172]	; (8002020 <MX_GPIO_Init+0x23c>)
 8001f72:	f001 fde5 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001f76:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001f7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f80:	2300      	movs	r3, #0
 8001f82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f84:	2300      	movs	r3, #0
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f8c:	f107 031c 	add.w	r3, r7, #28
 8001f90:	4619      	mov	r1, r3
 8001f92:	4823      	ldr	r0, [pc, #140]	; (8002020 <MX_GPIO_Init+0x23c>)
 8001f94:	f001 fdd4 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 8001f98:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8001f9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001faa:	f107 031c 	add.w	r3, r7, #28
 8001fae:	4619      	mov	r1, r3
 8001fb0:	481c      	ldr	r0, [pc, #112]	; (8002024 <MX_GPIO_Init+0x240>)
 8001fb2:	f001 fdc5 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8001fb6:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001fba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fbc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fc6:	f107 031c 	add.w	r3, r7, #28
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <MX_GPIO_Init+0x240>)
 8001fce:	f001 fdb7 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 8001fd2:	2340      	movs	r3, #64	; 0x40
 8001fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fd6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	480e      	ldr	r0, [pc, #56]	; (8002020 <MX_GPIO_Init+0x23c>)
 8001fe8:	f001 fdaa 	bl	8003b40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001fec:	2200      	movs	r2, #0
 8001fee:	2100      	movs	r1, #0
 8001ff0:	2017      	movs	r0, #23
 8001ff2:	f001 fcdc 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001ff6:	2017      	movs	r0, #23
 8001ff8:	f001 fcf5 	bl	80039e6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	2100      	movs	r1, #0
 8002000:	2028      	movs	r0, #40	; 0x28
 8002002:	f001 fcd4 	bl	80039ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002006:	2028      	movs	r0, #40	; 0x28
 8002008:	f001 fced 	bl	80039e6 <HAL_NVIC_EnableIRQ>

}
 800200c:	bf00      	nop
 800200e:	3730      	adds	r7, #48	; 0x30
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	40021400 	.word	0x40021400
 800201c:	40020400 	.word	0x40020400
 8002020:	40020c00 	.word	0x40020c00
 8002024:	40020800 	.word	0x40020800
 8002028:	40020000 	.word	0x40020000
 800202c:	40021000 	.word	0x40021000

08002030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002034:	b672      	cpsid	i
}
 8002036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002038:	e7fe      	b.n	8002038 <Error_Handler+0x8>

0800203a <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b084      	sub	sp, #16
 800203e:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	1c5a      	adds	r2, r3, #1
 8002048:	60fa      	str	r2, [r7, #12]
 800204a:	3310      	adds	r3, #16
 800204c:	443b      	add	r3, r7
 800204e:	222f      	movs	r2, #47	; 0x2f
 8002050:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	1c5a      	adds	r2, r3, #1
 8002058:	60fa      	str	r2, [r7, #12]
 800205a:	3310      	adds	r3, #16
 800205c:	443b      	add	r3, r7
 800205e:	2260      	movs	r2, #96	; 0x60
 8002060:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	1c5a      	adds	r2, r3, #1
 8002068:	60fa      	str	r2, [r7, #12]
 800206a:	3310      	adds	r3, #16
 800206c:	443b      	add	r3, r7
 800206e:	2260      	movs	r2, #96	; 0x60
 8002070:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1c5a      	adds	r2, r3, #1
 8002078:	60fa      	str	r2, [r7, #12]
 800207a:	3310      	adds	r3, #16
 800207c:	443b      	add	r3, r7
 800207e:	2200      	movs	r2, #0
 8002080:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1c5a      	adds	r2, r3, #1
 8002088:	60fa      	str	r2, [r7, #12]
 800208a:	3310      	adds	r3, #16
 800208c:	443b      	add	r3, r7
 800208e:	2203      	movs	r2, #3
 8002090:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	1c5a      	adds	r2, r3, #1
 8002098:	60fa      	str	r2, [r7, #12]
 800209a:	3310      	adds	r3, #16
 800209c:	443b      	add	r3, r7
 800209e:	2200      	movs	r2, #0
 80020a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	60fa      	str	r2, [r7, #12]
 80020aa:	3310      	adds	r3, #16
 80020ac:	443b      	add	r3, r7
 80020ae:	2200      	movs	r2, #0
 80020b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80020b4:	1d3a      	adds	r2, r7, #4
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	4413      	add	r3, r2
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80020be:	1d39      	adds	r1, r7, #4
 80020c0:	2300      	movs	r3, #0
 80020c2:	2208      	movs	r2, #8
 80020c4:	f240 6001 	movw	r0, #1537	; 0x601
 80020c8:	f7ff fbc2 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
}
 80020cc:	bf00      	nop
 80020ce:	3710      	adds	r7, #16
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <synchronousMode>:

void synchronousMode()
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	60fa      	str	r2, [r7, #12]
 80020e4:	3310      	adds	r3, #16
 80020e6:	443b      	add	r3, r7
 80020e8:	222b      	movs	r2, #43	; 0x2b
 80020ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	1c5a      	adds	r2, r3, #1
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	3310      	adds	r3, #16
 80020f6:	443b      	add	r3, r7
 80020f8:	220f      	movs	r2, #15
 80020fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1c5a      	adds	r2, r3, #1
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	3310      	adds	r3, #16
 8002106:	443b      	add	r3, r7
 8002108:	2220      	movs	r2, #32
 800210a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	1c5a      	adds	r2, r3, #1
 8002112:	60fa      	str	r2, [r7, #12]
 8002114:	3310      	adds	r3, #16
 8002116:	443b      	add	r3, r7
 8002118:	2200      	movs	r2, #0
 800211a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	1c5a      	adds	r2, r3, #1
 8002122:	60fa      	str	r2, [r7, #12]
 8002124:	3310      	adds	r3, #16
 8002126:	443b      	add	r3, r7
 8002128:	2201      	movs	r2, #1
 800212a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	60fa      	str	r2, [r7, #12]
 8002134:	3310      	adds	r3, #16
 8002136:	443b      	add	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	1c5a      	adds	r2, r3, #1
 8002142:	60fa      	str	r2, [r7, #12]
 8002144:	3310      	adds	r3, #16
 8002146:	443b      	add	r3, r7
 8002148:	2200      	movs	r2, #0
 800214a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800214e:	1d3a      	adds	r2, r7, #4
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	4413      	add	r3, r2
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002158:	1d39      	adds	r1, r7, #4
 800215a:	2300      	movs	r3, #0
 800215c:	2208      	movs	r2, #8
 800215e:	f240 6001 	movw	r0, #1537	; 0x601
 8002162:	f7ff fb75 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
}
 8002166:	bf00      	nop
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <startMotor>:
}



void startMotor()
{
 800216e:	b580      	push	{r7, lr}
 8002170:	af00      	add	r7, sp, #0
    enable();
 8002172:	f000 f807 	bl	8002184 <enable>
    velocityMode();
 8002176:	f7ff ff60 	bl	800203a <velocityMode>
    synchronousMode();
 800217a:	f7ff ffab 	bl	80020d4 <synchronousMode>
}
 800217e:	bf00      	nop
 8002180:	bd80      	pop	{r7, pc}
	...

08002184 <enable>:

void enable()
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 800218a:	4b2d      	ldr	r3, [pc, #180]	; (8002240 <enable+0xbc>)
 800218c:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	e04d      	b.n	8002230 <enable+0xac>
    {
        int index = 0;
 8002194:	2300      	movs	r3, #0
 8002196:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1c5a      	adds	r2, r3, #1
 800219c:	613a      	str	r2, [r7, #16]
 800219e:	3318      	adds	r3, #24
 80021a0:	443b      	add	r3, r7
 80021a2:	222b      	movs	r2, #43	; 0x2b
 80021a4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1c5a      	adds	r2, r3, #1
 80021ac:	613a      	str	r2, [r7, #16]
 80021ae:	3318      	adds	r3, #24
 80021b0:	443b      	add	r3, r7
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	1c5a      	adds	r2, r3, #1
 80021bc:	613a      	str	r2, [r7, #16]
 80021be:	3318      	adds	r3, #24
 80021c0:	443b      	add	r3, r7
 80021c2:	2260      	movs	r2, #96	; 0x60
 80021c4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	1c5a      	adds	r2, r3, #1
 80021cc:	613a      	str	r2, [r7, #16]
 80021ce:	3318      	adds	r3, #24
 80021d0:	443b      	add	r3, r7
 80021d2:	2200      	movs	r2, #0
 80021d4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	1c5a      	adds	r2, r3, #1
 80021dc:	613a      	str	r2, [r7, #16]
 80021de:	1d39      	adds	r1, r7, #4
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	440a      	add	r2, r1
 80021e4:	7812      	ldrb	r2, [r2, #0]
 80021e6:	3318      	adds	r3, #24
 80021e8:	443b      	add	r3, r7
 80021ea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	1c5a      	adds	r2, r3, #1
 80021f2:	613a      	str	r2, [r7, #16]
 80021f4:	3318      	adds	r3, #24
 80021f6:	443b      	add	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1c5a      	adds	r2, r3, #1
 8002202:	613a      	str	r2, [r7, #16]
 8002204:	3318      	adds	r3, #24
 8002206:	443b      	add	r3, r7
 8002208:	2200      	movs	r2, #0
 800220a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800220e:	f107 0208 	add.w	r2, r7, #8
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	4413      	add	r3, r2
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800221a:	f107 0108 	add.w	r1, r7, #8
 800221e:	2300      	movs	r3, #0
 8002220:	2208      	movs	r2, #8
 8002222:	f240 6001 	movw	r0, #1537	; 0x601
 8002226:	f7ff fb13 	bl	8001850 <sendCan>
    for(int i =0;i<4;i++)
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3301      	adds	r3, #1
 800222e:	617b      	str	r3, [r7, #20]
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	2b03      	cmp	r3, #3
 8002234:	ddae      	ble.n	8002194 <enable+0x10>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
    }
}
 8002236:	bf00      	nop
 8002238:	bf00      	nop
 800223a:	3718      	adds	r7, #24
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}
 8002240:	0f070600 	.word	0x0f070600

08002244 <disable>:

void disable()
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	1c5a      	adds	r2, r3, #1
 8002252:	60fa      	str	r2, [r7, #12]
 8002254:	3310      	adds	r3, #16
 8002256:	443b      	add	r3, r7
 8002258:	222b      	movs	r2, #43	; 0x2b
 800225a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	1c5a      	adds	r2, r3, #1
 8002262:	60fa      	str	r2, [r7, #12]
 8002264:	3310      	adds	r3, #16
 8002266:	443b      	add	r3, r7
 8002268:	2240      	movs	r2, #64	; 0x40
 800226a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	1c5a      	adds	r2, r3, #1
 8002272:	60fa      	str	r2, [r7, #12]
 8002274:	3310      	adds	r3, #16
 8002276:	443b      	add	r3, r7
 8002278:	2260      	movs	r2, #96	; 0x60
 800227a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	60fa      	str	r2, [r7, #12]
 8002284:	3310      	adds	r3, #16
 8002286:	443b      	add	r3, r7
 8002288:	2200      	movs	r2, #0
 800228a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	1c5a      	adds	r2, r3, #1
 8002292:	60fa      	str	r2, [r7, #12]
 8002294:	3310      	adds	r3, #16
 8002296:	443b      	add	r3, r7
 8002298:	2200      	movs	r2, #0
 800229a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	1c5a      	adds	r2, r3, #1
 80022a2:	60fa      	str	r2, [r7, #12]
 80022a4:	3310      	adds	r3, #16
 80022a6:	443b      	add	r3, r7
 80022a8:	2200      	movs	r2, #0
 80022aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	1c5a      	adds	r2, r3, #1
 80022b2:	60fa      	str	r2, [r7, #12]
 80022b4:	3310      	adds	r3, #16
 80022b6:	443b      	add	r3, r7
 80022b8:	2200      	movs	r2, #0
 80022ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80022be:	1d3a      	adds	r2, r7, #4
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	4413      	add	r3, r2
 80022c4:	2200      	movs	r2, #0
 80022c6:	701a      	strb	r2, [r3, #0]
    index = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80022cc:	1d39      	adds	r1, r7, #4
 80022ce:	2300      	movs	r3, #0
 80022d0:	2208      	movs	r2, #8
 80022d2:	f240 6001 	movw	r0, #1537	; 0x601
 80022d6:	f7ff fabb 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <reset>:

void reset()
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b084      	sub	sp, #16
 80022e6:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60fa      	str	r2, [r7, #12]
 80022f2:	3310      	adds	r3, #16
 80022f4:	443b      	add	r3, r7
 80022f6:	222b      	movs	r2, #43	; 0x2b
 80022f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1c5a      	adds	r2, r3, #1
 8002300:	60fa      	str	r2, [r7, #12]
 8002302:	3310      	adds	r3, #16
 8002304:	443b      	add	r3, r7
 8002306:	2240      	movs	r2, #64	; 0x40
 8002308:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1c5a      	adds	r2, r3, #1
 8002310:	60fa      	str	r2, [r7, #12]
 8002312:	3310      	adds	r3, #16
 8002314:	443b      	add	r3, r7
 8002316:	2260      	movs	r2, #96	; 0x60
 8002318:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1c5a      	adds	r2, r3, #1
 8002320:	60fa      	str	r2, [r7, #12]
 8002322:	3310      	adds	r3, #16
 8002324:	443b      	add	r3, r7
 8002326:	2200      	movs	r2, #0
 8002328:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	1c5a      	adds	r2, r3, #1
 8002330:	60fa      	str	r2, [r7, #12]
 8002332:	3310      	adds	r3, #16
 8002334:	443b      	add	r3, r7
 8002336:	2280      	movs	r2, #128	; 0x80
 8002338:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	1c5a      	adds	r2, r3, #1
 8002340:	60fa      	str	r2, [r7, #12]
 8002342:	3310      	adds	r3, #16
 8002344:	443b      	add	r3, r7
 8002346:	2200      	movs	r2, #0
 8002348:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1c5a      	adds	r2, r3, #1
 8002350:	60fa      	str	r2, [r7, #12]
 8002352:	3310      	adds	r3, #16
 8002354:	443b      	add	r3, r7
 8002356:	2200      	movs	r2, #0
 8002358:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800235c:	1d3a      	adds	r2, r7, #4
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4413      	add	r3, r2
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002366:	1d39      	adds	r1, r7, #4
 8002368:	2300      	movs	r3, #0
 800236a:	2208      	movs	r2, #8
 800236c:	f240 6001 	movw	r0, #1537	; 0x601
 8002370:	f7ff fa6e 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
}
 8002374:	bf00      	nop
 8002376:	3710      	adds	r7, #16
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <control>:
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}

void control(int16_t lrpm,int16_t rrpm)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	4603      	mov	r3, r0
 8002384:	460a      	mov	r2, r1
 8002386:	80fb      	strh	r3, [r7, #6]
 8002388:	4613      	mov	r3, r2
 800238a:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 800238c:	88fb      	ldrh	r3, [r7, #6]
 800238e:	425b      	negs	r3, r3
 8002390:	b29b      	uxth	r3, r3
 8002392:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	1c5a      	adds	r2, r3, #1
 800239c:	617a      	str	r2, [r7, #20]
 800239e:	3318      	adds	r3, #24
 80023a0:	443b      	add	r3, r7
 80023a2:	2223      	movs	r2, #35	; 0x23
 80023a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	1c5a      	adds	r2, r3, #1
 80023ac:	617a      	str	r2, [r7, #20]
 80023ae:	3318      	adds	r3, #24
 80023b0:	443b      	add	r3, r7
 80023b2:	22ff      	movs	r2, #255	; 0xff
 80023b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	617a      	str	r2, [r7, #20]
 80023be:	3318      	adds	r3, #24
 80023c0:	443b      	add	r3, r7
 80023c2:	2260      	movs	r2, #96	; 0x60
 80023c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	1c5a      	adds	r2, r3, #1
 80023cc:	617a      	str	r2, [r7, #20]
 80023ce:	3318      	adds	r3, #24
 80023d0:	443b      	add	r3, r7
 80023d2:	2203      	movs	r2, #3
 80023d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	617a      	str	r2, [r7, #20]
 80023de:	88fa      	ldrh	r2, [r7, #6]
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	3318      	adds	r3, #24
 80023e4:	443b      	add	r3, r7
 80023e6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 80023ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023ee:	121b      	asrs	r3, r3, #8
 80023f0:	b219      	sxth	r1, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	1c5a      	adds	r2, r3, #1
 80023f6:	617a      	str	r2, [r7, #20]
 80023f8:	b2ca      	uxtb	r2, r1
 80023fa:	3318      	adds	r3, #24
 80023fc:	443b      	add	r3, r7
 80023fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	1c5a      	adds	r2, r3, #1
 8002406:	617a      	str	r2, [r7, #20]
 8002408:	88ba      	ldrh	r2, [r7, #4]
 800240a:	b2d2      	uxtb	r2, r2
 800240c:	3318      	adds	r3, #24
 800240e:	443b      	add	r3, r7
 8002410:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 8002414:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002418:	121b      	asrs	r3, r3, #8
 800241a:	b21b      	sxth	r3, r3
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	f107 020c 	add.w	r2, r7, #12
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	4413      	add	r3, r2
 8002426:	460a      	mov	r2, r1
 8002428:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800242a:	f107 010c 	add.w	r1, r7, #12
 800242e:	2300      	movs	r3, #0
 8002430:	2208      	movs	r2, #8
 8002432:	f240 6001 	movw	r0, #1537	; 0x601
 8002436:	f7ff fa0b 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	4b0f      	ldr	r3, [pc, #60]	; (8002488 <HAL_MspInit+0x44>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a0e      	ldr	r2, [pc, #56]	; (8002488 <HAL_MspInit+0x44>)
 8002450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_MspInit+0x44>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245e:	607b      	str	r3, [r7, #4]
 8002460:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002462:	4b09      	ldr	r3, [pc, #36]	; (8002488 <HAL_MspInit+0x44>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002466:	4a08      	ldr	r2, [pc, #32]	; (8002488 <HAL_MspInit+0x44>)
 8002468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800246c:	6453      	str	r3, [r2, #68]	; 0x44
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <HAL_MspInit+0x44>)
 8002470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002476:	603b      	str	r3, [r7, #0]
 8002478:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800

0800248c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b08a      	sub	sp, #40	; 0x28
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	605a      	str	r2, [r3, #4]
 800249e:	609a      	str	r2, [r3, #8]
 80024a0:	60da      	str	r2, [r3, #12]
 80024a2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1b      	ldr	r2, [pc, #108]	; (8002518 <HAL_CAN_MspInit+0x8c>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d12f      	bne.n	800250e <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024ae:	4b1b      	ldr	r3, [pc, #108]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024b8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024c6:	4b15      	ldr	r3, [pc, #84]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024cc:	f043 0308 	orr.w	r3, r3, #8
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b12      	ldr	r3, [pc, #72]	; (800251c <HAL_CAN_MspInit+0x90>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	60fb      	str	r3, [r7, #12]
 80024dc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024de:	2303      	movs	r3, #3
 80024e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e6:	2300      	movs	r3, #0
 80024e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ea:	2303      	movs	r3, #3
 80024ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024ee:	2309      	movs	r3, #9
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80024f2:	f107 0314 	add.w	r3, r7, #20
 80024f6:	4619      	mov	r1, r3
 80024f8:	4809      	ldr	r0, [pc, #36]	; (8002520 <HAL_CAN_MspInit+0x94>)
 80024fa:	f001 fb21 	bl	8003b40 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	2014      	movs	r0, #20
 8002504:	f001 fa53 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002508:	2014      	movs	r0, #20
 800250a:	f001 fa6c 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	; 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40006400 	.word	0x40006400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020c00 	.word	0x40020c00

08002524 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b086      	sub	sp, #24
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002534:	d10c      	bne.n	8002550 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	4a2a      	ldr	r2, [pc, #168]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	6413      	str	r3, [r2, #64]	; 0x40
 8002542:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800254e:	e044      	b.n	80025da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a24      	ldr	r2, [pc, #144]	; (80025e8 <HAL_TIM_Base_MspInit+0xc4>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10c      	bne.n	8002574 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800255a:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 800255c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255e:	4a21      	ldr	r2, [pc, #132]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002560:	f043 0308 	orr.w	r3, r3, #8
 8002564:	6413      	str	r3, [r2, #64]	; 0x40
 8002566:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	f003 0308 	and.w	r3, r3, #8
 800256e:	613b      	str	r3, [r7, #16]
 8002570:	693b      	ldr	r3, [r7, #16]
}
 8002572:	e032      	b.n	80025da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a1c      	ldr	r2, [pc, #112]	; (80025ec <HAL_TIM_Base_MspInit+0xc8>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d114      	bne.n	80025a8 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800257e:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002582:	4a18      	ldr	r2, [pc, #96]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 8002584:	f043 0310 	orr.w	r3, r3, #16
 8002588:	6413      	str	r3, [r2, #64]	; 0x40
 800258a:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	f003 0310 	and.w	r3, r3, #16
 8002592:	60fb      	str	r3, [r7, #12]
 8002594:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002596:	2200      	movs	r2, #0
 8002598:	2100      	movs	r1, #0
 800259a:	2036      	movs	r0, #54	; 0x36
 800259c:	f001 fa07 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80025a0:	2036      	movs	r0, #54	; 0x36
 80025a2:	f001 fa20 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 80025a6:	e018      	b.n	80025da <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a10      	ldr	r2, [pc, #64]	; (80025f0 <HAL_TIM_Base_MspInit+0xcc>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d113      	bne.n	80025da <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80025b2:	4b0c      	ldr	r3, [pc, #48]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a0b      	ldr	r2, [pc, #44]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 80025b8:	f043 0320 	orr.w	r3, r3, #32
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_TIM_Base_MspInit+0xc0>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f003 0320 	and.w	r3, r3, #32
 80025c6:	60bb      	str	r3, [r7, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80025ca:	2200      	movs	r2, #0
 80025cc:	2100      	movs	r1, #0
 80025ce:	2037      	movs	r0, #55	; 0x37
 80025d0:	f001 f9ed 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80025d4:	2037      	movs	r0, #55	; 0x37
 80025d6:	f001 fa06 	bl	80039e6 <HAL_NVIC_EnableIRQ>
}
 80025da:	bf00      	nop
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	40000c00 	.word	0x40000c00
 80025ec:	40001000 	.word	0x40001000
 80025f0:	40001400 	.word	0x40001400

080025f4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 030c 	add.w	r3, r7, #12
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002614:	d11b      	bne.n	800264e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002616:	4b10      	ldr	r3, [pc, #64]	; (8002658 <HAL_TIM_MspPostInit+0x64>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261a:	4a0f      	ldr	r2, [pc, #60]	; (8002658 <HAL_TIM_MspPostInit+0x64>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	; 0x30
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <HAL_TIM_MspPostInit+0x64>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	60bb      	str	r3, [r7, #8]
 800262c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800262e:	2320      	movs	r3, #32
 8002630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800263e:	2301      	movs	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	4804      	ldr	r0, [pc, #16]	; (800265c <HAL_TIM_MspPostInit+0x68>)
 800264a:	f001 fa79 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800264e:	bf00      	nop
 8002650:	3720      	adds	r7, #32
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	40023800 	.word	0x40023800
 800265c:	40020000 	.word	0x40020000

08002660 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b0ac      	sub	sp, #176	; 0xb0
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002668:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
 8002670:	605a      	str	r2, [r3, #4]
 8002672:	609a      	str	r2, [r3, #8]
 8002674:	60da      	str	r2, [r3, #12]
 8002676:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002678:	f107 0318 	add.w	r3, r7, #24
 800267c:	2284      	movs	r2, #132	; 0x84
 800267e:	2100      	movs	r1, #0
 8002680:	4618      	mov	r0, r3
 8002682:	f004 fe8f 	bl	80073a4 <memset>
  if(huart->Instance==UART8)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a46      	ldr	r2, [pc, #280]	; (80027a4 <HAL_UART_MspInit+0x144>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d144      	bne.n	800271a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002690:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002694:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002696:	2300      	movs	r3, #0
 8002698:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800269a:	f107 0318 	add.w	r3, r7, #24
 800269e:	4618      	mov	r0, r3
 80026a0:	f002 f960 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80026aa:	f7ff fcc1 	bl	8002030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80026ae:	4b3e      	ldr	r3, [pc, #248]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	4a3d      	ldr	r2, [pc, #244]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026b8:	6413      	str	r3, [r2, #64]	; 0x40
 80026ba:	4b3b      	ldr	r3, [pc, #236]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80026c2:	617b      	str	r3, [r7, #20]
 80026c4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80026c6:	4b38      	ldr	r3, [pc, #224]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ca:	4a37      	ldr	r2, [pc, #220]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026cc:	f043 0310 	orr.w	r3, r3, #16
 80026d0:	6313      	str	r3, [r2, #48]	; 0x30
 80026d2:	4b35      	ldr	r3, [pc, #212]	; (80027a8 <HAL_UART_MspInit+0x148>)
 80026d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	613b      	str	r3, [r7, #16]
 80026dc:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80026de:	2303      	movs	r3, #3
 80026e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e4:	2302      	movs	r3, #2
 80026e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f0:	2303      	movs	r3, #3
 80026f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80026f6:	2308      	movs	r3, #8
 80026f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026fc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002700:	4619      	mov	r1, r3
 8002702:	482a      	ldr	r0, [pc, #168]	; (80027ac <HAL_UART_MspInit+0x14c>)
 8002704:	f001 fa1c 	bl	8003b40 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002708:	2200      	movs	r2, #0
 800270a:	2100      	movs	r1, #0
 800270c:	2053      	movs	r0, #83	; 0x53
 800270e:	f001 f94e 	bl	80039ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002712:	2053      	movs	r0, #83	; 0x53
 8002714:	f001 f967 	bl	80039e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002718:	e03f      	b.n	800279a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a24      	ldr	r2, [pc, #144]	; (80027b0 <HAL_UART_MspInit+0x150>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d13a      	bne.n	800279a <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002724:	2340      	movs	r3, #64	; 0x40
 8002726:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002728:	2300      	movs	r3, #0
 800272a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	4618      	mov	r0, r3
 8002732:	f002 f917 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 800273c:	f7ff fc78 	bl	8002030 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002740:	4b19      	ldr	r3, [pc, #100]	; (80027a8 <HAL_UART_MspInit+0x148>)
 8002742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002744:	4a18      	ldr	r2, [pc, #96]	; (80027a8 <HAL_UART_MspInit+0x148>)
 8002746:	f043 0310 	orr.w	r3, r3, #16
 800274a:	6453      	str	r3, [r2, #68]	; 0x44
 800274c:	4b16      	ldr	r3, [pc, #88]	; (80027a8 <HAL_UART_MspInit+0x148>)
 800274e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002750:	f003 0310 	and.w	r3, r3, #16
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002758:	4b13      	ldr	r3, [pc, #76]	; (80027a8 <HAL_UART_MspInit+0x148>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a12      	ldr	r2, [pc, #72]	; (80027a8 <HAL_UART_MspInit+0x148>)
 800275e:	f043 0302 	orr.w	r3, r3, #2
 8002762:	6313      	str	r3, [r2, #48]	; 0x30
 8002764:	4b10      	ldr	r3, [pc, #64]	; (80027a8 <HAL_UART_MspInit+0x148>)
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	60bb      	str	r3, [r7, #8]
 800276e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002776:	2302      	movs	r3, #2
 8002778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277c:	2300      	movs	r3, #0
 800277e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002788:	2307      	movs	r3, #7
 800278a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002792:	4619      	mov	r1, r3
 8002794:	4807      	ldr	r0, [pc, #28]	; (80027b4 <HAL_UART_MspInit+0x154>)
 8002796:	f001 f9d3 	bl	8003b40 <HAL_GPIO_Init>
}
 800279a:	bf00      	nop
 800279c:	37b0      	adds	r7, #176	; 0xb0
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40007c00 	.word	0x40007c00
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40011000 	.word	0x40011000
 80027b4:	40020400 	.word	0x40020400

080027b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027bc:	e7fe      	b.n	80027bc <NMI_Handler+0x4>

080027be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027be:	b480      	push	{r7}
 80027c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027c2:	e7fe      	b.n	80027c2 <HardFault_Handler+0x4>

080027c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80027c8:	e7fe      	b.n	80027c8 <MemManage_Handler+0x4>

080027ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80027ca:	b480      	push	{r7}
 80027cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80027ce:	e7fe      	b.n	80027ce <BusFault_Handler+0x4>

080027d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80027d4:	e7fe      	b.n	80027d4 <UsageFault_Handler+0x4>

080027d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80027d6:	b480      	push	{r7}
 80027d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80027da:	bf00      	nop
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr

080027e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027e8:	bf00      	nop
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr

080027f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027f2:	b480      	push	{r7}
 80027f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002804:	f000 f940 	bl	8002a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002808:	bf00      	nop
 800280a:	bd80      	pop	{r7, pc}

0800280c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002810:	4802      	ldr	r0, [pc, #8]	; (800281c <CAN1_RX0_IRQHandler+0x10>)
 8002812:	f000 fdc1 	bl	8003398 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002816:	bf00      	nop
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	20000114 	.word	0x20000114

08002820 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8002824:	2040      	movs	r0, #64	; 0x40
 8002826:	f001 fb6b 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800282a:	2080      	movs	r0, #128	; 0x80
 800282c:	f001 fb68 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002830:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002834:	f001 fb64 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8002840:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002844:	f001 fb5c 	bl	8003f00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002848:	bf00      	nop
 800284a:	bd80      	pop	{r7, pc}

0800284c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002850:	4802      	ldr	r0, [pc, #8]	; (800285c <TIM6_DAC_IRQHandler+0x10>)
 8002852:	f002 fda8 	bl	80053a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	200001d4 	.word	0x200001d4

08002860 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002864:	4802      	ldr	r0, [pc, #8]	; (8002870 <TIM7_IRQHandler+0x10>)
 8002866:	f002 fd9e 	bl	80053a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20000220 	.word	0x20000220

08002874 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002878:	4802      	ldr	r0, [pc, #8]	; (8002884 <UART8_IRQHandler+0x10>)
 800287a:	f003 fddf 	bl	800643c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 800287e:	bf00      	nop
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	2000026c 	.word	0x2000026c

08002888 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002894:	2300      	movs	r3, #0
 8002896:	617b      	str	r3, [r7, #20]
 8002898:	e00a      	b.n	80028b0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800289a:	f3af 8000 	nop.w
 800289e:	4601      	mov	r1, r0
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	1c5a      	adds	r2, r3, #1
 80028a4:	60ba      	str	r2, [r7, #8]
 80028a6:	b2ca      	uxtb	r2, r1
 80028a8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3301      	adds	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	dbf0      	blt.n	800289a <_read+0x12>
	}

return len;
 80028b8:	687b      	ldr	r3, [r7, #4]
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3718      	adds	r7, #24
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80028c2:	b480      	push	{r7}
 80028c4:	b083      	sub	sp, #12
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
	return -1;
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr

080028da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028da:	b480      	push	{r7}
 80028dc:	b083      	sub	sp, #12
 80028de:	af00      	add	r7, sp, #0
 80028e0:	6078      	str	r0, [r7, #4]
 80028e2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80028ea:	605a      	str	r2, [r3, #4]
	return 0;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	370c      	adds	r7, #12
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr

080028fa <_isatty>:

int _isatty(int file)
{
 80028fa:	b480      	push	{r7}
 80028fc:	b083      	sub	sp, #12
 80028fe:	af00      	add	r7, sp, #0
 8002900:	6078      	str	r0, [r7, #4]
	return 1;
 8002902:	2301      	movs	r3, #1
}
 8002904:	4618      	mov	r0, r3
 8002906:	370c      	adds	r7, #12
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
	return 0;
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	3714      	adds	r7, #20
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002934:	4a14      	ldr	r2, [pc, #80]	; (8002988 <_sbrk+0x5c>)
 8002936:	4b15      	ldr	r3, [pc, #84]	; (800298c <_sbrk+0x60>)
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002940:	4b13      	ldr	r3, [pc, #76]	; (8002990 <_sbrk+0x64>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d102      	bne.n	800294e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002948:	4b11      	ldr	r3, [pc, #68]	; (8002990 <_sbrk+0x64>)
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <_sbrk+0x68>)
 800294c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <_sbrk+0x64>)
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4413      	add	r3, r2
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	429a      	cmp	r2, r3
 800295a:	d207      	bcs.n	800296c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800295c:	f004 fcf8 	bl	8007350 <__errno>
 8002960:	4603      	mov	r3, r0
 8002962:	220c      	movs	r2, #12
 8002964:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002966:	f04f 33ff 	mov.w	r3, #4294967295
 800296a:	e009      	b.n	8002980 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800296c:	4b08      	ldr	r3, [pc, #32]	; (8002990 <_sbrk+0x64>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002972:	4b07      	ldr	r3, [pc, #28]	; (8002990 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	4a05      	ldr	r2, [pc, #20]	; (8002990 <_sbrk+0x64>)
 800297c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800297e:	68fb      	ldr	r3, [r7, #12]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20050000 	.word	0x20050000
 800298c:	00000400 	.word	0x00000400
 8002990:	20000374 	.word	0x20000374
 8002994:	20000390 	.word	0x20000390

08002998 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800299c:	4b06      	ldr	r3, [pc, #24]	; (80029b8 <SystemInit+0x20>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029a2:	4a05      	ldr	r2, [pc, #20]	; (80029b8 <SystemInit+0x20>)
 80029a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop
 80029b8:	e000ed00 	.word	0xe000ed00

080029bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80029bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029c0:	480d      	ldr	r0, [pc, #52]	; (80029f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029c2:	490e      	ldr	r1, [pc, #56]	; (80029fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029c8:	e002      	b.n	80029d0 <LoopCopyDataInit>

080029ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ce:	3304      	adds	r3, #4

080029d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029d4:	d3f9      	bcc.n	80029ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029d6:	4a0b      	ldr	r2, [pc, #44]	; (8002a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029d8:	4c0b      	ldr	r4, [pc, #44]	; (8002a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029dc:	e001      	b.n	80029e2 <LoopFillZerobss>

080029de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029e0:	3204      	adds	r2, #4

080029e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029e4:	d3fb      	bcc.n	80029de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029e6:	f7ff ffd7 	bl	8002998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029ea:	f004 fcb7 	bl	800735c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ee:	f7fe ff9d 	bl	800192c <main>
  bx  lr    
 80029f2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80029f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029fc:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8002a00:	080083b8 	.word	0x080083b8
  ldr r2, =_sbss
 8002a04:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002a08:	2000038c 	.word	0x2000038c

08002a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a0c:	e7fe      	b.n	8002a0c <ADC_IRQHandler>

08002a0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a0e:	b580      	push	{r7, lr}
 8002a10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a12:	2003      	movs	r0, #3
 8002a14:	f000 ffc0 	bl	8003998 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a18:	200f      	movs	r0, #15
 8002a1a:	f000 f805 	bl	8002a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a1e:	f7ff fd11 	bl	8002444 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a30:	4b12      	ldr	r3, [pc, #72]	; (8002a7c <HAL_InitTick+0x54>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_InitTick+0x58>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a46:	4618      	mov	r0, r3
 8002a48:	f000 ffdb 	bl	8003a02 <HAL_SYSTICK_Config>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d001      	beq.n	8002a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e00e      	b.n	8002a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2b0f      	cmp	r3, #15
 8002a5a:	d80a      	bhi.n	8002a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	6879      	ldr	r1, [r7, #4]
 8002a60:	f04f 30ff 	mov.w	r0, #4294967295
 8002a64:	f000 ffa3 	bl	80039ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a68:	4a06      	ldr	r2, [pc, #24]	; (8002a84 <HAL_InitTick+0x5c>)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	20000000 	.word	0x20000000
 8002a80:	20000008 	.word	0x20000008
 8002a84:	20000004 	.word	0x20000004

08002a88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <HAL_IncTick+0x20>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	461a      	mov	r2, r3
 8002a92:	4b06      	ldr	r3, [pc, #24]	; (8002aac <HAL_IncTick+0x24>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4413      	add	r3, r2
 8002a98:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_IncTick+0x24>)
 8002a9a:	6013      	str	r3, [r2, #0]
}
 8002a9c:	bf00      	nop
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	20000008 	.word	0x20000008
 8002aac:	20000378 	.word	0x20000378

08002ab0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return uwTick;
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_GetTick+0x14>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	20000378 	.word	0x20000378

08002ac8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e0ed      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d102      	bne.n	8002aec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002ae6:	6878      	ldr	r0, [r7, #4]
 8002ae8:	f7ff fcd0 	bl	800248c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002afc:	f7ff ffd8 	bl	8002ab0 <HAL_GetTick>
 8002b00:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b02:	e012      	b.n	8002b2a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b04:	f7ff ffd4 	bl	8002ab0 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b0a      	cmp	r3, #10
 8002b10:	d90b      	bls.n	8002b2a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2205      	movs	r2, #5
 8002b22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e0c5      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0e5      	beq.n	8002b04 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f022 0202 	bic.w	r2, r2, #2
 8002b46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002b48:	f7ff ffb2 	bl	8002ab0 <HAL_GetTick>
 8002b4c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b4e:	e012      	b.n	8002b76 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002b50:	f7ff ffae 	bl	8002ab0 <HAL_GetTick>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	1ad3      	subs	r3, r2, r3
 8002b5a:	2b0a      	cmp	r3, #10
 8002b5c:	d90b      	bls.n	8002b76 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2205      	movs	r2, #5
 8002b6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e09f      	b.n	8002cb6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1e5      	bne.n	8002b50 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7e1b      	ldrb	r3, [r3, #24]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d108      	bne.n	8002b9e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	e007      	b.n	8002bae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	7e5b      	ldrb	r3, [r3, #25]
 8002bb2:	2b01      	cmp	r3, #1
 8002bb4:	d108      	bne.n	8002bc8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e007      	b.n	8002bd8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bd6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	7e9b      	ldrb	r3, [r3, #26]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0220 	orr.w	r2, r2, #32
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	e007      	b.n	8002c02 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f022 0220 	bic.w	r2, r2, #32
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	7edb      	ldrb	r3, [r3, #27]
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d108      	bne.n	8002c1c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f022 0210 	bic.w	r2, r2, #16
 8002c18:	601a      	str	r2, [r3, #0]
 8002c1a:	e007      	b.n	8002c2c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0210 	orr.w	r2, r2, #16
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	7f1b      	ldrb	r3, [r3, #28]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d108      	bne.n	8002c46 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0208 	orr.w	r2, r2, #8
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e007      	b.n	8002c56 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0208 	bic.w	r2, r2, #8
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7f5b      	ldrb	r3, [r3, #29]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d108      	bne.n	8002c70 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0204 	orr.w	r2, r2, #4
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	e007      	b.n	8002c80 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0204 	bic.w	r2, r2, #4
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689a      	ldr	r2, [r3, #8]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	431a      	orrs	r2, r3
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	431a      	orrs	r2, r3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	ea42 0103 	orr.w	r1, r2, r3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	1e5a      	subs	r2, r3, #1
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002cb4:	2300      	movs	r3, #0
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b087      	sub	sp, #28
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002cd8:	7cfb      	ldrb	r3, [r7, #19]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d003      	beq.n	8002ce6 <HAL_CAN_ConfigFilter+0x26>
 8002cde:	7cfb      	ldrb	r3, [r7, #19]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	f040 80be 	bne.w	8002e62 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002ce6:	4b65      	ldr	r3, [pc, #404]	; (8002e7c <HAL_CAN_ConfigFilter+0x1bc>)
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002cf0:	f043 0201 	orr.w	r2, r3, #1
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002d00:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	021b      	lsls	r3, r3, #8
 8002d16:	431a      	orrs	r2, r3
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	695b      	ldr	r3, [r3, #20]
 8002d22:	f003 031f 	and.w	r3, r3, #31
 8002d26:	2201      	movs	r2, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	43db      	mvns	r3, r3
 8002d38:	401a      	ands	r2, r3
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d123      	bne.n	8002d90 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	401a      	ands	r2, r3
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d66:	683a      	ldr	r2, [r7, #0]
 8002d68:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002d6a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	3248      	adds	r2, #72	; 0x48
 8002d70:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002d84:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002d86:	6979      	ldr	r1, [r7, #20]
 8002d88:	3348      	adds	r3, #72	; 0x48
 8002d8a:	00db      	lsls	r3, r3, #3
 8002d8c:	440b      	add	r3, r1
 8002d8e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d122      	bne.n	8002dde <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	431a      	orrs	r2, r3
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002db8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	3248      	adds	r2, #72	; 0x48
 8002dbe:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002dd2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002dd4:	6979      	ldr	r1, [r7, #20]
 8002dd6:	3348      	adds	r3, #72	; 0x48
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	440b      	add	r3, r1
 8002ddc:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d109      	bne.n	8002dfa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	43db      	mvns	r3, r3
 8002df0:	401a      	ands	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002df8:	e007      	b.n	8002e0a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	431a      	orrs	r2, r3
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d109      	bne.n	8002e26 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	43db      	mvns	r3, r3
 8002e1c:	401a      	ands	r2, r3
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002e24:	e007      	b.n	8002e36 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d107      	bne.n	8002e4e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002e54:	f023 0201 	bic.w	r2, r3, #1
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	e006      	b.n	8002e70 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
  }
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40006400 	.word	0x40006400

08002e80 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8e:	b2db      	uxtb	r3, r3
 8002e90:	2b01      	cmp	r3, #1
 8002e92:	d12e      	bne.n	8002ef2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2202      	movs	r2, #2
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f022 0201 	bic.w	r2, r2, #1
 8002eaa:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002eac:	f7ff fe00 	bl	8002ab0 <HAL_GetTick>
 8002eb0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eb2:	e012      	b.n	8002eda <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eb4:	f7ff fdfc 	bl	8002ab0 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b0a      	cmp	r3, #10
 8002ec0:	d90b      	bls.n	8002eda <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2205      	movs	r2, #5
 8002ed2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e012      	b.n	8002f00 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f003 0301 	and.w	r3, r3, #1
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1e5      	bne.n	8002eb4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	e006      	b.n	8002f00 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
  }
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b089      	sub	sp, #36	; 0x24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
 8002f14:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f1c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f26:	7ffb      	ldrb	r3, [r7, #31]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d003      	beq.n	8002f34 <HAL_CAN_AddTxMessage+0x2c>
 8002f2c:	7ffb      	ldrb	r3, [r7, #31]
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	f040 80b8 	bne.w	80030a4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10a      	bne.n	8002f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d105      	bne.n	8002f54 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	f000 80a0 	beq.w	8003094 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	0e1b      	lsrs	r3, r3, #24
 8002f58:	f003 0303 	and.w	r3, r3, #3
 8002f5c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d907      	bls.n	8002f74 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f68:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e09e      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002f74:	2201      	movs	r2, #1
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	409a      	lsls	r2, r3
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002f90:	68f9      	ldr	r1, [r7, #12]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	431a      	orrs	r2, r3
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	3318      	adds	r3, #24
 8002f9a:	011b      	lsls	r3, r3, #4
 8002f9c:	440b      	add	r3, r1
 8002f9e:	601a      	str	r2, [r3, #0]
 8002fa0:	e00f      	b.n	8002fc2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fac:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb2:	68f9      	ldr	r1, [r7, #12]
 8002fb4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002fb6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	3318      	adds	r3, #24
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	440b      	add	r3, r1
 8002fc0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6819      	ldr	r1, [r3, #0]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	691a      	ldr	r2, [r3, #16]
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3318      	adds	r3, #24
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	440b      	add	r3, r1
 8002fd2:	3304      	adds	r3, #4
 8002fd4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	7d1b      	ldrb	r3, [r3, #20]
 8002fda:	2b01      	cmp	r3, #1
 8002fdc:	d111      	bne.n	8003002 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	3318      	adds	r3, #24
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	4413      	add	r3, r2
 8002fea:	3304      	adds	r3, #4
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	68fa      	ldr	r2, [r7, #12]
 8002ff0:	6811      	ldr	r1, [r2, #0]
 8002ff2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	3318      	adds	r3, #24
 8002ffa:	011b      	lsls	r3, r3, #4
 8002ffc:	440b      	add	r3, r1
 8002ffe:	3304      	adds	r3, #4
 8003000:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3307      	adds	r3, #7
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	061a      	lsls	r2, r3, #24
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	3306      	adds	r3, #6
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	041b      	lsls	r3, r3, #16
 8003012:	431a      	orrs	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3305      	adds	r3, #5
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	021b      	lsls	r3, r3, #8
 800301c:	4313      	orrs	r3, r2
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	3204      	adds	r2, #4
 8003022:	7812      	ldrb	r2, [r2, #0]
 8003024:	4610      	mov	r0, r2
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	6811      	ldr	r1, [r2, #0]
 800302a:	ea43 0200 	orr.w	r2, r3, r0
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	440b      	add	r3, r1
 8003034:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003038:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	3303      	adds	r3, #3
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	061a      	lsls	r2, r3, #24
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3302      	adds	r3, #2
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	041b      	lsls	r3, r3, #16
 800304a:	431a      	orrs	r2, r3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3301      	adds	r3, #1
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	4313      	orrs	r3, r2
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	7812      	ldrb	r2, [r2, #0]
 800305a:	4610      	mov	r0, r2
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	6811      	ldr	r1, [r2, #0]
 8003060:	ea43 0200 	orr.w	r2, r3, r0
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	011b      	lsls	r3, r3, #4
 8003068:	440b      	add	r3, r1
 800306a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800306e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3318      	adds	r3, #24
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	6811      	ldr	r1, [r2, #0]
 8003082:	f043 0201 	orr.w	r2, r3, #1
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	3318      	adds	r3, #24
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	440b      	add	r3, r1
 800308e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003090:	2300      	movs	r3, #0
 8003092:	e00e      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003098:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e006      	b.n	80030b2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
  }
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3724      	adds	r7, #36	; 0x24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr

080030be <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80030be:	b480      	push	{r7}
 80030c0:	b085      	sub	sp, #20
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80030c6:	2300      	movs	r3, #0
 80030c8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80030d2:	7afb      	ldrb	r3, [r7, #11]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d002      	beq.n	80030de <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80030d8:	7afb      	ldrb	r3, [r7, #11]
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d11d      	bne.n	800311a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d002      	beq.n	80030f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	3301      	adds	r3, #1
 80030f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d002      	beq.n	8003106 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	3301      	adds	r3, #1
 8003118:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3714      	adds	r7, #20
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr

08003128 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f893 3020 	ldrb.w	r3, [r3, #32]
 800313c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800313e:	7dfb      	ldrb	r3, [r7, #23]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d003      	beq.n	800314c <HAL_CAN_GetRxMessage+0x24>
 8003144:	7dfb      	ldrb	r3, [r7, #23]
 8003146:	2b02      	cmp	r3, #2
 8003148:	f040 80f3 	bne.w	8003332 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d10e      	bne.n	8003170 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	2b00      	cmp	r3, #0
 800315e:	d116      	bne.n	800318e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0e7      	b.n	8003340 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	691b      	ldr	r3, [r3, #16]
 8003176:	f003 0303 	and.w	r3, r3, #3
 800317a:	2b00      	cmp	r3, #0
 800317c:	d107      	bne.n	800318e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003182:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e0d8      	b.n	8003340 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	331b      	adds	r3, #27
 8003196:	011b      	lsls	r3, r3, #4
 8003198:	4413      	add	r3, r2
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0204 	and.w	r2, r3, #4
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10c      	bne.n	80031c6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	331b      	adds	r3, #27
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	4413      	add	r3, r2
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	0d5b      	lsrs	r3, r3, #21
 80031bc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	601a      	str	r2, [r3, #0]
 80031c4:	e00b      	b.n	80031de <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	331b      	adds	r3, #27
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	4413      	add	r3, r2
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	08db      	lsrs	r3, r3, #3
 80031d6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	331b      	adds	r3, #27
 80031e6:	011b      	lsls	r3, r3, #4
 80031e8:	4413      	add	r3, r2
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0202 	and.w	r2, r3, #2
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681a      	ldr	r2, [r3, #0]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	331b      	adds	r3, #27
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 020f 	and.w	r2, r3, #15
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	331b      	adds	r3, #27
 8003214:	011b      	lsls	r3, r3, #4
 8003216:	4413      	add	r3, r2
 8003218:	3304      	adds	r3, #4
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	0a1b      	lsrs	r3, r3, #8
 800321e:	b2da      	uxtb	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	331b      	adds	r3, #27
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	4413      	add	r3, r2
 8003230:	3304      	adds	r3, #4
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	0c1b      	lsrs	r3, r3, #16
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	011b      	lsls	r3, r3, #4
 8003244:	4413      	add	r3, r2
 8003246:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	b2da      	uxtb	r2, r3
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	011b      	lsls	r3, r3, #4
 800325a:	4413      	add	r3, r2
 800325c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	0a1a      	lsrs	r2, r3, #8
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	3301      	adds	r3, #1
 8003268:	b2d2      	uxtb	r2, r2
 800326a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	011b      	lsls	r3, r3, #4
 8003274:	4413      	add	r3, r2
 8003276:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	0c1a      	lsrs	r2, r3, #16
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	3302      	adds	r3, #2
 8003282:	b2d2      	uxtb	r2, r2
 8003284:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	011b      	lsls	r3, r3, #4
 800328e:	4413      	add	r3, r2
 8003290:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	0e1a      	lsrs	r2, r3, #24
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	3303      	adds	r3, #3
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	4413      	add	r3, r2
 80032aa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	3304      	adds	r3, #4
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	4413      	add	r3, r2
 80032c2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	0a1a      	lsrs	r2, r3, #8
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	3305      	adds	r3, #5
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	011b      	lsls	r3, r3, #4
 80032da:	4413      	add	r3, r2
 80032dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	0c1a      	lsrs	r2, r3, #16
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	3306      	adds	r3, #6
 80032e8:	b2d2      	uxtb	r2, r2
 80032ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	4413      	add	r3, r2
 80032f6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0e1a      	lsrs	r2, r3, #24
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	3307      	adds	r3, #7
 8003302:	b2d2      	uxtb	r2, r2
 8003304:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d108      	bne.n	800331e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	68da      	ldr	r2, [r3, #12]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f042 0220 	orr.w	r2, r2, #32
 800331a:	60da      	str	r2, [r3, #12]
 800331c:	e007      	b.n	800332e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	691a      	ldr	r2, [r3, #16]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f042 0220 	orr.w	r2, r2, #32
 800332c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800332e:	2300      	movs	r3, #0
 8003330:	e006      	b.n	8003340 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
  }
}
 8003340:	4618      	mov	r0, r3
 8003342:	371c      	adds	r7, #28
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800334c:	b480      	push	{r7}
 800334e:	b085      	sub	sp, #20
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f893 3020 	ldrb.w	r3, [r3, #32]
 800335c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800335e:	7bfb      	ldrb	r3, [r7, #15]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d002      	beq.n	800336a <HAL_CAN_ActivateNotification+0x1e>
 8003364:	7bfb      	ldrb	r3, [r7, #15]
 8003366:	2b02      	cmp	r3, #2
 8003368:	d109      	bne.n	800337e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6959      	ldr	r1, [r3, #20]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800337a:	2300      	movs	r3, #0
 800337c:	e006      	b.n	800338c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08a      	sub	sp, #40	; 0x28
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80033a0:	2300      	movs	r3, #0
 80033a2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	699b      	ldr	r3, [r3, #24]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	f003 0301 	and.w	r3, r3, #1
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d07c      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2201      	movs	r2, #1
 80033ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f983 	bl	8003706 <HAL_CAN_TxMailbox0CompleteCallback>
 8003400:	e016      	b.n	8003430 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	f003 0304 	and.w	r3, r3, #4
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800340e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003412:	627b      	str	r3, [r7, #36]	; 0x24
 8003414:	e00c      	b.n	8003430 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d004      	beq.n	800342a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003422:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
 8003428:	e002      	b.n	8003430 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 f989 	bl	8003742 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003436:	2b00      	cmp	r3, #0
 8003438:	d024      	beq.n	8003484 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003442:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003444:	69bb      	ldr	r3, [r7, #24]
 8003446:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f963 	bl	800371a <HAL_CAN_TxMailbox1CompleteCallback>
 8003454:	e016      	b.n	8003484 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345c:	2b00      	cmp	r3, #0
 800345e:	d004      	beq.n	800346a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003462:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003466:	627b      	str	r3, [r7, #36]	; 0x24
 8003468:	e00c      	b.n	8003484 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003470:	2b00      	cmp	r3, #0
 8003472:	d004      	beq.n	800347e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
 800347c:	e002      	b.n	8003484 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f969 	bl	8003756 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003484:	69bb      	ldr	r3, [r7, #24]
 8003486:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d024      	beq.n	80034d8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003496:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003498:	69bb      	ldr	r3, [r7, #24]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80034a2:	6878      	ldr	r0, [r7, #4]
 80034a4:	f000 f943 	bl	800372e <HAL_CAN_TxMailbox2CompleteCallback>
 80034a8:	e016      	b.n	80034d8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d004      	beq.n	80034be <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80034ba:	627b      	str	r3, [r7, #36]	; 0x24
 80034bc:	e00c      	b.n	80034d8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80034be:	69bb      	ldr	r3, [r7, #24]
 80034c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d004      	beq.n	80034d2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80034c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ce:	627b      	str	r3, [r7, #36]	; 0x24
 80034d0:	e002      	b.n	80034d8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f949 	bl	800376a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d00c      	beq.n	80034fc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d007      	beq.n	80034fc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034f2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2210      	movs	r2, #16
 80034fa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80034fc:	6a3b      	ldr	r3, [r7, #32]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00b      	beq.n	800351e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f003 0308 	and.w	r3, r3, #8
 800350c:	2b00      	cmp	r3, #0
 800350e:	d006      	beq.n	800351e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2208      	movs	r2, #8
 8003516:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f930 	bl	800377e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d009      	beq.n	800353c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d002      	beq.n	800353c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fe f9c4 	bl	80018c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800353c:	6a3b      	ldr	r3, [r7, #32]
 800353e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	f003 0310 	and.w	r3, r3, #16
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003556:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2210      	movs	r2, #16
 800355e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003560:	6a3b      	ldr	r3, [r7, #32]
 8003562:	f003 0320 	and.w	r3, r3, #32
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00b      	beq.n	8003582 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b00      	cmp	r3, #0
 8003572:	d006      	beq.n	8003582 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2208      	movs	r2, #8
 800357a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 f912 	bl	80037a6 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d009      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0303 	and.w	r3, r3, #3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 f8f9 	bl	8003792 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80035a0:	6a3b      	ldr	r3, [r7, #32]
 80035a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00b      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	f003 0310 	and.w	r3, r3, #16
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d006      	beq.n	80035c2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2210      	movs	r2, #16
 80035ba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f8fc 	bl	80037ba <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d00b      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d006      	beq.n	80035e4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2208      	movs	r2, #8
 80035dc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f000 f8f5 	bl	80037ce <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d07b      	beq.n	80036e6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80035ee:	69fb      	ldr	r3, [r7, #28]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d072      	beq.n	80036de <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d008      	beq.n	8003614 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003608:	2b00      	cmp	r3, #0
 800360a:	d003      	beq.n	8003614 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800360c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800360e:	f043 0301 	orr.w	r3, r3, #1
 8003612:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003614:	6a3b      	ldr	r3, [r7, #32]
 8003616:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361a:	2b00      	cmp	r3, #0
 800361c:	d008      	beq.n	8003630 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362a:	f043 0302 	orr.w	r3, r3, #2
 800362e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003630:	6a3b      	ldr	r3, [r7, #32]
 8003632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003636:	2b00      	cmp	r3, #0
 8003638:	d008      	beq.n	800364c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003640:	2b00      	cmp	r3, #0
 8003642:	d003      	beq.n	800364c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003652:	2b00      	cmp	r3, #0
 8003654:	d043      	beq.n	80036de <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800365c:	2b00      	cmp	r3, #0
 800365e:	d03e      	beq.n	80036de <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003666:	2b60      	cmp	r3, #96	; 0x60
 8003668:	d02b      	beq.n	80036c2 <HAL_CAN_IRQHandler+0x32a>
 800366a:	2b60      	cmp	r3, #96	; 0x60
 800366c:	d82e      	bhi.n	80036cc <HAL_CAN_IRQHandler+0x334>
 800366e:	2b50      	cmp	r3, #80	; 0x50
 8003670:	d022      	beq.n	80036b8 <HAL_CAN_IRQHandler+0x320>
 8003672:	2b50      	cmp	r3, #80	; 0x50
 8003674:	d82a      	bhi.n	80036cc <HAL_CAN_IRQHandler+0x334>
 8003676:	2b40      	cmp	r3, #64	; 0x40
 8003678:	d019      	beq.n	80036ae <HAL_CAN_IRQHandler+0x316>
 800367a:	2b40      	cmp	r3, #64	; 0x40
 800367c:	d826      	bhi.n	80036cc <HAL_CAN_IRQHandler+0x334>
 800367e:	2b30      	cmp	r3, #48	; 0x30
 8003680:	d010      	beq.n	80036a4 <HAL_CAN_IRQHandler+0x30c>
 8003682:	2b30      	cmp	r3, #48	; 0x30
 8003684:	d822      	bhi.n	80036cc <HAL_CAN_IRQHandler+0x334>
 8003686:	2b10      	cmp	r3, #16
 8003688:	d002      	beq.n	8003690 <HAL_CAN_IRQHandler+0x2f8>
 800368a:	2b20      	cmp	r3, #32
 800368c:	d005      	beq.n	800369a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800368e:	e01d      	b.n	80036cc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003692:	f043 0308 	orr.w	r3, r3, #8
 8003696:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003698:	e019      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800369a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369c:	f043 0310 	orr.w	r3, r3, #16
 80036a0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036a2:	e014      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80036a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a6:	f043 0320 	orr.w	r3, r3, #32
 80036aa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ac:	e00f      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036b6:	e00a      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80036b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036c0:	e005      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80036c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80036ca:	e000      	b.n	80036ce <HAL_CAN_IRQHandler+0x336>
            break;
 80036cc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80036dc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2204      	movs	r2, #4
 80036e4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80036e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f2:	431a      	orrs	r2, r3
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f872 	bl	80037e2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80036fe:	bf00      	nop
 8003700:	3728      	adds	r7, #40	; 0x28
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr

0800371a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800371a:	b480      	push	{r7}
 800371c:	b083      	sub	sp, #12
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800372e:	b480      	push	{r7}
 8003730:	b083      	sub	sp, #12
 8003732:	af00      	add	r7, sp, #0
 8003734:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr

08003742 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003742:	b480      	push	{r7}
 8003744:	b083      	sub	sp, #12
 8003746:	af00      	add	r7, sp, #0
 8003748:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr

08003756 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003756:	b480      	push	{r7}
 8003758:	b083      	sub	sp, #12
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003772:	bf00      	nop
 8003774:	370c      	adds	r7, #12
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr

0800377e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800377e:	b480      	push	{r7}
 8003780:	b083      	sub	sp, #12
 8003782:	af00      	add	r7, sp, #0
 8003784:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003786:	bf00      	nop
 8003788:	370c      	adds	r7, #12
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr

08003792 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003792:	b480      	push	{r7}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800379a:	bf00      	nop
 800379c:	370c      	adds	r7, #12
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr

080037a6 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80037a6:	b480      	push	{r7}
 80037a8:	b083      	sub	sp, #12
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80037ae:	bf00      	nop
 80037b0:	370c      	adds	r7, #12
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80037ba:	b480      	push	{r7}
 80037bc:	b083      	sub	sp, #12
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80037c2:	bf00      	nop
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80037d6:	bf00      	nop
 80037d8:	370c      	adds	r7, #12
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b083      	sub	sp, #12
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
	...

080037f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f003 0307 	and.w	r3, r3, #7
 8003806:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003808:	4b0b      	ldr	r3, [pc, #44]	; (8003838 <__NVIC_SetPriorityGrouping+0x40>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003814:	4013      	ands	r3, r2
 8003816:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003820:	4b06      	ldr	r3, [pc, #24]	; (800383c <__NVIC_SetPriorityGrouping+0x44>)
 8003822:	4313      	orrs	r3, r2
 8003824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003826:	4a04      	ldr	r2, [pc, #16]	; (8003838 <__NVIC_SetPriorityGrouping+0x40>)
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	60d3      	str	r3, [r2, #12]
}
 800382c:	bf00      	nop
 800382e:	3714      	adds	r7, #20
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	e000ed00 	.word	0xe000ed00
 800383c:	05fa0000 	.word	0x05fa0000

08003840 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__NVIC_GetPriorityGrouping+0x18>)
 8003846:	68db      	ldr	r3, [r3, #12]
 8003848:	0a1b      	lsrs	r3, r3, #8
 800384a:	f003 0307 	and.w	r3, r3, #7
}
 800384e:	4618      	mov	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003866:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386a:	2b00      	cmp	r3, #0
 800386c:	db0b      	blt.n	8003886 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800386e:	79fb      	ldrb	r3, [r7, #7]
 8003870:	f003 021f 	and.w	r2, r3, #31
 8003874:	4907      	ldr	r1, [pc, #28]	; (8003894 <__NVIC_EnableIRQ+0x38>)
 8003876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800387a:	095b      	lsrs	r3, r3, #5
 800387c:	2001      	movs	r0, #1
 800387e:	fa00 f202 	lsl.w	r2, r0, r2
 8003882:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003886:	bf00      	nop
 8003888:	370c      	adds	r7, #12
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	e000e100 	.word	0xe000e100

08003898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	6039      	str	r1, [r7, #0]
 80038a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	db0a      	blt.n	80038c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	490c      	ldr	r1, [pc, #48]	; (80038e4 <__NVIC_SetPriority+0x4c>)
 80038b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038b6:	0112      	lsls	r2, r2, #4
 80038b8:	b2d2      	uxtb	r2, r2
 80038ba:	440b      	add	r3, r1
 80038bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038c0:	e00a      	b.n	80038d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	4908      	ldr	r1, [pc, #32]	; (80038e8 <__NVIC_SetPriority+0x50>)
 80038c8:	79fb      	ldrb	r3, [r7, #7]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	3b04      	subs	r3, #4
 80038d0:	0112      	lsls	r2, r2, #4
 80038d2:	b2d2      	uxtb	r2, r2
 80038d4:	440b      	add	r3, r1
 80038d6:	761a      	strb	r2, [r3, #24]
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e100 	.word	0xe000e100
 80038e8:	e000ed00 	.word	0xe000ed00

080038ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b089      	sub	sp, #36	; 0x24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	60b9      	str	r1, [r7, #8]
 80038f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f1c3 0307 	rsb	r3, r3, #7
 8003906:	2b04      	cmp	r3, #4
 8003908:	bf28      	it	cs
 800390a:	2304      	movcs	r3, #4
 800390c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	3304      	adds	r3, #4
 8003912:	2b06      	cmp	r3, #6
 8003914:	d902      	bls.n	800391c <NVIC_EncodePriority+0x30>
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	3b03      	subs	r3, #3
 800391a:	e000      	b.n	800391e <NVIC_EncodePriority+0x32>
 800391c:	2300      	movs	r3, #0
 800391e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	f04f 32ff 	mov.w	r2, #4294967295
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	fa02 f303 	lsl.w	r3, r2, r3
 800392a:	43da      	mvns	r2, r3
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	401a      	ands	r2, r3
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003934:	f04f 31ff 	mov.w	r1, #4294967295
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	fa01 f303 	lsl.w	r3, r1, r3
 800393e:	43d9      	mvns	r1, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003944:	4313      	orrs	r3, r2
         );
}
 8003946:	4618      	mov	r0, r3
 8003948:	3724      	adds	r7, #36	; 0x24
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	3b01      	subs	r3, #1
 8003960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003964:	d301      	bcc.n	800396a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003966:	2301      	movs	r3, #1
 8003968:	e00f      	b.n	800398a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800396a:	4a0a      	ldr	r2, [pc, #40]	; (8003994 <SysTick_Config+0x40>)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3b01      	subs	r3, #1
 8003970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003972:	210f      	movs	r1, #15
 8003974:	f04f 30ff 	mov.w	r0, #4294967295
 8003978:	f7ff ff8e 	bl	8003898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800397c:	4b05      	ldr	r3, [pc, #20]	; (8003994 <SysTick_Config+0x40>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003982:	4b04      	ldr	r3, [pc, #16]	; (8003994 <SysTick_Config+0x40>)
 8003984:	2207      	movs	r2, #7
 8003986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	e000e010 	.word	0xe000e010

08003998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff29 	bl	80037f8 <__NVIC_SetPriorityGrouping>
}
 80039a6:	bf00      	nop
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80039ae:	b580      	push	{r7, lr}
 80039b0:	b086      	sub	sp, #24
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	4603      	mov	r3, r0
 80039b6:	60b9      	str	r1, [r7, #8]
 80039b8:	607a      	str	r2, [r7, #4]
 80039ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039bc:	2300      	movs	r3, #0
 80039be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80039c0:	f7ff ff3e 	bl	8003840 <__NVIC_GetPriorityGrouping>
 80039c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	68b9      	ldr	r1, [r7, #8]
 80039ca:	6978      	ldr	r0, [r7, #20]
 80039cc:	f7ff ff8e 	bl	80038ec <NVIC_EncodePriority>
 80039d0:	4602      	mov	r2, r0
 80039d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039d6:	4611      	mov	r1, r2
 80039d8:	4618      	mov	r0, r3
 80039da:	f7ff ff5d 	bl	8003898 <__NVIC_SetPriority>
}
 80039de:	bf00      	nop
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	4603      	mov	r3, r0
 80039ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80039f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff31 	bl	800385c <__NVIC_EnableIRQ>
}
 80039fa:	bf00      	nop
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffa2 	bl	8003954 <SysTick_Config>
 8003a10:	4603      	mov	r3, r0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}

08003a1a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a1a:	b580      	push	{r7, lr}
 8003a1c:	b084      	sub	sp, #16
 8003a1e:	af00      	add	r7, sp, #0
 8003a20:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003a28:	f7ff f842 	bl	8002ab0 <HAL_GetTick>
 8003a2c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d008      	beq.n	8003a4c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2280      	movs	r2, #128	; 0x80
 8003a3e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e052      	b.n	8003af2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0216 	bic.w	r2, r2, #22
 8003a5a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	695a      	ldr	r2, [r3, #20]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a6a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d103      	bne.n	8003a7c <HAL_DMA_Abort+0x62>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d007      	beq.n	8003a8c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 0208 	bic.w	r2, r2, #8
 8003a8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 0201 	bic.w	r2, r2, #1
 8003a9a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003a9c:	e013      	b.n	8003ac6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003a9e:	f7ff f807 	bl	8002ab0 <HAL_GetTick>
 8003aa2:	4602      	mov	r2, r0
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	1ad3      	subs	r3, r2, r3
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d90c      	bls.n	8003ac6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2220      	movs	r2, #32
 8003ab0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2203      	movs	r2, #3
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e015      	b.n	8003af2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1e4      	bne.n	8003a9e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ad8:	223f      	movs	r2, #63	; 0x3f
 8003ada:	409a      	lsls	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3710      	adds	r7, #16
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}

08003afa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b083      	sub	sp, #12
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d004      	beq.n	8003b18 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2280      	movs	r2, #128	; 0x80
 8003b12:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b14:	2301      	movs	r3, #1
 8003b16:	e00c      	b.n	8003b32 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2205      	movs	r2, #5
 8003b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f022 0201 	bic.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b30:	2300      	movs	r3, #0
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003b52:	2300      	movs	r3, #0
 8003b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003b56:	2300      	movs	r3, #0
 8003b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	e175      	b.n	8003e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003b60:	2201      	movs	r2, #1
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	f040 8164 	bne.w	8003e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b01      	cmp	r3, #1
 8003b88:	d005      	beq.n	8003b96 <HAL_GPIO_Init+0x56>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d130      	bne.n	8003bf8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	68da      	ldr	r2, [r3, #12]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	005b      	lsls	r3, r3, #1
 8003bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bba:	69ba      	ldr	r2, [r7, #24]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bcc:	2201      	movs	r2, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	43db      	mvns	r3, r3
 8003bd6:	69ba      	ldr	r2, [r7, #24]
 8003bd8:	4013      	ands	r3, r2
 8003bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 0201 	and.w	r2, r3, #1
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f003 0303 	and.w	r3, r3, #3
 8003c00:	2b03      	cmp	r3, #3
 8003c02:	d017      	beq.n	8003c34 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	005b      	lsls	r3, r3, #1
 8003c0e:	2203      	movs	r2, #3
 8003c10:	fa02 f303 	lsl.w	r3, r2, r3
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	005b      	lsls	r3, r3, #1
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 0303 	and.w	r3, r3, #3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d123      	bne.n	8003c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	08da      	lsrs	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	3208      	adds	r2, #8
 8003c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	f003 0307 	and.w	r3, r3, #7
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	220f      	movs	r2, #15
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	691a      	ldr	r2, [r3, #16]
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	009b      	lsls	r3, r3, #2
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	08da      	lsrs	r2, r3, #3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3208      	adds	r2, #8
 8003c82:	69b9      	ldr	r1, [r7, #24]
 8003c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f003 0203 	and.w	r2, r3, #3
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 80be 	beq.w	8003e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cca:	4b66      	ldr	r3, [pc, #408]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a65      	ldr	r2, [pc, #404]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b63      	ldr	r3, [pc, #396]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003ce2:	4a61      	ldr	r2, [pc, #388]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a58      	ldr	r2, [pc, #352]	; (8003e6c <HAL_GPIO_Init+0x32c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d037      	beq.n	8003d7e <HAL_GPIO_Init+0x23e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a57      	ldr	r2, [pc, #348]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_GPIO_Init+0x23a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a56      	ldr	r2, [pc, #344]	; (8003e74 <HAL_GPIO_Init+0x334>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02b      	beq.n	8003d76 <HAL_GPIO_Init+0x236>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a55      	ldr	r2, [pc, #340]	; (8003e78 <HAL_GPIO_Init+0x338>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d025      	beq.n	8003d72 <HAL_GPIO_Init+0x232>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a54      	ldr	r2, [pc, #336]	; (8003e7c <HAL_GPIO_Init+0x33c>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01f      	beq.n	8003d6e <HAL_GPIO_Init+0x22e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a53      	ldr	r2, [pc, #332]	; (8003e80 <HAL_GPIO_Init+0x340>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d019      	beq.n	8003d6a <HAL_GPIO_Init+0x22a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a52      	ldr	r2, [pc, #328]	; (8003e84 <HAL_GPIO_Init+0x344>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a51      	ldr	r2, [pc, #324]	; (8003e88 <HAL_GPIO_Init+0x348>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a50      	ldr	r2, [pc, #320]	; (8003e8c <HAL_GPIO_Init+0x34c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4f      	ldr	r2, [pc, #316]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d56:	2309      	movs	r3, #9
 8003d58:	e012      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	e010      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	e00e      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e00c      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d66:	2306      	movs	r3, #6
 8003d68:	e00a      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	e008      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6e:	2304      	movs	r3, #4
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d72:	2303      	movs	r3, #3
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f002 0203 	and.w	r2, r2, #3
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003d90:	4935      	ldr	r1, [pc, #212]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d9e:	4b3d      	ldr	r3, [pc, #244]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003dc2:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003dc8:	4b32      	ldr	r3, [pc, #200]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dec:	4a29      	ldr	r2, [pc, #164]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003df2:	4b28      	ldr	r3, [pc, #160]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e16:	4a1f      	ldr	r2, [pc, #124]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e1c:	4b1d      	ldr	r3, [pc, #116]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <HAL_GPIO_Init+0x354>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f67f ae86 	bls.w	8003b60 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	bf00      	nop
 8003e58:	3724      	adds	r7, #36	; 0x24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr
 8003e62:	bf00      	nop
 8003e64:	40023800 	.word	0x40023800
 8003e68:	40013800 	.word	0x40013800
 8003e6c:	40020000 	.word	0x40020000
 8003e70:	40020400 	.word	0x40020400
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020c00 	.word	0x40020c00
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	40021400 	.word	0x40021400
 8003e84:	40021800 	.word	0x40021800
 8003e88:	40021c00 	.word	0x40021c00
 8003e8c:	40022000 	.word	0x40022000
 8003e90:	40022400 	.word	0x40022400
 8003e94:	40013c00 	.word	0x40013c00

08003e98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	807b      	strh	r3, [r7, #2]
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea8:	787b      	ldrb	r3, [r7, #1]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d003      	beq.n	8003eb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003eb4:	e003      	b.n	8003ebe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003eb6:	887b      	ldrh	r3, [r7, #2]
 8003eb8:	041a      	lsls	r2, r3, #16
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	370c      	adds	r7, #12
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	460b      	mov	r3, r1
 8003ed4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003edc:	887a      	ldrh	r2, [r7, #2]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	041a      	lsls	r2, r3, #16
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	887b      	ldrh	r3, [r7, #2]
 8003eea:	400b      	ands	r3, r1
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	619a      	str	r2, [r3, #24]
}
 8003ef2:	bf00      	nop
 8003ef4:	3714      	adds	r7, #20
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	4603      	mov	r3, r0
 8003f08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f0a:	4b08      	ldr	r3, [pc, #32]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f0c:	695a      	ldr	r2, [r3, #20]
 8003f0e:	88fb      	ldrh	r3, [r7, #6]
 8003f10:	4013      	ands	r3, r2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d006      	beq.n	8003f24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f16:	4a05      	ldr	r2, [pc, #20]	; (8003f2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f18:	88fb      	ldrh	r3, [r7, #6]
 8003f1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc ffb0 	bl	8000e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f24:	bf00      	nop
 8003f26:	3708      	adds	r7, #8
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	40013c00 	.word	0x40013c00

08003f30 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003f36:	2300      	movs	r3, #0
 8003f38:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	4b23      	ldr	r3, [pc, #140]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	4a22      	ldr	r2, [pc, #136]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f44:	6413      	str	r3, [r2, #64]	; 0x40
 8003f46:	4b20      	ldr	r3, [pc, #128]	; (8003fc8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f4e:	603b      	str	r3, [r7, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003f52:	4b1e      	ldr	r3, [pc, #120]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a1d      	ldr	r2, [pc, #116]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f5c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f5e:	f7fe fda7 	bl	8002ab0 <HAL_GetTick>
 8003f62:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f64:	e009      	b.n	8003f7a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f66:	f7fe fda3 	bl	8002ab0 <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f74:	d901      	bls.n	8003f7a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003f76:	2303      	movs	r3, #3
 8003f78:	e022      	b.n	8003fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003f7a:	4b14      	ldr	r3, [pc, #80]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f86:	d1ee      	bne.n	8003f66 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003f88:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0f      	ldr	r2, [pc, #60]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003f8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f92:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003f94:	f7fe fd8c 	bl	8002ab0 <HAL_GetTick>
 8003f98:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003f9a:	e009      	b.n	8003fb0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003f9c:	f7fe fd88 	bl	8002ab0 <HAL_GetTick>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003faa:	d901      	bls.n	8003fb0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e007      	b.n	8003fc0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003fb0:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003fbc:	d1ee      	bne.n	8003f9c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003fbe:	2300      	movs	r3, #0
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e291      	b.n	800450a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 0301 	and.w	r3, r3, #1
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	f000 8087 	beq.w	8004102 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ff4:	4b96      	ldr	r3, [pc, #600]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	f003 030c 	and.w	r3, r3, #12
 8003ffc:	2b04      	cmp	r3, #4
 8003ffe:	d00c      	beq.n	800401a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004000:	4b93      	ldr	r3, [pc, #588]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 030c 	and.w	r3, r3, #12
 8004008:	2b08      	cmp	r3, #8
 800400a:	d112      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
 800400c:	4b90      	ldr	r3, [pc, #576]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004014:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401a:	4b8d      	ldr	r3, [pc, #564]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d06c      	beq.n	8004100 <HAL_RCC_OscConfig+0x130>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d168      	bne.n	8004100 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e26b      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x7a>
 800403c:	4b84      	ldr	r3, [pc, #528]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a83      	ldr	r2, [pc, #524]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e02e      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x9c>
 8004052:	4b7f      	ldr	r3, [pc, #508]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a7e      	ldr	r2, [pc, #504]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800405c:	6013      	str	r3, [r2, #0]
 800405e:	4b7c      	ldr	r3, [pc, #496]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a7b      	ldr	r2, [pc, #492]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004064:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004068:	6013      	str	r3, [r2, #0]
 800406a:	e01d      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004074:	d10c      	bne.n	8004090 <HAL_RCC_OscConfig+0xc0>
 8004076:	4b76      	ldr	r3, [pc, #472]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a75      	ldr	r2, [pc, #468]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800407c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b73      	ldr	r3, [pc, #460]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a72      	ldr	r2, [pc, #456]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004088:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800408c:	6013      	str	r3, [r2, #0]
 800408e:	e00b      	b.n	80040a8 <HAL_RCC_OscConfig+0xd8>
 8004090:	4b6f      	ldr	r3, [pc, #444]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a6e      	ldr	r2, [pc, #440]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004096:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800409a:	6013      	str	r3, [r2, #0]
 800409c:	4b6c      	ldr	r3, [pc, #432]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a6b      	ldr	r2, [pc, #428]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d013      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b0:	f7fe fcfe 	bl	8002ab0 <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fcfa 	bl	8002ab0 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	; 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e21f      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b61      	ldr	r3, [pc, #388]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d0f0      	beq.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e014      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fe fcea 	bl	8002ab0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fce6 	bl	8002ab0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e20b      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040f2:	4b57      	ldr	r3, [pc, #348]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1f0      	bne.n	80040e0 <HAL_RCC_OscConfig+0x110>
 80040fe:	e000      	b.n	8004102 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004100:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d069      	beq.n	80041e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800410e:	4b50      	ldr	r3, [pc, #320]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 030c 	and.w	r3, r3, #12
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00b      	beq.n	8004132 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800411a:	4b4d      	ldr	r3, [pc, #308]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	f003 030c 	and.w	r3, r3, #12
 8004122:	2b08      	cmp	r3, #8
 8004124:	d11c      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
 8004126:	4b4a      	ldr	r3, [pc, #296]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d116      	bne.n	8004160 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004132:	4b47      	ldr	r3, [pc, #284]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d001      	beq.n	800414a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e1df      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800414a:	4b41      	ldr	r3, [pc, #260]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	493d      	ldr	r1, [pc, #244]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800415a:	4313      	orrs	r3, r2
 800415c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415e:	e040      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d023      	beq.n	80041b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004168:	4b39      	ldr	r3, [pc, #228]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a38      	ldr	r2, [pc, #224]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004174:	f7fe fc9c 	bl	8002ab0 <HAL_GetTick>
 8004178:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800417a:	e008      	b.n	800418e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800417c:	f7fe fc98 	bl	8002ab0 <HAL_GetTick>
 8004180:	4602      	mov	r2, r0
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	1ad3      	subs	r3, r2, r3
 8004186:	2b02      	cmp	r3, #2
 8004188:	d901      	bls.n	800418e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e1bd      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800418e:	4b30      	ldr	r3, [pc, #192]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0f0      	beq.n	800417c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800419a:	4b2d      	ldr	r3, [pc, #180]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4929      	ldr	r1, [pc, #164]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	600b      	str	r3, [r1, #0]
 80041ae:	e018      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041b0:	4b27      	ldr	r3, [pc, #156]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a26      	ldr	r2, [pc, #152]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041b6:	f023 0301 	bic.w	r3, r3, #1
 80041ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe fc78 	bl	8002ab0 <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041c4:	f7fe fc74 	bl	8002ab0 <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b02      	cmp	r3, #2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e199      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d6:	4b1e      	ldr	r3, [pc, #120]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d038      	beq.n	8004260 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d019      	beq.n	800422a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041fa:	4a15      	ldr	r2, [pc, #84]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 80041fc:	f043 0301 	orr.w	r3, r3, #1
 8004200:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004202:	f7fe fc55 	bl	8002ab0 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800420a:	f7fe fc51 	bl	8002ab0 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e176      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421c:	4b0c      	ldr	r3, [pc, #48]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x23a>
 8004228:	e01a      	b.n	8004260 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800422a:	4b09      	ldr	r3, [pc, #36]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 800422c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422e:	4a08      	ldr	r2, [pc, #32]	; (8004250 <HAL_RCC_OscConfig+0x280>)
 8004230:	f023 0301 	bic.w	r3, r3, #1
 8004234:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004236:	f7fe fc3b 	bl	8002ab0 <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800423c:	e00a      	b.n	8004254 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800423e:	f7fe fc37 	bl	8002ab0 <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d903      	bls.n	8004254 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e15c      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
 8004250:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004254:	4b91      	ldr	r3, [pc, #580]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004256:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1ee      	bne.n	800423e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0304 	and.w	r3, r3, #4
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a4 	beq.w	80043b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800426e:	4b8b      	ldr	r3, [pc, #556]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004276:	2b00      	cmp	r3, #0
 8004278:	d10d      	bne.n	8004296 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a87      	ldr	r2, [pc, #540]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b85      	ldr	r3, [pc, #532]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800428e:	60bb      	str	r3, [r7, #8]
 8004290:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004292:	2301      	movs	r3, #1
 8004294:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004296:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d118      	bne.n	80042d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80042a2:	4b7f      	ldr	r3, [pc, #508]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a7e      	ldr	r2, [pc, #504]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042ae:	f7fe fbff 	bl	8002ab0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b4:	e008      	b.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042b6:	f7fe fbfb 	bl	8002ab0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	2b64      	cmp	r3, #100	; 0x64
 80042c2:	d901      	bls.n	80042c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80042c4:	2303      	movs	r3, #3
 80042c6:	e120      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042c8:	4b75      	ldr	r3, [pc, #468]	; (80044a0 <HAL_RCC_OscConfig+0x4d0>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d0f0      	beq.n	80042b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d106      	bne.n	80042ea <HAL_RCC_OscConfig+0x31a>
 80042dc:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042e2:	f043 0301 	orr.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	; 0x70
 80042e8:	e02d      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0x33c>
 80042f2:	4b6a      	ldr	r3, [pc, #424]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f6:	4a69      	ldr	r2, [pc, #420]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80042f8:	f023 0301 	bic.w	r3, r3, #1
 80042fc:	6713      	str	r3, [r2, #112]	; 0x70
 80042fe:	4b67      	ldr	r3, [pc, #412]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004302:	4a66      	ldr	r2, [pc, #408]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004304:	f023 0304 	bic.w	r3, r3, #4
 8004308:	6713      	str	r3, [r2, #112]	; 0x70
 800430a:	e01c      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	2b05      	cmp	r3, #5
 8004312:	d10c      	bne.n	800432e <HAL_RCC_OscConfig+0x35e>
 8004314:	4b61      	ldr	r3, [pc, #388]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004316:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004318:	4a60      	ldr	r2, [pc, #384]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800431a:	f043 0304 	orr.w	r3, r3, #4
 800431e:	6713      	str	r3, [r2, #112]	; 0x70
 8004320:	4b5e      	ldr	r3, [pc, #376]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a5d      	ldr	r2, [pc, #372]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004326:	f043 0301 	orr.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	e00b      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
 800432e:	4b5b      	ldr	r3, [pc, #364]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004332:	4a5a      	ldr	r2, [pc, #360]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	6713      	str	r3, [r2, #112]	; 0x70
 800433a:	4b58      	ldr	r3, [pc, #352]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800433c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800433e:	4a57      	ldr	r2, [pc, #348]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004340:	f023 0304 	bic.w	r3, r3, #4
 8004344:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d015      	beq.n	800437a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434e:	f7fe fbaf 	bl	8002ab0 <HAL_GetTick>
 8004352:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004354:	e00a      	b.n	800436c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004356:	f7fe fbab 	bl	8002ab0 <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	f241 3288 	movw	r2, #5000	; 0x1388
 8004364:	4293      	cmp	r3, r2
 8004366:	d901      	bls.n	800436c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004368:	2303      	movs	r3, #3
 800436a:	e0ce      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800436c:	4b4b      	ldr	r3, [pc, #300]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800436e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004370:	f003 0302 	and.w	r3, r3, #2
 8004374:	2b00      	cmp	r3, #0
 8004376:	d0ee      	beq.n	8004356 <HAL_RCC_OscConfig+0x386>
 8004378:	e014      	b.n	80043a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437a:	f7fe fb99 	bl	8002ab0 <HAL_GetTick>
 800437e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004380:	e00a      	b.n	8004398 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004382:	f7fe fb95 	bl	8002ab0 <HAL_GetTick>
 8004386:	4602      	mov	r2, r0
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1ad3      	subs	r3, r2, r3
 800438c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004390:	4293      	cmp	r3, r2
 8004392:	d901      	bls.n	8004398 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e0b8      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004398:	4b40      	ldr	r3, [pc, #256]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1ee      	bne.n	8004382 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d105      	bne.n	80043b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043aa:	4b3c      	ldr	r3, [pc, #240]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ae:	4a3b      	ldr	r2, [pc, #236]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 80a4 	beq.w	8004508 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80043c0:	4b36      	ldr	r3, [pc, #216]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	f003 030c 	and.w	r3, r3, #12
 80043c8:	2b08      	cmp	r3, #8
 80043ca:	d06b      	beq.n	80044a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	699b      	ldr	r3, [r3, #24]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d149      	bne.n	8004468 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d4:	4b31      	ldr	r3, [pc, #196]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a30      	ldr	r2, [pc, #192]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e0:	f7fe fb66 	bl	8002ab0 <HAL_GetTick>
 80043e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	e008      	b.n	80043fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e8:	f7fe fb62 	bl	8002ab0 <HAL_GetTick>
 80043ec:	4602      	mov	r2, r0
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	1ad3      	subs	r3, r2, r3
 80043f2:	2b02      	cmp	r3, #2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e087      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d1f0      	bne.n	80043e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69da      	ldr	r2, [r3, #28]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004414:	019b      	lsls	r3, r3, #6
 8004416:	431a      	orrs	r2, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	085b      	lsrs	r3, r3, #1
 800441e:	3b01      	subs	r3, #1
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004428:	061b      	lsls	r3, r3, #24
 800442a:	4313      	orrs	r3, r2
 800442c:	4a1b      	ldr	r2, [pc, #108]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800442e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004432:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004434:	4b19      	ldr	r3, [pc, #100]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a18      	ldr	r2, [pc, #96]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800443a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004440:	f7fe fb36 	bl	8002ab0 <HAL_GetTick>
 8004444:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004446:	e008      	b.n	800445a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004448:	f7fe fb32 	bl	8002ab0 <HAL_GetTick>
 800444c:	4602      	mov	r2, r0
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	2b02      	cmp	r3, #2
 8004454:	d901      	bls.n	800445a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e057      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800445a:	4b10      	ldr	r3, [pc, #64]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d0f0      	beq.n	8004448 <HAL_RCC_OscConfig+0x478>
 8004466:	e04f      	b.n	8004508 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004468:	4b0c      	ldr	r3, [pc, #48]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a0b      	ldr	r2, [pc, #44]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 800446e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004474:	f7fe fb1c 	bl	8002ab0 <HAL_GetTick>
 8004478:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447a:	e008      	b.n	800448e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800447c:	f7fe fb18 	bl	8002ab0 <HAL_GetTick>
 8004480:	4602      	mov	r2, r0
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	1ad3      	subs	r3, r2, r3
 8004486:	2b02      	cmp	r3, #2
 8004488:	d901      	bls.n	800448e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800448a:	2303      	movs	r3, #3
 800448c:	e03d      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x4cc>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d1f0      	bne.n	800447c <HAL_RCC_OscConfig+0x4ac>
 800449a:	e035      	b.n	8004508 <HAL_RCC_OscConfig+0x538>
 800449c:	40023800 	.word	0x40023800
 80044a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80044a4:	4b1b      	ldr	r3, [pc, #108]	; (8004514 <HAL_RCC_OscConfig+0x544>)
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d028      	beq.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d121      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11a      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ce:	68fa      	ldr	r2, [r7, #12]
 80044d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044d4:	4013      	ands	r3, r2
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80044dc:	4293      	cmp	r3, r2
 80044de:	d111      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044ea:	085b      	lsrs	r3, r3, #1
 80044ec:	3b01      	subs	r3, #1
 80044ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d107      	bne.n	8004504 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004500:	429a      	cmp	r2, r3
 8004502:	d001      	beq.n	8004508 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e000      	b.n	800450a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004508:	2300      	movs	r3, #0
}
 800450a:	4618      	mov	r0, r3
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40023800 	.word	0x40023800

08004518 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b084      	sub	sp, #16
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0d0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004530:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 030f 	and.w	r3, r3, #15
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d910      	bls.n	8004560 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b67      	ldr	r3, [pc, #412]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 020f 	bic.w	r2, r3, #15
 8004546:	4965      	ldr	r1, [pc, #404]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 030f 	and.w	r3, r3, #15
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e0b8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b00      	cmp	r3, #0
 800456a:	d020      	beq.n	80045ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d005      	beq.n	8004584 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004578:	4b59      	ldr	r3, [pc, #356]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	4a58      	ldr	r2, [pc, #352]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800457e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004582:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 0308 	and.w	r3, r3, #8
 800458c:	2b00      	cmp	r3, #0
 800458e:	d005      	beq.n	800459c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004590:	4b53      	ldr	r3, [pc, #332]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	4a52      	ldr	r2, [pc, #328]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800459a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	494d      	ldr	r1, [pc, #308]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d040      	beq.n	800463c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b47      	ldr	r3, [pc, #284]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d115      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e07f      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	d107      	bne.n	80045ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045da:	4b41      	ldr	r3, [pc, #260]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d109      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e073      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045ea:	4b3d      	ldr	r3, [pc, #244]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0302 	and.w	r3, r3, #2
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e06b      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045fa:	4b39      	ldr	r3, [pc, #228]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0203 	bic.w	r2, r3, #3
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4936      	ldr	r1, [pc, #216]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800460c:	f7fe fa50 	bl	8002ab0 <HAL_GetTick>
 8004610:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	e00a      	b.n	800462a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004614:	f7fe fa4c 	bl	8002ab0 <HAL_GetTick>
 8004618:	4602      	mov	r2, r0
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	1ad3      	subs	r3, r2, r3
 800461e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e053      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800462a:	4b2d      	ldr	r3, [pc, #180]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f003 020c 	and.w	r2, r3, #12
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	429a      	cmp	r2, r3
 800463a:	d1eb      	bne.n	8004614 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	429a      	cmp	r2, r3
 8004648:	d210      	bcs.n	800466c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f023 020f 	bic.w	r2, r3, #15
 8004652:	4922      	ldr	r1, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <HAL_RCC_ClockConfig+0x1c4>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	429a      	cmp	r2, r3
 8004666:	d001      	beq.n	800466c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e032      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b00      	cmp	r3, #0
 8004676:	d008      	beq.n	800468a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004678:	4b19      	ldr	r3, [pc, #100]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	68db      	ldr	r3, [r3, #12]
 8004684:	4916      	ldr	r1, [pc, #88]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0308 	and.w	r3, r3, #8
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004696:	4b12      	ldr	r3, [pc, #72]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	490e      	ldr	r1, [pc, #56]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80046aa:	f000 f821 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046ae:	4602      	mov	r2, r0
 80046b0:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <HAL_RCC_ClockConfig+0x1c8>)
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	091b      	lsrs	r3, r3, #4
 80046b6:	f003 030f 	and.w	r3, r3, #15
 80046ba:	490a      	ldr	r1, [pc, #40]	; (80046e4 <HAL_RCC_ClockConfig+0x1cc>)
 80046bc:	5ccb      	ldrb	r3, [r1, r3]
 80046be:	fa22 f303 	lsr.w	r3, r2, r3
 80046c2:	4a09      	ldr	r2, [pc, #36]	; (80046e8 <HAL_RCC_ClockConfig+0x1d0>)
 80046c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80046c6:	4b09      	ldr	r3, [pc, #36]	; (80046ec <HAL_RCC_ClockConfig+0x1d4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fe f9ac 	bl	8002a28 <HAL_InitTick>

  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40023c00 	.word	0x40023c00
 80046e0:	40023800 	.word	0x40023800
 80046e4:	080082f8 	.word	0x080082f8
 80046e8:	20000000 	.word	0x20000000
 80046ec:	20000004 	.word	0x20000004

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046f4:	b094      	sub	sp, #80	; 0x50
 80046f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80046f8:	2300      	movs	r3, #0
 80046fa:	647b      	str	r3, [r7, #68]	; 0x44
 80046fc:	2300      	movs	r3, #0
 80046fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004700:	2300      	movs	r3, #0
 8004702:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004708:	4b79      	ldr	r3, [pc, #484]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d00d      	beq.n	8004730 <HAL_RCC_GetSysClockFreq+0x40>
 8004714:	2b08      	cmp	r3, #8
 8004716:	f200 80e1 	bhi.w	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 800471e:	2b04      	cmp	r3, #4
 8004720:	d003      	beq.n	800472a <HAL_RCC_GetSysClockFreq+0x3a>
 8004722:	e0db      	b.n	80048dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004724:	4b73      	ldr	r3, [pc, #460]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004726:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004728:	e0db      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800472a:	4b73      	ldr	r3, [pc, #460]	; (80048f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800472e:	e0d8      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004730:	4b6f      	ldr	r3, [pc, #444]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004738:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004742:	2b00      	cmp	r3, #0
 8004744:	d063      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004746:	4b6a      	ldr	r3, [pc, #424]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	099b      	lsrs	r3, r3, #6
 800474c:	2200      	movs	r2, #0
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004750:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	633b      	str	r3, [r7, #48]	; 0x30
 800475a:	2300      	movs	r3, #0
 800475c:	637b      	str	r3, [r7, #52]	; 0x34
 800475e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004762:	4622      	mov	r2, r4
 8004764:	462b      	mov	r3, r5
 8004766:	f04f 0000 	mov.w	r0, #0
 800476a:	f04f 0100 	mov.w	r1, #0
 800476e:	0159      	lsls	r1, r3, #5
 8004770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004774:	0150      	lsls	r0, r2, #5
 8004776:	4602      	mov	r2, r0
 8004778:	460b      	mov	r3, r1
 800477a:	4621      	mov	r1, r4
 800477c:	1a51      	subs	r1, r2, r1
 800477e:	6139      	str	r1, [r7, #16]
 8004780:	4629      	mov	r1, r5
 8004782:	eb63 0301 	sbc.w	r3, r3, r1
 8004786:	617b      	str	r3, [r7, #20]
 8004788:	f04f 0200 	mov.w	r2, #0
 800478c:	f04f 0300 	mov.w	r3, #0
 8004790:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004794:	4659      	mov	r1, fp
 8004796:	018b      	lsls	r3, r1, #6
 8004798:	4651      	mov	r1, sl
 800479a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800479e:	4651      	mov	r1, sl
 80047a0:	018a      	lsls	r2, r1, #6
 80047a2:	4651      	mov	r1, sl
 80047a4:	ebb2 0801 	subs.w	r8, r2, r1
 80047a8:	4659      	mov	r1, fp
 80047aa:	eb63 0901 	sbc.w	r9, r3, r1
 80047ae:	f04f 0200 	mov.w	r2, #0
 80047b2:	f04f 0300 	mov.w	r3, #0
 80047b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047c2:	4690      	mov	r8, r2
 80047c4:	4699      	mov	r9, r3
 80047c6:	4623      	mov	r3, r4
 80047c8:	eb18 0303 	adds.w	r3, r8, r3
 80047cc:	60bb      	str	r3, [r7, #8]
 80047ce:	462b      	mov	r3, r5
 80047d0:	eb49 0303 	adc.w	r3, r9, r3
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047e2:	4629      	mov	r1, r5
 80047e4:	024b      	lsls	r3, r1, #9
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047ec:	4621      	mov	r1, r4
 80047ee:	024a      	lsls	r2, r1, #9
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004800:	f7fc f96c 	bl	8000adc <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800480c:	e058      	b.n	80048c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	099b      	lsrs	r3, r3, #6
 8004814:	2200      	movs	r2, #0
 8004816:	4618      	mov	r0, r3
 8004818:	4611      	mov	r1, r2
 800481a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800481e:	623b      	str	r3, [r7, #32]
 8004820:	2300      	movs	r3, #0
 8004822:	627b      	str	r3, [r7, #36]	; 0x24
 8004824:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004828:	4642      	mov	r2, r8
 800482a:	464b      	mov	r3, r9
 800482c:	f04f 0000 	mov.w	r0, #0
 8004830:	f04f 0100 	mov.w	r1, #0
 8004834:	0159      	lsls	r1, r3, #5
 8004836:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800483a:	0150      	lsls	r0, r2, #5
 800483c:	4602      	mov	r2, r0
 800483e:	460b      	mov	r3, r1
 8004840:	4641      	mov	r1, r8
 8004842:	ebb2 0a01 	subs.w	sl, r2, r1
 8004846:	4649      	mov	r1, r9
 8004848:	eb63 0b01 	sbc.w	fp, r3, r1
 800484c:	f04f 0200 	mov.w	r2, #0
 8004850:	f04f 0300 	mov.w	r3, #0
 8004854:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004858:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800485c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004860:	ebb2 040a 	subs.w	r4, r2, sl
 8004864:	eb63 050b 	sbc.w	r5, r3, fp
 8004868:	f04f 0200 	mov.w	r2, #0
 800486c:	f04f 0300 	mov.w	r3, #0
 8004870:	00eb      	lsls	r3, r5, #3
 8004872:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004876:	00e2      	lsls	r2, r4, #3
 8004878:	4614      	mov	r4, r2
 800487a:	461d      	mov	r5, r3
 800487c:	4643      	mov	r3, r8
 800487e:	18e3      	adds	r3, r4, r3
 8004880:	603b      	str	r3, [r7, #0]
 8004882:	464b      	mov	r3, r9
 8004884:	eb45 0303 	adc.w	r3, r5, r3
 8004888:	607b      	str	r3, [r7, #4]
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004896:	4629      	mov	r1, r5
 8004898:	028b      	lsls	r3, r1, #10
 800489a:	4621      	mov	r1, r4
 800489c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048a0:	4621      	mov	r1, r4
 80048a2:	028a      	lsls	r2, r1, #10
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048aa:	2200      	movs	r2, #0
 80048ac:	61bb      	str	r3, [r7, #24]
 80048ae:	61fa      	str	r2, [r7, #28]
 80048b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048b4:	f7fc f912 	bl	8000adc <__aeabi_uldivmod>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	4613      	mov	r3, r2
 80048be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80048c0:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	0c1b      	lsrs	r3, r3, #16
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	3301      	adds	r3, #1
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80048d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048da:	e002      	b.n	80048e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b05      	ldr	r3, [pc, #20]	; (80048f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3750      	adds	r7, #80	; 0x50
 80048e8:	46bd      	mov	sp, r7
 80048ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ee:	bf00      	nop
 80048f0:	40023800 	.word	0x40023800
 80048f4:	00f42400 	.word	0x00f42400
 80048f8:	007a1200 	.word	0x007a1200

080048fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004900:	4b03      	ldr	r3, [pc, #12]	; (8004910 <HAL_RCC_GetHCLKFreq+0x14>)
 8004902:	681b      	ldr	r3, [r3, #0]
}
 8004904:	4618      	mov	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490c:	4770      	bx	lr
 800490e:	bf00      	nop
 8004910:	20000000 	.word	0x20000000

08004914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004918:	f7ff fff0 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 800491c:	4602      	mov	r2, r0
 800491e:	4b05      	ldr	r3, [pc, #20]	; (8004934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	0a9b      	lsrs	r3, r3, #10
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	4903      	ldr	r1, [pc, #12]	; (8004938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800492a:	5ccb      	ldrb	r3, [r1, r3]
 800492c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004930:	4618      	mov	r0, r3
 8004932:	bd80      	pop	{r7, pc}
 8004934:	40023800 	.word	0x40023800
 8004938:	08008308 	.word	0x08008308

0800493c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004940:	f7ff ffdc 	bl	80048fc <HAL_RCC_GetHCLKFreq>
 8004944:	4602      	mov	r2, r0
 8004946:	4b05      	ldr	r3, [pc, #20]	; (800495c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	0b5b      	lsrs	r3, r3, #13
 800494c:	f003 0307 	and.w	r3, r3, #7
 8004950:	4903      	ldr	r1, [pc, #12]	; (8004960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004952:	5ccb      	ldrb	r3, [r1, r3]
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004958:	4618      	mov	r0, r3
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40023800 	.word	0x40023800
 8004960:	08008308 	.word	0x08008308

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b088      	sub	sp, #32
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0301 	and.w	r3, r3, #1
 8004988:	2b00      	cmp	r3, #0
 800498a:	d012      	beq.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800498c:	4b69      	ldr	r3, [pc, #420]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	4a68      	ldr	r2, [pc, #416]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004992:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004996:	6093      	str	r3, [r2, #8]
 8004998:	4b66      	ldr	r3, [pc, #408]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800499a:	689a      	ldr	r2, [r3, #8]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049a0:	4964      	ldr	r1, [pc, #400]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d101      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80049ae:	2301      	movs	r3, #1
 80049b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d017      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049be:	4b5d      	ldr	r3, [pc, #372]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80049c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049cc:	4959      	ldr	r1, [pc, #356]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049ce:	4313      	orrs	r3, r2
 80049d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049dc:	d101      	bne.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80049de:	2301      	movs	r3, #1
 80049e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80049ea:	2301      	movs	r3, #1
 80049ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d017      	beq.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80049fa:	4b4e      	ldr	r3, [pc, #312]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80049fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a08:	494a      	ldr	r1, [pc, #296]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a18:	d101      	bne.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d101      	bne.n	8004a2a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004a26:	2301      	movs	r3, #1
 8004a28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004a36:	2301      	movs	r3, #1
 8004a38:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0320 	and.w	r3, r3, #32
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 808b 	beq.w	8004b5e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a48:	4b3a      	ldr	r3, [pc, #232]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	4a39      	ldr	r2, [pc, #228]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a52:	6413      	str	r3, [r2, #64]	; 0x40
 8004a54:	4b37      	ldr	r3, [pc, #220]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5c:	60bb      	str	r3, [r7, #8]
 8004a5e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004a60:	4b35      	ldr	r3, [pc, #212]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a6c:	f7fe f820 	bl	8002ab0 <HAL_GetTick>
 8004a70:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a74:	f7fe f81c 	bl	8002ab0 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b64      	cmp	r3, #100	; 0x64
 8004a80:	d901      	bls.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e357      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004a86:	4b2c      	ldr	r3, [pc, #176]	; (8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d0f0      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004a92:	4b28      	ldr	r3, [pc, #160]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a9a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004a9c:	693b      	ldr	r3, [r7, #16]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d035      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	429a      	cmp	r2, r3
 8004aae:	d02e      	beq.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ab0:	4b20      	ldr	r3, [pc, #128]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ab8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004aba:	4b1e      	ldr	r3, [pc, #120]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004abe:	4a1d      	ldr	r2, [pc, #116]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ac6:	4b1b      	ldr	r3, [pc, #108]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	4a1a      	ldr	r2, [pc, #104]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004acc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ad0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004ad2:	4a18      	ldr	r2, [pc, #96]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004ad8:	4b16      	ldr	r3, [pc, #88]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d114      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae4:	f7fd ffe4 	bl	8002ab0 <HAL_GetTick>
 8004ae8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004aea:	e00a      	b.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004aec:	f7fd ffe0 	bl	8002ab0 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d901      	bls.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004afe:	2303      	movs	r3, #3
 8004b00:	e319      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b02:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d0ee      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b1a:	d111      	bne.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004b1c:	4b05      	ldr	r3, [pc, #20]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b28:	4b04      	ldr	r3, [pc, #16]	; (8004b3c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	4901      	ldr	r1, [pc, #4]	; (8004b34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	608b      	str	r3, [r1, #8]
 8004b32:	e00b      	b.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004b34:	40023800 	.word	0x40023800
 8004b38:	40007000 	.word	0x40007000
 8004b3c:	0ffffcff 	.word	0x0ffffcff
 8004b40:	4baa      	ldr	r3, [pc, #680]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	4aa9      	ldr	r2, [pc, #676]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b46:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004b4a:	6093      	str	r3, [r2, #8]
 8004b4c:	4ba7      	ldr	r3, [pc, #668]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b58:	49a4      	ldr	r1, [pc, #656]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0310 	and.w	r3, r3, #16
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d010      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004b6a:	4ba0      	ldr	r3, [pc, #640]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b6c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b70:	4a9e      	ldr	r2, [pc, #632]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004b76:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004b7a:	4b9c      	ldr	r3, [pc, #624]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b7c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	4999      	ldr	r1, [pc, #612]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d00a      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b98:	4b94      	ldr	r3, [pc, #592]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b9e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba6:	4991      	ldr	r1, [pc, #580]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00a      	beq.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bba:	4b8c      	ldr	r3, [pc, #560]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bc8:	4988      	ldr	r1, [pc, #544]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d00a      	beq.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bdc:	4b83      	ldr	r3, [pc, #524]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004be2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004bea:	4980      	ldr	r1, [pc, #512]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d00a      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004bfe:	4b7b      	ldr	r3, [pc, #492]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c0c:	4977      	ldr	r1, [pc, #476]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d00a      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004c20:	4b72      	ldr	r3, [pc, #456]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c26:	f023 0203 	bic.w	r2, r3, #3
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2e:	496f      	ldr	r1, [pc, #444]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d00a      	beq.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c42:	4b6a      	ldr	r3, [pc, #424]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c48:	f023 020c 	bic.w	r2, r3, #12
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c50:	4966      	ldr	r1, [pc, #408]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00a      	beq.n	8004c7a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c64:	4b61      	ldr	r3, [pc, #388]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c72:	495e      	ldr	r1, [pc, #376]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c74:	4313      	orrs	r3, r2
 8004c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c86:	4b59      	ldr	r3, [pc, #356]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c8c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c94:	4955      	ldr	r1, [pc, #340]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004c96:	4313      	orrs	r3, r2
 8004c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d00a      	beq.n	8004cbe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004ca8:	4b50      	ldr	r3, [pc, #320]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cb6:	494d      	ldr	r1, [pc, #308]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cb8:	4313      	orrs	r3, r2
 8004cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00a      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004cca:	4b48      	ldr	r3, [pc, #288]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cd8:	4944      	ldr	r1, [pc, #272]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d00a      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004cec:	4b3f      	ldr	r3, [pc, #252]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cfa:	493c      	ldr	r1, [pc, #240]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d00a      	beq.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004d0e:	4b37      	ldr	r3, [pc, #220]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d14:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d1c:	4933      	ldr	r1, [pc, #204]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d00a      	beq.n	8004d46 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d30:	4b2e      	ldr	r3, [pc, #184]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d3e:	492b      	ldr	r1, [pc, #172]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d40:	4313      	orrs	r3, r2
 8004d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d011      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004d52:	4b26      	ldr	r3, [pc, #152]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d58:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d60:	4922      	ldr	r1, [pc, #136]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d62:	4313      	orrs	r3, r2
 8004d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d70:	d101      	bne.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0308 	and.w	r3, r3, #8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d001      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004d82:	2301      	movs	r3, #1
 8004d84:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d92:	4b16      	ldr	r3, [pc, #88]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d98:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da0:	4912      	ldr	r1, [pc, #72]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004db4:	4b0d      	ldr	r3, [pc, #52]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004dba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc4:	4909      	ldr	r1, [pc, #36]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc6:	4313      	orrs	r3, r2
 8004dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b01      	cmp	r3, #1
 8004dd0:	d006      	beq.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f000 80d9 	beq.w	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a01      	ldr	r2, [pc, #4]	; (8004dec <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004dea:	e001      	b.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004dec:	40023800 	.word	0x40023800
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df2:	f7fd fe5d 	bl	8002ab0 <HAL_GetTick>
 8004df6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004df8:	e008      	b.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004dfa:	f7fd fe59 	bl	8002ab0 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b64      	cmp	r3, #100	; 0x64
 8004e06:	d901      	bls.n	8004e0c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e194      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e0c:	4b6c      	ldr	r3, [pc, #432]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d021      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d11d      	bne.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e2c:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e32:	0c1b      	lsrs	r3, r3, #16
 8004e34:	f003 0303 	and.w	r3, r3, #3
 8004e38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004e3a:	4b61      	ldr	r3, [pc, #388]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e40:	0e1b      	lsrs	r3, r3, #24
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	019a      	lsls	r2, r3, #6
 8004e4e:	693b      	ldr	r3, [r7, #16]
 8004e50:	041b      	lsls	r3, r3, #16
 8004e52:	431a      	orrs	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	071b      	lsls	r3, r3, #28
 8004e60:	4957      	ldr	r1, [pc, #348]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e62:	4313      	orrs	r3, r2
 8004e64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d004      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e7c:	d00a      	beq.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d02e      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e92:	d129      	bne.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004e94:	4b4a      	ldr	r3, [pc, #296]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004e96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e9a:	0c1b      	lsrs	r3, r3, #16
 8004e9c:	f003 0303 	and.w	r3, r3, #3
 8004ea0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ea2:	4b47      	ldr	r3, [pc, #284]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ea4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ea8:	0f1b      	lsrs	r3, r3, #28
 8004eaa:	f003 0307 	and.w	r3, r3, #7
 8004eae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	019a      	lsls	r2, r3, #6
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	041b      	lsls	r3, r3, #16
 8004eba:	431a      	orrs	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	68db      	ldr	r3, [r3, #12]
 8004ec0:	061b      	lsls	r3, r3, #24
 8004ec2:	431a      	orrs	r2, r3
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	071b      	lsls	r3, r3, #28
 8004ec8:	493d      	ldr	r1, [pc, #244]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004ed0:	4b3b      	ldr	r3, [pc, #236]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ed2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ed6:	f023 021f 	bic.w	r2, r3, #31
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	4937      	ldr	r1, [pc, #220]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d01d      	beq.n	8004f30 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004ef4:	4b32      	ldr	r3, [pc, #200]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ef6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004efa:	0e1b      	lsrs	r3, r3, #24
 8004efc:	f003 030f 	and.w	r3, r3, #15
 8004f00:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004f02:	4b2f      	ldr	r3, [pc, #188]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f08:	0f1b      	lsrs	r3, r3, #28
 8004f0a:	f003 0307 	and.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	019a      	lsls	r2, r3, #6
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	041b      	lsls	r3, r3, #16
 8004f1c:	431a      	orrs	r2, r3
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	061b      	lsls	r3, r3, #24
 8004f22:	431a      	orrs	r2, r3
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	071b      	lsls	r3, r3, #28
 8004f28:	4925      	ldr	r1, [pc, #148]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d011      	beq.n	8004f60 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	019a      	lsls	r2, r3, #6
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	041b      	lsls	r3, r3, #16
 8004f48:	431a      	orrs	r2, r3
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	061b      	lsls	r3, r3, #24
 8004f50:	431a      	orrs	r2, r3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	071b      	lsls	r3, r3, #28
 8004f58:	4919      	ldr	r1, [pc, #100]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004f60:	4b17      	ldr	r3, [pc, #92]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a16      	ldr	r2, [pc, #88]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004f6a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f6c:	f7fd fda0 	bl	8002ab0 <HAL_GetTick>
 8004f70:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f72:	e008      	b.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004f74:	f7fd fd9c 	bl	8002ab0 <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	2b64      	cmp	r3, #100	; 0x64
 8004f80:	d901      	bls.n	8004f86 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f82:	2303      	movs	r3, #3
 8004f84:	e0d7      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004f86:	4b0e      	ldr	r3, [pc, #56]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d0f0      	beq.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	f040 80cd 	bne.w	8005134 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004f9a:	4b09      	ldr	r3, [pc, #36]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a08      	ldr	r2, [pc, #32]	; (8004fc0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004fa4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004fa6:	f7fd fd83 	bl	8002ab0 <HAL_GetTick>
 8004faa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fac:	e00a      	b.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004fae:	f7fd fd7f 	bl	8002ab0 <HAL_GetTick>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	1ad3      	subs	r3, r2, r3
 8004fb8:	2b64      	cmp	r3, #100	; 0x64
 8004fba:	d903      	bls.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004fbc:	2303      	movs	r3, #3
 8004fbe:	e0ba      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004fc0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004fc4:	4b5e      	ldr	r3, [pc, #376]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004fcc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fd0:	d0ed      	beq.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02e      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d12a      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ffa:	4b51      	ldr	r3, [pc, #324]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005000:	0c1b      	lsrs	r3, r3, #16
 8005002:	f003 0303 	and.w	r3, r3, #3
 8005006:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005008:	4b4d      	ldr	r3, [pc, #308]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800500a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800500e:	0f1b      	lsrs	r3, r3, #28
 8005010:	f003 0307 	and.w	r3, r3, #7
 8005014:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	695b      	ldr	r3, [r3, #20]
 800501a:	019a      	lsls	r2, r3, #6
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	041b      	lsls	r3, r3, #16
 8005020:	431a      	orrs	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	699b      	ldr	r3, [r3, #24]
 8005026:	061b      	lsls	r3, r3, #24
 8005028:	431a      	orrs	r2, r3
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	071b      	lsls	r3, r3, #28
 800502e:	4944      	ldr	r1, [pc, #272]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005030:	4313      	orrs	r3, r2
 8005032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005036:	4b42      	ldr	r3, [pc, #264]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800503c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005044:	3b01      	subs	r3, #1
 8005046:	021b      	lsls	r3, r3, #8
 8005048:	493d      	ldr	r1, [pc, #244]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d022      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005060:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005064:	d11d      	bne.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005066:	4b36      	ldr	r3, [pc, #216]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800506c:	0e1b      	lsrs	r3, r3, #24
 800506e:	f003 030f 	and.w	r3, r3, #15
 8005072:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005074:	4b32      	ldr	r3, [pc, #200]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005076:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800507a:	0f1b      	lsrs	r3, r3, #28
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	019a      	lsls	r2, r3, #6
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	431a      	orrs	r2, r3
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	061b      	lsls	r3, r3, #24
 8005094:	431a      	orrs	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	071b      	lsls	r3, r3, #28
 800509a:	4929      	ldr	r1, [pc, #164]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800509c:	4313      	orrs	r3, r2
 800509e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0308 	and.w	r3, r3, #8
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d028      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80050ae:	4b24      	ldr	r3, [pc, #144]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b4:	0e1b      	lsrs	r3, r3, #24
 80050b6:	f003 030f 	and.w	r3, r3, #15
 80050ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80050bc:	4b20      	ldr	r3, [pc, #128]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050c2:	0c1b      	lsrs	r3, r3, #16
 80050c4:	f003 0303 	and.w	r3, r3, #3
 80050c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	019a      	lsls	r2, r3, #6
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	041b      	lsls	r3, r3, #16
 80050d4:	431a      	orrs	r2, r3
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	061b      	lsls	r3, r3, #24
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	071b      	lsls	r3, r3, #28
 80050e2:	4917      	ldr	r1, [pc, #92]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050e4:	4313      	orrs	r3, r2
 80050e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80050ea:	4b15      	ldr	r3, [pc, #84]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80050f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050f8:	4911      	ldr	r1, [pc, #68]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80050fa:	4313      	orrs	r3, r2
 80050fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005100:	4b0f      	ldr	r3, [pc, #60]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0e      	ldr	r2, [pc, #56]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005106:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800510a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800510c:	f7fd fcd0 	bl	8002ab0 <HAL_GetTick>
 8005110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005112:	e008      	b.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005114:	f7fd fccc 	bl	8002ab0 <HAL_GetTick>
 8005118:	4602      	mov	r2, r0
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	1ad3      	subs	r3, r2, r3
 800511e:	2b64      	cmp	r3, #100	; 0x64
 8005120:	d901      	bls.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e007      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005126:	4b06      	ldr	r3, [pc, #24]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005132:	d1ef      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005134:	2300      	movs	r3, #0
}
 8005136:	4618      	mov	r0, r3
 8005138:	3720      	adds	r7, #32
 800513a:	46bd      	mov	sp, r7
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	40023800 	.word	0x40023800

08005144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e049      	b.n	80051ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800515c:	b2db      	uxtb	r3, r3
 800515e:	2b00      	cmp	r3, #0
 8005160:	d106      	bne.n	8005170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f7fd f9da 	bl	8002524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f000 fc34 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	2201      	movs	r2, #1
 8005194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2201      	movs	r2, #1
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2201      	movs	r2, #1
 80051a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2201      	movs	r2, #1
 80051b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2201      	movs	r2, #1
 80051bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2201      	movs	r2, #1
 80051d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2201      	movs	r2, #1
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3708      	adds	r7, #8
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
	...

080051f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b01      	cmp	r3, #1
 8005206:	d001      	beq.n	800520c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	e054      	b.n	80052b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2202      	movs	r2, #2
 8005210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68da      	ldr	r2, [r3, #12]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f042 0201 	orr.w	r2, r2, #1
 8005222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a26      	ldr	r2, [pc, #152]	; (80052c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d022      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005236:	d01d      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a22      	ldr	r2, [pc, #136]	; (80052c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d018      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a21      	ldr	r2, [pc, #132]	; (80052cc <HAL_TIM_Base_Start_IT+0xd8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d013      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a1f      	ldr	r2, [pc, #124]	; (80052d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00e      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d009      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	4a1c      	ldr	r2, [pc, #112]	; (80052d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d004      	beq.n	8005274 <HAL_TIM_Base_Start_IT+0x80>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1b      	ldr	r2, [pc, #108]	; (80052dc <HAL_TIM_Base_Start_IT+0xe8>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d115      	bne.n	80052a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689a      	ldr	r2, [r3, #8]
 800527a:	4b19      	ldr	r3, [pc, #100]	; (80052e0 <HAL_TIM_Base_Start_IT+0xec>)
 800527c:	4013      	ands	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b06      	cmp	r3, #6
 8005284:	d015      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d011      	beq.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800529e:	e008      	b.n	80052b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	e000      	b.n	80052b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3714      	adds	r7, #20
 80052ba:	46bd      	mov	sp, r7
 80052bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	40010000 	.word	0x40010000
 80052c8:	40000400 	.word	0x40000400
 80052cc:	40000800 	.word	0x40000800
 80052d0:	40000c00 	.word	0x40000c00
 80052d4:	40010400 	.word	0x40010400
 80052d8:	40014000 	.word	0x40014000
 80052dc:	40001800 	.word	0x40001800
 80052e0:	00010007 	.word	0x00010007

080052e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b082      	sub	sp, #8
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d101      	bne.n	80052f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e049      	b.n	800538a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d106      	bne.n	8005310 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2200      	movs	r2, #0
 8005306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 f841 	bl	8005392 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681a      	ldr	r2, [r3, #0]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	3304      	adds	r3, #4
 8005320:	4619      	mov	r1, r3
 8005322:	4610      	mov	r0, r2
 8005324:	f000 fb64 	bl	80059f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2201      	movs	r2, #1
 800532c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	2201      	movs	r2, #1
 8005334:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2201      	movs	r2, #1
 800533c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2201      	movs	r2, #1
 800534c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3708      	adds	r7, #8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800539a:	bf00      	nop
 800539c:	370c      	adds	r7, #12
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a6:	b580      	push	{r7, lr}
 80053a8:	b082      	sub	sp, #8
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	f003 0302 	and.w	r3, r3, #2
 80053b8:	2b02      	cmp	r3, #2
 80053ba:	d122      	bne.n	8005402 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0302 	and.w	r3, r3, #2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d11b      	bne.n	8005402 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f06f 0202 	mvn.w	r2, #2
 80053d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2201      	movs	r2, #1
 80053d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f003 0303 	and.w	r3, r3, #3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 fae3 	bl	80059b4 <HAL_TIM_IC_CaptureCallback>
 80053ee:	e005      	b.n	80053fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fad5 	bl	80059a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fae6 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2200      	movs	r2, #0
 8005400:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	f003 0304 	and.w	r3, r3, #4
 800540c:	2b04      	cmp	r3, #4
 800540e:	d122      	bne.n	8005456 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b04      	cmp	r3, #4
 800541c:	d11b      	bne.n	8005456 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f06f 0204 	mvn.w	r2, #4
 8005426:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	699b      	ldr	r3, [r3, #24]
 8005434:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005438:	2b00      	cmp	r3, #0
 800543a:	d003      	beq.n	8005444 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f000 fab9 	bl	80059b4 <HAL_TIM_IC_CaptureCallback>
 8005442:	e005      	b.n	8005450 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 faab 	bl	80059a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 fabc 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b08      	cmp	r3, #8
 8005462:	d122      	bne.n	80054aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0308 	and.w	r3, r3, #8
 800546e:	2b08      	cmp	r3, #8
 8005470:	d11b      	bne.n	80054aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	f06f 0208 	mvn.w	r2, #8
 800547a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2204      	movs	r2, #4
 8005480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69db      	ldr	r3, [r3, #28]
 8005488:	f003 0303 	and.w	r3, r3, #3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d003      	beq.n	8005498 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f000 fa8f 	bl	80059b4 <HAL_TIM_IC_CaptureCallback>
 8005496:	e005      	b.n	80054a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa81 	bl	80059a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 fa92 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	691b      	ldr	r3, [r3, #16]
 80054b0:	f003 0310 	and.w	r3, r3, #16
 80054b4:	2b10      	cmp	r3, #16
 80054b6:	d122      	bne.n	80054fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f003 0310 	and.w	r3, r3, #16
 80054c2:	2b10      	cmp	r3, #16
 80054c4:	d11b      	bne.n	80054fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f06f 0210 	mvn.w	r2, #16
 80054ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2208      	movs	r2, #8
 80054d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69db      	ldr	r3, [r3, #28]
 80054dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d003      	beq.n	80054ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 fa65 	bl	80059b4 <HAL_TIM_IC_CaptureCallback>
 80054ea:	e005      	b.n	80054f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa57 	bl	80059a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 fa68 	bl	80059c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f003 0301 	and.w	r3, r3, #1
 8005508:	2b01      	cmp	r3, #1
 800550a:	d10e      	bne.n	800552a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f06f 0201 	mvn.w	r2, #1
 8005522:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f7fb fc5b 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005534:	2b80      	cmp	r3, #128	; 0x80
 8005536:	d10e      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68db      	ldr	r3, [r3, #12]
 800553e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d107      	bne.n	8005556 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800554e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f000 fe7d 	bl	8006250 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005560:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005564:	d10e      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d107      	bne.n	8005584 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800557c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 fe70 	bl	8006264 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800558e:	2b40      	cmp	r3, #64	; 0x40
 8005590:	d10e      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800559c:	2b40      	cmp	r3, #64	; 0x40
 800559e:	d107      	bne.n	80055b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 fa16 	bl	80059dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	f003 0320 	and.w	r3, r3, #32
 80055ba:	2b20      	cmp	r3, #32
 80055bc:	d10e      	bne.n	80055dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	68db      	ldr	r3, [r3, #12]
 80055c4:	f003 0320 	and.w	r3, r3, #32
 80055c8:	2b20      	cmp	r3, #32
 80055ca:	d107      	bne.n	80055dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f06f 0220 	mvn.w	r2, #32
 80055d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fe30 	bl	800623c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055dc:	bf00      	nop
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055f0:	2300      	movs	r3, #0
 80055f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d101      	bne.n	8005602 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fe:	2302      	movs	r3, #2
 8005600:	e0ff      	b.n	8005802 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2b14      	cmp	r3, #20
 800560e:	f200 80f0 	bhi.w	80057f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005612:	a201      	add	r2, pc, #4	; (adr r2, 8005618 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005618:	0800566d 	.word	0x0800566d
 800561c:	080057f3 	.word	0x080057f3
 8005620:	080057f3 	.word	0x080057f3
 8005624:	080057f3 	.word	0x080057f3
 8005628:	080056ad 	.word	0x080056ad
 800562c:	080057f3 	.word	0x080057f3
 8005630:	080057f3 	.word	0x080057f3
 8005634:	080057f3 	.word	0x080057f3
 8005638:	080056ef 	.word	0x080056ef
 800563c:	080057f3 	.word	0x080057f3
 8005640:	080057f3 	.word	0x080057f3
 8005644:	080057f3 	.word	0x080057f3
 8005648:	0800572f 	.word	0x0800572f
 800564c:	080057f3 	.word	0x080057f3
 8005650:	080057f3 	.word	0x080057f3
 8005654:	080057f3 	.word	0x080057f3
 8005658:	08005771 	.word	0x08005771
 800565c:	080057f3 	.word	0x080057f3
 8005660:	080057f3 	.word	0x080057f3
 8005664:	080057f3 	.word	0x080057f3
 8005668:	080057b1 	.word	0x080057b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68b9      	ldr	r1, [r7, #8]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fa5c 	bl	8005b30 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	699a      	ldr	r2, [r3, #24]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f042 0208 	orr.w	r2, r2, #8
 8005686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f022 0204 	bic.w	r2, r2, #4
 8005696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	6999      	ldr	r1, [r3, #24]
 800569e:	68bb      	ldr	r3, [r7, #8]
 80056a0:	691a      	ldr	r2, [r3, #16]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	619a      	str	r2, [r3, #24]
      break;
 80056aa:	e0a5      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68b9      	ldr	r1, [r7, #8]
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 faae 	bl	8005c14 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	699a      	ldr	r2, [r3, #24]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699a      	ldr	r2, [r3, #24]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	021a      	lsls	r2, r3, #8
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	430a      	orrs	r2, r1
 80056ea:	619a      	str	r2, [r3, #24]
      break;
 80056ec:	e084      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	68b9      	ldr	r1, [r7, #8]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 fb05 	bl	8005d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	69da      	ldr	r2, [r3, #28]
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f042 0208 	orr.w	r2, r2, #8
 8005708:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0204 	bic.w	r2, r2, #4
 8005718:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69d9      	ldr	r1, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	691a      	ldr	r2, [r3, #16]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	430a      	orrs	r2, r1
 800572a:	61da      	str	r2, [r3, #28]
      break;
 800572c:	e064      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	4618      	mov	r0, r3
 8005736:	f000 fb5b 	bl	8005df0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	69da      	ldr	r2, [r3, #28]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	69da      	ldr	r2, [r3, #28]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	69d9      	ldr	r1, [r3, #28]
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	61da      	str	r2, [r3, #28]
      break;
 800576e:	e043      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68b9      	ldr	r1, [r7, #8]
 8005776:	4618      	mov	r0, r3
 8005778:	f000 fb92 	bl	8005ea0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f042 0208 	orr.w	r2, r2, #8
 800578a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f022 0204 	bic.w	r2, r2, #4
 800579a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	430a      	orrs	r2, r1
 80057ac:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ae:	e023      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68b9      	ldr	r1, [r7, #8]
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fbc4 	bl	8005f44 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057ca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057da:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	691b      	ldr	r3, [r3, #16]
 80057e6:	021a      	lsls	r2, r3, #8
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	430a      	orrs	r2, r1
 80057ee:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057f0:	e002      	b.n	80057f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	75fb      	strb	r3, [r7, #23]
      break;
 80057f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005800:	7dfb      	ldrb	r3, [r7, #23]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3718      	adds	r7, #24
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
 800580a:	bf00      	nop

0800580c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b084      	sub	sp, #16
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005816:	2300      	movs	r3, #0
 8005818:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005820:	2b01      	cmp	r3, #1
 8005822:	d101      	bne.n	8005828 <HAL_TIM_ConfigClockSource+0x1c>
 8005824:	2302      	movs	r3, #2
 8005826:	e0b4      	b.n	8005992 <HAL_TIM_ConfigClockSource+0x186>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2202      	movs	r2, #2
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005840:	68ba      	ldr	r2, [r7, #8]
 8005842:	4b56      	ldr	r3, [pc, #344]	; (800599c <HAL_TIM_ConfigClockSource+0x190>)
 8005844:	4013      	ands	r3, r2
 8005846:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005860:	d03e      	beq.n	80058e0 <HAL_TIM_ConfigClockSource+0xd4>
 8005862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005866:	f200 8087 	bhi.w	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 800586a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586e:	f000 8086 	beq.w	800597e <HAL_TIM_ConfigClockSource+0x172>
 8005872:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005876:	d87f      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 8005878:	2b70      	cmp	r3, #112	; 0x70
 800587a:	d01a      	beq.n	80058b2 <HAL_TIM_ConfigClockSource+0xa6>
 800587c:	2b70      	cmp	r3, #112	; 0x70
 800587e:	d87b      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 8005880:	2b60      	cmp	r3, #96	; 0x60
 8005882:	d050      	beq.n	8005926 <HAL_TIM_ConfigClockSource+0x11a>
 8005884:	2b60      	cmp	r3, #96	; 0x60
 8005886:	d877      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d03c      	beq.n	8005906 <HAL_TIM_ConfigClockSource+0xfa>
 800588c:	2b50      	cmp	r3, #80	; 0x50
 800588e:	d873      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d058      	beq.n	8005946 <HAL_TIM_ConfigClockSource+0x13a>
 8005894:	2b40      	cmp	r3, #64	; 0x40
 8005896:	d86f      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d064      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15a>
 800589c:	2b30      	cmp	r3, #48	; 0x30
 800589e:	d86b      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d060      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15a>
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d867      	bhi.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d05c      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	2b10      	cmp	r3, #16
 80058ae:	d05a      	beq.n	8005966 <HAL_TIM_ConfigClockSource+0x15a>
 80058b0:	e062      	b.n	8005978 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6818      	ldr	r0, [r3, #0]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	6899      	ldr	r1, [r3, #8]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	685a      	ldr	r2, [r3, #4]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	f000 fc0d 	bl	80060e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	609a      	str	r2, [r3, #8]
      break;
 80058de:	e04f      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6818      	ldr	r0, [r3, #0]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	6899      	ldr	r1, [r3, #8]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f000 fbf6 	bl	80060e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	689a      	ldr	r2, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005902:	609a      	str	r2, [r3, #8]
      break;
 8005904:	e03c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6818      	ldr	r0, [r3, #0]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6859      	ldr	r1, [r3, #4]
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	461a      	mov	r2, r3
 8005914:	f000 fb6a 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	2150      	movs	r1, #80	; 0x50
 800591e:	4618      	mov	r0, r3
 8005920:	f000 fbc3 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005924:	e02c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6818      	ldr	r0, [r3, #0]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	6859      	ldr	r1, [r3, #4]
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	461a      	mov	r2, r3
 8005934:	f000 fb89 	bl	800604a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	2160      	movs	r1, #96	; 0x60
 800593e:	4618      	mov	r0, r3
 8005940:	f000 fbb3 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005944:	e01c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	6859      	ldr	r1, [r3, #4]
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	461a      	mov	r2, r3
 8005954:	f000 fb4a 	bl	8005fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2140      	movs	r1, #64	; 0x40
 800595e:	4618      	mov	r0, r3
 8005960:	f000 fba3 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005964:	e00c      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4619      	mov	r1, r3
 8005970:	4610      	mov	r0, r2
 8005972:	f000 fb9a 	bl	80060aa <TIM_ITRx_SetConfig>
      break;
 8005976:	e003      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005978:	2301      	movs	r3, #1
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e000      	b.n	8005980 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800597e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005990:	7bfb      	ldrb	r3, [r7, #15]
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	fffeff88 	.word	0xfffeff88

080059a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b083      	sub	sp, #12
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b085      	sub	sp, #20
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	4a40      	ldr	r2, [pc, #256]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d013      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0e:	d00f      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	4a3d      	ldr	r2, [pc, #244]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d00b      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a3c      	ldr	r2, [pc, #240]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d007      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a3b      	ldr	r2, [pc, #236]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d003      	beq.n	8005a30 <TIM_Base_SetConfig+0x40>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a3a      	ldr	r2, [pc, #232]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d108      	bne.n	8005a42 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	68fa      	ldr	r2, [r7, #12]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a2f      	ldr	r2, [pc, #188]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d02b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a50:	d027      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	4a2c      	ldr	r2, [pc, #176]	; (8005b08 <TIM_Base_SetConfig+0x118>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d023      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	4a2b      	ldr	r2, [pc, #172]	; (8005b0c <TIM_Base_SetConfig+0x11c>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d01f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4a2a      	ldr	r2, [pc, #168]	; (8005b10 <TIM_Base_SetConfig+0x120>)
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d01b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a29      	ldr	r2, [pc, #164]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d017      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a28      	ldr	r2, [pc, #160]	; (8005b18 <TIM_Base_SetConfig+0x128>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d013      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a27      	ldr	r2, [pc, #156]	; (8005b1c <TIM_Base_SetConfig+0x12c>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00f      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a26      	ldr	r2, [pc, #152]	; (8005b20 <TIM_Base_SetConfig+0x130>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d00b      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a25      	ldr	r2, [pc, #148]	; (8005b24 <TIM_Base_SetConfig+0x134>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d007      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a24      	ldr	r2, [pc, #144]	; (8005b28 <TIM_Base_SetConfig+0x138>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d003      	beq.n	8005aa2 <TIM_Base_SetConfig+0xb2>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a23      	ldr	r2, [pc, #140]	; (8005b2c <TIM_Base_SetConfig+0x13c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d108      	bne.n	8005ab4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	4313      	orrs	r3, r2
 8005ac0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68fa      	ldr	r2, [r7, #12]
 8005ac6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	4a0a      	ldr	r2, [pc, #40]	; (8005b04 <TIM_Base_SetConfig+0x114>)
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d003      	beq.n	8005ae8 <TIM_Base_SetConfig+0xf8>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a0c      	ldr	r2, [pc, #48]	; (8005b14 <TIM_Base_SetConfig+0x124>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d103      	bne.n	8005af0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	691a      	ldr	r2, [r3, #16]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2201      	movs	r2, #1
 8005af4:	615a      	str	r2, [r3, #20]
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	40010000 	.word	0x40010000
 8005b08:	40000400 	.word	0x40000400
 8005b0c:	40000800 	.word	0x40000800
 8005b10:	40000c00 	.word	0x40000c00
 8005b14:	40010400 	.word	0x40010400
 8005b18:	40014000 	.word	0x40014000
 8005b1c:	40014400 	.word	0x40014400
 8005b20:	40014800 	.word	0x40014800
 8005b24:	40001800 	.word	0x40001800
 8005b28:	40001c00 	.word	0x40001c00
 8005b2c:	40002000 	.word	0x40002000

08005b30 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f023 0201 	bic.w	r2, r3, #1
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4b2b      	ldr	r3, [pc, #172]	; (8005c08 <TIM_OC1_SetConfig+0xd8>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	4313      	orrs	r3, r2
 8005b82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a21      	ldr	r2, [pc, #132]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d003      	beq.n	8005b94 <TIM_OC1_SetConfig+0x64>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a20      	ldr	r2, [pc, #128]	; (8005c10 <TIM_OC1_SetConfig+0xe0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d10c      	bne.n	8005bae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0308 	bic.w	r3, r3, #8
 8005b9a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	697a      	ldr	r2, [r7, #20]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba6:	697b      	ldr	r3, [r7, #20]
 8005ba8:	f023 0304 	bic.w	r3, r3, #4
 8005bac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a16      	ldr	r2, [pc, #88]	; (8005c0c <TIM_OC1_SetConfig+0xdc>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d003      	beq.n	8005bbe <TIM_OC1_SetConfig+0x8e>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a15      	ldr	r2, [pc, #84]	; (8005c10 <TIM_OC1_SetConfig+0xe0>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d111      	bne.n	8005be2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	695b      	ldr	r3, [r3, #20]
 8005bd2:	693a      	ldr	r2, [r7, #16]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	693a      	ldr	r2, [r7, #16]
 8005be6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	68fa      	ldr	r2, [r7, #12]
 8005bec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	621a      	str	r2, [r3, #32]
}
 8005bfc:	bf00      	nop
 8005bfe:	371c      	adds	r7, #28
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	fffeff8f 	.word	0xfffeff8f
 8005c0c:	40010000 	.word	0x40010000
 8005c10:	40010400 	.word	0x40010400

08005c14 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b087      	sub	sp, #28
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	6a1b      	ldr	r3, [r3, #32]
 8005c22:	f023 0210 	bic.w	r2, r3, #16
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c3c:	68fa      	ldr	r2, [r7, #12]
 8005c3e:	4b2e      	ldr	r3, [pc, #184]	; (8005cf8 <TIM_OC2_SetConfig+0xe4>)
 8005c40:	4013      	ands	r3, r2
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f023 0320 	bic.w	r3, r3, #32
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	011b      	lsls	r3, r3, #4
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a23      	ldr	r2, [pc, #140]	; (8005cfc <TIM_OC2_SetConfig+0xe8>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d003      	beq.n	8005c7c <TIM_OC2_SetConfig+0x68>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a22      	ldr	r2, [pc, #136]	; (8005d00 <TIM_OC2_SetConfig+0xec>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d10d      	bne.n	8005c98 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	68db      	ldr	r3, [r3, #12]
 8005c88:	011b      	lsls	r3, r3, #4
 8005c8a:	697a      	ldr	r2, [r7, #20]
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c96:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	; (8005cfc <TIM_OC2_SetConfig+0xe8>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d003      	beq.n	8005ca8 <TIM_OC2_SetConfig+0x94>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a17      	ldr	r2, [pc, #92]	; (8005d00 <TIM_OC2_SetConfig+0xec>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d113      	bne.n	8005cd0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	695b      	ldr	r3, [r3, #20]
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	693a      	ldr	r2, [r7, #16]
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	693a      	ldr	r2, [r7, #16]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	697a      	ldr	r2, [r7, #20]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf4:	4770      	bx	lr
 8005cf6:	bf00      	nop
 8005cf8:	feff8fff 	.word	0xfeff8fff
 8005cfc:	40010000 	.word	0x40010000
 8005d00:	40010400 	.word	0x40010400

08005d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6a1b      	ldr	r3, [r3, #32]
 8005d1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	69db      	ldr	r3, [r3, #28]
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d2c:	68fa      	ldr	r2, [r7, #12]
 8005d2e:	4b2d      	ldr	r3, [pc, #180]	; (8005de4 <TIM_OC3_SetConfig+0xe0>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f023 0303 	bic.w	r3, r3, #3
 8005d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	68fa      	ldr	r2, [r7, #12]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	021b      	lsls	r3, r3, #8
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	4313      	orrs	r3, r2
 8005d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	4a22      	ldr	r2, [pc, #136]	; (8005de8 <TIM_OC3_SetConfig+0xe4>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d003      	beq.n	8005d6a <TIM_OC3_SetConfig+0x66>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	4a21      	ldr	r2, [pc, #132]	; (8005dec <TIM_OC3_SetConfig+0xe8>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d10d      	bne.n	8005d86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d72:	683b      	ldr	r3, [r7, #0]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	021b      	lsls	r3, r3, #8
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	4a17      	ldr	r2, [pc, #92]	; (8005de8 <TIM_OC3_SetConfig+0xe4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_OC3_SetConfig+0x92>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	4a16      	ldr	r2, [pc, #88]	; (8005dec <TIM_OC3_SetConfig+0xe8>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d113      	bne.n	8005dbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	695b      	ldr	r3, [r3, #20]
 8005daa:	011b      	lsls	r3, r3, #4
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	011b      	lsls	r3, r3, #4
 8005db8:	693a      	ldr	r2, [r7, #16]
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68fa      	ldr	r2, [r7, #12]
 8005dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685a      	ldr	r2, [r3, #4]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	621a      	str	r2, [r3, #32]
}
 8005dd8:	bf00      	nop
 8005dda:	371c      	adds	r7, #28
 8005ddc:	46bd      	mov	sp, r7
 8005dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de2:	4770      	bx	lr
 8005de4:	fffeff8f 	.word	0xfffeff8f
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40010400 	.word	0x40010400

08005df0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b087      	sub	sp, #28
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6a1b      	ldr	r3, [r3, #32]
 8005dfe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	69db      	ldr	r3, [r3, #28]
 8005e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	4b1e      	ldr	r3, [pc, #120]	; (8005e94 <TIM_OC4_SetConfig+0xa4>)
 8005e1c:	4013      	ands	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	021b      	lsls	r3, r3, #8
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e3a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	031b      	lsls	r3, r3, #12
 8005e42:	693a      	ldr	r2, [r7, #16]
 8005e44:	4313      	orrs	r3, r2
 8005e46:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a13      	ldr	r2, [pc, #76]	; (8005e98 <TIM_OC4_SetConfig+0xa8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d003      	beq.n	8005e58 <TIM_OC4_SetConfig+0x68>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	4a12      	ldr	r2, [pc, #72]	; (8005e9c <TIM_OC4_SetConfig+0xac>)
 8005e54:	4293      	cmp	r3, r2
 8005e56:	d109      	bne.n	8005e6c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	695b      	ldr	r3, [r3, #20]
 8005e64:	019b      	lsls	r3, r3, #6
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	697a      	ldr	r2, [r7, #20]
 8005e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	68fa      	ldr	r2, [r7, #12]
 8005e76:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	685a      	ldr	r2, [r3, #4]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	693a      	ldr	r2, [r7, #16]
 8005e84:	621a      	str	r2, [r3, #32]
}
 8005e86:	bf00      	nop
 8005e88:	371c      	adds	r7, #28
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	feff8fff 	.word	0xfeff8fff
 8005e98:	40010000 	.word	0x40010000
 8005e9c:	40010400 	.word	0x40010400

08005ea0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec8:	68fa      	ldr	r2, [r7, #12]
 8005eca:	4b1b      	ldr	r3, [pc, #108]	; (8005f38 <TIM_OC5_SetConfig+0x98>)
 8005ecc:	4013      	ands	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005ee0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	041b      	lsls	r3, r3, #16
 8005ee8:	693a      	ldr	r2, [r7, #16]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	4a12      	ldr	r2, [pc, #72]	; (8005f3c <TIM_OC5_SetConfig+0x9c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d003      	beq.n	8005efe <TIM_OC5_SetConfig+0x5e>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a11      	ldr	r2, [pc, #68]	; (8005f40 <TIM_OC5_SetConfig+0xa0>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d109      	bne.n	8005f12 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	021b      	lsls	r3, r3, #8
 8005f0c:	697a      	ldr	r2, [r7, #20]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	697a      	ldr	r2, [r7, #20]
 8005f16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	693a      	ldr	r2, [r7, #16]
 8005f2a:	621a      	str	r2, [r3, #32]
}
 8005f2c:	bf00      	nop
 8005f2e:	371c      	adds	r7, #28
 8005f30:	46bd      	mov	sp, r7
 8005f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f36:	4770      	bx	lr
 8005f38:	fffeff8f 	.word	0xfffeff8f
 8005f3c:	40010000 	.word	0x40010000
 8005f40:	40010400 	.word	0x40010400

08005f44 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	4b1c      	ldr	r3, [pc, #112]	; (8005fe0 <TIM_OC6_SetConfig+0x9c>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f74:	683b      	ldr	r3, [r7, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	021b      	lsls	r3, r3, #8
 8005f7a:	68fa      	ldr	r2, [r7, #12]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f80:	693b      	ldr	r3, [r7, #16]
 8005f82:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	051b      	lsls	r3, r3, #20
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a13      	ldr	r2, [pc, #76]	; (8005fe4 <TIM_OC6_SetConfig+0xa0>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d003      	beq.n	8005fa4 <TIM_OC6_SetConfig+0x60>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a12      	ldr	r2, [pc, #72]	; (8005fe8 <TIM_OC6_SetConfig+0xa4>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d109      	bne.n	8005fb8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005faa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	029b      	lsls	r3, r3, #10
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685a      	ldr	r2, [r3, #4]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	693a      	ldr	r2, [r7, #16]
 8005fd0:	621a      	str	r2, [r3, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	371c      	adds	r7, #28
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	feff8fff 	.word	0xfeff8fff
 8005fe4:	40010000 	.word	0x40010000
 8005fe8:	40010400 	.word	0x40010400

08005fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1b      	ldr	r3, [r3, #32]
 8005ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	f023 0201 	bic.w	r2, r3, #1
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	011b      	lsls	r3, r3, #4
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	4313      	orrs	r3, r2
 8006020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f023 030a 	bic.w	r3, r3, #10
 8006028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	4313      	orrs	r3, r2
 8006030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	697a      	ldr	r2, [r7, #20]
 800603c:	621a      	str	r2, [r3, #32]
}
 800603e:	bf00      	nop
 8006040:	371c      	adds	r7, #28
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr

0800604a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800604a:	b480      	push	{r7}
 800604c:	b087      	sub	sp, #28
 800604e:	af00      	add	r7, sp, #0
 8006050:	60f8      	str	r0, [r7, #12]
 8006052:	60b9      	str	r1, [r7, #8]
 8006054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	f023 0210 	bic.w	r2, r3, #16
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6a1b      	ldr	r3, [r3, #32]
 800606c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4313      	orrs	r3, r2
 800607e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	693a      	ldr	r2, [r7, #16]
 800608e:	4313      	orrs	r3, r2
 8006090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	697a      	ldr	r2, [r7, #20]
 8006096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	693a      	ldr	r2, [r7, #16]
 800609c:	621a      	str	r2, [r3, #32]
}
 800609e:	bf00      	nop
 80060a0:	371c      	adds	r7, #28
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b085      	sub	sp, #20
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
 80060b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060c2:	683a      	ldr	r2, [r7, #0]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f043 0307 	orr.w	r3, r3, #7
 80060cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	609a      	str	r2, [r3, #8]
}
 80060d4:	bf00      	nop
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
 80060ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	021a      	lsls	r2, r3, #8
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	431a      	orrs	r2, r3
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	4313      	orrs	r3, r2
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	4313      	orrs	r3, r2
 800610c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	697a      	ldr	r2, [r7, #20]
 8006112:	609a      	str	r2, [r3, #8]
}
 8006114:	bf00      	nop
 8006116:	371c      	adds	r7, #28
 8006118:	46bd      	mov	sp, r7
 800611a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611e:	4770      	bx	lr

08006120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006130:	2b01      	cmp	r3, #1
 8006132:	d101      	bne.n	8006138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006134:	2302      	movs	r3, #2
 8006136:	e06d      	b.n	8006214 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a30      	ldr	r2, [pc, #192]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a2f      	ldr	r2, [pc, #188]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d108      	bne.n	800617e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006172:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	68fa      	ldr	r2, [r7, #12]
 800618c:	4313      	orrs	r3, r2
 800618e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a20      	ldr	r2, [pc, #128]	; (8006220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d022      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061aa:	d01d      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a1d      	ldr	r2, [pc, #116]	; (8006228 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d018      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a1c      	ldr	r2, [pc, #112]	; (800622c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d013      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a1a      	ldr	r2, [pc, #104]	; (8006230 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d00e      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a15      	ldr	r2, [pc, #84]	; (8006224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d009      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a16      	ldr	r2, [pc, #88]	; (8006234 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d004      	beq.n	80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a15      	ldr	r2, [pc, #84]	; (8006238 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d10c      	bne.n	8006202 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	4313      	orrs	r3, r2
 80061f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2201      	movs	r2, #1
 8006206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3714      	adds	r7, #20
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr
 8006220:	40010000 	.word	0x40010000
 8006224:	40010400 	.word	0x40010400
 8006228:	40000400 	.word	0x40000400
 800622c:	40000800 	.word	0x40000800
 8006230:	40000c00 	.word	0x40000c00
 8006234:	40014000 	.word	0x40014000
 8006238:	40001800 	.word	0x40001800

0800623c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006244:	bf00      	nop
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006258:	bf00      	nop
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006264:	b480      	push	{r7}
 8006266:	b083      	sub	sp, #12
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b082      	sub	sp, #8
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d101      	bne.n	800628a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e040      	b.n	800630c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800628e:	2b00      	cmp	r3, #0
 8006290:	d106      	bne.n	80062a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2200      	movs	r2, #0
 8006296:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fc f9e0 	bl	8002660 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2224      	movs	r2, #36	; 0x24
 80062a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0201 	bic.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fbaa 	bl	8006a10 <UART_SetConfig>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e022      	b.n	800630c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d002      	beq.n	80062d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 fe02 	bl	8006ed8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	689a      	ldr	r2, [r3, #8]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f042 0201 	orr.w	r2, r2, #1
 8006302:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 fe89 	bl	800701c <UART_CheckIdleState>
 800630a:	4603      	mov	r3, r0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b08a      	sub	sp, #40	; 0x28
 8006318:	af02      	add	r7, sp, #8
 800631a:	60f8      	str	r0, [r7, #12]
 800631c:	60b9      	str	r1, [r7, #8]
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	4613      	mov	r3, r2
 8006322:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006328:	2b20      	cmp	r3, #32
 800632a:	f040 8081 	bne.w	8006430 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d002      	beq.n	800633a <HAL_UART_Transmit+0x26>
 8006334:	88fb      	ldrh	r3, [r7, #6]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d101      	bne.n	800633e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800633a:	2301      	movs	r3, #1
 800633c:	e079      	b.n	8006432 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006344:	2b01      	cmp	r3, #1
 8006346:	d101      	bne.n	800634c <HAL_UART_Transmit+0x38>
 8006348:	2302      	movs	r3, #2
 800634a:	e072      	b.n	8006432 <HAL_UART_Transmit+0x11e>
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2200      	movs	r2, #0
 8006358:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2221      	movs	r2, #33	; 0x21
 8006360:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006362:	f7fc fba5 	bl	8002ab0 <HAL_GetTick>
 8006366:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	88fa      	ldrh	r2, [r7, #6]
 800636c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	88fa      	ldrh	r2, [r7, #6]
 8006374:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006380:	d108      	bne.n	8006394 <HAL_UART_Transmit+0x80>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800638a:	2300      	movs	r3, #0
 800638c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	61bb      	str	r3, [r7, #24]
 8006392:	e003      	b.n	800639c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006398:	2300      	movs	r3, #0
 800639a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063a4:	e02c      	b.n	8006400 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	9300      	str	r3, [sp, #0]
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	2200      	movs	r2, #0
 80063ae:	2180      	movs	r1, #128	; 0x80
 80063b0:	68f8      	ldr	r0, [r7, #12]
 80063b2:	f000 fe66 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 80063b6:	4603      	mov	r3, r0
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d001      	beq.n	80063c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80063bc:	2303      	movs	r3, #3
 80063be:	e038      	b.n	8006432 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d10b      	bne.n	80063de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80063d6:	69bb      	ldr	r3, [r7, #24]
 80063d8:	3302      	adds	r3, #2
 80063da:	61bb      	str	r3, [r7, #24]
 80063dc:	e007      	b.n	80063ee <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	781a      	ldrb	r2, [r3, #0]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80063e8:	69fb      	ldr	r3, [r7, #28]
 80063ea:	3301      	adds	r3, #1
 80063ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	3b01      	subs	r3, #1
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1cc      	bne.n	80063a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	9300      	str	r3, [sp, #0]
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	2200      	movs	r2, #0
 8006414:	2140      	movs	r1, #64	; 0x40
 8006416:	68f8      	ldr	r0, [r7, #12]
 8006418:	f000 fe33 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8006422:	2303      	movs	r3, #3
 8006424:	e005      	b.n	8006432 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2220      	movs	r2, #32
 800642a:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3720      	adds	r7, #32
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
	...

0800643c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b0ba      	sub	sp, #232	; 0xe8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006462:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006466:	f640 030f 	movw	r3, #2063	; 0x80f
 800646a:	4013      	ands	r3, r2
 800646c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006470:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006474:	2b00      	cmp	r3, #0
 8006476:	d115      	bne.n	80064a4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647c:	f003 0320 	and.w	r3, r3, #32
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00f      	beq.n	80064a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006484:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006488:	f003 0320 	and.w	r3, r3, #32
 800648c:	2b00      	cmp	r3, #0
 800648e:	d009      	beq.n	80064a4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006494:	2b00      	cmp	r3, #0
 8006496:	f000 828f 	beq.w	80069b8 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	4798      	blx	r3
      }
      return;
 80064a2:	e289      	b.n	80069b8 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80064a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	f000 8117 	beq.w	80066dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064b2:	f003 0301 	and.w	r3, r3, #1
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d106      	bne.n	80064c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80064be:	4b85      	ldr	r3, [pc, #532]	; (80066d4 <HAL_UART_IRQHandler+0x298>)
 80064c0:	4013      	ands	r3, r2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	f000 810a 	beq.w	80066dc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d011      	beq.n	80064f8 <HAL_UART_IRQHandler+0xbc>
 80064d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d00b      	beq.n	80064f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2201      	movs	r2, #1
 80064e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80064ee:	f043 0201 	orr.w	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	f003 0302 	and.w	r3, r3, #2
 8006500:	2b00      	cmp	r3, #0
 8006502:	d011      	beq.n	8006528 <HAL_UART_IRQHandler+0xec>
 8006504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006508:	f003 0301 	and.w	r3, r3, #1
 800650c:	2b00      	cmp	r3, #0
 800650e:	d00b      	beq.n	8006528 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2202      	movs	r2, #2
 8006516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800651e:	f043 0204 	orr.w	r2, r3, #4
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800652c:	f003 0304 	and.w	r3, r3, #4
 8006530:	2b00      	cmp	r3, #0
 8006532:	d011      	beq.n	8006558 <HAL_UART_IRQHandler+0x11c>
 8006534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006538:	f003 0301 	and.w	r3, r3, #1
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00b      	beq.n	8006558 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2204      	movs	r2, #4
 8006546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800654e:	f043 0202 	orr.w	r2, r3, #2
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800655c:	f003 0308 	and.w	r3, r3, #8
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006568:	f003 0320 	and.w	r3, r3, #32
 800656c:	2b00      	cmp	r3, #0
 800656e:	d105      	bne.n	800657c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006570:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006574:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006578:	2b00      	cmp	r3, #0
 800657a:	d00b      	beq.n	8006594 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2208      	movs	r2, #8
 8006582:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800658a:	f043 0208 	orr.w	r2, r3, #8
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006594:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800659c:	2b00      	cmp	r3, #0
 800659e:	d012      	beq.n	80065c6 <HAL_UART_IRQHandler+0x18a>
 80065a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00c      	beq.n	80065c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065bc:	f043 0220 	orr.w	r2, r3, #32
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 81f5 	beq.w	80069bc <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00d      	beq.n	80065fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e2:	f003 0320 	and.w	r3, r3, #32
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d007      	beq.n	80065fa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006600:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	689b      	ldr	r3, [r3, #8]
 800660a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800660e:	2b40      	cmp	r3, #64	; 0x40
 8006610:	d005      	beq.n	800661e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006612:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006616:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800661a:	2b00      	cmp	r3, #0
 800661c:	d04f      	beq.n	80066be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fdf3 	bl	800720a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	689b      	ldr	r3, [r3, #8]
 800662a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800662e:	2b40      	cmp	r3, #64	; 0x40
 8006630:	d141      	bne.n	80066b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	3308      	adds	r3, #8
 8006638:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800663c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006640:	e853 3f00 	ldrex	r3, [r3]
 8006644:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006648:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800664c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	3308      	adds	r3, #8
 800665a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800665e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006662:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006666:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800666a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800666e:	e841 2300 	strex	r3, r2, [r1]
 8006672:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006676:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1d9      	bne.n	8006632 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006682:	2b00      	cmp	r3, #0
 8006684:	d013      	beq.n	80066ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668a:	4a13      	ldr	r2, [pc, #76]	; (80066d8 <HAL_UART_IRQHandler+0x29c>)
 800668c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006692:	4618      	mov	r0, r3
 8006694:	f7fd fa31 	bl	8003afa <HAL_DMA_Abort_IT>
 8006698:	4603      	mov	r3, r0
 800669a:	2b00      	cmp	r3, #0
 800669c:	d017      	beq.n	80066ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80066a8:	4610      	mov	r0, r2
 80066aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ac:	e00f      	b.n	80066ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f998 	bl	80069e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	e00b      	b.n	80066ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f994 	bl	80069e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	e007      	b.n	80066ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f990 	bl	80069e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80066cc:	e176      	b.n	80069bc <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066ce:	bf00      	nop
    return;
 80066d0:	e174      	b.n	80069bc <HAL_UART_IRQHandler+0x580>
 80066d2:	bf00      	nop
 80066d4:	04000120 	.word	0x04000120
 80066d8:	080072d1 	.word	0x080072d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	f040 8144 	bne.w	800696e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 813d 	beq.w	800696e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f8:	f003 0310 	and.w	r3, r3, #16
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 8136 	beq.w	800696e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2210      	movs	r2, #16
 8006708:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006714:	2b40      	cmp	r3, #64	; 0x40
 8006716:	f040 80b2 	bne.w	800687e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006726:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800672a:	2b00      	cmp	r3, #0
 800672c:	f000 8148 	beq.w	80069c0 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800673a:	429a      	cmp	r2, r3
 800673c:	f080 8140 	bcs.w	80069c0 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006746:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800674e:	69db      	ldr	r3, [r3, #28]
 8006750:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006754:	f000 8085 	beq.w	8006862 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006764:	e853 3f00 	ldrex	r3, [r3]
 8006768:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800676c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006774:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	461a      	mov	r2, r3
 800677e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006786:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800678a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800678e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006792:	e841 2300 	strex	r3, r2, [r1]
 8006796:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800679a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d1da      	bne.n	8006758 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3308      	adds	r3, #8
 80067a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80067b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067b4:	f023 0301 	bic.w	r3, r3, #1
 80067b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3308      	adds	r3, #8
 80067c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80067c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80067ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80067ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80067d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e1      	bne.n	80067a2 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	3308      	adds	r3, #8
 80067e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80067e8:	e853 3f00 	ldrex	r3, [r3]
 80067ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80067ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006802:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006804:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006808:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006810:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e3      	bne.n	80067de <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2200      	movs	r2, #0
 8006820:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006830:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006832:	f023 0310 	bic.w	r3, r3, #16
 8006836:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	461a      	mov	r2, r3
 8006840:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006844:	65bb      	str	r3, [r7, #88]	; 0x58
 8006846:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006848:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800684a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800684c:	e841 2300 	strex	r3, r2, [r1]
 8006850:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1e4      	bne.n	8006822 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800685c:	4618      	mov	r0, r3
 800685e:	f7fd f8dc 	bl	8003a1a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800686e:	b29b      	uxth	r3, r3
 8006870:	1ad3      	subs	r3, r2, r3
 8006872:	b29b      	uxth	r3, r3
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f8be 	bl	80069f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800687c:	e0a0      	b.n	80069c0 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800688a:	b29b      	uxth	r3, r3
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006898:	b29b      	uxth	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8092 	beq.w	80069c4 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80068a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 808d 	beq.w	80069c4 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	461a      	mov	r2, r3
 80068c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80068cc:	647b      	str	r3, [r7, #68]	; 0x44
 80068ce:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e4      	bne.n	80068aa <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	e853 3f00 	ldrex	r3, [r3]
 80068ee:	623b      	str	r3, [r7, #32]
   return(result);
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	f023 0301 	bic.w	r3, r3, #1
 80068f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	3308      	adds	r3, #8
 8006900:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006904:	633a      	str	r2, [r7, #48]	; 0x30
 8006906:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800690a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690c:	e841 2300 	strex	r3, r2, [r1]
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1e3      	bne.n	80068e0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2220      	movs	r2, #32
 800691c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	e853 3f00 	ldrex	r3, [r3]
 8006936:	60fb      	str	r3, [r7, #12]
   return(result);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 0310 	bic.w	r3, r3, #16
 800693e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800694c:	61fb      	str	r3, [r7, #28]
 800694e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	69b9      	ldr	r1, [r7, #24]
 8006952:	69fa      	ldr	r2, [r7, #28]
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	617b      	str	r3, [r7, #20]
   return(result);
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e4      	bne.n	800692a <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006964:	4619      	mov	r1, r3
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f846 	bl	80069f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800696c:	e02a      	b.n	80069c4 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800696e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006976:	2b00      	cmp	r3, #0
 8006978:	d00e      	beq.n	8006998 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800697a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800697e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d008      	beq.n	8006998 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800698a:	2b00      	cmp	r3, #0
 800698c:	d01c      	beq.n	80069c8 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006992:	6878      	ldr	r0, [r7, #4]
 8006994:	4798      	blx	r3
    }
    return;
 8006996:	e017      	b.n	80069c8 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800699c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d012      	beq.n	80069ca <HAL_UART_IRQHandler+0x58e>
 80069a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d00c      	beq.n	80069ca <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 fca3 	bl	80072fc <UART_EndTransmit_IT>
    return;
 80069b6:	e008      	b.n	80069ca <HAL_UART_IRQHandler+0x58e>
      return;
 80069b8:	bf00      	nop
 80069ba:	e006      	b.n	80069ca <HAL_UART_IRQHandler+0x58e>
    return;
 80069bc:	bf00      	nop
 80069be:	e004      	b.n	80069ca <HAL_UART_IRQHandler+0x58e>
      return;
 80069c0:	bf00      	nop
 80069c2:	e002      	b.n	80069ca <HAL_UART_IRQHandler+0x58e>
      return;
 80069c4:	bf00      	nop
 80069c6:	e000      	b.n	80069ca <HAL_UART_IRQHandler+0x58e>
    return;
 80069c8:	bf00      	nop
  }

}
 80069ca:	37e8      	adds	r7, #232	; 0xe8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	460b      	mov	r3, r1
 8006a02:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a04:	bf00      	nop
 8006a06:	370c      	adds	r7, #12
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0e:	4770      	bx	lr

08006a10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b088      	sub	sp, #32
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a18:	2300      	movs	r3, #0
 8006a1a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	689a      	ldr	r2, [r3, #8]
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	431a      	orrs	r2, r3
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	695b      	ldr	r3, [r3, #20]
 8006a2a:	431a      	orrs	r2, r3
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4ba6      	ldr	r3, [pc, #664]	; (8006cd4 <UART_SetConfig+0x2c4>)
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	6812      	ldr	r2, [r2, #0]
 8006a42:	6979      	ldr	r1, [r7, #20]
 8006a44:	430b      	orrs	r3, r1
 8006a46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	68da      	ldr	r2, [r3, #12]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	430a      	orrs	r2, r1
 8006a5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	699b      	ldr	r3, [r3, #24]
 8006a62:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a1b      	ldr	r3, [r3, #32]
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a94      	ldr	r2, [pc, #592]	; (8006cd8 <UART_SetConfig+0x2c8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d120      	bne.n	8006ace <UART_SetConfig+0xbe>
 8006a8c:	4b93      	ldr	r3, [pc, #588]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b03      	cmp	r3, #3
 8006a98:	d816      	bhi.n	8006ac8 <UART_SetConfig+0xb8>
 8006a9a:	a201      	add	r2, pc, #4	; (adr r2, 8006aa0 <UART_SetConfig+0x90>)
 8006a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aa0:	08006ab1 	.word	0x08006ab1
 8006aa4:	08006abd 	.word	0x08006abd
 8006aa8:	08006ab7 	.word	0x08006ab7
 8006aac:	08006ac3 	.word	0x08006ac3
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	77fb      	strb	r3, [r7, #31]
 8006ab4:	e150      	b.n	8006d58 <UART_SetConfig+0x348>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	77fb      	strb	r3, [r7, #31]
 8006aba:	e14d      	b.n	8006d58 <UART_SetConfig+0x348>
 8006abc:	2304      	movs	r3, #4
 8006abe:	77fb      	strb	r3, [r7, #31]
 8006ac0:	e14a      	b.n	8006d58 <UART_SetConfig+0x348>
 8006ac2:	2308      	movs	r3, #8
 8006ac4:	77fb      	strb	r3, [r7, #31]
 8006ac6:	e147      	b.n	8006d58 <UART_SetConfig+0x348>
 8006ac8:	2310      	movs	r3, #16
 8006aca:	77fb      	strb	r3, [r7, #31]
 8006acc:	e144      	b.n	8006d58 <UART_SetConfig+0x348>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a83      	ldr	r2, [pc, #524]	; (8006ce0 <UART_SetConfig+0x2d0>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d132      	bne.n	8006b3e <UART_SetConfig+0x12e>
 8006ad8:	4b80      	ldr	r3, [pc, #512]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ade:	f003 030c 	and.w	r3, r3, #12
 8006ae2:	2b0c      	cmp	r3, #12
 8006ae4:	d828      	bhi.n	8006b38 <UART_SetConfig+0x128>
 8006ae6:	a201      	add	r2, pc, #4	; (adr r2, 8006aec <UART_SetConfig+0xdc>)
 8006ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006aec:	08006b21 	.word	0x08006b21
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b39 	.word	0x08006b39
 8006af8:	08006b39 	.word	0x08006b39
 8006afc:	08006b2d 	.word	0x08006b2d
 8006b00:	08006b39 	.word	0x08006b39
 8006b04:	08006b39 	.word	0x08006b39
 8006b08:	08006b39 	.word	0x08006b39
 8006b0c:	08006b27 	.word	0x08006b27
 8006b10:	08006b39 	.word	0x08006b39
 8006b14:	08006b39 	.word	0x08006b39
 8006b18:	08006b39 	.word	0x08006b39
 8006b1c:	08006b33 	.word	0x08006b33
 8006b20:	2300      	movs	r3, #0
 8006b22:	77fb      	strb	r3, [r7, #31]
 8006b24:	e118      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b26:	2302      	movs	r3, #2
 8006b28:	77fb      	strb	r3, [r7, #31]
 8006b2a:	e115      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b2c:	2304      	movs	r3, #4
 8006b2e:	77fb      	strb	r3, [r7, #31]
 8006b30:	e112      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b32:	2308      	movs	r3, #8
 8006b34:	77fb      	strb	r3, [r7, #31]
 8006b36:	e10f      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b38:	2310      	movs	r3, #16
 8006b3a:	77fb      	strb	r3, [r7, #31]
 8006b3c:	e10c      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a68      	ldr	r2, [pc, #416]	; (8006ce4 <UART_SetConfig+0x2d4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d120      	bne.n	8006b8a <UART_SetConfig+0x17a>
 8006b48:	4b64      	ldr	r3, [pc, #400]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b4e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006b52:	2b30      	cmp	r3, #48	; 0x30
 8006b54:	d013      	beq.n	8006b7e <UART_SetConfig+0x16e>
 8006b56:	2b30      	cmp	r3, #48	; 0x30
 8006b58:	d814      	bhi.n	8006b84 <UART_SetConfig+0x174>
 8006b5a:	2b20      	cmp	r3, #32
 8006b5c:	d009      	beq.n	8006b72 <UART_SetConfig+0x162>
 8006b5e:	2b20      	cmp	r3, #32
 8006b60:	d810      	bhi.n	8006b84 <UART_SetConfig+0x174>
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d002      	beq.n	8006b6c <UART_SetConfig+0x15c>
 8006b66:	2b10      	cmp	r3, #16
 8006b68:	d006      	beq.n	8006b78 <UART_SetConfig+0x168>
 8006b6a:	e00b      	b.n	8006b84 <UART_SetConfig+0x174>
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	77fb      	strb	r3, [r7, #31]
 8006b70:	e0f2      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b72:	2302      	movs	r3, #2
 8006b74:	77fb      	strb	r3, [r7, #31]
 8006b76:	e0ef      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	77fb      	strb	r3, [r7, #31]
 8006b7c:	e0ec      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b7e:	2308      	movs	r3, #8
 8006b80:	77fb      	strb	r3, [r7, #31]
 8006b82:	e0e9      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b84:	2310      	movs	r3, #16
 8006b86:	77fb      	strb	r3, [r7, #31]
 8006b88:	e0e6      	b.n	8006d58 <UART_SetConfig+0x348>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a56      	ldr	r2, [pc, #344]	; (8006ce8 <UART_SetConfig+0x2d8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d120      	bne.n	8006bd6 <UART_SetConfig+0x1c6>
 8006b94:	4b51      	ldr	r3, [pc, #324]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b9a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006b9e:	2bc0      	cmp	r3, #192	; 0xc0
 8006ba0:	d013      	beq.n	8006bca <UART_SetConfig+0x1ba>
 8006ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8006ba4:	d814      	bhi.n	8006bd0 <UART_SetConfig+0x1c0>
 8006ba6:	2b80      	cmp	r3, #128	; 0x80
 8006ba8:	d009      	beq.n	8006bbe <UART_SetConfig+0x1ae>
 8006baa:	2b80      	cmp	r3, #128	; 0x80
 8006bac:	d810      	bhi.n	8006bd0 <UART_SetConfig+0x1c0>
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d002      	beq.n	8006bb8 <UART_SetConfig+0x1a8>
 8006bb2:	2b40      	cmp	r3, #64	; 0x40
 8006bb4:	d006      	beq.n	8006bc4 <UART_SetConfig+0x1b4>
 8006bb6:	e00b      	b.n	8006bd0 <UART_SetConfig+0x1c0>
 8006bb8:	2300      	movs	r3, #0
 8006bba:	77fb      	strb	r3, [r7, #31]
 8006bbc:	e0cc      	b.n	8006d58 <UART_SetConfig+0x348>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	77fb      	strb	r3, [r7, #31]
 8006bc2:	e0c9      	b.n	8006d58 <UART_SetConfig+0x348>
 8006bc4:	2304      	movs	r3, #4
 8006bc6:	77fb      	strb	r3, [r7, #31]
 8006bc8:	e0c6      	b.n	8006d58 <UART_SetConfig+0x348>
 8006bca:	2308      	movs	r3, #8
 8006bcc:	77fb      	strb	r3, [r7, #31]
 8006bce:	e0c3      	b.n	8006d58 <UART_SetConfig+0x348>
 8006bd0:	2310      	movs	r3, #16
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e0c0      	b.n	8006d58 <UART_SetConfig+0x348>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a44      	ldr	r2, [pc, #272]	; (8006cec <UART_SetConfig+0x2dc>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d125      	bne.n	8006c2c <UART_SetConfig+0x21c>
 8006be0:	4b3e      	ldr	r3, [pc, #248]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006be2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bee:	d017      	beq.n	8006c20 <UART_SetConfig+0x210>
 8006bf0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bf4:	d817      	bhi.n	8006c26 <UART_SetConfig+0x216>
 8006bf6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006bfa:	d00b      	beq.n	8006c14 <UART_SetConfig+0x204>
 8006bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c00:	d811      	bhi.n	8006c26 <UART_SetConfig+0x216>
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d003      	beq.n	8006c0e <UART_SetConfig+0x1fe>
 8006c06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c0a:	d006      	beq.n	8006c1a <UART_SetConfig+0x20a>
 8006c0c:	e00b      	b.n	8006c26 <UART_SetConfig+0x216>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	77fb      	strb	r3, [r7, #31]
 8006c12:	e0a1      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c14:	2302      	movs	r3, #2
 8006c16:	77fb      	strb	r3, [r7, #31]
 8006c18:	e09e      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c1a:	2304      	movs	r3, #4
 8006c1c:	77fb      	strb	r3, [r7, #31]
 8006c1e:	e09b      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c20:	2308      	movs	r3, #8
 8006c22:	77fb      	strb	r3, [r7, #31]
 8006c24:	e098      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c26:	2310      	movs	r3, #16
 8006c28:	77fb      	strb	r3, [r7, #31]
 8006c2a:	e095      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	4a2f      	ldr	r2, [pc, #188]	; (8006cf0 <UART_SetConfig+0x2e0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d125      	bne.n	8006c82 <UART_SetConfig+0x272>
 8006c36:	4b29      	ldr	r3, [pc, #164]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006c40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c44:	d017      	beq.n	8006c76 <UART_SetConfig+0x266>
 8006c46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006c4a:	d817      	bhi.n	8006c7c <UART_SetConfig+0x26c>
 8006c4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c50:	d00b      	beq.n	8006c6a <UART_SetConfig+0x25a>
 8006c52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c56:	d811      	bhi.n	8006c7c <UART_SetConfig+0x26c>
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d003      	beq.n	8006c64 <UART_SetConfig+0x254>
 8006c5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c60:	d006      	beq.n	8006c70 <UART_SetConfig+0x260>
 8006c62:	e00b      	b.n	8006c7c <UART_SetConfig+0x26c>
 8006c64:	2301      	movs	r3, #1
 8006c66:	77fb      	strb	r3, [r7, #31]
 8006c68:	e076      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	77fb      	strb	r3, [r7, #31]
 8006c6e:	e073      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c70:	2304      	movs	r3, #4
 8006c72:	77fb      	strb	r3, [r7, #31]
 8006c74:	e070      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c76:	2308      	movs	r3, #8
 8006c78:	77fb      	strb	r3, [r7, #31]
 8006c7a:	e06d      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c7c:	2310      	movs	r3, #16
 8006c7e:	77fb      	strb	r3, [r7, #31]
 8006c80:	e06a      	b.n	8006d58 <UART_SetConfig+0x348>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1b      	ldr	r2, [pc, #108]	; (8006cf4 <UART_SetConfig+0x2e4>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d138      	bne.n	8006cfe <UART_SetConfig+0x2ee>
 8006c8c:	4b13      	ldr	r3, [pc, #76]	; (8006cdc <UART_SetConfig+0x2cc>)
 8006c8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c92:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006c96:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006c9a:	d017      	beq.n	8006ccc <UART_SetConfig+0x2bc>
 8006c9c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca0:	d82a      	bhi.n	8006cf8 <UART_SetConfig+0x2e8>
 8006ca2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ca6:	d00b      	beq.n	8006cc0 <UART_SetConfig+0x2b0>
 8006ca8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cac:	d824      	bhi.n	8006cf8 <UART_SetConfig+0x2e8>
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d003      	beq.n	8006cba <UART_SetConfig+0x2aa>
 8006cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cb6:	d006      	beq.n	8006cc6 <UART_SetConfig+0x2b6>
 8006cb8:	e01e      	b.n	8006cf8 <UART_SetConfig+0x2e8>
 8006cba:	2300      	movs	r3, #0
 8006cbc:	77fb      	strb	r3, [r7, #31]
 8006cbe:	e04b      	b.n	8006d58 <UART_SetConfig+0x348>
 8006cc0:	2302      	movs	r3, #2
 8006cc2:	77fb      	strb	r3, [r7, #31]
 8006cc4:	e048      	b.n	8006d58 <UART_SetConfig+0x348>
 8006cc6:	2304      	movs	r3, #4
 8006cc8:	77fb      	strb	r3, [r7, #31]
 8006cca:	e045      	b.n	8006d58 <UART_SetConfig+0x348>
 8006ccc:	2308      	movs	r3, #8
 8006cce:	77fb      	strb	r3, [r7, #31]
 8006cd0:	e042      	b.n	8006d58 <UART_SetConfig+0x348>
 8006cd2:	bf00      	nop
 8006cd4:	efff69f3 	.word	0xefff69f3
 8006cd8:	40011000 	.word	0x40011000
 8006cdc:	40023800 	.word	0x40023800
 8006ce0:	40004400 	.word	0x40004400
 8006ce4:	40004800 	.word	0x40004800
 8006ce8:	40004c00 	.word	0x40004c00
 8006cec:	40005000 	.word	0x40005000
 8006cf0:	40011400 	.word	0x40011400
 8006cf4:	40007800 	.word	0x40007800
 8006cf8:	2310      	movs	r3, #16
 8006cfa:	77fb      	strb	r3, [r7, #31]
 8006cfc:	e02c      	b.n	8006d58 <UART_SetConfig+0x348>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a72      	ldr	r2, [pc, #456]	; (8006ecc <UART_SetConfig+0x4bc>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d125      	bne.n	8006d54 <UART_SetConfig+0x344>
 8006d08:	4b71      	ldr	r3, [pc, #452]	; (8006ed0 <UART_SetConfig+0x4c0>)
 8006d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006d12:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d16:	d017      	beq.n	8006d48 <UART_SetConfig+0x338>
 8006d18:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006d1c:	d817      	bhi.n	8006d4e <UART_SetConfig+0x33e>
 8006d1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d22:	d00b      	beq.n	8006d3c <UART_SetConfig+0x32c>
 8006d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d28:	d811      	bhi.n	8006d4e <UART_SetConfig+0x33e>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d003      	beq.n	8006d36 <UART_SetConfig+0x326>
 8006d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d32:	d006      	beq.n	8006d42 <UART_SetConfig+0x332>
 8006d34:	e00b      	b.n	8006d4e <UART_SetConfig+0x33e>
 8006d36:	2300      	movs	r3, #0
 8006d38:	77fb      	strb	r3, [r7, #31]
 8006d3a:	e00d      	b.n	8006d58 <UART_SetConfig+0x348>
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	77fb      	strb	r3, [r7, #31]
 8006d40:	e00a      	b.n	8006d58 <UART_SetConfig+0x348>
 8006d42:	2304      	movs	r3, #4
 8006d44:	77fb      	strb	r3, [r7, #31]
 8006d46:	e007      	b.n	8006d58 <UART_SetConfig+0x348>
 8006d48:	2308      	movs	r3, #8
 8006d4a:	77fb      	strb	r3, [r7, #31]
 8006d4c:	e004      	b.n	8006d58 <UART_SetConfig+0x348>
 8006d4e:	2310      	movs	r3, #16
 8006d50:	77fb      	strb	r3, [r7, #31]
 8006d52:	e001      	b.n	8006d58 <UART_SetConfig+0x348>
 8006d54:	2310      	movs	r3, #16
 8006d56:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	69db      	ldr	r3, [r3, #28]
 8006d5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d60:	d15b      	bne.n	8006e1a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006d62:	7ffb      	ldrb	r3, [r7, #31]
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d828      	bhi.n	8006dba <UART_SetConfig+0x3aa>
 8006d68:	a201      	add	r2, pc, #4	; (adr r2, 8006d70 <UART_SetConfig+0x360>)
 8006d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6e:	bf00      	nop
 8006d70:	08006d95 	.word	0x08006d95
 8006d74:	08006d9d 	.word	0x08006d9d
 8006d78:	08006da5 	.word	0x08006da5
 8006d7c:	08006dbb 	.word	0x08006dbb
 8006d80:	08006dab 	.word	0x08006dab
 8006d84:	08006dbb 	.word	0x08006dbb
 8006d88:	08006dbb 	.word	0x08006dbb
 8006d8c:	08006dbb 	.word	0x08006dbb
 8006d90:	08006db3 	.word	0x08006db3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d94:	f7fd fdbe 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8006d98:	61b8      	str	r0, [r7, #24]
        break;
 8006d9a:	e013      	b.n	8006dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d9c:	f7fd fdce 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8006da0:	61b8      	str	r0, [r7, #24]
        break;
 8006da2:	e00f      	b.n	8006dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006da4:	4b4b      	ldr	r3, [pc, #300]	; (8006ed4 <UART_SetConfig+0x4c4>)
 8006da6:	61bb      	str	r3, [r7, #24]
        break;
 8006da8:	e00c      	b.n	8006dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006daa:	f7fd fca1 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006dae:	61b8      	str	r0, [r7, #24]
        break;
 8006db0:	e008      	b.n	8006dc4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006db2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006db6:	61bb      	str	r3, [r7, #24]
        break;
 8006db8:	e004      	b.n	8006dc4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	77bb      	strb	r3, [r7, #30]
        break;
 8006dc2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d074      	beq.n	8006eb4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006dca:	69bb      	ldr	r3, [r7, #24]
 8006dcc:	005a      	lsls	r2, r3, #1
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	085b      	lsrs	r3, r3, #1
 8006dd4:	441a      	add	r2, r3
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	2b0f      	cmp	r3, #15
 8006de4:	d916      	bls.n	8006e14 <UART_SetConfig+0x404>
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006dec:	d212      	bcs.n	8006e14 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	f023 030f 	bic.w	r3, r3, #15
 8006df6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	085b      	lsrs	r3, r3, #1
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	89fb      	ldrh	r3, [r7, #14]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	89fa      	ldrh	r2, [r7, #14]
 8006e10:	60da      	str	r2, [r3, #12]
 8006e12:	e04f      	b.n	8006eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	77bb      	strb	r3, [r7, #30]
 8006e18:	e04c      	b.n	8006eb4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e1a:	7ffb      	ldrb	r3, [r7, #31]
 8006e1c:	2b08      	cmp	r3, #8
 8006e1e:	d828      	bhi.n	8006e72 <UART_SetConfig+0x462>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <UART_SetConfig+0x418>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e4d 	.word	0x08006e4d
 8006e2c:	08006e55 	.word	0x08006e55
 8006e30:	08006e5d 	.word	0x08006e5d
 8006e34:	08006e73 	.word	0x08006e73
 8006e38:	08006e63 	.word	0x08006e63
 8006e3c:	08006e73 	.word	0x08006e73
 8006e40:	08006e73 	.word	0x08006e73
 8006e44:	08006e73 	.word	0x08006e73
 8006e48:	08006e6b 	.word	0x08006e6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e4c:	f7fd fd62 	bl	8004914 <HAL_RCC_GetPCLK1Freq>
 8006e50:	61b8      	str	r0, [r7, #24]
        break;
 8006e52:	e013      	b.n	8006e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e54:	f7fd fd72 	bl	800493c <HAL_RCC_GetPCLK2Freq>
 8006e58:	61b8      	str	r0, [r7, #24]
        break;
 8006e5a:	e00f      	b.n	8006e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e5c:	4b1d      	ldr	r3, [pc, #116]	; (8006ed4 <UART_SetConfig+0x4c4>)
 8006e5e:	61bb      	str	r3, [r7, #24]
        break;
 8006e60:	e00c      	b.n	8006e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e62:	f7fd fc45 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8006e66:	61b8      	str	r0, [r7, #24]
        break;
 8006e68:	e008      	b.n	8006e7c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e6e:	61bb      	str	r3, [r7, #24]
        break;
 8006e70:	e004      	b.n	8006e7c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	77bb      	strb	r3, [r7, #30]
        break;
 8006e7a:	bf00      	nop
    }

    if (pclk != 0U)
 8006e7c:	69bb      	ldr	r3, [r7, #24]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d018      	beq.n	8006eb4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	085a      	lsrs	r2, r3, #1
 8006e88:	69bb      	ldr	r3, [r7, #24]
 8006e8a:	441a      	add	r2, r3
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e94:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	2b0f      	cmp	r3, #15
 8006e9a:	d909      	bls.n	8006eb0 <UART_SetConfig+0x4a0>
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea2:	d205      	bcs.n	8006eb0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ea4:	693b      	ldr	r3, [r7, #16]
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	60da      	str	r2, [r3, #12]
 8006eae:	e001      	b.n	8006eb4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ec0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3720      	adds	r7, #32
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	40007c00 	.word	0x40007c00
 8006ed0:	40023800 	.word	0x40023800
 8006ed4:	00f42400 	.word	0x00f42400

08006ed8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b083      	sub	sp, #12
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d00a      	beq.n	8006f02 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	430a      	orrs	r2, r1
 8006f00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	f003 0302 	and.w	r3, r3, #2
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d00a      	beq.n	8006f24 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	430a      	orrs	r2, r1
 8006f22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f28:	f003 0304 	and.w	r3, r3, #4
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00a      	beq.n	8006f46 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	685b      	ldr	r3, [r3, #4]
 8006f36:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	430a      	orrs	r2, r1
 8006f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	f003 0310 	and.w	r3, r3, #16
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00a      	beq.n	8006f8a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	430a      	orrs	r2, r1
 8006f88:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f8e:	f003 0320 	and.w	r3, r3, #32
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00a      	beq.n	8006fac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	689b      	ldr	r3, [r3, #8]
 8006f9c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	430a      	orrs	r2, r1
 8006faa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d01a      	beq.n	8006fee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	430a      	orrs	r2, r1
 8006fcc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd6:	d10a      	bne.n	8006fee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	430a      	orrs	r2, r1
 8006fec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d00a      	beq.n	8007010 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	430a      	orrs	r2, r1
 800700e:	605a      	str	r2, [r3, #4]
  }
}
 8007010:	bf00      	nop
 8007012:	370c      	adds	r7, #12
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b086      	sub	sp, #24
 8007020:	af02      	add	r7, sp, #8
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800702c:	f7fb fd40 	bl	8002ab0 <HAL_GetTick>
 8007030:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 0308 	and.w	r3, r3, #8
 800703c:	2b08      	cmp	r3, #8
 800703e:	d10e      	bne.n	800705e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007040:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007044:	9300      	str	r3, [sp, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2200      	movs	r2, #0
 800704a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 f817 	bl	8007082 <UART_WaitOnFlagUntilTimeout>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d001      	beq.n	800705e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800705a:	2303      	movs	r3, #3
 800705c:	e00d      	b.n	800707a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2200      	movs	r2, #0
 800706e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007078:	2300      	movs	r3, #0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b09c      	sub	sp, #112	; 0x70
 8007086:	af00      	add	r7, sp, #0
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	603b      	str	r3, [r7, #0]
 800708e:	4613      	mov	r3, r2
 8007090:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007092:	e0a5      	b.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007094:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007096:	f1b3 3fff 	cmp.w	r3, #4294967295
 800709a:	f000 80a1 	beq.w	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800709e:	f7fb fd07 	bl	8002ab0 <HAL_GetTick>
 80070a2:	4602      	mov	r2, r0
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80070aa:	429a      	cmp	r2, r3
 80070ac:	d302      	bcc.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80070ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d13e      	bne.n	8007132 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070bc:	e853 3f00 	ldrex	r3, [r3]
 80070c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80070c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80070c8:	667b      	str	r3, [r7, #100]	; 0x64
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	461a      	mov	r2, r3
 80070d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80070d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80070da:	e841 2300 	strex	r3, r2, [r1]
 80070de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80070e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1e6      	bne.n	80070b4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3308      	adds	r3, #8
 80070ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070f0:	e853 3f00 	ldrex	r3, [r3]
 80070f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	663b      	str	r3, [r7, #96]	; 0x60
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007106:	64ba      	str	r2, [r7, #72]	; 0x48
 8007108:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800710c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007114:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e5      	bne.n	80070e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2220      	movs	r2, #32
 800711e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2220      	movs	r2, #32
 8007124:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e067      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 0304 	and.w	r3, r3, #4
 800713c:	2b00      	cmp	r3, #0
 800713e:	d04f      	beq.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800714a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800714e:	d147      	bne.n	80071e0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007158:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007162:	e853 3f00 	ldrex	r3, [r3]
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800716a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800716e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	461a      	mov	r2, r3
 8007176:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007178:	637b      	str	r3, [r7, #52]	; 0x34
 800717a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800717e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007180:	e841 2300 	strex	r3, r2, [r1]
 8007184:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007186:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007188:	2b00      	cmp	r3, #0
 800718a:	d1e6      	bne.n	800715a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	3308      	adds	r3, #8
 8007192:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	e853 3f00 	ldrex	r3, [r3]
 800719a:	613b      	str	r3, [r7, #16]
   return(result);
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	f023 0301 	bic.w	r3, r3, #1
 80071a2:	66bb      	str	r3, [r7, #104]	; 0x68
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	3308      	adds	r3, #8
 80071aa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80071ac:	623a      	str	r2, [r7, #32]
 80071ae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b0:	69f9      	ldr	r1, [r7, #28]
 80071b2:	6a3a      	ldr	r2, [r7, #32]
 80071b4:	e841 2300 	strex	r3, r2, [r1]
 80071b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d1e5      	bne.n	800718c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2220      	movs	r2, #32
 80071c4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2220      	movs	r2, #32
 80071ca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2220      	movs	r2, #32
 80071d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80071dc:	2303      	movs	r3, #3
 80071de:	e010      	b.n	8007202 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69da      	ldr	r2, [r3, #28]
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	4013      	ands	r3, r2
 80071ea:	68ba      	ldr	r2, [r7, #8]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	bf0c      	ite	eq
 80071f0:	2301      	moveq	r3, #1
 80071f2:	2300      	movne	r3, #0
 80071f4:	b2db      	uxtb	r3, r3
 80071f6:	461a      	mov	r2, r3
 80071f8:	79fb      	ldrb	r3, [r7, #7]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	f43f af4a 	beq.w	8007094 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007200:	2300      	movs	r3, #0
}
 8007202:	4618      	mov	r0, r3
 8007204:	3770      	adds	r7, #112	; 0x70
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}

0800720a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800720a:	b480      	push	{r7}
 800720c:	b095      	sub	sp, #84	; 0x54
 800720e:	af00      	add	r7, sp, #0
 8007210:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721a:	e853 3f00 	ldrex	r3, [r3]
 800721e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007222:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007226:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	461a      	mov	r2, r3
 800722e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007230:	643b      	str	r3, [r7, #64]	; 0x40
 8007232:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007234:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007236:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007238:	e841 2300 	strex	r3, r2, [r1]
 800723c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800723e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007240:	2b00      	cmp	r3, #0
 8007242:	d1e6      	bne.n	8007212 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	3308      	adds	r3, #8
 800724a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	e853 3f00 	ldrex	r3, [r3]
 8007252:	61fb      	str	r3, [r7, #28]
   return(result);
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	f023 0301 	bic.w	r3, r3, #1
 800725a:	64bb      	str	r3, [r7, #72]	; 0x48
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007264:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007266:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007268:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800726a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800726c:	e841 2300 	strex	r3, r2, [r1]
 8007270:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007274:	2b00      	cmp	r3, #0
 8007276:	d1e5      	bne.n	8007244 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800727c:	2b01      	cmp	r3, #1
 800727e:	d118      	bne.n	80072b2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	60bb      	str	r3, [r7, #8]
   return(result);
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	f023 0310 	bic.w	r3, r3, #16
 8007294:	647b      	str	r3, [r7, #68]	; 0x44
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729e:	61bb      	str	r3, [r7, #24]
 80072a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a2:	6979      	ldr	r1, [r7, #20]
 80072a4:	69ba      	ldr	r2, [r7, #24]
 80072a6:	e841 2300 	strex	r3, r2, [r1]
 80072aa:	613b      	str	r3, [r7, #16]
   return(result);
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d1e6      	bne.n	8007280 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	2220      	movs	r2, #32
 80072b6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2200      	movs	r2, #0
 80072bc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2200      	movs	r2, #0
 80072c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 80072c4:	bf00      	nop
 80072c6:	3754      	adds	r7, #84	; 0x54
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b084      	sub	sp, #16
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fb78 	bl	80069e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b088      	sub	sp, #32
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	e853 3f00 	ldrex	r3, [r3]
 8007310:	60bb      	str	r3, [r7, #8]
   return(result);
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007318:	61fb      	str	r3, [r7, #28]
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	461a      	mov	r2, r3
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007326:	6979      	ldr	r1, [r7, #20]
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	e841 2300 	strex	r3, r2, [r1]
 800732e:	613b      	str	r3, [r7, #16]
   return(result);
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d1e6      	bne.n	8007304 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2220      	movs	r2, #32
 800733a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007342:	6878      	ldr	r0, [r7, #4]
 8007344:	f7ff fb44 	bl	80069d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007348:	bf00      	nop
 800734a:	3720      	adds	r7, #32
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <__errno>:
 8007350:	4b01      	ldr	r3, [pc, #4]	; (8007358 <__errno+0x8>)
 8007352:	6818      	ldr	r0, [r3, #0]
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	2000000c 	.word	0x2000000c

0800735c <__libc_init_array>:
 800735c:	b570      	push	{r4, r5, r6, lr}
 800735e:	4d0d      	ldr	r5, [pc, #52]	; (8007394 <__libc_init_array+0x38>)
 8007360:	4c0d      	ldr	r4, [pc, #52]	; (8007398 <__libc_init_array+0x3c>)
 8007362:	1b64      	subs	r4, r4, r5
 8007364:	10a4      	asrs	r4, r4, #2
 8007366:	2600      	movs	r6, #0
 8007368:	42a6      	cmp	r6, r4
 800736a:	d109      	bne.n	8007380 <__libc_init_array+0x24>
 800736c:	4d0b      	ldr	r5, [pc, #44]	; (800739c <__libc_init_array+0x40>)
 800736e:	4c0c      	ldr	r4, [pc, #48]	; (80073a0 <__libc_init_array+0x44>)
 8007370:	f000 ffae 	bl	80082d0 <_init>
 8007374:	1b64      	subs	r4, r4, r5
 8007376:	10a4      	asrs	r4, r4, #2
 8007378:	2600      	movs	r6, #0
 800737a:	42a6      	cmp	r6, r4
 800737c:	d105      	bne.n	800738a <__libc_init_array+0x2e>
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	f855 3b04 	ldr.w	r3, [r5], #4
 8007384:	4798      	blx	r3
 8007386:	3601      	adds	r6, #1
 8007388:	e7ee      	b.n	8007368 <__libc_init_array+0xc>
 800738a:	f855 3b04 	ldr.w	r3, [r5], #4
 800738e:	4798      	blx	r3
 8007390:	3601      	adds	r6, #1
 8007392:	e7f2      	b.n	800737a <__libc_init_array+0x1e>
 8007394:	080083b0 	.word	0x080083b0
 8007398:	080083b0 	.word	0x080083b0
 800739c:	080083b0 	.word	0x080083b0
 80073a0:	080083b4 	.word	0x080083b4

080073a4 <memset>:
 80073a4:	4402      	add	r2, r0
 80073a6:	4603      	mov	r3, r0
 80073a8:	4293      	cmp	r3, r2
 80073aa:	d100      	bne.n	80073ae <memset+0xa>
 80073ac:	4770      	bx	lr
 80073ae:	f803 1b01 	strb.w	r1, [r3], #1
 80073b2:	e7f9      	b.n	80073a8 <memset+0x4>

080073b4 <iprintf>:
 80073b4:	b40f      	push	{r0, r1, r2, r3}
 80073b6:	4b0a      	ldr	r3, [pc, #40]	; (80073e0 <iprintf+0x2c>)
 80073b8:	b513      	push	{r0, r1, r4, lr}
 80073ba:	681c      	ldr	r4, [r3, #0]
 80073bc:	b124      	cbz	r4, 80073c8 <iprintf+0x14>
 80073be:	69a3      	ldr	r3, [r4, #24]
 80073c0:	b913      	cbnz	r3, 80073c8 <iprintf+0x14>
 80073c2:	4620      	mov	r0, r4
 80073c4:	f000 f866 	bl	8007494 <__sinit>
 80073c8:	ab05      	add	r3, sp, #20
 80073ca:	9a04      	ldr	r2, [sp, #16]
 80073cc:	68a1      	ldr	r1, [r4, #8]
 80073ce:	9301      	str	r3, [sp, #4]
 80073d0:	4620      	mov	r0, r4
 80073d2:	f000 f9bd 	bl	8007750 <_vfiprintf_r>
 80073d6:	b002      	add	sp, #8
 80073d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073dc:	b004      	add	sp, #16
 80073de:	4770      	bx	lr
 80073e0:	2000000c 	.word	0x2000000c

080073e4 <std>:
 80073e4:	2300      	movs	r3, #0
 80073e6:	b510      	push	{r4, lr}
 80073e8:	4604      	mov	r4, r0
 80073ea:	e9c0 3300 	strd	r3, r3, [r0]
 80073ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80073f2:	6083      	str	r3, [r0, #8]
 80073f4:	8181      	strh	r1, [r0, #12]
 80073f6:	6643      	str	r3, [r0, #100]	; 0x64
 80073f8:	81c2      	strh	r2, [r0, #14]
 80073fa:	6183      	str	r3, [r0, #24]
 80073fc:	4619      	mov	r1, r3
 80073fe:	2208      	movs	r2, #8
 8007400:	305c      	adds	r0, #92	; 0x5c
 8007402:	f7ff ffcf 	bl	80073a4 <memset>
 8007406:	4b05      	ldr	r3, [pc, #20]	; (800741c <std+0x38>)
 8007408:	6263      	str	r3, [r4, #36]	; 0x24
 800740a:	4b05      	ldr	r3, [pc, #20]	; (8007420 <std+0x3c>)
 800740c:	62a3      	str	r3, [r4, #40]	; 0x28
 800740e:	4b05      	ldr	r3, [pc, #20]	; (8007424 <std+0x40>)
 8007410:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007412:	4b05      	ldr	r3, [pc, #20]	; (8007428 <std+0x44>)
 8007414:	6224      	str	r4, [r4, #32]
 8007416:	6323      	str	r3, [r4, #48]	; 0x30
 8007418:	bd10      	pop	{r4, pc}
 800741a:	bf00      	nop
 800741c:	08007cf9 	.word	0x08007cf9
 8007420:	08007d1b 	.word	0x08007d1b
 8007424:	08007d53 	.word	0x08007d53
 8007428:	08007d77 	.word	0x08007d77

0800742c <_cleanup_r>:
 800742c:	4901      	ldr	r1, [pc, #4]	; (8007434 <_cleanup_r+0x8>)
 800742e:	f000 b8af 	b.w	8007590 <_fwalk_reent>
 8007432:	bf00      	nop
 8007434:	08008051 	.word	0x08008051

08007438 <__sfmoreglue>:
 8007438:	b570      	push	{r4, r5, r6, lr}
 800743a:	2268      	movs	r2, #104	; 0x68
 800743c:	1e4d      	subs	r5, r1, #1
 800743e:	4355      	muls	r5, r2
 8007440:	460e      	mov	r6, r1
 8007442:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007446:	f000 f8e5 	bl	8007614 <_malloc_r>
 800744a:	4604      	mov	r4, r0
 800744c:	b140      	cbz	r0, 8007460 <__sfmoreglue+0x28>
 800744e:	2100      	movs	r1, #0
 8007450:	e9c0 1600 	strd	r1, r6, [r0]
 8007454:	300c      	adds	r0, #12
 8007456:	60a0      	str	r0, [r4, #8]
 8007458:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800745c:	f7ff ffa2 	bl	80073a4 <memset>
 8007460:	4620      	mov	r0, r4
 8007462:	bd70      	pop	{r4, r5, r6, pc}

08007464 <__sfp_lock_acquire>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__sfp_lock_acquire+0x8>)
 8007466:	f000 b8b3 	b.w	80075d0 <__retarget_lock_acquire_recursive>
 800746a:	bf00      	nop
 800746c:	2000037d 	.word	0x2000037d

08007470 <__sfp_lock_release>:
 8007470:	4801      	ldr	r0, [pc, #4]	; (8007478 <__sfp_lock_release+0x8>)
 8007472:	f000 b8ae 	b.w	80075d2 <__retarget_lock_release_recursive>
 8007476:	bf00      	nop
 8007478:	2000037d 	.word	0x2000037d

0800747c <__sinit_lock_acquire>:
 800747c:	4801      	ldr	r0, [pc, #4]	; (8007484 <__sinit_lock_acquire+0x8>)
 800747e:	f000 b8a7 	b.w	80075d0 <__retarget_lock_acquire_recursive>
 8007482:	bf00      	nop
 8007484:	2000037e 	.word	0x2000037e

08007488 <__sinit_lock_release>:
 8007488:	4801      	ldr	r0, [pc, #4]	; (8007490 <__sinit_lock_release+0x8>)
 800748a:	f000 b8a2 	b.w	80075d2 <__retarget_lock_release_recursive>
 800748e:	bf00      	nop
 8007490:	2000037e 	.word	0x2000037e

08007494 <__sinit>:
 8007494:	b510      	push	{r4, lr}
 8007496:	4604      	mov	r4, r0
 8007498:	f7ff fff0 	bl	800747c <__sinit_lock_acquire>
 800749c:	69a3      	ldr	r3, [r4, #24]
 800749e:	b11b      	cbz	r3, 80074a8 <__sinit+0x14>
 80074a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80074a4:	f7ff bff0 	b.w	8007488 <__sinit_lock_release>
 80074a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80074ac:	6523      	str	r3, [r4, #80]	; 0x50
 80074ae:	4b13      	ldr	r3, [pc, #76]	; (80074fc <__sinit+0x68>)
 80074b0:	4a13      	ldr	r2, [pc, #76]	; (8007500 <__sinit+0x6c>)
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80074b6:	42a3      	cmp	r3, r4
 80074b8:	bf04      	itt	eq
 80074ba:	2301      	moveq	r3, #1
 80074bc:	61a3      	streq	r3, [r4, #24]
 80074be:	4620      	mov	r0, r4
 80074c0:	f000 f820 	bl	8007504 <__sfp>
 80074c4:	6060      	str	r0, [r4, #4]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f81c 	bl	8007504 <__sfp>
 80074cc:	60a0      	str	r0, [r4, #8]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f000 f818 	bl	8007504 <__sfp>
 80074d4:	2200      	movs	r2, #0
 80074d6:	60e0      	str	r0, [r4, #12]
 80074d8:	2104      	movs	r1, #4
 80074da:	6860      	ldr	r0, [r4, #4]
 80074dc:	f7ff ff82 	bl	80073e4 <std>
 80074e0:	68a0      	ldr	r0, [r4, #8]
 80074e2:	2201      	movs	r2, #1
 80074e4:	2109      	movs	r1, #9
 80074e6:	f7ff ff7d 	bl	80073e4 <std>
 80074ea:	68e0      	ldr	r0, [r4, #12]
 80074ec:	2202      	movs	r2, #2
 80074ee:	2112      	movs	r1, #18
 80074f0:	f7ff ff78 	bl	80073e4 <std>
 80074f4:	2301      	movs	r3, #1
 80074f6:	61a3      	str	r3, [r4, #24]
 80074f8:	e7d2      	b.n	80074a0 <__sinit+0xc>
 80074fa:	bf00      	nop
 80074fc:	08008310 	.word	0x08008310
 8007500:	0800742d 	.word	0x0800742d

08007504 <__sfp>:
 8007504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007506:	4607      	mov	r7, r0
 8007508:	f7ff ffac 	bl	8007464 <__sfp_lock_acquire>
 800750c:	4b1e      	ldr	r3, [pc, #120]	; (8007588 <__sfp+0x84>)
 800750e:	681e      	ldr	r6, [r3, #0]
 8007510:	69b3      	ldr	r3, [r6, #24]
 8007512:	b913      	cbnz	r3, 800751a <__sfp+0x16>
 8007514:	4630      	mov	r0, r6
 8007516:	f7ff ffbd 	bl	8007494 <__sinit>
 800751a:	3648      	adds	r6, #72	; 0x48
 800751c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007520:	3b01      	subs	r3, #1
 8007522:	d503      	bpl.n	800752c <__sfp+0x28>
 8007524:	6833      	ldr	r3, [r6, #0]
 8007526:	b30b      	cbz	r3, 800756c <__sfp+0x68>
 8007528:	6836      	ldr	r6, [r6, #0]
 800752a:	e7f7      	b.n	800751c <__sfp+0x18>
 800752c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007530:	b9d5      	cbnz	r5, 8007568 <__sfp+0x64>
 8007532:	4b16      	ldr	r3, [pc, #88]	; (800758c <__sfp+0x88>)
 8007534:	60e3      	str	r3, [r4, #12]
 8007536:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800753a:	6665      	str	r5, [r4, #100]	; 0x64
 800753c:	f000 f847 	bl	80075ce <__retarget_lock_init_recursive>
 8007540:	f7ff ff96 	bl	8007470 <__sfp_lock_release>
 8007544:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007548:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800754c:	6025      	str	r5, [r4, #0]
 800754e:	61a5      	str	r5, [r4, #24]
 8007550:	2208      	movs	r2, #8
 8007552:	4629      	mov	r1, r5
 8007554:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007558:	f7ff ff24 	bl	80073a4 <memset>
 800755c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007560:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007564:	4620      	mov	r0, r4
 8007566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007568:	3468      	adds	r4, #104	; 0x68
 800756a:	e7d9      	b.n	8007520 <__sfp+0x1c>
 800756c:	2104      	movs	r1, #4
 800756e:	4638      	mov	r0, r7
 8007570:	f7ff ff62 	bl	8007438 <__sfmoreglue>
 8007574:	4604      	mov	r4, r0
 8007576:	6030      	str	r0, [r6, #0]
 8007578:	2800      	cmp	r0, #0
 800757a:	d1d5      	bne.n	8007528 <__sfp+0x24>
 800757c:	f7ff ff78 	bl	8007470 <__sfp_lock_release>
 8007580:	230c      	movs	r3, #12
 8007582:	603b      	str	r3, [r7, #0]
 8007584:	e7ee      	b.n	8007564 <__sfp+0x60>
 8007586:	bf00      	nop
 8007588:	08008310 	.word	0x08008310
 800758c:	ffff0001 	.word	0xffff0001

08007590 <_fwalk_reent>:
 8007590:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007594:	4606      	mov	r6, r0
 8007596:	4688      	mov	r8, r1
 8007598:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800759c:	2700      	movs	r7, #0
 800759e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075a2:	f1b9 0901 	subs.w	r9, r9, #1
 80075a6:	d505      	bpl.n	80075b4 <_fwalk_reent+0x24>
 80075a8:	6824      	ldr	r4, [r4, #0]
 80075aa:	2c00      	cmp	r4, #0
 80075ac:	d1f7      	bne.n	800759e <_fwalk_reent+0xe>
 80075ae:	4638      	mov	r0, r7
 80075b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075b4:	89ab      	ldrh	r3, [r5, #12]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d907      	bls.n	80075ca <_fwalk_reent+0x3a>
 80075ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80075be:	3301      	adds	r3, #1
 80075c0:	d003      	beq.n	80075ca <_fwalk_reent+0x3a>
 80075c2:	4629      	mov	r1, r5
 80075c4:	4630      	mov	r0, r6
 80075c6:	47c0      	blx	r8
 80075c8:	4307      	orrs	r7, r0
 80075ca:	3568      	adds	r5, #104	; 0x68
 80075cc:	e7e9      	b.n	80075a2 <_fwalk_reent+0x12>

080075ce <__retarget_lock_init_recursive>:
 80075ce:	4770      	bx	lr

080075d0 <__retarget_lock_acquire_recursive>:
 80075d0:	4770      	bx	lr

080075d2 <__retarget_lock_release_recursive>:
 80075d2:	4770      	bx	lr

080075d4 <sbrk_aligned>:
 80075d4:	b570      	push	{r4, r5, r6, lr}
 80075d6:	4e0e      	ldr	r6, [pc, #56]	; (8007610 <sbrk_aligned+0x3c>)
 80075d8:	460c      	mov	r4, r1
 80075da:	6831      	ldr	r1, [r6, #0]
 80075dc:	4605      	mov	r5, r0
 80075de:	b911      	cbnz	r1, 80075e6 <sbrk_aligned+0x12>
 80075e0:	f000 fb7a 	bl	8007cd8 <_sbrk_r>
 80075e4:	6030      	str	r0, [r6, #0]
 80075e6:	4621      	mov	r1, r4
 80075e8:	4628      	mov	r0, r5
 80075ea:	f000 fb75 	bl	8007cd8 <_sbrk_r>
 80075ee:	1c43      	adds	r3, r0, #1
 80075f0:	d00a      	beq.n	8007608 <sbrk_aligned+0x34>
 80075f2:	1cc4      	adds	r4, r0, #3
 80075f4:	f024 0403 	bic.w	r4, r4, #3
 80075f8:	42a0      	cmp	r0, r4
 80075fa:	d007      	beq.n	800760c <sbrk_aligned+0x38>
 80075fc:	1a21      	subs	r1, r4, r0
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 fb6a 	bl	8007cd8 <_sbrk_r>
 8007604:	3001      	adds	r0, #1
 8007606:	d101      	bne.n	800760c <sbrk_aligned+0x38>
 8007608:	f04f 34ff 	mov.w	r4, #4294967295
 800760c:	4620      	mov	r0, r4
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	20000384 	.word	0x20000384

08007614 <_malloc_r>:
 8007614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007618:	1ccd      	adds	r5, r1, #3
 800761a:	f025 0503 	bic.w	r5, r5, #3
 800761e:	3508      	adds	r5, #8
 8007620:	2d0c      	cmp	r5, #12
 8007622:	bf38      	it	cc
 8007624:	250c      	movcc	r5, #12
 8007626:	2d00      	cmp	r5, #0
 8007628:	4607      	mov	r7, r0
 800762a:	db01      	blt.n	8007630 <_malloc_r+0x1c>
 800762c:	42a9      	cmp	r1, r5
 800762e:	d905      	bls.n	800763c <_malloc_r+0x28>
 8007630:	230c      	movs	r3, #12
 8007632:	603b      	str	r3, [r7, #0]
 8007634:	2600      	movs	r6, #0
 8007636:	4630      	mov	r0, r6
 8007638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800763c:	4e2e      	ldr	r6, [pc, #184]	; (80076f8 <_malloc_r+0xe4>)
 800763e:	f000 fdbb 	bl	80081b8 <__malloc_lock>
 8007642:	6833      	ldr	r3, [r6, #0]
 8007644:	461c      	mov	r4, r3
 8007646:	bb34      	cbnz	r4, 8007696 <_malloc_r+0x82>
 8007648:	4629      	mov	r1, r5
 800764a:	4638      	mov	r0, r7
 800764c:	f7ff ffc2 	bl	80075d4 <sbrk_aligned>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	4604      	mov	r4, r0
 8007654:	d14d      	bne.n	80076f2 <_malloc_r+0xde>
 8007656:	6834      	ldr	r4, [r6, #0]
 8007658:	4626      	mov	r6, r4
 800765a:	2e00      	cmp	r6, #0
 800765c:	d140      	bne.n	80076e0 <_malloc_r+0xcc>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	4631      	mov	r1, r6
 8007662:	4638      	mov	r0, r7
 8007664:	eb04 0803 	add.w	r8, r4, r3
 8007668:	f000 fb36 	bl	8007cd8 <_sbrk_r>
 800766c:	4580      	cmp	r8, r0
 800766e:	d13a      	bne.n	80076e6 <_malloc_r+0xd2>
 8007670:	6821      	ldr	r1, [r4, #0]
 8007672:	3503      	adds	r5, #3
 8007674:	1a6d      	subs	r5, r5, r1
 8007676:	f025 0503 	bic.w	r5, r5, #3
 800767a:	3508      	adds	r5, #8
 800767c:	2d0c      	cmp	r5, #12
 800767e:	bf38      	it	cc
 8007680:	250c      	movcc	r5, #12
 8007682:	4629      	mov	r1, r5
 8007684:	4638      	mov	r0, r7
 8007686:	f7ff ffa5 	bl	80075d4 <sbrk_aligned>
 800768a:	3001      	adds	r0, #1
 800768c:	d02b      	beq.n	80076e6 <_malloc_r+0xd2>
 800768e:	6823      	ldr	r3, [r4, #0]
 8007690:	442b      	add	r3, r5
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	e00e      	b.n	80076b4 <_malloc_r+0xa0>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	1b52      	subs	r2, r2, r5
 800769a:	d41e      	bmi.n	80076da <_malloc_r+0xc6>
 800769c:	2a0b      	cmp	r2, #11
 800769e:	d916      	bls.n	80076ce <_malloc_r+0xba>
 80076a0:	1961      	adds	r1, r4, r5
 80076a2:	42a3      	cmp	r3, r4
 80076a4:	6025      	str	r5, [r4, #0]
 80076a6:	bf18      	it	ne
 80076a8:	6059      	strne	r1, [r3, #4]
 80076aa:	6863      	ldr	r3, [r4, #4]
 80076ac:	bf08      	it	eq
 80076ae:	6031      	streq	r1, [r6, #0]
 80076b0:	5162      	str	r2, [r4, r5]
 80076b2:	604b      	str	r3, [r1, #4]
 80076b4:	4638      	mov	r0, r7
 80076b6:	f104 060b 	add.w	r6, r4, #11
 80076ba:	f000 fd83 	bl	80081c4 <__malloc_unlock>
 80076be:	f026 0607 	bic.w	r6, r6, #7
 80076c2:	1d23      	adds	r3, r4, #4
 80076c4:	1af2      	subs	r2, r6, r3
 80076c6:	d0b6      	beq.n	8007636 <_malloc_r+0x22>
 80076c8:	1b9b      	subs	r3, r3, r6
 80076ca:	50a3      	str	r3, [r4, r2]
 80076cc:	e7b3      	b.n	8007636 <_malloc_r+0x22>
 80076ce:	6862      	ldr	r2, [r4, #4]
 80076d0:	42a3      	cmp	r3, r4
 80076d2:	bf0c      	ite	eq
 80076d4:	6032      	streq	r2, [r6, #0]
 80076d6:	605a      	strne	r2, [r3, #4]
 80076d8:	e7ec      	b.n	80076b4 <_malloc_r+0xa0>
 80076da:	4623      	mov	r3, r4
 80076dc:	6864      	ldr	r4, [r4, #4]
 80076de:	e7b2      	b.n	8007646 <_malloc_r+0x32>
 80076e0:	4634      	mov	r4, r6
 80076e2:	6876      	ldr	r6, [r6, #4]
 80076e4:	e7b9      	b.n	800765a <_malloc_r+0x46>
 80076e6:	230c      	movs	r3, #12
 80076e8:	603b      	str	r3, [r7, #0]
 80076ea:	4638      	mov	r0, r7
 80076ec:	f000 fd6a 	bl	80081c4 <__malloc_unlock>
 80076f0:	e7a1      	b.n	8007636 <_malloc_r+0x22>
 80076f2:	6025      	str	r5, [r4, #0]
 80076f4:	e7de      	b.n	80076b4 <_malloc_r+0xa0>
 80076f6:	bf00      	nop
 80076f8:	20000380 	.word	0x20000380

080076fc <__sfputc_r>:
 80076fc:	6893      	ldr	r3, [r2, #8]
 80076fe:	3b01      	subs	r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	b410      	push	{r4}
 8007704:	6093      	str	r3, [r2, #8]
 8007706:	da08      	bge.n	800771a <__sfputc_r+0x1e>
 8007708:	6994      	ldr	r4, [r2, #24]
 800770a:	42a3      	cmp	r3, r4
 800770c:	db01      	blt.n	8007712 <__sfputc_r+0x16>
 800770e:	290a      	cmp	r1, #10
 8007710:	d103      	bne.n	800771a <__sfputc_r+0x1e>
 8007712:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007716:	f000 bb33 	b.w	8007d80 <__swbuf_r>
 800771a:	6813      	ldr	r3, [r2, #0]
 800771c:	1c58      	adds	r0, r3, #1
 800771e:	6010      	str	r0, [r2, #0]
 8007720:	7019      	strb	r1, [r3, #0]
 8007722:	4608      	mov	r0, r1
 8007724:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007728:	4770      	bx	lr

0800772a <__sfputs_r>:
 800772a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800772c:	4606      	mov	r6, r0
 800772e:	460f      	mov	r7, r1
 8007730:	4614      	mov	r4, r2
 8007732:	18d5      	adds	r5, r2, r3
 8007734:	42ac      	cmp	r4, r5
 8007736:	d101      	bne.n	800773c <__sfputs_r+0x12>
 8007738:	2000      	movs	r0, #0
 800773a:	e007      	b.n	800774c <__sfputs_r+0x22>
 800773c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007740:	463a      	mov	r2, r7
 8007742:	4630      	mov	r0, r6
 8007744:	f7ff ffda 	bl	80076fc <__sfputc_r>
 8007748:	1c43      	adds	r3, r0, #1
 800774a:	d1f3      	bne.n	8007734 <__sfputs_r+0xa>
 800774c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007750 <_vfiprintf_r>:
 8007750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007754:	460d      	mov	r5, r1
 8007756:	b09d      	sub	sp, #116	; 0x74
 8007758:	4614      	mov	r4, r2
 800775a:	4698      	mov	r8, r3
 800775c:	4606      	mov	r6, r0
 800775e:	b118      	cbz	r0, 8007768 <_vfiprintf_r+0x18>
 8007760:	6983      	ldr	r3, [r0, #24]
 8007762:	b90b      	cbnz	r3, 8007768 <_vfiprintf_r+0x18>
 8007764:	f7ff fe96 	bl	8007494 <__sinit>
 8007768:	4b89      	ldr	r3, [pc, #548]	; (8007990 <_vfiprintf_r+0x240>)
 800776a:	429d      	cmp	r5, r3
 800776c:	d11b      	bne.n	80077a6 <_vfiprintf_r+0x56>
 800776e:	6875      	ldr	r5, [r6, #4]
 8007770:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007772:	07d9      	lsls	r1, r3, #31
 8007774:	d405      	bmi.n	8007782 <_vfiprintf_r+0x32>
 8007776:	89ab      	ldrh	r3, [r5, #12]
 8007778:	059a      	lsls	r2, r3, #22
 800777a:	d402      	bmi.n	8007782 <_vfiprintf_r+0x32>
 800777c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800777e:	f7ff ff27 	bl	80075d0 <__retarget_lock_acquire_recursive>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	071b      	lsls	r3, r3, #28
 8007786:	d501      	bpl.n	800778c <_vfiprintf_r+0x3c>
 8007788:	692b      	ldr	r3, [r5, #16]
 800778a:	b9eb      	cbnz	r3, 80077c8 <_vfiprintf_r+0x78>
 800778c:	4629      	mov	r1, r5
 800778e:	4630      	mov	r0, r6
 8007790:	f000 fb5a 	bl	8007e48 <__swsetup_r>
 8007794:	b1c0      	cbz	r0, 80077c8 <_vfiprintf_r+0x78>
 8007796:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007798:	07dc      	lsls	r4, r3, #31
 800779a:	d50e      	bpl.n	80077ba <_vfiprintf_r+0x6a>
 800779c:	f04f 30ff 	mov.w	r0, #4294967295
 80077a0:	b01d      	add	sp, #116	; 0x74
 80077a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077a6:	4b7b      	ldr	r3, [pc, #492]	; (8007994 <_vfiprintf_r+0x244>)
 80077a8:	429d      	cmp	r5, r3
 80077aa:	d101      	bne.n	80077b0 <_vfiprintf_r+0x60>
 80077ac:	68b5      	ldr	r5, [r6, #8]
 80077ae:	e7df      	b.n	8007770 <_vfiprintf_r+0x20>
 80077b0:	4b79      	ldr	r3, [pc, #484]	; (8007998 <_vfiprintf_r+0x248>)
 80077b2:	429d      	cmp	r5, r3
 80077b4:	bf08      	it	eq
 80077b6:	68f5      	ldreq	r5, [r6, #12]
 80077b8:	e7da      	b.n	8007770 <_vfiprintf_r+0x20>
 80077ba:	89ab      	ldrh	r3, [r5, #12]
 80077bc:	0598      	lsls	r0, r3, #22
 80077be:	d4ed      	bmi.n	800779c <_vfiprintf_r+0x4c>
 80077c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80077c2:	f7ff ff06 	bl	80075d2 <__retarget_lock_release_recursive>
 80077c6:	e7e9      	b.n	800779c <_vfiprintf_r+0x4c>
 80077c8:	2300      	movs	r3, #0
 80077ca:	9309      	str	r3, [sp, #36]	; 0x24
 80077cc:	2320      	movs	r3, #32
 80077ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80077d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d6:	2330      	movs	r3, #48	; 0x30
 80077d8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800799c <_vfiprintf_r+0x24c>
 80077dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80077e0:	f04f 0901 	mov.w	r9, #1
 80077e4:	4623      	mov	r3, r4
 80077e6:	469a      	mov	sl, r3
 80077e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077ec:	b10a      	cbz	r2, 80077f2 <_vfiprintf_r+0xa2>
 80077ee:	2a25      	cmp	r2, #37	; 0x25
 80077f0:	d1f9      	bne.n	80077e6 <_vfiprintf_r+0x96>
 80077f2:	ebba 0b04 	subs.w	fp, sl, r4
 80077f6:	d00b      	beq.n	8007810 <_vfiprintf_r+0xc0>
 80077f8:	465b      	mov	r3, fp
 80077fa:	4622      	mov	r2, r4
 80077fc:	4629      	mov	r1, r5
 80077fe:	4630      	mov	r0, r6
 8007800:	f7ff ff93 	bl	800772a <__sfputs_r>
 8007804:	3001      	adds	r0, #1
 8007806:	f000 80aa 	beq.w	800795e <_vfiprintf_r+0x20e>
 800780a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800780c:	445a      	add	r2, fp
 800780e:	9209      	str	r2, [sp, #36]	; 0x24
 8007810:	f89a 3000 	ldrb.w	r3, [sl]
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 80a2 	beq.w	800795e <_vfiprintf_r+0x20e>
 800781a:	2300      	movs	r3, #0
 800781c:	f04f 32ff 	mov.w	r2, #4294967295
 8007820:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007824:	f10a 0a01 	add.w	sl, sl, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9307      	str	r3, [sp, #28]
 800782c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007830:	931a      	str	r3, [sp, #104]	; 0x68
 8007832:	4654      	mov	r4, sl
 8007834:	2205      	movs	r2, #5
 8007836:	f814 1b01 	ldrb.w	r1, [r4], #1
 800783a:	4858      	ldr	r0, [pc, #352]	; (800799c <_vfiprintf_r+0x24c>)
 800783c:	f7f8 fce8 	bl	8000210 <memchr>
 8007840:	9a04      	ldr	r2, [sp, #16]
 8007842:	b9d8      	cbnz	r0, 800787c <_vfiprintf_r+0x12c>
 8007844:	06d1      	lsls	r1, r2, #27
 8007846:	bf44      	itt	mi
 8007848:	2320      	movmi	r3, #32
 800784a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800784e:	0713      	lsls	r3, r2, #28
 8007850:	bf44      	itt	mi
 8007852:	232b      	movmi	r3, #43	; 0x2b
 8007854:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007858:	f89a 3000 	ldrb.w	r3, [sl]
 800785c:	2b2a      	cmp	r3, #42	; 0x2a
 800785e:	d015      	beq.n	800788c <_vfiprintf_r+0x13c>
 8007860:	9a07      	ldr	r2, [sp, #28]
 8007862:	4654      	mov	r4, sl
 8007864:	2000      	movs	r0, #0
 8007866:	f04f 0c0a 	mov.w	ip, #10
 800786a:	4621      	mov	r1, r4
 800786c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007870:	3b30      	subs	r3, #48	; 0x30
 8007872:	2b09      	cmp	r3, #9
 8007874:	d94e      	bls.n	8007914 <_vfiprintf_r+0x1c4>
 8007876:	b1b0      	cbz	r0, 80078a6 <_vfiprintf_r+0x156>
 8007878:	9207      	str	r2, [sp, #28]
 800787a:	e014      	b.n	80078a6 <_vfiprintf_r+0x156>
 800787c:	eba0 0308 	sub.w	r3, r0, r8
 8007880:	fa09 f303 	lsl.w	r3, r9, r3
 8007884:	4313      	orrs	r3, r2
 8007886:	9304      	str	r3, [sp, #16]
 8007888:	46a2      	mov	sl, r4
 800788a:	e7d2      	b.n	8007832 <_vfiprintf_r+0xe2>
 800788c:	9b03      	ldr	r3, [sp, #12]
 800788e:	1d19      	adds	r1, r3, #4
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	9103      	str	r1, [sp, #12]
 8007894:	2b00      	cmp	r3, #0
 8007896:	bfbb      	ittet	lt
 8007898:	425b      	neglt	r3, r3
 800789a:	f042 0202 	orrlt.w	r2, r2, #2
 800789e:	9307      	strge	r3, [sp, #28]
 80078a0:	9307      	strlt	r3, [sp, #28]
 80078a2:	bfb8      	it	lt
 80078a4:	9204      	strlt	r2, [sp, #16]
 80078a6:	7823      	ldrb	r3, [r4, #0]
 80078a8:	2b2e      	cmp	r3, #46	; 0x2e
 80078aa:	d10c      	bne.n	80078c6 <_vfiprintf_r+0x176>
 80078ac:	7863      	ldrb	r3, [r4, #1]
 80078ae:	2b2a      	cmp	r3, #42	; 0x2a
 80078b0:	d135      	bne.n	800791e <_vfiprintf_r+0x1ce>
 80078b2:	9b03      	ldr	r3, [sp, #12]
 80078b4:	1d1a      	adds	r2, r3, #4
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	9203      	str	r2, [sp, #12]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfb8      	it	lt
 80078be:	f04f 33ff 	movlt.w	r3, #4294967295
 80078c2:	3402      	adds	r4, #2
 80078c4:	9305      	str	r3, [sp, #20]
 80078c6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80079ac <_vfiprintf_r+0x25c>
 80078ca:	7821      	ldrb	r1, [r4, #0]
 80078cc:	2203      	movs	r2, #3
 80078ce:	4650      	mov	r0, sl
 80078d0:	f7f8 fc9e 	bl	8000210 <memchr>
 80078d4:	b140      	cbz	r0, 80078e8 <_vfiprintf_r+0x198>
 80078d6:	2340      	movs	r3, #64	; 0x40
 80078d8:	eba0 000a 	sub.w	r0, r0, sl
 80078dc:	fa03 f000 	lsl.w	r0, r3, r0
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	4303      	orrs	r3, r0
 80078e4:	3401      	adds	r4, #1
 80078e6:	9304      	str	r3, [sp, #16]
 80078e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078ec:	482c      	ldr	r0, [pc, #176]	; (80079a0 <_vfiprintf_r+0x250>)
 80078ee:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80078f2:	2206      	movs	r2, #6
 80078f4:	f7f8 fc8c 	bl	8000210 <memchr>
 80078f8:	2800      	cmp	r0, #0
 80078fa:	d03f      	beq.n	800797c <_vfiprintf_r+0x22c>
 80078fc:	4b29      	ldr	r3, [pc, #164]	; (80079a4 <_vfiprintf_r+0x254>)
 80078fe:	bb1b      	cbnz	r3, 8007948 <_vfiprintf_r+0x1f8>
 8007900:	9b03      	ldr	r3, [sp, #12]
 8007902:	3307      	adds	r3, #7
 8007904:	f023 0307 	bic.w	r3, r3, #7
 8007908:	3308      	adds	r3, #8
 800790a:	9303      	str	r3, [sp, #12]
 800790c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800790e:	443b      	add	r3, r7
 8007910:	9309      	str	r3, [sp, #36]	; 0x24
 8007912:	e767      	b.n	80077e4 <_vfiprintf_r+0x94>
 8007914:	fb0c 3202 	mla	r2, ip, r2, r3
 8007918:	460c      	mov	r4, r1
 800791a:	2001      	movs	r0, #1
 800791c:	e7a5      	b.n	800786a <_vfiprintf_r+0x11a>
 800791e:	2300      	movs	r3, #0
 8007920:	3401      	adds	r4, #1
 8007922:	9305      	str	r3, [sp, #20]
 8007924:	4619      	mov	r1, r3
 8007926:	f04f 0c0a 	mov.w	ip, #10
 800792a:	4620      	mov	r0, r4
 800792c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007930:	3a30      	subs	r2, #48	; 0x30
 8007932:	2a09      	cmp	r2, #9
 8007934:	d903      	bls.n	800793e <_vfiprintf_r+0x1ee>
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0c5      	beq.n	80078c6 <_vfiprintf_r+0x176>
 800793a:	9105      	str	r1, [sp, #20]
 800793c:	e7c3      	b.n	80078c6 <_vfiprintf_r+0x176>
 800793e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007942:	4604      	mov	r4, r0
 8007944:	2301      	movs	r3, #1
 8007946:	e7f0      	b.n	800792a <_vfiprintf_r+0x1da>
 8007948:	ab03      	add	r3, sp, #12
 800794a:	9300      	str	r3, [sp, #0]
 800794c:	462a      	mov	r2, r5
 800794e:	4b16      	ldr	r3, [pc, #88]	; (80079a8 <_vfiprintf_r+0x258>)
 8007950:	a904      	add	r1, sp, #16
 8007952:	4630      	mov	r0, r6
 8007954:	f3af 8000 	nop.w
 8007958:	4607      	mov	r7, r0
 800795a:	1c78      	adds	r0, r7, #1
 800795c:	d1d6      	bne.n	800790c <_vfiprintf_r+0x1bc>
 800795e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007960:	07d9      	lsls	r1, r3, #31
 8007962:	d405      	bmi.n	8007970 <_vfiprintf_r+0x220>
 8007964:	89ab      	ldrh	r3, [r5, #12]
 8007966:	059a      	lsls	r2, r3, #22
 8007968:	d402      	bmi.n	8007970 <_vfiprintf_r+0x220>
 800796a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800796c:	f7ff fe31 	bl	80075d2 <__retarget_lock_release_recursive>
 8007970:	89ab      	ldrh	r3, [r5, #12]
 8007972:	065b      	lsls	r3, r3, #25
 8007974:	f53f af12 	bmi.w	800779c <_vfiprintf_r+0x4c>
 8007978:	9809      	ldr	r0, [sp, #36]	; 0x24
 800797a:	e711      	b.n	80077a0 <_vfiprintf_r+0x50>
 800797c:	ab03      	add	r3, sp, #12
 800797e:	9300      	str	r3, [sp, #0]
 8007980:	462a      	mov	r2, r5
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <_vfiprintf_r+0x258>)
 8007984:	a904      	add	r1, sp, #16
 8007986:	4630      	mov	r0, r6
 8007988:	f000 f880 	bl	8007a8c <_printf_i>
 800798c:	e7e4      	b.n	8007958 <_vfiprintf_r+0x208>
 800798e:	bf00      	nop
 8007990:	08008334 	.word	0x08008334
 8007994:	08008354 	.word	0x08008354
 8007998:	08008314 	.word	0x08008314
 800799c:	08008374 	.word	0x08008374
 80079a0:	0800837e 	.word	0x0800837e
 80079a4:	00000000 	.word	0x00000000
 80079a8:	0800772b 	.word	0x0800772b
 80079ac:	0800837a 	.word	0x0800837a

080079b0 <_printf_common>:
 80079b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b4:	4616      	mov	r6, r2
 80079b6:	4699      	mov	r9, r3
 80079b8:	688a      	ldr	r2, [r1, #8]
 80079ba:	690b      	ldr	r3, [r1, #16]
 80079bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079c0:	4293      	cmp	r3, r2
 80079c2:	bfb8      	it	lt
 80079c4:	4613      	movlt	r3, r2
 80079c6:	6033      	str	r3, [r6, #0]
 80079c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079cc:	4607      	mov	r7, r0
 80079ce:	460c      	mov	r4, r1
 80079d0:	b10a      	cbz	r2, 80079d6 <_printf_common+0x26>
 80079d2:	3301      	adds	r3, #1
 80079d4:	6033      	str	r3, [r6, #0]
 80079d6:	6823      	ldr	r3, [r4, #0]
 80079d8:	0699      	lsls	r1, r3, #26
 80079da:	bf42      	ittt	mi
 80079dc:	6833      	ldrmi	r3, [r6, #0]
 80079de:	3302      	addmi	r3, #2
 80079e0:	6033      	strmi	r3, [r6, #0]
 80079e2:	6825      	ldr	r5, [r4, #0]
 80079e4:	f015 0506 	ands.w	r5, r5, #6
 80079e8:	d106      	bne.n	80079f8 <_printf_common+0x48>
 80079ea:	f104 0a19 	add.w	sl, r4, #25
 80079ee:	68e3      	ldr	r3, [r4, #12]
 80079f0:	6832      	ldr	r2, [r6, #0]
 80079f2:	1a9b      	subs	r3, r3, r2
 80079f4:	42ab      	cmp	r3, r5
 80079f6:	dc26      	bgt.n	8007a46 <_printf_common+0x96>
 80079f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079fc:	1e13      	subs	r3, r2, #0
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	bf18      	it	ne
 8007a02:	2301      	movne	r3, #1
 8007a04:	0692      	lsls	r2, r2, #26
 8007a06:	d42b      	bmi.n	8007a60 <_printf_common+0xb0>
 8007a08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a0c:	4649      	mov	r1, r9
 8007a0e:	4638      	mov	r0, r7
 8007a10:	47c0      	blx	r8
 8007a12:	3001      	adds	r0, #1
 8007a14:	d01e      	beq.n	8007a54 <_printf_common+0xa4>
 8007a16:	6823      	ldr	r3, [r4, #0]
 8007a18:	68e5      	ldr	r5, [r4, #12]
 8007a1a:	6832      	ldr	r2, [r6, #0]
 8007a1c:	f003 0306 	and.w	r3, r3, #6
 8007a20:	2b04      	cmp	r3, #4
 8007a22:	bf08      	it	eq
 8007a24:	1aad      	subeq	r5, r5, r2
 8007a26:	68a3      	ldr	r3, [r4, #8]
 8007a28:	6922      	ldr	r2, [r4, #16]
 8007a2a:	bf0c      	ite	eq
 8007a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a30:	2500      	movne	r5, #0
 8007a32:	4293      	cmp	r3, r2
 8007a34:	bfc4      	itt	gt
 8007a36:	1a9b      	subgt	r3, r3, r2
 8007a38:	18ed      	addgt	r5, r5, r3
 8007a3a:	2600      	movs	r6, #0
 8007a3c:	341a      	adds	r4, #26
 8007a3e:	42b5      	cmp	r5, r6
 8007a40:	d11a      	bne.n	8007a78 <_printf_common+0xc8>
 8007a42:	2000      	movs	r0, #0
 8007a44:	e008      	b.n	8007a58 <_printf_common+0xa8>
 8007a46:	2301      	movs	r3, #1
 8007a48:	4652      	mov	r2, sl
 8007a4a:	4649      	mov	r1, r9
 8007a4c:	4638      	mov	r0, r7
 8007a4e:	47c0      	blx	r8
 8007a50:	3001      	adds	r0, #1
 8007a52:	d103      	bne.n	8007a5c <_printf_common+0xac>
 8007a54:	f04f 30ff 	mov.w	r0, #4294967295
 8007a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a5c:	3501      	adds	r5, #1
 8007a5e:	e7c6      	b.n	80079ee <_printf_common+0x3e>
 8007a60:	18e1      	adds	r1, r4, r3
 8007a62:	1c5a      	adds	r2, r3, #1
 8007a64:	2030      	movs	r0, #48	; 0x30
 8007a66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a6a:	4422      	add	r2, r4
 8007a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a74:	3302      	adds	r3, #2
 8007a76:	e7c7      	b.n	8007a08 <_printf_common+0x58>
 8007a78:	2301      	movs	r3, #1
 8007a7a:	4622      	mov	r2, r4
 8007a7c:	4649      	mov	r1, r9
 8007a7e:	4638      	mov	r0, r7
 8007a80:	47c0      	blx	r8
 8007a82:	3001      	adds	r0, #1
 8007a84:	d0e6      	beq.n	8007a54 <_printf_common+0xa4>
 8007a86:	3601      	adds	r6, #1
 8007a88:	e7d9      	b.n	8007a3e <_printf_common+0x8e>
	...

08007a8c <_printf_i>:
 8007a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	7e0f      	ldrb	r7, [r1, #24]
 8007a92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a94:	2f78      	cmp	r7, #120	; 0x78
 8007a96:	4691      	mov	r9, r2
 8007a98:	4680      	mov	r8, r0
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	469a      	mov	sl, r3
 8007a9e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007aa2:	d807      	bhi.n	8007ab4 <_printf_i+0x28>
 8007aa4:	2f62      	cmp	r7, #98	; 0x62
 8007aa6:	d80a      	bhi.n	8007abe <_printf_i+0x32>
 8007aa8:	2f00      	cmp	r7, #0
 8007aaa:	f000 80d8 	beq.w	8007c5e <_printf_i+0x1d2>
 8007aae:	2f58      	cmp	r7, #88	; 0x58
 8007ab0:	f000 80a3 	beq.w	8007bfa <_printf_i+0x16e>
 8007ab4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ab8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007abc:	e03a      	b.n	8007b34 <_printf_i+0xa8>
 8007abe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ac2:	2b15      	cmp	r3, #21
 8007ac4:	d8f6      	bhi.n	8007ab4 <_printf_i+0x28>
 8007ac6:	a101      	add	r1, pc, #4	; (adr r1, 8007acc <_printf_i+0x40>)
 8007ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007acc:	08007b25 	.word	0x08007b25
 8007ad0:	08007b39 	.word	0x08007b39
 8007ad4:	08007ab5 	.word	0x08007ab5
 8007ad8:	08007ab5 	.word	0x08007ab5
 8007adc:	08007ab5 	.word	0x08007ab5
 8007ae0:	08007ab5 	.word	0x08007ab5
 8007ae4:	08007b39 	.word	0x08007b39
 8007ae8:	08007ab5 	.word	0x08007ab5
 8007aec:	08007ab5 	.word	0x08007ab5
 8007af0:	08007ab5 	.word	0x08007ab5
 8007af4:	08007ab5 	.word	0x08007ab5
 8007af8:	08007c45 	.word	0x08007c45
 8007afc:	08007b69 	.word	0x08007b69
 8007b00:	08007c27 	.word	0x08007c27
 8007b04:	08007ab5 	.word	0x08007ab5
 8007b08:	08007ab5 	.word	0x08007ab5
 8007b0c:	08007c67 	.word	0x08007c67
 8007b10:	08007ab5 	.word	0x08007ab5
 8007b14:	08007b69 	.word	0x08007b69
 8007b18:	08007ab5 	.word	0x08007ab5
 8007b1c:	08007ab5 	.word	0x08007ab5
 8007b20:	08007c2f 	.word	0x08007c2f
 8007b24:	682b      	ldr	r3, [r5, #0]
 8007b26:	1d1a      	adds	r2, r3, #4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	602a      	str	r2, [r5, #0]
 8007b2c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b34:	2301      	movs	r3, #1
 8007b36:	e0a3      	b.n	8007c80 <_printf_i+0x1f4>
 8007b38:	6820      	ldr	r0, [r4, #0]
 8007b3a:	6829      	ldr	r1, [r5, #0]
 8007b3c:	0606      	lsls	r6, r0, #24
 8007b3e:	f101 0304 	add.w	r3, r1, #4
 8007b42:	d50a      	bpl.n	8007b5a <_printf_i+0xce>
 8007b44:	680e      	ldr	r6, [r1, #0]
 8007b46:	602b      	str	r3, [r5, #0]
 8007b48:	2e00      	cmp	r6, #0
 8007b4a:	da03      	bge.n	8007b54 <_printf_i+0xc8>
 8007b4c:	232d      	movs	r3, #45	; 0x2d
 8007b4e:	4276      	negs	r6, r6
 8007b50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b54:	485e      	ldr	r0, [pc, #376]	; (8007cd0 <_printf_i+0x244>)
 8007b56:	230a      	movs	r3, #10
 8007b58:	e019      	b.n	8007b8e <_printf_i+0x102>
 8007b5a:	680e      	ldr	r6, [r1, #0]
 8007b5c:	602b      	str	r3, [r5, #0]
 8007b5e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b62:	bf18      	it	ne
 8007b64:	b236      	sxthne	r6, r6
 8007b66:	e7ef      	b.n	8007b48 <_printf_i+0xbc>
 8007b68:	682b      	ldr	r3, [r5, #0]
 8007b6a:	6820      	ldr	r0, [r4, #0]
 8007b6c:	1d19      	adds	r1, r3, #4
 8007b6e:	6029      	str	r1, [r5, #0]
 8007b70:	0601      	lsls	r1, r0, #24
 8007b72:	d501      	bpl.n	8007b78 <_printf_i+0xec>
 8007b74:	681e      	ldr	r6, [r3, #0]
 8007b76:	e002      	b.n	8007b7e <_printf_i+0xf2>
 8007b78:	0646      	lsls	r6, r0, #25
 8007b7a:	d5fb      	bpl.n	8007b74 <_printf_i+0xe8>
 8007b7c:	881e      	ldrh	r6, [r3, #0]
 8007b7e:	4854      	ldr	r0, [pc, #336]	; (8007cd0 <_printf_i+0x244>)
 8007b80:	2f6f      	cmp	r7, #111	; 0x6f
 8007b82:	bf0c      	ite	eq
 8007b84:	2308      	moveq	r3, #8
 8007b86:	230a      	movne	r3, #10
 8007b88:	2100      	movs	r1, #0
 8007b8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b8e:	6865      	ldr	r5, [r4, #4]
 8007b90:	60a5      	str	r5, [r4, #8]
 8007b92:	2d00      	cmp	r5, #0
 8007b94:	bfa2      	ittt	ge
 8007b96:	6821      	ldrge	r1, [r4, #0]
 8007b98:	f021 0104 	bicge.w	r1, r1, #4
 8007b9c:	6021      	strge	r1, [r4, #0]
 8007b9e:	b90e      	cbnz	r6, 8007ba4 <_printf_i+0x118>
 8007ba0:	2d00      	cmp	r5, #0
 8007ba2:	d04d      	beq.n	8007c40 <_printf_i+0x1b4>
 8007ba4:	4615      	mov	r5, r2
 8007ba6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007baa:	fb03 6711 	mls	r7, r3, r1, r6
 8007bae:	5dc7      	ldrb	r7, [r0, r7]
 8007bb0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007bb4:	4637      	mov	r7, r6
 8007bb6:	42bb      	cmp	r3, r7
 8007bb8:	460e      	mov	r6, r1
 8007bba:	d9f4      	bls.n	8007ba6 <_printf_i+0x11a>
 8007bbc:	2b08      	cmp	r3, #8
 8007bbe:	d10b      	bne.n	8007bd8 <_printf_i+0x14c>
 8007bc0:	6823      	ldr	r3, [r4, #0]
 8007bc2:	07de      	lsls	r6, r3, #31
 8007bc4:	d508      	bpl.n	8007bd8 <_printf_i+0x14c>
 8007bc6:	6923      	ldr	r3, [r4, #16]
 8007bc8:	6861      	ldr	r1, [r4, #4]
 8007bca:	4299      	cmp	r1, r3
 8007bcc:	bfde      	ittt	le
 8007bce:	2330      	movle	r3, #48	; 0x30
 8007bd0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bd4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bd8:	1b52      	subs	r2, r2, r5
 8007bda:	6122      	str	r2, [r4, #16]
 8007bdc:	f8cd a000 	str.w	sl, [sp]
 8007be0:	464b      	mov	r3, r9
 8007be2:	aa03      	add	r2, sp, #12
 8007be4:	4621      	mov	r1, r4
 8007be6:	4640      	mov	r0, r8
 8007be8:	f7ff fee2 	bl	80079b0 <_printf_common>
 8007bec:	3001      	adds	r0, #1
 8007bee:	d14c      	bne.n	8007c8a <_printf_i+0x1fe>
 8007bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8007bf4:	b004      	add	sp, #16
 8007bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bfa:	4835      	ldr	r0, [pc, #212]	; (8007cd0 <_printf_i+0x244>)
 8007bfc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007c00:	6829      	ldr	r1, [r5, #0]
 8007c02:	6823      	ldr	r3, [r4, #0]
 8007c04:	f851 6b04 	ldr.w	r6, [r1], #4
 8007c08:	6029      	str	r1, [r5, #0]
 8007c0a:	061d      	lsls	r5, r3, #24
 8007c0c:	d514      	bpl.n	8007c38 <_printf_i+0x1ac>
 8007c0e:	07df      	lsls	r7, r3, #31
 8007c10:	bf44      	itt	mi
 8007c12:	f043 0320 	orrmi.w	r3, r3, #32
 8007c16:	6023      	strmi	r3, [r4, #0]
 8007c18:	b91e      	cbnz	r6, 8007c22 <_printf_i+0x196>
 8007c1a:	6823      	ldr	r3, [r4, #0]
 8007c1c:	f023 0320 	bic.w	r3, r3, #32
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	2310      	movs	r3, #16
 8007c24:	e7b0      	b.n	8007b88 <_printf_i+0xfc>
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	f043 0320 	orr.w	r3, r3, #32
 8007c2c:	6023      	str	r3, [r4, #0]
 8007c2e:	2378      	movs	r3, #120	; 0x78
 8007c30:	4828      	ldr	r0, [pc, #160]	; (8007cd4 <_printf_i+0x248>)
 8007c32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c36:	e7e3      	b.n	8007c00 <_printf_i+0x174>
 8007c38:	0659      	lsls	r1, r3, #25
 8007c3a:	bf48      	it	mi
 8007c3c:	b2b6      	uxthmi	r6, r6
 8007c3e:	e7e6      	b.n	8007c0e <_printf_i+0x182>
 8007c40:	4615      	mov	r5, r2
 8007c42:	e7bb      	b.n	8007bbc <_printf_i+0x130>
 8007c44:	682b      	ldr	r3, [r5, #0]
 8007c46:	6826      	ldr	r6, [r4, #0]
 8007c48:	6961      	ldr	r1, [r4, #20]
 8007c4a:	1d18      	adds	r0, r3, #4
 8007c4c:	6028      	str	r0, [r5, #0]
 8007c4e:	0635      	lsls	r5, r6, #24
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	d501      	bpl.n	8007c58 <_printf_i+0x1cc>
 8007c54:	6019      	str	r1, [r3, #0]
 8007c56:	e002      	b.n	8007c5e <_printf_i+0x1d2>
 8007c58:	0670      	lsls	r0, r6, #25
 8007c5a:	d5fb      	bpl.n	8007c54 <_printf_i+0x1c8>
 8007c5c:	8019      	strh	r1, [r3, #0]
 8007c5e:	2300      	movs	r3, #0
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	4615      	mov	r5, r2
 8007c64:	e7ba      	b.n	8007bdc <_printf_i+0x150>
 8007c66:	682b      	ldr	r3, [r5, #0]
 8007c68:	1d1a      	adds	r2, r3, #4
 8007c6a:	602a      	str	r2, [r5, #0]
 8007c6c:	681d      	ldr	r5, [r3, #0]
 8007c6e:	6862      	ldr	r2, [r4, #4]
 8007c70:	2100      	movs	r1, #0
 8007c72:	4628      	mov	r0, r5
 8007c74:	f7f8 facc 	bl	8000210 <memchr>
 8007c78:	b108      	cbz	r0, 8007c7e <_printf_i+0x1f2>
 8007c7a:	1b40      	subs	r0, r0, r5
 8007c7c:	6060      	str	r0, [r4, #4]
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	6123      	str	r3, [r4, #16]
 8007c82:	2300      	movs	r3, #0
 8007c84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c88:	e7a8      	b.n	8007bdc <_printf_i+0x150>
 8007c8a:	6923      	ldr	r3, [r4, #16]
 8007c8c:	462a      	mov	r2, r5
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4640      	mov	r0, r8
 8007c92:	47d0      	blx	sl
 8007c94:	3001      	adds	r0, #1
 8007c96:	d0ab      	beq.n	8007bf0 <_printf_i+0x164>
 8007c98:	6823      	ldr	r3, [r4, #0]
 8007c9a:	079b      	lsls	r3, r3, #30
 8007c9c:	d413      	bmi.n	8007cc6 <_printf_i+0x23a>
 8007c9e:	68e0      	ldr	r0, [r4, #12]
 8007ca0:	9b03      	ldr	r3, [sp, #12]
 8007ca2:	4298      	cmp	r0, r3
 8007ca4:	bfb8      	it	lt
 8007ca6:	4618      	movlt	r0, r3
 8007ca8:	e7a4      	b.n	8007bf4 <_printf_i+0x168>
 8007caa:	2301      	movs	r3, #1
 8007cac:	4632      	mov	r2, r6
 8007cae:	4649      	mov	r1, r9
 8007cb0:	4640      	mov	r0, r8
 8007cb2:	47d0      	blx	sl
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	d09b      	beq.n	8007bf0 <_printf_i+0x164>
 8007cb8:	3501      	adds	r5, #1
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	9903      	ldr	r1, [sp, #12]
 8007cbe:	1a5b      	subs	r3, r3, r1
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dcf2      	bgt.n	8007caa <_printf_i+0x21e>
 8007cc4:	e7eb      	b.n	8007c9e <_printf_i+0x212>
 8007cc6:	2500      	movs	r5, #0
 8007cc8:	f104 0619 	add.w	r6, r4, #25
 8007ccc:	e7f5      	b.n	8007cba <_printf_i+0x22e>
 8007cce:	bf00      	nop
 8007cd0:	08008385 	.word	0x08008385
 8007cd4:	08008396 	.word	0x08008396

08007cd8 <_sbrk_r>:
 8007cd8:	b538      	push	{r3, r4, r5, lr}
 8007cda:	4d06      	ldr	r5, [pc, #24]	; (8007cf4 <_sbrk_r+0x1c>)
 8007cdc:	2300      	movs	r3, #0
 8007cde:	4604      	mov	r4, r0
 8007ce0:	4608      	mov	r0, r1
 8007ce2:	602b      	str	r3, [r5, #0]
 8007ce4:	f7fa fe22 	bl	800292c <_sbrk>
 8007ce8:	1c43      	adds	r3, r0, #1
 8007cea:	d102      	bne.n	8007cf2 <_sbrk_r+0x1a>
 8007cec:	682b      	ldr	r3, [r5, #0]
 8007cee:	b103      	cbz	r3, 8007cf2 <_sbrk_r+0x1a>
 8007cf0:	6023      	str	r3, [r4, #0]
 8007cf2:	bd38      	pop	{r3, r4, r5, pc}
 8007cf4:	20000388 	.word	0x20000388

08007cf8 <__sread>:
 8007cf8:	b510      	push	{r4, lr}
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d00:	f000 fab2 	bl	8008268 <_read_r>
 8007d04:	2800      	cmp	r0, #0
 8007d06:	bfab      	itete	ge
 8007d08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d0a:	89a3      	ldrhlt	r3, [r4, #12]
 8007d0c:	181b      	addge	r3, r3, r0
 8007d0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d12:	bfac      	ite	ge
 8007d14:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d16:	81a3      	strhlt	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__swrite>:
 8007d1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d1e:	461f      	mov	r7, r3
 8007d20:	898b      	ldrh	r3, [r1, #12]
 8007d22:	05db      	lsls	r3, r3, #23
 8007d24:	4605      	mov	r5, r0
 8007d26:	460c      	mov	r4, r1
 8007d28:	4616      	mov	r6, r2
 8007d2a:	d505      	bpl.n	8007d38 <__swrite+0x1e>
 8007d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d30:	2302      	movs	r3, #2
 8007d32:	2200      	movs	r2, #0
 8007d34:	f000 f9c8 	bl	80080c8 <_lseek_r>
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d42:	81a3      	strh	r3, [r4, #12]
 8007d44:	4632      	mov	r2, r6
 8007d46:	463b      	mov	r3, r7
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d4e:	f000 b869 	b.w	8007e24 <_write_r>

08007d52 <__sseek>:
 8007d52:	b510      	push	{r4, lr}
 8007d54:	460c      	mov	r4, r1
 8007d56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d5a:	f000 f9b5 	bl	80080c8 <_lseek_r>
 8007d5e:	1c43      	adds	r3, r0, #1
 8007d60:	89a3      	ldrh	r3, [r4, #12]
 8007d62:	bf15      	itete	ne
 8007d64:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d6e:	81a3      	strheq	r3, [r4, #12]
 8007d70:	bf18      	it	ne
 8007d72:	81a3      	strhne	r3, [r4, #12]
 8007d74:	bd10      	pop	{r4, pc}

08007d76 <__sclose>:
 8007d76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7a:	f000 b8d3 	b.w	8007f24 <_close_r>
	...

08007d80 <__swbuf_r>:
 8007d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d82:	460e      	mov	r6, r1
 8007d84:	4614      	mov	r4, r2
 8007d86:	4605      	mov	r5, r0
 8007d88:	b118      	cbz	r0, 8007d92 <__swbuf_r+0x12>
 8007d8a:	6983      	ldr	r3, [r0, #24]
 8007d8c:	b90b      	cbnz	r3, 8007d92 <__swbuf_r+0x12>
 8007d8e:	f7ff fb81 	bl	8007494 <__sinit>
 8007d92:	4b21      	ldr	r3, [pc, #132]	; (8007e18 <__swbuf_r+0x98>)
 8007d94:	429c      	cmp	r4, r3
 8007d96:	d12b      	bne.n	8007df0 <__swbuf_r+0x70>
 8007d98:	686c      	ldr	r4, [r5, #4]
 8007d9a:	69a3      	ldr	r3, [r4, #24]
 8007d9c:	60a3      	str	r3, [r4, #8]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	071a      	lsls	r2, r3, #28
 8007da2:	d52f      	bpl.n	8007e04 <__swbuf_r+0x84>
 8007da4:	6923      	ldr	r3, [r4, #16]
 8007da6:	b36b      	cbz	r3, 8007e04 <__swbuf_r+0x84>
 8007da8:	6923      	ldr	r3, [r4, #16]
 8007daa:	6820      	ldr	r0, [r4, #0]
 8007dac:	1ac0      	subs	r0, r0, r3
 8007dae:	6963      	ldr	r3, [r4, #20]
 8007db0:	b2f6      	uxtb	r6, r6
 8007db2:	4283      	cmp	r3, r0
 8007db4:	4637      	mov	r7, r6
 8007db6:	dc04      	bgt.n	8007dc2 <__swbuf_r+0x42>
 8007db8:	4621      	mov	r1, r4
 8007dba:	4628      	mov	r0, r5
 8007dbc:	f000 f948 	bl	8008050 <_fflush_r>
 8007dc0:	bb30      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60a3      	str	r3, [r4, #8]
 8007dc8:	6823      	ldr	r3, [r4, #0]
 8007dca:	1c5a      	adds	r2, r3, #1
 8007dcc:	6022      	str	r2, [r4, #0]
 8007dce:	701e      	strb	r6, [r3, #0]
 8007dd0:	6963      	ldr	r3, [r4, #20]
 8007dd2:	3001      	adds	r0, #1
 8007dd4:	4283      	cmp	r3, r0
 8007dd6:	d004      	beq.n	8007de2 <__swbuf_r+0x62>
 8007dd8:	89a3      	ldrh	r3, [r4, #12]
 8007dda:	07db      	lsls	r3, r3, #31
 8007ddc:	d506      	bpl.n	8007dec <__swbuf_r+0x6c>
 8007dde:	2e0a      	cmp	r6, #10
 8007de0:	d104      	bne.n	8007dec <__swbuf_r+0x6c>
 8007de2:	4621      	mov	r1, r4
 8007de4:	4628      	mov	r0, r5
 8007de6:	f000 f933 	bl	8008050 <_fflush_r>
 8007dea:	b988      	cbnz	r0, 8007e10 <__swbuf_r+0x90>
 8007dec:	4638      	mov	r0, r7
 8007dee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df0:	4b0a      	ldr	r3, [pc, #40]	; (8007e1c <__swbuf_r+0x9c>)
 8007df2:	429c      	cmp	r4, r3
 8007df4:	d101      	bne.n	8007dfa <__swbuf_r+0x7a>
 8007df6:	68ac      	ldr	r4, [r5, #8]
 8007df8:	e7cf      	b.n	8007d9a <__swbuf_r+0x1a>
 8007dfa:	4b09      	ldr	r3, [pc, #36]	; (8007e20 <__swbuf_r+0xa0>)
 8007dfc:	429c      	cmp	r4, r3
 8007dfe:	bf08      	it	eq
 8007e00:	68ec      	ldreq	r4, [r5, #12]
 8007e02:	e7ca      	b.n	8007d9a <__swbuf_r+0x1a>
 8007e04:	4621      	mov	r1, r4
 8007e06:	4628      	mov	r0, r5
 8007e08:	f000 f81e 	bl	8007e48 <__swsetup_r>
 8007e0c:	2800      	cmp	r0, #0
 8007e0e:	d0cb      	beq.n	8007da8 <__swbuf_r+0x28>
 8007e10:	f04f 37ff 	mov.w	r7, #4294967295
 8007e14:	e7ea      	b.n	8007dec <__swbuf_r+0x6c>
 8007e16:	bf00      	nop
 8007e18:	08008334 	.word	0x08008334
 8007e1c:	08008354 	.word	0x08008354
 8007e20:	08008314 	.word	0x08008314

08007e24 <_write_r>:
 8007e24:	b538      	push	{r3, r4, r5, lr}
 8007e26:	4d07      	ldr	r5, [pc, #28]	; (8007e44 <_write_r+0x20>)
 8007e28:	4604      	mov	r4, r0
 8007e2a:	4608      	mov	r0, r1
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	2200      	movs	r2, #0
 8007e30:	602a      	str	r2, [r5, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f7f9 fd66 	bl	8001904 <_write>
 8007e38:	1c43      	adds	r3, r0, #1
 8007e3a:	d102      	bne.n	8007e42 <_write_r+0x1e>
 8007e3c:	682b      	ldr	r3, [r5, #0]
 8007e3e:	b103      	cbz	r3, 8007e42 <_write_r+0x1e>
 8007e40:	6023      	str	r3, [r4, #0]
 8007e42:	bd38      	pop	{r3, r4, r5, pc}
 8007e44:	20000388 	.word	0x20000388

08007e48 <__swsetup_r>:
 8007e48:	4b32      	ldr	r3, [pc, #200]	; (8007f14 <__swsetup_r+0xcc>)
 8007e4a:	b570      	push	{r4, r5, r6, lr}
 8007e4c:	681d      	ldr	r5, [r3, #0]
 8007e4e:	4606      	mov	r6, r0
 8007e50:	460c      	mov	r4, r1
 8007e52:	b125      	cbz	r5, 8007e5e <__swsetup_r+0x16>
 8007e54:	69ab      	ldr	r3, [r5, #24]
 8007e56:	b913      	cbnz	r3, 8007e5e <__swsetup_r+0x16>
 8007e58:	4628      	mov	r0, r5
 8007e5a:	f7ff fb1b 	bl	8007494 <__sinit>
 8007e5e:	4b2e      	ldr	r3, [pc, #184]	; (8007f18 <__swsetup_r+0xd0>)
 8007e60:	429c      	cmp	r4, r3
 8007e62:	d10f      	bne.n	8007e84 <__swsetup_r+0x3c>
 8007e64:	686c      	ldr	r4, [r5, #4]
 8007e66:	89a3      	ldrh	r3, [r4, #12]
 8007e68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e6c:	0719      	lsls	r1, r3, #28
 8007e6e:	d42c      	bmi.n	8007eca <__swsetup_r+0x82>
 8007e70:	06dd      	lsls	r5, r3, #27
 8007e72:	d411      	bmi.n	8007e98 <__swsetup_r+0x50>
 8007e74:	2309      	movs	r3, #9
 8007e76:	6033      	str	r3, [r6, #0]
 8007e78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007e82:	e03e      	b.n	8007f02 <__swsetup_r+0xba>
 8007e84:	4b25      	ldr	r3, [pc, #148]	; (8007f1c <__swsetup_r+0xd4>)
 8007e86:	429c      	cmp	r4, r3
 8007e88:	d101      	bne.n	8007e8e <__swsetup_r+0x46>
 8007e8a:	68ac      	ldr	r4, [r5, #8]
 8007e8c:	e7eb      	b.n	8007e66 <__swsetup_r+0x1e>
 8007e8e:	4b24      	ldr	r3, [pc, #144]	; (8007f20 <__swsetup_r+0xd8>)
 8007e90:	429c      	cmp	r4, r3
 8007e92:	bf08      	it	eq
 8007e94:	68ec      	ldreq	r4, [r5, #12]
 8007e96:	e7e6      	b.n	8007e66 <__swsetup_r+0x1e>
 8007e98:	0758      	lsls	r0, r3, #29
 8007e9a:	d512      	bpl.n	8007ec2 <__swsetup_r+0x7a>
 8007e9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e9e:	b141      	cbz	r1, 8007eb2 <__swsetup_r+0x6a>
 8007ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	d002      	beq.n	8007eae <__swsetup_r+0x66>
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	f000 f991 	bl	80081d0 <_free_r>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6363      	str	r3, [r4, #52]	; 0x34
 8007eb2:	89a3      	ldrh	r3, [r4, #12]
 8007eb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007eb8:	81a3      	strh	r3, [r4, #12]
 8007eba:	2300      	movs	r3, #0
 8007ebc:	6063      	str	r3, [r4, #4]
 8007ebe:	6923      	ldr	r3, [r4, #16]
 8007ec0:	6023      	str	r3, [r4, #0]
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	f043 0308 	orr.w	r3, r3, #8
 8007ec8:	81a3      	strh	r3, [r4, #12]
 8007eca:	6923      	ldr	r3, [r4, #16]
 8007ecc:	b94b      	cbnz	r3, 8007ee2 <__swsetup_r+0x9a>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007ed4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ed8:	d003      	beq.n	8007ee2 <__swsetup_r+0x9a>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4630      	mov	r0, r6
 8007ede:	f000 f92b 	bl	8008138 <__smakebuf_r>
 8007ee2:	89a0      	ldrh	r0, [r4, #12]
 8007ee4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ee8:	f010 0301 	ands.w	r3, r0, #1
 8007eec:	d00a      	beq.n	8007f04 <__swsetup_r+0xbc>
 8007eee:	2300      	movs	r3, #0
 8007ef0:	60a3      	str	r3, [r4, #8]
 8007ef2:	6963      	ldr	r3, [r4, #20]
 8007ef4:	425b      	negs	r3, r3
 8007ef6:	61a3      	str	r3, [r4, #24]
 8007ef8:	6923      	ldr	r3, [r4, #16]
 8007efa:	b943      	cbnz	r3, 8007f0e <__swsetup_r+0xc6>
 8007efc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007f00:	d1ba      	bne.n	8007e78 <__swsetup_r+0x30>
 8007f02:	bd70      	pop	{r4, r5, r6, pc}
 8007f04:	0781      	lsls	r1, r0, #30
 8007f06:	bf58      	it	pl
 8007f08:	6963      	ldrpl	r3, [r4, #20]
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	e7f4      	b.n	8007ef8 <__swsetup_r+0xb0>
 8007f0e:	2000      	movs	r0, #0
 8007f10:	e7f7      	b.n	8007f02 <__swsetup_r+0xba>
 8007f12:	bf00      	nop
 8007f14:	2000000c 	.word	0x2000000c
 8007f18:	08008334 	.word	0x08008334
 8007f1c:	08008354 	.word	0x08008354
 8007f20:	08008314 	.word	0x08008314

08007f24 <_close_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	4d06      	ldr	r5, [pc, #24]	; (8007f40 <_close_r+0x1c>)
 8007f28:	2300      	movs	r3, #0
 8007f2a:	4604      	mov	r4, r0
 8007f2c:	4608      	mov	r0, r1
 8007f2e:	602b      	str	r3, [r5, #0]
 8007f30:	f7fa fcc7 	bl	80028c2 <_close>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_close_r+0x1a>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_close_r+0x1a>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20000388 	.word	0x20000388

08007f44 <__sflush_r>:
 8007f44:	898a      	ldrh	r2, [r1, #12]
 8007f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f4a:	4605      	mov	r5, r0
 8007f4c:	0710      	lsls	r0, r2, #28
 8007f4e:	460c      	mov	r4, r1
 8007f50:	d458      	bmi.n	8008004 <__sflush_r+0xc0>
 8007f52:	684b      	ldr	r3, [r1, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	dc05      	bgt.n	8007f64 <__sflush_r+0x20>
 8007f58:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	dc02      	bgt.n	8007f64 <__sflush_r+0x20>
 8007f5e:	2000      	movs	r0, #0
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d0f9      	beq.n	8007f5e <__sflush_r+0x1a>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f70:	682f      	ldr	r7, [r5, #0]
 8007f72:	602b      	str	r3, [r5, #0]
 8007f74:	d032      	beq.n	8007fdc <__sflush_r+0x98>
 8007f76:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f78:	89a3      	ldrh	r3, [r4, #12]
 8007f7a:	075a      	lsls	r2, r3, #29
 8007f7c:	d505      	bpl.n	8007f8a <__sflush_r+0x46>
 8007f7e:	6863      	ldr	r3, [r4, #4]
 8007f80:	1ac0      	subs	r0, r0, r3
 8007f82:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f84:	b10b      	cbz	r3, 8007f8a <__sflush_r+0x46>
 8007f86:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f88:	1ac0      	subs	r0, r0, r3
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4602      	mov	r2, r0
 8007f8e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f90:	6a21      	ldr	r1, [r4, #32]
 8007f92:	4628      	mov	r0, r5
 8007f94:	47b0      	blx	r6
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	d106      	bne.n	8007faa <__sflush_r+0x66>
 8007f9c:	6829      	ldr	r1, [r5, #0]
 8007f9e:	291d      	cmp	r1, #29
 8007fa0:	d82c      	bhi.n	8007ffc <__sflush_r+0xb8>
 8007fa2:	4a2a      	ldr	r2, [pc, #168]	; (800804c <__sflush_r+0x108>)
 8007fa4:	40ca      	lsrs	r2, r1
 8007fa6:	07d6      	lsls	r6, r2, #31
 8007fa8:	d528      	bpl.n	8007ffc <__sflush_r+0xb8>
 8007faa:	2200      	movs	r2, #0
 8007fac:	6062      	str	r2, [r4, #4]
 8007fae:	04d9      	lsls	r1, r3, #19
 8007fb0:	6922      	ldr	r2, [r4, #16]
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	d504      	bpl.n	8007fc0 <__sflush_r+0x7c>
 8007fb6:	1c42      	adds	r2, r0, #1
 8007fb8:	d101      	bne.n	8007fbe <__sflush_r+0x7a>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	b903      	cbnz	r3, 8007fc0 <__sflush_r+0x7c>
 8007fbe:	6560      	str	r0, [r4, #84]	; 0x54
 8007fc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007fc2:	602f      	str	r7, [r5, #0]
 8007fc4:	2900      	cmp	r1, #0
 8007fc6:	d0ca      	beq.n	8007f5e <__sflush_r+0x1a>
 8007fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007fcc:	4299      	cmp	r1, r3
 8007fce:	d002      	beq.n	8007fd6 <__sflush_r+0x92>
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	f000 f8fd 	bl	80081d0 <_free_r>
 8007fd6:	2000      	movs	r0, #0
 8007fd8:	6360      	str	r0, [r4, #52]	; 0x34
 8007fda:	e7c1      	b.n	8007f60 <__sflush_r+0x1c>
 8007fdc:	6a21      	ldr	r1, [r4, #32]
 8007fde:	2301      	movs	r3, #1
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b0      	blx	r6
 8007fe4:	1c41      	adds	r1, r0, #1
 8007fe6:	d1c7      	bne.n	8007f78 <__sflush_r+0x34>
 8007fe8:	682b      	ldr	r3, [r5, #0]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d0c4      	beq.n	8007f78 <__sflush_r+0x34>
 8007fee:	2b1d      	cmp	r3, #29
 8007ff0:	d001      	beq.n	8007ff6 <__sflush_r+0xb2>
 8007ff2:	2b16      	cmp	r3, #22
 8007ff4:	d101      	bne.n	8007ffa <__sflush_r+0xb6>
 8007ff6:	602f      	str	r7, [r5, #0]
 8007ff8:	e7b1      	b.n	8007f5e <__sflush_r+0x1a>
 8007ffa:	89a3      	ldrh	r3, [r4, #12]
 8007ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008000:	81a3      	strh	r3, [r4, #12]
 8008002:	e7ad      	b.n	8007f60 <__sflush_r+0x1c>
 8008004:	690f      	ldr	r7, [r1, #16]
 8008006:	2f00      	cmp	r7, #0
 8008008:	d0a9      	beq.n	8007f5e <__sflush_r+0x1a>
 800800a:	0793      	lsls	r3, r2, #30
 800800c:	680e      	ldr	r6, [r1, #0]
 800800e:	bf08      	it	eq
 8008010:	694b      	ldreq	r3, [r1, #20]
 8008012:	600f      	str	r7, [r1, #0]
 8008014:	bf18      	it	ne
 8008016:	2300      	movne	r3, #0
 8008018:	eba6 0807 	sub.w	r8, r6, r7
 800801c:	608b      	str	r3, [r1, #8]
 800801e:	f1b8 0f00 	cmp.w	r8, #0
 8008022:	dd9c      	ble.n	8007f5e <__sflush_r+0x1a>
 8008024:	6a21      	ldr	r1, [r4, #32]
 8008026:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008028:	4643      	mov	r3, r8
 800802a:	463a      	mov	r2, r7
 800802c:	4628      	mov	r0, r5
 800802e:	47b0      	blx	r6
 8008030:	2800      	cmp	r0, #0
 8008032:	dc06      	bgt.n	8008042 <__sflush_r+0xfe>
 8008034:	89a3      	ldrh	r3, [r4, #12]
 8008036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800803a:	81a3      	strh	r3, [r4, #12]
 800803c:	f04f 30ff 	mov.w	r0, #4294967295
 8008040:	e78e      	b.n	8007f60 <__sflush_r+0x1c>
 8008042:	4407      	add	r7, r0
 8008044:	eba8 0800 	sub.w	r8, r8, r0
 8008048:	e7e9      	b.n	800801e <__sflush_r+0xda>
 800804a:	bf00      	nop
 800804c:	20400001 	.word	0x20400001

08008050 <_fflush_r>:
 8008050:	b538      	push	{r3, r4, r5, lr}
 8008052:	690b      	ldr	r3, [r1, #16]
 8008054:	4605      	mov	r5, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b913      	cbnz	r3, 8008060 <_fflush_r+0x10>
 800805a:	2500      	movs	r5, #0
 800805c:	4628      	mov	r0, r5
 800805e:	bd38      	pop	{r3, r4, r5, pc}
 8008060:	b118      	cbz	r0, 800806a <_fflush_r+0x1a>
 8008062:	6983      	ldr	r3, [r0, #24]
 8008064:	b90b      	cbnz	r3, 800806a <_fflush_r+0x1a>
 8008066:	f7ff fa15 	bl	8007494 <__sinit>
 800806a:	4b14      	ldr	r3, [pc, #80]	; (80080bc <_fflush_r+0x6c>)
 800806c:	429c      	cmp	r4, r3
 800806e:	d11b      	bne.n	80080a8 <_fflush_r+0x58>
 8008070:	686c      	ldr	r4, [r5, #4]
 8008072:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d0ef      	beq.n	800805a <_fflush_r+0xa>
 800807a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800807c:	07d0      	lsls	r0, r2, #31
 800807e:	d404      	bmi.n	800808a <_fflush_r+0x3a>
 8008080:	0599      	lsls	r1, r3, #22
 8008082:	d402      	bmi.n	800808a <_fflush_r+0x3a>
 8008084:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008086:	f7ff faa3 	bl	80075d0 <__retarget_lock_acquire_recursive>
 800808a:	4628      	mov	r0, r5
 800808c:	4621      	mov	r1, r4
 800808e:	f7ff ff59 	bl	8007f44 <__sflush_r>
 8008092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008094:	07da      	lsls	r2, r3, #31
 8008096:	4605      	mov	r5, r0
 8008098:	d4e0      	bmi.n	800805c <_fflush_r+0xc>
 800809a:	89a3      	ldrh	r3, [r4, #12]
 800809c:	059b      	lsls	r3, r3, #22
 800809e:	d4dd      	bmi.n	800805c <_fflush_r+0xc>
 80080a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80080a2:	f7ff fa96 	bl	80075d2 <__retarget_lock_release_recursive>
 80080a6:	e7d9      	b.n	800805c <_fflush_r+0xc>
 80080a8:	4b05      	ldr	r3, [pc, #20]	; (80080c0 <_fflush_r+0x70>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <_fflush_r+0x62>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7df      	b.n	8008072 <_fflush_r+0x22>
 80080b2:	4b04      	ldr	r3, [pc, #16]	; (80080c4 <_fflush_r+0x74>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7da      	b.n	8008072 <_fflush_r+0x22>
 80080bc:	08008334 	.word	0x08008334
 80080c0:	08008354 	.word	0x08008354
 80080c4:	08008314 	.word	0x08008314

080080c8 <_lseek_r>:
 80080c8:	b538      	push	{r3, r4, r5, lr}
 80080ca:	4d07      	ldr	r5, [pc, #28]	; (80080e8 <_lseek_r+0x20>)
 80080cc:	4604      	mov	r4, r0
 80080ce:	4608      	mov	r0, r1
 80080d0:	4611      	mov	r1, r2
 80080d2:	2200      	movs	r2, #0
 80080d4:	602a      	str	r2, [r5, #0]
 80080d6:	461a      	mov	r2, r3
 80080d8:	f7fa fc1a 	bl	8002910 <_lseek>
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	d102      	bne.n	80080e6 <_lseek_r+0x1e>
 80080e0:	682b      	ldr	r3, [r5, #0]
 80080e2:	b103      	cbz	r3, 80080e6 <_lseek_r+0x1e>
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	bd38      	pop	{r3, r4, r5, pc}
 80080e8:	20000388 	.word	0x20000388

080080ec <__swhatbuf_r>:
 80080ec:	b570      	push	{r4, r5, r6, lr}
 80080ee:	460e      	mov	r6, r1
 80080f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080f4:	2900      	cmp	r1, #0
 80080f6:	b096      	sub	sp, #88	; 0x58
 80080f8:	4614      	mov	r4, r2
 80080fa:	461d      	mov	r5, r3
 80080fc:	da08      	bge.n	8008110 <__swhatbuf_r+0x24>
 80080fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	602a      	str	r2, [r5, #0]
 8008106:	061a      	lsls	r2, r3, #24
 8008108:	d410      	bmi.n	800812c <__swhatbuf_r+0x40>
 800810a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800810e:	e00e      	b.n	800812e <__swhatbuf_r+0x42>
 8008110:	466a      	mov	r2, sp
 8008112:	f000 f8bb 	bl	800828c <_fstat_r>
 8008116:	2800      	cmp	r0, #0
 8008118:	dbf1      	blt.n	80080fe <__swhatbuf_r+0x12>
 800811a:	9a01      	ldr	r2, [sp, #4]
 800811c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008120:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008124:	425a      	negs	r2, r3
 8008126:	415a      	adcs	r2, r3
 8008128:	602a      	str	r2, [r5, #0]
 800812a:	e7ee      	b.n	800810a <__swhatbuf_r+0x1e>
 800812c:	2340      	movs	r3, #64	; 0x40
 800812e:	2000      	movs	r0, #0
 8008130:	6023      	str	r3, [r4, #0]
 8008132:	b016      	add	sp, #88	; 0x58
 8008134:	bd70      	pop	{r4, r5, r6, pc}
	...

08008138 <__smakebuf_r>:
 8008138:	898b      	ldrh	r3, [r1, #12]
 800813a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800813c:	079d      	lsls	r5, r3, #30
 800813e:	4606      	mov	r6, r0
 8008140:	460c      	mov	r4, r1
 8008142:	d507      	bpl.n	8008154 <__smakebuf_r+0x1c>
 8008144:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008148:	6023      	str	r3, [r4, #0]
 800814a:	6123      	str	r3, [r4, #16]
 800814c:	2301      	movs	r3, #1
 800814e:	6163      	str	r3, [r4, #20]
 8008150:	b002      	add	sp, #8
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	ab01      	add	r3, sp, #4
 8008156:	466a      	mov	r2, sp
 8008158:	f7ff ffc8 	bl	80080ec <__swhatbuf_r>
 800815c:	9900      	ldr	r1, [sp, #0]
 800815e:	4605      	mov	r5, r0
 8008160:	4630      	mov	r0, r6
 8008162:	f7ff fa57 	bl	8007614 <_malloc_r>
 8008166:	b948      	cbnz	r0, 800817c <__smakebuf_r+0x44>
 8008168:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816c:	059a      	lsls	r2, r3, #22
 800816e:	d4ef      	bmi.n	8008150 <__smakebuf_r+0x18>
 8008170:	f023 0303 	bic.w	r3, r3, #3
 8008174:	f043 0302 	orr.w	r3, r3, #2
 8008178:	81a3      	strh	r3, [r4, #12]
 800817a:	e7e3      	b.n	8008144 <__smakebuf_r+0xc>
 800817c:	4b0d      	ldr	r3, [pc, #52]	; (80081b4 <__smakebuf_r+0x7c>)
 800817e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008180:	89a3      	ldrh	r3, [r4, #12]
 8008182:	6020      	str	r0, [r4, #0]
 8008184:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008188:	81a3      	strh	r3, [r4, #12]
 800818a:	9b00      	ldr	r3, [sp, #0]
 800818c:	6163      	str	r3, [r4, #20]
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	6120      	str	r0, [r4, #16]
 8008192:	b15b      	cbz	r3, 80081ac <__smakebuf_r+0x74>
 8008194:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008198:	4630      	mov	r0, r6
 800819a:	f000 f889 	bl	80082b0 <_isatty_r>
 800819e:	b128      	cbz	r0, 80081ac <__smakebuf_r+0x74>
 80081a0:	89a3      	ldrh	r3, [r4, #12]
 80081a2:	f023 0303 	bic.w	r3, r3, #3
 80081a6:	f043 0301 	orr.w	r3, r3, #1
 80081aa:	81a3      	strh	r3, [r4, #12]
 80081ac:	89a0      	ldrh	r0, [r4, #12]
 80081ae:	4305      	orrs	r5, r0
 80081b0:	81a5      	strh	r5, [r4, #12]
 80081b2:	e7cd      	b.n	8008150 <__smakebuf_r+0x18>
 80081b4:	0800742d 	.word	0x0800742d

080081b8 <__malloc_lock>:
 80081b8:	4801      	ldr	r0, [pc, #4]	; (80081c0 <__malloc_lock+0x8>)
 80081ba:	f7ff ba09 	b.w	80075d0 <__retarget_lock_acquire_recursive>
 80081be:	bf00      	nop
 80081c0:	2000037c 	.word	0x2000037c

080081c4 <__malloc_unlock>:
 80081c4:	4801      	ldr	r0, [pc, #4]	; (80081cc <__malloc_unlock+0x8>)
 80081c6:	f7ff ba04 	b.w	80075d2 <__retarget_lock_release_recursive>
 80081ca:	bf00      	nop
 80081cc:	2000037c 	.word	0x2000037c

080081d0 <_free_r>:
 80081d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081d2:	2900      	cmp	r1, #0
 80081d4:	d044      	beq.n	8008260 <_free_r+0x90>
 80081d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081da:	9001      	str	r0, [sp, #4]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	f1a1 0404 	sub.w	r4, r1, #4
 80081e2:	bfb8      	it	lt
 80081e4:	18e4      	addlt	r4, r4, r3
 80081e6:	f7ff ffe7 	bl	80081b8 <__malloc_lock>
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <_free_r+0x94>)
 80081ec:	9801      	ldr	r0, [sp, #4]
 80081ee:	6813      	ldr	r3, [r2, #0]
 80081f0:	b933      	cbnz	r3, 8008200 <_free_r+0x30>
 80081f2:	6063      	str	r3, [r4, #4]
 80081f4:	6014      	str	r4, [r2, #0]
 80081f6:	b003      	add	sp, #12
 80081f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081fc:	f7ff bfe2 	b.w	80081c4 <__malloc_unlock>
 8008200:	42a3      	cmp	r3, r4
 8008202:	d908      	bls.n	8008216 <_free_r+0x46>
 8008204:	6825      	ldr	r5, [r4, #0]
 8008206:	1961      	adds	r1, r4, r5
 8008208:	428b      	cmp	r3, r1
 800820a:	bf01      	itttt	eq
 800820c:	6819      	ldreq	r1, [r3, #0]
 800820e:	685b      	ldreq	r3, [r3, #4]
 8008210:	1949      	addeq	r1, r1, r5
 8008212:	6021      	streq	r1, [r4, #0]
 8008214:	e7ed      	b.n	80081f2 <_free_r+0x22>
 8008216:	461a      	mov	r2, r3
 8008218:	685b      	ldr	r3, [r3, #4]
 800821a:	b10b      	cbz	r3, 8008220 <_free_r+0x50>
 800821c:	42a3      	cmp	r3, r4
 800821e:	d9fa      	bls.n	8008216 <_free_r+0x46>
 8008220:	6811      	ldr	r1, [r2, #0]
 8008222:	1855      	adds	r5, r2, r1
 8008224:	42a5      	cmp	r5, r4
 8008226:	d10b      	bne.n	8008240 <_free_r+0x70>
 8008228:	6824      	ldr	r4, [r4, #0]
 800822a:	4421      	add	r1, r4
 800822c:	1854      	adds	r4, r2, r1
 800822e:	42a3      	cmp	r3, r4
 8008230:	6011      	str	r1, [r2, #0]
 8008232:	d1e0      	bne.n	80081f6 <_free_r+0x26>
 8008234:	681c      	ldr	r4, [r3, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	6053      	str	r3, [r2, #4]
 800823a:	4421      	add	r1, r4
 800823c:	6011      	str	r1, [r2, #0]
 800823e:	e7da      	b.n	80081f6 <_free_r+0x26>
 8008240:	d902      	bls.n	8008248 <_free_r+0x78>
 8008242:	230c      	movs	r3, #12
 8008244:	6003      	str	r3, [r0, #0]
 8008246:	e7d6      	b.n	80081f6 <_free_r+0x26>
 8008248:	6825      	ldr	r5, [r4, #0]
 800824a:	1961      	adds	r1, r4, r5
 800824c:	428b      	cmp	r3, r1
 800824e:	bf04      	itt	eq
 8008250:	6819      	ldreq	r1, [r3, #0]
 8008252:	685b      	ldreq	r3, [r3, #4]
 8008254:	6063      	str	r3, [r4, #4]
 8008256:	bf04      	itt	eq
 8008258:	1949      	addeq	r1, r1, r5
 800825a:	6021      	streq	r1, [r4, #0]
 800825c:	6054      	str	r4, [r2, #4]
 800825e:	e7ca      	b.n	80081f6 <_free_r+0x26>
 8008260:	b003      	add	sp, #12
 8008262:	bd30      	pop	{r4, r5, pc}
 8008264:	20000380 	.word	0x20000380

08008268 <_read_r>:
 8008268:	b538      	push	{r3, r4, r5, lr}
 800826a:	4d07      	ldr	r5, [pc, #28]	; (8008288 <_read_r+0x20>)
 800826c:	4604      	mov	r4, r0
 800826e:	4608      	mov	r0, r1
 8008270:	4611      	mov	r1, r2
 8008272:	2200      	movs	r2, #0
 8008274:	602a      	str	r2, [r5, #0]
 8008276:	461a      	mov	r2, r3
 8008278:	f7fa fb06 	bl	8002888 <_read>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_read_r+0x1e>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_read_r+0x1e>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	20000388 	.word	0x20000388

0800828c <_fstat_r>:
 800828c:	b538      	push	{r3, r4, r5, lr}
 800828e:	4d07      	ldr	r5, [pc, #28]	; (80082ac <_fstat_r+0x20>)
 8008290:	2300      	movs	r3, #0
 8008292:	4604      	mov	r4, r0
 8008294:	4608      	mov	r0, r1
 8008296:	4611      	mov	r1, r2
 8008298:	602b      	str	r3, [r5, #0]
 800829a:	f7fa fb1e 	bl	80028da <_fstat>
 800829e:	1c43      	adds	r3, r0, #1
 80082a0:	d102      	bne.n	80082a8 <_fstat_r+0x1c>
 80082a2:	682b      	ldr	r3, [r5, #0]
 80082a4:	b103      	cbz	r3, 80082a8 <_fstat_r+0x1c>
 80082a6:	6023      	str	r3, [r4, #0]
 80082a8:	bd38      	pop	{r3, r4, r5, pc}
 80082aa:	bf00      	nop
 80082ac:	20000388 	.word	0x20000388

080082b0 <_isatty_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4d06      	ldr	r5, [pc, #24]	; (80082cc <_isatty_r+0x1c>)
 80082b4:	2300      	movs	r3, #0
 80082b6:	4604      	mov	r4, r0
 80082b8:	4608      	mov	r0, r1
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	f7fa fb1d 	bl	80028fa <_isatty>
 80082c0:	1c43      	adds	r3, r0, #1
 80082c2:	d102      	bne.n	80082ca <_isatty_r+0x1a>
 80082c4:	682b      	ldr	r3, [r5, #0]
 80082c6:	b103      	cbz	r3, 80082ca <_isatty_r+0x1a>
 80082c8:	6023      	str	r3, [r4, #0]
 80082ca:	bd38      	pop	{r3, r4, r5, pc}
 80082cc:	20000388 	.word	0x20000388

080082d0 <_init>:
 80082d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d2:	bf00      	nop
 80082d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082d6:	bc08      	pop	{r3}
 80082d8:	469e      	mov	lr, r3
 80082da:	4770      	bx	lr

080082dc <_fini>:
 80082dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082de:	bf00      	nop
 80082e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082e2:	bc08      	pop	{r3}
 80082e4:	469e      	mov	lr, r3
 80082e6:	4770      	bx	lr
