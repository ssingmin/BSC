
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097c8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08009998  08009998  00019998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009aac  08009aac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08009aac  08009aac  00019aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ab4  08009ab4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ab8  08009ab8  00019ab8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009abc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ec  20000074  08009b30  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08009b30  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001563e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2a  00000000  00000000  000356e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00038410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  00039568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000273f9  00000000  00000000  0003a598  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015225  00000000  00000000  00061991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f5298  00000000  00000000  00076bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016be4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005108  00000000  00000000  0016bea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009980 	.word	0x08009980

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08009980 	.word	0x08009980

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2uiz>:
 8000a9c:	004a      	lsls	r2, r1, #1
 8000a9e:	d211      	bcs.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d211      	bcs.n	8000aca <__aeabi_d2uiz+0x2e>
 8000aa6:	d50d      	bpl.n	8000ac4 <__aeabi_d2uiz+0x28>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d40e      	bmi.n	8000ad0 <__aeabi_d2uiz+0x34>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ace:	d102      	bne.n	8000ad6 <__aeabi_d2uiz+0x3a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	4770      	bx	lr
 8000ad6:	f04f 0000 	mov.w	r0, #0
 8000ada:	4770      	bx	lr

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b974 	b.w	8000ddc <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9d08      	ldr	r5, [sp, #32]
 8000b12:	4604      	mov	r4, r0
 8000b14:	468e      	mov	lr, r1
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d14d      	bne.n	8000bb6 <__udivmoddi4+0xaa>
 8000b1a:	428a      	cmp	r2, r1
 8000b1c:	4694      	mov	ip, r2
 8000b1e:	d969      	bls.n	8000bf4 <__udivmoddi4+0xe8>
 8000b20:	fab2 f282 	clz	r2, r2
 8000b24:	b152      	cbz	r2, 8000b3c <__udivmoddi4+0x30>
 8000b26:	fa01 f302 	lsl.w	r3, r1, r2
 8000b2a:	f1c2 0120 	rsb	r1, r2, #32
 8000b2e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b32:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b36:	ea41 0e03 	orr.w	lr, r1, r3
 8000b3a:	4094      	lsls	r4, r2
 8000b3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b40:	0c21      	lsrs	r1, r4, #16
 8000b42:	fbbe f6f8 	udiv	r6, lr, r8
 8000b46:	fa1f f78c 	uxth.w	r7, ip
 8000b4a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b4e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b52:	fb06 f107 	mul.w	r1, r6, r7
 8000b56:	4299      	cmp	r1, r3
 8000b58:	d90a      	bls.n	8000b70 <__udivmoddi4+0x64>
 8000b5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b5e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b62:	f080 811f 	bcs.w	8000da4 <__udivmoddi4+0x298>
 8000b66:	4299      	cmp	r1, r3
 8000b68:	f240 811c 	bls.w	8000da4 <__udivmoddi4+0x298>
 8000b6c:	3e02      	subs	r6, #2
 8000b6e:	4463      	add	r3, ip
 8000b70:	1a5b      	subs	r3, r3, r1
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b78:	fb08 3310 	mls	r3, r8, r0, r3
 8000b7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b80:	fb00 f707 	mul.w	r7, r0, r7
 8000b84:	42a7      	cmp	r7, r4
 8000b86:	d90a      	bls.n	8000b9e <__udivmoddi4+0x92>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b90:	f080 810a 	bcs.w	8000da8 <__udivmoddi4+0x29c>
 8000b94:	42a7      	cmp	r7, r4
 8000b96:	f240 8107 	bls.w	8000da8 <__udivmoddi4+0x29c>
 8000b9a:	4464      	add	r4, ip
 8000b9c:	3802      	subs	r0, #2
 8000b9e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ba2:	1be4      	subs	r4, r4, r7
 8000ba4:	2600      	movs	r6, #0
 8000ba6:	b11d      	cbz	r5, 8000bb0 <__udivmoddi4+0xa4>
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	2300      	movs	r3, #0
 8000bac:	e9c5 4300 	strd	r4, r3, [r5]
 8000bb0:	4631      	mov	r1, r6
 8000bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d909      	bls.n	8000bce <__udivmoddi4+0xc2>
 8000bba:	2d00      	cmp	r5, #0
 8000bbc:	f000 80ef 	beq.w	8000d9e <__udivmoddi4+0x292>
 8000bc0:	2600      	movs	r6, #0
 8000bc2:	e9c5 0100 	strd	r0, r1, [r5]
 8000bc6:	4630      	mov	r0, r6
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	fab3 f683 	clz	r6, r3
 8000bd2:	2e00      	cmp	r6, #0
 8000bd4:	d14a      	bne.n	8000c6c <__udivmoddi4+0x160>
 8000bd6:	428b      	cmp	r3, r1
 8000bd8:	d302      	bcc.n	8000be0 <__udivmoddi4+0xd4>
 8000bda:	4282      	cmp	r2, r0
 8000bdc:	f200 80f9 	bhi.w	8000dd2 <__udivmoddi4+0x2c6>
 8000be0:	1a84      	subs	r4, r0, r2
 8000be2:	eb61 0303 	sbc.w	r3, r1, r3
 8000be6:	2001      	movs	r0, #1
 8000be8:	469e      	mov	lr, r3
 8000bea:	2d00      	cmp	r5, #0
 8000bec:	d0e0      	beq.n	8000bb0 <__udivmoddi4+0xa4>
 8000bee:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bf2:	e7dd      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000bf4:	b902      	cbnz	r2, 8000bf8 <__udivmoddi4+0xec>
 8000bf6:	deff      	udf	#255	; 0xff
 8000bf8:	fab2 f282 	clz	r2, r2
 8000bfc:	2a00      	cmp	r2, #0
 8000bfe:	f040 8092 	bne.w	8000d26 <__udivmoddi4+0x21a>
 8000c02:	eba1 010c 	sub.w	r1, r1, ip
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f fe8c 	uxth.w	lr, ip
 8000c0e:	2601      	movs	r6, #1
 8000c10:	0c20      	lsrs	r0, r4, #16
 8000c12:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c16:	fb07 1113 	mls	r1, r7, r3, r1
 8000c1a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c1e:	fb0e f003 	mul.w	r0, lr, r3
 8000c22:	4288      	cmp	r0, r1
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x12c>
 8000c26:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c2e:	d202      	bcs.n	8000c36 <__udivmoddi4+0x12a>
 8000c30:	4288      	cmp	r0, r1
 8000c32:	f200 80cb 	bhi.w	8000dcc <__udivmoddi4+0x2c0>
 8000c36:	4643      	mov	r3, r8
 8000c38:	1a09      	subs	r1, r1, r0
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c40:	fb07 1110 	mls	r1, r7, r0, r1
 8000c44:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c48:	fb0e fe00 	mul.w	lr, lr, r0
 8000c4c:	45a6      	cmp	lr, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x156>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c58:	d202      	bcs.n	8000c60 <__udivmoddi4+0x154>
 8000c5a:	45a6      	cmp	lr, r4
 8000c5c:	f200 80bb 	bhi.w	8000dd6 <__udivmoddi4+0x2ca>
 8000c60:	4608      	mov	r0, r1
 8000c62:	eba4 040e 	sub.w	r4, r4, lr
 8000c66:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c6a:	e79c      	b.n	8000ba6 <__udivmoddi4+0x9a>
 8000c6c:	f1c6 0720 	rsb	r7, r6, #32
 8000c70:	40b3      	lsls	r3, r6
 8000c72:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c76:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c7a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c7e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c82:	431c      	orrs	r4, r3
 8000c84:	40f9      	lsrs	r1, r7
 8000c86:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c8a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c8e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c92:	0c20      	lsrs	r0, r4, #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fb09 1118 	mls	r1, r9, r8, r1
 8000c9c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ca0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ca4:	4288      	cmp	r0, r1
 8000ca6:	fa02 f206 	lsl.w	r2, r2, r6
 8000caa:	d90b      	bls.n	8000cc4 <__udivmoddi4+0x1b8>
 8000cac:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cb4:	f080 8088 	bcs.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cb8:	4288      	cmp	r0, r1
 8000cba:	f240 8085 	bls.w	8000dc8 <__udivmoddi4+0x2bc>
 8000cbe:	f1a8 0802 	sub.w	r8, r8, #2
 8000cc2:	4461      	add	r1, ip
 8000cc4:	1a09      	subs	r1, r1, r0
 8000cc6:	b2a4      	uxth	r4, r4
 8000cc8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ccc:	fb09 1110 	mls	r1, r9, r0, r1
 8000cd0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cd8:	458e      	cmp	lr, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x1e2>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ce4:	d26c      	bcs.n	8000dc0 <__udivmoddi4+0x2b4>
 8000ce6:	458e      	cmp	lr, r1
 8000ce8:	d96a      	bls.n	8000dc0 <__udivmoddi4+0x2b4>
 8000cea:	3802      	subs	r0, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cf2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cf6:	eba1 010e 	sub.w	r1, r1, lr
 8000cfa:	42a1      	cmp	r1, r4
 8000cfc:	46c8      	mov	r8, r9
 8000cfe:	46a6      	mov	lr, r4
 8000d00:	d356      	bcc.n	8000db0 <__udivmoddi4+0x2a4>
 8000d02:	d053      	beq.n	8000dac <__udivmoddi4+0x2a0>
 8000d04:	b15d      	cbz	r5, 8000d1e <__udivmoddi4+0x212>
 8000d06:	ebb3 0208 	subs.w	r2, r3, r8
 8000d0a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d0e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d12:	fa22 f306 	lsr.w	r3, r2, r6
 8000d16:	40f1      	lsrs	r1, r6
 8000d18:	431f      	orrs	r7, r3
 8000d1a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d1e:	2600      	movs	r6, #0
 8000d20:	4631      	mov	r1, r6
 8000d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d26:	f1c2 0320 	rsb	r3, r2, #32
 8000d2a:	40d8      	lsrs	r0, r3
 8000d2c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d30:	fa21 f303 	lsr.w	r3, r1, r3
 8000d34:	4091      	lsls	r1, r2
 8000d36:	4301      	orrs	r1, r0
 8000d38:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3c:	fa1f fe8c 	uxth.w	lr, ip
 8000d40:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d44:	fb07 3610 	mls	r6, r7, r0, r3
 8000d48:	0c0b      	lsrs	r3, r1, #16
 8000d4a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d4e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d52:	429e      	cmp	r6, r3
 8000d54:	fa04 f402 	lsl.w	r4, r4, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x260>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d62:	d22f      	bcs.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d64:	429e      	cmp	r6, r3
 8000d66:	d92d      	bls.n	8000dc4 <__udivmoddi4+0x2b8>
 8000d68:	3802      	subs	r0, #2
 8000d6a:	4463      	add	r3, ip
 8000d6c:	1b9b      	subs	r3, r3, r6
 8000d6e:	b289      	uxth	r1, r1
 8000d70:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d74:	fb07 3316 	mls	r3, r7, r6, r3
 8000d78:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d7c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d80:	428b      	cmp	r3, r1
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x28a>
 8000d84:	eb1c 0101 	adds.w	r1, ip, r1
 8000d88:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d8c:	d216      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d914      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d92:	3e02      	subs	r6, #2
 8000d94:	4461      	add	r1, ip
 8000d96:	1ac9      	subs	r1, r1, r3
 8000d98:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d9c:	e738      	b.n	8000c10 <__udivmoddi4+0x104>
 8000d9e:	462e      	mov	r6, r5
 8000da0:	4628      	mov	r0, r5
 8000da2:	e705      	b.n	8000bb0 <__udivmoddi4+0xa4>
 8000da4:	4606      	mov	r6, r0
 8000da6:	e6e3      	b.n	8000b70 <__udivmoddi4+0x64>
 8000da8:	4618      	mov	r0, r3
 8000daa:	e6f8      	b.n	8000b9e <__udivmoddi4+0x92>
 8000dac:	454b      	cmp	r3, r9
 8000dae:	d2a9      	bcs.n	8000d04 <__udivmoddi4+0x1f8>
 8000db0:	ebb9 0802 	subs.w	r8, r9, r2
 8000db4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000db8:	3801      	subs	r0, #1
 8000dba:	e7a3      	b.n	8000d04 <__udivmoddi4+0x1f8>
 8000dbc:	4646      	mov	r6, r8
 8000dbe:	e7ea      	b.n	8000d96 <__udivmoddi4+0x28a>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	e794      	b.n	8000cee <__udivmoddi4+0x1e2>
 8000dc4:	4640      	mov	r0, r8
 8000dc6:	e7d1      	b.n	8000d6c <__udivmoddi4+0x260>
 8000dc8:	46d0      	mov	r8, sl
 8000dca:	e77b      	b.n	8000cc4 <__udivmoddi4+0x1b8>
 8000dcc:	3b02      	subs	r3, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	e732      	b.n	8000c38 <__udivmoddi4+0x12c>
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	e709      	b.n	8000bea <__udivmoddi4+0xde>
 8000dd6:	4464      	add	r4, ip
 8000dd8:	3802      	subs	r0, #2
 8000dda:	e742      	b.n	8000c62 <__udivmoddi4+0x156>

08000ddc <__aeabi_idiv0>:
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop

08000de0 <HAL_TIM_PeriodElapsedCallback>:
uint8_t check_docking_temp;
uint8_t ready_flag;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a26      	ldr	r2, [pc, #152]	; (8000e88 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d10c      	bne.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  us_Tick++;
 8000df2:	4b26      	ldr	r3, [pc, #152]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	3301      	adds	r3, #1
 8000df8:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dfa:	6013      	str	r3, [r2, #0]
	  if(us_Tick>0xffff0000){us_Tick=0;}
 8000dfc:	4b23      	ldr	r3, [pc, #140]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e04:	d902      	bls.n	8000e0c <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM6)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a1f      	ldr	r2, [pc, #124]	; (8000e90 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d116      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x64>
  {
	  gTick++;
 8000e16:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	4a1d      	ldr	r2, [pc, #116]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e1e:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000e22:	6819      	ldr	r1, [r3, #0]
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000e26:	fba3 2301 	umull	r2, r3, r3, r1
 8000e2a:	08da      	lsrs	r2, r3, #3
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	4413      	add	r3, r2
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1aca      	subs	r2, r1, r3
 8000e36:	2a00      	cmp	r2, #0
 8000e38:	d104      	bne.n	8000e44 <HAL_TIM_PeriodElapsedCallback+0x64>
 8000e3a:	4b18      	ldr	r3, [pc, #96]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	4a16      	ldr	r2, [pc, #88]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000e42:	6013      	str	r3, [r2, #0]
  }
  if(htim->Instance == TIM7)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a15      	ldr	r2, [pc, #84]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d10c      	bne.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x88>
  {
	  USS_tick++;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	3301      	adds	r3, #1
 8000e54:	4a13      	ldr	r2, [pc, #76]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e56:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e60:	d902      	bls.n	8000e68 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000e62:	4b10      	ldr	r3, [pc, #64]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
  }
  if(htim->Instance == TIM9)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0e      	ldr	r2, [pc, #56]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d106      	bne.n	8000e80 <HAL_TIM_PeriodElapsedCallback+0xa0>
  {
	  HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 8000e72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e76:	480d      	ldr	r0, [pc, #52]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8000e78:	f004 f9e1 	bl	800523e <HAL_GPIO_TogglePin>
	  tick();
 8000e7c:	f000 fe94 	bl	8001ba8 <tick>

  }

}
 8000e80:	bf00      	nop
 8000e82:	3708      	adds	r7, #8
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40000c00 	.word	0x40000c00
 8000e8c:	20000090 	.word	0x20000090
 8000e90:	40001000 	.word	0x40001000
 8000e94:	20000094 	.word	0x20000094
 8000e98:	cccccccd 	.word	0xcccccccd
 8000e9c:	2000009c 	.word	0x2000009c
 8000ea0:	40001400 	.word	0x40001400
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	40014000 	.word	0x40014000
 8000eac:	40020400 	.word	0x40020400

08000eb0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	2b40      	cmp	r3, #64	; 0x40
 8000ebe:	d103      	bne.n	8000ec8 <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = us_Tick;
 8000ec0:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <HAL_GPIO_EXTI_Callback+0x24>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a04      	ldr	r2, [pc, #16]	; (8000ed8 <HAL_GPIO_EXTI_Callback+0x28>)
 8000ec6:	6013      	str	r3, [r2, #0]
    }
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	20000090 	.word	0x20000090
 8000ed8:	200000bc 	.word	0x200000bc

08000edc <startTTS>:


void startTTS()
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	1c5a      	adds	r2, r3, #1
 8000eea:	60fa      	str	r2, [r7, #12]
 8000eec:	3310      	adds	r3, #16
 8000eee:	443b      	add	r3, r7
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	1c5a      	adds	r2, r3, #1
 8000efa:	60fa      	str	r2, [r7, #12]
 8000efc:	3310      	adds	r3, #16
 8000efe:	443b      	add	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	1c5a      	adds	r2, r3, #1
 8000f0a:	60fa      	str	r2, [r7, #12]
 8000f0c:	3310      	adds	r3, #16
 8000f0e:	443b      	add	r3, r7
 8000f10:	2200      	movs	r2, #0
 8000f12:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	1c5a      	adds	r2, r3, #1
 8000f1a:	60fa      	str	r2, [r7, #12]
 8000f1c:	3310      	adds	r3, #16
 8000f1e:	443b      	add	r3, r7
 8000f20:	2200      	movs	r2, #0
 8000f22:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	60fa      	str	r2, [r7, #12]
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	443b      	add	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	60fa      	str	r2, [r7, #12]
 8000f3c:	3310      	adds	r3, #16
 8000f3e:	443b      	add	r3, r7
 8000f40:	2200      	movs	r2, #0
 8000f42:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	1c5a      	adds	r2, r3, #1
 8000f4a:	60fa      	str	r2, [r7, #12]
 8000f4c:	3310      	adds	r3, #16
 8000f4e:	443b      	add	r3, r7
 8000f50:	2201      	movs	r2, #1
 8000f52:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	1c5a      	adds	r2, r3, #1
 8000f5a:	60fa      	str	r2, [r7, #12]
 8000f5c:	3310      	adds	r3, #16
 8000f5e:	443b      	add	r3, r7
 8000f60:	2200      	movs	r2, #0
 8000f62:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8000f66:	1d39      	adds	r1, r7, #4
 8000f68:	2301      	movs	r3, #1
 8000f6a:	2208      	movs	r2, #8
 8000f6c:	f241 3089 	movw	r0, #5001	; 0x1389
 8000f70:	f001 f8c6 	bl	8002100 <sendCan>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <parsePmm>:

void parsePmm(uint8_t *msg)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3307      	adds	r3, #7
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <parsePmm+0x5c>)
 8000f8e:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3306      	adds	r3, #6
 8000f94:	781a      	ldrb	r2, [r3, #0]
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <parsePmm+0x60>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	09d2      	lsrs	r2, r2, #7
 8000f9c:	b2d2      	uxtb	r2, r2
 8000f9e:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3306      	adds	r3, #6
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	119b      	asrs	r3, r3, #6
 8000fa8:	b2da      	uxtb	r2, r3
 8000faa:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <parsePmm+0x60>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f002 0201 	and.w	r2, r2, #1
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3306      	adds	r3, #6
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	115b      	asrs	r3, r3, #5
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <parsePmm+0x60>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f002 0201 	and.w	r2, r2, #1
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	745a      	strb	r2, [r3, #17]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	200000dc 	.word	0x200000dc
 8000fdc:	200000d8 	.word	0x200000d8

08000fe0 <parseTop>:


void parseTop(uint8_t *msg)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	e012      	b.n	8001014 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	3307      	adds	r3, #7
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	fa42 f303 	asr.w	r3, r2, r3
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	b2d9      	uxtb	r1, r3
 8001004:	4a0a      	ldr	r2, [pc, #40]	; (8001030 <parseTop+0x50>)
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4413      	add	r3, r2
 800100a:	460a      	mov	r2, r1
 800100c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	3301      	adds	r3, #1
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b05      	cmp	r3, #5
 8001018:	dde9      	ble.n	8000fee <parseTop+0xe>
    touch = msg[6];
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	799a      	ldrb	r2, [r3, #6]
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <parseTop+0x54>)
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	200000d0 	.word	0x200000d0
 8001034:	200000cd 	.word	0x200000cd

08001038 <parseState>:


void parseState(uint8_t *msg)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3307      	adds	r3, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <parseState+0x78>)
 800104a:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3305      	adds	r3, #5
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	09db      	lsrs	r3, r3, #7
 8001054:	b2da      	uxtb	r2, r3
 8001056:	4b17      	ldr	r3, [pc, #92]	; (80010b4 <parseState+0x7c>)
 8001058:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3305      	adds	r3, #5
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	119b      	asrs	r3, r3, #6
 8001062:	b2db      	uxtb	r3, r3
 8001064:	f003 0301 	and.w	r3, r3, #1
 8001068:	b2da      	uxtb	r2, r3
 800106a:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <parseState+0x80>)
 800106c:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	3304      	adds	r3, #4
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	09db      	lsrs	r3, r3, #7
 8001076:	b2da      	uxtb	r2, r3
 8001078:	4b10      	ldr	r3, [pc, #64]	; (80010bc <parseState+0x84>)
 800107a:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3304      	adds	r3, #4
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	119b      	asrs	r3, r3, #6
 8001084:	b2db      	uxtb	r3, r3
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <parseState+0x88>)
 800108e:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3304      	adds	r3, #4
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	115b      	asrs	r3, r3, #5
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	4b08      	ldr	r3, [pc, #32]	; (80010c4 <parseState+0x8c>)
 80010a2:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	200000c4 	.word	0x200000c4
 80010b4:	200000c8 	.word	0x200000c8
 80010b8:	200000c9 	.word	0x200000c9
 80010bc:	200000ca 	.word	0x200000ca
 80010c0:	200000cb 	.word	0x200000cb
 80010c4:	200000cc 	.word	0x200000cc

080010c8 <controlMotor>:

void controlMotor()
{
 80010c8:	b598      	push	{r3, r4, r7, lr}
 80010ca:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <controlMotor+0xdc>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d060      	beq.n	8001196 <controlMotor+0xce>
    {
        if(motor_disable_flag)
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <controlMotor+0xe0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d004      	beq.n	80010e6 <controlMotor+0x1e>
        {
            enable();
 80010dc:	f002 f80e 	bl	80030fc <enable>
            motor_disable_flag = 0;
 80010e0:	4b31      	ldr	r3, [pc, #196]	; (80011a8 <controlMotor+0xe0>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 80010e6:	4b31      	ldr	r3, [pc, #196]	; (80011ac <controlMotor+0xe4>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d11e      	bne.n	800112c <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 80010ee:	4b30      	ldr	r3, [pc, #192]	; (80011b0 <controlMotor+0xe8>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f6:	4610      	mov	r0, r2
 80010f8:	4619      	mov	r1, r3
 80010fa:	f7ff fca7 	bl	8000a4c <__aeabi_d2iz>
 80010fe:	4603      	mov	r3, r0
 8001100:	b21c      	sxth	r4, r3
 8001102:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <controlMotor+0xe8>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800110a:	4610      	mov	r0, r2
 800110c:	4619      	mov	r1, r3
 800110e:	f7ff fc9d 	bl	8000a4c <__aeabi_d2iz>
 8001112:	4603      	mov	r3, r0
 8001114:	b21b      	sxth	r3, r3
 8001116:	4619      	mov	r1, r3
 8001118:	4620      	mov	r0, r4
 800111a:	f002 f98f 	bl	800343c <control>
            motor_break = 2;
 800111e:	4b23      	ldr	r3, [pc, #140]	; (80011ac <controlMotor+0xe4>)
 8001120:	2202      	movs	r2, #2
 8001122:	601a      	str	r2, [r3, #0]
            count = 0;
 8001124:	4b23      	ldr	r3, [pc, #140]	; (80011b4 <controlMotor+0xec>)
 8001126:	2200      	movs	r2, #0
 8001128:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 800112a:	e039      	b.n	80011a0 <controlMotor+0xd8>
        else if(motor_break == 2)
 800112c:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <controlMotor+0xe4>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d124      	bne.n	800117e <controlMotor+0xb6>
            count ++;
 8001134:	4b1f      	ldr	r3, [pc, #124]	; (80011b4 <controlMotor+0xec>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	3301      	adds	r3, #1
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <controlMotor+0xec>)
 800113c:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <controlMotor+0xe8>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fc7f 	bl	8000a4c <__aeabi_d2iz>
 800114e:	4603      	mov	r3, r0
 8001150:	b21c      	sxth	r4, r3
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <controlMotor+0xe8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800115a:	4610      	mov	r0, r2
 800115c:	4619      	mov	r1, r3
 800115e:	f7ff fc75 	bl	8000a4c <__aeabi_d2iz>
 8001162:	4603      	mov	r3, r0
 8001164:	b21b      	sxth	r3, r3
 8001166:	4619      	mov	r1, r3
 8001168:	4620      	mov	r0, r4
 800116a:	f002 f967 	bl	800343c <control>
            if(count == 20)
 800116e:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <controlMotor+0xec>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b14      	cmp	r3, #20
 8001174:	d114      	bne.n	80011a0 <controlMotor+0xd8>
                motor_break = 3;
 8001176:	4b0d      	ldr	r3, [pc, #52]	; (80011ac <controlMotor+0xe4>)
 8001178:	2203      	movs	r2, #3
 800117a:	601a      	str	r2, [r3, #0]
}
 800117c:	e010      	b.n	80011a0 <controlMotor+0xd8>
        else if(motor_break == 3)
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <controlMotor+0xe4>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b03      	cmp	r3, #3
 8001184:	d10c      	bne.n	80011a0 <controlMotor+0xd8>
            control(0,0);
 8001186:	2100      	movs	r1, #0
 8001188:	2000      	movs	r0, #0
 800118a:	f002 f957 	bl	800343c <control>
            count = 0;
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <controlMotor+0xec>)
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
}
 8001194:	e004      	b.n	80011a0 <controlMotor+0xd8>
        disable();
 8001196:	f002 f815 	bl	80031c4 <disable>
        motor_disable_flag = 1;
 800119a:	4b03      	ldr	r3, [pc, #12]	; (80011a8 <controlMotor+0xe0>)
 800119c:	2201      	movs	r2, #1
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	bd98      	pop	{r3, r4, r7, pc}
 80011a4:	20000000 	.word	0x20000000
 80011a8:	200000b4 	.word	0x200000b4
 80011ac:	200000b0 	.word	0x200000b0
 80011b0:	200000e8 	.word	0x200000e8
 80011b4:	200000ec 	.word	0x200000ec

080011b8 <toRPM>:


int toRPM()
{
 80011b8:	b5b0      	push	{r4, r5, r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 80011bc:	4b28      	ldr	r3, [pc, #160]	; (8001260 <toRPM+0xa8>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 80011c4:	4b26      	ldr	r3, [pc, #152]	; (8001260 <toRPM+0xa8>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 80011cc:	a320      	add	r3, pc, #128	; (adr r3, 8001250 <toRPM+0x98>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fa29 	bl	8000628 <__aeabi_dmul>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4620      	mov	r0, r4
 80011dc:	4629      	mov	r1, r5
 80011de:	f7ff f86d 	bl	80002bc <__adddf3>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4610      	mov	r0, r2
 80011e8:	4619      	mov	r1, r3
 80011ea:	4b1d      	ldr	r3, [pc, #116]	; (8001260 <toRPM+0xa8>)
 80011ec:	681c      	ldr	r4, [r3, #0]
 80011ee:	a31a      	add	r3, pc, #104	; (adr r3, 8001258 <toRPM+0xa0>)
 80011f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f4:	f7ff fa18 	bl	8000628 <__aeabi_dmul>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001200:	4b17      	ldr	r3, [pc, #92]	; (8001260 <toRPM+0xa8>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001208:	4b15      	ldr	r3, [pc, #84]	; (8001260 <toRPM+0xa8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001210:	a30f      	add	r3, pc, #60	; (adr r3, 8001250 <toRPM+0x98>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff fa07 	bl	8000628 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	4620      	mov	r0, r4
 8001220:	4629      	mov	r1, r5
 8001222:	f7ff f849 	bl	80002b8 <__aeabi_dsub>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <toRPM+0xa8>)
 8001230:	681c      	ldr	r4, [r3, #0]
 8001232:	a309      	add	r3, pc, #36	; (adr r3, 8001258 <toRPM+0xa0>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9f6 	bl	8000628 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 8001244:	2300      	movs	r3, #0
}
 8001246:	4618      	mov	r0, r3
 8001248:	bdb0      	pop	{r4, r5, r7, pc}
 800124a:	bf00      	nop
 800124c:	f3af 8000 	nop.w
 8001250:	0e560419 	.word	0x0e560419
 8001254:	3fcdb22d 	.word	0x3fcdb22d
 8001258:	31bcaa49 	.word	0x31bcaa49
 800125c:	40625d31 	.word	0x40625d31
 8001260:	200000e8 	.word	0x200000e8

08001264 <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 8001264:	b590      	push	{r4, r7, lr}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	b21a      	sxth	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	3301      	adds	r3, #1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	021b      	lsls	r3, r3, #8
 800127a:	b21b      	sxth	r3, r3
 800127c:	4313      	orrs	r3, r2
 800127e:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8001280:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f965 	bl	8000554 <__aeabi_i2d>
 800128a:	4b19      	ldr	r3, [pc, #100]	; (80012f0 <parseCmdvel+0x8c>)
 800128c:	681c      	ldr	r4, [r3, #0]
 800128e:	f04f 0200 	mov.w	r2, #0
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <parseCmdvel+0x90>)
 8001294:	f7ff faf2 	bl	800087c <__aeabi_ddiv>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3302      	adds	r3, #2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	b21a      	sxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3303      	adds	r3, #3
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	021b      	lsls	r3, r3, #8
 80012b0:	b21b      	sxth	r3, r3
 80012b2:	4313      	orrs	r3, r2
 80012b4:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 80012b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f94a 	bl	8000554 <__aeabi_i2d>
 80012c0:	4b0b      	ldr	r3, [pc, #44]	; (80012f0 <parseCmdvel+0x8c>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	f04f 0200 	mov.w	r2, #0
 80012c8:	4b0a      	ldr	r3, [pc, #40]	; (80012f4 <parseCmdvel+0x90>)
 80012ca:	f7ff fad7 	bl	800087c <__aeabi_ddiv>
 80012ce:	4602      	mov	r2, r0
 80012d0:	460b      	mov	r3, r1
 80012d2:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	791a      	ldrb	r2, [r3, #4]
 80012da:	4b07      	ldr	r3, [pc, #28]	; (80012f8 <parseCmdvel+0x94>)
 80012dc:	701a      	strb	r2, [r3, #0]
    toRPM();
 80012de:	f7ff ff6b 	bl	80011b8 <toRPM>
    motor_break = 1;
 80012e2:	4b06      	ldr	r3, [pc, #24]	; (80012fc <parseCmdvel+0x98>)
 80012e4:	2201      	movs	r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
}
 80012e8:	bf00      	nop
 80012ea:	3714      	adds	r7, #20
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd90      	pop	{r4, r7, pc}
 80012f0:	200000e8 	.word	0x200000e8
 80012f4:	40590000 	.word	0x40590000
 80012f8:	20000000 	.word	0x20000000
 80012fc:	200000b0 	.word	0x200000b0

08001300 <sendEnc>:



void sendEnc(int id)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 800130c:	4b5f      	ldr	r3, [pc, #380]	; (800148c <sendEnc+0x18c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b5d      	ldr	r3, [pc, #372]	; (8001490 <sendEnc+0x190>)
 800131a:	f7ff f985 	bl	8000628 <__aeabi_dmul>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4610      	mov	r0, r2
 8001324:	4619      	mov	r1, r3
 8001326:	f7ff fb91 	bl	8000a4c <__aeabi_d2iz>
 800132a:	4603      	mov	r3, r0
 800132c:	b219      	sxth	r1, r3
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	1c5a      	adds	r2, r3, #1
 8001332:	617a      	str	r2, [r7, #20]
 8001334:	b2ca      	uxtb	r2, r1
 8001336:	3318      	adds	r3, #24
 8001338:	443b      	add	r3, r7
 800133a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800133e:	4b53      	ldr	r3, [pc, #332]	; (800148c <sendEnc+0x18c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001346:	f04f 0200 	mov.w	r2, #0
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <sendEnc+0x190>)
 800134c:	f7ff f96c 	bl	8000628 <__aeabi_dmul>
 8001350:	4602      	mov	r2, r0
 8001352:	460b      	mov	r3, r1
 8001354:	4610      	mov	r0, r2
 8001356:	4619      	mov	r1, r3
 8001358:	f7ff fb78 	bl	8000a4c <__aeabi_d2iz>
 800135c:	4603      	mov	r3, r0
 800135e:	b21b      	sxth	r3, r3
 8001360:	121b      	asrs	r3, r3, #8
 8001362:	b219      	sxth	r1, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	1c5a      	adds	r2, r3, #1
 8001368:	617a      	str	r2, [r7, #20]
 800136a:	b2ca      	uxtb	r2, r1
 800136c:	3318      	adds	r3, #24
 800136e:	443b      	add	r3, r7
 8001370:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 8001374:	4b45      	ldr	r3, [pc, #276]	; (800148c <sendEnc+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b43      	ldr	r3, [pc, #268]	; (8001490 <sendEnc+0x190>)
 8001382:	f7ff f951 	bl	8000628 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	f7ff fb5d 	bl	8000a4c <__aeabi_d2iz>
 8001392:	4603      	mov	r3, r0
 8001394:	b219      	sxth	r1, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	617a      	str	r2, [r7, #20]
 800139c:	b2ca      	uxtb	r2, r1
 800139e:	3318      	adds	r3, #24
 80013a0:	443b      	add	r3, r7
 80013a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <sendEnc+0x18c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	4b37      	ldr	r3, [pc, #220]	; (8001490 <sendEnc+0x190>)
 80013b4:	f7ff f938 	bl	8000628 <__aeabi_dmul>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4610      	mov	r0, r2
 80013be:	4619      	mov	r1, r3
 80013c0:	f7ff fb44 	bl	8000a4c <__aeabi_d2iz>
 80013c4:	4603      	mov	r3, r0
 80013c6:	b21b      	sxth	r3, r3
 80013c8:	121b      	asrs	r3, r3, #8
 80013ca:	b219      	sxth	r1, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	1c5a      	adds	r2, r3, #1
 80013d0:	617a      	str	r2, [r7, #20]
 80013d2:	b2ca      	uxtb	r2, r1
 80013d4:	3318      	adds	r3, #24
 80013d6:	443b      	add	r3, r7
 80013d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <sendEnc+0x194>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	7c1b      	ldrb	r3, [r3, #16]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	b25a      	sxtb	r2, r3
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <sendEnc+0x194>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7bdb      	ldrb	r3, [r3, #15]
 80013ec:	b25b      	sxtb	r3, r3
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b259      	sxtb	r1, r3
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	1c5a      	adds	r2, r3, #1
 80013f6:	617a      	str	r2, [r7, #20]
 80013f8:	b2ca      	uxtb	r2, r1
 80013fa:	3318      	adds	r3, #24
 80013fc:	443b      	add	r3, r7
 80013fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <sendEnc+0x18c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <sendEnc+0x190>)
 8001410:	f7ff f90a 	bl	8000628 <__aeabi_dmul>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	697c      	ldr	r4, [r7, #20]
 800141e:	1c63      	adds	r3, r4, #1
 8001420:	617b      	str	r3, [r7, #20]
 8001422:	f7ff fb3b 	bl	8000a9c <__aeabi_d2uiz>
 8001426:	4603      	mov	r3, r0
 8001428:	b2da      	uxtb	r2, r3
 800142a:	f104 0318 	add.w	r3, r4, #24
 800142e:	443b      	add	r3, r7
 8001430:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <sendEnc+0x18c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800143c:	f04f 0200 	mov.w	r2, #0
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <sendEnc+0x190>)
 8001442:	f7ff f8f1 	bl	8000628 <__aeabi_dmul>
 8001446:	4602      	mov	r2, r0
 8001448:	460b      	mov	r3, r1
 800144a:	4610      	mov	r0, r2
 800144c:	4619      	mov	r1, r3
 800144e:	697c      	ldr	r4, [r7, #20]
 8001450:	1c63      	adds	r3, r4, #1
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	f7ff fb22 	bl	8000a9c <__aeabi_d2uiz>
 8001458:	4603      	mov	r3, r0
 800145a:	b2da      	uxtb	r2, r3
 800145c:	f104 0318 	add.w	r3, r4, #24
 8001460:	443b      	add	r3, r7
 8001462:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	1c5a      	adds	r2, r3, #1
 800146a:	617a      	str	r2, [r7, #20]
 800146c:	3318      	adds	r3, #24
 800146e:	443b      	add	r3, r7
 8001470:	2200      	movs	r2, #0
 8001472:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f107 010c 	add.w	r1, r7, #12
 800147c:	2301      	movs	r3, #1
 800147e:	2208      	movs	r2, #8
 8001480:	f000 fe3e 	bl	8002100 <sendCan>
}
 8001484:	bf00      	nop
 8001486:	371c      	adds	r7, #28
 8001488:	46bd      	mov	sp, r7
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	200000e8 	.word	0x200000e8
 8001490:	40590000 	.word	0x40590000
 8001494:	200000d8 	.word	0x200000d8

08001498 <toVW>:


int toVW(void)
{
 8001498:	b598      	push	{r3, r4, r7, lr}
 800149a:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 800149c:	4b2c      	ldr	r3, [pc, #176]	; (8001550 <toVW+0xb8>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80014a4:	4a2a      	ldr	r2, [pc, #168]	; (8001550 <toVW+0xb8>)
 80014a6:	6814      	ldr	r4, [r2, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff f853 	bl	8000554 <__aeabi_i2d>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 80014b6:	4b26      	ldr	r3, [pc, #152]	; (8001550 <toVW+0xb8>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80014be:	4a24      	ldr	r2, [pc, #144]	; (8001550 <toVW+0xb8>)
 80014c0:	6814      	ldr	r4, [r2, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff f846 	bl	8000554 <__aeabi_i2d>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 80014d0:	4b1f      	ldr	r3, [pc, #124]	; (8001550 <toVW+0xb8>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <toVW+0xb8>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80014e0:	f7fe feec 	bl	80002bc <__adddf3>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b18      	ldr	r3, [pc, #96]	; (8001550 <toVW+0xb8>)
 80014ee:	681c      	ldr	r4, [r3, #0]
 80014f0:	a313      	add	r3, pc, #76	; (adr r3, 8001540 <toVW+0xa8>)
 80014f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f6:	f7ff f897 	bl	8000628 <__aeabi_dmul>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 8001502:	4b13      	ldr	r3, [pc, #76]	; (8001550 <toVW+0xb8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800150a:	4b11      	ldr	r3, [pc, #68]	; (8001550 <toVW+0xb8>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001512:	f7fe fed1 	bl	80002b8 <__aeabi_dsub>
 8001516:	4602      	mov	r2, r0
 8001518:	460b      	mov	r3, r1
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	4b0c      	ldr	r3, [pc, #48]	; (8001550 <toVW+0xb8>)
 8001520:	681c      	ldr	r4, [r3, #0]
 8001522:	a309      	add	r3, pc, #36	; (adr r3, 8001548 <toVW+0xb0>)
 8001524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001528:	f7ff f87e 	bl	8000628 <__aeabi_dmul>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	bd98      	pop	{r3, r4, r7, pc}
 800153a:	bf00      	nop
 800153c:	f3af 8000 	nop.w
 8001540:	306c65e9 	.word	0x306c65e9
 8001544:	3f6be16e 	.word	0x3f6be16e
 8001548:	5313b470 	.word	0x5313b470
 800154c:	3f8e0b32 	.word	0x3f8e0b32
 8001550:	200000e8 	.word	0x200000e8

08001554 <parseEnc>:


void parseEnc(uint8_t *msg)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2bd8      	cmp	r3, #216	; 0xd8
 8001562:	d136      	bne.n	80015d2 <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3302      	adds	r3, #2
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	b219      	sxth	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3303      	adds	r3, #3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	021b      	lsls	r3, r3, #8
 8001574:	b21a      	sxth	r2, r3
 8001576:	4b34      	ldr	r3, [pc, #208]	; (8001648 <parseEnc+0xf4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	b212      	sxth	r2, r2
 800157e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	3305      	adds	r3, #5
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	b219      	sxth	r1, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	3306      	adds	r3, #6
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	021b      	lsls	r3, r3, #8
 8001592:	b21a      	sxth	r2, r3
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <parseEnc+0xf4>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	430a      	orrs	r2, r1
 800159a:	b212      	sxth	r2, r2
 800159c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 80015a0:	4b29      	ldr	r3, [pc, #164]	; (8001648 <parseEnc+0xf4>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	425b      	negs	r3, r3
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <parseEnc+0xf4>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b212      	sxth	r2, r2
 80015b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <parseEnc+0xf8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	7852      	ldrb	r2, [r2, #1]
 80015c0:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 80015c2:	4b22      	ldr	r3, [pc, #136]	; (800164c <parseEnc+0xf8>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	7912      	ldrb	r2, [r2, #4]
 80015ca:	741a      	strb	r2, [r3, #16]

        toVW();
 80015cc:	f7ff ff64 	bl	8001498 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 80015d0:	e036      	b.n	8001640 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	781b      	ldrb	r3, [r3, #0]
 80015d6:	2bc1      	cmp	r3, #193	; 0xc1
 80015d8:	d117      	bne.n	800160a <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	3304      	adds	r3, #4
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	3305      	adds	r3, #5
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	021b      	lsls	r3, r3, #8
 80015ea:	4313      	orrs	r3, r2
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ffb1 	bl	8000554 <__aeabi_i2d>
 80015f2:	4b15      	ldr	r3, [pc, #84]	; (8001648 <parseEnc+0xf4>)
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <parseEnc+0xfc>)
 80015fc:	f7ff f93e 	bl	800087c <__aeabi_ddiv>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8001608:	e01a      	b.n	8001640 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2bc8      	cmp	r3, #200	; 0xc8
 8001610:	d116      	bne.n	8001640 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	3304      	adds	r3, #4
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	461a      	mov	r2, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	3305      	adds	r3, #5
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	4313      	orrs	r3, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f7fe ff95 	bl	8000554 <__aeabi_i2d>
 800162a:	4b07      	ldr	r3, [pc, #28]	; (8001648 <parseEnc+0xf4>)
 800162c:	681c      	ldr	r4, [r3, #0]
 800162e:	f04f 0200 	mov.w	r2, #0
 8001632:	4b07      	ldr	r3, [pc, #28]	; (8001650 <parseEnc+0xfc>)
 8001634:	f7ff f922 	bl	800087c <__aeabi_ddiv>
 8001638:	4602      	mov	r2, r0
 800163a:	460b      	mov	r3, r1
 800163c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8001640:	bf00      	nop
 8001642:	370c      	adds	r7, #12
 8001644:	46bd      	mov	sp, r7
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	200000e8 	.word	0x200000e8
 800164c:	200000d8 	.word	0x200000d8
 8001650:	40240000 	.word	0x40240000

08001654 <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	3304      	adds	r3, #4
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b21a      	sxth	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3305      	adds	r3, #5
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	b21b      	sxth	r3, r3
 800166e:	4313      	orrs	r3, r2
 8001670:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	3306      	adds	r3, #6
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	b21a      	sxth	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	3307      	adds	r3, #7
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	021b      	lsls	r3, r3, #8
 8001682:	b21b      	sxth	r3, r3
 8001684:	4313      	orrs	r3, r2
 8001686:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 8001688:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168c:	425b      	negs	r3, r3
 800168e:	4618      	mov	r0, r3
 8001690:	f7fe ff60 	bl	8000554 <__aeabi_i2d>
 8001694:	f04f 0200 	mov.w	r2, #0
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <parseEnc114+0x9c>)
 800169a:	f7ff f8ef 	bl	800087c <__aeabi_ddiv>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4914      	ldr	r1, [pc, #80]	; (80016f4 <parseEnc114+0xa0>)
 80016a4:	680c      	ldr	r4, [r1, #0]
 80016a6:	4610      	mov	r0, r2
 80016a8:	4619      	mov	r1, r3
 80016aa:	f7ff f9cf 	bl	8000a4c <__aeabi_d2iz>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b21b      	sxth	r3, r3
 80016b2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 80016b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016ba:	4618      	mov	r0, r3
 80016bc:	f7fe ff4a 	bl	8000554 <__aeabi_i2d>
 80016c0:	f04f 0200 	mov.w	r2, #0
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <parseEnc114+0x9c>)
 80016c6:	f7ff f8d9 	bl	800087c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	4909      	ldr	r1, [pc, #36]	; (80016f4 <parseEnc114+0xa0>)
 80016d0:	680c      	ldr	r4, [r1, #0]
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	f7ff f9b9 	bl	8000a4c <__aeabi_d2iz>
 80016da:	4603      	mov	r3, r0
 80016dc:	b21b      	sxth	r3, r3
 80016de:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 80016e2:	f7ff fed9 	bl	8001498 <toVW>
}
 80016e6:	bf00      	nop
 80016e8:	3714      	adds	r7, #20
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd90      	pop	{r4, r7, pc}
 80016ee:	bf00      	nop
 80016f0:	40240000 	.word	0x40240000
 80016f4:	200000e8 	.word	0x200000e8

080016f8 <parseState114>:

void parseState114(uint8_t *msg)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b082      	sub	sp, #8
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3304      	adds	r3, #4
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	b25a      	sxtb	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3305      	adds	r3, #5
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	021b      	lsls	r3, r3, #8
 8001710:	b25b      	sxtb	r3, r3
 8001712:	4313      	orrs	r3, r2
 8001714:	b25a      	sxtb	r2, r3
 8001716:	4b12      	ldr	r3, [pc, #72]	; (8001760 <parseState114+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	3306      	adds	r3, #6
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b25a      	sxtb	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3307      	adds	r3, #7
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	b25b      	sxtb	r3, r3
 8001730:	4313      	orrs	r3, r2
 8001732:	b25a      	sxtb	r2, r3
 8001734:	4b0a      	ldr	r3, [pc, #40]	; (8001760 <parseState114+0x68>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	b2d2      	uxtb	r2, r2
 800173a:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <parseState114+0x68>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	7bdb      	ldrb	r3, [r3, #15]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d104      	bne.n	8001750 <parseState114+0x58>
 8001746:	4b06      	ldr	r3, [pc, #24]	; (8001760 <parseState114+0x68>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	7c1b      	ldrb	r3, [r3, #16]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d003      	beq.n	8001758 <parseState114+0x60>
    {
        reset();
 8001750:	f001 fd8a 	bl	8003268 <reset>
        startMotor();
 8001754:	f001 fcc8 	bl	80030e8 <startMotor>
    }
}
 8001758:	bf00      	nop
 800175a:	3708      	adds	r7, #8
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	200000d8 	.word	0x200000d8

08001764 <spinonce>:

void spinonce(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 800176a:	4aa9      	ldr	r2, [pc, #676]	; (8001a10 <spinonce+0x2ac>)
 800176c:	f107 0310 	add.w	r3, r7, #16
 8001770:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001774:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8001778:	2300      	movs	r3, #0
 800177a:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t CanId = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	623b      	str	r3, [r7, #32]

    uint8_t robot_standby[4] = {0xCA, 0x35, 0x9A, 0x65};//RsTb
 8001780:	4ba4      	ldr	r3, [pc, #656]	; (8001a14 <spinonce+0x2b0>)
 8001782:	607b      	str	r3, [r7, #4]


	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 8001784:	2100      	movs	r1, #0
 8001786:	2000      	movs	r0, #0
 8001788:	f000 fc6e 	bl	8002068 <CanInit>


    HAL_Delay(10000);
 800178c:	f242 7010 	movw	r0, #10000	; 0x2710
 8001790:	f002 fb30 	bl	8003df4 <HAL_Delay>

    startTTS();
 8001794:	f7ff fba2 	bl	8000edc <startTTS>
    //state->set(IDLE);
    ready_flag = 1;
 8001798:	4b9f      	ldr	r3, [pc, #636]	; (8001a18 <spinonce+0x2b4>)
 800179a:	2201      	movs	r2, #1
 800179c:	701a      	strb	r2, [r3, #0]
    start_docking_flag = 0;
 800179e:	4b9f      	ldr	r3, [pc, #636]	; (8001a1c <spinonce+0x2b8>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 80017a4:	4b9e      	ldr	r3, [pc, #632]	; (8001a20 <spinonce+0x2bc>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	601a      	str	r2, [r3, #0]

    settingMotor();
 80017aa:	f001 ff79 	bl	80036a0 <settingMotor>
    startMotor();
 80017ae:	f001 fc9b 	bl	80030e8 <startMotor>

    void TransmitterIR_init();

    //htim2.Instance->CCR1 = 0;

    Format format = NEC;
 80017b2:	2301      	movs	r3, #1
 80017b4:	76fb      	strb	r3, [r7, #27]

    setData(format, robot_standby, 32);
 80017b6:	1d39      	adds	r1, r7, #4
 80017b8:	7efb      	ldrb	r3, [r7, #27]
 80017ba:	2220      	movs	r2, #32
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 f993 	bl	8001ae8 <setData>

	while(1)
	{

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80017c2:	4b98      	ldr	r3, [pc, #608]	; (8001a24 <spinonce+0x2c0>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	1d5a      	adds	r2, r3, #5
 80017c8:	4b97      	ldr	r3, [pc, #604]	; (8001a28 <spinonce+0x2c4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d208      	bcs.n	80017e2 <spinonce+0x7e>
    		toggle_seq = Tick_100ms;
 80017d0:	4b95      	ldr	r3, [pc, #596]	; (8001a28 <spinonce+0x2c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a93      	ldr	r2, [pc, #588]	; (8001a24 <spinonce+0x2c0>)
 80017d6:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 80017d8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80017dc:	4893      	ldr	r0, [pc, #588]	; (8001a2c <spinonce+0x2c8>)
 80017de:	f003 fd2e 	bl	800523e <HAL_GPIO_TogglePin>

    	}


    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 80017e2:	4b93      	ldr	r3, [pc, #588]	; (8001a30 <spinonce+0x2cc>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	1d1a      	adds	r2, r3, #4
 80017e8:	4b92      	ldr	r3, [pc, #584]	; (8001a34 <spinonce+0x2d0>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d209      	bcs.n	8001804 <spinonce+0xa0>
    		controlmotor_seq = gTick;
 80017f0:	4b90      	ldr	r3, [pc, #576]	; (8001a34 <spinonce+0x2d0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a8e      	ldr	r2, [pc, #568]	; (8001a30 <spinonce+0x2cc>)
 80017f6:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 80017f8:	f7ff fc66 	bl	80010c8 <controlMotor>
            sendEnc(CANID3);
 80017fc:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8001800:	f7ff fd7e 	bl	8001300 <sendEnc>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 8001804:	4b8c      	ldr	r3, [pc, #560]	; (8001a38 <spinonce+0x2d4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	1cda      	adds	r2, r3, #3
 800180a:	4b8a      	ldr	r3, [pc, #552]	; (8001a34 <spinonce+0x2d0>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	429a      	cmp	r2, r3
 8001810:	d20e      	bcs.n	8001830 <spinonce+0xcc>
    		reqmotor_seq = gTick;
 8001812:	4b88      	ldr	r3, [pc, #544]	; (8001a34 <spinonce+0x2d0>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a88      	ldr	r2, [pc, #544]	; (8001a38 <spinonce+0x2d4>)
 8001818:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 800181a:	4b87      	ldr	r3, [pc, #540]	; (8001a38 <spinonce+0x2d4>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	2b00      	cmp	r3, #0
 8001824:	d102      	bne.n	800182c <spinonce+0xc8>
 8001826:	f001 fd6f 	bl	8003308 <reqEnc>
 800182a:	e001      	b.n	8001830 <spinonce+0xcc>
    		else{reqState();}
 800182c:	f001 fdb9 	bl	80033a2 <reqState>
    	}



		if((Tick_100ms>sendsensor_seq)){
 8001830:	4b7d      	ldr	r3, [pc, #500]	; (8001a28 <spinonce+0x2c4>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	4b81      	ldr	r3, [pc, #516]	; (8001a3c <spinonce+0x2d8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	429a      	cmp	r2, r3
 800183a:	d977      	bls.n	800192c <spinonce+0x1c8>
			sendsensor_seq = Tick_100ms;
 800183c:	4b7a      	ldr	r3, [pc, #488]	; (8001a28 <spinonce+0x2c4>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a7e      	ldr	r2, [pc, #504]	; (8001a3c <spinonce+0x2d8>)
 8001842:	6013      	str	r3, [r2, #0]
			setData(format, robot_standby, 32);
 8001844:	1d39      	adds	r1, r7, #4
 8001846:	7efb      	ldrb	r3, [r7, #27]
 8001848:	2220      	movs	r2, #32
 800184a:	4618      	mov	r0, r3
 800184c:	f000 f94c 	bl	8001ae8 <setData>
			//printf("hihi: %d\n", USS_tick);

			/////////must need USS of fine Tuning/////////
			USS_start = us_Tick;
 8001850:	4b7b      	ldr	r3, [pc, #492]	; (8001a40 <spinonce+0x2dc>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a7b      	ldr	r2, [pc, #492]	; (8001a44 <spinonce+0x2e0>)
 8001856:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, SET);
 8001858:	2201      	movs	r2, #1
 800185a:	2120      	movs	r1, #32
 800185c:	487a      	ldr	r0, [pc, #488]	; (8001a48 <spinonce+0x2e4>)
 800185e:	f003 fcd5 	bl	800520c <HAL_GPIO_WritePin>
			pre_usTick = us_Tick;
 8001862:	4b77      	ldr	r3, [pc, #476]	; (8001a40 <spinonce+0x2dc>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a79      	ldr	r2, [pc, #484]	; (8001a4c <spinonce+0x2e8>)
 8001868:	6013      	str	r3, [r2, #0]
			while(us_Tick == pre_usTick){;}//wait 500us
 800186a:	bf00      	nop
 800186c:	4b74      	ldr	r3, [pc, #464]	; (8001a40 <spinonce+0x2dc>)
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	4b76      	ldr	r3, [pc, #472]	; (8001a4c <spinonce+0x2e8>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d0f9      	beq.n	800186c <spinonce+0x108>
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);
 8001878:	2200      	movs	r2, #0
 800187a:	2120      	movs	r1, #32
 800187c:	4872      	ldr	r0, [pc, #456]	; (8001a48 <spinonce+0x2e4>)
 800187e:	f003 fcc5 	bl	800520c <HAL_GPIO_WritePin>


			printf("sonic value start, end, diff: %d  %d  %d\n", USS_start, USS_end, (USS_end-USS_start));
 8001882:	4b70      	ldr	r3, [pc, #448]	; (8001a44 <spinonce+0x2e0>)
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	4b72      	ldr	r3, [pc, #456]	; (8001a50 <spinonce+0x2ec>)
 8001888:	6818      	ldr	r0, [r3, #0]
 800188a:	4b71      	ldr	r3, [pc, #452]	; (8001a50 <spinonce+0x2ec>)
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	4b6d      	ldr	r3, [pc, #436]	; (8001a44 <spinonce+0x2e0>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	1ad3      	subs	r3, r2, r3
 8001894:	4602      	mov	r2, r0
 8001896:	486f      	ldr	r0, [pc, #444]	; (8001a54 <spinonce+0x2f0>)
 8001898:	f007 f8e4 	bl	8008a64 <iprintf>
			//////////////////////////////////////////////

			buf[index++] = 0;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	1c5a      	adds	r2, r3, #1
 80018a0:	627a      	str	r2, [r7, #36]	; 0x24
 80018a2:	3328      	adds	r3, #40	; 0x28
 80018a4:	443b      	add	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	1c5a      	adds	r2, r3, #1
 80018b0:	627a      	str	r2, [r7, #36]	; 0x24
 80018b2:	3328      	adds	r3, #40	; 0x28
 80018b4:	443b      	add	r3, r7
 80018b6:	2200      	movs	r2, #0
 80018b8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018be:	1c5a      	adds	r2, r3, #1
 80018c0:	627a      	str	r2, [r7, #36]	; 0x24
 80018c2:	3328      	adds	r3, #40	; 0x28
 80018c4:	443b      	add	r3, r7
 80018c6:	2200      	movs	r2, #0
 80018c8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	1c5a      	adds	r2, r3, #1
 80018d0:	627a      	str	r2, [r7, #36]	; 0x24
 80018d2:	3328      	adds	r3, #40	; 0x28
 80018d4:	443b      	add	r3, r7
 80018d6:	2200      	movs	r2, #0
 80018d8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018de:	1c5a      	adds	r2, r3, #1
 80018e0:	627a      	str	r2, [r7, #36]	; 0x24
 80018e2:	3328      	adds	r3, #40	; 0x28
 80018e4:	443b      	add	r3, r7
 80018e6:	2200      	movs	r2, #0
 80018e8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ee:	1c5a      	adds	r2, r3, #1
 80018f0:	627a      	str	r2, [r7, #36]	; 0x24
 80018f2:	3328      	adds	r3, #40	; 0x28
 80018f4:	443b      	add	r3, r7
 80018f6:	2200      	movs	r2, #0
 80018f8:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index++] = 0;
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	627a      	str	r2, [r7, #36]	; 0x24
 8001902:	3328      	adds	r3, #40	; 0x28
 8001904:	443b      	add	r3, r7
 8001906:	2200      	movs	r2, #0
 8001908:	f803 2c20 	strb.w	r2, [r3, #-32]
			buf[index] = 0;
 800190c:	f107 0208 	add.w	r2, r7, #8
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	4413      	add	r3, r2
 8001914:	2200      	movs	r2, #0
 8001916:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 8001918:	f107 0108 	add.w	r1, r7, #8
 800191c:	2301      	movs	r3, #1
 800191e:	2208      	movs	r2, #8
 8001920:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8001924:	f000 fbec 	bl	8002100 <sendCan>
			index = 0;
 8001928:	2300      	movs	r3, #0
 800192a:	627b      	str	r3, [r7, #36]	; 0x24


		}
		if(FLAG_RxCplt){
 800192c:	4b4a      	ldr	r3, [pc, #296]	; (8001a58 <spinonce+0x2f4>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	f43f af46 	beq.w	80017c2 <spinonce+0x5e>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001936:	2300      	movs	r3, #0
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	e00c      	b.n	8001956 <spinonce+0x1f2>
 800193c:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <spinonce+0x2f8>)
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	4413      	add	r3, r2
 8001942:	7819      	ldrb	r1, [r3, #0]
 8001944:	f107 0210 	add.w	r2, r7, #16
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	4413      	add	r3, r2
 800194c:	460a      	mov	r2, r1
 800194e:	701a      	strb	r2, [r3, #0]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	3301      	adds	r3, #1
 8001954:	61fb      	str	r3, [r7, #28]
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	2b07      	cmp	r3, #7
 800195a:	ddef      	ble.n	800193c <spinonce+0x1d8>
    		FLAG_RxCplt=0;
 800195c:	4b3e      	ldr	r3, [pc, #248]	; (8001a58 <spinonce+0x2f4>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8001962:	4b3f      	ldr	r3, [pc, #252]	; (8001a60 <spinonce+0x2fc>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b3e      	ldr	r3, [pc, #248]	; (8001a60 <spinonce+0x2fc>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	429a      	cmp	r2, r3
 800196c:	d903      	bls.n	8001976 <spinonce+0x212>
 800196e:	4b3c      	ldr	r3, [pc, #240]	; (8001a60 <spinonce+0x2fc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	623b      	str	r3, [r7, #32]
 8001974:	e002      	b.n	800197c <spinonce+0x218>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8001976:	4b3a      	ldr	r3, [pc, #232]	; (8001a60 <spinonce+0x2fc>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	623b      	str	r3, [r7, #32]

			if(ready_flag)
 800197c:	4b26      	ldr	r3, [pc, #152]	; (8001a18 <spinonce+0x2b4>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 80a3 	beq.w	8001acc <spinonce+0x368>
			{
				switch(CanId)
 8001986:	6a3b      	ldr	r3, [r7, #32]
 8001988:	4a36      	ldr	r2, [pc, #216]	; (8001a64 <spinonce+0x300>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d07e      	beq.n	8001a8c <spinonce+0x328>
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	4a34      	ldr	r2, [pc, #208]	; (8001a64 <spinonce+0x300>)
 8001992:	4293      	cmp	r3, r2
 8001994:	f200 809d 	bhi.w	8001ad2 <spinonce+0x36e>
 8001998:	6a3b      	ldr	r3, [r7, #32]
 800199a:	f640 72a1 	movw	r2, #4001	; 0xfa1
 800199e:	4293      	cmp	r3, r2
 80019a0:	d06e      	beq.n	8001a80 <spinonce+0x31c>
 80019a2:	6a3b      	ldr	r3, [r7, #32]
 80019a4:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80019a8:	4293      	cmp	r3, r2
 80019aa:	f200 8092 	bhi.w	8001ad2 <spinonce+0x36e>
 80019ae:	6a3b      	ldr	r3, [r7, #32]
 80019b0:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d05d      	beq.n	8001a74 <spinonce+0x310>
 80019b8:	6a3b      	ldr	r3, [r7, #32]
 80019ba:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80019be:	4293      	cmp	r3, r2
 80019c0:	f200 8087 	bhi.w	8001ad2 <spinonce+0x36e>
 80019c4:	6a3b      	ldr	r3, [r7, #32]
 80019c6:	f240 7201 	movw	r2, #1793	; 0x701
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d07b      	beq.n	8001ac6 <spinonce+0x362>
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	f240 7201 	movw	r2, #1793	; 0x701
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d87c      	bhi.n	8001ad2 <spinonce+0x36e>
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f240 5281 	movw	r2, #1409	; 0x581
 80019de:	4293      	cmp	r3, r2
 80019e0:	d05a      	beq.n	8001a98 <spinonce+0x334>
 80019e2:	6a3b      	ldr	r3, [r7, #32]
 80019e4:	f240 5281 	movw	r2, #1409	; 0x581
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d872      	bhi.n	8001ad2 <spinonce+0x36e>
 80019ec:	6a3b      	ldr	r3, [r7, #32]
 80019ee:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d005      	beq.n	8001a02 <spinonce+0x29e>
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d033      	beq.n	8001a68 <spinonce+0x304>
 8001a00:	e067      	b.n	8001ad2 <spinonce+0x36e>
				{
				case CANID1:
					parseCmdvel(canbuf);
 8001a02:	f107 0310 	add.w	r3, r7, #16
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff fc2c 	bl	8001264 <parseCmdvel>
					break;
 8001a0c:	e061      	b.n	8001ad2 <spinonce+0x36e>
 8001a0e:	bf00      	nop
 8001a10:	080099c4 	.word	0x080099c4
 8001a14:	659a35ca 	.word	0x659a35ca
 8001a18:	200000e0 	.word	0x200000e0
 8001a1c:	200000e1 	.word	0x200000e1
 8001a20:	200000e4 	.word	0x200000e4
 8001a24:	200000a0 	.word	0x200000a0
 8001a28:	2000009c 	.word	0x2000009c
 8001a2c:	40020400 	.word	0x40020400
 8001a30:	200000a8 	.word	0x200000a8
 8001a34:	20000094 	.word	0x20000094
 8001a38:	200000ac 	.word	0x200000ac
 8001a3c:	200000a4 	.word	0x200000a4
 8001a40:	20000090 	.word	0x20000090
 8001a44:	200000b8 	.word	0x200000b8
 8001a48:	40020c00 	.word	0x40020c00
 8001a4c:	20000098 	.word	0x20000098
 8001a50:	200000bc 	.word	0x200000bc
 8001a54:	08009998 	.word	0x08009998
 8001a58:	2000014c 	.word	0x2000014c
 8001a5c:	20000150 	.word	0x20000150
 8001a60:	20000158 	.word	0x20000158
 8001a64:	00b8b701 	.word	0x00b8b701

				case CANID2:
					parseState(canbuf);
 8001a68:	f107 0310 	add.w	r3, r7, #16
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7ff fae3 	bl	8001038 <parseState>
					break;
 8001a72:	e02e      	b.n	8001ad2 <spinonce+0x36e>

				case CANID5:
					parseTop(canbuf);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fab1 	bl	8000fe0 <parseTop>
					break;
 8001a7e:	e028      	b.n	8001ad2 <spinonce+0x36e>

				case CANID6:
					parsePmm(canbuf);
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff fa79 	bl	8000f7c <parsePmm>
					break;
 8001a8a:	e022      	b.n	8001ad2 <spinonce+0x36e>

				case CANID7:
					parseEnc(canbuf);
 8001a8c:	f107 0310 	add.w	r3, r7, #16
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff fd5f 	bl	8001554 <parseEnc>
					break;
 8001a96:	e01c      	b.n	8001ad2 <spinonce+0x36e>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8001a98:	7c7b      	ldrb	r3, [r7, #17]
 8001a9a:	2b6c      	cmp	r3, #108	; 0x6c
 8001a9c:	d107      	bne.n	8001aae <spinonce+0x34a>
 8001a9e:	7cbb      	ldrb	r3, [r7, #18]
 8001aa0:	2b60      	cmp	r3, #96	; 0x60
 8001aa2:	d104      	bne.n	8001aae <spinonce+0x34a>
						parseEnc114(canbuf);
 8001aa4:	f107 0310 	add.w	r3, r7, #16
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff fdd3 	bl	8001654 <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 8001aae:	7c7b      	ldrb	r3, [r7, #17]
 8001ab0:	2b3f      	cmp	r3, #63	; 0x3f
 8001ab2:	d10d      	bne.n	8001ad0 <spinonce+0x36c>
 8001ab4:	7cbb      	ldrb	r3, [r7, #18]
 8001ab6:	2b60      	cmp	r3, #96	; 0x60
 8001ab8:	d10a      	bne.n	8001ad0 <spinonce+0x36c>
						parseState114(canbuf);
 8001aba:	f107 0310 	add.w	r3, r7, #16
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7ff fe1a 	bl	80016f8 <parseState114>
					break;
 8001ac4:	e004      	b.n	8001ad0 <spinonce+0x36c>

				case MOTOR114_START_ID:
					startMotor();
 8001ac6:	f001 fb0f 	bl	80030e8 <startMotor>
					break;
 8001aca:	e002      	b.n	8001ad2 <spinonce+0x36e>
				}
			}
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <spinonce+0x36e>
					break;
 8001ad0:	bf00      	nop
//					  state->set(IDLE);
//					  ready_flag = 1;
//					  start_docking_flag = 0;
//				  }
//			  }
			g_tCan_Rx_Header.StdId=0;
 8001ad2:	4b04      	ldr	r3, [pc, #16]	; (8001ae4 <spinonce+0x380>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8001ad8:	4b02      	ldr	r3, [pc, #8]	; (8001ae4 <spinonce+0x380>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	605a      	str	r2, [r3, #4]
			CanId = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	623b      	str	r3, [r7, #32]
		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 8001ae2:	e66e      	b.n	80017c2 <spinonce+0x5e>
 8001ae4:	20000158 	.word	0x20000158

08001ae8 <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	607a      	str	r2, [r7, #4]
 8001af4:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (work.state != Idle) {
 8001af6:	4b29      	ldr	r3, [pc, #164]	; (8001b9c <setData+0xb4>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d002      	beq.n	8001b04 <setData+0x1c>
        UNLOCK();
        return -1;
 8001afe:	f04f 33ff 	mov.w	r3, #4294967295
 8001b02:	e047      	b.n	8001b94 <setData+0xac>
    }

    work.state = Leader;
 8001b04:	4b25      	ldr	r3, [pc, #148]	; (8001b9c <setData+0xb4>)
 8001b06:	2201      	movs	r2, #1
 8001b08:	701a      	strb	r2, [r3, #0]
    work.bitcount = 0;
 8001b0a:	4b24      	ldr	r3, [pc, #144]	; (8001b9c <setData+0xb4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	605a      	str	r2, [r3, #4]
    work.leader = 0;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <setData+0xb4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
    work.data = 0;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <setData+0xb4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	60da      	str	r2, [r3, #12]
    work.trailer = 0;
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <setData+0xb4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	611a      	str	r2, [r3, #16]

    data.format = format;
 8001b22:	4a1f      	ldr	r2, [pc, #124]	; (8001ba0 <setData+0xb8>)
 8001b24:	7bfb      	ldrb	r3, [r7, #15]
 8001b26:	7013      	strb	r3, [r2, #0]
    data.bitlength = bitlength;
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <setData+0xb8>)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	da00      	bge.n	8001b36 <setData+0x4e>
 8001b34:	3307      	adds	r3, #7
 8001b36:	10db      	asrs	r3, r3, #3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	f003 0307 	and.w	r3, r3, #7
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	bf14      	ite	ne
 8001b44:	2301      	movne	r3, #1
 8001b46:	2300      	moveq	r3, #0
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	4413      	add	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
 8001b52:	e00c      	b.n	8001b6e <setData+0x86>
        data.buffer[i] = buf[i];
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	4413      	add	r3, r2
 8001b5a:	7819      	ldrb	r1, [r3, #0]
 8001b5c:	4a10      	ldr	r2, [pc, #64]	; (8001ba0 <setData+0xb8>)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	4413      	add	r3, r2
 8001b62:	3308      	adds	r3, #8
 8001b64:	460a      	mov	r2, r1
 8001b66:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbee      	blt.n	8001b54 <setData+0x6c>
    }

    switch (format) {
 8001b76:	7bfb      	ldrb	r3, [r7, #15]
 8001b78:	2b05      	cmp	r3, #5
 8001b7a:	d009      	beq.n	8001b90 <setData+0xa8>
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	dc08      	bgt.n	8001b92 <setData+0xaa>
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d001      	beq.n	8001b88 <setData+0xa0>
 8001b84:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 8001b86:	e004      	b.n	8001b92 <setData+0xaa>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8001b88:	4806      	ldr	r0, [pc, #24]	; (8001ba4 <setData+0xbc>)
 8001b8a:	f004 fced 	bl	8006568 <HAL_TIM_Base_Start_IT>
            break;
 8001b8e:	e000      	b.n	8001b92 <setData+0xaa>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 8001b90:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 8001b92:	687b      	ldr	r3, [r7, #4]
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	3718      	adds	r7, #24
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	bd80      	pop	{r7, pc}
 8001b9c:	20000138 	.word	0x20000138
 8001ba0:	200000f0 	.word	0x200000f0
 8001ba4:	200002f4 	.word	0x200002f4

08001ba8 <tick>:

void tick(void) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001bac:	4b83      	ldr	r3, [pc, #524]	; (8001dbc <tick+0x214>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b03      	cmp	r3, #3
 8001bb2:	f200 824f 	bhi.w	8002054 <tick+0x4ac>
 8001bb6:	a201      	add	r2, pc, #4	; (adr r2, 8001bbc <tick+0x14>)
 8001bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbc:	08001bcd 	.word	0x08001bcd
 8001bc0:	08001be7 	.word	0x08001be7
 8001bc4:	08001cd3 	.word	0x08001cd3
 8001bc8:	08001f41 	.word	0x08001f41
        case Idle:
            work.bitcount = 0;
 8001bcc:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <tick+0x214>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
            work.leader = 0;
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <tick+0x214>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	609a      	str	r2, [r3, #8]
            work.data = 0;
 8001bd8:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <tick+0x214>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	60da      	str	r2, [r3, #12]
            work.trailer = 0;
 8001bde:	4b77      	ldr	r3, [pc, #476]	; (8001dbc <tick+0x214>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	611a      	str	r2, [r3, #16]
            break;
 8001be4:	e23d      	b.n	8002062 <tick+0x4ba>
        case Leader:
            if (data.format == NEC) {
 8001be6:	4b76      	ldr	r3, [pc, #472]	; (8001dc0 <tick+0x218>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d122      	bne.n	8001c34 <tick+0x8c>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (work.leader < LEADER_NEC_HEAD) {
 8001bee:	4b73      	ldr	r3, [pc, #460]	; (8001dbc <tick+0x214>)
 8001bf0:	689a      	ldr	r2, [r3, #8]
 8001bf2:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <tick+0x21c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	da05      	bge.n	8001c06 <tick+0x5e>
                    IRDUTY50;
 8001bfa:	4b73      	ldr	r3, [pc, #460]	; (8001dc8 <tick+0x220>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
 8001c04:	e003      	b.n	8001c0e <tick+0x66>
                } else {
                    IRDUTY0;
 8001c06:	4b70      	ldr	r3, [pc, #448]	; (8001dc8 <tick+0x220>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	635a      	str	r2, [r3, #52]	; 0x34
                }
                work.leader++;
 8001c0e:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <tick+0x214>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a69      	ldr	r2, [pc, #420]	; (8001dbc <tick+0x214>)
 8001c16:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= work.leader) {
 8001c18:	4b6a      	ldr	r3, [pc, #424]	; (8001dc4 <tick+0x21c>)
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	4b6b      	ldr	r3, [pc, #428]	; (8001dcc <tick+0x224>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	441a      	add	r2, r3
 8001c22:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <tick+0x214>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	f300 8216 	bgt.w	8002058 <tick+0x4b0>
                    work.state = Data;
 8001c2c:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <tick+0x214>)
 8001c2e:	2202      	movs	r2, #2
 8001c30:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= work.leader) {
                    work.state = Data;
                }
            } else {
            }
            break;
 8001c32:	e211      	b.n	8002058 <tick+0x4b0>
            } else if (data.format == AEHA) {
 8001c34:	4b62      	ldr	r3, [pc, #392]	; (8001dc0 <tick+0x218>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d122      	bne.n	8001c82 <tick+0xda>
                if (work.leader < LEADER_AEHA_HEAD) {
 8001c3c:	4b5f      	ldr	r3, [pc, #380]	; (8001dbc <tick+0x214>)
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	4b63      	ldr	r3, [pc, #396]	; (8001dd0 <tick+0x228>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	da05      	bge.n	8001c54 <tick+0xac>
                    IRDUTY50;
 8001c48:	4b5f      	ldr	r3, [pc, #380]	; (8001dc8 <tick+0x220>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001c50:	635a      	str	r2, [r3, #52]	; 0x34
 8001c52:	e003      	b.n	8001c5c <tick+0xb4>
                    IRDUTY0;
 8001c54:	4b5c      	ldr	r3, [pc, #368]	; (8001dc8 <tick+0x220>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	635a      	str	r2, [r3, #52]	; 0x34
                work.leader++;
 8001c5c:	4b57      	ldr	r3, [pc, #348]	; (8001dbc <tick+0x214>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	3301      	adds	r3, #1
 8001c62:	4a56      	ldr	r2, [pc, #344]	; (8001dbc <tick+0x214>)
 8001c64:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= work.leader) {
 8001c66:	4b5a      	ldr	r3, [pc, #360]	; (8001dd0 <tick+0x228>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b5a      	ldr	r3, [pc, #360]	; (8001dd4 <tick+0x22c>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	441a      	add	r2, r3
 8001c70:	4b52      	ldr	r3, [pc, #328]	; (8001dbc <tick+0x214>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	f300 81ef 	bgt.w	8002058 <tick+0x4b0>
                    work.state = Data;
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <tick+0x214>)
 8001c7c:	2202      	movs	r2, #2
 8001c7e:	701a      	strb	r2, [r3, #0]
            break;
 8001c80:	e1ea      	b.n	8002058 <tick+0x4b0>
            } else if (data.format == SONY) {
 8001c82:	4b4f      	ldr	r3, [pc, #316]	; (8001dc0 <tick+0x218>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b05      	cmp	r3, #5
 8001c88:	f040 81e6 	bne.w	8002058 <tick+0x4b0>
                if (work.leader < LEADER_SONY_HEAD) {
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <tick+0x214>)
 8001c8e:	689a      	ldr	r2, [r3, #8]
 8001c90:	4b51      	ldr	r3, [pc, #324]	; (8001dd8 <tick+0x230>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	da05      	bge.n	8001ca4 <tick+0xfc>
                    IRDUTY50;
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <tick+0x220>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ca0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ca2:	e003      	b.n	8001cac <tick+0x104>
                    IRDUTY0;
 8001ca4:	4b48      	ldr	r3, [pc, #288]	; (8001dc8 <tick+0x220>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	635a      	str	r2, [r3, #52]	; 0x34
                work.leader++;
 8001cac:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <tick+0x214>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	4a42      	ldr	r2, [pc, #264]	; (8001dbc <tick+0x214>)
 8001cb4:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= work.leader) {
 8001cb6:	4b48      	ldr	r3, [pc, #288]	; (8001dd8 <tick+0x230>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	4b48      	ldr	r3, [pc, #288]	; (8001ddc <tick+0x234>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	441a      	add	r2, r3
 8001cc0:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <tick+0x214>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	f300 81c7 	bgt.w	8002058 <tick+0x4b0>
                    work.state = Data;
 8001cca:	4b3c      	ldr	r3, [pc, #240]	; (8001dbc <tick+0x214>)
 8001ccc:	2202      	movs	r2, #2
 8001cce:	701a      	strb	r2, [r3, #0]
            break;
 8001cd0:	e1c2      	b.n	8002058 <tick+0x4b0>
        case Data:
            if (data.format == NEC) {
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <tick+0x218>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d15c      	bne.n	8001d94 <tick+0x1ec>
                /*
                 * NEC.
                 */
                if (work.data == 0) {
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <tick+0x214>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10a      	bne.n	8001cf8 <tick+0x150>
                    IRDUTY50;
 8001ce2:	4b39      	ldr	r3, [pc, #228]	; (8001dc8 <tick+0x220>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001cea:	635a      	str	r2, [r3, #52]	; 0x34
                    work.data++;
 8001cec:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <tick+0x214>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	4a32      	ldr	r2, [pc, #200]	; (8001dbc <tick+0x214>)
 8001cf4:	60d3      	str	r3, [r2, #12]
 8001cf6:	e042      	b.n	8001d7e <tick+0x1d6>
                } else {
                    IRDUTY0;
 8001cf8:	4b33      	ldr	r3, [pc, #204]	; (8001dc8 <tick+0x220>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (data.buffer[work.bitcount / 8] & (1 << work.bitcount % 8))) {
 8001d00:	4b2e      	ldr	r3, [pc, #184]	; (8001dbc <tick+0x214>)
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	da00      	bge.n	8001d0a <tick+0x162>
 8001d08:	3307      	adds	r3, #7
 8001d0a:	10db      	asrs	r3, r3, #3
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b2c      	ldr	r3, [pc, #176]	; (8001dc0 <tick+0x218>)
 8001d10:	4413      	add	r3, r2
 8001d12:	7a1b      	ldrb	r3, [r3, #8]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b29      	ldr	r3, [pc, #164]	; (8001dbc <tick+0x214>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	425a      	negs	r2, r3
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	f002 0207 	and.w	r2, r2, #7
 8001d24:	bf58      	it	pl
 8001d26:	4253      	negpl	r3, r2
 8001d28:	fa41 f303 	asr.w	r3, r1, r3
 8001d2c:	f003 0301 	and.w	r3, r3, #1
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d012      	beq.n	8001d5a <tick+0x1b2>
                        if (3 <= work.data) {
 8001d34:	4b21      	ldr	r3, [pc, #132]	; (8001dbc <tick+0x214>)
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	dd08      	ble.n	8001d4e <tick+0x1a6>
                            work.bitcount++;
 8001d3c:	4b1f      	ldr	r3, [pc, #124]	; (8001dbc <tick+0x214>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	3301      	adds	r3, #1
 8001d42:	4a1e      	ldr	r2, [pc, #120]	; (8001dbc <tick+0x214>)
 8001d44:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <tick+0x214>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
 8001d4c:	e017      	b.n	8001d7e <tick+0x1d6>
                        } else {
                            work.data++;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <tick+0x214>)
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	3301      	adds	r3, #1
 8001d54:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <tick+0x214>)
 8001d56:	60d3      	str	r3, [r2, #12]
 8001d58:	e011      	b.n	8001d7e <tick+0x1d6>
                        }
                    } else {
                        if (1 <= work.data) {
 8001d5a:	4b18      	ldr	r3, [pc, #96]	; (8001dbc <tick+0x214>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	dd08      	ble.n	8001d74 <tick+0x1cc>
                            work.bitcount++;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <tick+0x214>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	3301      	adds	r3, #1
 8001d68:	4a14      	ldr	r2, [pc, #80]	; (8001dbc <tick+0x214>)
 8001d6a:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001d6c:	4b13      	ldr	r3, [pc, #76]	; (8001dbc <tick+0x214>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
 8001d72:	e004      	b.n	8001d7e <tick+0x1d6>
                        } else {
                            work.data++;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <tick+0x214>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	4a10      	ldr	r2, [pc, #64]	; (8001dbc <tick+0x214>)
 8001d7c:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (data.bitlength <= work.bitcount) {
 8001d7e:	4b10      	ldr	r3, [pc, #64]	; (8001dc0 <tick+0x218>)
 8001d80:	685a      	ldr	r2, [r3, #4]
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <tick+0x214>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	f300 8168 	bgt.w	800205c <tick+0x4b4>
                    work.state = Trailer;
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <tick+0x214>)
 8001d8e:	2203      	movs	r2, #3
 8001d90:	701a      	strb	r2, [r3, #0]
                if (data.bitlength <= work.bitcount) {
                    work.state = Trailer;
                }
            } else {
            }
            break;
 8001d92:	e163      	b.n	800205c <tick+0x4b4>
            } else if (data.format == AEHA) {
 8001d94:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <tick+0x218>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b03      	cmp	r3, #3
 8001d9a:	d16f      	bne.n	8001e7c <tick+0x2d4>
                if (work.data == 0) {
 8001d9c:	4b07      	ldr	r3, [pc, #28]	; (8001dbc <tick+0x214>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d11d      	bne.n	8001de0 <tick+0x238>
                    IRDUTY50;
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <tick+0x220>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001dac:	635a      	str	r2, [r3, #52]	; 0x34
                    work.data++;
 8001dae:	4b03      	ldr	r3, [pc, #12]	; (8001dbc <tick+0x214>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	3301      	adds	r3, #1
 8001db4:	4a01      	ldr	r2, [pc, #4]	; (8001dbc <tick+0x214>)
 8001db6:	60d3      	str	r3, [r2, #12]
 8001db8:	e055      	b.n	8001e66 <tick+0x2be>
 8001dba:	bf00      	nop
 8001dbc:	20000138 	.word	0x20000138
 8001dc0:	200000f0 	.word	0x200000f0
 8001dc4:	080099cc 	.word	0x080099cc
 8001dc8:	200001c4 	.word	0x200001c4
 8001dcc:	080099d0 	.word	0x080099d0
 8001dd0:	080099d4 	.word	0x080099d4
 8001dd4:	080099d8 	.word	0x080099d8
 8001dd8:	080099dc 	.word	0x080099dc
 8001ddc:	080099e0 	.word	0x080099e0
                    IRDUTY0;
 8001de0:	4b92      	ldr	r3, [pc, #584]	; (800202c <tick+0x484>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2200      	movs	r2, #0
 8001de6:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (data.buffer[work.bitcount / 8] & (1 << work.bitcount % 8))) {
 8001de8:	4b91      	ldr	r3, [pc, #580]	; (8002030 <tick+0x488>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	da00      	bge.n	8001df2 <tick+0x24a>
 8001df0:	3307      	adds	r3, #7
 8001df2:	10db      	asrs	r3, r3, #3
 8001df4:	461a      	mov	r2, r3
 8001df6:	4b8f      	ldr	r3, [pc, #572]	; (8002034 <tick+0x48c>)
 8001df8:	4413      	add	r3, r2
 8001dfa:	7a1b      	ldrb	r3, [r3, #8]
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4b8c      	ldr	r3, [pc, #560]	; (8002030 <tick+0x488>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	425a      	negs	r2, r3
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	f002 0207 	and.w	r2, r2, #7
 8001e0c:	bf58      	it	pl
 8001e0e:	4253      	negpl	r3, r2
 8001e10:	fa41 f303 	asr.w	r3, r1, r3
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <tick+0x29a>
                        if (3 <= work.data) {
 8001e1c:	4b84      	ldr	r3, [pc, #528]	; (8002030 <tick+0x488>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	dd08      	ble.n	8001e36 <tick+0x28e>
                            work.bitcount++;
 8001e24:	4b82      	ldr	r3, [pc, #520]	; (8002030 <tick+0x488>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	4a81      	ldr	r2, [pc, #516]	; (8002030 <tick+0x488>)
 8001e2c:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001e2e:	4b80      	ldr	r3, [pc, #512]	; (8002030 <tick+0x488>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	e017      	b.n	8001e66 <tick+0x2be>
                            work.data++;
 8001e36:	4b7e      	ldr	r3, [pc, #504]	; (8002030 <tick+0x488>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	4a7c      	ldr	r2, [pc, #496]	; (8002030 <tick+0x488>)
 8001e3e:	60d3      	str	r3, [r2, #12]
 8001e40:	e011      	b.n	8001e66 <tick+0x2be>
                        if (1 <= work.data) {
 8001e42:	4b7b      	ldr	r3, [pc, #492]	; (8002030 <tick+0x488>)
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	dd08      	ble.n	8001e5c <tick+0x2b4>
                            work.bitcount++;
 8001e4a:	4b79      	ldr	r3, [pc, #484]	; (8002030 <tick+0x488>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	4a77      	ldr	r2, [pc, #476]	; (8002030 <tick+0x488>)
 8001e52:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001e54:	4b76      	ldr	r3, [pc, #472]	; (8002030 <tick+0x488>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
 8001e5a:	e004      	b.n	8001e66 <tick+0x2be>
                            work.data++;
 8001e5c:	4b74      	ldr	r3, [pc, #464]	; (8002030 <tick+0x488>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	3301      	adds	r3, #1
 8001e62:	4a73      	ldr	r2, [pc, #460]	; (8002030 <tick+0x488>)
 8001e64:	60d3      	str	r3, [r2, #12]
                if (data.bitlength <= work.bitcount) {
 8001e66:	4b73      	ldr	r3, [pc, #460]	; (8002034 <tick+0x48c>)
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4b71      	ldr	r3, [pc, #452]	; (8002030 <tick+0x488>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	f300 80f4 	bgt.w	800205c <tick+0x4b4>
                    work.state = Trailer;
 8001e74:	4b6e      	ldr	r3, [pc, #440]	; (8002030 <tick+0x488>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	701a      	strb	r2, [r3, #0]
            break;
 8001e7a:	e0ef      	b.n	800205c <tick+0x4b4>
            } else if (data.format == SONY) {
 8001e7c:	4b6d      	ldr	r3, [pc, #436]	; (8002034 <tick+0x48c>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	f040 80eb 	bne.w	800205c <tick+0x4b4>
                if (work.data == 0) {
 8001e86:	4b6a      	ldr	r3, [pc, #424]	; (8002030 <tick+0x488>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d109      	bne.n	8001ea2 <tick+0x2fa>
                    IRDUTY0;
 8001e8e:	4b67      	ldr	r3, [pc, #412]	; (800202c <tick+0x484>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2200      	movs	r2, #0
 8001e94:	635a      	str	r2, [r3, #52]	; 0x34
                    work.data++;
 8001e96:	4b66      	ldr	r3, [pc, #408]	; (8002030 <tick+0x488>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	4a64      	ldr	r2, [pc, #400]	; (8002030 <tick+0x488>)
 8001e9e:	60d3      	str	r3, [r2, #12]
 8001ea0:	e043      	b.n	8001f2a <tick+0x382>
                    IRDUTY50;
 8001ea2:	4b62      	ldr	r3, [pc, #392]	; (800202c <tick+0x484>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001eaa:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (data.buffer[work.bitcount / 8] & (1 << work.bitcount % 8))) {
 8001eac:	4b60      	ldr	r3, [pc, #384]	; (8002030 <tick+0x488>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	da00      	bge.n	8001eb6 <tick+0x30e>
 8001eb4:	3307      	adds	r3, #7
 8001eb6:	10db      	asrs	r3, r3, #3
 8001eb8:	461a      	mov	r2, r3
 8001eba:	4b5e      	ldr	r3, [pc, #376]	; (8002034 <tick+0x48c>)
 8001ebc:	4413      	add	r3, r2
 8001ebe:	7a1b      	ldrb	r3, [r3, #8]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4b5b      	ldr	r3, [pc, #364]	; (8002030 <tick+0x488>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	425a      	negs	r2, r3
 8001ec8:	f003 0307 	and.w	r3, r3, #7
 8001ecc:	f002 0207 	and.w	r2, r2, #7
 8001ed0:	bf58      	it	pl
 8001ed2:	4253      	negpl	r3, r2
 8001ed4:	fa41 f303 	asr.w	r3, r1, r3
 8001ed8:	f003 0301 	and.w	r3, r3, #1
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d012      	beq.n	8001f06 <tick+0x35e>
                        if (2 <= work.data) {
 8001ee0:	4b53      	ldr	r3, [pc, #332]	; (8002030 <tick+0x488>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	dd08      	ble.n	8001efa <tick+0x352>
                            work.bitcount++;
 8001ee8:	4b51      	ldr	r3, [pc, #324]	; (8002030 <tick+0x488>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	4a50      	ldr	r2, [pc, #320]	; (8002030 <tick+0x488>)
 8001ef0:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001ef2:	4b4f      	ldr	r3, [pc, #316]	; (8002030 <tick+0x488>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
 8001ef8:	e017      	b.n	8001f2a <tick+0x382>
                            work.data++;
 8001efa:	4b4d      	ldr	r3, [pc, #308]	; (8002030 <tick+0x488>)
 8001efc:	68db      	ldr	r3, [r3, #12]
 8001efe:	3301      	adds	r3, #1
 8001f00:	4a4b      	ldr	r2, [pc, #300]	; (8002030 <tick+0x488>)
 8001f02:	60d3      	str	r3, [r2, #12]
 8001f04:	e011      	b.n	8001f2a <tick+0x382>
                        if (1 <= work.data) {
 8001f06:	4b4a      	ldr	r3, [pc, #296]	; (8002030 <tick+0x488>)
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dd08      	ble.n	8001f20 <tick+0x378>
                            work.bitcount++;
 8001f0e:	4b48      	ldr	r3, [pc, #288]	; (8002030 <tick+0x488>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	3301      	adds	r3, #1
 8001f14:	4a46      	ldr	r2, [pc, #280]	; (8002030 <tick+0x488>)
 8001f16:	6053      	str	r3, [r2, #4]
                            work.data = 0;
 8001f18:	4b45      	ldr	r3, [pc, #276]	; (8002030 <tick+0x488>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	60da      	str	r2, [r3, #12]
 8001f1e:	e004      	b.n	8001f2a <tick+0x382>
                            work.data++;
 8001f20:	4b43      	ldr	r3, [pc, #268]	; (8002030 <tick+0x488>)
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	3301      	adds	r3, #1
 8001f26:	4a42      	ldr	r2, [pc, #264]	; (8002030 <tick+0x488>)
 8001f28:	60d3      	str	r3, [r2, #12]
                if (data.bitlength <= work.bitcount) {
 8001f2a:	4b42      	ldr	r3, [pc, #264]	; (8002034 <tick+0x48c>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	4b40      	ldr	r3, [pc, #256]	; (8002030 <tick+0x488>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	f300 8092 	bgt.w	800205c <tick+0x4b4>
                    work.state = Trailer;
 8001f38:	4b3d      	ldr	r3, [pc, #244]	; (8002030 <tick+0x488>)
 8001f3a:	2203      	movs	r2, #3
 8001f3c:	701a      	strb	r2, [r3, #0]
            break;
 8001f3e:	e08d      	b.n	800205c <tick+0x4b4>
        case Trailer:
            if (data.format == NEC) {
 8001f40:	4b3c      	ldr	r3, [pc, #240]	; (8002034 <tick+0x48c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d124      	bne.n	8001f92 <tick+0x3ea>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (work.trailer < TRAILER_NEC_HEAD) {
 8001f48:	4b39      	ldr	r3, [pc, #228]	; (8002030 <tick+0x488>)
 8001f4a:	691a      	ldr	r2, [r3, #16]
 8001f4c:	4b3a      	ldr	r3, [pc, #232]	; (8002038 <tick+0x490>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	da05      	bge.n	8001f60 <tick+0x3b8>
                    IRDUTY50;
 8001f54:	4b35      	ldr	r3, [pc, #212]	; (800202c <tick+0x484>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5e:	e003      	b.n	8001f68 <tick+0x3c0>
                } else {
                    IRDUTY0;
 8001f60:	4b32      	ldr	r3, [pc, #200]	; (800202c <tick+0x484>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2200      	movs	r2, #0
 8001f66:	635a      	str	r2, [r3, #52]	; 0x34
                }
                work.trailer++;
 8001f68:	4b31      	ldr	r3, [pc, #196]	; (8002030 <tick+0x488>)
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	4a30      	ldr	r2, [pc, #192]	; (8002030 <tick+0x488>)
 8001f70:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= work.trailer) {
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <tick+0x490>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4b31      	ldr	r3, [pc, #196]	; (800203c <tick+0x494>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	441a      	add	r2, r3
 8001f7c:	4b2c      	ldr	r3, [pc, #176]	; (8002030 <tick+0x488>)
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	dc6d      	bgt.n	8002060 <tick+0x4b8>
                    work.state = Idle;
 8001f84:	4b2a      	ldr	r3, [pc, #168]	; (8002030 <tick+0x488>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8001f8a:	482d      	ldr	r0, [pc, #180]	; (8002040 <tick+0x498>)
 8001f8c:	f004 fb64 	bl	8006658 <HAL_TIM_Base_Stop_IT>
                    work.state = Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8001f90:	e066      	b.n	8002060 <tick+0x4b8>
            } else if (data.format == AEHA) {
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <tick+0x48c>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b03      	cmp	r3, #3
 8001f98:	d121      	bne.n	8001fde <tick+0x436>
                if (work.trailer < TRAILER_AEHA_HEAD) {
 8001f9a:	4b25      	ldr	r3, [pc, #148]	; (8002030 <tick+0x488>)
 8001f9c:	691a      	ldr	r2, [r3, #16]
 8001f9e:	4b29      	ldr	r3, [pc, #164]	; (8002044 <tick+0x49c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	da05      	bge.n	8001fb2 <tick+0x40a>
                    IRDUTY50;
 8001fa6:	4b21      	ldr	r3, [pc, #132]	; (800202c <tick+0x484>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001fae:	635a      	str	r2, [r3, #52]	; 0x34
 8001fb0:	e003      	b.n	8001fba <tick+0x412>
                    IRDUTY0;
 8001fb2:	4b1e      	ldr	r3, [pc, #120]	; (800202c <tick+0x484>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	635a      	str	r2, [r3, #52]	; 0x34
                work.trailer++;
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <tick+0x488>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <tick+0x488>)
 8001fc2:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= work.trailer) {
 8001fc4:	4b1f      	ldr	r3, [pc, #124]	; (8002044 <tick+0x49c>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <tick+0x4a0>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	441a      	add	r2, r3
 8001fce:	4b18      	ldr	r3, [pc, #96]	; (8002030 <tick+0x488>)
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	dc44      	bgt.n	8002060 <tick+0x4b8>
                    work.state = Idle;
 8001fd6:	4b16      	ldr	r3, [pc, #88]	; (8002030 <tick+0x488>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]
            break;
 8001fdc:	e040      	b.n	8002060 <tick+0x4b8>
            } else if (data.format == SONY) {
 8001fde:	4b15      	ldr	r3, [pc, #84]	; (8002034 <tick+0x48c>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d13c      	bne.n	8002060 <tick+0x4b8>
                if (work.trailer < TRAILER_SONY_HEAD) {
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <tick+0x488>)
 8001fe8:	691a      	ldr	r2, [r3, #16]
 8001fea:	4b18      	ldr	r3, [pc, #96]	; (800204c <tick+0x4a4>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	429a      	cmp	r2, r3
 8001ff0:	da05      	bge.n	8001ffe <tick+0x456>
                    IRDUTY50;
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <tick+0x484>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ffa:	635a      	str	r2, [r3, #52]	; 0x34
 8001ffc:	e003      	b.n	8002006 <tick+0x45e>
                    IRDUTY0;
 8001ffe:	4b0b      	ldr	r3, [pc, #44]	; (800202c <tick+0x484>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	2200      	movs	r2, #0
 8002004:	635a      	str	r2, [r3, #52]	; 0x34
                work.trailer++;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <tick+0x488>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	3301      	adds	r3, #1
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <tick+0x488>)
 800200e:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= work.trailer) {
 8002010:	4b0e      	ldr	r3, [pc, #56]	; (800204c <tick+0x4a4>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	4b0e      	ldr	r3, [pc, #56]	; (8002050 <tick+0x4a8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	441a      	add	r2, r3
 800201a:	4b05      	ldr	r3, [pc, #20]	; (8002030 <tick+0x488>)
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	429a      	cmp	r2, r3
 8002020:	dc1e      	bgt.n	8002060 <tick+0x4b8>
                    work.state = Idle;
 8002022:	4b03      	ldr	r3, [pc, #12]	; (8002030 <tick+0x488>)
 8002024:	2200      	movs	r2, #0
 8002026:	701a      	strb	r2, [r3, #0]
            break;
 8002028:	e01a      	b.n	8002060 <tick+0x4b8>
 800202a:	bf00      	nop
 800202c:	200001c4 	.word	0x200001c4
 8002030:	20000138 	.word	0x20000138
 8002034:	200000f0 	.word	0x200000f0
 8002038:	080099e4 	.word	0x080099e4
 800203c:	080099e8 	.word	0x080099e8
 8002040:	200002f4 	.word	0x200002f4
 8002044:	080099ec 	.word	0x080099ec
 8002048:	080099f0 	.word	0x080099f0
 800204c:	080099f4 	.word	0x080099f4
 8002050:	080099f8 	.word	0x080099f8
        default:
            break;
 8002054:	bf00      	nop
 8002056:	e004      	b.n	8002062 <tick+0x4ba>
            break;
 8002058:	bf00      	nop
 800205a:	e002      	b.n	8002062 <tick+0x4ba>
            break;
 800205c:	bf00      	nop
 800205e:	e000      	b.n	8002062 <tick+0x4ba>
            break;
 8002060:	bf00      	nop
    }
    UNLOCK();
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop

08002068 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8002072:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <CanInit+0x90>)
 8002074:	2200      	movs	r2, #0
 8002076:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002078:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <CanInit+0x90>)
 800207a:	2200      	movs	r2, #0
 800207c:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800207e:	4b1e      	ldr	r3, [pc, #120]	; (80020f8 <CanInit+0x90>)
 8002080:	2201      	movs	r2, #1
 8002082:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	0c1b      	lsrs	r3, r3, #16
 8002088:	4a1b      	ldr	r2, [pc, #108]	; (80020f8 <CanInit+0x90>)
 800208a:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002092:	4013      	ands	r3, r2
 8002094:	4a18      	ldr	r2, [pc, #96]	; (80020f8 <CanInit+0x90>)
 8002096:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	0c1b      	lsrs	r3, r3, #16
 800209c:	4a16      	ldr	r2, [pc, #88]	; (80020f8 <CanInit+0x90>)
 800209e:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80020a6:	4013      	ands	r3, r2
 80020a8:	4a13      	ldr	r2, [pc, #76]	; (80020f8 <CanInit+0x90>)
 80020aa:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80020ac:	4b12      	ldr	r3, [pc, #72]	; (80020f8 <CanInit+0x90>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80020b2:	4b11      	ldr	r3, [pc, #68]	; (80020f8 <CanInit+0x90>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 80020b8:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <CanInit+0x90>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 80020be:	480f      	ldr	r0, [pc, #60]	; (80020fc <CanInit+0x94>)
 80020c0:	f002 f898 	bl	80041f4 <HAL_CAN_Start>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <CanInit+0x66>
 80020ca:	f000 fc53 	bl	8002974 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 80020ce:	2102      	movs	r1, #2
 80020d0:	480a      	ldr	r0, [pc, #40]	; (80020fc <CanInit+0x94>)
 80020d2:	f002 faf5 	bl	80046c0 <HAL_CAN_ActivateNotification>
 80020d6:	4603      	mov	r3, r0
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d000      	beq.n	80020de <CanInit+0x76>
 80020dc:	e7fe      	b.n	80020dc <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 80020de:	4906      	ldr	r1, [pc, #24]	; (80020f8 <CanInit+0x90>)
 80020e0:	4806      	ldr	r0, [pc, #24]	; (80020fc <CanInit+0x94>)
 80020e2:	f001 ffa7 	bl	8004034 <HAL_CAN_ConfigFilter>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 80020ec:	f000 fc42 	bl	8002974 <Error_Handler>
    }
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20000174 	.word	0x20000174
 80020fc:	2000019c 	.word	0x2000019c

08002100 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08c      	sub	sp, #48	; 0x30
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	4611      	mov	r1, r2
 800210c:	461a      	mov	r2, r3
 800210e:	460b      	mov	r3, r1
 8002110:	71fb      	strb	r3, [r7, #7]
 8002112:	4613      	mov	r3, r2
 8002114:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800211e:	2300      	movs	r3, #0
 8002120:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8002122:	79bb      	ldrb	r3, [r7, #6]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d001      	beq.n	800212c <sendCan+0x2c>
 8002128:	2304      	movs	r3, #4
 800212a:	e000      	b.n	800212e <sendCan+0x2e>
 800212c:	2300      	movs	r3, #0
 800212e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8002130:	79fb      	ldrb	r3, [r7, #7]
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8002134:	2301      	movs	r3, #1
 8002136:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800213a:	480d      	ldr	r0, [pc, #52]	; (8002170 <sendCan+0x70>)
 800213c:	f002 f979 	bl	8004432 <HAL_CAN_GetTxMailboxesFreeLevel>
 8002140:	4603      	mov	r3, r0
 8002142:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00d      	beq.n	8002166 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800214a:	f107 0310 	add.w	r3, r7, #16
 800214e:	f107 0114 	add.w	r1, r7, #20
 8002152:	68ba      	ldr	r2, [r7, #8]
 8002154:	4806      	ldr	r0, [pc, #24]	; (8002170 <sendCan+0x70>)
 8002156:	f002 f891 	bl	800427c <HAL_CAN_AddTxMessage>
 800215a:	4603      	mov	r3, r0
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	2b00      	cmp	r3, #0
 8002162:	d000      	beq.n	8002166 <sendCan+0x66>
 8002164:	e7fe      	b.n	8002164 <sendCan+0x64>
    }
}
 8002166:	bf00      	nop
 8002168:	3730      	adds	r7, #48	; 0x30
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	2000019c 	.word	0x2000019c

08002174 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800217e:	4a0a      	ldr	r2, [pc, #40]	; (80021a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8002180:	2100      	movs	r1, #0
 8002182:	480a      	ldr	r0, [pc, #40]	; (80021ac <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8002184:	f002 f98a 	bl	800449c <HAL_CAN_GetRxMessage>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d000      	beq.n	8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 800218e:	e7fe      	b.n	800218e <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8002190:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3301      	adds	r3, #1
 8002196:	4a06      	ldr	r2, [pc, #24]	; (80021b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8002198:	6013      	str	r3, [r2, #0]

}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20000150 	.word	0x20000150
 80021a8:	20000158 	.word	0x20000158
 80021ac:	2000019c 	.word	0x2000019c
 80021b0:	2000014c 	.word	0x2000014c

080021b4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	2364      	movs	r3, #100	; 0x64
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	4803      	ldr	r0, [pc, #12]	; (80021d8 <_write+0x24>)
 80021ca:	f005 fbfb 	bl	80079c4 <HAL_UART_Transmit>
	return (len);
 80021ce:	687b      	ldr	r3, [r7, #4]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	3710      	adds	r7, #16
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	200003c4 	.word	0x200003c4

080021dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80021e0:	f001 fdab 	bl	8003d3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80021e4:	f000 f834 	bl	8002250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021e8:	f000 fa9e 	bl	8002728 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80021ec:	f000 fa6c 	bl	80026c8 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80021f0:	f000 f89a 	bl	8002328 <MX_CAN1_Init>
  MX_TIM2_Init();
 80021f4:	f000 f8ce 	bl	8002394 <MX_TIM2_Init>
  MX_UART8_Init();
 80021f8:	f000 fa36 	bl	8002668 <MX_UART8_Init>
  MX_TIM6_Init();
 80021fc:	f000 f98e 	bl	800251c <MX_TIM6_Init>
  MX_TIM7_Init();
 8002200:	f000 f9c2 	bl	8002588 <MX_TIM7_Init>
  MX_TIM5_Init();
 8002204:	f000 f93c 	bl	8002480 <MX_TIM5_Init>
  MX_TIM9_Init();
 8002208:	f000 f9f4 	bl	80025f4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//uss timer, 2khz
 800220c:	480b      	ldr	r0, [pc, #44]	; (800223c <main+0x60>)
 800220e:	f004 f9ab 	bl	8006568 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 8002212:	480b      	ldr	r0, [pc, #44]	; (8002240 <main+0x64>)
 8002214:	f004 f9a8 	bl	8006568 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
 8002218:	480a      	ldr	r0, [pc, #40]	; (8002244 <main+0x68>)
 800221a:	f004 f9a5 	bl	8006568 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 800221e:	480a      	ldr	r0, [pc, #40]	; (8002248 <main+0x6c>)
 8002220:	f004 f9a2 	bl	8006568 <HAL_TIM_Base_Start_IT>


//  HAL_TIMEx_OCN_Start(&htim2, TIM_CHANNEL_1);


  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);
 8002224:	2100      	movs	r1, #0
 8002226:	4809      	ldr	r0, [pc, #36]	; (800224c <main+0x70>)
 8002228:	f004 faa6 	bl	8006778 <HAL_TIM_PWM_Start_IT>
//
  htim2.Instance->CCR1 = 100;
 800222c:	4b07      	ldr	r3, [pc, #28]	; (800224c <main+0x70>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	2264      	movs	r2, #100	; 0x64
 8002232:	635a      	str	r2, [r3, #52]	; 0x34
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 8002234:	f7ff fa96 	bl	8001764 <spinonce>
 8002238:	e7fc      	b.n	8002234 <main+0x58>
 800223a:	bf00      	nop
 800223c:	20000210 	.word	0x20000210
 8002240:	2000025c 	.word	0x2000025c
 8002244:	200002a8 	.word	0x200002a8
 8002248:	200002f4 	.word	0x200002f4
 800224c:	200001c4 	.word	0x200001c4

08002250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b094      	sub	sp, #80	; 0x50
 8002254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002256:	f107 0320 	add.w	r3, r7, #32
 800225a:	2230      	movs	r2, #48	; 0x30
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f006 fbf8 	bl	8008a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002264:	f107 030c 	add.w	r3, r7, #12
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
 8002272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002274:	4b2a      	ldr	r3, [pc, #168]	; (8002320 <SystemClock_Config+0xd0>)
 8002276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002278:	4a29      	ldr	r2, [pc, #164]	; (8002320 <SystemClock_Config+0xd0>)
 800227a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227e:	6413      	str	r3, [r2, #64]	; 0x40
 8002280:	4b27      	ldr	r3, [pc, #156]	; (8002320 <SystemClock_Config+0xd0>)
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002288:	60bb      	str	r3, [r7, #8]
 800228a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800228c:	4b25      	ldr	r3, [pc, #148]	; (8002324 <SystemClock_Config+0xd4>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <SystemClock_Config+0xd4>)
 8002292:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002296:	6013      	str	r3, [r2, #0]
 8002298:	4b22      	ldr	r3, [pc, #136]	; (8002324 <SystemClock_Config+0xd4>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022a0:	607b      	str	r3, [r7, #4]
 80022a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022a4:	2301      	movs	r3, #1
 80022a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022a8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022ae:	2302      	movs	r3, #2
 80022b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80022b8:	2304      	movs	r3, #4
 80022ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80022bc:	23d8      	movs	r3, #216	; 0xd8
 80022be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022c0:	2302      	movs	r3, #2
 80022c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80022c4:	2302      	movs	r3, #2
 80022c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022c8:	f107 0320 	add.w	r3, r7, #32
 80022cc:	4618      	mov	r0, r3
 80022ce:	f003 f839 	bl	8005344 <HAL_RCC_OscConfig>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80022d8:	f000 fb4c 	bl	8002974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80022dc:	f002 ffe2 	bl	80052a4 <HAL_PWREx_EnableOverDrive>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80022e6:	f000 fb45 	bl	8002974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80022ea:	230f      	movs	r3, #15
 80022ec:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80022ee:	2302      	movs	r3, #2
 80022f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80022f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80022fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80022fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002300:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8002302:	f107 030c 	add.w	r3, r7, #12
 8002306:	2107      	movs	r1, #7
 8002308:	4618      	mov	r0, r3
 800230a:	f003 fabf 	bl	800588c <HAL_RCC_ClockConfig>
 800230e:	4603      	mov	r3, r0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8002314:	f000 fb2e 	bl	8002974 <Error_Handler>
  }
}
 8002318:	bf00      	nop
 800231a:	3750      	adds	r7, #80	; 0x50
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40023800 	.word	0x40023800
 8002324:	40007000 	.word	0x40007000

08002328 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800232c:	4b17      	ldr	r3, [pc, #92]	; (800238c <MX_CAN1_Init+0x64>)
 800232e:	4a18      	ldr	r2, [pc, #96]	; (8002390 <MX_CAN1_Init+0x68>)
 8002330:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8002332:	4b16      	ldr	r3, [pc, #88]	; (800238c <MX_CAN1_Init+0x64>)
 8002334:	221b      	movs	r2, #27
 8002336:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002338:	4b14      	ldr	r3, [pc, #80]	; (800238c <MX_CAN1_Init+0x64>)
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800233e:	4b13      	ldr	r3, [pc, #76]	; (800238c <MX_CAN1_Init+0x64>)
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8002344:	4b11      	ldr	r3, [pc, #68]	; (800238c <MX_CAN1_Init+0x64>)
 8002346:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800234a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800234c:	4b0f      	ldr	r3, [pc, #60]	; (800238c <MX_CAN1_Init+0x64>)
 800234e:	2200      	movs	r2, #0
 8002350:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002352:	4b0e      	ldr	r3, [pc, #56]	; (800238c <MX_CAN1_Init+0x64>)
 8002354:	2200      	movs	r2, #0
 8002356:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8002358:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_CAN1_Init+0x64>)
 800235a:	2201      	movs	r2, #1
 800235c:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800235e:	4b0b      	ldr	r3, [pc, #44]	; (800238c <MX_CAN1_Init+0x64>)
 8002360:	2200      	movs	r2, #0
 8002362:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8002364:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_CAN1_Init+0x64>)
 8002366:	2200      	movs	r2, #0
 8002368:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800236a:	4b08      	ldr	r3, [pc, #32]	; (800238c <MX_CAN1_Init+0x64>)
 800236c:	2200      	movs	r2, #0
 800236e:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002370:	4b06      	ldr	r3, [pc, #24]	; (800238c <MX_CAN1_Init+0x64>)
 8002372:	2200      	movs	r2, #0
 8002374:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002376:	4805      	ldr	r0, [pc, #20]	; (800238c <MX_CAN1_Init+0x64>)
 8002378:	f001 fd60 	bl	8003e3c <HAL_CAN_Init>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8002382:	f000 faf7 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002386:	bf00      	nop
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	2000019c 	.word	0x2000019c
 8002390:	40006400 	.word	0x40006400

08002394 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b08e      	sub	sp, #56	; 0x38
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800239a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800239e:	2200      	movs	r2, #0
 80023a0:	601a      	str	r2, [r3, #0]
 80023a2:	605a      	str	r2, [r3, #4]
 80023a4:	609a      	str	r2, [r3, #8]
 80023a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a8:	f107 031c 	add.w	r3, r7, #28
 80023ac:	2200      	movs	r2, #0
 80023ae:	601a      	str	r2, [r3, #0]
 80023b0:	605a      	str	r2, [r3, #4]
 80023b2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b4:	463b      	mov	r3, r7
 80023b6:	2200      	movs	r2, #0
 80023b8:	601a      	str	r2, [r3, #0]
 80023ba:	605a      	str	r2, [r3, #4]
 80023bc:	609a      	str	r2, [r3, #8]
 80023be:	60da      	str	r2, [r3, #12]
 80023c0:	611a      	str	r2, [r3, #16]
 80023c2:	615a      	str	r2, [r3, #20]
 80023c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <MX_TIM2_Init+0xe8>)
 80023c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80023ce:	4b2b      	ldr	r3, [pc, #172]	; (800247c <MX_TIM2_Init+0xe8>)
 80023d0:	226b      	movs	r2, #107	; 0x6b
 80023d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b29      	ldr	r3, [pc, #164]	; (800247c <MX_TIM2_Init+0xe8>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 263-1;
 80023da:	4b28      	ldr	r3, [pc, #160]	; (800247c <MX_TIM2_Init+0xe8>)
 80023dc:	f44f 7283 	mov.w	r2, #262	; 0x106
 80023e0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b26      	ldr	r3, [pc, #152]	; (800247c <MX_TIM2_Init+0xe8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b24      	ldr	r3, [pc, #144]	; (800247c <MX_TIM2_Init+0xe8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023ee:	4823      	ldr	r0, [pc, #140]	; (800247c <MX_TIM2_Init+0xe8>)
 80023f0:	f004 f862 	bl	80064b8 <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80023fa:	f000 fabb 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002408:	4619      	mov	r1, r3
 800240a:	481c      	ldr	r0, [pc, #112]	; (800247c <MX_TIM2_Init+0xe8>)
 800240c:	f004 fd30 	bl	8006e70 <HAL_TIM_ConfigClockSource>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002416:	f000 faad 	bl	8002974 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800241a:	4818      	ldr	r0, [pc, #96]	; (800247c <MX_TIM2_Init+0xe8>)
 800241c:	f004 f94b 	bl	80066b6 <HAL_TIM_PWM_Init>
 8002420:	4603      	mov	r3, r0
 8002422:	2b00      	cmp	r3, #0
 8002424:	d001      	beq.n	800242a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002426:	f000 faa5 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242a:	2300      	movs	r3, #0
 800242c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002432:	f107 031c 	add.w	r3, r7, #28
 8002436:	4619      	mov	r1, r3
 8002438:	4810      	ldr	r0, [pc, #64]	; (800247c <MX_TIM2_Init+0xe8>)
 800243a:	f005 f9c9 	bl	80077d0 <HAL_TIMEx_MasterConfigSynchronization>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002444:	f000 fa96 	bl	8002974 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002448:	2360      	movs	r3, #96	; 0x60
 800244a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 131-1;
 800244c:	2382      	movs	r3, #130	; 0x82
 800244e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002450:	2300      	movs	r3, #0
 8002452:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002458:	463b      	mov	r3, r7
 800245a:	2200      	movs	r2, #0
 800245c:	4619      	mov	r1, r3
 800245e:	4807      	ldr	r0, [pc, #28]	; (800247c <MX_TIM2_Init+0xe8>)
 8002460:	f004 fbf2 	bl	8006c48 <HAL_TIM_PWM_ConfigChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800246a:	f000 fa83 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800246e:	4803      	ldr	r0, [pc, #12]	; (800247c <MX_TIM2_Init+0xe8>)
 8002470:	f001 fa42 	bl	80038f8 <HAL_TIM_MspPostInit>

}
 8002474:	bf00      	nop
 8002476:	3738      	adds	r7, #56	; 0x38
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	200001c4 	.word	0x200001c4

08002480 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b088      	sub	sp, #32
 8002484:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002486:	f107 0310 	add.w	r3, r7, #16
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]
 8002490:	609a      	str	r2, [r3, #8]
 8002492:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]
 800249a:	605a      	str	r2, [r3, #4]
 800249c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800249e:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <MX_TIM5_Init+0x94>)
 80024a0:	4a1d      	ldr	r2, [pc, #116]	; (8002518 <MX_TIM5_Init+0x98>)
 80024a2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_TIM5_Init+0x94>)
 80024a6:	226b      	movs	r2, #107	; 0x6b
 80024a8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024aa:	4b1a      	ldr	r3, [pc, #104]	; (8002514 <MX_TIM5_Init+0x94>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_TIM5_Init+0x94>)
 80024b2:	f240 12f3 	movw	r2, #499	; 0x1f3
 80024b6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <MX_TIM5_Init+0x94>)
 80024ba:	2200      	movs	r2, #0
 80024bc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024be:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_TIM5_Init+0x94>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80024c4:	4813      	ldr	r0, [pc, #76]	; (8002514 <MX_TIM5_Init+0x94>)
 80024c6:	f003 fff7 	bl	80064b8 <HAL_TIM_Base_Init>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80024d0:	f000 fa50 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024da:	f107 0310 	add.w	r3, r7, #16
 80024de:	4619      	mov	r1, r3
 80024e0:	480c      	ldr	r0, [pc, #48]	; (8002514 <MX_TIM5_Init+0x94>)
 80024e2:	f004 fcc5 	bl	8006e70 <HAL_TIM_ConfigClockSource>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d001      	beq.n	80024f0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80024ec:	f000 fa42 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024f0:	2300      	movs	r3, #0
 80024f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024f8:	1d3b      	adds	r3, r7, #4
 80024fa:	4619      	mov	r1, r3
 80024fc:	4805      	ldr	r0, [pc, #20]	; (8002514 <MX_TIM5_Init+0x94>)
 80024fe:	f005 f967 	bl	80077d0 <HAL_TIMEx_MasterConfigSynchronization>
 8002502:	4603      	mov	r3, r0
 8002504:	2b00      	cmp	r3, #0
 8002506:	d001      	beq.n	800250c <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002508:	f000 fa34 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	20000210 	.word	0x20000210
 8002518:	40000c00 	.word	0x40000c00

0800251c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002522:	1d3b      	adds	r3, r7, #4
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	605a      	str	r2, [r3, #4]
 800252a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800252c:	4b14      	ldr	r3, [pc, #80]	; (8002580 <MX_TIM6_Init+0x64>)
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <MX_TIM6_Init+0x68>)
 8002530:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8002532:	4b13      	ldr	r3, [pc, #76]	; (8002580 <MX_TIM6_Init+0x64>)
 8002534:	226b      	movs	r2, #107	; 0x6b
 8002536:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002538:	4b11      	ldr	r3, [pc, #68]	; (8002580 <MX_TIM6_Init+0x64>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 800253e:	4b10      	ldr	r3, [pc, #64]	; (8002580 <MX_TIM6_Init+0x64>)
 8002540:	f242 720f 	movw	r2, #9999	; 0x270f
 8002544:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002546:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <MX_TIM6_Init+0x64>)
 8002548:	2200      	movs	r2, #0
 800254a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800254c:	480c      	ldr	r0, [pc, #48]	; (8002580 <MX_TIM6_Init+0x64>)
 800254e:	f003 ffb3 	bl	80064b8 <HAL_TIM_Base_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	2b00      	cmp	r3, #0
 8002556:	d001      	beq.n	800255c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002558:	f000 fa0c 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800255c:	2300      	movs	r3, #0
 800255e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002564:	1d3b      	adds	r3, r7, #4
 8002566:	4619      	mov	r1, r3
 8002568:	4805      	ldr	r0, [pc, #20]	; (8002580 <MX_TIM6_Init+0x64>)
 800256a:	f005 f931 	bl	80077d0 <HAL_TIMEx_MasterConfigSynchronization>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d001      	beq.n	8002578 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002574:	f000 f9fe 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002578:	bf00      	nop
 800257a:	3710      	adds	r7, #16
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	2000025c 	.word	0x2000025c
 8002584:	40001000 	.word	0x40001000

08002588 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800258e:	1d3b      	adds	r3, r7, #4
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <MX_TIM7_Init+0x64>)
 800259a:	4a15      	ldr	r2, [pc, #84]	; (80025f0 <MX_TIM7_Init+0x68>)
 800259c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <MX_TIM7_Init+0x64>)
 80025a0:	226b      	movs	r2, #107	; 0x6b
 80025a2:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <MX_TIM7_Init+0x64>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <MX_TIM7_Init+0x64>)
 80025ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80025b0:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	; (80025ec <MX_TIM7_Init+0x64>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <MX_TIM7_Init+0x64>)
 80025ba:	f003 ff7d 	bl	80064b8 <HAL_TIM_Base_Init>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d001      	beq.n	80025c8 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80025c4:	f000 f9d6 	bl	8002974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80025d0:	1d3b      	adds	r3, r7, #4
 80025d2:	4619      	mov	r1, r3
 80025d4:	4805      	ldr	r0, [pc, #20]	; (80025ec <MX_TIM7_Init+0x64>)
 80025d6:	f005 f8fb 	bl	80077d0 <HAL_TIMEx_MasterConfigSynchronization>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d001      	beq.n	80025e4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80025e0:	f000 f9c8 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80025e4:	bf00      	nop
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	200002a8 	.word	0x200002a8
 80025f0:	40001400 	.word	0x40001400

080025f4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025fa:	463b      	mov	r3, r7
 80025fc:	2200      	movs	r2, #0
 80025fe:	601a      	str	r2, [r3, #0]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	609a      	str	r2, [r3, #8]
 8002604:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <MX_TIM9_Init+0x6c>)
 8002608:	4a16      	ldr	r2, [pc, #88]	; (8002664 <MX_TIM9_Init+0x70>)
 800260a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 800260c:	4b14      	ldr	r3, [pc, #80]	; (8002660 <MX_TIM9_Init+0x6c>)
 800260e:	22d7      	movs	r2, #215	; 0xd7
 8002610:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002612:	4b13      	ldr	r3, [pc, #76]	; (8002660 <MX_TIM9_Init+0x6c>)
 8002614:	2200      	movs	r2, #0
 8002616:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <MX_TIM9_Init+0x6c>)
 800261a:	f240 2231 	movw	r2, #561	; 0x231
 800261e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <MX_TIM9_Init+0x6c>)
 8002622:	2200      	movs	r2, #0
 8002624:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002626:	4b0e      	ldr	r3, [pc, #56]	; (8002660 <MX_TIM9_Init+0x6c>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800262c:	480c      	ldr	r0, [pc, #48]	; (8002660 <MX_TIM9_Init+0x6c>)
 800262e:	f003 ff43 	bl	80064b8 <HAL_TIM_Base_Init>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002638:	f000 f99c 	bl	8002974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800263c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002640:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002642:	463b      	mov	r3, r7
 8002644:	4619      	mov	r1, r3
 8002646:	4806      	ldr	r0, [pc, #24]	; (8002660 <MX_TIM9_Init+0x6c>)
 8002648:	f004 fc12 	bl	8006e70 <HAL_TIM_ConfigClockSource>
 800264c:	4603      	mov	r3, r0
 800264e:	2b00      	cmp	r3, #0
 8002650:	d001      	beq.n	8002656 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002652:	f000 f98f 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8002656:	bf00      	nop
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	200002f4 	.word	0x200002f4
 8002664:	40014000 	.word	0x40014000

08002668 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800266c:	4b14      	ldr	r3, [pc, #80]	; (80026c0 <MX_UART8_Init+0x58>)
 800266e:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <MX_UART8_Init+0x5c>)
 8002670:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8002672:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <MX_UART8_Init+0x58>)
 8002674:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002678:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800267a:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <MX_UART8_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8002680:	4b0f      	ldr	r3, [pc, #60]	; (80026c0 <MX_UART8_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <MX_UART8_Init+0x58>)
 8002688:	2200      	movs	r2, #0
 800268a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800268c:	4b0c      	ldr	r3, [pc, #48]	; (80026c0 <MX_UART8_Init+0x58>)
 800268e:	220c      	movs	r2, #12
 8002690:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002692:	4b0b      	ldr	r3, [pc, #44]	; (80026c0 <MX_UART8_Init+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002698:	4b09      	ldr	r3, [pc, #36]	; (80026c0 <MX_UART8_Init+0x58>)
 800269a:	2200      	movs	r2, #0
 800269c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800269e:	4b08      	ldr	r3, [pc, #32]	; (80026c0 <MX_UART8_Init+0x58>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <MX_UART8_Init+0x58>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 80026aa:	4805      	ldr	r0, [pc, #20]	; (80026c0 <MX_UART8_Init+0x58>)
 80026ac:	f005 f93c 	bl	8007928 <HAL_UART_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_UART8_Init+0x52>
  {
    Error_Handler();
 80026b6:	f000 f95d 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80026ba:	bf00      	nop
 80026bc:	bd80      	pop	{r7, pc}
 80026be:	bf00      	nop
 80026c0:	20000340 	.word	0x20000340
 80026c4:	40007c00 	.word	0x40007c00

080026c8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80026cc:	4b14      	ldr	r3, [pc, #80]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <MX_USART1_UART_Init+0x5c>)
 80026d0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80026d2:	4b13      	ldr	r3, [pc, #76]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026d8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80026da:	4b11      	ldr	r3, [pc, #68]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80026e0:	4b0f      	ldr	r3, [pc, #60]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80026e6:	4b0e      	ldr	r3, [pc, #56]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026ee:	220c      	movs	r2, #12
 80026f0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026f2:	4b0b      	ldr	r3, [pc, #44]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <MX_USART1_UART_Init+0x58>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026fe:	4b08      	ldr	r3, [pc, #32]	; (8002720 <MX_USART1_UART_Init+0x58>)
 8002700:	2200      	movs	r2, #0
 8002702:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002704:	4b06      	ldr	r3, [pc, #24]	; (8002720 <MX_USART1_UART_Init+0x58>)
 8002706:	2200      	movs	r2, #0
 8002708:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800270a:	4805      	ldr	r0, [pc, #20]	; (8002720 <MX_USART1_UART_Init+0x58>)
 800270c:	f005 f90c 	bl	8007928 <HAL_UART_Init>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002716:	f000 f92d 	bl	8002974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800271a:	bf00      	nop
 800271c:	bd80      	pop	{r7, pc}
 800271e:	bf00      	nop
 8002720:	200003c4 	.word	0x200003c4
 8002724:	40011000 	.word	0x40011000

08002728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08c      	sub	sp, #48	; 0x30
 800272c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800273e:	4b86      	ldr	r3, [pc, #536]	; (8002958 <MX_GPIO_Init+0x230>)
 8002740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002742:	4a85      	ldr	r2, [pc, #532]	; (8002958 <MX_GPIO_Init+0x230>)
 8002744:	f043 0320 	orr.w	r3, r3, #32
 8002748:	6313      	str	r3, [r2, #48]	; 0x30
 800274a:	4b83      	ldr	r3, [pc, #524]	; (8002958 <MX_GPIO_Init+0x230>)
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f003 0320 	and.w	r3, r3, #32
 8002752:	61bb      	str	r3, [r7, #24]
 8002754:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002756:	4b80      	ldr	r3, [pc, #512]	; (8002958 <MX_GPIO_Init+0x230>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275a:	4a7f      	ldr	r2, [pc, #508]	; (8002958 <MX_GPIO_Init+0x230>)
 800275c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002760:	6313      	str	r3, [r2, #48]	; 0x30
 8002762:	4b7d      	ldr	r3, [pc, #500]	; (8002958 <MX_GPIO_Init+0x230>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800276e:	4b7a      	ldr	r3, [pc, #488]	; (8002958 <MX_GPIO_Init+0x230>)
 8002770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002772:	4a79      	ldr	r2, [pc, #484]	; (8002958 <MX_GPIO_Init+0x230>)
 8002774:	f043 0301 	orr.w	r3, r3, #1
 8002778:	6313      	str	r3, [r2, #48]	; 0x30
 800277a:	4b77      	ldr	r3, [pc, #476]	; (8002958 <MX_GPIO_Init+0x230>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002786:	4b74      	ldr	r3, [pc, #464]	; (8002958 <MX_GPIO_Init+0x230>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	4a73      	ldr	r2, [pc, #460]	; (8002958 <MX_GPIO_Init+0x230>)
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	6313      	str	r3, [r2, #48]	; 0x30
 8002792:	4b71      	ldr	r3, [pc, #452]	; (8002958 <MX_GPIO_Init+0x230>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	60fb      	str	r3, [r7, #12]
 800279c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800279e:	4b6e      	ldr	r3, [pc, #440]	; (8002958 <MX_GPIO_Init+0x230>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a2:	4a6d      	ldr	r2, [pc, #436]	; (8002958 <MX_GPIO_Init+0x230>)
 80027a4:	f043 0302 	orr.w	r3, r3, #2
 80027a8:	6313      	str	r3, [r2, #48]	; 0x30
 80027aa:	4b6b      	ldr	r3, [pc, #428]	; (8002958 <MX_GPIO_Init+0x230>)
 80027ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027b6:	4b68      	ldr	r3, [pc, #416]	; (8002958 <MX_GPIO_Init+0x230>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a67      	ldr	r2, [pc, #412]	; (8002958 <MX_GPIO_Init+0x230>)
 80027bc:	f043 0308 	orr.w	r3, r3, #8
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <MX_GPIO_Init+0x230>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0308 	and.w	r3, r3, #8
 80027ca:	607b      	str	r3, [r7, #4]
 80027cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80027ce:	4b62      	ldr	r3, [pc, #392]	; (8002958 <MX_GPIO_Init+0x230>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a61      	ldr	r2, [pc, #388]	; (8002958 <MX_GPIO_Init+0x230>)
 80027d4:	f043 0304 	orr.w	r3, r3, #4
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b5f      	ldr	r3, [pc, #380]	; (8002958 <MX_GPIO_Init+0x230>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0304 	and.w	r3, r3, #4
 80027e2:	603b      	str	r3, [r7, #0]
 80027e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80027e6:	2200      	movs	r2, #0
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	485c      	ldr	r0, [pc, #368]	; (800295c <MX_GPIO_Init+0x234>)
 80027ec:	f002 fd0e 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 80027f0:	2200      	movs	r2, #0
 80027f2:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80027f6:	485a      	ldr	r0, [pc, #360]	; (8002960 <MX_GPIO_Init+0x238>)
 80027f8:	f002 fd08 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 80027fc:	2200      	movs	r2, #0
 80027fe:	f44f 7190 	mov.w	r1, #288	; 0x120
 8002802:	4858      	ldr	r0, [pc, #352]	; (8002964 <MX_GPIO_Init+0x23c>)
 8002804:	f002 fd02 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8002808:	2200      	movs	r2, #0
 800280a:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 800280e:	4856      	ldr	r0, [pc, #344]	; (8002968 <MX_GPIO_Init+0x240>)
 8002810:	f002 fcfc 	bl	800520c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002818:	2301      	movs	r3, #1
 800281a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800281c:	2300      	movs	r3, #0
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002820:	2300      	movs	r3, #0
 8002822:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002824:	f107 031c 	add.w	r3, r7, #28
 8002828:	4619      	mov	r1, r3
 800282a:	484c      	ldr	r0, [pc, #304]	; (800295c <MX_GPIO_Init+0x234>)
 800282c:	f002 fb42 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8002830:	231e      	movs	r3, #30
 8002832:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002834:	2303      	movs	r3, #3
 8002836:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002838:	2300      	movs	r3, #0
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800283c:	f107 031c 	add.w	r3, r7, #28
 8002840:	4619      	mov	r1, r3
 8002842:	484a      	ldr	r0, [pc, #296]	; (800296c <MX_GPIO_Init+0x244>)
 8002844:	f002 fb36 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002848:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284e:	2300      	movs	r3, #0
 8002850:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002856:	f107 031c 	add.w	r3, r7, #28
 800285a:	4619      	mov	r1, r3
 800285c:	4844      	ldr	r0, [pc, #272]	; (8002970 <MX_GPIO_Init+0x248>)
 800285e:	f002 fb29 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8002862:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8002866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002868:	2301      	movs	r3, #1
 800286a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800286c:	2300      	movs	r3, #0
 800286e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002870:	2300      	movs	r3, #0
 8002872:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002874:	f107 031c 	add.w	r3, r7, #28
 8002878:	4619      	mov	r1, r3
 800287a:	4839      	ldr	r0, [pc, #228]	; (8002960 <MX_GPIO_Init+0x238>)
 800287c:	f002 fb1a 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8002880:	f44f 7390 	mov.w	r3, #288	; 0x120
 8002884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002886:	2301      	movs	r3, #1
 8002888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800288e:	2300      	movs	r3, #0
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002892:	f107 031c 	add.w	r3, r7, #28
 8002896:	4619      	mov	r1, r3
 8002898:	4832      	ldr	r0, [pc, #200]	; (8002964 <MX_GPIO_Init+0x23c>)
 800289a:	f002 fb0b 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 800289e:	f44f 7301 	mov.w	r3, #516	; 0x204
 80028a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80028a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028aa:	2300      	movs	r3, #0
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028ae:	f107 031c 	add.w	r3, r7, #28
 80028b2:	4619      	mov	r1, r3
 80028b4:	482b      	ldr	r0, [pc, #172]	; (8002964 <MX_GPIO_Init+0x23c>)
 80028b6:	f002 fafd 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80028ba:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80028be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028c0:	2302      	movs	r3, #2
 80028c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c4:	2300      	movs	r3, #0
 80028c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028c8:	2300      	movs	r3, #0
 80028ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80028cc:	2302      	movs	r3, #2
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028d0:	f107 031c 	add.w	r3, r7, #28
 80028d4:	4619      	mov	r1, r3
 80028d6:	4823      	ldr	r0, [pc, #140]	; (8002964 <MX_GPIO_Init+0x23c>)
 80028d8:	f002 faec 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 80028dc:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80028e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e2:	2301      	movs	r3, #1
 80028e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ea:	2300      	movs	r3, #0
 80028ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ee:	f107 031c 	add.w	r3, r7, #28
 80028f2:	4619      	mov	r1, r3
 80028f4:	481c      	ldr	r0, [pc, #112]	; (8002968 <MX_GPIO_Init+0x240>)
 80028f6:	f002 fadd 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80028fa:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002900:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002904:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800290a:	f107 031c 	add.w	r3, r7, #28
 800290e:	4619      	mov	r1, r3
 8002910:	4815      	ldr	r0, [pc, #84]	; (8002968 <MX_GPIO_Init+0x240>)
 8002912:	f002 facf 	bl	8004eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 8002916:	2340      	movs	r3, #64	; 0x40
 8002918:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800291a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800291e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002920:	2301      	movs	r3, #1
 8002922:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 8002924:	f107 031c 	add.w	r3, r7, #28
 8002928:	4619      	mov	r1, r3
 800292a:	480e      	ldr	r0, [pc, #56]	; (8002964 <MX_GPIO_Init+0x23c>)
 800292c:	f002 fac2 	bl	8004eb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002930:	2200      	movs	r2, #0
 8002932:	2100      	movs	r1, #0
 8002934:	2017      	movs	r0, #23
 8002936:	f002 f9f4 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800293a:	2017      	movs	r0, #23
 800293c:	f002 fa0d 	bl	8004d5a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002940:	2200      	movs	r2, #0
 8002942:	2100      	movs	r1, #0
 8002944:	2028      	movs	r0, #40	; 0x28
 8002946:	f002 f9ec 	bl	8004d22 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800294a:	2028      	movs	r0, #40	; 0x28
 800294c:	f002 fa05 	bl	8004d5a <HAL_NVIC_EnableIRQ>

}
 8002950:	bf00      	nop
 8002952:	3730      	adds	r7, #48	; 0x30
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	40023800 	.word	0x40023800
 800295c:	40021400 	.word	0x40021400
 8002960:	40020400 	.word	0x40020400
 8002964:	40020c00 	.word	0x40020c00
 8002968:	40020800 	.word	0x40020800
 800296c:	40020000 	.word	0x40020000
 8002970:	40021000 	.word	0x40021000

08002974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002974:	b480      	push	{r7}
 8002976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002978:	b672      	cpsid	i
}
 800297a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800297c:	e7fe      	b.n	800297c <Error_Handler+0x8>

0800297e <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 800297e:	b580      	push	{r7, lr}
 8002980:	b084      	sub	sp, #16
 8002982:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	60fa      	str	r2, [r7, #12]
 800298e:	3310      	adds	r3, #16
 8002990:	443b      	add	r3, r7
 8002992:	222f      	movs	r2, #47	; 0x2f
 8002994:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	1c5a      	adds	r2, r3, #1
 800299c:	60fa      	str	r2, [r7, #12]
 800299e:	3310      	adds	r3, #16
 80029a0:	443b      	add	r3, r7
 80029a2:	2260      	movs	r2, #96	; 0x60
 80029a4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1c5a      	adds	r2, r3, #1
 80029ac:	60fa      	str	r2, [r7, #12]
 80029ae:	3310      	adds	r3, #16
 80029b0:	443b      	add	r3, r7
 80029b2:	2260      	movs	r2, #96	; 0x60
 80029b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	60fa      	str	r2, [r7, #12]
 80029be:	3310      	adds	r3, #16
 80029c0:	443b      	add	r3, r7
 80029c2:	2200      	movs	r2, #0
 80029c4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	60fa      	str	r2, [r7, #12]
 80029ce:	3310      	adds	r3, #16
 80029d0:	443b      	add	r3, r7
 80029d2:	2203      	movs	r2, #3
 80029d4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	60fa      	str	r2, [r7, #12]
 80029de:	3310      	adds	r3, #16
 80029e0:	443b      	add	r3, r7
 80029e2:	2200      	movs	r2, #0
 80029e4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	60fa      	str	r2, [r7, #12]
 80029ee:	3310      	adds	r3, #16
 80029f0:	443b      	add	r3, r7
 80029f2:	2200      	movs	r2, #0
 80029f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80029f8:	1d3a      	adds	r2, r7, #4
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	2200      	movs	r2, #0
 8002a00:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002a02:	1d39      	adds	r1, r7, #4
 8002a04:	2300      	movs	r3, #0
 8002a06:	2208      	movs	r2, #8
 8002a08:	f240 6001 	movw	r0, #1537	; 0x601
 8002a0c:	f7ff fb78 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002a10:	2064      	movs	r0, #100	; 0x64
 8002a12:	f001 f9ef 	bl	8003df4 <HAL_Delay>
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}

08002a1e <synchronousMode>:

void synchronousMode()
{
 8002a1e:	b580      	push	{r7, lr}
 8002a20:	b084      	sub	sp, #16
 8002a22:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1c5a      	adds	r2, r3, #1
 8002a2c:	60fa      	str	r2, [r7, #12]
 8002a2e:	3310      	adds	r3, #16
 8002a30:	443b      	add	r3, r7
 8002a32:	222b      	movs	r2, #43	; 0x2b
 8002a34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	60fa      	str	r2, [r7, #12]
 8002a3e:	3310      	adds	r3, #16
 8002a40:	443b      	add	r3, r7
 8002a42:	220f      	movs	r2, #15
 8002a44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	60fa      	str	r2, [r7, #12]
 8002a4e:	3310      	adds	r3, #16
 8002a50:	443b      	add	r3, r7
 8002a52:	2220      	movs	r2, #32
 8002a54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	1c5a      	adds	r2, r3, #1
 8002a5c:	60fa      	str	r2, [r7, #12]
 8002a5e:	3310      	adds	r3, #16
 8002a60:	443b      	add	r3, r7
 8002a62:	2200      	movs	r2, #0
 8002a64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	1c5a      	adds	r2, r3, #1
 8002a6c:	60fa      	str	r2, [r7, #12]
 8002a6e:	3310      	adds	r3, #16
 8002a70:	443b      	add	r3, r7
 8002a72:	2201      	movs	r2, #1
 8002a74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	60fa      	str	r2, [r7, #12]
 8002a7e:	3310      	adds	r3, #16
 8002a80:	443b      	add	r3, r7
 8002a82:	2200      	movs	r2, #0
 8002a84:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1c5a      	adds	r2, r3, #1
 8002a8c:	60fa      	str	r2, [r7, #12]
 8002a8e:	3310      	adds	r3, #16
 8002a90:	443b      	add	r3, r7
 8002a92:	2200      	movs	r2, #0
 8002a94:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002a98:	1d3a      	adds	r2, r7, #4
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002aa2:	1d39      	adds	r1, r7, #4
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2208      	movs	r2, #8
 8002aa8:	f240 6001 	movw	r0, #1537	; 0x601
 8002aac:	f7ff fb28 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002ab0:	2064      	movs	r0, #100	; 0x64
 8002ab2:	f001 f99f 	bl	8003df4 <HAL_Delay>
}
 8002ab6:	bf00      	nop
 8002ab8:	3710      	adds	r7, #16
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <settingEnc>:

void settingEnc(int16_t enc)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b086      	sub	sp, #24
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002ac8:	2300      	movs	r3, #0
 8002aca:	617b      	str	r3, [r7, #20]
 8002acc:	e055      	b.n	8002b7a <settingEnc+0xbc>
    {
        int index = 0;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1c5a      	adds	r2, r3, #1
 8002ad6:	613a      	str	r2, [r7, #16]
 8002ad8:	3318      	adds	r3, #24
 8002ada:	443b      	add	r3, r7
 8002adc:	222b      	movs	r2, #43	; 0x2b
 8002ade:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1c5a      	adds	r2, r3, #1
 8002ae6:	613a      	str	r2, [r7, #16]
 8002ae8:	3318      	adds	r3, #24
 8002aea:	443b      	add	r3, r7
 8002aec:	220e      	movs	r2, #14
 8002aee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	1c5a      	adds	r2, r3, #1
 8002af6:	613a      	str	r2, [r7, #16]
 8002af8:	3318      	adds	r3, #24
 8002afa:	443b      	add	r3, r7
 8002afc:	2220      	movs	r2, #32
 8002afe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	b2da      	uxtb	r2, r3
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1c59      	adds	r1, r3, #1
 8002b0a:	6139      	str	r1, [r7, #16]
 8002b0c:	3201      	adds	r2, #1
 8002b0e:	b2d2      	uxtb	r2, r2
 8002b10:	3318      	adds	r3, #24
 8002b12:	443b      	add	r3, r7
 8002b14:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1c5a      	adds	r2, r3, #1
 8002b1c:	613a      	str	r2, [r7, #16]
 8002b1e:	88fa      	ldrh	r2, [r7, #6]
 8002b20:	b2d2      	uxtb	r2, r2
 8002b22:	3318      	adds	r3, #24
 8002b24:	443b      	add	r3, r7
 8002b26:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 8002b2a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b2e:	121b      	asrs	r3, r3, #8
 8002b30:	b219      	sxth	r1, r3
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1c5a      	adds	r2, r3, #1
 8002b36:	613a      	str	r2, [r7, #16]
 8002b38:	b2ca      	uxtb	r2, r1
 8002b3a:	3318      	adds	r3, #24
 8002b3c:	443b      	add	r3, r7
 8002b3e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1c5a      	adds	r2, r3, #1
 8002b46:	613a      	str	r2, [r7, #16]
 8002b48:	3318      	adds	r3, #24
 8002b4a:	443b      	add	r3, r7
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002b52:	f107 0208 	add.w	r2, r7, #8
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002b5e:	f107 0108 	add.w	r1, r7, #8
 8002b62:	2300      	movs	r3, #0
 8002b64:	2208      	movs	r2, #8
 8002b66:	f240 6001 	movw	r0, #1537	; 0x601
 8002b6a:	f7ff fac9 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002b6e:	2064      	movs	r0, #100	; 0x64
 8002b70:	f001 f940 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	3301      	adds	r3, #1
 8002b78:	617b      	str	r3, [r7, #20]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	dda6      	ble.n	8002ace <settingEnc+0x10>
    }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <settingPole>:

void settingPole(int16_t pole)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b086      	sub	sp, #24
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	4603      	mov	r3, r0
 8002b92:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002b94:	2300      	movs	r3, #0
 8002b96:	617b      	str	r3, [r7, #20]
 8002b98:	e055      	b.n	8002c46 <settingPole+0xbc>
    {
        int index = 0;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	613a      	str	r2, [r7, #16]
 8002ba4:	3318      	adds	r3, #24
 8002ba6:	443b      	add	r3, r7
 8002ba8:	222b      	movs	r2, #43	; 0x2b
 8002baa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	613a      	str	r2, [r7, #16]
 8002bb4:	3318      	adds	r3, #24
 8002bb6:	443b      	add	r3, r7
 8002bb8:	220c      	movs	r2, #12
 8002bba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1c5a      	adds	r2, r3, #1
 8002bc2:	613a      	str	r2, [r7, #16]
 8002bc4:	3318      	adds	r3, #24
 8002bc6:	443b      	add	r3, r7
 8002bc8:	2220      	movs	r2, #32
 8002bca:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1c59      	adds	r1, r3, #1
 8002bd6:	6139      	str	r1, [r7, #16]
 8002bd8:	3201      	adds	r2, #1
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	3318      	adds	r3, #24
 8002bde:	443b      	add	r3, r7
 8002be0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	1c5a      	adds	r2, r3, #1
 8002be8:	613a      	str	r2, [r7, #16]
 8002bea:	88fa      	ldrh	r2, [r7, #6]
 8002bec:	b2d2      	uxtb	r2, r2
 8002bee:	3318      	adds	r3, #24
 8002bf0:	443b      	add	r3, r7
 8002bf2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 8002bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bfa:	121b      	asrs	r3, r3, #8
 8002bfc:	b219      	sxth	r1, r3
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1c5a      	adds	r2, r3, #1
 8002c02:	613a      	str	r2, [r7, #16]
 8002c04:	b2ca      	uxtb	r2, r1
 8002c06:	3318      	adds	r3, #24
 8002c08:	443b      	add	r3, r7
 8002c0a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	613a      	str	r2, [r7, #16]
 8002c14:	3318      	adds	r3, #24
 8002c16:	443b      	add	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002c1e:	f107 0208 	add.w	r2, r7, #8
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	4413      	add	r3, r2
 8002c26:	2200      	movs	r2, #0
 8002c28:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002c2a:	f107 0108 	add.w	r1, r7, #8
 8002c2e:	2300      	movs	r3, #0
 8002c30:	2208      	movs	r2, #8
 8002c32:	f240 6001 	movw	r0, #1537	; 0x601
 8002c36:	f7ff fa63 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002c3a:	2064      	movs	r0, #100	; 0x64
 8002c3c:	f001 f8da 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	3301      	adds	r3, #1
 8002c44:	617b      	str	r3, [r7, #20]
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	dda6      	ble.n	8002b9a <settingPole+0x10>
    }
}
 8002c4c:	bf00      	nop
 8002c4e:	bf00      	nop
 8002c50:	3718      	adds	r7, #24
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}

08002c56 <settingBreak>:

void settingBreak(uint8_t enable)
{
 8002c56:	b580      	push	{r7, lr}
 8002c58:	b086      	sub	sp, #24
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	617a      	str	r2, [r7, #20]
 8002c6a:	3318      	adds	r3, #24
 8002c6c:	443b      	add	r3, r7
 8002c6e:	222b      	movs	r2, #43	; 0x2b
 8002c70:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	617a      	str	r2, [r7, #20]
 8002c7a:	3318      	adds	r3, #24
 8002c7c:	443b      	add	r3, r7
 8002c7e:	2207      	movs	r2, #7
 8002c80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	617a      	str	r2, [r7, #20]
 8002c8a:	3318      	adds	r3, #24
 8002c8c:	443b      	add	r3, r7
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	617a      	str	r2, [r7, #20]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	443b      	add	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8002ca4:	697b      	ldr	r3, [r7, #20]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	617a      	str	r2, [r7, #20]
 8002caa:	3318      	adds	r3, #24
 8002cac:	443b      	add	r3, r7
 8002cae:	79fa      	ldrb	r2, [r7, #7]
 8002cb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	617a      	str	r2, [r7, #20]
 8002cba:	3318      	adds	r3, #24
 8002cbc:	443b      	add	r3, r7
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	617a      	str	r2, [r7, #20]
 8002cca:	3318      	adds	r3, #24
 8002ccc:	443b      	add	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002cd4:	f107 020c 	add.w	r2, r7, #12
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	4413      	add	r3, r2
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002ce0:	f107 010c 	add.w	r1, r7, #12
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	f240 6001 	movw	r0, #1537	; 0x601
 8002cec:	f7ff fa08 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002cf0:	2064      	movs	r0, #100	; 0x64
 8002cf2:	f001 f87f 	bl	8003df4 <HAL_Delay>
}
 8002cf6:	bf00      	nop
 8002cf8:	3718      	adds	r7, #24
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	4603      	mov	r3, r0
 8002d06:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	1c5a      	adds	r2, r3, #1
 8002d10:	617a      	str	r2, [r7, #20]
 8002d12:	3318      	adds	r3, #24
 8002d14:	443b      	add	r3, r7
 8002d16:	222b      	movs	r2, #43	; 0x2b
 8002d18:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	1c5a      	adds	r2, r3, #1
 8002d20:	617a      	str	r2, [r7, #20]
 8002d22:	3318      	adds	r3, #24
 8002d24:	443b      	add	r3, r7
 8002d26:	2208      	movs	r2, #8
 8002d28:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	617a      	str	r2, [r7, #20]
 8002d32:	3318      	adds	r3, #24
 8002d34:	443b      	add	r3, r7
 8002d36:	2220      	movs	r2, #32
 8002d38:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	617a      	str	r2, [r7, #20]
 8002d42:	3318      	adds	r3, #24
 8002d44:	443b      	add	r3, r7
 8002d46:	2200      	movs	r2, #0
 8002d48:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	1c5a      	adds	r2, r3, #1
 8002d50:	617a      	str	r2, [r7, #20]
 8002d52:	88fa      	ldrh	r2, [r7, #6]
 8002d54:	b2d2      	uxtb	r2, r2
 8002d56:	3318      	adds	r3, #24
 8002d58:	443b      	add	r3, r7
 8002d5a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8002d5e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d62:	121b      	asrs	r3, r3, #8
 8002d64:	b219      	sxth	r1, r3
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	617a      	str	r2, [r7, #20]
 8002d6c:	b2ca      	uxtb	r2, r1
 8002d6e:	3318      	adds	r3, #24
 8002d70:	443b      	add	r3, r7
 8002d72:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	617a      	str	r2, [r7, #20]
 8002d7c:	3318      	adds	r3, #24
 8002d7e:	443b      	add	r3, r7
 8002d80:	2200      	movs	r2, #0
 8002d82:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002d86:	f107 020c 	add.w	r2, r7, #12
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	4413      	add	r3, r2
 8002d8e:	2200      	movs	r2, #0
 8002d90:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002d92:	f107 010c 	add.w	r1, r7, #12
 8002d96:	2300      	movs	r3, #0
 8002d98:	2208      	movs	r2, #8
 8002d9a:	f240 6001 	movw	r0, #1537	; 0x601
 8002d9e:	f7ff f9af 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002da2:	2064      	movs	r0, #100	; 0x64
 8002da4:	f001 f826 	bl	8003df4 <HAL_Delay>
}
 8002da8:	bf00      	nop
 8002daa:	3718      	adds	r7, #24
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8002dba:	2300      	movs	r3, #0
 8002dbc:	617b      	str	r3, [r7, #20]
 8002dbe:	e05e      	b.n	8002e7e <settingRatedCurrent+0xce>
    {
        int index = 0;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1c5a      	adds	r2, r3, #1
 8002dc8:	613a      	str	r2, [r7, #16]
 8002dca:	3318      	adds	r3, #24
 8002dcc:	443b      	add	r3, r7
 8002dce:	222b      	movs	r2, #43	; 0x2b
 8002dd0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1c5a      	adds	r2, r3, #1
 8002dd8:	613a      	str	r2, [r7, #16]
 8002dda:	3318      	adds	r3, #24
 8002ddc:	443b      	add	r3, r7
 8002dde:	2214      	movs	r2, #20
 8002de0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	613a      	str	r2, [r7, #16]
 8002dea:	3318      	adds	r3, #24
 8002dec:	443b      	add	r3, r7
 8002dee:	2220      	movs	r2, #32
 8002df0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	b2da      	uxtb	r2, r3
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	1c59      	adds	r1, r3, #1
 8002dfc:	6139      	str	r1, [r7, #16]
 8002dfe:	3201      	adds	r2, #1
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	3318      	adds	r3, #24
 8002e04:	443b      	add	r3, r7
 8002e06:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8002e0a:	f04f 0200 	mov.w	r2, #0
 8002e0e:	4b20      	ldr	r3, [pc, #128]	; (8002e90 <settingRatedCurrent+0xe0>)
 8002e10:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002e14:	f7fd fc08 	bl	8000628 <__aeabi_dmul>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4610      	mov	r0, r2
 8002e1e:	4619      	mov	r1, r3
 8002e20:	f7fd fe14 	bl	8000a4c <__aeabi_d2iz>
 8002e24:	4601      	mov	r1, r0
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	613a      	str	r2, [r7, #16]
 8002e2c:	b2ca      	uxtb	r2, r1
 8002e2e:	3318      	adds	r3, #24
 8002e30:	443b      	add	r3, r7
 8002e32:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	1c5a      	adds	r2, r3, #1
 8002e3a:	613a      	str	r2, [r7, #16]
 8002e3c:	3318      	adds	r3, #24
 8002e3e:	443b      	add	r3, r7
 8002e40:	2200      	movs	r2, #0
 8002e42:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	1c5a      	adds	r2, r3, #1
 8002e4a:	613a      	str	r2, [r7, #16]
 8002e4c:	3318      	adds	r3, #24
 8002e4e:	443b      	add	r3, r7
 8002e50:	2200      	movs	r2, #0
 8002e52:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002e56:	f107 0208 	add.w	r2, r7, #8
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002e62:	f107 0108 	add.w	r1, r7, #8
 8002e66:	2300      	movs	r3, #0
 8002e68:	2208      	movs	r2, #8
 8002e6a:	f240 6001 	movw	r0, #1537	; 0x601
 8002e6e:	f7ff f947 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002e72:	2064      	movs	r0, #100	; 0x64
 8002e74:	f000 ffbe 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	617b      	str	r3, [r7, #20]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	dd9d      	ble.n	8002dc0 <settingRatedCurrent+0x10>
    }
}
 8002e84:	bf00      	nop
 8002e86:	bf00      	nop
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40240000 	.word	0x40240000

08002e94 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	617b      	str	r3, [r7, #20]
 8002ea2:	e05e      	b.n	8002f62 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	613a      	str	r2, [r7, #16]
 8002eae:	3318      	adds	r3, #24
 8002eb0:	443b      	add	r3, r7
 8002eb2:	222b      	movs	r2, #43	; 0x2b
 8002eb4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	613a      	str	r2, [r7, #16]
 8002ebe:	3318      	adds	r3, #24
 8002ec0:	443b      	add	r3, r7
 8002ec2:	2215      	movs	r2, #21
 8002ec4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	613a      	str	r2, [r7, #16]
 8002ece:	3318      	adds	r3, #24
 8002ed0:	443b      	add	r3, r7
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	b2da      	uxtb	r2, r3
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	1c59      	adds	r1, r3, #1
 8002ee0:	6139      	str	r1, [r7, #16]
 8002ee2:	3201      	adds	r2, #1
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	3318      	adds	r3, #24
 8002ee8:	443b      	add	r3, r7
 8002eea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8002eee:	f04f 0200 	mov.w	r2, #0
 8002ef2:	4b20      	ldr	r3, [pc, #128]	; (8002f74 <settingMaxCurrent+0xe0>)
 8002ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002ef8:	f7fd fb96 	bl	8000628 <__aeabi_dmul>
 8002efc:	4602      	mov	r2, r0
 8002efe:	460b      	mov	r3, r1
 8002f00:	4610      	mov	r0, r2
 8002f02:	4619      	mov	r1, r3
 8002f04:	f7fd fda2 	bl	8000a4c <__aeabi_d2iz>
 8002f08:	4601      	mov	r1, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	613a      	str	r2, [r7, #16]
 8002f10:	b2ca      	uxtb	r2, r1
 8002f12:	3318      	adds	r3, #24
 8002f14:	443b      	add	r3, r7
 8002f16:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	1c5a      	adds	r2, r3, #1
 8002f1e:	613a      	str	r2, [r7, #16]
 8002f20:	3318      	adds	r3, #24
 8002f22:	443b      	add	r3, r7
 8002f24:	2200      	movs	r2, #0
 8002f26:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	613a      	str	r2, [r7, #16]
 8002f30:	3318      	adds	r3, #24
 8002f32:	443b      	add	r3, r7
 8002f34:	2200      	movs	r2, #0
 8002f36:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002f3a:	f107 0208 	add.w	r2, r7, #8
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	4413      	add	r3, r2
 8002f42:	2200      	movs	r2, #0
 8002f44:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002f46:	f107 0108 	add.w	r1, r7, #8
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	f240 6001 	movw	r0, #1537	; 0x601
 8002f52:	f7ff f8d5 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002f56:	2064      	movs	r0, #100	; 0x64
 8002f58:	f000 ff4c 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002f5c:	697b      	ldr	r3, [r7, #20]
 8002f5e:	3301      	adds	r3, #1
 8002f60:	617b      	str	r3, [r7, #20]
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	dd9d      	ble.n	8002ea4 <settingMaxCurrent+0x10>
    }
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40240000 	.word	0x40240000

08002f78 <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b086      	sub	sp, #24
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	4603      	mov	r3, r0
 8002f80:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e055      	b.n	8003034 <settingHallOffset+0xbc>
    {
        int index = 0;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	1c5a      	adds	r2, r3, #1
 8002f90:	613a      	str	r2, [r7, #16]
 8002f92:	3318      	adds	r3, #24
 8002f94:	443b      	add	r3, r7
 8002f96:	222b      	movs	r2, #43	; 0x2b
 8002f98:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	1c5a      	adds	r2, r3, #1
 8002fa0:	613a      	str	r2, [r7, #16]
 8002fa2:	3318      	adds	r3, #24
 8002fa4:	443b      	add	r3, r7
 8002fa6:	2211      	movs	r2, #17
 8002fa8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	613a      	str	r2, [r7, #16]
 8002fb2:	3318      	adds	r3, #24
 8002fb4:	443b      	add	r3, r7
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	b2da      	uxtb	r2, r3
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1c59      	adds	r1, r3, #1
 8002fc4:	6139      	str	r1, [r7, #16]
 8002fc6:	3201      	adds	r2, #1
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	3318      	adds	r3, #24
 8002fcc:	443b      	add	r3, r7
 8002fce:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	613a      	str	r2, [r7, #16]
 8002fd8:	88fa      	ldrh	r2, [r7, #6]
 8002fda:	b2d2      	uxtb	r2, r2
 8002fdc:	3318      	adds	r3, #24
 8002fde:	443b      	add	r3, r7
 8002fe0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 8002fe4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002fe8:	121b      	asrs	r3, r3, #8
 8002fea:	b219      	sxth	r1, r3
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	613a      	str	r2, [r7, #16]
 8002ff2:	b2ca      	uxtb	r2, r1
 8002ff4:	3318      	adds	r3, #24
 8002ff6:	443b      	add	r3, r7
 8002ff8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1c5a      	adds	r2, r3, #1
 8003000:	613a      	str	r2, [r7, #16]
 8003002:	3318      	adds	r3, #24
 8003004:	443b      	add	r3, r7
 8003006:	2200      	movs	r2, #0
 8003008:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800300c:	f107 0208 	add.w	r2, r7, #8
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	4413      	add	r3, r2
 8003014:	2200      	movs	r2, #0
 8003016:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003018:	f107 0108 	add.w	r1, r7, #8
 800301c:	2300      	movs	r3, #0
 800301e:	2208      	movs	r2, #8
 8003020:	f240 6001 	movw	r0, #1537	; 0x601
 8003024:	f7ff f86c 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003028:	2064      	movs	r0, #100	; 0x64
 800302a:	f000 fee3 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	3301      	adds	r3, #1
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b01      	cmp	r3, #1
 8003038:	dda6      	ble.n	8002f88 <settingHallOffset+0x10>
    }
}
 800303a:	bf00      	nop
 800303c:	bf00      	nop
 800303e:	3718      	adds	r7, #24
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <save>:

void save()
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b084      	sub	sp, #16
 8003048:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	60fa      	str	r2, [r7, #12]
 8003054:	3310      	adds	r3, #16
 8003056:	443b      	add	r3, r7
 8003058:	222b      	movs	r2, #43	; 0x2b
 800305a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	1c5a      	adds	r2, r3, #1
 8003062:	60fa      	str	r2, [r7, #12]
 8003064:	3310      	adds	r3, #16
 8003066:	443b      	add	r3, r7
 8003068:	2210      	movs	r2, #16
 800306a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1c5a      	adds	r2, r3, #1
 8003072:	60fa      	str	r2, [r7, #12]
 8003074:	3310      	adds	r3, #16
 8003076:	443b      	add	r3, r7
 8003078:	2220      	movs	r2, #32
 800307a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	1c5a      	adds	r2, r3, #1
 8003082:	60fa      	str	r2, [r7, #12]
 8003084:	3310      	adds	r3, #16
 8003086:	443b      	add	r3, r7
 8003088:	2200      	movs	r2, #0
 800308a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	60fa      	str	r2, [r7, #12]
 8003094:	3310      	adds	r3, #16
 8003096:	443b      	add	r3, r7
 8003098:	2201      	movs	r2, #1
 800309a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	1c5a      	adds	r2, r3, #1
 80030a2:	60fa      	str	r2, [r7, #12]
 80030a4:	3310      	adds	r3, #16
 80030a6:	443b      	add	r3, r7
 80030a8:	2200      	movs	r2, #0
 80030aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	1c5a      	adds	r2, r3, #1
 80030b2:	60fa      	str	r2, [r7, #12]
 80030b4:	3310      	adds	r3, #16
 80030b6:	443b      	add	r3, r7
 80030b8:	2200      	movs	r2, #0
 80030ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80030be:	1d3a      	adds	r2, r7, #4
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4413      	add	r3, r2
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
    index = 0;
 80030c8:	2300      	movs	r3, #0
 80030ca:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80030cc:	1d39      	adds	r1, r7, #4
 80030ce:	2300      	movs	r3, #0
 80030d0:	2208      	movs	r2, #8
 80030d2:	f240 6001 	movw	r0, #1537	; 0x601
 80030d6:	f7ff f813 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80030da:	2064      	movs	r0, #100	; 0x64
 80030dc:	f000 fe8a 	bl	8003df4 <HAL_Delay>
}
 80030e0:	bf00      	nop
 80030e2:	3710      	adds	r7, #16
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}

080030e8 <startMotor>:



void startMotor()
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
    enable();
 80030ec:	f000 f806 	bl	80030fc <enable>
    velocityMode();
 80030f0:	f7ff fc45 	bl	800297e <velocityMode>
    synchronousMode();
 80030f4:	f7ff fc93 	bl	8002a1e <synchronousMode>
}
 80030f8:	bf00      	nop
 80030fa:	bd80      	pop	{r7, pc}

080030fc <enable>:

void enable()
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 8003102:	4b2f      	ldr	r3, [pc, #188]	; (80031c0 <enable+0xc4>)
 8003104:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 8003106:	2300      	movs	r3, #0
 8003108:	617b      	str	r3, [r7, #20]
 800310a:	e050      	b.n	80031ae <enable+0xb2>
    {
        int index = 0;
 800310c:	2300      	movs	r3, #0
 800310e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1c5a      	adds	r2, r3, #1
 8003114:	613a      	str	r2, [r7, #16]
 8003116:	3318      	adds	r3, #24
 8003118:	443b      	add	r3, r7
 800311a:	222b      	movs	r2, #43	; 0x2b
 800311c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1c5a      	adds	r2, r3, #1
 8003124:	613a      	str	r2, [r7, #16]
 8003126:	3318      	adds	r3, #24
 8003128:	443b      	add	r3, r7
 800312a:	2240      	movs	r2, #64	; 0x40
 800312c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	613a      	str	r2, [r7, #16]
 8003136:	3318      	adds	r3, #24
 8003138:	443b      	add	r3, r7
 800313a:	2260      	movs	r2, #96	; 0x60
 800313c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1c5a      	adds	r2, r3, #1
 8003144:	613a      	str	r2, [r7, #16]
 8003146:	3318      	adds	r3, #24
 8003148:	443b      	add	r3, r7
 800314a:	2200      	movs	r2, #0
 800314c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8003150:	693b      	ldr	r3, [r7, #16]
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	613a      	str	r2, [r7, #16]
 8003156:	1d39      	adds	r1, r7, #4
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	440a      	add	r2, r1
 800315c:	7812      	ldrb	r2, [r2, #0]
 800315e:	3318      	adds	r3, #24
 8003160:	443b      	add	r3, r7
 8003162:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	613a      	str	r2, [r7, #16]
 800316c:	3318      	adds	r3, #24
 800316e:	443b      	add	r3, r7
 8003170:	2200      	movs	r2, #0
 8003172:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1c5a      	adds	r2, r3, #1
 800317a:	613a      	str	r2, [r7, #16]
 800317c:	3318      	adds	r3, #24
 800317e:	443b      	add	r3, r7
 8003180:	2200      	movs	r2, #0
 8003182:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003186:	f107 0208 	add.w	r2, r7, #8
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	4413      	add	r3, r2
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003192:	f107 0108 	add.w	r1, r7, #8
 8003196:	2300      	movs	r3, #0
 8003198:	2208      	movs	r2, #8
 800319a:	f240 6001 	movw	r0, #1537	; 0x601
 800319e:	f7fe ffaf 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80031a2:	2064      	movs	r0, #100	; 0x64
 80031a4:	f000 fe26 	bl	8003df4 <HAL_Delay>
    for(int i =0;i<4;i++)
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	3301      	adds	r3, #1
 80031ac:	617b      	str	r3, [r7, #20]
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2b03      	cmp	r3, #3
 80031b2:	ddab      	ble.n	800310c <enable+0x10>
    }
}
 80031b4:	bf00      	nop
 80031b6:	bf00      	nop
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	0f070600 	.word	0x0f070600

080031c4 <disable>:

void disable()
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1c5a      	adds	r2, r3, #1
 80031d2:	60fa      	str	r2, [r7, #12]
 80031d4:	3310      	adds	r3, #16
 80031d6:	443b      	add	r3, r7
 80031d8:	222b      	movs	r2, #43	; 0x2b
 80031da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	60fa      	str	r2, [r7, #12]
 80031e4:	3310      	adds	r3, #16
 80031e6:	443b      	add	r3, r7
 80031e8:	2240      	movs	r2, #64	; 0x40
 80031ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	1c5a      	adds	r2, r3, #1
 80031f2:	60fa      	str	r2, [r7, #12]
 80031f4:	3310      	adds	r3, #16
 80031f6:	443b      	add	r3, r7
 80031f8:	2260      	movs	r2, #96	; 0x60
 80031fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1c5a      	adds	r2, r3, #1
 8003202:	60fa      	str	r2, [r7, #12]
 8003204:	3310      	adds	r3, #16
 8003206:	443b      	add	r3, r7
 8003208:	2200      	movs	r2, #0
 800320a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1c5a      	adds	r2, r3, #1
 8003212:	60fa      	str	r2, [r7, #12]
 8003214:	3310      	adds	r3, #16
 8003216:	443b      	add	r3, r7
 8003218:	2200      	movs	r2, #0
 800321a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	60fa      	str	r2, [r7, #12]
 8003224:	3310      	adds	r3, #16
 8003226:	443b      	add	r3, r7
 8003228:	2200      	movs	r2, #0
 800322a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60fa      	str	r2, [r7, #12]
 8003234:	3310      	adds	r3, #16
 8003236:	443b      	add	r3, r7
 8003238:	2200      	movs	r2, #0
 800323a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800323e:	1d3a      	adds	r2, r7, #4
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	4413      	add	r3, r2
 8003244:	2200      	movs	r2, #0
 8003246:	701a      	strb	r2, [r3, #0]
    index = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800324c:	1d39      	adds	r1, r7, #4
 800324e:	2300      	movs	r3, #0
 8003250:	2208      	movs	r2, #8
 8003252:	f240 6001 	movw	r0, #1537	; 0x601
 8003256:	f7fe ff53 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800325a:	2064      	movs	r0, #100	; 0x64
 800325c:	f000 fdca 	bl	8003df4 <HAL_Delay>
}
 8003260:	bf00      	nop
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <reset>:

void reset()
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	1c5a      	adds	r2, r3, #1
 8003276:	60fa      	str	r2, [r7, #12]
 8003278:	3310      	adds	r3, #16
 800327a:	443b      	add	r3, r7
 800327c:	222b      	movs	r2, #43	; 0x2b
 800327e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	1c5a      	adds	r2, r3, #1
 8003286:	60fa      	str	r2, [r7, #12]
 8003288:	3310      	adds	r3, #16
 800328a:	443b      	add	r3, r7
 800328c:	2240      	movs	r2, #64	; 0x40
 800328e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	60fa      	str	r2, [r7, #12]
 8003298:	3310      	adds	r3, #16
 800329a:	443b      	add	r3, r7
 800329c:	2260      	movs	r2, #96	; 0x60
 800329e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	60fa      	str	r2, [r7, #12]
 80032a8:	3310      	adds	r3, #16
 80032aa:	443b      	add	r3, r7
 80032ac:	2200      	movs	r2, #0
 80032ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1c5a      	adds	r2, r3, #1
 80032b6:	60fa      	str	r2, [r7, #12]
 80032b8:	3310      	adds	r3, #16
 80032ba:	443b      	add	r3, r7
 80032bc:	2280      	movs	r2, #128	; 0x80
 80032be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	60fa      	str	r2, [r7, #12]
 80032c8:	3310      	adds	r3, #16
 80032ca:	443b      	add	r3, r7
 80032cc:	2200      	movs	r2, #0
 80032ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	60fa      	str	r2, [r7, #12]
 80032d8:	3310      	adds	r3, #16
 80032da:	443b      	add	r3, r7
 80032dc:	2200      	movs	r2, #0
 80032de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80032e2:	1d3a      	adds	r2, r7, #4
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	4413      	add	r3, r2
 80032e8:	2200      	movs	r2, #0
 80032ea:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80032ec:	1d39      	adds	r1, r7, #4
 80032ee:	2300      	movs	r3, #0
 80032f0:	2208      	movs	r2, #8
 80032f2:	f240 6001 	movw	r0, #1537	; 0x601
 80032f6:	f7fe ff03 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80032fa:	2064      	movs	r0, #100	; 0x64
 80032fc:	f000 fd7a 	bl	8003df4 <HAL_Delay>
}
 8003300:	bf00      	nop
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <reqEnc>:

void reqEnc()
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b084      	sub	sp, #16
 800330c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	1c5a      	adds	r2, r3, #1
 8003316:	60fa      	str	r2, [r7, #12]
 8003318:	3310      	adds	r3, #16
 800331a:	443b      	add	r3, r7
 800331c:	2240      	movs	r2, #64	; 0x40
 800331e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1c5a      	adds	r2, r3, #1
 8003326:	60fa      	str	r2, [r7, #12]
 8003328:	3310      	adds	r3, #16
 800332a:	443b      	add	r3, r7
 800332c:	226c      	movs	r2, #108	; 0x6c
 800332e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	1c5a      	adds	r2, r3, #1
 8003336:	60fa      	str	r2, [r7, #12]
 8003338:	3310      	adds	r3, #16
 800333a:	443b      	add	r3, r7
 800333c:	2260      	movs	r2, #96	; 0x60
 800333e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	1c5a      	adds	r2, r3, #1
 8003346:	60fa      	str	r2, [r7, #12]
 8003348:	3310      	adds	r3, #16
 800334a:	443b      	add	r3, r7
 800334c:	2203      	movs	r2, #3
 800334e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	1c5a      	adds	r2, r3, #1
 8003356:	60fa      	str	r2, [r7, #12]
 8003358:	3310      	adds	r3, #16
 800335a:	443b      	add	r3, r7
 800335c:	2200      	movs	r2, #0
 800335e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1c5a      	adds	r2, r3, #1
 8003366:	60fa      	str	r2, [r7, #12]
 8003368:	3310      	adds	r3, #16
 800336a:	443b      	add	r3, r7
 800336c:	2200      	movs	r2, #0
 800336e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	3310      	adds	r3, #16
 800337a:	443b      	add	r3, r7
 800337c:	2200      	movs	r2, #0
 800337e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003382:	1d3a      	adds	r2, r7, #4
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800338c:	1d39      	adds	r1, r7, #4
 800338e:	2300      	movs	r3, #0
 8003390:	2208      	movs	r2, #8
 8003392:	f240 6001 	movw	r0, #1537	; 0x601
 8003396:	f7fe feb3 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800339a:	bf00      	nop
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <reqState>:

void reqState()
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	60fa      	str	r2, [r7, #12]
 80033b2:	3310      	adds	r3, #16
 80033b4:	443b      	add	r3, r7
 80033b6:	2240      	movs	r2, #64	; 0x40
 80033b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1c5a      	adds	r2, r3, #1
 80033c0:	60fa      	str	r2, [r7, #12]
 80033c2:	3310      	adds	r3, #16
 80033c4:	443b      	add	r3, r7
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	60fa      	str	r2, [r7, #12]
 80033d2:	3310      	adds	r3, #16
 80033d4:	443b      	add	r3, r7
 80033d6:	2260      	movs	r2, #96	; 0x60
 80033d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1c5a      	adds	r2, r3, #1
 80033e0:	60fa      	str	r2, [r7, #12]
 80033e2:	3310      	adds	r3, #16
 80033e4:	443b      	add	r3, r7
 80033e6:	2200      	movs	r2, #0
 80033e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	60fa      	str	r2, [r7, #12]
 80033f2:	3310      	adds	r3, #16
 80033f4:	443b      	add	r3, r7
 80033f6:	2200      	movs	r2, #0
 80033f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1c5a      	adds	r2, r3, #1
 8003400:	60fa      	str	r2, [r7, #12]
 8003402:	3310      	adds	r3, #16
 8003404:	443b      	add	r3, r7
 8003406:	2200      	movs	r2, #0
 8003408:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	60fa      	str	r2, [r7, #12]
 8003412:	3310      	adds	r3, #16
 8003414:	443b      	add	r3, r7
 8003416:	2200      	movs	r2, #0
 8003418:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800341c:	1d3a      	adds	r2, r7, #4
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	4413      	add	r3, r2
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003426:	1d39      	adds	r1, r7, #4
 8003428:	2300      	movs	r3, #0
 800342a:	2208      	movs	r2, #8
 800342c:	f240 6001 	movw	r0, #1537	; 0x601
 8003430:	f7fe fe66 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8003434:	bf00      	nop
 8003436:	3710      	adds	r7, #16
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b086      	sub	sp, #24
 8003440:	af00      	add	r7, sp, #0
 8003442:	4603      	mov	r3, r0
 8003444:	460a      	mov	r2, r1
 8003446:	80fb      	strh	r3, [r7, #6]
 8003448:	4613      	mov	r3, r2
 800344a:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 800344c:	88fb      	ldrh	r3, [r7, #6]
 800344e:	425b      	negs	r3, r3
 8003450:	b29b      	uxth	r3, r3
 8003452:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8003454:	2300      	movs	r3, #0
 8003456:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	617a      	str	r2, [r7, #20]
 800345e:	3318      	adds	r3, #24
 8003460:	443b      	add	r3, r7
 8003462:	2223      	movs	r2, #35	; 0x23
 8003464:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	1c5a      	adds	r2, r3, #1
 800346c:	617a      	str	r2, [r7, #20]
 800346e:	3318      	adds	r3, #24
 8003470:	443b      	add	r3, r7
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	617a      	str	r2, [r7, #20]
 800347e:	3318      	adds	r3, #24
 8003480:	443b      	add	r3, r7
 8003482:	2260      	movs	r2, #96	; 0x60
 8003484:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	617a      	str	r2, [r7, #20]
 800348e:	3318      	adds	r3, #24
 8003490:	443b      	add	r3, r7
 8003492:	2203      	movs	r2, #3
 8003494:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	1c5a      	adds	r2, r3, #1
 800349c:	617a      	str	r2, [r7, #20]
 800349e:	88fa      	ldrh	r2, [r7, #6]
 80034a0:	b2d2      	uxtb	r2, r2
 80034a2:	3318      	adds	r3, #24
 80034a4:	443b      	add	r3, r7
 80034a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 80034aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034ae:	121b      	asrs	r3, r3, #8
 80034b0:	b219      	sxth	r1, r3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	1c5a      	adds	r2, r3, #1
 80034b6:	617a      	str	r2, [r7, #20]
 80034b8:	b2ca      	uxtb	r2, r1
 80034ba:	3318      	adds	r3, #24
 80034bc:	443b      	add	r3, r7
 80034be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	1c5a      	adds	r2, r3, #1
 80034c6:	617a      	str	r2, [r7, #20]
 80034c8:	88ba      	ldrh	r2, [r7, #4]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	3318      	adds	r3, #24
 80034ce:	443b      	add	r3, r7
 80034d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 80034d4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80034d8:	121b      	asrs	r3, r3, #8
 80034da:	b21b      	sxth	r3, r3
 80034dc:	b2d9      	uxtb	r1, r3
 80034de:	f107 020c 	add.w	r2, r7, #12
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	4413      	add	r3, r2
 80034e6:	460a      	mov	r2, r1
 80034e8:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80034ea:	f107 010c 	add.w	r1, r7, #12
 80034ee:	2300      	movs	r3, #0
 80034f0:	2208      	movs	r2, #8
 80034f2:	f240 6001 	movw	r0, #1537	; 0x601
 80034f6:	f7fe fe03 	bl	8002100 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80034fa:	bf00      	nop
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <settingKP>:

void settingKP(int16_t kp)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b086      	sub	sp, #24
 8003506:	af00      	add	r7, sp, #0
 8003508:	4603      	mov	r3, r0
 800350a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800350c:	2300      	movs	r3, #0
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	e055      	b.n	80035be <settingKP+0xbc>
    {
        int index = 0;
 8003512:	2300      	movs	r3, #0
 8003514:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	1c5a      	adds	r2, r3, #1
 800351a:	613a      	str	r2, [r7, #16]
 800351c:	3318      	adds	r3, #24
 800351e:	443b      	add	r3, r7
 8003520:	221d      	movs	r2, #29
 8003522:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003526:	693b      	ldr	r3, [r7, #16]
 8003528:	1c5a      	adds	r2, r3, #1
 800352a:	613a      	str	r2, [r7, #16]
 800352c:	3318      	adds	r3, #24
 800352e:	443b      	add	r3, r7
 8003530:	2220      	movs	r2, #32
 8003532:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	613a      	str	r2, [r7, #16]
 800353c:	3318      	adds	r3, #24
 800353e:	443b      	add	r3, r7
 8003540:	2220      	movs	r2, #32
 8003542:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	b2da      	uxtb	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	6139      	str	r1, [r7, #16]
 8003550:	3201      	adds	r2, #1
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	3318      	adds	r3, #24
 8003556:	443b      	add	r3, r7
 8003558:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1c5a      	adds	r2, r3, #1
 8003560:	613a      	str	r2, [r7, #16]
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	b2d2      	uxtb	r2, r2
 8003566:	3318      	adds	r3, #24
 8003568:	443b      	add	r3, r7
 800356a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 800356e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003572:	121b      	asrs	r3, r3, #8
 8003574:	b219      	sxth	r1, r3
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	613a      	str	r2, [r7, #16]
 800357c:	b2ca      	uxtb	r2, r1
 800357e:	3318      	adds	r3, #24
 8003580:	443b      	add	r3, r7
 8003582:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	613a      	str	r2, [r7, #16]
 800358c:	3318      	adds	r3, #24
 800358e:	443b      	add	r3, r7
 8003590:	2200      	movs	r2, #0
 8003592:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003596:	f107 0208 	add.w	r2, r7, #8
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	4413      	add	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80035a2:	f107 0108 	add.w	r1, r7, #8
 80035a6:	2300      	movs	r3, #0
 80035a8:	2208      	movs	r2, #8
 80035aa:	f240 6001 	movw	r0, #1537	; 0x601
 80035ae:	f7fe fda7 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 80035b2:	2064      	movs	r0, #100	; 0x64
 80035b4:	f000 fc1e 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	3301      	adds	r3, #1
 80035bc:	617b      	str	r3, [r7, #20]
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	2b01      	cmp	r3, #1
 80035c2:	dda6      	ble.n	8003512 <settingKP+0x10>
    }
}
 80035c4:	bf00      	nop
 80035c6:	bf00      	nop
 80035c8:	3718      	adds	r7, #24
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <settingKI>:

void settingKI(int16_t ki)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	e055      	b.n	800368a <settingKI+0xbc>
    {
        int index = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1c5a      	adds	r2, r3, #1
 80035e6:	613a      	str	r2, [r7, #16]
 80035e8:	3318      	adds	r3, #24
 80035ea:	443b      	add	r3, r7
 80035ec:	221e      	movs	r2, #30
 80035ee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1c5a      	adds	r2, r3, #1
 80035f6:	613a      	str	r2, [r7, #16]
 80035f8:	3318      	adds	r3, #24
 80035fa:	443b      	add	r3, r7
 80035fc:	2220      	movs	r2, #32
 80035fe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	613a      	str	r2, [r7, #16]
 8003608:	3318      	adds	r3, #24
 800360a:	443b      	add	r3, r7
 800360c:	2220      	movs	r2, #32
 800360e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1c59      	adds	r1, r3, #1
 800361a:	6139      	str	r1, [r7, #16]
 800361c:	3201      	adds	r2, #1
 800361e:	b2d2      	uxtb	r2, r2
 8003620:	3318      	adds	r3, #24
 8003622:	443b      	add	r3, r7
 8003624:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	613a      	str	r2, [r7, #16]
 800362e:	88fa      	ldrh	r2, [r7, #6]
 8003630:	b2d2      	uxtb	r2, r2
 8003632:	3318      	adds	r3, #24
 8003634:	443b      	add	r3, r7
 8003636:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 800363a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800363e:	121b      	asrs	r3, r3, #8
 8003640:	b219      	sxth	r1, r3
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1c5a      	adds	r2, r3, #1
 8003646:	613a      	str	r2, [r7, #16]
 8003648:	b2ca      	uxtb	r2, r1
 800364a:	3318      	adds	r3, #24
 800364c:	443b      	add	r3, r7
 800364e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	1c5a      	adds	r2, r3, #1
 8003656:	613a      	str	r2, [r7, #16]
 8003658:	3318      	adds	r3, #24
 800365a:	443b      	add	r3, r7
 800365c:	2200      	movs	r2, #0
 800365e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003662:	f107 0208 	add.w	r2, r7, #8
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	2200      	movs	r2, #0
 800366c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800366e:	f107 0108 	add.w	r1, r7, #8
 8003672:	2300      	movs	r3, #0
 8003674:	2208      	movs	r2, #8
 8003676:	f240 6001 	movw	r0, #1537	; 0x601
 800367a:	f7fe fd41 	bl	8002100 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800367e:	2064      	movs	r0, #100	; 0x64
 8003680:	f000 fbb8 	bl	8003df4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	3301      	adds	r3, #1
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2b01      	cmp	r3, #1
 800368e:	dda6      	ble.n	80035de <settingKI+0x10>
    }
}
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	3718      	adds	r7, #24
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	0000      	movs	r0, r0
 800369c:	0000      	movs	r0, r0
	...

080036a0 <settingMotor>:
void settingMotor()
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 80036a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80036a8:	f7ff fa09 	bl	8002abe <settingEnc>
    settingPole(POLE_PAIR);
 80036ac:	200a      	movs	r0, #10
 80036ae:	f7ff fa6c 	bl	8002b8a <settingPole>
    settingBreak(BREAK_OPTION);
 80036b2:	2001      	movs	r0, #1
 80036b4:	f7ff facf 	bl	8002c56 <settingBreak>
    settingMaxRPM(MAX_RPM);
 80036b8:	20c8      	movs	r0, #200	; 0xc8
 80036ba:	f7ff fb20 	bl	8002cfe <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 80036be:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80036f0 <settingMotor+0x50>
 80036c2:	f7ff fb75 	bl	8002db0 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 80036c6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80036f8 <settingMotor+0x58>
 80036ca:	f7ff fbe3 	bl	8002e94 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 80036ce:	20f0      	movs	r0, #240	; 0xf0
 80036d0:	f7ff fc52 	bl	8002f78 <settingHallOffset>
    settingKP(KP_GAIN);
 80036d4:	f240 2026 	movw	r0, #550	; 0x226
 80036d8:	f7ff ff13 	bl	8003502 <settingKP>
    settingKI(KI_GAIN);
 80036dc:	206e      	movs	r0, #110	; 0x6e
 80036de:	f7ff ff76 	bl	80035ce <settingKI>
    save();
 80036e2:	f7ff fcaf 	bl	8003044 <save>
}
 80036e6:	bf00      	nop
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	f3af 8000 	nop.w
 80036f0:	00000000 	.word	0x00000000
 80036f4:	40200000 	.word	0x40200000
 80036f8:	00000000 	.word	0x00000000
 80036fc:	40300000 	.word	0x40300000

08003700 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003706:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_MspInit+0x44>)
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_MspInit+0x44>)
 800370c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003710:	6413      	str	r3, [r2, #64]	; 0x40
 8003712:	4b0c      	ldr	r3, [pc, #48]	; (8003744 <HAL_MspInit+0x44>)
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800371a:	607b      	str	r3, [r7, #4]
 800371c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800371e:	4b09      	ldr	r3, [pc, #36]	; (8003744 <HAL_MspInit+0x44>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a08      	ldr	r2, [pc, #32]	; (8003744 <HAL_MspInit+0x44>)
 8003724:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_MspInit+0x44>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003732:	603b      	str	r3, [r7, #0]
 8003734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003736:	bf00      	nop
 8003738:	370c      	adds	r7, #12
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b08a      	sub	sp, #40	; 0x28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003750:	f107 0314 	add.w	r3, r7, #20
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]
 8003758:	605a      	str	r2, [r3, #4]
 800375a:	609a      	str	r2, [r3, #8]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a1b      	ldr	r2, [pc, #108]	; (80037d4 <HAL_CAN_MspInit+0x8c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d12f      	bne.n	80037ca <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800376a:	4b1b      	ldr	r3, [pc, #108]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 8003770:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b18      	ldr	r3, [pc, #96]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	613b      	str	r3, [r7, #16]
 8003780:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003782:	4b15      	ldr	r3, [pc, #84]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	4a14      	ldr	r2, [pc, #80]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 8003788:	f043 0308 	orr.w	r3, r3, #8
 800378c:	6313      	str	r3, [r2, #48]	; 0x30
 800378e:	4b12      	ldr	r3, [pc, #72]	; (80037d8 <HAL_CAN_MspInit+0x90>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800379a:	2303      	movs	r3, #3
 800379c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800379e:	2302      	movs	r3, #2
 80037a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037a2:	2300      	movs	r3, #0
 80037a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037a6:	2303      	movs	r3, #3
 80037a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80037aa:	2309      	movs	r3, #9
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037ae:	f107 0314 	add.w	r3, r7, #20
 80037b2:	4619      	mov	r1, r3
 80037b4:	4809      	ldr	r0, [pc, #36]	; (80037dc <HAL_CAN_MspInit+0x94>)
 80037b6:	f001 fb7d 	bl	8004eb4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80037ba:	2200      	movs	r2, #0
 80037bc:	2100      	movs	r1, #0
 80037be:	2014      	movs	r0, #20
 80037c0:	f001 faaf 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80037c4:	2014      	movs	r0, #20
 80037c6:	f001 fac8 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80037ca:	bf00      	nop
 80037cc:	3728      	adds	r7, #40	; 0x28
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	40006400 	.word	0x40006400
 80037d8:	40023800 	.word	0x40023800
 80037dc:	40020c00 	.word	0x40020c00

080037e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b088      	sub	sp, #32
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f0:	d10c      	bne.n	800380c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80037f2:	4b3c      	ldr	r3, [pc, #240]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 80037f8:	f043 0301 	orr.w	r3, r3, #1
 80037fc:	6413      	str	r3, [r2, #64]	; 0x40
 80037fe:	4b39      	ldr	r3, [pc, #228]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	61fb      	str	r3, [r7, #28]
 8003808:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800380a:	e066      	b.n	80038da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM5)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4a35      	ldr	r2, [pc, #212]	; (80038e8 <HAL_TIM_Base_MspInit+0x108>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d114      	bne.n	8003840 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003816:	4b33      	ldr	r3, [pc, #204]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381a:	4a32      	ldr	r2, [pc, #200]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 800381c:	f043 0308 	orr.w	r3, r3, #8
 8003820:	6413      	str	r3, [r2, #64]	; 0x40
 8003822:	4b30      	ldr	r3, [pc, #192]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	f003 0308 	and.w	r3, r3, #8
 800382a:	61bb      	str	r3, [r7, #24]
 800382c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	2032      	movs	r0, #50	; 0x32
 8003834:	f001 fa75 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003838:	2032      	movs	r0, #50	; 0x32
 800383a:	f001 fa8e 	bl	8004d5a <HAL_NVIC_EnableIRQ>
}
 800383e:	e04c      	b.n	80038da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM6)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a29      	ldr	r2, [pc, #164]	; (80038ec <HAL_TIM_Base_MspInit+0x10c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d114      	bne.n	8003874 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800384a:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a25      	ldr	r2, [pc, #148]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003850:	f043 0310 	orr.w	r3, r3, #16
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b23      	ldr	r3, [pc, #140]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 0310 	and.w	r3, r3, #16
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003862:	2200      	movs	r2, #0
 8003864:	2100      	movs	r1, #0
 8003866:	2036      	movs	r0, #54	; 0x36
 8003868:	f001 fa5b 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800386c:	2036      	movs	r0, #54	; 0x36
 800386e:	f001 fa74 	bl	8004d5a <HAL_NVIC_EnableIRQ>
}
 8003872:	e032      	b.n	80038da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM7)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_TIM_Base_MspInit+0x110>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d114      	bne.n	80038a8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800387e:	4b19      	ldr	r3, [pc, #100]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	4a18      	ldr	r2, [pc, #96]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 8003884:	f043 0320 	orr.w	r3, r3, #32
 8003888:	6413      	str	r3, [r2, #64]	; 0x40
 800388a:	4b16      	ldr	r3, [pc, #88]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 800388c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	613b      	str	r3, [r7, #16]
 8003894:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003896:	2200      	movs	r2, #0
 8003898:	2100      	movs	r1, #0
 800389a:	2037      	movs	r0, #55	; 0x37
 800389c:	f001 fa41 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038a0:	2037      	movs	r0, #55	; 0x37
 80038a2:	f001 fa5a 	bl	8004d5a <HAL_NVIC_EnableIRQ>
}
 80038a6:	e018      	b.n	80038da <HAL_TIM_Base_MspInit+0xfa>
  else if(htim_base->Instance==TIM9)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <HAL_TIM_Base_MspInit+0x114>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d113      	bne.n	80038da <HAL_TIM_Base_MspInit+0xfa>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 80038b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b6:	4a0b      	ldr	r2, [pc, #44]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 80038b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038bc:	6453      	str	r3, [r2, #68]	; 0x44
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_TIM_Base_MspInit+0x104>)
 80038c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80038ca:	2200      	movs	r2, #0
 80038cc:	2100      	movs	r1, #0
 80038ce:	2018      	movs	r0, #24
 80038d0:	f001 fa27 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80038d4:	2018      	movs	r0, #24
 80038d6:	f001 fa40 	bl	8004d5a <HAL_NVIC_EnableIRQ>
}
 80038da:	bf00      	nop
 80038dc:	3720      	adds	r7, #32
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	40023800 	.word	0x40023800
 80038e8:	40000c00 	.word	0x40000c00
 80038ec:	40001000 	.word	0x40001000
 80038f0:	40001400 	.word	0x40001400
 80038f4:	40014000 	.word	0x40014000

080038f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 030c 	add.w	r3, r7, #12
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003918:	d11b      	bne.n	8003952 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391a:	4b10      	ldr	r3, [pc, #64]	; (800395c <HAL_TIM_MspPostInit+0x64>)
 800391c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391e:	4a0f      	ldr	r2, [pc, #60]	; (800395c <HAL_TIM_MspPostInit+0x64>)
 8003920:	f043 0301 	orr.w	r3, r3, #1
 8003924:	6313      	str	r3, [r2, #48]	; 0x30
 8003926:	4b0d      	ldr	r3, [pc, #52]	; (800395c <HAL_TIM_MspPostInit+0x64>)
 8003928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800392a:	f003 0301 	and.w	r3, r3, #1
 800392e:	60bb      	str	r3, [r7, #8]
 8003930:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003932:	2320      	movs	r3, #32
 8003934:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003936:	2302      	movs	r3, #2
 8003938:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800393a:	2300      	movs	r3, #0
 800393c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393e:	2300      	movs	r3, #0
 8003940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003942:	2301      	movs	r3, #1
 8003944:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003946:	f107 030c 	add.w	r3, r7, #12
 800394a:	4619      	mov	r1, r3
 800394c:	4804      	ldr	r0, [pc, #16]	; (8003960 <HAL_TIM_MspPostInit+0x68>)
 800394e:	f001 fab1 	bl	8004eb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003952:	bf00      	nop
 8003954:	3720      	adds	r7, #32
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	40023800 	.word	0x40023800
 8003960:	40020000 	.word	0x40020000

08003964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b0ac      	sub	sp, #176	; 0xb0
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800396c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]
 8003974:	605a      	str	r2, [r3, #4]
 8003976:	609a      	str	r2, [r3, #8]
 8003978:	60da      	str	r2, [r3, #12]
 800397a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800397c:	f107 0318 	add.w	r3, r7, #24
 8003980:	2284      	movs	r2, #132	; 0x84
 8003982:	2100      	movs	r1, #0
 8003984:	4618      	mov	r0, r3
 8003986:	f005 f865 	bl	8008a54 <memset>
  if(huart->Instance==UART8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a46      	ldr	r2, [pc, #280]	; (8003aa8 <HAL_UART_MspInit+0x144>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d144      	bne.n	8003a1e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003998:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800399a:	2300      	movs	r3, #0
 800399c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800399e:	f107 0318 	add.w	r3, r7, #24
 80039a2:	4618      	mov	r0, r3
 80039a4:	f002 f998 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80039ae:	f7fe ffe1 	bl	8002974 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 80039b2:	4b3e      	ldr	r3, [pc, #248]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	4a3d      	ldr	r2, [pc, #244]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039b8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039bc:	6413      	str	r3, [r2, #64]	; 0x40
 80039be:	4b3b      	ldr	r3, [pc, #236]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80039ca:	4b38      	ldr	r3, [pc, #224]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ce:	4a37      	ldr	r2, [pc, #220]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039d0:	f043 0310 	orr.w	r3, r3, #16
 80039d4:	6313      	str	r3, [r2, #48]	; 0x30
 80039d6:	4b35      	ldr	r3, [pc, #212]	; (8003aac <HAL_UART_MspInit+0x148>)
 80039d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	613b      	str	r3, [r7, #16]
 80039e0:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039e2:	2303      	movs	r3, #3
 80039e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039e8:	2302      	movs	r3, #2
 80039ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80039fa:	2308      	movs	r3, #8
 80039fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a00:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a04:	4619      	mov	r1, r3
 8003a06:	482a      	ldr	r0, [pc, #168]	; (8003ab0 <HAL_UART_MspInit+0x14c>)
 8003a08:	f001 fa54 	bl	8004eb4 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	2100      	movs	r1, #0
 8003a10:	2053      	movs	r0, #83	; 0x53
 8003a12:	f001 f986 	bl	8004d22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003a16:	2053      	movs	r0, #83	; 0x53
 8003a18:	f001 f99f 	bl	8004d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003a1c:	e03f      	b.n	8003a9e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a24      	ldr	r2, [pc, #144]	; (8003ab4 <HAL_UART_MspInit+0x150>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d13a      	bne.n	8003a9e <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003a28:	2340      	movs	r3, #64	; 0x40
 8003a2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003a30:	f107 0318 	add.w	r3, r7, #24
 8003a34:	4618      	mov	r0, r3
 8003a36:	f002 f94f 	bl	8005cd8 <HAL_RCCEx_PeriphCLKConfig>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d001      	beq.n	8003a44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8003a40:	f7fe ff98 	bl	8002974 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003a44:	4b19      	ldr	r3, [pc, #100]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a48:	4a18      	ldr	r2, [pc, #96]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a4a:	f043 0310 	orr.w	r3, r3, #16
 8003a4e:	6453      	str	r3, [r2, #68]	; 0x44
 8003a50:	4b16      	ldr	r3, [pc, #88]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	60fb      	str	r3, [r7, #12]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5c:	4b13      	ldr	r3, [pc, #76]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a60:	4a12      	ldr	r2, [pc, #72]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a62:	f043 0302 	orr.w	r3, r3, #2
 8003a66:	6313      	str	r3, [r2, #48]	; 0x30
 8003a68:	4b10      	ldr	r3, [pc, #64]	; (8003aac <HAL_UART_MspInit+0x148>)
 8003a6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6c:	f003 0302 	and.w	r3, r3, #2
 8003a70:	60bb      	str	r3, [r7, #8]
 8003a72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a74:	23c0      	movs	r3, #192	; 0xc0
 8003a76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a80:	2300      	movs	r3, #0
 8003a82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a86:	2303      	movs	r3, #3
 8003a88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a8c:	2307      	movs	r3, #7
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a92:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a96:	4619      	mov	r1, r3
 8003a98:	4807      	ldr	r0, [pc, #28]	; (8003ab8 <HAL_UART_MspInit+0x154>)
 8003a9a:	f001 fa0b 	bl	8004eb4 <HAL_GPIO_Init>
}
 8003a9e:	bf00      	nop
 8003aa0:	37b0      	adds	r7, #176	; 0xb0
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40007c00 	.word	0x40007c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40011000 	.word	0x40011000
 8003ab8:	40020400 	.word	0x40020400

08003abc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003abc:	b480      	push	{r7}
 8003abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003ac0:	e7fe      	b.n	8003ac0 <NMI_Handler+0x4>

08003ac2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ac2:	b480      	push	{r7}
 8003ac4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ac6:	e7fe      	b.n	8003ac6 <HardFault_Handler+0x4>

08003ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003acc:	e7fe      	b.n	8003acc <MemManage_Handler+0x4>

08003ace <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003ace:	b480      	push	{r7}
 8003ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003ad2:	e7fe      	b.n	8003ad2 <BusFault_Handler+0x4>

08003ad4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ad8:	e7fe      	b.n	8003ad8 <UsageFault_Handler+0x4>

08003ada <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ada:	b480      	push	{r7}
 8003adc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003aec:	bf00      	nop
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr

08003af6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003af6:	b480      	push	{r7}
 8003af8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b08:	f000 f954 	bl	8003db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b14:	4802      	ldr	r0, [pc, #8]	; (8003b20 <CAN1_RX0_IRQHandler+0x10>)
 8003b16:	f000 fdf9 	bl	800470c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003b1a:	bf00      	nop
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	2000019c 	.word	0x2000019c

08003b24 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8003b28:	2040      	movs	r0, #64	; 0x40
 8003b2a:	f001 fba3 	bl	8005274 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003b2e:	2080      	movs	r0, #128	; 0x80
 8003b30:	f001 fba0 	bl	8005274 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8003b34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b38:	f001 fb9c 	bl	8005274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003b3c:	bf00      	nop
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8003b44:	4802      	ldr	r0, [pc, #8]	; (8003b50 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8003b46:	f002 ff5f 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8003b4a:	bf00      	nop
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	200002f4 	.word	0x200002f4

08003b54 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003b58:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003b5c:	f001 fb8a 	bl	8005274 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003b60:	bf00      	nop
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003b68:	4802      	ldr	r0, [pc, #8]	; (8003b74 <TIM5_IRQHandler+0x10>)
 8003b6a:	f002 ff4d 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003b6e:	bf00      	nop
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	20000210 	.word	0x20000210

08003b78 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003b7c:	4802      	ldr	r0, [pc, #8]	; (8003b88 <TIM6_DAC_IRQHandler+0x10>)
 8003b7e:	f002 ff43 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003b82:	bf00      	nop
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	2000025c 	.word	0x2000025c

08003b8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003b90:	4802      	ldr	r0, [pc, #8]	; (8003b9c <TIM7_IRQHandler+0x10>)
 8003b92:	f002 ff39 	bl	8006a08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003b96:	bf00      	nop
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	200002a8 	.word	0x200002a8

08003ba0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <UART8_IRQHandler+0x10>)
 8003ba6:	f003 ffa1 	bl	8007aec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000340 	.word	0x20000340

08003bb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e00a      	b.n	8003bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003bc6:	f3af 8000 	nop.w
 8003bca:	4601      	mov	r1, r0
 8003bcc:	68bb      	ldr	r3, [r7, #8]
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	60ba      	str	r2, [r7, #8]
 8003bd2:	b2ca      	uxtb	r2, r1
 8003bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697a      	ldr	r2, [r7, #20]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	dbf0      	blt.n	8003bc6 <_read+0x12>
	}

return len;
 8003be4:	687b      	ldr	r3, [r7, #4]
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3718      	adds	r7, #24
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_close>:
	}
	return len;
}

int _close(int file)
{
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8003bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	370c      	adds	r7, #12
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b083      	sub	sp, #12
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	6078      	str	r0, [r7, #4]
 8003c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c16:	605a      	str	r2, [r3, #4]
	return 0;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	370c      	adds	r7, #12
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr

08003c26 <_isatty>:

int _isatty(int file)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8003c2e:	2301      	movs	r3, #1
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b085      	sub	sp, #20
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
	return 0;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3714      	adds	r7, #20
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c54:	4770      	bx	lr
	...

08003c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c60:	4a14      	ldr	r2, [pc, #80]	; (8003cb4 <_sbrk+0x5c>)
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <_sbrk+0x60>)
 8003c64:	1ad3      	subs	r3, r2, r3
 8003c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c6c:	4b13      	ldr	r3, [pc, #76]	; (8003cbc <_sbrk+0x64>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d102      	bne.n	8003c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c74:	4b11      	ldr	r3, [pc, #68]	; (8003cbc <_sbrk+0x64>)
 8003c76:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <_sbrk+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c7a:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <_sbrk+0x64>)
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4413      	add	r3, r2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d207      	bcs.n	8003c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c88:	f004 feba 	bl	8008a00 <__errno>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	220c      	movs	r2, #12
 8003c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	e009      	b.n	8003cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c98:	4b08      	ldr	r3, [pc, #32]	; (8003cbc <_sbrk+0x64>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c9e:	4b07      	ldr	r3, [pc, #28]	; (8003cbc <_sbrk+0x64>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	4a05      	ldr	r2, [pc, #20]	; (8003cbc <_sbrk+0x64>)
 8003ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003caa:	68fb      	ldr	r3, [r7, #12]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	20050000 	.word	0x20050000
 8003cb8:	00000400 	.word	0x00000400
 8003cbc:	20000448 	.word	0x20000448
 8003cc0:	20000460 	.word	0x20000460

08003cc4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cc8:	4b06      	ldr	r3, [pc, #24]	; (8003ce4 <SystemInit+0x20>)
 8003cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cce:	4a05      	ldr	r2, [pc, #20]	; (8003ce4 <SystemInit+0x20>)
 8003cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003cd8:	bf00      	nop
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003ce8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d20 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003cec:	480d      	ldr	r0, [pc, #52]	; (8003d24 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003cee:	490e      	ldr	r1, [pc, #56]	; (8003d28 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003cf0:	4a0e      	ldr	r2, [pc, #56]	; (8003d2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003cf2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cf4:	e002      	b.n	8003cfc <LoopCopyDataInit>

08003cf6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cf6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cfa:	3304      	adds	r3, #4

08003cfc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cfc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cfe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003d00:	d3f9      	bcc.n	8003cf6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003d02:	4a0b      	ldr	r2, [pc, #44]	; (8003d30 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003d04:	4c0b      	ldr	r4, [pc, #44]	; (8003d34 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003d06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d08:	e001      	b.n	8003d0e <LoopFillZerobss>

08003d0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d0c:	3204      	adds	r2, #4

08003d0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d10:	d3fb      	bcc.n	8003d0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003d12:	f7ff ffd7 	bl	8003cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d16:	f004 fe79 	bl	8008a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d1a:	f7fe fa5f 	bl	80021dc <main>
  bx  lr    
 8003d1e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003d20:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003d24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d28:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003d2c:	08009abc 	.word	0x08009abc
  ldr r2, =_sbss
 8003d30:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8003d34:	20000460 	.word	0x20000460

08003d38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d38:	e7fe      	b.n	8003d38 <ADC_IRQHandler>

08003d3a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d3e:	2003      	movs	r0, #3
 8003d40:	f000 ffe4 	bl	8004d0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003d44:	200f      	movs	r0, #15
 8003d46:	f000 f805 	bl	8003d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003d4a:	f7ff fcd9 	bl	8003700 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003d4e:	2300      	movs	r3, #0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}

08003d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b082      	sub	sp, #8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003d5c:	4b12      	ldr	r3, [pc, #72]	; (8003da8 <HAL_InitTick+0x54>)
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	4b12      	ldr	r3, [pc, #72]	; (8003dac <HAL_InitTick+0x58>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	4619      	mov	r1, r3
 8003d66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 ffff 	bl	8004d76 <HAL_SYSTICK_Config>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00e      	b.n	8003da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d80a      	bhi.n	8003d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d88:	2200      	movs	r2, #0
 8003d8a:	6879      	ldr	r1, [r7, #4]
 8003d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8003d90:	f000 ffc7 	bl	8004d22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003d94:	4a06      	ldr	r2, [pc, #24]	; (8003db0 <HAL_InitTick+0x5c>)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	e000      	b.n	8003da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	3708      	adds	r7, #8
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	20000004 	.word	0x20000004
 8003dac:	2000000c 	.word	0x2000000c
 8003db0:	20000008 	.word	0x20000008

08003db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003db8:	4b06      	ldr	r3, [pc, #24]	; (8003dd4 <HAL_IncTick+0x20>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_IncTick+0x24>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4413      	add	r3, r2
 8003dc4:	4a04      	ldr	r2, [pc, #16]	; (8003dd8 <HAL_IncTick+0x24>)
 8003dc6:	6013      	str	r3, [r2, #0]
}
 8003dc8:	bf00      	nop
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	2000000c 	.word	0x2000000c
 8003dd8:	2000044c 	.word	0x2000044c

08003ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	af00      	add	r7, sp, #0
  return uwTick;
 8003de0:	4b03      	ldr	r3, [pc, #12]	; (8003df0 <HAL_GetTick+0x14>)
 8003de2:	681b      	ldr	r3, [r3, #0]
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	2000044c 	.word	0x2000044c

08003df4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003dfc:	f7ff ffee 	bl	8003ddc <HAL_GetTick>
 8003e00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e0c:	d005      	beq.n	8003e1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e0e:	4b0a      	ldr	r3, [pc, #40]	; (8003e38 <HAL_Delay+0x44>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	461a      	mov	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	4413      	add	r3, r2
 8003e18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e1a:	bf00      	nop
 8003e1c:	f7ff ffde 	bl	8003ddc <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68bb      	ldr	r3, [r7, #8]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d8f7      	bhi.n	8003e1c <HAL_Delay+0x28>
  {
  }
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	3710      	adds	r7, #16
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000000c 	.word	0x2000000c

08003e3c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d101      	bne.n	8003e4e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e0ed      	b.n	800402a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d102      	bne.n	8003e60 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fc74 	bl	8003748 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e70:	f7ff ffb4 	bl	8003ddc <HAL_GetTick>
 8003e74:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e76:	e012      	b.n	8003e9e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e78:	f7ff ffb0 	bl	8003ddc <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	2b0a      	cmp	r3, #10
 8003e84:	d90b      	bls.n	8003e9e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2205      	movs	r2, #5
 8003e96:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e0c5      	b.n	800402a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0e5      	beq.n	8003e78 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0202 	bic.w	r2, r2, #2
 8003eba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ebc:	f7ff ff8e 	bl	8003ddc <HAL_GetTick>
 8003ec0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ec2:	e012      	b.n	8003eea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ec4:	f7ff ff8a 	bl	8003ddc <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b0a      	cmp	r3, #10
 8003ed0:	d90b      	bls.n	8003eea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2205      	movs	r2, #5
 8003ee2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e09f      	b.n	800402a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d1e5      	bne.n	8003ec4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	7e1b      	ldrb	r3, [r3, #24]
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	d108      	bne.n	8003f12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003f0e:	601a      	str	r2, [r3, #0]
 8003f10:	e007      	b.n	8003f22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	7e5b      	ldrb	r3, [r3, #25]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d108      	bne.n	8003f3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	e007      	b.n	8003f4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	7e9b      	ldrb	r3, [r3, #26]
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d108      	bne.n	8003f66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0220 	orr.w	r2, r2, #32
 8003f62:	601a      	str	r2, [r3, #0]
 8003f64:	e007      	b.n	8003f76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 0220 	bic.w	r2, r2, #32
 8003f74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	7edb      	ldrb	r3, [r3, #27]
 8003f7a:	2b01      	cmp	r3, #1
 8003f7c:	d108      	bne.n	8003f90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f022 0210 	bic.w	r2, r2, #16
 8003f8c:	601a      	str	r2, [r3, #0]
 8003f8e:	e007      	b.n	8003fa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	681a      	ldr	r2, [r3, #0]
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f042 0210 	orr.w	r2, r2, #16
 8003f9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7f1b      	ldrb	r3, [r3, #28]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f042 0208 	orr.w	r2, r2, #8
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	e007      	b.n	8003fca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f022 0208 	bic.w	r2, r2, #8
 8003fc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	7f5b      	ldrb	r3, [r3, #29]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d108      	bne.n	8003fe4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f042 0204 	orr.w	r2, r2, #4
 8003fe0:	601a      	str	r2, [r3, #0]
 8003fe2:	e007      	b.n	8003ff4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f022 0204 	bic.w	r2, r2, #4
 8003ff2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	431a      	orrs	r2, r3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	691b      	ldr	r3, [r3, #16]
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	695b      	ldr	r3, [r3, #20]
 8004008:	ea42 0103 	orr.w	r1, r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	1e5a      	subs	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8004034:	b480      	push	{r7}
 8004036:	b087      	sub	sp, #28
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f893 3020 	ldrb.w	r3, [r3, #32]
 800404a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800404c:	7cfb      	ldrb	r3, [r7, #19]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d003      	beq.n	800405a <HAL_CAN_ConfigFilter+0x26>
 8004052:	7cfb      	ldrb	r3, [r7, #19]
 8004054:	2b02      	cmp	r3, #2
 8004056:	f040 80be 	bne.w	80041d6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800405a:	4b65      	ldr	r3, [pc, #404]	; (80041f0 <HAL_CAN_ConfigFilter+0x1bc>)
 800405c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004064:	f043 0201 	orr.w	r2, r3, #1
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004074:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	431a      	orrs	r2, r3
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	695b      	ldr	r3, [r3, #20]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2201      	movs	r2, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	43db      	mvns	r3, r3
 80040ac:	401a      	ands	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d123      	bne.n	8004104 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	43db      	mvns	r3, r3
 80040c6:	401a      	ands	r2, r3
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040de:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	3248      	adds	r2, #72	; 0x48
 80040e4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040fa:	6979      	ldr	r1, [r7, #20]
 80040fc:	3348      	adds	r3, #72	; 0x48
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	440b      	add	r3, r1
 8004102:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d122      	bne.n	8004152 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	431a      	orrs	r2, r3
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004128:	683a      	ldr	r2, [r7, #0]
 800412a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800412c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	3248      	adds	r2, #72	; 0x48
 8004132:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004146:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004148:	6979      	ldr	r1, [r7, #20]
 800414a:	3348      	adds	r3, #72	; 0x48
 800414c:	00db      	lsls	r3, r3, #3
 800414e:	440b      	add	r3, r1
 8004150:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	699b      	ldr	r3, [r3, #24]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d109      	bne.n	800416e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	43db      	mvns	r3, r3
 8004164:	401a      	ands	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800416c:	e007      	b.n	800417e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	431a      	orrs	r2, r3
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d109      	bne.n	800419a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	43db      	mvns	r3, r3
 8004190:	401a      	ands	r2, r3
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8004198:	e007      	b.n	80041aa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d107      	bne.n	80041c2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	431a      	orrs	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80041c8:	f023 0201 	bic.w	r2, r3, #1
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80041d2:	2300      	movs	r3, #0
 80041d4:	e006      	b.n	80041e4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
  }
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	371c      	adds	r7, #28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr
 80041f0:	40006400 	.word	0x40006400

080041f4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b01      	cmp	r3, #1
 8004206:	d12e      	bne.n	8004266 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2202      	movs	r2, #2
 800420c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004220:	f7ff fddc 	bl	8003ddc <HAL_GetTick>
 8004224:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004226:	e012      	b.n	800424e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004228:	f7ff fdd8 	bl	8003ddc <HAL_GetTick>
 800422c:	4602      	mov	r2, r0
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	1ad3      	subs	r3, r2, r3
 8004232:	2b0a      	cmp	r3, #10
 8004234:	d90b      	bls.n	800424e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2205      	movs	r2, #5
 8004246:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e012      	b.n	8004274 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f003 0301 	and.w	r3, r3, #1
 8004258:	2b00      	cmp	r3, #0
 800425a:	d1e5      	bne.n	8004228 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8004262:	2300      	movs	r3, #0
 8004264:	e006      	b.n	8004274 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
  }
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800427c:	b480      	push	{r7}
 800427e:	b089      	sub	sp, #36	; 0x24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004290:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800429a:	7ffb      	ldrb	r3, [r7, #31]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d003      	beq.n	80042a8 <HAL_CAN_AddTxMessage+0x2c>
 80042a0:	7ffb      	ldrb	r3, [r7, #31]
 80042a2:	2b02      	cmp	r3, #2
 80042a4:	f040 80b8 	bne.w	8004418 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d10a      	bne.n	80042c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d105      	bne.n	80042c8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f000 80a0 	beq.w	8004408 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	0e1b      	lsrs	r3, r3, #24
 80042cc:	f003 0303 	and.w	r3, r3, #3
 80042d0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d907      	bls.n	80042e8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e09e      	b.n	8004426 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042e8:	2201      	movs	r2, #1
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	409a      	lsls	r2, r3
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d10d      	bne.n	8004316 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004304:	68f9      	ldr	r1, [r7, #12]
 8004306:	6809      	ldr	r1, [r1, #0]
 8004308:	431a      	orrs	r2, r3
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	3318      	adds	r3, #24
 800430e:	011b      	lsls	r3, r3, #4
 8004310:	440b      	add	r3, r1
 8004312:	601a      	str	r2, [r3, #0]
 8004314:	e00f      	b.n	8004336 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004320:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800432a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	3318      	adds	r3, #24
 8004330:	011b      	lsls	r3, r3, #4
 8004332:	440b      	add	r3, r1
 8004334:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	6819      	ldr	r1, [r3, #0]
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	691a      	ldr	r2, [r3, #16]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	3318      	adds	r3, #24
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	440b      	add	r3, r1
 8004346:	3304      	adds	r3, #4
 8004348:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	7d1b      	ldrb	r3, [r3, #20]
 800434e:	2b01      	cmp	r3, #1
 8004350:	d111      	bne.n	8004376 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	3318      	adds	r3, #24
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	3304      	adds	r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	6811      	ldr	r1, [r2, #0]
 8004366:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	3318      	adds	r3, #24
 800436e:	011b      	lsls	r3, r3, #4
 8004370:	440b      	add	r3, r1
 8004372:	3304      	adds	r3, #4
 8004374:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	3307      	adds	r3, #7
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	061a      	lsls	r2, r3, #24
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	3306      	adds	r3, #6
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	041b      	lsls	r3, r3, #16
 8004386:	431a      	orrs	r2, r3
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	3305      	adds	r3, #5
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	021b      	lsls	r3, r3, #8
 8004390:	4313      	orrs	r3, r2
 8004392:	687a      	ldr	r2, [r7, #4]
 8004394:	3204      	adds	r2, #4
 8004396:	7812      	ldrb	r2, [r2, #0]
 8004398:	4610      	mov	r0, r2
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	6811      	ldr	r1, [r2, #0]
 800439e:	ea43 0200 	orr.w	r2, r3, r0
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	011b      	lsls	r3, r3, #4
 80043a6:	440b      	add	r3, r1
 80043a8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80043ac:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3303      	adds	r3, #3
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	061a      	lsls	r2, r3, #24
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	3302      	adds	r3, #2
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	041b      	lsls	r3, r3, #16
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	3301      	adds	r3, #1
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	4313      	orrs	r3, r2
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	4610      	mov	r0, r2
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	6811      	ldr	r1, [r2, #0]
 80043d4:	ea43 0200 	orr.w	r2, r3, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	440b      	add	r3, r1
 80043de:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80043e2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	3318      	adds	r3, #24
 80043ec:	011b      	lsls	r3, r3, #4
 80043ee:	4413      	add	r3, r2
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	6811      	ldr	r1, [r2, #0]
 80043f6:	f043 0201 	orr.w	r2, r3, #1
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	3318      	adds	r3, #24
 80043fe:	011b      	lsls	r3, r3, #4
 8004400:	440b      	add	r3, r1
 8004402:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004404:	2300      	movs	r3, #0
 8004406:	e00e      	b.n	8004426 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e006      	b.n	8004426 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
  }
}
 8004426:	4618      	mov	r0, r3
 8004428:	3724      	adds	r7, #36	; 0x24
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8004432:	b480      	push	{r7}
 8004434:	b085      	sub	sp, #20
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004444:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8004446:	7afb      	ldrb	r3, [r7, #11]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d002      	beq.n	8004452 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800444c:	7afb      	ldrb	r3, [r7, #11]
 800444e:	2b02      	cmp	r3, #2
 8004450:	d11d      	bne.n	800448e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	3301      	adds	r3, #1
 8004464:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	3301      	adds	r3, #1
 8004478:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	3301      	adds	r3, #1
 800448c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800448e:	68fb      	ldr	r3, [r7, #12]
}
 8004490:	4618      	mov	r0, r3
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800449c:	b480      	push	{r7}
 800449e:	b087      	sub	sp, #28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80044b2:	7dfb      	ldrb	r3, [r7, #23]
 80044b4:	2b01      	cmp	r3, #1
 80044b6:	d003      	beq.n	80044c0 <HAL_CAN_GetRxMessage+0x24>
 80044b8:	7dfb      	ldrb	r3, [r7, #23]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	f040 80f3 	bne.w	80046a6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d10e      	bne.n	80044e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	f003 0303 	and.w	r3, r3, #3
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d116      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e0e7      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d107      	bne.n	8004502 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e0d8      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	331b      	adds	r3, #27
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f003 0204 	and.w	r2, r3, #4
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d10c      	bne.n	800453a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	331b      	adds	r3, #27
 8004528:	011b      	lsls	r3, r3, #4
 800452a:	4413      	add	r3, r2
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	0d5b      	lsrs	r3, r3, #21
 8004530:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	601a      	str	r2, [r3, #0]
 8004538:	e00b      	b.n	8004552 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	331b      	adds	r3, #27
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	4413      	add	r3, r2
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	08db      	lsrs	r3, r3, #3
 800454a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	331b      	adds	r3, #27
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4413      	add	r3, r2
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0202 	and.w	r2, r3, #2
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	331b      	adds	r3, #27
 8004570:	011b      	lsls	r3, r3, #4
 8004572:	4413      	add	r3, r2
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f003 020f 	and.w	r2, r3, #15
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	331b      	adds	r3, #27
 8004588:	011b      	lsls	r3, r3, #4
 800458a:	4413      	add	r3, r2
 800458c:	3304      	adds	r3, #4
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	0a1b      	lsrs	r3, r3, #8
 8004592:	b2da      	uxtb	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681a      	ldr	r2, [r3, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	331b      	adds	r3, #27
 80045a0:	011b      	lsls	r3, r3, #4
 80045a2:	4413      	add	r3, r2
 80045a4:	3304      	adds	r3, #4
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	0c1b      	lsrs	r3, r3, #16
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	011b      	lsls	r3, r3, #4
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	4413      	add	r3, r2
 80045d0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	0a1a      	lsrs	r2, r3, #8
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	3301      	adds	r3, #1
 80045dc:	b2d2      	uxtb	r2, r2
 80045de:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	011b      	lsls	r3, r3, #4
 80045e8:	4413      	add	r3, r2
 80045ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	0c1a      	lsrs	r2, r3, #16
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	3302      	adds	r3, #2
 80045f6:	b2d2      	uxtb	r2, r2
 80045f8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	011b      	lsls	r3, r3, #4
 8004602:	4413      	add	r3, r2
 8004604:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	0e1a      	lsrs	r2, r3, #24
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	3303      	adds	r3, #3
 8004610:	b2d2      	uxtb	r2, r2
 8004612:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	4413      	add	r3, r2
 800461e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	3304      	adds	r3, #4
 8004628:	b2d2      	uxtb	r2, r2
 800462a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	4413      	add	r3, r2
 8004636:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	0a1a      	lsrs	r2, r3, #8
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	3305      	adds	r3, #5
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	011b      	lsls	r3, r3, #4
 800464e:	4413      	add	r3, r2
 8004650:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	0c1a      	lsrs	r2, r3, #16
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	3306      	adds	r3, #6
 800465c:	b2d2      	uxtb	r2, r2
 800465e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	011b      	lsls	r3, r3, #4
 8004668:	4413      	add	r3, r2
 800466a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	0e1a      	lsrs	r2, r3, #24
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3307      	adds	r3, #7
 8004676:	b2d2      	uxtb	r2, r2
 8004678:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f042 0220 	orr.w	r2, r2, #32
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	e007      	b.n	80046a2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f042 0220 	orr.w	r2, r2, #32
 80046a0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e006      	b.n	80046b4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046aa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
  }
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr

080046c0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046d0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80046d2:	7bfb      	ldrb	r3, [r7, #15]
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d002      	beq.n	80046de <HAL_CAN_ActivateNotification+0x1e>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d109      	bne.n	80046f2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6959      	ldr	r1, [r3, #20]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	683a      	ldr	r2, [r7, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e006      	b.n	8004700 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
  }
}
 8004700:	4618      	mov	r0, r3
 8004702:	3714      	adds	r7, #20
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b08a      	sub	sp, #40	; 0x28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004714:	2300      	movs	r3, #0
 8004716:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b00      	cmp	r3, #0
 8004750:	d07c      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b00      	cmp	r3, #0
 800475a:	d023      	beq.n	80047a4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2201      	movs	r2, #1
 8004762:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 f983 	bl	8004a7a <HAL_CAN_TxMailbox0CompleteCallback>
 8004774:	e016      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d004      	beq.n	800478a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004786:	627b      	str	r3, [r7, #36]	; 0x24
 8004788:	e00c      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	f003 0308 	and.w	r3, r3, #8
 8004790:	2b00      	cmp	r3, #0
 8004792:	d004      	beq.n	800479e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004796:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800479a:	627b      	str	r3, [r7, #36]	; 0x24
 800479c:	e002      	b.n	80047a4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 f989 	bl	8004ab6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d024      	beq.n	80047f8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047b6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f963 	bl	8004a8e <HAL_CAN_TxMailbox1CompleteCallback>
 80047c8:	e016      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d004      	beq.n	80047de <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80047da:	627b      	str	r3, [r7, #36]	; 0x24
 80047dc:	e00c      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d004      	beq.n	80047f2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
 80047f0:	e002      	b.n	80047f8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 f969 	bl	8004aca <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80047f8:	69bb      	ldr	r3, [r7, #24]
 80047fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d024      	beq.n	800484c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800480a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f943 	bl	8004aa2 <HAL_CAN_TxMailbox2CompleteCallback>
 800481c:	e016      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800481e:	69bb      	ldr	r3, [r7, #24]
 8004820:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004824:	2b00      	cmp	r3, #0
 8004826:	d004      	beq.n	8004832 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8004828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800482e:	627b      	str	r3, [r7, #36]	; 0x24
 8004830:	e00c      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004838:	2b00      	cmp	r3, #0
 800483a:	d004      	beq.n	8004846 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800483c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800483e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004842:	627b      	str	r3, [r7, #36]	; 0x24
 8004844:	e002      	b.n	800484c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f949 	bl	8004ade <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800484c:	6a3b      	ldr	r3, [r7, #32]
 800484e:	f003 0308 	and.w	r3, r3, #8
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00c      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d007      	beq.n	8004870 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8004860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2210      	movs	r2, #16
 800486e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004870:	6a3b      	ldr	r3, [r7, #32]
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b00      	cmp	r3, #0
 8004878:	d00b      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f003 0308 	and.w	r3, r3, #8
 8004880:	2b00      	cmp	r3, #0
 8004882:	d006      	beq.n	8004892 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2208      	movs	r2, #8
 800488a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 f930 	bl	8004af2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004892:	6a3b      	ldr	r3, [r7, #32]
 8004894:	f003 0302 	and.w	r3, r3, #2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d009      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	f003 0303 	and.w	r3, r3, #3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d002      	beq.n	80048b0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fd fc62 	bl	8002174 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	f003 0310 	and.w	r3, r3, #16
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80048c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80048ca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2210      	movs	r2, #16
 80048d2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80048d4:	6a3b      	ldr	r3, [r7, #32]
 80048d6:	f003 0320 	and.w	r3, r3, #32
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00b      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80048de:	693b      	ldr	r3, [r7, #16]
 80048e0:	f003 0308 	and.w	r3, r3, #8
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d006      	beq.n	80048f6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2208      	movs	r2, #8
 80048ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f912 	bl	8004b1a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80048f6:	6a3b      	ldr	r3, [r7, #32]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d009      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d002      	beq.n	8004914 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 f8f9 	bl	8004b06 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004914:	6a3b      	ldr	r3, [r7, #32]
 8004916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d006      	beq.n	8004936 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2210      	movs	r2, #16
 800492e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f000 f8fc 	bl	8004b2e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004936:	6a3b      	ldr	r3, [r7, #32]
 8004938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00b      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004940:	69fb      	ldr	r3, [r7, #28]
 8004942:	f003 0308 	and.w	r3, r3, #8
 8004946:	2b00      	cmp	r3, #0
 8004948:	d006      	beq.n	8004958 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2208      	movs	r2, #8
 8004950:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 f8f5 	bl	8004b42 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8004958:	6a3b      	ldr	r3, [r7, #32]
 800495a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495e:	2b00      	cmp	r3, #0
 8004960:	d07b      	beq.n	8004a5a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	d072      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800496c:	6a3b      	ldr	r3, [r7, #32]
 800496e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800497c:	2b00      	cmp	r3, #0
 800497e:	d003      	beq.n	8004988 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004982:	f043 0301 	orr.w	r3, r3, #1
 8004986:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8004998:	2b00      	cmp	r3, #0
 800499a:	d003      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	f043 0302 	orr.w	r3, r3, #2
 80049a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049a4:	6a3b      	ldr	r3, [r7, #32]
 80049a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d008      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d003      	beq.n	80049c0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ba:	f043 0304 	orr.w	r3, r3, #4
 80049be:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049c0:	6a3b      	ldr	r3, [r7, #32]
 80049c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d043      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d03e      	beq.n	8004a52 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80049da:	2b60      	cmp	r3, #96	; 0x60
 80049dc:	d02b      	beq.n	8004a36 <HAL_CAN_IRQHandler+0x32a>
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d82e      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049e2:	2b50      	cmp	r3, #80	; 0x50
 80049e4:	d022      	beq.n	8004a2c <HAL_CAN_IRQHandler+0x320>
 80049e6:	2b50      	cmp	r3, #80	; 0x50
 80049e8:	d82a      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049ea:	2b40      	cmp	r3, #64	; 0x40
 80049ec:	d019      	beq.n	8004a22 <HAL_CAN_IRQHandler+0x316>
 80049ee:	2b40      	cmp	r3, #64	; 0x40
 80049f0:	d826      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049f2:	2b30      	cmp	r3, #48	; 0x30
 80049f4:	d010      	beq.n	8004a18 <HAL_CAN_IRQHandler+0x30c>
 80049f6:	2b30      	cmp	r3, #48	; 0x30
 80049f8:	d822      	bhi.n	8004a40 <HAL_CAN_IRQHandler+0x334>
 80049fa:	2b10      	cmp	r3, #16
 80049fc:	d002      	beq.n	8004a04 <HAL_CAN_IRQHandler+0x2f8>
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d005      	beq.n	8004a0e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004a02:	e01d      	b.n	8004a40 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a06:	f043 0308 	orr.w	r3, r3, #8
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a0c:	e019      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	f043 0310 	orr.w	r3, r3, #16
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a16:	e014      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	f043 0320 	orr.w	r3, r3, #32
 8004a1e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a20:	e00f      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a28:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a2a:	e00a      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a32:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a34:	e005      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004a3e:	e000      	b.n	8004a42 <HAL_CAN_IRQHandler+0x336>
            break;
 8004a40:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	699a      	ldr	r2, [r3, #24]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004a50:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	2204      	movs	r2, #4
 8004a58:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d008      	beq.n	8004a72 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f872 	bl	8004b56 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a72:	bf00      	nop
 8004a74:	3728      	adds	r7, #40	; 0x28
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a82:	bf00      	nop
 8004a84:	370c      	adds	r7, #12
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b083      	sub	sp, #12
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b083      	sub	sp, #12
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004aaa:	bf00      	nop
 8004aac:	370c      	adds	r7, #12
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ab6:	b480      	push	{r7}
 8004ab8:	b083      	sub	sp, #12
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004abe:	bf00      	nop
 8004ac0:	370c      	adds	r7, #12
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac8:	4770      	bx	lr

08004aca <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b083      	sub	sp, #12
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004ad2:	bf00      	nop
 8004ad4:	370c      	adds	r7, #12
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b083      	sub	sp, #12
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004ae6:	bf00      	nop
 8004ae8:	370c      	adds	r7, #12
 8004aea:	46bd      	mov	sp, r7
 8004aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af0:	4770      	bx	lr

08004af2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004af2:	b480      	push	{r7}
 8004af4:	b083      	sub	sp, #12
 8004af6:	af00      	add	r7, sp, #0
 8004af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004afa:	bf00      	nop
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8004b0e:	bf00      	nop
 8004b10:	370c      	adds	r7, #12
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b083      	sub	sp, #12
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004b22:	bf00      	nop
 8004b24:	370c      	adds	r7, #12
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr

08004b2e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004b2e:	b480      	push	{r7}
 8004b30:	b083      	sub	sp, #12
 8004b32:	af00      	add	r7, sp, #0
 8004b34:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004b36:	bf00      	nop
 8004b38:	370c      	adds	r7, #12
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b40:	4770      	bx	lr

08004b42 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004b42:	b480      	push	{r7}
 8004b44:	b083      	sub	sp, #12
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004b4a:	bf00      	nop
 8004b4c:	370c      	adds	r7, #12
 8004b4e:	46bd      	mov	sp, r7
 8004b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b54:	4770      	bx	lr

08004b56 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004b56:	b480      	push	{r7}
 8004b58:	b083      	sub	sp, #12
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004b5e:	bf00      	nop
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
	...

08004b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	; (8004bac <__NVIC_SetPriorityGrouping+0x40>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004b88:	4013      	ands	r3, r2
 8004b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004b94:	4b06      	ldr	r3, [pc, #24]	; (8004bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	; (8004bac <__NVIC_SetPriorityGrouping+0x40>)
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	60d3      	str	r3, [r2, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	e000ed00 	.word	0xe000ed00
 8004bb0:	05fa0000 	.word	0x05fa0000

08004bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bb8:	4b04      	ldr	r3, [pc, #16]	; (8004bcc <__NVIC_GetPriorityGrouping+0x18>)
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	0a1b      	lsrs	r3, r3, #8
 8004bbe:	f003 0307 	and.w	r3, r3, #7
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	e000ed00 	.word	0xe000ed00

08004bd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	db0b      	blt.n	8004bfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004be2:	79fb      	ldrb	r3, [r7, #7]
 8004be4:	f003 021f 	and.w	r2, r3, #31
 8004be8:	4907      	ldr	r1, [pc, #28]	; (8004c08 <__NVIC_EnableIRQ+0x38>)
 8004bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bee:	095b      	lsrs	r3, r3, #5
 8004bf0:	2001      	movs	r0, #1
 8004bf2:	fa00 f202 	lsl.w	r2, r0, r2
 8004bf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	e000e100 	.word	0xe000e100

08004c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	4603      	mov	r3, r0
 8004c14:	6039      	str	r1, [r7, #0]
 8004c16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	db0a      	blt.n	8004c36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	490c      	ldr	r1, [pc, #48]	; (8004c58 <__NVIC_SetPriority+0x4c>)
 8004c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c2a:	0112      	lsls	r2, r2, #4
 8004c2c:	b2d2      	uxtb	r2, r2
 8004c2e:	440b      	add	r3, r1
 8004c30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c34:	e00a      	b.n	8004c4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	b2da      	uxtb	r2, r3
 8004c3a:	4908      	ldr	r1, [pc, #32]	; (8004c5c <__NVIC_SetPriority+0x50>)
 8004c3c:	79fb      	ldrb	r3, [r7, #7]
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	3b04      	subs	r3, #4
 8004c44:	0112      	lsls	r2, r2, #4
 8004c46:	b2d2      	uxtb	r2, r2
 8004c48:	440b      	add	r3, r1
 8004c4a:	761a      	strb	r2, [r3, #24]
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c56:	4770      	bx	lr
 8004c58:	e000e100 	.word	0xe000e100
 8004c5c:	e000ed00 	.word	0xe000ed00

08004c60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b089      	sub	sp, #36	; 0x24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f1c3 0307 	rsb	r3, r3, #7
 8004c7a:	2b04      	cmp	r3, #4
 8004c7c:	bf28      	it	cs
 8004c7e:	2304      	movcs	r3, #4
 8004c80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c82:	69fb      	ldr	r3, [r7, #28]
 8004c84:	3304      	adds	r3, #4
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d902      	bls.n	8004c90 <NVIC_EncodePriority+0x30>
 8004c8a:	69fb      	ldr	r3, [r7, #28]
 8004c8c:	3b03      	subs	r3, #3
 8004c8e:	e000      	b.n	8004c92 <NVIC_EncodePriority+0x32>
 8004c90:	2300      	movs	r3, #0
 8004c92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	69bb      	ldr	r3, [r7, #24]
 8004c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c9e:	43da      	mvns	r2, r3
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	401a      	ands	r2, r3
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ca8:	f04f 31ff 	mov.w	r1, #4294967295
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	fa01 f303 	lsl.w	r3, r1, r3
 8004cb2:	43d9      	mvns	r1, r3
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cb8:	4313      	orrs	r3, r2
         );
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3724      	adds	r7, #36	; 0x24
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
	...

08004cc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3b01      	subs	r3, #1
 8004cd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004cd8:	d301      	bcc.n	8004cde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004cda:	2301      	movs	r3, #1
 8004cdc:	e00f      	b.n	8004cfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cde:	4a0a      	ldr	r2, [pc, #40]	; (8004d08 <SysTick_Config+0x40>)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ce6:	210f      	movs	r1, #15
 8004ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8004cec:	f7ff ff8e 	bl	8004c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cf0:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <SysTick_Config+0x40>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cf6:	4b04      	ldr	r3, [pc, #16]	; (8004d08 <SysTick_Config+0x40>)
 8004cf8:	2207      	movs	r2, #7
 8004cfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	e000e010 	.word	0xe000e010

08004d0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d14:	6878      	ldr	r0, [r7, #4]
 8004d16:	f7ff ff29 	bl	8004b6c <__NVIC_SetPriorityGrouping>
}
 8004d1a:	bf00      	nop
 8004d1c:	3708      	adds	r7, #8
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004d22:	b580      	push	{r7, lr}
 8004d24:	b086      	sub	sp, #24
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	4603      	mov	r3, r0
 8004d2a:	60b9      	str	r1, [r7, #8]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004d30:	2300      	movs	r3, #0
 8004d32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004d34:	f7ff ff3e 	bl	8004bb4 <__NVIC_GetPriorityGrouping>
 8004d38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68b9      	ldr	r1, [r7, #8]
 8004d3e:	6978      	ldr	r0, [r7, #20]
 8004d40:	f7ff ff8e 	bl	8004c60 <NVIC_EncodePriority>
 8004d44:	4602      	mov	r2, r0
 8004d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d4a:	4611      	mov	r1, r2
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f7ff ff5d 	bl	8004c0c <__NVIC_SetPriority>
}
 8004d52:	bf00      	nop
 8004d54:	3718      	adds	r7, #24
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7ff ff31 	bl	8004bd0 <__NVIC_EnableIRQ>
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}

08004d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d76:	b580      	push	{r7, lr}
 8004d78:	b082      	sub	sp, #8
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff ffa2 	bl	8004cc8 <SysTick_Config>
 8004d84:	4603      	mov	r3, r0
}
 8004d86:	4618      	mov	r0, r3
 8004d88:	3708      	adds	r7, #8
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b084      	sub	sp, #16
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d9a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004d9c:	f7ff f81e 	bl	8003ddc <HAL_GetTick>
 8004da0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d008      	beq.n	8004dc0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2280      	movs	r2, #128	; 0x80
 8004db2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e052      	b.n	8004e66 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0216 	bic.w	r2, r2, #22
 8004dce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695a      	ldr	r2, [r3, #20]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004dde:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d103      	bne.n	8004df0 <HAL_DMA_Abort+0x62>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d007      	beq.n	8004e00 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0208 	bic.w	r2, r2, #8
 8004dfe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e10:	e013      	b.n	8004e3a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004e12:	f7fe ffe3 	bl	8003ddc <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	2b05      	cmp	r3, #5
 8004e1e:	d90c      	bls.n	8004e3a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2220      	movs	r2, #32
 8004e24:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2203      	movs	r2, #3
 8004e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004e36:	2303      	movs	r3, #3
 8004e38:	e015      	b.n	8004e66 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 0301 	and.w	r3, r3, #1
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e4      	bne.n	8004e12 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4c:	223f      	movs	r2, #63	; 0x3f
 8004e4e:	409a      	lsls	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e6e:	b480      	push	{r7}
 8004e70:	b083      	sub	sp, #12
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d004      	beq.n	8004e8c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2280      	movs	r2, #128	; 0x80
 8004e86:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e00c      	b.n	8004ea6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2205      	movs	r2, #5
 8004e90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0201 	bic.w	r2, r2, #1
 8004ea2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
	...

08004eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b089      	sub	sp, #36	; 0x24
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	e175      	b.n	80051c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8004edc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	f040 8164 	bne.w	80051ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d005      	beq.n	8004f0a <HAL_GPIO_Init+0x56>
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	f003 0303 	and.w	r3, r3, #3
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d130      	bne.n	8004f6c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	005b      	lsls	r3, r3, #1
 8004f14:	2203      	movs	r2, #3
 8004f16:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1a:	43db      	mvns	r3, r3
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	4013      	ands	r3, r2
 8004f20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	68da      	ldr	r2, [r3, #12]
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	005b      	lsls	r3, r3, #1
 8004f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685b      	ldr	r3, [r3, #4]
 8004f3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f40:	2201      	movs	r2, #1
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	091b      	lsrs	r3, r3, #4
 8004f56:	f003 0201 	and.w	r2, r3, #1
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69ba      	ldr	r2, [r7, #24]
 8004f6a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	f003 0303 	and.w	r3, r3, #3
 8004f74:	2b03      	cmp	r3, #3
 8004f76:	d017      	beq.n	8004fa8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	005b      	lsls	r3, r3, #1
 8004f82:	2203      	movs	r2, #3
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f003 0303 	and.w	r3, r3, #3
 8004fb0:	2b02      	cmp	r3, #2
 8004fb2:	d123      	bne.n	8004ffc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	08da      	lsrs	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3208      	adds	r2, #8
 8004fbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0307 	and.w	r3, r3, #7
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	220f      	movs	r2, #15
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	f003 0307 	and.w	r3, r3, #7
 8004fe2:	009b      	lsls	r3, r3, #2
 8004fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe8:	69ba      	ldr	r2, [r7, #24]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	08da      	lsrs	r2, r3, #3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	3208      	adds	r2, #8
 8004ff6:	69b9      	ldr	r1, [r7, #24]
 8004ff8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	005b      	lsls	r3, r3, #1
 8005006:	2203      	movs	r2, #3
 8005008:	fa02 f303 	lsl.w	r3, r2, r3
 800500c:	43db      	mvns	r3, r3
 800500e:	69ba      	ldr	r2, [r7, #24]
 8005010:	4013      	ands	r3, r2
 8005012:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f003 0203 	and.w	r2, r3, #3
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	fa02 f303 	lsl.w	r3, r2, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4313      	orrs	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80be 	beq.w	80051ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800503e:	4b66      	ldr	r3, [pc, #408]	; (80051d8 <HAL_GPIO_Init+0x324>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	4a65      	ldr	r2, [pc, #404]	; (80051d8 <HAL_GPIO_Init+0x324>)
 8005044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005048:	6453      	str	r3, [r2, #68]	; 0x44
 800504a:	4b63      	ldr	r3, [pc, #396]	; (80051d8 <HAL_GPIO_Init+0x324>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005056:	4a61      	ldr	r2, [pc, #388]	; (80051dc <HAL_GPIO_Init+0x328>)
 8005058:	69fb      	ldr	r3, [r7, #28]
 800505a:	089b      	lsrs	r3, r3, #2
 800505c:	3302      	adds	r3, #2
 800505e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	f003 0303 	and.w	r3, r3, #3
 800506a:	009b      	lsls	r3, r3, #2
 800506c:	220f      	movs	r2, #15
 800506e:	fa02 f303 	lsl.w	r3, r2, r3
 8005072:	43db      	mvns	r3, r3
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4013      	ands	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a58      	ldr	r2, [pc, #352]	; (80051e0 <HAL_GPIO_Init+0x32c>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d037      	beq.n	80050f2 <HAL_GPIO_Init+0x23e>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a57      	ldr	r2, [pc, #348]	; (80051e4 <HAL_GPIO_Init+0x330>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d031      	beq.n	80050ee <HAL_GPIO_Init+0x23a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a56      	ldr	r2, [pc, #344]	; (80051e8 <HAL_GPIO_Init+0x334>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d02b      	beq.n	80050ea <HAL_GPIO_Init+0x236>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a55      	ldr	r2, [pc, #340]	; (80051ec <HAL_GPIO_Init+0x338>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d025      	beq.n	80050e6 <HAL_GPIO_Init+0x232>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a54      	ldr	r2, [pc, #336]	; (80051f0 <HAL_GPIO_Init+0x33c>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d01f      	beq.n	80050e2 <HAL_GPIO_Init+0x22e>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	4a53      	ldr	r2, [pc, #332]	; (80051f4 <HAL_GPIO_Init+0x340>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d019      	beq.n	80050de <HAL_GPIO_Init+0x22a>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a52      	ldr	r2, [pc, #328]	; (80051f8 <HAL_GPIO_Init+0x344>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d013      	beq.n	80050da <HAL_GPIO_Init+0x226>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	4a51      	ldr	r2, [pc, #324]	; (80051fc <HAL_GPIO_Init+0x348>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00d      	beq.n	80050d6 <HAL_GPIO_Init+0x222>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a50      	ldr	r2, [pc, #320]	; (8005200 <HAL_GPIO_Init+0x34c>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d007      	beq.n	80050d2 <HAL_GPIO_Init+0x21e>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	4a4f      	ldr	r2, [pc, #316]	; (8005204 <HAL_GPIO_Init+0x350>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d101      	bne.n	80050ce <HAL_GPIO_Init+0x21a>
 80050ca:	2309      	movs	r3, #9
 80050cc:	e012      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050ce:	230a      	movs	r3, #10
 80050d0:	e010      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050d2:	2308      	movs	r3, #8
 80050d4:	e00e      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050d6:	2307      	movs	r3, #7
 80050d8:	e00c      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050da:	2306      	movs	r3, #6
 80050dc:	e00a      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050de:	2305      	movs	r3, #5
 80050e0:	e008      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050e2:	2304      	movs	r3, #4
 80050e4:	e006      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050e6:	2303      	movs	r3, #3
 80050e8:	e004      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e002      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050ee:	2301      	movs	r3, #1
 80050f0:	e000      	b.n	80050f4 <HAL_GPIO_Init+0x240>
 80050f2:	2300      	movs	r3, #0
 80050f4:	69fa      	ldr	r2, [r7, #28]
 80050f6:	f002 0203 	and.w	r2, r2, #3
 80050fa:	0092      	lsls	r2, r2, #2
 80050fc:	4093      	lsls	r3, r2
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4313      	orrs	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005104:	4935      	ldr	r1, [pc, #212]	; (80051dc <HAL_GPIO_Init+0x328>)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	089b      	lsrs	r3, r3, #2
 800510a:	3302      	adds	r3, #2
 800510c:	69ba      	ldr	r2, [r7, #24]
 800510e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005112:	4b3d      	ldr	r3, [pc, #244]	; (8005208 <HAL_GPIO_Init+0x354>)
 8005114:	689b      	ldr	r3, [r3, #8]
 8005116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	43db      	mvns	r3, r3
 800511c:	69ba      	ldr	r2, [r7, #24]
 800511e:	4013      	ands	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800512e:	69ba      	ldr	r2, [r7, #24]
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	4313      	orrs	r3, r2
 8005134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005136:	4a34      	ldr	r2, [pc, #208]	; (8005208 <HAL_GPIO_Init+0x354>)
 8005138:	69bb      	ldr	r3, [r7, #24]
 800513a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800513c:	4b32      	ldr	r3, [pc, #200]	; (8005208 <HAL_GPIO_Init+0x354>)
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	43db      	mvns	r3, r3
 8005146:	69ba      	ldr	r2, [r7, #24]
 8005148:	4013      	ands	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005154:	2b00      	cmp	r3, #0
 8005156:	d003      	beq.n	8005160 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8005158:	69ba      	ldr	r2, [r7, #24]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	4313      	orrs	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005160:	4a29      	ldr	r2, [pc, #164]	; (8005208 <HAL_GPIO_Init+0x354>)
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005166:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_GPIO_Init+0x354>)
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	43db      	mvns	r3, r3
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	4013      	ands	r3, r2
 8005174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800518a:	4a1f      	ldr	r2, [pc, #124]	; (8005208 <HAL_GPIO_Init+0x354>)
 800518c:	69bb      	ldr	r3, [r7, #24]
 800518e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005190:	4b1d      	ldr	r3, [pc, #116]	; (8005208 <HAL_GPIO_Init+0x354>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	43db      	mvns	r3, r3
 800519a:	69ba      	ldr	r2, [r7, #24]
 800519c:	4013      	ands	r3, r2
 800519e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d003      	beq.n	80051b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <HAL_GPIO_Init+0x354>)
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	2b0f      	cmp	r3, #15
 80051c4:	f67f ae86 	bls.w	8004ed4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	3724      	adds	r7, #36	; 0x24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	40023800 	.word	0x40023800
 80051dc:	40013800 	.word	0x40013800
 80051e0:	40020000 	.word	0x40020000
 80051e4:	40020400 	.word	0x40020400
 80051e8:	40020800 	.word	0x40020800
 80051ec:	40020c00 	.word	0x40020c00
 80051f0:	40021000 	.word	0x40021000
 80051f4:	40021400 	.word	0x40021400
 80051f8:	40021800 	.word	0x40021800
 80051fc:	40021c00 	.word	0x40021c00
 8005200:	40022000 	.word	0x40022000
 8005204:	40022400 	.word	0x40022400
 8005208:	40013c00 	.word	0x40013c00

0800520c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	460b      	mov	r3, r1
 8005216:	807b      	strh	r3, [r7, #2]
 8005218:	4613      	mov	r3, r2
 800521a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800521c:	787b      	ldrb	r3, [r7, #1]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005222:	887a      	ldrh	r2, [r7, #2]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8005228:	e003      	b.n	8005232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800522a:	887b      	ldrh	r3, [r7, #2]
 800522c:	041a      	lsls	r2, r3, #16
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	619a      	str	r2, [r3, #24]
}
 8005232:	bf00      	nop
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800523e:	b480      	push	{r7}
 8005240:	b085      	sub	sp, #20
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	460b      	mov	r3, r1
 8005248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005250:	887a      	ldrh	r2, [r7, #2]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	4013      	ands	r3, r2
 8005256:	041a      	lsls	r2, r3, #16
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	43d9      	mvns	r1, r3
 800525c:	887b      	ldrh	r3, [r7, #2]
 800525e:	400b      	ands	r3, r1
 8005260:	431a      	orrs	r2, r3
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	619a      	str	r2, [r3, #24]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
	...

08005274 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	4603      	mov	r3, r0
 800527c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800527e:	4b08      	ldr	r3, [pc, #32]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005280:	695a      	ldr	r2, [r3, #20]
 8005282:	88fb      	ldrh	r3, [r7, #6]
 8005284:	4013      	ands	r3, r2
 8005286:	2b00      	cmp	r3, #0
 8005288:	d006      	beq.n	8005298 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800528a:	4a05      	ldr	r2, [pc, #20]	; (80052a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005290:	88fb      	ldrh	r3, [r7, #6]
 8005292:	4618      	mov	r0, r3
 8005294:	f7fb fe0c 	bl	8000eb0 <HAL_GPIO_EXTI_Callback>
  }
}
 8005298:	bf00      	nop
 800529a:	3708      	adds	r7, #8
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	40013c00 	.word	0x40013c00

080052a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b082      	sub	sp, #8
 80052a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80052ae:	4b23      	ldr	r3, [pc, #140]	; (800533c <HAL_PWREx_EnableOverDrive+0x98>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	4a22      	ldr	r2, [pc, #136]	; (800533c <HAL_PWREx_EnableOverDrive+0x98>)
 80052b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052b8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ba:	4b20      	ldr	r3, [pc, #128]	; (800533c <HAL_PWREx_EnableOverDrive+0x98>)
 80052bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052c2:	603b      	str	r3, [r7, #0]
 80052c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80052c6:	4b1e      	ldr	r3, [pc, #120]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1d      	ldr	r2, [pc, #116]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80052d2:	f7fe fd83 	bl	8003ddc <HAL_GetTick>
 80052d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052d8:	e009      	b.n	80052ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80052da:	f7fe fd7f 	bl	8003ddc <HAL_GetTick>
 80052de:	4602      	mov	r2, r0
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	1ad3      	subs	r3, r2, r3
 80052e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052e8:	d901      	bls.n	80052ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e022      	b.n	8005334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80052ee:	4b14      	ldr	r3, [pc, #80]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052fa:	d1ee      	bne.n	80052da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80052fc:	4b10      	ldr	r3, [pc, #64]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0f      	ldr	r2, [pc, #60]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005308:	f7fe fd68 	bl	8003ddc <HAL_GetTick>
 800530c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800530e:	e009      	b.n	8005324 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005310:	f7fe fd64 	bl	8003ddc <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800531e:	d901      	bls.n	8005324 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e007      	b.n	8005334 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005324:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800532c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005330:	d1ee      	bne.n	8005310 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3708      	adds	r7, #8
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	40007000 	.word	0x40007000

08005344 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800534c:	2300      	movs	r3, #0
 800534e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d101      	bne.n	800535a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	e291      	b.n	800587e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0301 	and.w	r3, r3, #1
 8005362:	2b00      	cmp	r3, #0
 8005364:	f000 8087 	beq.w	8005476 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005368:	4b96      	ldr	r3, [pc, #600]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f003 030c 	and.w	r3, r3, #12
 8005370:	2b04      	cmp	r3, #4
 8005372:	d00c      	beq.n	800538e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005374:	4b93      	ldr	r3, [pc, #588]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f003 030c 	and.w	r3, r3, #12
 800537c:	2b08      	cmp	r3, #8
 800537e:	d112      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62>
 8005380:	4b90      	ldr	r3, [pc, #576]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005388:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800538c:	d10b      	bne.n	80053a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800538e:	4b8d      	ldr	r3, [pc, #564]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d06c      	beq.n	8005474 <HAL_RCC_OscConfig+0x130>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d168      	bne.n	8005474 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e26b      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ae:	d106      	bne.n	80053be <HAL_RCC_OscConfig+0x7a>
 80053b0:	4b84      	ldr	r3, [pc, #528]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a83      	ldr	r2, [pc, #524]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053ba:	6013      	str	r3, [r2, #0]
 80053bc:	e02e      	b.n	800541c <HAL_RCC_OscConfig+0xd8>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d10c      	bne.n	80053e0 <HAL_RCC_OscConfig+0x9c>
 80053c6:	4b7f      	ldr	r3, [pc, #508]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a7e      	ldr	r2, [pc, #504]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d0:	6013      	str	r3, [r2, #0]
 80053d2:	4b7c      	ldr	r3, [pc, #496]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4a7b      	ldr	r2, [pc, #492]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053dc:	6013      	str	r3, [r2, #0]
 80053de:	e01d      	b.n	800541c <HAL_RCC_OscConfig+0xd8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCC_OscConfig+0xc0>
 80053ea:	4b76      	ldr	r3, [pc, #472]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	4a75      	ldr	r2, [pc, #468]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80053f4:	6013      	str	r3, [r2, #0]
 80053f6:	4b73      	ldr	r3, [pc, #460]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a72      	ldr	r2, [pc, #456]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80053fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005400:	6013      	str	r3, [r2, #0]
 8005402:	e00b      	b.n	800541c <HAL_RCC_OscConfig+0xd8>
 8005404:	4b6f      	ldr	r3, [pc, #444]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a6e      	ldr	r2, [pc, #440]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	6013      	str	r3, [r2, #0]
 8005410:	4b6c      	ldr	r3, [pc, #432]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a6b      	ldr	r2, [pc, #428]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800541a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d013      	beq.n	800544c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005424:	f7fe fcda 	bl	8003ddc <HAL_GetTick>
 8005428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800542a:	e008      	b.n	800543e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800542c:	f7fe fcd6 	bl	8003ddc <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	2b64      	cmp	r3, #100	; 0x64
 8005438:	d901      	bls.n	800543e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800543a:	2303      	movs	r3, #3
 800543c:	e21f      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	4b61      	ldr	r3, [pc, #388]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d0f0      	beq.n	800542c <HAL_RCC_OscConfig+0xe8>
 800544a:	e014      	b.n	8005476 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fe fcc6 	bl	8003ddc <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005454:	f7fe fcc2 	bl	8003ddc <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b64      	cmp	r3, #100	; 0x64
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e20b      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x110>
 8005472:	e000      	b.n	8005476 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f003 0302 	and.w	r3, r3, #2
 800547e:	2b00      	cmp	r3, #0
 8005480:	d069      	beq.n	8005556 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005482:	4b50      	ldr	r3, [pc, #320]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800548e:	4b4d      	ldr	r3, [pc, #308]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 030c 	and.w	r3, r3, #12
 8005496:	2b08      	cmp	r3, #8
 8005498:	d11c      	bne.n	80054d4 <HAL_RCC_OscConfig+0x190>
 800549a:	4b4a      	ldr	r3, [pc, #296]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d116      	bne.n	80054d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054a6:	4b47      	ldr	r3, [pc, #284]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0302 	and.w	r3, r3, #2
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d005      	beq.n	80054be <HAL_RCC_OscConfig+0x17a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d001      	beq.n	80054be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e1df      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054be:	4b41      	ldr	r3, [pc, #260]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
 80054ca:	00db      	lsls	r3, r3, #3
 80054cc:	493d      	ldr	r1, [pc, #244]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054d2:	e040      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	68db      	ldr	r3, [r3, #12]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d023      	beq.n	8005524 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054dc:	4b39      	ldr	r3, [pc, #228]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a38      	ldr	r2, [pc, #224]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e8:	f7fe fc78 	bl	8003ddc <HAL_GetTick>
 80054ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054f0:	f7fe fc74 	bl	8003ddc <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1bd      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005502:	4b30      	ldr	r3, [pc, #192]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d0f0      	beq.n	80054f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800550e:	4b2d      	ldr	r3, [pc, #180]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	4929      	ldr	r1, [pc, #164]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800551e:	4313      	orrs	r3, r2
 8005520:	600b      	str	r3, [r1, #0]
 8005522:	e018      	b.n	8005556 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005524:	4b27      	ldr	r3, [pc, #156]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a26      	ldr	r2, [pc, #152]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800552a:	f023 0301 	bic.w	r3, r3, #1
 800552e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005530:	f7fe fc54 	bl	8003ddc <HAL_GetTick>
 8005534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005536:	e008      	b.n	800554a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005538:	f7fe fc50 	bl	8003ddc <HAL_GetTick>
 800553c:	4602      	mov	r2, r0
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	1ad3      	subs	r3, r2, r3
 8005542:	2b02      	cmp	r3, #2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e199      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800554a:	4b1e      	ldr	r3, [pc, #120]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1f0      	bne.n	8005538 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0308 	and.w	r3, r3, #8
 800555e:	2b00      	cmp	r3, #0
 8005560:	d038      	beq.n	80055d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	695b      	ldr	r3, [r3, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d019      	beq.n	800559e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800556a:	4b16      	ldr	r3, [pc, #88]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 800556c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800556e:	4a15      	ldr	r2, [pc, #84]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005570:	f043 0301 	orr.w	r3, r3, #1
 8005574:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005576:	f7fe fc31 	bl	8003ddc <HAL_GetTick>
 800557a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557c:	e008      	b.n	8005590 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800557e:	f7fe fc2d 	bl	8003ddc <HAL_GetTick>
 8005582:	4602      	mov	r2, r0
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	1ad3      	subs	r3, r2, r3
 8005588:	2b02      	cmp	r3, #2
 800558a:	d901      	bls.n	8005590 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800558c:	2303      	movs	r3, #3
 800558e:	e176      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005590:	4b0c      	ldr	r3, [pc, #48]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 8005592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005594:	f003 0302 	and.w	r3, r3, #2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d0f0      	beq.n	800557e <HAL_RCC_OscConfig+0x23a>
 800559c:	e01a      	b.n	80055d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800559e:	4b09      	ldr	r3, [pc, #36]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80055a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055a2:	4a08      	ldr	r2, [pc, #32]	; (80055c4 <HAL_RCC_OscConfig+0x280>)
 80055a4:	f023 0301 	bic.w	r3, r3, #1
 80055a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055aa:	f7fe fc17 	bl	8003ddc <HAL_GetTick>
 80055ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055b0:	e00a      	b.n	80055c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055b2:	f7fe fc13 	bl	8003ddc <HAL_GetTick>
 80055b6:	4602      	mov	r2, r0
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	1ad3      	subs	r3, r2, r3
 80055bc:	2b02      	cmp	r3, #2
 80055be:	d903      	bls.n	80055c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e15c      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
 80055c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055c8:	4b91      	ldr	r3, [pc, #580]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80055ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1ee      	bne.n	80055b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0304 	and.w	r3, r3, #4
 80055dc:	2b00      	cmp	r3, #0
 80055de:	f000 80a4 	beq.w	800572a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055e2:	4b8b      	ldr	r3, [pc, #556]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10d      	bne.n	800560a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80055ee:	4b88      	ldr	r3, [pc, #544]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80055f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f2:	4a87      	ldr	r2, [pc, #540]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80055f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80055f8:	6413      	str	r3, [r2, #64]	; 0x40
 80055fa:	4b85      	ldr	r3, [pc, #532]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005602:	60bb      	str	r3, [r7, #8]
 8005604:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005606:	2301      	movs	r3, #1
 8005608:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800560a:	4b82      	ldr	r3, [pc, #520]	; (8005814 <HAL_RCC_OscConfig+0x4d0>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005612:	2b00      	cmp	r3, #0
 8005614:	d118      	bne.n	8005648 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005616:	4b7f      	ldr	r3, [pc, #508]	; (8005814 <HAL_RCC_OscConfig+0x4d0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a7e      	ldr	r2, [pc, #504]	; (8005814 <HAL_RCC_OscConfig+0x4d0>)
 800561c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005620:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005622:	f7fe fbdb 	bl	8003ddc <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800562a:	f7fe fbd7 	bl	8003ddc <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b64      	cmp	r3, #100	; 0x64
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e120      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800563c:	4b75      	ldr	r3, [pc, #468]	; (8005814 <HAL_RCC_OscConfig+0x4d0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d106      	bne.n	800565e <HAL_RCC_OscConfig+0x31a>
 8005650:	4b6f      	ldr	r3, [pc, #444]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005654:	4a6e      	ldr	r2, [pc, #440]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005656:	f043 0301 	orr.w	r3, r3, #1
 800565a:	6713      	str	r3, [r2, #112]	; 0x70
 800565c:	e02d      	b.n	80056ba <HAL_RCC_OscConfig+0x376>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10c      	bne.n	8005680 <HAL_RCC_OscConfig+0x33c>
 8005666:	4b6a      	ldr	r3, [pc, #424]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566a:	4a69      	ldr	r2, [pc, #420]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800566c:	f023 0301 	bic.w	r3, r3, #1
 8005670:	6713      	str	r3, [r2, #112]	; 0x70
 8005672:	4b67      	ldr	r3, [pc, #412]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a66      	ldr	r2, [pc, #408]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005678:	f023 0304 	bic.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	e01c      	b.n	80056ba <HAL_RCC_OscConfig+0x376>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	2b05      	cmp	r3, #5
 8005686:	d10c      	bne.n	80056a2 <HAL_RCC_OscConfig+0x35e>
 8005688:	4b61      	ldr	r3, [pc, #388]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800568a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800568c:	4a60      	ldr	r2, [pc, #384]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800568e:	f043 0304 	orr.w	r3, r3, #4
 8005692:	6713      	str	r3, [r2, #112]	; 0x70
 8005694:	4b5e      	ldr	r3, [pc, #376]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	4a5d      	ldr	r2, [pc, #372]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800569a:	f043 0301 	orr.w	r3, r3, #1
 800569e:	6713      	str	r3, [r2, #112]	; 0x70
 80056a0:	e00b      	b.n	80056ba <HAL_RCC_OscConfig+0x376>
 80056a2:	4b5b      	ldr	r3, [pc, #364]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80056a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a6:	4a5a      	ldr	r2, [pc, #360]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80056a8:	f023 0301 	bic.w	r3, r3, #1
 80056ac:	6713      	str	r3, [r2, #112]	; 0x70
 80056ae:	4b58      	ldr	r3, [pc, #352]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	4a57      	ldr	r2, [pc, #348]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80056b4:	f023 0304 	bic.w	r3, r3, #4
 80056b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d015      	beq.n	80056ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c2:	f7fe fb8b 	bl	8003ddc <HAL_GetTick>
 80056c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056c8:	e00a      	b.n	80056e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ca:	f7fe fb87 	bl	8003ddc <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80056d8:	4293      	cmp	r3, r2
 80056da:	d901      	bls.n	80056e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e0ce      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056e0:	4b4b      	ldr	r3, [pc, #300]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80056e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ee      	beq.n	80056ca <HAL_RCC_OscConfig+0x386>
 80056ec:	e014      	b.n	8005718 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ee:	f7fe fb75 	bl	8003ddc <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f4:	e00a      	b.n	800570c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056f6:	f7fe fb71 	bl	8003ddc <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	f241 3288 	movw	r2, #5000	; 0x1388
 8005704:	4293      	cmp	r3, r2
 8005706:	d901      	bls.n	800570c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005708:	2303      	movs	r3, #3
 800570a:	e0b8      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800570c:	4b40      	ldr	r3, [pc, #256]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800570e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005710:	f003 0302 	and.w	r3, r3, #2
 8005714:	2b00      	cmp	r3, #0
 8005716:	d1ee      	bne.n	80056f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005718:	7dfb      	ldrb	r3, [r7, #23]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d105      	bne.n	800572a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800571e:	4b3c      	ldr	r3, [pc, #240]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005722:	4a3b      	ldr	r2, [pc, #236]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005724:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005728:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f000 80a4 	beq.w	800587c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005734:	4b36      	ldr	r3, [pc, #216]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 030c 	and.w	r3, r3, #12
 800573c:	2b08      	cmp	r3, #8
 800573e:	d06b      	beq.n	8005818 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	699b      	ldr	r3, [r3, #24]
 8005744:	2b02      	cmp	r3, #2
 8005746:	d149      	bne.n	80057dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005748:	4b31      	ldr	r3, [pc, #196]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a30      	ldr	r2, [pc, #192]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 800574e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005752:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005754:	f7fe fb42 	bl	8003ddc <HAL_GetTick>
 8005758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800575a:	e008      	b.n	800576e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800575c:	f7fe fb3e 	bl	8003ddc <HAL_GetTick>
 8005760:	4602      	mov	r2, r0
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	2b02      	cmp	r3, #2
 8005768:	d901      	bls.n	800576e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e087      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800576e:	4b28      	ldr	r3, [pc, #160]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d1f0      	bne.n	800575c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	69da      	ldr	r2, [r3, #28]
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	431a      	orrs	r2, r3
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005788:	019b      	lsls	r3, r3, #6
 800578a:	431a      	orrs	r2, r3
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005790:	085b      	lsrs	r3, r3, #1
 8005792:	3b01      	subs	r3, #1
 8005794:	041b      	lsls	r3, r3, #16
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579c:	061b      	lsls	r3, r3, #24
 800579e:	4313      	orrs	r3, r2
 80057a0:	4a1b      	ldr	r2, [pc, #108]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80057a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057a8:	4b19      	ldr	r3, [pc, #100]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a18      	ldr	r2, [pc, #96]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fe fb12 	bl	8003ddc <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057bc:	f7fe fb0e 	bl	8003ddc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e057      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ce:	4b10      	ldr	r3, [pc, #64]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d0f0      	beq.n	80057bc <HAL_RCC_OscConfig+0x478>
 80057da:	e04f      	b.n	800587c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057dc:	4b0c      	ldr	r3, [pc, #48]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a0b      	ldr	r2, [pc, #44]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 80057e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057e8:	f7fe faf8 	bl	8003ddc <HAL_GetTick>
 80057ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ee:	e008      	b.n	8005802 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f0:	f7fe faf4 	bl	8003ddc <HAL_GetTick>
 80057f4:	4602      	mov	r2, r0
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d901      	bls.n	8005802 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e03d      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005802:	4b03      	ldr	r3, [pc, #12]	; (8005810 <HAL_RCC_OscConfig+0x4cc>)
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1f0      	bne.n	80057f0 <HAL_RCC_OscConfig+0x4ac>
 800580e:	e035      	b.n	800587c <HAL_RCC_OscConfig+0x538>
 8005810:	40023800 	.word	0x40023800
 8005814:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8005818:	4b1b      	ldr	r3, [pc, #108]	; (8005888 <HAL_RCC_OscConfig+0x544>)
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	699b      	ldr	r3, [r3, #24]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d028      	beq.n	8005878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005830:	429a      	cmp	r2, r3
 8005832:	d121      	bne.n	8005878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800583e:	429a      	cmp	r2, r3
 8005840:	d11a      	bne.n	8005878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005848:	4013      	ands	r3, r2
 800584a:	687a      	ldr	r2, [r7, #4]
 800584c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800584e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585e:	085b      	lsrs	r3, r3, #1
 8005860:	3b01      	subs	r3, #1
 8005862:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005864:	429a      	cmp	r2, r3
 8005866:	d107      	bne.n	8005878 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005872:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005874:	429a      	cmp	r2, r3
 8005876:	d001      	beq.n	800587c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e000      	b.n	800587e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800587c:	2300      	movs	r3, #0
}
 800587e:	4618      	mov	r0, r3
 8005880:	3718      	adds	r7, #24
 8005882:	46bd      	mov	sp, r7
 8005884:	bd80      	pop	{r7, pc}
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800

0800588c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b084      	sub	sp, #16
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e0d0      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058a4:	4b6a      	ldr	r3, [pc, #424]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 030f 	and.w	r3, r3, #15
 80058ac:	683a      	ldr	r2, [r7, #0]
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d910      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058b2:	4b67      	ldr	r3, [pc, #412]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 020f 	bic.w	r2, r3, #15
 80058ba:	4965      	ldr	r1, [pc, #404]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	4313      	orrs	r3, r2
 80058c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b63      	ldr	r3, [pc, #396]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0b8      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b59      	ldr	r3, [pc, #356]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a58      	ldr	r2, [pc, #352]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 80058f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005904:	4b53      	ldr	r3, [pc, #332]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a52      	ldr	r2, [pc, #328]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 800590a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800590e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b50      	ldr	r3, [pc, #320]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	494d      	ldr	r1, [pc, #308]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d040      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b47      	ldr	r3, [pc, #284]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d115      	bne.n	800596e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e07f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d107      	bne.n	800595e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800594e:	4b41      	ldr	r3, [pc, #260]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005956:	2b00      	cmp	r3, #0
 8005958:	d109      	bne.n	800596e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	e073      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800595e:	4b3d      	ldr	r3, [pc, #244]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	f003 0302 	and.w	r3, r3, #2
 8005966:	2b00      	cmp	r3, #0
 8005968:	d101      	bne.n	800596e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e06b      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b39      	ldr	r3, [pc, #228]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4936      	ldr	r1, [pc, #216]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fe fa2c 	bl	8003ddc <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fe fa28 	bl	8003ddc <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	; 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e053      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b2d      	ldr	r3, [pc, #180]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059b0:	4b27      	ldr	r3, [pc, #156]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d210      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b24      	ldr	r3, [pc, #144]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f023 020f 	bic.w	r2, r3, #15
 80059c6:	4922      	ldr	r1, [pc, #136]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b20      	ldr	r3, [pc, #128]	; (8005a50 <HAL_RCC_ClockConfig+0x1c4>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ec:	4b19      	ldr	r3, [pc, #100]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4916      	ldr	r1, [pc, #88]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005a0a:	4b12      	ldr	r3, [pc, #72]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	490e      	ldr	r1, [pc, #56]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1e:	f000 f821 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b0b      	ldr	r3, [pc, #44]	; (8005a54 <HAL_RCC_ClockConfig+0x1c8>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	490a      	ldr	r1, [pc, #40]	; (8005a58 <HAL_RCC_ClockConfig+0x1cc>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a09      	ldr	r2, [pc, #36]	; (8005a5c <HAL_RCC_ClockConfig+0x1d0>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_RCC_ClockConfig+0x1d4>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe f988 	bl	8003d54 <HAL_InitTick>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023c00 	.word	0x40023c00
 8005a54:	40023800 	.word	0x40023800
 8005a58:	080099fc 	.word	0x080099fc
 8005a5c:	20000004 	.word	0x20000004
 8005a60:	20000008 	.word	0x20000008

08005a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b094      	sub	sp, #80	; 0x50
 8005a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005a70:	2300      	movs	r3, #0
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	2300      	movs	r3, #0
 8005a76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a7c:	4b79      	ldr	r3, [pc, #484]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d00d      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	f200 80e1 	bhi.w	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x34>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a96:	e0db      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b73      	ldr	r3, [pc, #460]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a9c:	e0db      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9e:	4b73      	ldr	r3, [pc, #460]	; (8005c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8005aa0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aa2:	e0d8      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa4:	4b6f      	ldr	r3, [pc, #444]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005aae:	4b6d      	ldr	r3, [pc, #436]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aba:	4b6a      	ldr	r3, [pc, #424]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ac4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	633b      	str	r3, [r7, #48]	; 0x30
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	; 0x34
 8005ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	0159      	lsls	r1, r3, #5
 8005ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae8:	0150      	lsls	r0, r2, #5
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4621      	mov	r1, r4
 8005af0:	1a51      	subs	r1, r2, r1
 8005af2:	6139      	str	r1, [r7, #16]
 8005af4:	4629      	mov	r1, r5
 8005af6:	eb63 0301 	sbc.w	r3, r3, r1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b08:	4659      	mov	r1, fp
 8005b0a:	018b      	lsls	r3, r1, #6
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b12:	4651      	mov	r1, sl
 8005b14:	018a      	lsls	r2, r1, #6
 8005b16:	4651      	mov	r1, sl
 8005b18:	ebb2 0801 	subs.w	r8, r2, r1
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b36:	4690      	mov	r8, r2
 8005b38:	4699      	mov	r9, r3
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	eb18 0303 	adds.w	r3, r8, r3
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	462b      	mov	r3, r5
 8005b44:	eb49 0303 	adc.w	r3, r9, r3
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b56:	4629      	mov	r1, r5
 8005b58:	024b      	lsls	r3, r1, #9
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b60:	4621      	mov	r1, r4
 8005b62:	024a      	lsls	r2, r1, #9
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b74:	f7fa ffb2 	bl	8000adc <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b80:	e058      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b82:	4b38      	ldr	r3, [pc, #224]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	; 0x24
 8005b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f04f 0000 	mov.w	r0, #0
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bae:	0150      	lsls	r0, r2, #5
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	00eb      	lsls	r3, r5, #3
 8005be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bea:	00e2      	lsls	r2, r4, #3
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	18e3      	adds	r3, r4, r3
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	eb45 0303 	adc.w	r3, r5, r3
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	028b      	lsls	r3, r1, #10
 8005c0e:	4621      	mov	r1, r4
 8005c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c14:	4621      	mov	r1, r4
 8005c16:	028a      	lsls	r2, r1, #10
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	61fa      	str	r2, [r7, #28]
 8005c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c28:	f7fa ff58 	bl	8000adc <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4613      	mov	r3, r2
 8005c32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005c34:	4b0b      	ldr	r3, [pc, #44]	; (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005c44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c4e:	e002      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c50:	4b05      	ldr	r3, [pc, #20]	; (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3750      	adds	r7, #80	; 0x50
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	007a1200 	.word	0x007a1200

08005c70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b03      	ldr	r3, [pc, #12]	; (8005c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000004 	.word	0x20000004

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0a9b      	lsrs	r3, r3, #10
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	; (8005cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08009a0c 	.word	0x08009a0c

08005cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cb4:	f7ff ffdc 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	; (8005cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0b5b      	lsrs	r3, r3, #13
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4903      	ldr	r1, [pc, #12]	; (8005cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	08009a0c 	.word	0x08009a0c

08005cd8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005ce8:	2300      	movs	r3, #0
 8005cea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005cec:	2300      	movs	r3, #0
 8005cee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d012      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005d00:	4b69      	ldr	r3, [pc, #420]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	4a68      	ldr	r2, [pc, #416]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d0a:	6093      	str	r3, [r2, #8]
 8005d0c:	4b66      	ldr	r3, [pc, #408]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d0e:	689a      	ldr	r2, [r3, #8]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d14:	4964      	ldr	r1, [pc, #400]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d16:	4313      	orrs	r3, r2
 8005d18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d101      	bne.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005d22:	2301      	movs	r3, #1
 8005d24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d017      	beq.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d32:	4b5d      	ldr	r3, [pc, #372]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d40:	4959      	ldr	r1, [pc, #356]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d42:	4313      	orrs	r3, r2
 8005d44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d50:	d101      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d101      	bne.n	8005d62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d017      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005d6e:	4b4e      	ldr	r3, [pc, #312]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	494a      	ldr	r1, [pc, #296]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005d8c:	d101      	bne.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d101      	bne.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005daa:	2301      	movs	r3, #1
 8005dac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0320 	and.w	r3, r3, #32
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	f000 808b 	beq.w	8005ed2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dbc:	4b3a      	ldr	r3, [pc, #232]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	4a39      	ldr	r2, [pc, #228]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	6413      	str	r3, [r2, #64]	; 0x40
 8005dc8:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dd0:	60bb      	str	r3, [r7, #8]
 8005dd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005dd4:	4b35      	ldr	r3, [pc, #212]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a34      	ldr	r2, [pc, #208]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005de0:	f7fd fffc 	bl	8003ddc <HAL_GetTick>
 8005de4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005de6:	e008      	b.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005de8:	f7fd fff8 	bl	8003ddc <HAL_GetTick>
 8005dec:	4602      	mov	r2, r0
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	2b64      	cmp	r3, #100	; 0x64
 8005df4:	d901      	bls.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005df6:	2303      	movs	r3, #3
 8005df8:	e357      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005dfa:	4b2c      	ldr	r3, [pc, #176]	; (8005eac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0f0      	beq.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e06:	4b28      	ldr	r3, [pc, #160]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e0e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d035      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	693a      	ldr	r2, [r7, #16]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d02e      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e24:	4b20      	ldr	r3, [pc, #128]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e2c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e38:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e3a:	4b1b      	ldr	r3, [pc, #108]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e44:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005e46:	4a18      	ldr	r2, [pc, #96]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e4c:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e50:	f003 0301 	and.w	r3, r3, #1
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d114      	bne.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e58:	f7fd ffc0 	bl	8003ddc <HAL_GetTick>
 8005e5c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e5e:	e00a      	b.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e60:	f7fd ffbc 	bl	8003ddc <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	697b      	ldr	r3, [r7, #20]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d901      	bls.n	8005e76 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	e319      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e76:	4b0c      	ldr	r3, [pc, #48]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d0ee      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e8e:	d111      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005e90:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e92:	689b      	ldr	r3, [r3, #8]
 8005e94:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e9e:	400b      	ands	r3, r1
 8005ea0:	4901      	ldr	r1, [pc, #4]	; (8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	608b      	str	r3, [r1, #8]
 8005ea6:	e00b      	b.n	8005ec0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	0ffffcff 	.word	0x0ffffcff
 8005eb4:	4baa      	ldr	r3, [pc, #680]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	4aa9      	ldr	r2, [pc, #676]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005eba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005ebe:	6093      	str	r3, [r2, #8]
 8005ec0:	4ba7      	ldr	r3, [pc, #668]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ecc:	49a4      	ldr	r1, [pc, #656]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f003 0310 	and.w	r3, r3, #16
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d010      	beq.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005ede:	4ba0      	ldr	r3, [pc, #640]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ee4:	4a9e      	ldr	r2, [pc, #632]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005eee:	4b9c      	ldr	r3, [pc, #624]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ef0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef8:	4999      	ldr	r1, [pc, #612]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f0c:	4b94      	ldr	r3, [pc, #592]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f1a:	4991      	ldr	r1, [pc, #580]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d00a      	beq.n	8005f44 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f2e:	4b8c      	ldr	r3, [pc, #560]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f34:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f3c:	4988      	ldr	r1, [pc, #544]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d00a      	beq.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f50:	4b83      	ldr	r3, [pc, #524]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f56:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f5e:	4980      	ldr	r1, [pc, #512]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f60:	4313      	orrs	r3, r2
 8005f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d00a      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f72:	4b7b      	ldr	r3, [pc, #492]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f78:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f80:	4977      	ldr	r1, [pc, #476]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f82:	4313      	orrs	r3, r2
 8005f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00a      	beq.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005f94:	4b72      	ldr	r3, [pc, #456]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9a:	f023 0203 	bic.w	r2, r3, #3
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fa2:	496f      	ldr	r1, [pc, #444]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fa4:	4313      	orrs	r3, r2
 8005fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00a      	beq.n	8005fcc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fb6:	4b6a      	ldr	r3, [pc, #424]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fbc:	f023 020c 	bic.w	r2, r3, #12
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005fc4:	4966      	ldr	r1, [pc, #408]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00a      	beq.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005fd8:	4b61      	ldr	r3, [pc, #388]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe6:	495e      	ldr	r1, [pc, #376]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d00a      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ffa:	4b59      	ldr	r3, [pc, #356]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006000:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006008:	4955      	ldr	r1, [pc, #340]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800600a:	4313      	orrs	r3, r2
 800600c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00a      	beq.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800601c:	4b50      	ldr	r3, [pc, #320]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800601e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006022:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800602a:	494d      	ldr	r1, [pc, #308]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800602c:	4313      	orrs	r3, r2
 800602e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800603a:	2b00      	cmp	r3, #0
 800603c:	d00a      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800603e:	4b48      	ldr	r3, [pc, #288]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006044:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800604c:	4944      	ldr	r1, [pc, #272]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800604e:	4313      	orrs	r3, r2
 8006050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d00a      	beq.n	8006076 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006060:	4b3f      	ldr	r3, [pc, #252]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	493c      	ldr	r1, [pc, #240]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00a      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006082:	4b37      	ldr	r3, [pc, #220]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006088:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006090:	4933      	ldr	r1, [pc, #204]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006092:	4313      	orrs	r3, r2
 8006094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00a      	beq.n	80060ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80060a4:	4b2e      	ldr	r3, [pc, #184]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80060b2:	492b      	ldr	r1, [pc, #172]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80060c6:	4b26      	ldr	r3, [pc, #152]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060d4:	4922      	ldr	r1, [pc, #136]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060e4:	d101      	bne.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80060e6:	2301      	movs	r3, #1
 80060e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 0308 	and.w	r3, r3, #8
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00a      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006106:	4b16      	ldr	r3, [pc, #88]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800610c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	4912      	ldr	r1, [pc, #72]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006116:	4313      	orrs	r3, r2
 8006118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006124:	2b00      	cmp	r3, #0
 8006126:	d00b      	beq.n	8006140 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006128:	4b0d      	ldr	r3, [pc, #52]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006138:	4909      	ldr	r1, [pc, #36]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800613a:	4313      	orrs	r3, r2
 800613c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	2b01      	cmp	r3, #1
 8006144:	d006      	beq.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 80d9 	beq.w	8006306 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006154:	4b02      	ldr	r3, [pc, #8]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	4a01      	ldr	r2, [pc, #4]	; (8006160 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800615a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800615e:	e001      	b.n	8006164 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8006160:	40023800 	.word	0x40023800
 8006164:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006166:	f7fd fe39 	bl	8003ddc <HAL_GetTick>
 800616a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800616c:	e008      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800616e:	f7fd fe35 	bl	8003ddc <HAL_GetTick>
 8006172:	4602      	mov	r2, r0
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	1ad3      	subs	r3, r2, r3
 8006178:	2b64      	cmp	r3, #100	; 0x64
 800617a:	d901      	bls.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800617c:	2303      	movs	r3, #3
 800617e:	e194      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006180:	4b6c      	ldr	r3, [pc, #432]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1f0      	bne.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0301 	and.w	r3, r3, #1
 8006194:	2b00      	cmp	r3, #0
 8006196:	d021      	beq.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800619c:	2b00      	cmp	r3, #0
 800619e:	d11d      	bne.n	80061dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061a6:	0c1b      	lsrs	r3, r3, #16
 80061a8:	f003 0303 	and.w	r3, r3, #3
 80061ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80061ae:	4b61      	ldr	r3, [pc, #388]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80061b4:	0e1b      	lsrs	r3, r3, #24
 80061b6:	f003 030f 	and.w	r3, r3, #15
 80061ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	019a      	lsls	r2, r3, #6
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	041b      	lsls	r3, r3, #16
 80061c6:	431a      	orrs	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	061b      	lsls	r3, r3, #24
 80061cc:	431a      	orrs	r2, r3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	071b      	lsls	r3, r3, #28
 80061d4:	4957      	ldr	r1, [pc, #348]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80061d6:	4313      	orrs	r3, r2
 80061d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d004      	beq.n	80061f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061f0:	d00a      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d02e      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006202:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006206:	d129      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006208:	4b4a      	ldr	r3, [pc, #296]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800620a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800620e:	0c1b      	lsrs	r3, r3, #16
 8006210:	f003 0303 	and.w	r3, r3, #3
 8006214:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006216:	4b47      	ldr	r3, [pc, #284]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	0f1b      	lsrs	r3, r3, #28
 800621e:	f003 0307 	and.w	r3, r3, #7
 8006222:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	019a      	lsls	r2, r3, #6
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	041b      	lsls	r3, r3, #16
 800622e:	431a      	orrs	r2, r3
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	061b      	lsls	r3, r3, #24
 8006236:	431a      	orrs	r2, r3
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	071b      	lsls	r3, r3, #28
 800623c:	493d      	ldr	r1, [pc, #244]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800623e:	4313      	orrs	r3, r2
 8006240:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006244:	4b3b      	ldr	r3, [pc, #236]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006246:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800624a:	f023 021f 	bic.w	r2, r3, #31
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	3b01      	subs	r3, #1
 8006254:	4937      	ldr	r1, [pc, #220]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006256:	4313      	orrs	r3, r2
 8006258:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d01d      	beq.n	80062a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006268:	4b32      	ldr	r3, [pc, #200]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800626a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800626e:	0e1b      	lsrs	r3, r3, #24
 8006270:	f003 030f 	and.w	r3, r3, #15
 8006274:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006276:	4b2f      	ldr	r3, [pc, #188]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800627c:	0f1b      	lsrs	r3, r3, #28
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	019a      	lsls	r2, r3, #6
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	041b      	lsls	r3, r3, #16
 8006290:	431a      	orrs	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	431a      	orrs	r2, r3
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	071b      	lsls	r3, r3, #28
 800629c:	4925      	ldr	r1, [pc, #148]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d011      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	019a      	lsls	r2, r3, #6
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	041b      	lsls	r3, r3, #16
 80062bc:	431a      	orrs	r2, r3
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	061b      	lsls	r3, r3, #24
 80062c4:	431a      	orrs	r2, r3
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	071b      	lsls	r3, r3, #28
 80062cc:	4919      	ldr	r1, [pc, #100]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062ce:	4313      	orrs	r3, r2
 80062d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80062d4:	4b17      	ldr	r3, [pc, #92]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a16      	ldr	r2, [pc, #88]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80062de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062e0:	f7fd fd7c 	bl	8003ddc <HAL_GetTick>
 80062e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062e6:	e008      	b.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80062e8:	f7fd fd78 	bl	8003ddc <HAL_GetTick>
 80062ec:	4602      	mov	r2, r0
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	2b64      	cmp	r3, #100	; 0x64
 80062f4:	d901      	bls.n	80062fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80062f6:	2303      	movs	r3, #3
 80062f8:	e0d7      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80062fa:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d0f0      	beq.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	2b01      	cmp	r3, #1
 800630a:	f040 80cd 	bne.w	80064a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800630e:	4b09      	ldr	r3, [pc, #36]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a08      	ldr	r2, [pc, #32]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006318:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800631a:	f7fd fd5f 	bl	8003ddc <HAL_GetTick>
 800631e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006320:	e00a      	b.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006322:	f7fd fd5b 	bl	8003ddc <HAL_GetTick>
 8006326:	4602      	mov	r2, r0
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	2b64      	cmp	r3, #100	; 0x64
 800632e:	d903      	bls.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006330:	2303      	movs	r3, #3
 8006332:	e0ba      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8006334:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006338:	4b5e      	ldr	r3, [pc, #376]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006340:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006344:	d0ed      	beq.n	8006322 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d009      	beq.n	800636e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006362:	2b00      	cmp	r3, #0
 8006364:	d02e      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636a:	2b00      	cmp	r3, #0
 800636c:	d12a      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800636e:	4b51      	ldr	r3, [pc, #324]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006370:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006374:	0c1b      	lsrs	r3, r3, #16
 8006376:	f003 0303 	and.w	r3, r3, #3
 800637a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800637c:	4b4d      	ldr	r3, [pc, #308]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800637e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006382:	0f1b      	lsrs	r3, r3, #28
 8006384:	f003 0307 	and.w	r3, r3, #7
 8006388:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	019a      	lsls	r2, r3, #6
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	041b      	lsls	r3, r3, #16
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	061b      	lsls	r3, r3, #24
 800639c:	431a      	orrs	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	071b      	lsls	r3, r3, #28
 80063a2:	4944      	ldr	r1, [pc, #272]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063a4:	4313      	orrs	r3, r2
 80063a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80063aa:	4b42      	ldr	r3, [pc, #264]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b8:	3b01      	subs	r3, #1
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	493d      	ldr	r1, [pc, #244]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063be:	4313      	orrs	r3, r2
 80063c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d022      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80063d8:	d11d      	bne.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	0e1b      	lsrs	r3, r3, #24
 80063e2:	f003 030f 	and.w	r3, r3, #15
 80063e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80063e8:	4b32      	ldr	r3, [pc, #200]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80063ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ee:	0f1b      	lsrs	r3, r3, #28
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	695b      	ldr	r3, [r3, #20]
 80063fa:	019a      	lsls	r2, r3, #6
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	041b      	lsls	r3, r3, #16
 8006402:	431a      	orrs	r2, r3
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	061b      	lsls	r3, r3, #24
 8006408:	431a      	orrs	r2, r3
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	071b      	lsls	r3, r3, #28
 800640e:	4929      	ldr	r1, [pc, #164]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006410:	4313      	orrs	r3, r2
 8006412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b00      	cmp	r3, #0
 8006420:	d028      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006422:	4b24      	ldr	r3, [pc, #144]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	0e1b      	lsrs	r3, r3, #24
 800642a:	f003 030f 	and.w	r3, r3, #15
 800642e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006430:	4b20      	ldr	r3, [pc, #128]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006436:	0c1b      	lsrs	r3, r3, #16
 8006438:	f003 0303 	and.w	r3, r3, #3
 800643c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	019a      	lsls	r2, r3, #6
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	041b      	lsls	r3, r3, #16
 8006448:	431a      	orrs	r2, r3
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	061b      	lsls	r3, r3, #24
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	071b      	lsls	r3, r3, #28
 8006456:	4917      	ldr	r1, [pc, #92]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006458:	4313      	orrs	r3, r2
 800645a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006460:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006464:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646c:	4911      	ldr	r1, [pc, #68]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800646e:	4313      	orrs	r3, r2
 8006470:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006474:	4b0f      	ldr	r3, [pc, #60]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a0e      	ldr	r2, [pc, #56]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800647a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800647e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006480:	f7fd fcac 	bl	8003ddc <HAL_GetTick>
 8006484:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006486:	e008      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006488:	f7fd fca8 	bl	8003ddc <HAL_GetTick>
 800648c:	4602      	mov	r2, r0
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b64      	cmp	r3, #100	; 0x64
 8006494:	d901      	bls.n	800649a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e007      	b.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800649a:	4b06      	ldr	r3, [pc, #24]	; (80064b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80064a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064a6:	d1ef      	bne.n	8006488 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3720      	adds	r7, #32
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
 80064b2:	bf00      	nop
 80064b4:	40023800 	.word	0x40023800

080064b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e049      	b.n	800655e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064d0:	b2db      	uxtb	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d106      	bne.n	80064e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f7fd f97e 	bl	80037e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	3304      	adds	r3, #4
 80064f4:	4619      	mov	r1, r3
 80064f6:	4610      	mov	r0, r2
 80064f8:	f000 fdac 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2201      	movs	r2, #1
 8006548:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2201      	movs	r2, #1
 8006550:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006576:	b2db      	uxtb	r3, r3
 8006578:	2b01      	cmp	r3, #1
 800657a:	d001      	beq.n	8006580 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e054      	b.n	800662a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2202      	movs	r2, #2
 8006584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68da      	ldr	r2, [r3, #12]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0201 	orr.w	r2, r2, #1
 8006596:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	4a26      	ldr	r2, [pc, #152]	; (8006638 <HAL_TIM_Base_Start_IT+0xd0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d022      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065aa:	d01d      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a22      	ldr	r2, [pc, #136]	; (800663c <HAL_TIM_Base_Start_IT+0xd4>)
 80065b2:	4293      	cmp	r3, r2
 80065b4:	d018      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	4a21      	ldr	r2, [pc, #132]	; (8006640 <HAL_TIM_Base_Start_IT+0xd8>)
 80065bc:	4293      	cmp	r3, r2
 80065be:	d013      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4a1f      	ldr	r2, [pc, #124]	; (8006644 <HAL_TIM_Base_Start_IT+0xdc>)
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d00e      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <HAL_TIM_Base_Start_IT+0xe0>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d009      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a1c      	ldr	r2, [pc, #112]	; (800664c <HAL_TIM_Base_Start_IT+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <HAL_TIM_Base_Start_IT+0x80>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	4a1b      	ldr	r2, [pc, #108]	; (8006650 <HAL_TIM_Base_Start_IT+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d115      	bne.n	8006614 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689a      	ldr	r2, [r3, #8]
 80065ee:	4b19      	ldr	r3, [pc, #100]	; (8006654 <HAL_TIM_Base_Start_IT+0xec>)
 80065f0:	4013      	ands	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2b06      	cmp	r3, #6
 80065f8:	d015      	beq.n	8006626 <HAL_TIM_Base_Start_IT+0xbe>
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006600:	d011      	beq.n	8006626 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006612:	e008      	b.n	8006626 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681a      	ldr	r2, [r3, #0]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f042 0201 	orr.w	r2, r2, #1
 8006622:	601a      	str	r2, [r3, #0]
 8006624:	e000      	b.n	8006628 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006626:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3714      	adds	r7, #20
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr
 8006636:	bf00      	nop
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40010400 	.word	0x40010400
 800664c:	40014000 	.word	0x40014000
 8006650:	40001800 	.word	0x40001800
 8006654:	00010007 	.word	0x00010007

08006658 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	68da      	ldr	r2, [r3, #12]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f022 0201 	bic.w	r2, r2, #1
 800666e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	6a1a      	ldr	r2, [r3, #32]
 8006676:	f241 1311 	movw	r3, #4369	; 0x1111
 800667a:	4013      	ands	r3, r2
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10f      	bne.n	80066a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6a1a      	ldr	r2, [r3, #32]
 8006686:	f240 4344 	movw	r3, #1092	; 0x444
 800668a:	4013      	ands	r3, r2
 800668c:	2b00      	cmp	r3, #0
 800668e:	d107      	bne.n	80066a0 <HAL_TIM_Base_Stop_IT+0x48>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	681a      	ldr	r2, [r3, #0]
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f022 0201 	bic.w	r2, r2, #1
 800669e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80066a8:	2300      	movs	r3, #0
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b082      	sub	sp, #8
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d101      	bne.n	80066c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e049      	b.n	800675c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d106      	bne.n	80066e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80066dc:	6878      	ldr	r0, [r7, #4]
 80066de:	f000 f841 	bl	8006764 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2202      	movs	r2, #2
 80066e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681a      	ldr	r2, [r3, #0]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	3304      	adds	r3, #4
 80066f2:	4619      	mov	r1, r3
 80066f4:	4610      	mov	r0, r2
 80066f6:	f000 fcad 	bl	8007054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2201      	movs	r2, #1
 80066fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	2201      	movs	r2, #1
 8006716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	2201      	movs	r2, #1
 800671e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2201      	movs	r2, #1
 8006736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2201      	movs	r2, #1
 8006746:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2201      	movs	r2, #1
 800674e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2201      	movs	r2, #1
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800675a:	2300      	movs	r3, #0
}
 800675c:	4618      	mov	r0, r3
 800675e:	3708      	adds	r7, #8
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006764:	b480      	push	{r7}
 8006766:	b083      	sub	sp, #12
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800676c:	bf00      	nop
 800676e:	370c      	adds	r7, #12
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr

08006778 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006782:	2300      	movs	r3, #0
 8006784:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d109      	bne.n	80067a0 <HAL_TIM_PWM_Start_IT+0x28>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006792:	b2db      	uxtb	r3, r3
 8006794:	2b01      	cmp	r3, #1
 8006796:	bf14      	ite	ne
 8006798:	2301      	movne	r3, #1
 800679a:	2300      	moveq	r3, #0
 800679c:	b2db      	uxtb	r3, r3
 800679e:	e03c      	b.n	800681a <HAL_TIM_PWM_Start_IT+0xa2>
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	2b04      	cmp	r3, #4
 80067a4:	d109      	bne.n	80067ba <HAL_TIM_PWM_Start_IT+0x42>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	bf14      	ite	ne
 80067b2:	2301      	movne	r3, #1
 80067b4:	2300      	moveq	r3, #0
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	e02f      	b.n	800681a <HAL_TIM_PWM_Start_IT+0xa2>
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	2b08      	cmp	r3, #8
 80067be:	d109      	bne.n	80067d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	bf14      	ite	ne
 80067cc:	2301      	movne	r3, #1
 80067ce:	2300      	moveq	r3, #0
 80067d0:	b2db      	uxtb	r3, r3
 80067d2:	e022      	b.n	800681a <HAL_TIM_PWM_Start_IT+0xa2>
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	2b0c      	cmp	r3, #12
 80067d8:	d109      	bne.n	80067ee <HAL_TIM_PWM_Start_IT+0x76>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e0:	b2db      	uxtb	r3, r3
 80067e2:	2b01      	cmp	r3, #1
 80067e4:	bf14      	ite	ne
 80067e6:	2301      	movne	r3, #1
 80067e8:	2300      	moveq	r3, #0
 80067ea:	b2db      	uxtb	r3, r3
 80067ec:	e015      	b.n	800681a <HAL_TIM_PWM_Start_IT+0xa2>
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	2b10      	cmp	r3, #16
 80067f2:	d109      	bne.n	8006808 <HAL_TIM_PWM_Start_IT+0x90>
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b01      	cmp	r3, #1
 80067fe:	bf14      	ite	ne
 8006800:	2301      	movne	r3, #1
 8006802:	2300      	moveq	r3, #0
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e008      	b.n	800681a <HAL_TIM_PWM_Start_IT+0xa2>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800680e:	b2db      	uxtb	r3, r3
 8006810:	2b01      	cmp	r3, #1
 8006812:	bf14      	ite	ne
 8006814:	2301      	movne	r3, #1
 8006816:	2300      	moveq	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d001      	beq.n	8006822 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e0dd      	b.n	80069de <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d104      	bne.n	8006832 <HAL_TIM_PWM_Start_IT+0xba>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2202      	movs	r2, #2
 800682c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006830:	e023      	b.n	800687a <HAL_TIM_PWM_Start_IT+0x102>
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b04      	cmp	r3, #4
 8006836:	d104      	bne.n	8006842 <HAL_TIM_PWM_Start_IT+0xca>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006840:	e01b      	b.n	800687a <HAL_TIM_PWM_Start_IT+0x102>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b08      	cmp	r3, #8
 8006846:	d104      	bne.n	8006852 <HAL_TIM_PWM_Start_IT+0xda>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006850:	e013      	b.n	800687a <HAL_TIM_PWM_Start_IT+0x102>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b0c      	cmp	r3, #12
 8006856:	d104      	bne.n	8006862 <HAL_TIM_PWM_Start_IT+0xea>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006860:	e00b      	b.n	800687a <HAL_TIM_PWM_Start_IT+0x102>
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	2b10      	cmp	r3, #16
 8006866:	d104      	bne.n	8006872 <HAL_TIM_PWM_Start_IT+0xfa>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006870:	e003      	b.n	800687a <HAL_TIM_PWM_Start_IT+0x102>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	2202      	movs	r2, #2
 8006876:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b0c      	cmp	r3, #12
 800687e:	d841      	bhi.n	8006904 <HAL_TIM_PWM_Start_IT+0x18c>
 8006880:	a201      	add	r2, pc, #4	; (adr r2, 8006888 <HAL_TIM_PWM_Start_IT+0x110>)
 8006882:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006886:	bf00      	nop
 8006888:	080068bd 	.word	0x080068bd
 800688c:	08006905 	.word	0x08006905
 8006890:	08006905 	.word	0x08006905
 8006894:	08006905 	.word	0x08006905
 8006898:	080068cf 	.word	0x080068cf
 800689c:	08006905 	.word	0x08006905
 80068a0:	08006905 	.word	0x08006905
 80068a4:	08006905 	.word	0x08006905
 80068a8:	080068e1 	.word	0x080068e1
 80068ac:	08006905 	.word	0x08006905
 80068b0:	08006905 	.word	0x08006905
 80068b4:	08006905 	.word	0x08006905
 80068b8:	080068f3 	.word	0x080068f3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	68da      	ldr	r2, [r3, #12]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0202 	orr.w	r2, r2, #2
 80068ca:	60da      	str	r2, [r3, #12]
      break;
 80068cc:	e01d      	b.n	800690a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	68da      	ldr	r2, [r3, #12]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f042 0204 	orr.w	r2, r2, #4
 80068dc:	60da      	str	r2, [r3, #12]
      break;
 80068de:	e014      	b.n	800690a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f042 0208 	orr.w	r2, r2, #8
 80068ee:	60da      	str	r2, [r3, #12]
      break;
 80068f0:	e00b      	b.n	800690a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	68da      	ldr	r2, [r3, #12]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f042 0210 	orr.w	r2, r2, #16
 8006900:	60da      	str	r2, [r3, #12]
      break;
 8006902:	e002      	b.n	800690a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8006904:	2301      	movs	r3, #1
 8006906:	73fb      	strb	r3, [r7, #15]
      break;
 8006908:	bf00      	nop
  }

  if (status == HAL_OK)
 800690a:	7bfb      	ldrb	r3, [r7, #15]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d165      	bne.n	80069dc <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	2201      	movs	r2, #1
 8006916:	6839      	ldr	r1, [r7, #0]
 8006918:	4618      	mov	r0, r3
 800691a:	f000 ff33 	bl	8007784 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a31      	ldr	r2, [pc, #196]	; (80069e8 <HAL_TIM_PWM_Start_IT+0x270>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d004      	beq.n	8006932 <HAL_TIM_PWM_Start_IT+0x1ba>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a2f      	ldr	r2, [pc, #188]	; (80069ec <HAL_TIM_PWM_Start_IT+0x274>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d101      	bne.n	8006936 <HAL_TIM_PWM_Start_IT+0x1be>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <HAL_TIM_PWM_Start_IT+0x1c0>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800694a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a25      	ldr	r2, [pc, #148]	; (80069e8 <HAL_TIM_PWM_Start_IT+0x270>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d022      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800695e:	d01d      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4a22      	ldr	r2, [pc, #136]	; (80069f0 <HAL_TIM_PWM_Start_IT+0x278>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d018      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a21      	ldr	r2, [pc, #132]	; (80069f4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d013      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a1f      	ldr	r2, [pc, #124]	; (80069f8 <HAL_TIM_PWM_Start_IT+0x280>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00e      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a1a      	ldr	r2, [pc, #104]	; (80069ec <HAL_TIM_PWM_Start_IT+0x274>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d009      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a1b      	ldr	r2, [pc, #108]	; (80069fc <HAL_TIM_PWM_Start_IT+0x284>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d004      	beq.n	800699c <HAL_TIM_PWM_Start_IT+0x224>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1a      	ldr	r2, [pc, #104]	; (8006a00 <HAL_TIM_PWM_Start_IT+0x288>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d115      	bne.n	80069c8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	689a      	ldr	r2, [r3, #8]
 80069a2:	4b18      	ldr	r3, [pc, #96]	; (8006a04 <HAL_TIM_PWM_Start_IT+0x28c>)
 80069a4:	4013      	ands	r3, r2
 80069a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	2b06      	cmp	r3, #6
 80069ac:	d015      	beq.n	80069da <HAL_TIM_PWM_Start_IT+0x262>
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069b4:	d011      	beq.n	80069da <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f042 0201 	orr.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069c6:	e008      	b.n	80069da <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	f042 0201 	orr.w	r2, r2, #1
 80069d6:	601a      	str	r2, [r3, #0]
 80069d8:	e000      	b.n	80069dc <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069da:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80069dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3710      	adds	r7, #16
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	40010000 	.word	0x40010000
 80069ec:	40010400 	.word	0x40010400
 80069f0:	40000400 	.word	0x40000400
 80069f4:	40000800 	.word	0x40000800
 80069f8:	40000c00 	.word	0x40000c00
 80069fc:	40014000 	.word	0x40014000
 8006a00:	40001800 	.word	0x40001800
 8006a04:	00010007 	.word	0x00010007

08006a08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b082      	sub	sp, #8
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	691b      	ldr	r3, [r3, #16]
 8006a16:	f003 0302 	and.w	r3, r3, #2
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d122      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	f003 0302 	and.w	r3, r3, #2
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	d11b      	bne.n	8006a64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f06f 0202 	mvn.w	r2, #2
 8006a34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	f003 0303 	and.w	r3, r3, #3
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d003      	beq.n	8006a52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 fae4 	bl	8007018 <HAL_TIM_IC_CaptureCallback>
 8006a50:	e005      	b.n	8006a5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fad6 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 fae7 	bl	800702c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2200      	movs	r2, #0
 8006a62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	f003 0304 	and.w	r3, r3, #4
 8006a6e:	2b04      	cmp	r3, #4
 8006a70:	d122      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b04      	cmp	r3, #4
 8006a7e:	d11b      	bne.n	8006ab8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f06f 0204 	mvn.w	r2, #4
 8006a88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2202      	movs	r2, #2
 8006a8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
 8006a96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d003      	beq.n	8006aa6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f000 faba 	bl	8007018 <HAL_TIM_IC_CaptureCallback>
 8006aa4:	e005      	b.n	8006ab2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 faac 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fabd 	bl	800702c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	691b      	ldr	r3, [r3, #16]
 8006abe:	f003 0308 	and.w	r3, r3, #8
 8006ac2:	2b08      	cmp	r3, #8
 8006ac4:	d122      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d11b      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f06f 0208 	mvn.w	r2, #8
 8006adc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	f003 0303 	and.w	r3, r3, #3
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d003      	beq.n	8006afa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fa90 	bl	8007018 <HAL_TIM_IC_CaptureCallback>
 8006af8:	e005      	b.n	8006b06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f000 fa82 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 fa93 	bl	800702c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	f003 0310 	and.w	r3, r3, #16
 8006b16:	2b10      	cmp	r3, #16
 8006b18:	d122      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68db      	ldr	r3, [r3, #12]
 8006b20:	f003 0310 	and.w	r3, r3, #16
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d11b      	bne.n	8006b60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f06f 0210 	mvn.w	r2, #16
 8006b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2208      	movs	r2, #8
 8006b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	69db      	ldr	r3, [r3, #28]
 8006b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d003      	beq.n	8006b4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fa66 	bl	8007018 <HAL_TIM_IC_CaptureCallback>
 8006b4c:	e005      	b.n	8006b5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fa58 	bl	8007004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f000 fa69 	bl	800702c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	691b      	ldr	r3, [r3, #16]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d10e      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	68db      	ldr	r3, [r3, #12]
 8006b74:	f003 0301 	and.w	r3, r3, #1
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d107      	bne.n	8006b8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f06f 0201 	mvn.w	r2, #1
 8006b84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f7fa f92a 	bl	8000de0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	691b      	ldr	r3, [r3, #16]
 8006b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b96:	2b80      	cmp	r3, #128	; 0x80
 8006b98:	d10e      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ba4:	2b80      	cmp	r3, #128	; 0x80
 8006ba6:	d107      	bne.n	8006bb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006bb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 fea4 	bl	8007900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	691b      	ldr	r3, [r3, #16]
 8006bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006bc6:	d10e      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bd2:	2b80      	cmp	r3, #128	; 0x80
 8006bd4:	d107      	bne.n	8006be6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006bde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f000 fe97 	bl	8007914 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	691b      	ldr	r3, [r3, #16]
 8006bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bf0:	2b40      	cmp	r3, #64	; 0x40
 8006bf2:	d10e      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	68db      	ldr	r3, [r3, #12]
 8006bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfe:	2b40      	cmp	r3, #64	; 0x40
 8006c00:	d107      	bne.n	8006c12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fa17 	bl	8007040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d10e      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f003 0320 	and.w	r3, r3, #32
 8006c2a:	2b20      	cmp	r3, #32
 8006c2c:	d107      	bne.n	8006c3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f06f 0220 	mvn.w	r2, #32
 8006c36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 fe57 	bl	80078ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c3e:	bf00      	nop
 8006c40:	3708      	adds	r7, #8
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b086      	sub	sp, #24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c54:	2300      	movs	r3, #0
 8006c56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d101      	bne.n	8006c66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c62:	2302      	movs	r3, #2
 8006c64:	e0ff      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2b14      	cmp	r3, #20
 8006c72:	f200 80f0 	bhi.w	8006e56 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c76:	a201      	add	r2, pc, #4	; (adr r2, 8006c7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7c:	08006cd1 	.word	0x08006cd1
 8006c80:	08006e57 	.word	0x08006e57
 8006c84:	08006e57 	.word	0x08006e57
 8006c88:	08006e57 	.word	0x08006e57
 8006c8c:	08006d11 	.word	0x08006d11
 8006c90:	08006e57 	.word	0x08006e57
 8006c94:	08006e57 	.word	0x08006e57
 8006c98:	08006e57 	.word	0x08006e57
 8006c9c:	08006d53 	.word	0x08006d53
 8006ca0:	08006e57 	.word	0x08006e57
 8006ca4:	08006e57 	.word	0x08006e57
 8006ca8:	08006e57 	.word	0x08006e57
 8006cac:	08006d93 	.word	0x08006d93
 8006cb0:	08006e57 	.word	0x08006e57
 8006cb4:	08006e57 	.word	0x08006e57
 8006cb8:	08006e57 	.word	0x08006e57
 8006cbc:	08006dd5 	.word	0x08006dd5
 8006cc0:	08006e57 	.word	0x08006e57
 8006cc4:	08006e57 	.word	0x08006e57
 8006cc8:	08006e57 	.word	0x08006e57
 8006ccc:	08006e15 	.word	0x08006e15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68b9      	ldr	r1, [r7, #8]
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fa5c 	bl	8007194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	699a      	ldr	r2, [r3, #24]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f042 0208 	orr.w	r2, r2, #8
 8006cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	699a      	ldr	r2, [r3, #24]
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0204 	bic.w	r2, r2, #4
 8006cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	6999      	ldr	r1, [r3, #24]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	691a      	ldr	r2, [r3, #16]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	430a      	orrs	r2, r1
 8006d0c:	619a      	str	r2, [r3, #24]
      break;
 8006d0e:	e0a5      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	68b9      	ldr	r1, [r7, #8]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f000 faae 	bl	8007278 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	699a      	ldr	r2, [r3, #24]
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	699a      	ldr	r2, [r3, #24]
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6999      	ldr	r1, [r3, #24]
 8006d42:	68bb      	ldr	r3, [r7, #8]
 8006d44:	691b      	ldr	r3, [r3, #16]
 8006d46:	021a      	lsls	r2, r3, #8
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	430a      	orrs	r2, r1
 8006d4e:	619a      	str	r2, [r3, #24]
      break;
 8006d50:	e084      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	68b9      	ldr	r1, [r7, #8]
 8006d58:	4618      	mov	r0, r3
 8006d5a:	f000 fb05 	bl	8007368 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69da      	ldr	r2, [r3, #28]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f042 0208 	orr.w	r2, r2, #8
 8006d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	69da      	ldr	r2, [r3, #28]
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f022 0204 	bic.w	r2, r2, #4
 8006d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	69d9      	ldr	r1, [r3, #28]
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	691a      	ldr	r2, [r3, #16]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	430a      	orrs	r2, r1
 8006d8e:	61da      	str	r2, [r3, #28]
      break;
 8006d90:	e064      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68b9      	ldr	r1, [r7, #8]
 8006d98:	4618      	mov	r0, r3
 8006d9a:	f000 fb5b 	bl	8007454 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	69da      	ldr	r2, [r3, #28]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006dac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	69da      	ldr	r2, [r3, #28]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	69d9      	ldr	r1, [r3, #28]
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	021a      	lsls	r2, r3, #8
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	430a      	orrs	r2, r1
 8006dd0:	61da      	str	r2, [r3, #28]
      break;
 8006dd2:	e043      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68b9      	ldr	r1, [r7, #8]
 8006dda:	4618      	mov	r0, r3
 8006ddc:	f000 fb92 	bl	8007504 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0208 	orr.w	r2, r2, #8
 8006dee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 0204 	bic.w	r2, r2, #4
 8006dfe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e06:	68bb      	ldr	r3, [r7, #8]
 8006e08:	691a      	ldr	r2, [r3, #16]
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	430a      	orrs	r2, r1
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e12:	e023      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	68b9      	ldr	r1, [r7, #8]
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f000 fbc4 	bl	80075a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	021a      	lsls	r2, r3, #8
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006e54:	e002      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e56:	2301      	movs	r3, #1
 8006e58:	75fb      	strb	r3, [r7, #23]
      break;
 8006e5a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3718      	adds	r7, #24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d101      	bne.n	8006e8c <HAL_TIM_ConfigClockSource+0x1c>
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e0b4      	b.n	8006ff6 <HAL_TIM_ConfigClockSource+0x186>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2202      	movs	r2, #2
 8006e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	689b      	ldr	r3, [r3, #8]
 8006ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	4b56      	ldr	r3, [pc, #344]	; (8007000 <HAL_TIM_ConfigClockSource+0x190>)
 8006ea8:	4013      	ands	r3, r2
 8006eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ec4:	d03e      	beq.n	8006f44 <HAL_TIM_ConfigClockSource+0xd4>
 8006ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eca:	f200 8087 	bhi.w	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed2:	f000 8086 	beq.w	8006fe2 <HAL_TIM_ConfigClockSource+0x172>
 8006ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eda:	d87f      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006edc:	2b70      	cmp	r3, #112	; 0x70
 8006ede:	d01a      	beq.n	8006f16 <HAL_TIM_ConfigClockSource+0xa6>
 8006ee0:	2b70      	cmp	r3, #112	; 0x70
 8006ee2:	d87b      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b60      	cmp	r3, #96	; 0x60
 8006ee6:	d050      	beq.n	8006f8a <HAL_TIM_ConfigClockSource+0x11a>
 8006ee8:	2b60      	cmp	r3, #96	; 0x60
 8006eea:	d877      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b50      	cmp	r3, #80	; 0x50
 8006eee:	d03c      	beq.n	8006f6a <HAL_TIM_ConfigClockSource+0xfa>
 8006ef0:	2b50      	cmp	r3, #80	; 0x50
 8006ef2:	d873      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b40      	cmp	r3, #64	; 0x40
 8006ef6:	d058      	beq.n	8006faa <HAL_TIM_ConfigClockSource+0x13a>
 8006ef8:	2b40      	cmp	r3, #64	; 0x40
 8006efa:	d86f      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b30      	cmp	r3, #48	; 0x30
 8006efe:	d064      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0x15a>
 8006f00:	2b30      	cmp	r3, #48	; 0x30
 8006f02:	d86b      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006f04:	2b20      	cmp	r3, #32
 8006f06:	d060      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0x15a>
 8006f08:	2b20      	cmp	r3, #32
 8006f0a:	d867      	bhi.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d05c      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0x15a>
 8006f10:	2b10      	cmp	r3, #16
 8006f12:	d05a      	beq.n	8006fca <HAL_TIM_ConfigClockSource+0x15a>
 8006f14:	e062      	b.n	8006fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	6899      	ldr	r1, [r3, #8]
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	685a      	ldr	r2, [r3, #4]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	68db      	ldr	r3, [r3, #12]
 8006f26:	f000 fc0d 	bl	8007744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	689b      	ldr	r3, [r3, #8]
 8006f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68ba      	ldr	r2, [r7, #8]
 8006f40:	609a      	str	r2, [r3, #8]
      break;
 8006f42:	e04f      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	6818      	ldr	r0, [r3, #0]
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	6899      	ldr	r1, [r3, #8]
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	68db      	ldr	r3, [r3, #12]
 8006f54:	f000 fbf6 	bl	8007744 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	689a      	ldr	r2, [r3, #8]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f66:	609a      	str	r2, [r3, #8]
      break;
 8006f68:	e03c      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6818      	ldr	r0, [r3, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	6859      	ldr	r1, [r3, #4]
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	461a      	mov	r2, r3
 8006f78:	f000 fb6a 	bl	8007650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	2150      	movs	r1, #80	; 0x50
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fbc3 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 8006f88:	e02c      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6818      	ldr	r0, [r3, #0]
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	6859      	ldr	r1, [r3, #4]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	461a      	mov	r2, r3
 8006f98:	f000 fb89 	bl	80076ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2160      	movs	r1, #96	; 0x60
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 fbb3 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 8006fa8:	e01c      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6818      	ldr	r0, [r3, #0]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	6859      	ldr	r1, [r3, #4]
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	68db      	ldr	r3, [r3, #12]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f000 fb4a 	bl	8007650 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	2140      	movs	r1, #64	; 0x40
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fba3 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 8006fc8:	e00c      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681a      	ldr	r2, [r3, #0]
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	4610      	mov	r0, r2
 8006fd6:	f000 fb9a 	bl	800770e <TIM_ITRx_SetConfig>
      break;
 8006fda:	e003      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe0:	e000      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	fffeff88 	.word	0xfffeff88

08007004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800700c:	bf00      	nop
 800700e:	370c      	adds	r7, #12
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr

08007018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007020:	bf00      	nop
 8007022:	370c      	adds	r7, #12
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800702c:	b480      	push	{r7}
 800702e:	b083      	sub	sp, #12
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007034:	bf00      	nop
 8007036:	370c      	adds	r7, #12
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a40      	ldr	r2, [pc, #256]	; (8007168 <TIM_Base_SetConfig+0x114>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d013      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007072:	d00f      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a3d      	ldr	r2, [pc, #244]	; (800716c <TIM_Base_SetConfig+0x118>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00b      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a3c      	ldr	r2, [pc, #240]	; (8007170 <TIM_Base_SetConfig+0x11c>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d007      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	4a3b      	ldr	r2, [pc, #236]	; (8007174 <TIM_Base_SetConfig+0x120>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d003      	beq.n	8007094 <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3a      	ldr	r2, [pc, #232]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d108      	bne.n	80070a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800709a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a2f      	ldr	r2, [pc, #188]	; (8007168 <TIM_Base_SetConfig+0x114>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d02b      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070b4:	d027      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a2c      	ldr	r2, [pc, #176]	; (800716c <TIM_Base_SetConfig+0x118>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d023      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2b      	ldr	r2, [pc, #172]	; (8007170 <TIM_Base_SetConfig+0x11c>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d01f      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a2a      	ldr	r2, [pc, #168]	; (8007174 <TIM_Base_SetConfig+0x120>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d01b      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a29      	ldr	r2, [pc, #164]	; (8007178 <TIM_Base_SetConfig+0x124>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d017      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a28      	ldr	r2, [pc, #160]	; (800717c <TIM_Base_SetConfig+0x128>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d013      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a27      	ldr	r2, [pc, #156]	; (8007180 <TIM_Base_SetConfig+0x12c>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d00f      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a26      	ldr	r2, [pc, #152]	; (8007184 <TIM_Base_SetConfig+0x130>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d00b      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a25      	ldr	r2, [pc, #148]	; (8007188 <TIM_Base_SetConfig+0x134>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d007      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a24      	ldr	r2, [pc, #144]	; (800718c <TIM_Base_SetConfig+0x138>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d003      	beq.n	8007106 <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a23      	ldr	r2, [pc, #140]	; (8007190 <TIM_Base_SetConfig+0x13c>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d108      	bne.n	8007118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800710c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4313      	orrs	r3, r2
 8007116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	4313      	orrs	r3, r2
 8007124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68fa      	ldr	r2, [r7, #12]
 800712a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	681a      	ldr	r2, [r3, #0]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	4a0a      	ldr	r2, [pc, #40]	; (8007168 <TIM_Base_SetConfig+0x114>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d003      	beq.n	800714c <TIM_Base_SetConfig+0xf8>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	4a0c      	ldr	r2, [pc, #48]	; (8007178 <TIM_Base_SetConfig+0x124>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d103      	bne.n	8007154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2201      	movs	r2, #1
 8007158:	615a      	str	r2, [r3, #20]
}
 800715a:	bf00      	nop
 800715c:	3714      	adds	r7, #20
 800715e:	46bd      	mov	sp, r7
 8007160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007164:	4770      	bx	lr
 8007166:	bf00      	nop
 8007168:	40010000 	.word	0x40010000
 800716c:	40000400 	.word	0x40000400
 8007170:	40000800 	.word	0x40000800
 8007174:	40000c00 	.word	0x40000c00
 8007178:	40010400 	.word	0x40010400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800
 8007188:	40001800 	.word	0x40001800
 800718c:	40001c00 	.word	0x40001c00
 8007190:	40002000 	.word	0x40002000

08007194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f023 0201 	bic.w	r2, r3, #1
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	699b      	ldr	r3, [r3, #24]
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071bc:	68fa      	ldr	r2, [r7, #12]
 80071be:	4b2b      	ldr	r3, [pc, #172]	; (800726c <TIM_OC1_SetConfig+0xd8>)
 80071c0:	4013      	ands	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f023 0303 	bic.w	r3, r3, #3
 80071ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	68fa      	ldr	r2, [r7, #12]
 80071d2:	4313      	orrs	r3, r2
 80071d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	f023 0302 	bic.w	r3, r3, #2
 80071dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	689b      	ldr	r3, [r3, #8]
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a21      	ldr	r2, [pc, #132]	; (8007270 <TIM_OC1_SetConfig+0xdc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d003      	beq.n	80071f8 <TIM_OC1_SetConfig+0x64>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a20      	ldr	r2, [pc, #128]	; (8007274 <TIM_OC1_SetConfig+0xe0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d10c      	bne.n	8007212 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f023 0308 	bic.w	r3, r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	68db      	ldr	r3, [r3, #12]
 8007204:	697a      	ldr	r2, [r7, #20]
 8007206:	4313      	orrs	r3, r2
 8007208:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f023 0304 	bic.w	r3, r3, #4
 8007210:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a16      	ldr	r2, [pc, #88]	; (8007270 <TIM_OC1_SetConfig+0xdc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d003      	beq.n	8007222 <TIM_OC1_SetConfig+0x8e>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a15      	ldr	r2, [pc, #84]	; (8007274 <TIM_OC1_SetConfig+0xe0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d111      	bne.n	8007246 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007228:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007230:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	4313      	orrs	r3, r2
 800723a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	693a      	ldr	r2, [r7, #16]
 8007242:	4313      	orrs	r3, r2
 8007244:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	685a      	ldr	r2, [r3, #4]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	697a      	ldr	r2, [r7, #20]
 800725e:	621a      	str	r2, [r3, #32]
}
 8007260:	bf00      	nop
 8007262:	371c      	adds	r7, #28
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr
 800726c:	fffeff8f 	.word	0xfffeff8f
 8007270:	40010000 	.word	0x40010000
 8007274:	40010400 	.word	0x40010400

08007278 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f023 0210 	bic.w	r2, r3, #16
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	699b      	ldr	r3, [r3, #24]
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072a0:	68fa      	ldr	r2, [r7, #12]
 80072a2:	4b2e      	ldr	r3, [pc, #184]	; (800735c <TIM_OC2_SetConfig+0xe4>)
 80072a4:	4013      	ands	r3, r2
 80072a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072b0:	683b      	ldr	r3, [r7, #0]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	021b      	lsls	r3, r3, #8
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	4313      	orrs	r3, r2
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	f023 0320 	bic.w	r3, r3, #32
 80072c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	011b      	lsls	r3, r3, #4
 80072ca:	697a      	ldr	r2, [r7, #20]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a23      	ldr	r2, [pc, #140]	; (8007360 <TIM_OC2_SetConfig+0xe8>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x68>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a22      	ldr	r2, [pc, #136]	; (8007364 <TIM_OC2_SetConfig+0xec>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10d      	bne.n	80072fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a18      	ldr	r2, [pc, #96]	; (8007360 <TIM_OC2_SetConfig+0xe8>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC2_SetConfig+0x94>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a17      	ldr	r2, [pc, #92]	; (8007364 <TIM_OC2_SetConfig+0xec>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d113      	bne.n	8007334 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800730c:	693b      	ldr	r3, [r7, #16]
 800730e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007312:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800731a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	693a      	ldr	r2, [r7, #16]
 8007330:	4313      	orrs	r3, r2
 8007332:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68fa      	ldr	r2, [r7, #12]
 800733e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	697a      	ldr	r2, [r7, #20]
 800734c:	621a      	str	r2, [r3, #32]
}
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	feff8fff 	.word	0xfeff8fff
 8007360:	40010000 	.word	0x40010000
 8007364:	40010400 	.word	0x40010400

08007368 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007368:	b480      	push	{r7}
 800736a:	b087      	sub	sp, #28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6a1b      	ldr	r3, [r3, #32]
 8007382:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007390:	68fa      	ldr	r2, [r7, #12]
 8007392:	4b2d      	ldr	r3, [pc, #180]	; (8007448 <TIM_OC3_SetConfig+0xe0>)
 8007394:	4013      	ands	r3, r2
 8007396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	f023 0303 	bic.w	r3, r3, #3
 800739e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	68fa      	ldr	r2, [r7, #12]
 80073a6:	4313      	orrs	r3, r2
 80073a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	689b      	ldr	r3, [r3, #8]
 80073b6:	021b      	lsls	r3, r3, #8
 80073b8:	697a      	ldr	r2, [r7, #20]
 80073ba:	4313      	orrs	r3, r2
 80073bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a22      	ldr	r2, [pc, #136]	; (800744c <TIM_OC3_SetConfig+0xe4>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d003      	beq.n	80073ce <TIM_OC3_SetConfig+0x66>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a21      	ldr	r2, [pc, #132]	; (8007450 <TIM_OC3_SetConfig+0xe8>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d10d      	bne.n	80073ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	68db      	ldr	r3, [r3, #12]
 80073da:	021b      	lsls	r3, r3, #8
 80073dc:	697a      	ldr	r2, [r7, #20]
 80073de:	4313      	orrs	r3, r2
 80073e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	4a17      	ldr	r2, [pc, #92]	; (800744c <TIM_OC3_SetConfig+0xe4>)
 80073ee:	4293      	cmp	r3, r2
 80073f0:	d003      	beq.n	80073fa <TIM_OC3_SetConfig+0x92>
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	4a16      	ldr	r2, [pc, #88]	; (8007450 <TIM_OC3_SetConfig+0xe8>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d113      	bne.n	8007422 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	695b      	ldr	r3, [r3, #20]
 800740e:	011b      	lsls	r3, r3, #4
 8007410:	693a      	ldr	r2, [r7, #16]
 8007412:	4313      	orrs	r3, r2
 8007414:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	011b      	lsls	r3, r3, #4
 800741c:	693a      	ldr	r2, [r7, #16]
 800741e:	4313      	orrs	r3, r2
 8007420:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	693a      	ldr	r2, [r7, #16]
 8007426:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68fa      	ldr	r2, [r7, #12]
 800742c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	621a      	str	r2, [r3, #32]
}
 800743c:	bf00      	nop
 800743e:	371c      	adds	r7, #28
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr
 8007448:	fffeff8f 	.word	0xfffeff8f
 800744c:	40010000 	.word	0x40010000
 8007450:	40010400 	.word	0x40010400

08007454 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007454:	b480      	push	{r7}
 8007456:	b087      	sub	sp, #28
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
 800745c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a1b      	ldr	r3, [r3, #32]
 8007462:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	69db      	ldr	r3, [r3, #28]
 800747a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <TIM_OC4_SetConfig+0xa4>)
 8007480:	4013      	ands	r3, r2
 8007482:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800748a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	021b      	lsls	r3, r3, #8
 8007492:	68fa      	ldr	r2, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800749e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	689b      	ldr	r3, [r3, #8]
 80074a4:	031b      	lsls	r3, r3, #12
 80074a6:	693a      	ldr	r2, [r7, #16]
 80074a8:	4313      	orrs	r3, r2
 80074aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	4a13      	ldr	r2, [pc, #76]	; (80074fc <TIM_OC4_SetConfig+0xa8>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d003      	beq.n	80074bc <TIM_OC4_SetConfig+0x68>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	4a12      	ldr	r2, [pc, #72]	; (8007500 <TIM_OC4_SetConfig+0xac>)
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d109      	bne.n	80074d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074bc:	697b      	ldr	r3, [r7, #20]
 80074be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	695b      	ldr	r3, [r3, #20]
 80074c8:	019b      	lsls	r3, r3, #6
 80074ca:	697a      	ldr	r2, [r7, #20]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	685a      	ldr	r2, [r3, #4]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	621a      	str	r2, [r3, #32]
}
 80074ea:	bf00      	nop
 80074ec:	371c      	adds	r7, #28
 80074ee:	46bd      	mov	sp, r7
 80074f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f4:	4770      	bx	lr
 80074f6:	bf00      	nop
 80074f8:	feff8fff 	.word	0xfeff8fff
 80074fc:	40010000 	.word	0x40010000
 8007500:	40010400 	.word	0x40010400

08007504 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6a1b      	ldr	r3, [r3, #32]
 8007512:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6a1b      	ldr	r3, [r3, #32]
 800751e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	685b      	ldr	r3, [r3, #4]
 8007524:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800752a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4b1b      	ldr	r3, [pc, #108]	; (800759c <TIM_OC5_SetConfig+0x98>)
 8007530:	4013      	ands	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	4313      	orrs	r3, r2
 800753c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007544:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	689b      	ldr	r3, [r3, #8]
 800754a:	041b      	lsls	r3, r3, #16
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	4313      	orrs	r3, r2
 8007550:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a12      	ldr	r2, [pc, #72]	; (80075a0 <TIM_OC5_SetConfig+0x9c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d003      	beq.n	8007562 <TIM_OC5_SetConfig+0x5e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a11      	ldr	r2, [pc, #68]	; (80075a4 <TIM_OC5_SetConfig+0xa0>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d109      	bne.n	8007576 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007568:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	695b      	ldr	r3, [r3, #20]
 800756e:	021b      	lsls	r3, r3, #8
 8007570:	697a      	ldr	r2, [r7, #20]
 8007572:	4313      	orrs	r3, r2
 8007574:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	68fa      	ldr	r2, [r7, #12]
 8007580:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	685a      	ldr	r2, [r3, #4]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	693a      	ldr	r2, [r7, #16]
 800758e:	621a      	str	r2, [r3, #32]
}
 8007590:	bf00      	nop
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	fffeff8f 	.word	0xfffeff8f
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40010400 	.word	0x40010400

080075a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6a1b      	ldr	r3, [r3, #32]
 80075b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6a1b      	ldr	r3, [r3, #32]
 80075c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	685b      	ldr	r3, [r3, #4]
 80075c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80075d0:	68fa      	ldr	r2, [r7, #12]
 80075d2:	4b1c      	ldr	r3, [pc, #112]	; (8007644 <TIM_OC6_SetConfig+0x9c>)
 80075d4:	4013      	ands	r3, r2
 80075d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	68fa      	ldr	r2, [r7, #12]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80075ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	051b      	lsls	r3, r3, #20
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a13      	ldr	r2, [pc, #76]	; (8007648 <TIM_OC6_SetConfig+0xa0>)
 80075fc:	4293      	cmp	r3, r2
 80075fe:	d003      	beq.n	8007608 <TIM_OC6_SetConfig+0x60>
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	4a12      	ldr	r2, [pc, #72]	; (800764c <TIM_OC6_SetConfig+0xa4>)
 8007604:	4293      	cmp	r3, r2
 8007606:	d109      	bne.n	800761c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800760e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	029b      	lsls	r3, r3, #10
 8007616:	697a      	ldr	r2, [r7, #20]
 8007618:	4313      	orrs	r3, r2
 800761a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	693a      	ldr	r2, [r7, #16]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	feff8fff 	.word	0xfeff8fff
 8007648:	40010000 	.word	0x40010000
 800764c:	40010400 	.word	0x40010400

08007650 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007650:	b480      	push	{r7}
 8007652:	b087      	sub	sp, #28
 8007654:	af00      	add	r7, sp, #0
 8007656:	60f8      	str	r0, [r7, #12]
 8007658:	60b9      	str	r1, [r7, #8]
 800765a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	6a1b      	ldr	r3, [r3, #32]
 8007660:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	6a1b      	ldr	r3, [r3, #32]
 8007666:	f023 0201 	bic.w	r2, r3, #1
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800767a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	011b      	lsls	r3, r3, #4
 8007680:	693a      	ldr	r2, [r7, #16]
 8007682:	4313      	orrs	r3, r2
 8007684:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	f023 030a 	bic.w	r3, r3, #10
 800768c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	4313      	orrs	r3, r2
 8007694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	621a      	str	r2, [r3, #32]
}
 80076a2:	bf00      	nop
 80076a4:	371c      	adds	r7, #28
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr

080076ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ae:	b480      	push	{r7}
 80076b0:	b087      	sub	sp, #28
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	60f8      	str	r0, [r7, #12]
 80076b6:	60b9      	str	r1, [r7, #8]
 80076b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 0210 	bic.w	r2, r3, #16
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6a1b      	ldr	r3, [r3, #32]
 80076d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	031b      	lsls	r3, r3, #12
 80076de:	697a      	ldr	r2, [r7, #20]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	011b      	lsls	r3, r3, #4
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	697a      	ldr	r2, [r7, #20]
 80076fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	693a      	ldr	r2, [r7, #16]
 8007700:	621a      	str	r2, [r3, #32]
}
 8007702:	bf00      	nop
 8007704:	371c      	adds	r7, #28
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800770e:	b480      	push	{r7}
 8007710:	b085      	sub	sp, #20
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007724:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007726:	683a      	ldr	r2, [r7, #0]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4313      	orrs	r3, r2
 800772c:	f043 0307 	orr.w	r3, r3, #7
 8007730:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	68fa      	ldr	r2, [r7, #12]
 8007736:	609a      	str	r2, [r3, #8]
}
 8007738:	bf00      	nop
 800773a:	3714      	adds	r7, #20
 800773c:	46bd      	mov	sp, r7
 800773e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007742:	4770      	bx	lr

08007744 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007744:	b480      	push	{r7}
 8007746:	b087      	sub	sp, #28
 8007748:	af00      	add	r7, sp, #0
 800774a:	60f8      	str	r0, [r7, #12]
 800774c:	60b9      	str	r1, [r7, #8]
 800774e:	607a      	str	r2, [r7, #4]
 8007750:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800775e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	021a      	lsls	r2, r3, #8
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	431a      	orrs	r2, r3
 8007768:	68bb      	ldr	r3, [r7, #8]
 800776a:	4313      	orrs	r3, r2
 800776c:	697a      	ldr	r2, [r7, #20]
 800776e:	4313      	orrs	r3, r2
 8007770:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	697a      	ldr	r2, [r7, #20]
 8007776:	609a      	str	r2, [r3, #8]
}
 8007778:	bf00      	nop
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	f003 031f 	and.w	r3, r3, #31
 8007796:	2201      	movs	r2, #1
 8007798:	fa02 f303 	lsl.w	r3, r2, r3
 800779c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6a1a      	ldr	r2, [r3, #32]
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	43db      	mvns	r3, r3
 80077a6:	401a      	ands	r2, r3
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	6a1a      	ldr	r2, [r3, #32]
 80077b0:	68bb      	ldr	r3, [r7, #8]
 80077b2:	f003 031f 	and.w	r3, r3, #31
 80077b6:	6879      	ldr	r1, [r7, #4]
 80077b8:	fa01 f303 	lsl.w	r3, r1, r3
 80077bc:	431a      	orrs	r2, r3
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	621a      	str	r2, [r3, #32]
}
 80077c2:	bf00      	nop
 80077c4:	371c      	adds	r7, #28
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e0:	2b01      	cmp	r3, #1
 80077e2:	d101      	bne.n	80077e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80077e4:	2302      	movs	r3, #2
 80077e6:	e06d      	b.n	80078c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2202      	movs	r2, #2
 80077f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a30      	ldr	r2, [pc, #192]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d004      	beq.n	800781c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a2f      	ldr	r2, [pc, #188]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d108      	bne.n	800782e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007822:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	68fa      	ldr	r2, [r7, #12]
 800782a:	4313      	orrs	r3, r2
 800782c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007834:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	68fa      	ldr	r2, [r7, #12]
 800783c:	4313      	orrs	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	68fa      	ldr	r2, [r7, #12]
 8007846:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a20      	ldr	r2, [pc, #128]	; (80078d0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d022      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800785a:	d01d      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a1d      	ldr	r2, [pc, #116]	; (80078d8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d018      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a1c      	ldr	r2, [pc, #112]	; (80078dc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d013      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a1a      	ldr	r2, [pc, #104]	; (80078e0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d00e      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a15      	ldr	r2, [pc, #84]	; (80078d4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d009      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a16      	ldr	r2, [pc, #88]	; (80078e4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d004      	beq.n	8007898 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a15      	ldr	r2, [pc, #84]	; (80078e8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d10c      	bne.n	80078b2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800789e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	68ba      	ldr	r2, [r7, #8]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3714      	adds	r7, #20
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr
 80078d0:	40010000 	.word	0x40010000
 80078d4:	40010400 	.word	0x40010400
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40000800 	.word	0x40000800
 80078e0:	40000c00 	.word	0x40000c00
 80078e4:	40014000 	.word	0x40014000
 80078e8:	40001800 	.word	0x40001800

080078ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b480      	push	{r7}
 8007902:	b083      	sub	sp, #12
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007908:	bf00      	nop
 800790a:	370c      	adds	r7, #12
 800790c:	46bd      	mov	sp, r7
 800790e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007912:	4770      	bx	lr

08007914 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007914:	b480      	push	{r7}
 8007916:	b083      	sub	sp, #12
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800791c:	bf00      	nop
 800791e:	370c      	adds	r7, #12
 8007920:	46bd      	mov	sp, r7
 8007922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007926:	4770      	bx	lr

08007928 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b082      	sub	sp, #8
 800792c:	af00      	add	r7, sp, #0
 800792e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d101      	bne.n	800793a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007936:	2301      	movs	r3, #1
 8007938:	e040      	b.n	80079bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800793e:	2b00      	cmp	r3, #0
 8007940:	d106      	bne.n	8007950 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800794a:	6878      	ldr	r0, [r7, #4]
 800794c:	f7fc f80a 	bl	8003964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2224      	movs	r2, #36	; 0x24
 8007954:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f022 0201 	bic.w	r2, r2, #1
 8007964:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007966:	6878      	ldr	r0, [r7, #4]
 8007968:	f000 fbaa 	bl	80080c0 <UART_SetConfig>
 800796c:	4603      	mov	r3, r0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d101      	bne.n	8007976 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007972:	2301      	movs	r3, #1
 8007974:	e022      	b.n	80079bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800797a:	2b00      	cmp	r3, #0
 800797c:	d002      	beq.n	8007984 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fe02 	bl	8008588 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685a      	ldr	r2, [r3, #4]
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007992:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689a      	ldr	r2, [r3, #8]
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80079a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	681a      	ldr	r2, [r3, #0]
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f042 0201 	orr.w	r2, r2, #1
 80079b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079b4:	6878      	ldr	r0, [r7, #4]
 80079b6:	f000 fe89 	bl	80086cc <UART_CheckIdleState>
 80079ba:	4603      	mov	r3, r0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3708      	adds	r7, #8
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b08a      	sub	sp, #40	; 0x28
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	603b      	str	r3, [r7, #0]
 80079d0:	4613      	mov	r3, r2
 80079d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80079d8:	2b20      	cmp	r3, #32
 80079da:	f040 8081 	bne.w	8007ae0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d002      	beq.n	80079ea <HAL_UART_Transmit+0x26>
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e079      	b.n	8007ae2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d101      	bne.n	80079fc <HAL_UART_Transmit+0x38>
 80079f8:	2302      	movs	r3, #2
 80079fa:	e072      	b.n	8007ae2 <HAL_UART_Transmit+0x11e>
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	2221      	movs	r2, #33	; 0x21
 8007a10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a12:	f7fc f9e3 	bl	8003ddc <HAL_GetTick>
 8007a16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	88fa      	ldrh	r2, [r7, #6]
 8007a1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	88fa      	ldrh	r2, [r7, #6]
 8007a24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	689b      	ldr	r3, [r3, #8]
 8007a2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a30:	d108      	bne.n	8007a44 <HAL_UART_Transmit+0x80>
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	691b      	ldr	r3, [r3, #16]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d104      	bne.n	8007a44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	61bb      	str	r3, [r7, #24]
 8007a42:	e003      	b.n	8007a4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a48:	2300      	movs	r3, #0
 8007a4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007a54:	e02c      	b.n	8007ab0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2180      	movs	r1, #128	; 0x80
 8007a60:	68f8      	ldr	r0, [r7, #12]
 8007a62:	f000 fe66 	bl	8008732 <UART_WaitOnFlagUntilTimeout>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d001      	beq.n	8007a70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e038      	b.n	8007ae2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8007a70:	69fb      	ldr	r3, [r7, #28]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d10b      	bne.n	8007a8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	881b      	ldrh	r3, [r3, #0]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	3302      	adds	r3, #2
 8007a8a:	61bb      	str	r3, [r7, #24]
 8007a8c:	e007      	b.n	8007a9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	781a      	ldrb	r2, [r3, #0]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007a98:	69fb      	ldr	r3, [r7, #28]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	3b01      	subs	r3, #1
 8007aa8:	b29a      	uxth	r2, r3
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1cc      	bne.n	8007a56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	697b      	ldr	r3, [r7, #20]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2140      	movs	r1, #64	; 0x40
 8007ac6:	68f8      	ldr	r0, [r7, #12]
 8007ac8:	f000 fe33 	bl	8008732 <UART_WaitOnFlagUntilTimeout>
 8007acc:	4603      	mov	r3, r0
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e005      	b.n	8007ae2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2220      	movs	r2, #32
 8007ada:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007adc:	2300      	movs	r3, #0
 8007ade:	e000      	b.n	8007ae2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007ae0:	2302      	movs	r3, #2
  }
}
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	3720      	adds	r7, #32
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
	...

08007aec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b0ba      	sub	sp, #232	; 0xe8
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	69db      	ldr	r3, [r3, #28]
 8007afa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007b16:	f640 030f 	movw	r3, #2063	; 0x80f
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007b20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d115      	bne.n	8007b54 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2c:	f003 0320 	and.w	r3, r3, #32
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d00f      	beq.n	8007b54 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b38:	f003 0320 	and.w	r3, r3, #32
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d009      	beq.n	8007b54 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	f000 828f 	beq.w	8008068 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	4798      	blx	r3
      }
      return;
 8007b52:	e289      	b.n	8008068 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b54:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 8117 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007b5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007b6a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b6e:	4b85      	ldr	r3, [pc, #532]	; (8007d84 <HAL_UART_IRQHandler+0x298>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	f000 810a 	beq.w	8007d8c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007b78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d011      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xbc>
 8007b84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d00b      	beq.n	8007ba8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2201      	movs	r2, #1
 8007b96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b9e:	f043 0201 	orr.w	r2, r3, #1
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ba8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d011      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xec>
 8007bb4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d00b      	beq.n	8007bd8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bce:	f043 0204 	orr.w	r2, r3, #4
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bdc:	f003 0304 	and.w	r3, r3, #4
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d011      	beq.n	8007c08 <HAL_UART_IRQHandler+0x11c>
 8007be4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007be8:	f003 0301 	and.w	r3, r3, #1
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00b      	beq.n	8007c08 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2204      	movs	r2, #4
 8007bf6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007bfe:	f043 0202 	orr.w	r2, r3, #2
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c0c:	f003 0308 	and.w	r3, r3, #8
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c18:	f003 0320 	and.w	r3, r3, #32
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d105      	bne.n	8007c2c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c24:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00b      	beq.n	8007c44 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2208      	movs	r2, #8
 8007c32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c3a:	f043 0208 	orr.w	r2, r3, #8
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d012      	beq.n	8007c76 <HAL_UART_IRQHandler+0x18a>
 8007c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c64:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c6c:	f043 0220 	orr.w	r2, r3, #32
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	f000 81f5 	beq.w	800806c <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	f003 0320 	and.w	r3, r3, #32
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00d      	beq.n	8007caa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007c8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c92:	f003 0320 	and.w	r3, r3, #32
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d007      	beq.n	8007caa <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d003      	beq.n	8007caa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007cb0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	689b      	ldr	r3, [r3, #8]
 8007cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cbe:	2b40      	cmp	r3, #64	; 0x40
 8007cc0:	d005      	beq.n	8007cce <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007cc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cc6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d04f      	beq.n	8007d6e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fdf3 	bl	80088ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cde:	2b40      	cmp	r3, #64	; 0x40
 8007ce0:	d141      	bne.n	8007d66 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007cf0:	e853 3f00 	ldrex	r3, [r3]
 8007cf4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007cf8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	3308      	adds	r3, #8
 8007d0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007d12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007d1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007d1e:	e841 2300 	strex	r3, r2, [r1]
 8007d22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1d9      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d013      	beq.n	8007d5e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d3a:	4a13      	ldr	r2, [pc, #76]	; (8007d88 <HAL_UART_IRQHandler+0x29c>)
 8007d3c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fd f893 	bl	8004e6e <HAL_DMA_Abort_IT>
 8007d48:	4603      	mov	r3, r0
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d017      	beq.n	8007d7e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007d58:	4610      	mov	r0, r2
 8007d5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d5c:	e00f      	b.n	8007d7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 f998 	bl	8008094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	e00b      	b.n	8007d7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f000 f994 	bl	8008094 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d6c:	e007      	b.n	8007d7e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f990 	bl	8008094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007d7c:	e176      	b.n	800806c <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d7e:	bf00      	nop
    return;
 8007d80:	e174      	b.n	800806c <HAL_UART_IRQHandler+0x580>
 8007d82:	bf00      	nop
 8007d84:	04000120 	.word	0x04000120
 8007d88:	08008981 	.word	0x08008981

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d90:	2b01      	cmp	r3, #1
 8007d92:	f040 8144 	bne.w	800801e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 813d 	beq.w	800801e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007da4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007da8:	f003 0310 	and.w	r3, r3, #16
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 8136 	beq.w	800801e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	2210      	movs	r2, #16
 8007db8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	689b      	ldr	r3, [r3, #8]
 8007dc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc4:	2b40      	cmp	r3, #64	; 0x40
 8007dc6:	f040 80b2 	bne.w	8007f2e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	685b      	ldr	r3, [r3, #4]
 8007dd2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007dd6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 8148 	beq.w	8008070 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007de6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007dea:	429a      	cmp	r2, r3
 8007dec:	f080 8140 	bcs.w	8008070 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007df6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e04:	f000 8085 	beq.w	8007f12 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007e14:	e853 3f00 	ldrex	r3, [r3]
 8007e18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007e1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007e20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007e24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007e32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007e3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007e42:	e841 2300 	strex	r3, r2, [r1]
 8007e46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007e4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d1da      	bne.n	8007e08 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e5c:	e853 3f00 	ldrex	r3, [r3]
 8007e60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007e62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007e64:	f023 0301 	bic.w	r3, r3, #1
 8007e68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	3308      	adds	r3, #8
 8007e72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007e76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007e7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007e7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007e82:	e841 2300 	strex	r3, r2, [r1]
 8007e86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d1e1      	bne.n	8007e52 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	3308      	adds	r3, #8
 8007e94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e98:	e853 3f00 	ldrex	r3, [r3]
 8007e9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	3308      	adds	r3, #8
 8007eae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007eb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007eb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007eb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007eba:	e841 2300 	strex	r3, r2, [r1]
 8007ebe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d1e3      	bne.n	8007e8e <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2220      	movs	r2, #32
 8007eca:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007ee0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ef4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ef6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f0c:	4618      	mov	r0, r3
 8007f0e:	f7fc ff3e 	bl	8004d8e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	1ad3      	subs	r3, r2, r3
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	4619      	mov	r1, r3
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 f8be 	bl	80080a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f2c:	e0a0      	b.n	8008070 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f3a:	b29b      	uxth	r3, r3
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007f48:	b29b      	uxth	r3, r3
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	f000 8092 	beq.w	8008074 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007f50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f000 808d 	beq.w	8008074 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f62:	e853 3f00 	ldrex	r3, [r3]
 8007f66:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007f68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8007f7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007f84:	e841 2300 	strex	r3, r2, [r1]
 8007f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d1e4      	bne.n	8007f5a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	3308      	adds	r3, #8
 8007f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f9a:	e853 3f00 	ldrex	r3, [r3]
 8007f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007fa0:	6a3b      	ldr	r3, [r7, #32]
 8007fa2:	f023 0301 	bic.w	r3, r3, #1
 8007fa6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	3308      	adds	r3, #8
 8007fb0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007fb4:	633a      	str	r2, [r7, #48]	; 0x30
 8007fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007fba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fbc:	e841 2300 	strex	r3, r2, [r1]
 8007fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d1e3      	bne.n	8007f90 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2220      	movs	r2, #32
 8007fcc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	693b      	ldr	r3, [r7, #16]
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	f023 0310 	bic.w	r3, r3, #16
 8007fee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ffc:	61fb      	str	r3, [r7, #28]
 8007ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008000:	69b9      	ldr	r1, [r7, #24]
 8008002:	69fa      	ldr	r2, [r7, #28]
 8008004:	e841 2300 	strex	r3, r2, [r1]
 8008008:	617b      	str	r3, [r7, #20]
   return(result);
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d1e4      	bne.n	8007fda <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f000 f846 	bl	80080a8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800801c:	e02a      	b.n	8008074 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800801e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008022:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008026:	2b00      	cmp	r3, #0
 8008028:	d00e      	beq.n	8008048 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800802a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800802e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008032:	2b00      	cmp	r3, #0
 8008034:	d008      	beq.n	8008048 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800803a:	2b00      	cmp	r3, #0
 800803c:	d01c      	beq.n	8008078 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	4798      	blx	r3
    }
    return;
 8008046:	e017      	b.n	8008078 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800804c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d012      	beq.n	800807a <HAL_UART_IRQHandler+0x58e>
 8008054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800805c:	2b00      	cmp	r3, #0
 800805e:	d00c      	beq.n	800807a <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f000 fca3 	bl	80089ac <UART_EndTransmit_IT>
    return;
 8008066:	e008      	b.n	800807a <HAL_UART_IRQHandler+0x58e>
      return;
 8008068:	bf00      	nop
 800806a:	e006      	b.n	800807a <HAL_UART_IRQHandler+0x58e>
    return;
 800806c:	bf00      	nop
 800806e:	e004      	b.n	800807a <HAL_UART_IRQHandler+0x58e>
      return;
 8008070:	bf00      	nop
 8008072:	e002      	b.n	800807a <HAL_UART_IRQHandler+0x58e>
      return;
 8008074:	bf00      	nop
 8008076:	e000      	b.n	800807a <HAL_UART_IRQHandler+0x58e>
    return;
 8008078:	bf00      	nop
  }

}
 800807a:	37e8      	adds	r7, #232	; 0xe8
 800807c:	46bd      	mov	sp, r7
 800807e:	bd80      	pop	{r7, pc}

08008080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008080:	b480      	push	{r7}
 8008082:	b083      	sub	sp, #12
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008088:	bf00      	nop
 800808a:	370c      	adds	r7, #12
 800808c:	46bd      	mov	sp, r7
 800808e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008092:	4770      	bx	lr

08008094 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008094:	b480      	push	{r7}
 8008096:	b083      	sub	sp, #12
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800809c:	bf00      	nop
 800809e:	370c      	adds	r7, #12
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	6078      	str	r0, [r7, #4]
 80080b0:	460b      	mov	r3, r1
 80080b2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80080b4:	bf00      	nop
 80080b6:	370c      	adds	r7, #12
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr

080080c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b088      	sub	sp, #32
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80080c8:	2300      	movs	r3, #0
 80080ca:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	689a      	ldr	r2, [r3, #8]
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	431a      	orrs	r2, r3
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	431a      	orrs	r2, r3
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	69db      	ldr	r3, [r3, #28]
 80080e0:	4313      	orrs	r3, r2
 80080e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	681a      	ldr	r2, [r3, #0]
 80080ea:	4ba6      	ldr	r3, [pc, #664]	; (8008384 <UART_SetConfig+0x2c4>)
 80080ec:	4013      	ands	r3, r2
 80080ee:	687a      	ldr	r2, [r7, #4]
 80080f0:	6812      	ldr	r2, [r2, #0]
 80080f2:	6979      	ldr	r1, [r7, #20]
 80080f4:	430b      	orrs	r3, r1
 80080f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	68da      	ldr	r2, [r3, #12]
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	430a      	orrs	r2, r1
 800810c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	699b      	ldr	r3, [r3, #24]
 8008112:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	697a      	ldr	r2, [r7, #20]
 800811a:	4313      	orrs	r3, r2
 800811c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	430a      	orrs	r2, r1
 8008130:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a94      	ldr	r2, [pc, #592]	; (8008388 <UART_SetConfig+0x2c8>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d120      	bne.n	800817e <UART_SetConfig+0xbe>
 800813c:	4b93      	ldr	r3, [pc, #588]	; (800838c <UART_SetConfig+0x2cc>)
 800813e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008142:	f003 0303 	and.w	r3, r3, #3
 8008146:	2b03      	cmp	r3, #3
 8008148:	d816      	bhi.n	8008178 <UART_SetConfig+0xb8>
 800814a:	a201      	add	r2, pc, #4	; (adr r2, 8008150 <UART_SetConfig+0x90>)
 800814c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008150:	08008161 	.word	0x08008161
 8008154:	0800816d 	.word	0x0800816d
 8008158:	08008167 	.word	0x08008167
 800815c:	08008173 	.word	0x08008173
 8008160:	2301      	movs	r3, #1
 8008162:	77fb      	strb	r3, [r7, #31]
 8008164:	e150      	b.n	8008408 <UART_SetConfig+0x348>
 8008166:	2302      	movs	r3, #2
 8008168:	77fb      	strb	r3, [r7, #31]
 800816a:	e14d      	b.n	8008408 <UART_SetConfig+0x348>
 800816c:	2304      	movs	r3, #4
 800816e:	77fb      	strb	r3, [r7, #31]
 8008170:	e14a      	b.n	8008408 <UART_SetConfig+0x348>
 8008172:	2308      	movs	r3, #8
 8008174:	77fb      	strb	r3, [r7, #31]
 8008176:	e147      	b.n	8008408 <UART_SetConfig+0x348>
 8008178:	2310      	movs	r3, #16
 800817a:	77fb      	strb	r3, [r7, #31]
 800817c:	e144      	b.n	8008408 <UART_SetConfig+0x348>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a83      	ldr	r2, [pc, #524]	; (8008390 <UART_SetConfig+0x2d0>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d132      	bne.n	80081ee <UART_SetConfig+0x12e>
 8008188:	4b80      	ldr	r3, [pc, #512]	; (800838c <UART_SetConfig+0x2cc>)
 800818a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800818e:	f003 030c 	and.w	r3, r3, #12
 8008192:	2b0c      	cmp	r3, #12
 8008194:	d828      	bhi.n	80081e8 <UART_SetConfig+0x128>
 8008196:	a201      	add	r2, pc, #4	; (adr r2, 800819c <UART_SetConfig+0xdc>)
 8008198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800819c:	080081d1 	.word	0x080081d1
 80081a0:	080081e9 	.word	0x080081e9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081e9 	.word	0x080081e9
 80081ac:	080081dd 	.word	0x080081dd
 80081b0:	080081e9 	.word	0x080081e9
 80081b4:	080081e9 	.word	0x080081e9
 80081b8:	080081e9 	.word	0x080081e9
 80081bc:	080081d7 	.word	0x080081d7
 80081c0:	080081e9 	.word	0x080081e9
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	080081e9 	.word	0x080081e9
 80081cc:	080081e3 	.word	0x080081e3
 80081d0:	2300      	movs	r3, #0
 80081d2:	77fb      	strb	r3, [r7, #31]
 80081d4:	e118      	b.n	8008408 <UART_SetConfig+0x348>
 80081d6:	2302      	movs	r3, #2
 80081d8:	77fb      	strb	r3, [r7, #31]
 80081da:	e115      	b.n	8008408 <UART_SetConfig+0x348>
 80081dc:	2304      	movs	r3, #4
 80081de:	77fb      	strb	r3, [r7, #31]
 80081e0:	e112      	b.n	8008408 <UART_SetConfig+0x348>
 80081e2:	2308      	movs	r3, #8
 80081e4:	77fb      	strb	r3, [r7, #31]
 80081e6:	e10f      	b.n	8008408 <UART_SetConfig+0x348>
 80081e8:	2310      	movs	r3, #16
 80081ea:	77fb      	strb	r3, [r7, #31]
 80081ec:	e10c      	b.n	8008408 <UART_SetConfig+0x348>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a68      	ldr	r2, [pc, #416]	; (8008394 <UART_SetConfig+0x2d4>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d120      	bne.n	800823a <UART_SetConfig+0x17a>
 80081f8:	4b64      	ldr	r3, [pc, #400]	; (800838c <UART_SetConfig+0x2cc>)
 80081fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081fe:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008202:	2b30      	cmp	r3, #48	; 0x30
 8008204:	d013      	beq.n	800822e <UART_SetConfig+0x16e>
 8008206:	2b30      	cmp	r3, #48	; 0x30
 8008208:	d814      	bhi.n	8008234 <UART_SetConfig+0x174>
 800820a:	2b20      	cmp	r3, #32
 800820c:	d009      	beq.n	8008222 <UART_SetConfig+0x162>
 800820e:	2b20      	cmp	r3, #32
 8008210:	d810      	bhi.n	8008234 <UART_SetConfig+0x174>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <UART_SetConfig+0x15c>
 8008216:	2b10      	cmp	r3, #16
 8008218:	d006      	beq.n	8008228 <UART_SetConfig+0x168>
 800821a:	e00b      	b.n	8008234 <UART_SetConfig+0x174>
 800821c:	2300      	movs	r3, #0
 800821e:	77fb      	strb	r3, [r7, #31]
 8008220:	e0f2      	b.n	8008408 <UART_SetConfig+0x348>
 8008222:	2302      	movs	r3, #2
 8008224:	77fb      	strb	r3, [r7, #31]
 8008226:	e0ef      	b.n	8008408 <UART_SetConfig+0x348>
 8008228:	2304      	movs	r3, #4
 800822a:	77fb      	strb	r3, [r7, #31]
 800822c:	e0ec      	b.n	8008408 <UART_SetConfig+0x348>
 800822e:	2308      	movs	r3, #8
 8008230:	77fb      	strb	r3, [r7, #31]
 8008232:	e0e9      	b.n	8008408 <UART_SetConfig+0x348>
 8008234:	2310      	movs	r3, #16
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	e0e6      	b.n	8008408 <UART_SetConfig+0x348>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	4a56      	ldr	r2, [pc, #344]	; (8008398 <UART_SetConfig+0x2d8>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d120      	bne.n	8008286 <UART_SetConfig+0x1c6>
 8008244:	4b51      	ldr	r3, [pc, #324]	; (800838c <UART_SetConfig+0x2cc>)
 8008246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800824a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800824e:	2bc0      	cmp	r3, #192	; 0xc0
 8008250:	d013      	beq.n	800827a <UART_SetConfig+0x1ba>
 8008252:	2bc0      	cmp	r3, #192	; 0xc0
 8008254:	d814      	bhi.n	8008280 <UART_SetConfig+0x1c0>
 8008256:	2b80      	cmp	r3, #128	; 0x80
 8008258:	d009      	beq.n	800826e <UART_SetConfig+0x1ae>
 800825a:	2b80      	cmp	r3, #128	; 0x80
 800825c:	d810      	bhi.n	8008280 <UART_SetConfig+0x1c0>
 800825e:	2b00      	cmp	r3, #0
 8008260:	d002      	beq.n	8008268 <UART_SetConfig+0x1a8>
 8008262:	2b40      	cmp	r3, #64	; 0x40
 8008264:	d006      	beq.n	8008274 <UART_SetConfig+0x1b4>
 8008266:	e00b      	b.n	8008280 <UART_SetConfig+0x1c0>
 8008268:	2300      	movs	r3, #0
 800826a:	77fb      	strb	r3, [r7, #31]
 800826c:	e0cc      	b.n	8008408 <UART_SetConfig+0x348>
 800826e:	2302      	movs	r3, #2
 8008270:	77fb      	strb	r3, [r7, #31]
 8008272:	e0c9      	b.n	8008408 <UART_SetConfig+0x348>
 8008274:	2304      	movs	r3, #4
 8008276:	77fb      	strb	r3, [r7, #31]
 8008278:	e0c6      	b.n	8008408 <UART_SetConfig+0x348>
 800827a:	2308      	movs	r3, #8
 800827c:	77fb      	strb	r3, [r7, #31]
 800827e:	e0c3      	b.n	8008408 <UART_SetConfig+0x348>
 8008280:	2310      	movs	r3, #16
 8008282:	77fb      	strb	r3, [r7, #31]
 8008284:	e0c0      	b.n	8008408 <UART_SetConfig+0x348>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a44      	ldr	r2, [pc, #272]	; (800839c <UART_SetConfig+0x2dc>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d125      	bne.n	80082dc <UART_SetConfig+0x21c>
 8008290:	4b3e      	ldr	r3, [pc, #248]	; (800838c <UART_SetConfig+0x2cc>)
 8008292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800829a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800829e:	d017      	beq.n	80082d0 <UART_SetConfig+0x210>
 80082a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082a4:	d817      	bhi.n	80082d6 <UART_SetConfig+0x216>
 80082a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082aa:	d00b      	beq.n	80082c4 <UART_SetConfig+0x204>
 80082ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082b0:	d811      	bhi.n	80082d6 <UART_SetConfig+0x216>
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d003      	beq.n	80082be <UART_SetConfig+0x1fe>
 80082b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80082ba:	d006      	beq.n	80082ca <UART_SetConfig+0x20a>
 80082bc:	e00b      	b.n	80082d6 <UART_SetConfig+0x216>
 80082be:	2300      	movs	r3, #0
 80082c0:	77fb      	strb	r3, [r7, #31]
 80082c2:	e0a1      	b.n	8008408 <UART_SetConfig+0x348>
 80082c4:	2302      	movs	r3, #2
 80082c6:	77fb      	strb	r3, [r7, #31]
 80082c8:	e09e      	b.n	8008408 <UART_SetConfig+0x348>
 80082ca:	2304      	movs	r3, #4
 80082cc:	77fb      	strb	r3, [r7, #31]
 80082ce:	e09b      	b.n	8008408 <UART_SetConfig+0x348>
 80082d0:	2308      	movs	r3, #8
 80082d2:	77fb      	strb	r3, [r7, #31]
 80082d4:	e098      	b.n	8008408 <UART_SetConfig+0x348>
 80082d6:	2310      	movs	r3, #16
 80082d8:	77fb      	strb	r3, [r7, #31]
 80082da:	e095      	b.n	8008408 <UART_SetConfig+0x348>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a2f      	ldr	r2, [pc, #188]	; (80083a0 <UART_SetConfig+0x2e0>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d125      	bne.n	8008332 <UART_SetConfig+0x272>
 80082e6:	4b29      	ldr	r3, [pc, #164]	; (800838c <UART_SetConfig+0x2cc>)
 80082e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082f4:	d017      	beq.n	8008326 <UART_SetConfig+0x266>
 80082f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082fa:	d817      	bhi.n	800832c <UART_SetConfig+0x26c>
 80082fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008300:	d00b      	beq.n	800831a <UART_SetConfig+0x25a>
 8008302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008306:	d811      	bhi.n	800832c <UART_SetConfig+0x26c>
 8008308:	2b00      	cmp	r3, #0
 800830a:	d003      	beq.n	8008314 <UART_SetConfig+0x254>
 800830c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008310:	d006      	beq.n	8008320 <UART_SetConfig+0x260>
 8008312:	e00b      	b.n	800832c <UART_SetConfig+0x26c>
 8008314:	2301      	movs	r3, #1
 8008316:	77fb      	strb	r3, [r7, #31]
 8008318:	e076      	b.n	8008408 <UART_SetConfig+0x348>
 800831a:	2302      	movs	r3, #2
 800831c:	77fb      	strb	r3, [r7, #31]
 800831e:	e073      	b.n	8008408 <UART_SetConfig+0x348>
 8008320:	2304      	movs	r3, #4
 8008322:	77fb      	strb	r3, [r7, #31]
 8008324:	e070      	b.n	8008408 <UART_SetConfig+0x348>
 8008326:	2308      	movs	r3, #8
 8008328:	77fb      	strb	r3, [r7, #31]
 800832a:	e06d      	b.n	8008408 <UART_SetConfig+0x348>
 800832c:	2310      	movs	r3, #16
 800832e:	77fb      	strb	r3, [r7, #31]
 8008330:	e06a      	b.n	8008408 <UART_SetConfig+0x348>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a1b      	ldr	r2, [pc, #108]	; (80083a4 <UART_SetConfig+0x2e4>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d138      	bne.n	80083ae <UART_SetConfig+0x2ee>
 800833c:	4b13      	ldr	r3, [pc, #76]	; (800838c <UART_SetConfig+0x2cc>)
 800833e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008342:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008346:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800834a:	d017      	beq.n	800837c <UART_SetConfig+0x2bc>
 800834c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008350:	d82a      	bhi.n	80083a8 <UART_SetConfig+0x2e8>
 8008352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008356:	d00b      	beq.n	8008370 <UART_SetConfig+0x2b0>
 8008358:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835c:	d824      	bhi.n	80083a8 <UART_SetConfig+0x2e8>
 800835e:	2b00      	cmp	r3, #0
 8008360:	d003      	beq.n	800836a <UART_SetConfig+0x2aa>
 8008362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008366:	d006      	beq.n	8008376 <UART_SetConfig+0x2b6>
 8008368:	e01e      	b.n	80083a8 <UART_SetConfig+0x2e8>
 800836a:	2300      	movs	r3, #0
 800836c:	77fb      	strb	r3, [r7, #31]
 800836e:	e04b      	b.n	8008408 <UART_SetConfig+0x348>
 8008370:	2302      	movs	r3, #2
 8008372:	77fb      	strb	r3, [r7, #31]
 8008374:	e048      	b.n	8008408 <UART_SetConfig+0x348>
 8008376:	2304      	movs	r3, #4
 8008378:	77fb      	strb	r3, [r7, #31]
 800837a:	e045      	b.n	8008408 <UART_SetConfig+0x348>
 800837c:	2308      	movs	r3, #8
 800837e:	77fb      	strb	r3, [r7, #31]
 8008380:	e042      	b.n	8008408 <UART_SetConfig+0x348>
 8008382:	bf00      	nop
 8008384:	efff69f3 	.word	0xefff69f3
 8008388:	40011000 	.word	0x40011000
 800838c:	40023800 	.word	0x40023800
 8008390:	40004400 	.word	0x40004400
 8008394:	40004800 	.word	0x40004800
 8008398:	40004c00 	.word	0x40004c00
 800839c:	40005000 	.word	0x40005000
 80083a0:	40011400 	.word	0x40011400
 80083a4:	40007800 	.word	0x40007800
 80083a8:	2310      	movs	r3, #16
 80083aa:	77fb      	strb	r3, [r7, #31]
 80083ac:	e02c      	b.n	8008408 <UART_SetConfig+0x348>
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a72      	ldr	r2, [pc, #456]	; (800857c <UART_SetConfig+0x4bc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d125      	bne.n	8008404 <UART_SetConfig+0x344>
 80083b8:	4b71      	ldr	r3, [pc, #452]	; (8008580 <UART_SetConfig+0x4c0>)
 80083ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083be:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80083c2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083c6:	d017      	beq.n	80083f8 <UART_SetConfig+0x338>
 80083c8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80083cc:	d817      	bhi.n	80083fe <UART_SetConfig+0x33e>
 80083ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d2:	d00b      	beq.n	80083ec <UART_SetConfig+0x32c>
 80083d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d8:	d811      	bhi.n	80083fe <UART_SetConfig+0x33e>
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d003      	beq.n	80083e6 <UART_SetConfig+0x326>
 80083de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083e2:	d006      	beq.n	80083f2 <UART_SetConfig+0x332>
 80083e4:	e00b      	b.n	80083fe <UART_SetConfig+0x33e>
 80083e6:	2300      	movs	r3, #0
 80083e8:	77fb      	strb	r3, [r7, #31]
 80083ea:	e00d      	b.n	8008408 <UART_SetConfig+0x348>
 80083ec:	2302      	movs	r3, #2
 80083ee:	77fb      	strb	r3, [r7, #31]
 80083f0:	e00a      	b.n	8008408 <UART_SetConfig+0x348>
 80083f2:	2304      	movs	r3, #4
 80083f4:	77fb      	strb	r3, [r7, #31]
 80083f6:	e007      	b.n	8008408 <UART_SetConfig+0x348>
 80083f8:	2308      	movs	r3, #8
 80083fa:	77fb      	strb	r3, [r7, #31]
 80083fc:	e004      	b.n	8008408 <UART_SetConfig+0x348>
 80083fe:	2310      	movs	r3, #16
 8008400:	77fb      	strb	r3, [r7, #31]
 8008402:	e001      	b.n	8008408 <UART_SetConfig+0x348>
 8008404:	2310      	movs	r3, #16
 8008406:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	69db      	ldr	r3, [r3, #28]
 800840c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008410:	d15b      	bne.n	80084ca <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008412:	7ffb      	ldrb	r3, [r7, #31]
 8008414:	2b08      	cmp	r3, #8
 8008416:	d828      	bhi.n	800846a <UART_SetConfig+0x3aa>
 8008418:	a201      	add	r2, pc, #4	; (adr r2, 8008420 <UART_SetConfig+0x360>)
 800841a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841e:	bf00      	nop
 8008420:	08008445 	.word	0x08008445
 8008424:	0800844d 	.word	0x0800844d
 8008428:	08008455 	.word	0x08008455
 800842c:	0800846b 	.word	0x0800846b
 8008430:	0800845b 	.word	0x0800845b
 8008434:	0800846b 	.word	0x0800846b
 8008438:	0800846b 	.word	0x0800846b
 800843c:	0800846b 	.word	0x0800846b
 8008440:	08008463 	.word	0x08008463
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008444:	f7fd fc20 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8008448:	61b8      	str	r0, [r7, #24]
        break;
 800844a:	e013      	b.n	8008474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800844c:	f7fd fc30 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 8008450:	61b8      	str	r0, [r7, #24]
        break;
 8008452:	e00f      	b.n	8008474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008454:	4b4b      	ldr	r3, [pc, #300]	; (8008584 <UART_SetConfig+0x4c4>)
 8008456:	61bb      	str	r3, [r7, #24]
        break;
 8008458:	e00c      	b.n	8008474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800845a:	f7fd fb03 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 800845e:	61b8      	str	r0, [r7, #24]
        break;
 8008460:	e008      	b.n	8008474 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008466:	61bb      	str	r3, [r7, #24]
        break;
 8008468:	e004      	b.n	8008474 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800846a:	2300      	movs	r3, #0
 800846c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	77bb      	strb	r3, [r7, #30]
        break;
 8008472:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008474:	69bb      	ldr	r3, [r7, #24]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d074      	beq.n	8008564 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800847a:	69bb      	ldr	r3, [r7, #24]
 800847c:	005a      	lsls	r2, r3, #1
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	085b      	lsrs	r3, r3, #1
 8008484:	441a      	add	r2, r3
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	fbb2 f3f3 	udiv	r3, r2, r3
 800848e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	2b0f      	cmp	r3, #15
 8008494:	d916      	bls.n	80084c4 <UART_SetConfig+0x404>
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800849c:	d212      	bcs.n	80084c4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	b29b      	uxth	r3, r3
 80084a2:	f023 030f 	bic.w	r3, r3, #15
 80084a6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	085b      	lsrs	r3, r3, #1
 80084ac:	b29b      	uxth	r3, r3
 80084ae:	f003 0307 	and.w	r3, r3, #7
 80084b2:	b29a      	uxth	r2, r3
 80084b4:	89fb      	ldrh	r3, [r7, #14]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	89fa      	ldrh	r2, [r7, #14]
 80084c0:	60da      	str	r2, [r3, #12]
 80084c2:	e04f      	b.n	8008564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	77bb      	strb	r3, [r7, #30]
 80084c8:	e04c      	b.n	8008564 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80084ca:	7ffb      	ldrb	r3, [r7, #31]
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d828      	bhi.n	8008522 <UART_SetConfig+0x462>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x418>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	08008505 	.word	0x08008505
 80084e0:	0800850d 	.word	0x0800850d
 80084e4:	08008523 	.word	0x08008523
 80084e8:	08008513 	.word	0x08008513
 80084ec:	08008523 	.word	0x08008523
 80084f0:	08008523 	.word	0x08008523
 80084f4:	08008523 	.word	0x08008523
 80084f8:	0800851b 	.word	0x0800851b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fd fbc4 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8008500:	61b8      	str	r0, [r7, #24]
        break;
 8008502:	e013      	b.n	800852c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008504:	f7fd fbd4 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 8008508:	61b8      	str	r0, [r7, #24]
        break;
 800850a:	e00f      	b.n	800852c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800850c:	4b1d      	ldr	r3, [pc, #116]	; (8008584 <UART_SetConfig+0x4c4>)
 800850e:	61bb      	str	r3, [r7, #24]
        break;
 8008510:	e00c      	b.n	800852c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008512:	f7fd faa7 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8008516:	61b8      	str	r0, [r7, #24]
        break;
 8008518:	e008      	b.n	800852c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800851a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800851e:	61bb      	str	r3, [r7, #24]
        break;
 8008520:	e004      	b.n	800852c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008522:	2300      	movs	r3, #0
 8008524:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	77bb      	strb	r3, [r7, #30]
        break;
 800852a:	bf00      	nop
    }

    if (pclk != 0U)
 800852c:	69bb      	ldr	r3, [r7, #24]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d018      	beq.n	8008564 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	085a      	lsrs	r2, r3, #1
 8008538:	69bb      	ldr	r3, [r7, #24]
 800853a:	441a      	add	r2, r3
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	685b      	ldr	r3, [r3, #4]
 8008540:	fbb2 f3f3 	udiv	r3, r2, r3
 8008544:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	2b0f      	cmp	r3, #15
 800854a:	d909      	bls.n	8008560 <UART_SetConfig+0x4a0>
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008552:	d205      	bcs.n	8008560 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	b29a      	uxth	r2, r3
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	60da      	str	r2, [r3, #12]
 800855e:	e001      	b.n	8008564 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008560:	2301      	movs	r3, #1
 8008562:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2200      	movs	r2, #0
 8008568:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008570:	7fbb      	ldrb	r3, [r7, #30]
}
 8008572:	4618      	mov	r0, r3
 8008574:	3720      	adds	r7, #32
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	40007c00 	.word	0x40007c00
 8008580:	40023800 	.word	0x40023800
 8008584:	00f42400 	.word	0x00f42400

08008588 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008588:	b480      	push	{r7}
 800858a:	b083      	sub	sp, #12
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00a      	beq.n	80085b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	430a      	orrs	r2, r1
 80085b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085b6:	f003 0302 	and.w	r3, r3, #2
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d00a      	beq.n	80085d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	430a      	orrs	r2, r1
 80085d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085d8:	f003 0304 	and.w	r3, r3, #4
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d00a      	beq.n	80085f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	430a      	orrs	r2, r1
 80085f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085fa:	f003 0308 	and.w	r3, r3, #8
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d00a      	beq.n	8008618 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800861c:	f003 0310 	and.w	r3, r3, #16
 8008620:	2b00      	cmp	r3, #0
 8008622:	d00a      	beq.n	800863a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	689b      	ldr	r3, [r3, #8]
 800862a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	430a      	orrs	r2, r1
 8008638:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800863e:	f003 0320 	and.w	r3, r3, #32
 8008642:	2b00      	cmp	r3, #0
 8008644:	d00a      	beq.n	800865c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	689b      	ldr	r3, [r3, #8]
 800864c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	430a      	orrs	r2, r1
 800865a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008664:	2b00      	cmp	r3, #0
 8008666:	d01a      	beq.n	800869e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	430a      	orrs	r2, r1
 800867c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008682:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008686:	d10a      	bne.n	800869e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	685b      	ldr	r3, [r3, #4]
 800868e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	430a      	orrs	r2, r1
 800869c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	430a      	orrs	r2, r1
 80086be:	605a      	str	r2, [r3, #4]
  }
}
 80086c0:	bf00      	nop
 80086c2:	370c      	adds	r7, #12
 80086c4:	46bd      	mov	sp, r7
 80086c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ca:	4770      	bx	lr

080086cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b086      	sub	sp, #24
 80086d0:	af02      	add	r7, sp, #8
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086dc:	f7fb fb7e 	bl	8003ddc <HAL_GetTick>
 80086e0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	f003 0308 	and.w	r3, r3, #8
 80086ec:	2b08      	cmp	r3, #8
 80086ee:	d10e      	bne.n	800870e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80086f4:	9300      	str	r3, [sp, #0]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 f817 	bl	8008732 <UART_WaitOnFlagUntilTimeout>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e00d      	b.n	800872a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2220      	movs	r2, #32
 8008718:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008728:	2300      	movs	r3, #0
}
 800872a:	4618      	mov	r0, r3
 800872c:	3710      	adds	r7, #16
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008732:	b580      	push	{r7, lr}
 8008734:	b09c      	sub	sp, #112	; 0x70
 8008736:	af00      	add	r7, sp, #0
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	4613      	mov	r3, r2
 8008740:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008742:	e0a5      	b.n	8008890 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008744:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800874a:	f000 80a1 	beq.w	8008890 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800874e:	f7fb fb45 	bl	8003ddc <HAL_GetTick>
 8008752:	4602      	mov	r2, r0
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	1ad3      	subs	r3, r2, r3
 8008758:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800875a:	429a      	cmp	r2, r3
 800875c:	d302      	bcc.n	8008764 <UART_WaitOnFlagUntilTimeout+0x32>
 800875e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008760:	2b00      	cmp	r3, #0
 8008762:	d13e      	bne.n	80087e2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800876a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800876c:	e853 3f00 	ldrex	r3, [r3]
 8008770:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008774:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008778:	667b      	str	r3, [r7, #100]	; 0x64
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	461a      	mov	r2, r3
 8008780:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008782:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008784:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008788:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008790:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e6      	bne.n	8008764 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	3308      	adds	r3, #8
 800879c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800879e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087a0:	e853 3f00 	ldrex	r3, [r3]
 80087a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80087a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a8:	f023 0301 	bic.w	r3, r3, #1
 80087ac:	663b      	str	r3, [r7, #96]	; 0x60
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80087b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80087b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80087bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80087be:	e841 2300 	strex	r3, r2, [r1]
 80087c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80087c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d1e5      	bne.n	8008796 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2220      	movs	r2, #32
 80087ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2220      	movs	r2, #32
 80087d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	2200      	movs	r2, #0
 80087da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80087de:	2303      	movs	r3, #3
 80087e0:	e067      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0304 	and.w	r3, r3, #4
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d04f      	beq.n	8008890 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	69db      	ldr	r3, [r3, #28]
 80087f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087fe:	d147      	bne.n	8008890 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008808:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008812:	e853 3f00 	ldrex	r3, [r3]
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800881e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	461a      	mov	r2, r3
 8008826:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
 800882a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800882c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800882e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008830:	e841 2300 	strex	r3, r2, [r1]
 8008834:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1e6      	bne.n	800880a <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	3308      	adds	r3, #8
 8008842:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	e853 3f00 	ldrex	r3, [r3]
 800884a:	613b      	str	r3, [r7, #16]
   return(result);
 800884c:	693b      	ldr	r3, [r7, #16]
 800884e:	f023 0301 	bic.w	r3, r3, #1
 8008852:	66bb      	str	r3, [r7, #104]	; 0x68
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	3308      	adds	r3, #8
 800885a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800885c:	623a      	str	r2, [r7, #32]
 800885e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008860:	69f9      	ldr	r1, [r7, #28]
 8008862:	6a3a      	ldr	r2, [r7, #32]
 8008864:	e841 2300 	strex	r3, r2, [r1]
 8008868:	61bb      	str	r3, [r7, #24]
   return(result);
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d1e5      	bne.n	800883c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2220      	movs	r2, #32
 8008874:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	2220      	movs	r2, #32
 800887a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	2220      	movs	r2, #32
 8008880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2200      	movs	r2, #0
 8008888:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e010      	b.n	80088b2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	69da      	ldr	r2, [r3, #28]
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	4013      	ands	r3, r2
 800889a:	68ba      	ldr	r2, [r7, #8]
 800889c:	429a      	cmp	r2, r3
 800889e:	bf0c      	ite	eq
 80088a0:	2301      	moveq	r3, #1
 80088a2:	2300      	movne	r3, #0
 80088a4:	b2db      	uxtb	r3, r3
 80088a6:	461a      	mov	r2, r3
 80088a8:	79fb      	ldrb	r3, [r7, #7]
 80088aa:	429a      	cmp	r2, r3
 80088ac:	f43f af4a 	beq.w	8008744 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088b0:	2300      	movs	r3, #0
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3770      	adds	r7, #112	; 0x70
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}

080088ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80088ba:	b480      	push	{r7}
 80088bc:	b095      	sub	sp, #84	; 0x54
 80088be:	af00      	add	r7, sp, #0
 80088c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088ca:	e853 3f00 	ldrex	r3, [r3]
 80088ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80088d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	461a      	mov	r2, r3
 80088de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088e0:	643b      	str	r3, [r7, #64]	; 0x40
 80088e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80088e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e6      	bne.n	80088c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	3308      	adds	r3, #8
 80088fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	e853 3f00 	ldrex	r3, [r3]
 8008902:	61fb      	str	r3, [r7, #28]
   return(result);
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f023 0301 	bic.w	r3, r3, #1
 800890a:	64bb      	str	r3, [r7, #72]	; 0x48
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008914:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008916:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008918:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800891a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800891c:	e841 2300 	strex	r3, r2, [r1]
 8008920:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	2b00      	cmp	r3, #0
 8008926:	d1e5      	bne.n	80088f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800892c:	2b01      	cmp	r3, #1
 800892e:	d118      	bne.n	8008962 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	e853 3f00 	ldrex	r3, [r3]
 800893c:	60bb      	str	r3, [r7, #8]
   return(result);
 800893e:	68bb      	ldr	r3, [r7, #8]
 8008940:	f023 0310 	bic.w	r3, r3, #16
 8008944:	647b      	str	r3, [r7, #68]	; 0x44
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	461a      	mov	r2, r3
 800894c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800894e:	61bb      	str	r3, [r7, #24]
 8008950:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008952:	6979      	ldr	r1, [r7, #20]
 8008954:	69ba      	ldr	r2, [r7, #24]
 8008956:	e841 2300 	strex	r3, r2, [r1]
 800895a:	613b      	str	r3, [r7, #16]
   return(result);
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d1e6      	bne.n	8008930 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2220      	movs	r2, #32
 8008966:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008974:	bf00      	nop
 8008976:	3754      	adds	r7, #84	; 0x54
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr

08008980 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	2200      	movs	r2, #0
 8008992:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	2200      	movs	r2, #0
 800899a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff fb78 	bl	8008094 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a4:	bf00      	nop
 80089a6:	3710      	adds	r7, #16
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b088      	sub	sp, #32
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	e853 3f00 	ldrex	r3, [r3]
 80089c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80089c8:	61fb      	str	r3, [r7, #28]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	69fb      	ldr	r3, [r7, #28]
 80089d2:	61bb      	str	r3, [r7, #24]
 80089d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d6:	6979      	ldr	r1, [r7, #20]
 80089d8:	69ba      	ldr	r2, [r7, #24]
 80089da:	e841 2300 	strex	r3, r2, [r1]
 80089de:	613b      	str	r3, [r7, #16]
   return(result);
 80089e0:	693b      	ldr	r3, [r7, #16]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d1e6      	bne.n	80089b4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	2220      	movs	r2, #32
 80089ea:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2200      	movs	r2, #0
 80089f0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fb44 	bl	8008080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089f8:	bf00      	nop
 80089fa:	3720      	adds	r7, #32
 80089fc:	46bd      	mov	sp, r7
 80089fe:	bd80      	pop	{r7, pc}

08008a00 <__errno>:
 8008a00:	4b01      	ldr	r3, [pc, #4]	; (8008a08 <__errno+0x8>)
 8008a02:	6818      	ldr	r0, [r3, #0]
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	20000010 	.word	0x20000010

08008a0c <__libc_init_array>:
 8008a0c:	b570      	push	{r4, r5, r6, lr}
 8008a0e:	4d0d      	ldr	r5, [pc, #52]	; (8008a44 <__libc_init_array+0x38>)
 8008a10:	4c0d      	ldr	r4, [pc, #52]	; (8008a48 <__libc_init_array+0x3c>)
 8008a12:	1b64      	subs	r4, r4, r5
 8008a14:	10a4      	asrs	r4, r4, #2
 8008a16:	2600      	movs	r6, #0
 8008a18:	42a6      	cmp	r6, r4
 8008a1a:	d109      	bne.n	8008a30 <__libc_init_array+0x24>
 8008a1c:	4d0b      	ldr	r5, [pc, #44]	; (8008a4c <__libc_init_array+0x40>)
 8008a1e:	4c0c      	ldr	r4, [pc, #48]	; (8008a50 <__libc_init_array+0x44>)
 8008a20:	f000 ffae 	bl	8009980 <_init>
 8008a24:	1b64      	subs	r4, r4, r5
 8008a26:	10a4      	asrs	r4, r4, #2
 8008a28:	2600      	movs	r6, #0
 8008a2a:	42a6      	cmp	r6, r4
 8008a2c:	d105      	bne.n	8008a3a <__libc_init_array+0x2e>
 8008a2e:	bd70      	pop	{r4, r5, r6, pc}
 8008a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a34:	4798      	blx	r3
 8008a36:	3601      	adds	r6, #1
 8008a38:	e7ee      	b.n	8008a18 <__libc_init_array+0xc>
 8008a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3e:	4798      	blx	r3
 8008a40:	3601      	adds	r6, #1
 8008a42:	e7f2      	b.n	8008a2a <__libc_init_array+0x1e>
 8008a44:	08009ab4 	.word	0x08009ab4
 8008a48:	08009ab4 	.word	0x08009ab4
 8008a4c:	08009ab4 	.word	0x08009ab4
 8008a50:	08009ab8 	.word	0x08009ab8

08008a54 <memset>:
 8008a54:	4402      	add	r2, r0
 8008a56:	4603      	mov	r3, r0
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d100      	bne.n	8008a5e <memset+0xa>
 8008a5c:	4770      	bx	lr
 8008a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008a62:	e7f9      	b.n	8008a58 <memset+0x4>

08008a64 <iprintf>:
 8008a64:	b40f      	push	{r0, r1, r2, r3}
 8008a66:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <iprintf+0x2c>)
 8008a68:	b513      	push	{r0, r1, r4, lr}
 8008a6a:	681c      	ldr	r4, [r3, #0]
 8008a6c:	b124      	cbz	r4, 8008a78 <iprintf+0x14>
 8008a6e:	69a3      	ldr	r3, [r4, #24]
 8008a70:	b913      	cbnz	r3, 8008a78 <iprintf+0x14>
 8008a72:	4620      	mov	r0, r4
 8008a74:	f000 f866 	bl	8008b44 <__sinit>
 8008a78:	ab05      	add	r3, sp, #20
 8008a7a:	9a04      	ldr	r2, [sp, #16]
 8008a7c:	68a1      	ldr	r1, [r4, #8]
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 f9bd 	bl	8008e00 <_vfiprintf_r>
 8008a86:	b002      	add	sp, #8
 8008a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a8c:	b004      	add	sp, #16
 8008a8e:	4770      	bx	lr
 8008a90:	20000010 	.word	0x20000010

08008a94 <std>:
 8008a94:	2300      	movs	r3, #0
 8008a96:	b510      	push	{r4, lr}
 8008a98:	4604      	mov	r4, r0
 8008a9a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a9e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008aa2:	6083      	str	r3, [r0, #8]
 8008aa4:	8181      	strh	r1, [r0, #12]
 8008aa6:	6643      	str	r3, [r0, #100]	; 0x64
 8008aa8:	81c2      	strh	r2, [r0, #14]
 8008aaa:	6183      	str	r3, [r0, #24]
 8008aac:	4619      	mov	r1, r3
 8008aae:	2208      	movs	r2, #8
 8008ab0:	305c      	adds	r0, #92	; 0x5c
 8008ab2:	f7ff ffcf 	bl	8008a54 <memset>
 8008ab6:	4b05      	ldr	r3, [pc, #20]	; (8008acc <std+0x38>)
 8008ab8:	6263      	str	r3, [r4, #36]	; 0x24
 8008aba:	4b05      	ldr	r3, [pc, #20]	; (8008ad0 <std+0x3c>)
 8008abc:	62a3      	str	r3, [r4, #40]	; 0x28
 8008abe:	4b05      	ldr	r3, [pc, #20]	; (8008ad4 <std+0x40>)
 8008ac0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008ac2:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <std+0x44>)
 8008ac4:	6224      	str	r4, [r4, #32]
 8008ac6:	6323      	str	r3, [r4, #48]	; 0x30
 8008ac8:	bd10      	pop	{r4, pc}
 8008aca:	bf00      	nop
 8008acc:	080093a9 	.word	0x080093a9
 8008ad0:	080093cb 	.word	0x080093cb
 8008ad4:	08009403 	.word	0x08009403
 8008ad8:	08009427 	.word	0x08009427

08008adc <_cleanup_r>:
 8008adc:	4901      	ldr	r1, [pc, #4]	; (8008ae4 <_cleanup_r+0x8>)
 8008ade:	f000 b8af 	b.w	8008c40 <_fwalk_reent>
 8008ae2:	bf00      	nop
 8008ae4:	08009701 	.word	0x08009701

08008ae8 <__sfmoreglue>:
 8008ae8:	b570      	push	{r4, r5, r6, lr}
 8008aea:	2268      	movs	r2, #104	; 0x68
 8008aec:	1e4d      	subs	r5, r1, #1
 8008aee:	4355      	muls	r5, r2
 8008af0:	460e      	mov	r6, r1
 8008af2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008af6:	f000 f8e5 	bl	8008cc4 <_malloc_r>
 8008afa:	4604      	mov	r4, r0
 8008afc:	b140      	cbz	r0, 8008b10 <__sfmoreglue+0x28>
 8008afe:	2100      	movs	r1, #0
 8008b00:	e9c0 1600 	strd	r1, r6, [r0]
 8008b04:	300c      	adds	r0, #12
 8008b06:	60a0      	str	r0, [r4, #8]
 8008b08:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008b0c:	f7ff ffa2 	bl	8008a54 <memset>
 8008b10:	4620      	mov	r0, r4
 8008b12:	bd70      	pop	{r4, r5, r6, pc}

08008b14 <__sfp_lock_acquire>:
 8008b14:	4801      	ldr	r0, [pc, #4]	; (8008b1c <__sfp_lock_acquire+0x8>)
 8008b16:	f000 b8b3 	b.w	8008c80 <__retarget_lock_acquire_recursive>
 8008b1a:	bf00      	nop
 8008b1c:	20000451 	.word	0x20000451

08008b20 <__sfp_lock_release>:
 8008b20:	4801      	ldr	r0, [pc, #4]	; (8008b28 <__sfp_lock_release+0x8>)
 8008b22:	f000 b8ae 	b.w	8008c82 <__retarget_lock_release_recursive>
 8008b26:	bf00      	nop
 8008b28:	20000451 	.word	0x20000451

08008b2c <__sinit_lock_acquire>:
 8008b2c:	4801      	ldr	r0, [pc, #4]	; (8008b34 <__sinit_lock_acquire+0x8>)
 8008b2e:	f000 b8a7 	b.w	8008c80 <__retarget_lock_acquire_recursive>
 8008b32:	bf00      	nop
 8008b34:	20000452 	.word	0x20000452

08008b38 <__sinit_lock_release>:
 8008b38:	4801      	ldr	r0, [pc, #4]	; (8008b40 <__sinit_lock_release+0x8>)
 8008b3a:	f000 b8a2 	b.w	8008c82 <__retarget_lock_release_recursive>
 8008b3e:	bf00      	nop
 8008b40:	20000452 	.word	0x20000452

08008b44 <__sinit>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	4604      	mov	r4, r0
 8008b48:	f7ff fff0 	bl	8008b2c <__sinit_lock_acquire>
 8008b4c:	69a3      	ldr	r3, [r4, #24]
 8008b4e:	b11b      	cbz	r3, 8008b58 <__sinit+0x14>
 8008b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b54:	f7ff bff0 	b.w	8008b38 <__sinit_lock_release>
 8008b58:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b5c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b5e:	4b13      	ldr	r3, [pc, #76]	; (8008bac <__sinit+0x68>)
 8008b60:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <__sinit+0x6c>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b66:	42a3      	cmp	r3, r4
 8008b68:	bf04      	itt	eq
 8008b6a:	2301      	moveq	r3, #1
 8008b6c:	61a3      	streq	r3, [r4, #24]
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f000 f820 	bl	8008bb4 <__sfp>
 8008b74:	6060      	str	r0, [r4, #4]
 8008b76:	4620      	mov	r0, r4
 8008b78:	f000 f81c 	bl	8008bb4 <__sfp>
 8008b7c:	60a0      	str	r0, [r4, #8]
 8008b7e:	4620      	mov	r0, r4
 8008b80:	f000 f818 	bl	8008bb4 <__sfp>
 8008b84:	2200      	movs	r2, #0
 8008b86:	60e0      	str	r0, [r4, #12]
 8008b88:	2104      	movs	r1, #4
 8008b8a:	6860      	ldr	r0, [r4, #4]
 8008b8c:	f7ff ff82 	bl	8008a94 <std>
 8008b90:	68a0      	ldr	r0, [r4, #8]
 8008b92:	2201      	movs	r2, #1
 8008b94:	2109      	movs	r1, #9
 8008b96:	f7ff ff7d 	bl	8008a94 <std>
 8008b9a:	68e0      	ldr	r0, [r4, #12]
 8008b9c:	2202      	movs	r2, #2
 8008b9e:	2112      	movs	r1, #18
 8008ba0:	f7ff ff78 	bl	8008a94 <std>
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	61a3      	str	r3, [r4, #24]
 8008ba8:	e7d2      	b.n	8008b50 <__sinit+0xc>
 8008baa:	bf00      	nop
 8008bac:	08009a14 	.word	0x08009a14
 8008bb0:	08008add 	.word	0x08008add

08008bb4 <__sfp>:
 8008bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb6:	4607      	mov	r7, r0
 8008bb8:	f7ff ffac 	bl	8008b14 <__sfp_lock_acquire>
 8008bbc:	4b1e      	ldr	r3, [pc, #120]	; (8008c38 <__sfp+0x84>)
 8008bbe:	681e      	ldr	r6, [r3, #0]
 8008bc0:	69b3      	ldr	r3, [r6, #24]
 8008bc2:	b913      	cbnz	r3, 8008bca <__sfp+0x16>
 8008bc4:	4630      	mov	r0, r6
 8008bc6:	f7ff ffbd 	bl	8008b44 <__sinit>
 8008bca:	3648      	adds	r6, #72	; 0x48
 8008bcc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008bd0:	3b01      	subs	r3, #1
 8008bd2:	d503      	bpl.n	8008bdc <__sfp+0x28>
 8008bd4:	6833      	ldr	r3, [r6, #0]
 8008bd6:	b30b      	cbz	r3, 8008c1c <__sfp+0x68>
 8008bd8:	6836      	ldr	r6, [r6, #0]
 8008bda:	e7f7      	b.n	8008bcc <__sfp+0x18>
 8008bdc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008be0:	b9d5      	cbnz	r5, 8008c18 <__sfp+0x64>
 8008be2:	4b16      	ldr	r3, [pc, #88]	; (8008c3c <__sfp+0x88>)
 8008be4:	60e3      	str	r3, [r4, #12]
 8008be6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008bea:	6665      	str	r5, [r4, #100]	; 0x64
 8008bec:	f000 f847 	bl	8008c7e <__retarget_lock_init_recursive>
 8008bf0:	f7ff ff96 	bl	8008b20 <__sfp_lock_release>
 8008bf4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008bf8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bfc:	6025      	str	r5, [r4, #0]
 8008bfe:	61a5      	str	r5, [r4, #24]
 8008c00:	2208      	movs	r2, #8
 8008c02:	4629      	mov	r1, r5
 8008c04:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008c08:	f7ff ff24 	bl	8008a54 <memset>
 8008c0c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008c10:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008c14:	4620      	mov	r0, r4
 8008c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c18:	3468      	adds	r4, #104	; 0x68
 8008c1a:	e7d9      	b.n	8008bd0 <__sfp+0x1c>
 8008c1c:	2104      	movs	r1, #4
 8008c1e:	4638      	mov	r0, r7
 8008c20:	f7ff ff62 	bl	8008ae8 <__sfmoreglue>
 8008c24:	4604      	mov	r4, r0
 8008c26:	6030      	str	r0, [r6, #0]
 8008c28:	2800      	cmp	r0, #0
 8008c2a:	d1d5      	bne.n	8008bd8 <__sfp+0x24>
 8008c2c:	f7ff ff78 	bl	8008b20 <__sfp_lock_release>
 8008c30:	230c      	movs	r3, #12
 8008c32:	603b      	str	r3, [r7, #0]
 8008c34:	e7ee      	b.n	8008c14 <__sfp+0x60>
 8008c36:	bf00      	nop
 8008c38:	08009a14 	.word	0x08009a14
 8008c3c:	ffff0001 	.word	0xffff0001

08008c40 <_fwalk_reent>:
 8008c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008c44:	4606      	mov	r6, r0
 8008c46:	4688      	mov	r8, r1
 8008c48:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008c4c:	2700      	movs	r7, #0
 8008c4e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c52:	f1b9 0901 	subs.w	r9, r9, #1
 8008c56:	d505      	bpl.n	8008c64 <_fwalk_reent+0x24>
 8008c58:	6824      	ldr	r4, [r4, #0]
 8008c5a:	2c00      	cmp	r4, #0
 8008c5c:	d1f7      	bne.n	8008c4e <_fwalk_reent+0xe>
 8008c5e:	4638      	mov	r0, r7
 8008c60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c64:	89ab      	ldrh	r3, [r5, #12]
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d907      	bls.n	8008c7a <_fwalk_reent+0x3a>
 8008c6a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c6e:	3301      	adds	r3, #1
 8008c70:	d003      	beq.n	8008c7a <_fwalk_reent+0x3a>
 8008c72:	4629      	mov	r1, r5
 8008c74:	4630      	mov	r0, r6
 8008c76:	47c0      	blx	r8
 8008c78:	4307      	orrs	r7, r0
 8008c7a:	3568      	adds	r5, #104	; 0x68
 8008c7c:	e7e9      	b.n	8008c52 <_fwalk_reent+0x12>

08008c7e <__retarget_lock_init_recursive>:
 8008c7e:	4770      	bx	lr

08008c80 <__retarget_lock_acquire_recursive>:
 8008c80:	4770      	bx	lr

08008c82 <__retarget_lock_release_recursive>:
 8008c82:	4770      	bx	lr

08008c84 <sbrk_aligned>:
 8008c84:	b570      	push	{r4, r5, r6, lr}
 8008c86:	4e0e      	ldr	r6, [pc, #56]	; (8008cc0 <sbrk_aligned+0x3c>)
 8008c88:	460c      	mov	r4, r1
 8008c8a:	6831      	ldr	r1, [r6, #0]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	b911      	cbnz	r1, 8008c96 <sbrk_aligned+0x12>
 8008c90:	f000 fb7a 	bl	8009388 <_sbrk_r>
 8008c94:	6030      	str	r0, [r6, #0]
 8008c96:	4621      	mov	r1, r4
 8008c98:	4628      	mov	r0, r5
 8008c9a:	f000 fb75 	bl	8009388 <_sbrk_r>
 8008c9e:	1c43      	adds	r3, r0, #1
 8008ca0:	d00a      	beq.n	8008cb8 <sbrk_aligned+0x34>
 8008ca2:	1cc4      	adds	r4, r0, #3
 8008ca4:	f024 0403 	bic.w	r4, r4, #3
 8008ca8:	42a0      	cmp	r0, r4
 8008caa:	d007      	beq.n	8008cbc <sbrk_aligned+0x38>
 8008cac:	1a21      	subs	r1, r4, r0
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f000 fb6a 	bl	8009388 <_sbrk_r>
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d101      	bne.n	8008cbc <sbrk_aligned+0x38>
 8008cb8:	f04f 34ff 	mov.w	r4, #4294967295
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	bd70      	pop	{r4, r5, r6, pc}
 8008cc0:	20000458 	.word	0x20000458

08008cc4 <_malloc_r>:
 8008cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cc8:	1ccd      	adds	r5, r1, #3
 8008cca:	f025 0503 	bic.w	r5, r5, #3
 8008cce:	3508      	adds	r5, #8
 8008cd0:	2d0c      	cmp	r5, #12
 8008cd2:	bf38      	it	cc
 8008cd4:	250c      	movcc	r5, #12
 8008cd6:	2d00      	cmp	r5, #0
 8008cd8:	4607      	mov	r7, r0
 8008cda:	db01      	blt.n	8008ce0 <_malloc_r+0x1c>
 8008cdc:	42a9      	cmp	r1, r5
 8008cde:	d905      	bls.n	8008cec <_malloc_r+0x28>
 8008ce0:	230c      	movs	r3, #12
 8008ce2:	603b      	str	r3, [r7, #0]
 8008ce4:	2600      	movs	r6, #0
 8008ce6:	4630      	mov	r0, r6
 8008ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cec:	4e2e      	ldr	r6, [pc, #184]	; (8008da8 <_malloc_r+0xe4>)
 8008cee:	f000 fdbb 	bl	8009868 <__malloc_lock>
 8008cf2:	6833      	ldr	r3, [r6, #0]
 8008cf4:	461c      	mov	r4, r3
 8008cf6:	bb34      	cbnz	r4, 8008d46 <_malloc_r+0x82>
 8008cf8:	4629      	mov	r1, r5
 8008cfa:	4638      	mov	r0, r7
 8008cfc:	f7ff ffc2 	bl	8008c84 <sbrk_aligned>
 8008d00:	1c43      	adds	r3, r0, #1
 8008d02:	4604      	mov	r4, r0
 8008d04:	d14d      	bne.n	8008da2 <_malloc_r+0xde>
 8008d06:	6834      	ldr	r4, [r6, #0]
 8008d08:	4626      	mov	r6, r4
 8008d0a:	2e00      	cmp	r6, #0
 8008d0c:	d140      	bne.n	8008d90 <_malloc_r+0xcc>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	4631      	mov	r1, r6
 8008d12:	4638      	mov	r0, r7
 8008d14:	eb04 0803 	add.w	r8, r4, r3
 8008d18:	f000 fb36 	bl	8009388 <_sbrk_r>
 8008d1c:	4580      	cmp	r8, r0
 8008d1e:	d13a      	bne.n	8008d96 <_malloc_r+0xd2>
 8008d20:	6821      	ldr	r1, [r4, #0]
 8008d22:	3503      	adds	r5, #3
 8008d24:	1a6d      	subs	r5, r5, r1
 8008d26:	f025 0503 	bic.w	r5, r5, #3
 8008d2a:	3508      	adds	r5, #8
 8008d2c:	2d0c      	cmp	r5, #12
 8008d2e:	bf38      	it	cc
 8008d30:	250c      	movcc	r5, #12
 8008d32:	4629      	mov	r1, r5
 8008d34:	4638      	mov	r0, r7
 8008d36:	f7ff ffa5 	bl	8008c84 <sbrk_aligned>
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	d02b      	beq.n	8008d96 <_malloc_r+0xd2>
 8008d3e:	6823      	ldr	r3, [r4, #0]
 8008d40:	442b      	add	r3, r5
 8008d42:	6023      	str	r3, [r4, #0]
 8008d44:	e00e      	b.n	8008d64 <_malloc_r+0xa0>
 8008d46:	6822      	ldr	r2, [r4, #0]
 8008d48:	1b52      	subs	r2, r2, r5
 8008d4a:	d41e      	bmi.n	8008d8a <_malloc_r+0xc6>
 8008d4c:	2a0b      	cmp	r2, #11
 8008d4e:	d916      	bls.n	8008d7e <_malloc_r+0xba>
 8008d50:	1961      	adds	r1, r4, r5
 8008d52:	42a3      	cmp	r3, r4
 8008d54:	6025      	str	r5, [r4, #0]
 8008d56:	bf18      	it	ne
 8008d58:	6059      	strne	r1, [r3, #4]
 8008d5a:	6863      	ldr	r3, [r4, #4]
 8008d5c:	bf08      	it	eq
 8008d5e:	6031      	streq	r1, [r6, #0]
 8008d60:	5162      	str	r2, [r4, r5]
 8008d62:	604b      	str	r3, [r1, #4]
 8008d64:	4638      	mov	r0, r7
 8008d66:	f104 060b 	add.w	r6, r4, #11
 8008d6a:	f000 fd83 	bl	8009874 <__malloc_unlock>
 8008d6e:	f026 0607 	bic.w	r6, r6, #7
 8008d72:	1d23      	adds	r3, r4, #4
 8008d74:	1af2      	subs	r2, r6, r3
 8008d76:	d0b6      	beq.n	8008ce6 <_malloc_r+0x22>
 8008d78:	1b9b      	subs	r3, r3, r6
 8008d7a:	50a3      	str	r3, [r4, r2]
 8008d7c:	e7b3      	b.n	8008ce6 <_malloc_r+0x22>
 8008d7e:	6862      	ldr	r2, [r4, #4]
 8008d80:	42a3      	cmp	r3, r4
 8008d82:	bf0c      	ite	eq
 8008d84:	6032      	streq	r2, [r6, #0]
 8008d86:	605a      	strne	r2, [r3, #4]
 8008d88:	e7ec      	b.n	8008d64 <_malloc_r+0xa0>
 8008d8a:	4623      	mov	r3, r4
 8008d8c:	6864      	ldr	r4, [r4, #4]
 8008d8e:	e7b2      	b.n	8008cf6 <_malloc_r+0x32>
 8008d90:	4634      	mov	r4, r6
 8008d92:	6876      	ldr	r6, [r6, #4]
 8008d94:	e7b9      	b.n	8008d0a <_malloc_r+0x46>
 8008d96:	230c      	movs	r3, #12
 8008d98:	603b      	str	r3, [r7, #0]
 8008d9a:	4638      	mov	r0, r7
 8008d9c:	f000 fd6a 	bl	8009874 <__malloc_unlock>
 8008da0:	e7a1      	b.n	8008ce6 <_malloc_r+0x22>
 8008da2:	6025      	str	r5, [r4, #0]
 8008da4:	e7de      	b.n	8008d64 <_malloc_r+0xa0>
 8008da6:	bf00      	nop
 8008da8:	20000454 	.word	0x20000454

08008dac <__sfputc_r>:
 8008dac:	6893      	ldr	r3, [r2, #8]
 8008dae:	3b01      	subs	r3, #1
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	b410      	push	{r4}
 8008db4:	6093      	str	r3, [r2, #8]
 8008db6:	da08      	bge.n	8008dca <__sfputc_r+0x1e>
 8008db8:	6994      	ldr	r4, [r2, #24]
 8008dba:	42a3      	cmp	r3, r4
 8008dbc:	db01      	blt.n	8008dc2 <__sfputc_r+0x16>
 8008dbe:	290a      	cmp	r1, #10
 8008dc0:	d103      	bne.n	8008dca <__sfputc_r+0x1e>
 8008dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dc6:	f000 bb33 	b.w	8009430 <__swbuf_r>
 8008dca:	6813      	ldr	r3, [r2, #0]
 8008dcc:	1c58      	adds	r0, r3, #1
 8008dce:	6010      	str	r0, [r2, #0]
 8008dd0:	7019      	strb	r1, [r3, #0]
 8008dd2:	4608      	mov	r0, r1
 8008dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <__sfputs_r>:
 8008dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ddc:	4606      	mov	r6, r0
 8008dde:	460f      	mov	r7, r1
 8008de0:	4614      	mov	r4, r2
 8008de2:	18d5      	adds	r5, r2, r3
 8008de4:	42ac      	cmp	r4, r5
 8008de6:	d101      	bne.n	8008dec <__sfputs_r+0x12>
 8008de8:	2000      	movs	r0, #0
 8008dea:	e007      	b.n	8008dfc <__sfputs_r+0x22>
 8008dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008df0:	463a      	mov	r2, r7
 8008df2:	4630      	mov	r0, r6
 8008df4:	f7ff ffda 	bl	8008dac <__sfputc_r>
 8008df8:	1c43      	adds	r3, r0, #1
 8008dfa:	d1f3      	bne.n	8008de4 <__sfputs_r+0xa>
 8008dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008e00 <_vfiprintf_r>:
 8008e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e04:	460d      	mov	r5, r1
 8008e06:	b09d      	sub	sp, #116	; 0x74
 8008e08:	4614      	mov	r4, r2
 8008e0a:	4698      	mov	r8, r3
 8008e0c:	4606      	mov	r6, r0
 8008e0e:	b118      	cbz	r0, 8008e18 <_vfiprintf_r+0x18>
 8008e10:	6983      	ldr	r3, [r0, #24]
 8008e12:	b90b      	cbnz	r3, 8008e18 <_vfiprintf_r+0x18>
 8008e14:	f7ff fe96 	bl	8008b44 <__sinit>
 8008e18:	4b89      	ldr	r3, [pc, #548]	; (8009040 <_vfiprintf_r+0x240>)
 8008e1a:	429d      	cmp	r5, r3
 8008e1c:	d11b      	bne.n	8008e56 <_vfiprintf_r+0x56>
 8008e1e:	6875      	ldr	r5, [r6, #4]
 8008e20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e22:	07d9      	lsls	r1, r3, #31
 8008e24:	d405      	bmi.n	8008e32 <_vfiprintf_r+0x32>
 8008e26:	89ab      	ldrh	r3, [r5, #12]
 8008e28:	059a      	lsls	r2, r3, #22
 8008e2a:	d402      	bmi.n	8008e32 <_vfiprintf_r+0x32>
 8008e2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e2e:	f7ff ff27 	bl	8008c80 <__retarget_lock_acquire_recursive>
 8008e32:	89ab      	ldrh	r3, [r5, #12]
 8008e34:	071b      	lsls	r3, r3, #28
 8008e36:	d501      	bpl.n	8008e3c <_vfiprintf_r+0x3c>
 8008e38:	692b      	ldr	r3, [r5, #16]
 8008e3a:	b9eb      	cbnz	r3, 8008e78 <_vfiprintf_r+0x78>
 8008e3c:	4629      	mov	r1, r5
 8008e3e:	4630      	mov	r0, r6
 8008e40:	f000 fb5a 	bl	80094f8 <__swsetup_r>
 8008e44:	b1c0      	cbz	r0, 8008e78 <_vfiprintf_r+0x78>
 8008e46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008e48:	07dc      	lsls	r4, r3, #31
 8008e4a:	d50e      	bpl.n	8008e6a <_vfiprintf_r+0x6a>
 8008e4c:	f04f 30ff 	mov.w	r0, #4294967295
 8008e50:	b01d      	add	sp, #116	; 0x74
 8008e52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e56:	4b7b      	ldr	r3, [pc, #492]	; (8009044 <_vfiprintf_r+0x244>)
 8008e58:	429d      	cmp	r5, r3
 8008e5a:	d101      	bne.n	8008e60 <_vfiprintf_r+0x60>
 8008e5c:	68b5      	ldr	r5, [r6, #8]
 8008e5e:	e7df      	b.n	8008e20 <_vfiprintf_r+0x20>
 8008e60:	4b79      	ldr	r3, [pc, #484]	; (8009048 <_vfiprintf_r+0x248>)
 8008e62:	429d      	cmp	r5, r3
 8008e64:	bf08      	it	eq
 8008e66:	68f5      	ldreq	r5, [r6, #12]
 8008e68:	e7da      	b.n	8008e20 <_vfiprintf_r+0x20>
 8008e6a:	89ab      	ldrh	r3, [r5, #12]
 8008e6c:	0598      	lsls	r0, r3, #22
 8008e6e:	d4ed      	bmi.n	8008e4c <_vfiprintf_r+0x4c>
 8008e70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008e72:	f7ff ff06 	bl	8008c82 <__retarget_lock_release_recursive>
 8008e76:	e7e9      	b.n	8008e4c <_vfiprintf_r+0x4c>
 8008e78:	2300      	movs	r3, #0
 8008e7a:	9309      	str	r3, [sp, #36]	; 0x24
 8008e7c:	2320      	movs	r3, #32
 8008e7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008e82:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e86:	2330      	movs	r3, #48	; 0x30
 8008e88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800904c <_vfiprintf_r+0x24c>
 8008e8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008e90:	f04f 0901 	mov.w	r9, #1
 8008e94:	4623      	mov	r3, r4
 8008e96:	469a      	mov	sl, r3
 8008e98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e9c:	b10a      	cbz	r2, 8008ea2 <_vfiprintf_r+0xa2>
 8008e9e:	2a25      	cmp	r2, #37	; 0x25
 8008ea0:	d1f9      	bne.n	8008e96 <_vfiprintf_r+0x96>
 8008ea2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ea6:	d00b      	beq.n	8008ec0 <_vfiprintf_r+0xc0>
 8008ea8:	465b      	mov	r3, fp
 8008eaa:	4622      	mov	r2, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff93 	bl	8008dda <__sfputs_r>
 8008eb4:	3001      	adds	r0, #1
 8008eb6:	f000 80aa 	beq.w	800900e <_vfiprintf_r+0x20e>
 8008eba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008ebc:	445a      	add	r2, fp
 8008ebe:	9209      	str	r2, [sp, #36]	; 0x24
 8008ec0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	f000 80a2 	beq.w	800900e <_vfiprintf_r+0x20e>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ed4:	f10a 0a01 	add.w	sl, sl, #1
 8008ed8:	9304      	str	r3, [sp, #16]
 8008eda:	9307      	str	r3, [sp, #28]
 8008edc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008ee0:	931a      	str	r3, [sp, #104]	; 0x68
 8008ee2:	4654      	mov	r4, sl
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008eea:	4858      	ldr	r0, [pc, #352]	; (800904c <_vfiprintf_r+0x24c>)
 8008eec:	f7f7 f990 	bl	8000210 <memchr>
 8008ef0:	9a04      	ldr	r2, [sp, #16]
 8008ef2:	b9d8      	cbnz	r0, 8008f2c <_vfiprintf_r+0x12c>
 8008ef4:	06d1      	lsls	r1, r2, #27
 8008ef6:	bf44      	itt	mi
 8008ef8:	2320      	movmi	r3, #32
 8008efa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008efe:	0713      	lsls	r3, r2, #28
 8008f00:	bf44      	itt	mi
 8008f02:	232b      	movmi	r3, #43	; 0x2b
 8008f04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008f08:	f89a 3000 	ldrb.w	r3, [sl]
 8008f0c:	2b2a      	cmp	r3, #42	; 0x2a
 8008f0e:	d015      	beq.n	8008f3c <_vfiprintf_r+0x13c>
 8008f10:	9a07      	ldr	r2, [sp, #28]
 8008f12:	4654      	mov	r4, sl
 8008f14:	2000      	movs	r0, #0
 8008f16:	f04f 0c0a 	mov.w	ip, #10
 8008f1a:	4621      	mov	r1, r4
 8008f1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008f20:	3b30      	subs	r3, #48	; 0x30
 8008f22:	2b09      	cmp	r3, #9
 8008f24:	d94e      	bls.n	8008fc4 <_vfiprintf_r+0x1c4>
 8008f26:	b1b0      	cbz	r0, 8008f56 <_vfiprintf_r+0x156>
 8008f28:	9207      	str	r2, [sp, #28]
 8008f2a:	e014      	b.n	8008f56 <_vfiprintf_r+0x156>
 8008f2c:	eba0 0308 	sub.w	r3, r0, r8
 8008f30:	fa09 f303 	lsl.w	r3, r9, r3
 8008f34:	4313      	orrs	r3, r2
 8008f36:	9304      	str	r3, [sp, #16]
 8008f38:	46a2      	mov	sl, r4
 8008f3a:	e7d2      	b.n	8008ee2 <_vfiprintf_r+0xe2>
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	1d19      	adds	r1, r3, #4
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	9103      	str	r1, [sp, #12]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	bfbb      	ittet	lt
 8008f48:	425b      	neglt	r3, r3
 8008f4a:	f042 0202 	orrlt.w	r2, r2, #2
 8008f4e:	9307      	strge	r3, [sp, #28]
 8008f50:	9307      	strlt	r3, [sp, #28]
 8008f52:	bfb8      	it	lt
 8008f54:	9204      	strlt	r2, [sp, #16]
 8008f56:	7823      	ldrb	r3, [r4, #0]
 8008f58:	2b2e      	cmp	r3, #46	; 0x2e
 8008f5a:	d10c      	bne.n	8008f76 <_vfiprintf_r+0x176>
 8008f5c:	7863      	ldrb	r3, [r4, #1]
 8008f5e:	2b2a      	cmp	r3, #42	; 0x2a
 8008f60:	d135      	bne.n	8008fce <_vfiprintf_r+0x1ce>
 8008f62:	9b03      	ldr	r3, [sp, #12]
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	9203      	str	r2, [sp, #12]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	bfb8      	it	lt
 8008f6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008f72:	3402      	adds	r4, #2
 8008f74:	9305      	str	r3, [sp, #20]
 8008f76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800905c <_vfiprintf_r+0x25c>
 8008f7a:	7821      	ldrb	r1, [r4, #0]
 8008f7c:	2203      	movs	r2, #3
 8008f7e:	4650      	mov	r0, sl
 8008f80:	f7f7 f946 	bl	8000210 <memchr>
 8008f84:	b140      	cbz	r0, 8008f98 <_vfiprintf_r+0x198>
 8008f86:	2340      	movs	r3, #64	; 0x40
 8008f88:	eba0 000a 	sub.w	r0, r0, sl
 8008f8c:	fa03 f000 	lsl.w	r0, r3, r0
 8008f90:	9b04      	ldr	r3, [sp, #16]
 8008f92:	4303      	orrs	r3, r0
 8008f94:	3401      	adds	r4, #1
 8008f96:	9304      	str	r3, [sp, #16]
 8008f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f9c:	482c      	ldr	r0, [pc, #176]	; (8009050 <_vfiprintf_r+0x250>)
 8008f9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008fa2:	2206      	movs	r2, #6
 8008fa4:	f7f7 f934 	bl	8000210 <memchr>
 8008fa8:	2800      	cmp	r0, #0
 8008faa:	d03f      	beq.n	800902c <_vfiprintf_r+0x22c>
 8008fac:	4b29      	ldr	r3, [pc, #164]	; (8009054 <_vfiprintf_r+0x254>)
 8008fae:	bb1b      	cbnz	r3, 8008ff8 <_vfiprintf_r+0x1f8>
 8008fb0:	9b03      	ldr	r3, [sp, #12]
 8008fb2:	3307      	adds	r3, #7
 8008fb4:	f023 0307 	bic.w	r3, r3, #7
 8008fb8:	3308      	adds	r3, #8
 8008fba:	9303      	str	r3, [sp, #12]
 8008fbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008fbe:	443b      	add	r3, r7
 8008fc0:	9309      	str	r3, [sp, #36]	; 0x24
 8008fc2:	e767      	b.n	8008e94 <_vfiprintf_r+0x94>
 8008fc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8008fc8:	460c      	mov	r4, r1
 8008fca:	2001      	movs	r0, #1
 8008fcc:	e7a5      	b.n	8008f1a <_vfiprintf_r+0x11a>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	3401      	adds	r4, #1
 8008fd2:	9305      	str	r3, [sp, #20]
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	f04f 0c0a 	mov.w	ip, #10
 8008fda:	4620      	mov	r0, r4
 8008fdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008fe0:	3a30      	subs	r2, #48	; 0x30
 8008fe2:	2a09      	cmp	r2, #9
 8008fe4:	d903      	bls.n	8008fee <_vfiprintf_r+0x1ee>
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d0c5      	beq.n	8008f76 <_vfiprintf_r+0x176>
 8008fea:	9105      	str	r1, [sp, #20]
 8008fec:	e7c3      	b.n	8008f76 <_vfiprintf_r+0x176>
 8008fee:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ff2:	4604      	mov	r4, r0
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e7f0      	b.n	8008fda <_vfiprintf_r+0x1da>
 8008ff8:	ab03      	add	r3, sp, #12
 8008ffa:	9300      	str	r3, [sp, #0]
 8008ffc:	462a      	mov	r2, r5
 8008ffe:	4b16      	ldr	r3, [pc, #88]	; (8009058 <_vfiprintf_r+0x258>)
 8009000:	a904      	add	r1, sp, #16
 8009002:	4630      	mov	r0, r6
 8009004:	f3af 8000 	nop.w
 8009008:	4607      	mov	r7, r0
 800900a:	1c78      	adds	r0, r7, #1
 800900c:	d1d6      	bne.n	8008fbc <_vfiprintf_r+0x1bc>
 800900e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009010:	07d9      	lsls	r1, r3, #31
 8009012:	d405      	bmi.n	8009020 <_vfiprintf_r+0x220>
 8009014:	89ab      	ldrh	r3, [r5, #12]
 8009016:	059a      	lsls	r2, r3, #22
 8009018:	d402      	bmi.n	8009020 <_vfiprintf_r+0x220>
 800901a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800901c:	f7ff fe31 	bl	8008c82 <__retarget_lock_release_recursive>
 8009020:	89ab      	ldrh	r3, [r5, #12]
 8009022:	065b      	lsls	r3, r3, #25
 8009024:	f53f af12 	bmi.w	8008e4c <_vfiprintf_r+0x4c>
 8009028:	9809      	ldr	r0, [sp, #36]	; 0x24
 800902a:	e711      	b.n	8008e50 <_vfiprintf_r+0x50>
 800902c:	ab03      	add	r3, sp, #12
 800902e:	9300      	str	r3, [sp, #0]
 8009030:	462a      	mov	r2, r5
 8009032:	4b09      	ldr	r3, [pc, #36]	; (8009058 <_vfiprintf_r+0x258>)
 8009034:	a904      	add	r1, sp, #16
 8009036:	4630      	mov	r0, r6
 8009038:	f000 f880 	bl	800913c <_printf_i>
 800903c:	e7e4      	b.n	8009008 <_vfiprintf_r+0x208>
 800903e:	bf00      	nop
 8009040:	08009a38 	.word	0x08009a38
 8009044:	08009a58 	.word	0x08009a58
 8009048:	08009a18 	.word	0x08009a18
 800904c:	08009a78 	.word	0x08009a78
 8009050:	08009a82 	.word	0x08009a82
 8009054:	00000000 	.word	0x00000000
 8009058:	08008ddb 	.word	0x08008ddb
 800905c:	08009a7e 	.word	0x08009a7e

08009060 <_printf_common>:
 8009060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009064:	4616      	mov	r6, r2
 8009066:	4699      	mov	r9, r3
 8009068:	688a      	ldr	r2, [r1, #8]
 800906a:	690b      	ldr	r3, [r1, #16]
 800906c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009070:	4293      	cmp	r3, r2
 8009072:	bfb8      	it	lt
 8009074:	4613      	movlt	r3, r2
 8009076:	6033      	str	r3, [r6, #0]
 8009078:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800907c:	4607      	mov	r7, r0
 800907e:	460c      	mov	r4, r1
 8009080:	b10a      	cbz	r2, 8009086 <_printf_common+0x26>
 8009082:	3301      	adds	r3, #1
 8009084:	6033      	str	r3, [r6, #0]
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	0699      	lsls	r1, r3, #26
 800908a:	bf42      	ittt	mi
 800908c:	6833      	ldrmi	r3, [r6, #0]
 800908e:	3302      	addmi	r3, #2
 8009090:	6033      	strmi	r3, [r6, #0]
 8009092:	6825      	ldr	r5, [r4, #0]
 8009094:	f015 0506 	ands.w	r5, r5, #6
 8009098:	d106      	bne.n	80090a8 <_printf_common+0x48>
 800909a:	f104 0a19 	add.w	sl, r4, #25
 800909e:	68e3      	ldr	r3, [r4, #12]
 80090a0:	6832      	ldr	r2, [r6, #0]
 80090a2:	1a9b      	subs	r3, r3, r2
 80090a4:	42ab      	cmp	r3, r5
 80090a6:	dc26      	bgt.n	80090f6 <_printf_common+0x96>
 80090a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090ac:	1e13      	subs	r3, r2, #0
 80090ae:	6822      	ldr	r2, [r4, #0]
 80090b0:	bf18      	it	ne
 80090b2:	2301      	movne	r3, #1
 80090b4:	0692      	lsls	r2, r2, #26
 80090b6:	d42b      	bmi.n	8009110 <_printf_common+0xb0>
 80090b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80090bc:	4649      	mov	r1, r9
 80090be:	4638      	mov	r0, r7
 80090c0:	47c0      	blx	r8
 80090c2:	3001      	adds	r0, #1
 80090c4:	d01e      	beq.n	8009104 <_printf_common+0xa4>
 80090c6:	6823      	ldr	r3, [r4, #0]
 80090c8:	68e5      	ldr	r5, [r4, #12]
 80090ca:	6832      	ldr	r2, [r6, #0]
 80090cc:	f003 0306 	and.w	r3, r3, #6
 80090d0:	2b04      	cmp	r3, #4
 80090d2:	bf08      	it	eq
 80090d4:	1aad      	subeq	r5, r5, r2
 80090d6:	68a3      	ldr	r3, [r4, #8]
 80090d8:	6922      	ldr	r2, [r4, #16]
 80090da:	bf0c      	ite	eq
 80090dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090e0:	2500      	movne	r5, #0
 80090e2:	4293      	cmp	r3, r2
 80090e4:	bfc4      	itt	gt
 80090e6:	1a9b      	subgt	r3, r3, r2
 80090e8:	18ed      	addgt	r5, r5, r3
 80090ea:	2600      	movs	r6, #0
 80090ec:	341a      	adds	r4, #26
 80090ee:	42b5      	cmp	r5, r6
 80090f0:	d11a      	bne.n	8009128 <_printf_common+0xc8>
 80090f2:	2000      	movs	r0, #0
 80090f4:	e008      	b.n	8009108 <_printf_common+0xa8>
 80090f6:	2301      	movs	r3, #1
 80090f8:	4652      	mov	r2, sl
 80090fa:	4649      	mov	r1, r9
 80090fc:	4638      	mov	r0, r7
 80090fe:	47c0      	blx	r8
 8009100:	3001      	adds	r0, #1
 8009102:	d103      	bne.n	800910c <_printf_common+0xac>
 8009104:	f04f 30ff 	mov.w	r0, #4294967295
 8009108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910c:	3501      	adds	r5, #1
 800910e:	e7c6      	b.n	800909e <_printf_common+0x3e>
 8009110:	18e1      	adds	r1, r4, r3
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	2030      	movs	r0, #48	; 0x30
 8009116:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800911a:	4422      	add	r2, r4
 800911c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009120:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009124:	3302      	adds	r3, #2
 8009126:	e7c7      	b.n	80090b8 <_printf_common+0x58>
 8009128:	2301      	movs	r3, #1
 800912a:	4622      	mov	r2, r4
 800912c:	4649      	mov	r1, r9
 800912e:	4638      	mov	r0, r7
 8009130:	47c0      	blx	r8
 8009132:	3001      	adds	r0, #1
 8009134:	d0e6      	beq.n	8009104 <_printf_common+0xa4>
 8009136:	3601      	adds	r6, #1
 8009138:	e7d9      	b.n	80090ee <_printf_common+0x8e>
	...

0800913c <_printf_i>:
 800913c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009140:	7e0f      	ldrb	r7, [r1, #24]
 8009142:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009144:	2f78      	cmp	r7, #120	; 0x78
 8009146:	4691      	mov	r9, r2
 8009148:	4680      	mov	r8, r0
 800914a:	460c      	mov	r4, r1
 800914c:	469a      	mov	sl, r3
 800914e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009152:	d807      	bhi.n	8009164 <_printf_i+0x28>
 8009154:	2f62      	cmp	r7, #98	; 0x62
 8009156:	d80a      	bhi.n	800916e <_printf_i+0x32>
 8009158:	2f00      	cmp	r7, #0
 800915a:	f000 80d8 	beq.w	800930e <_printf_i+0x1d2>
 800915e:	2f58      	cmp	r7, #88	; 0x58
 8009160:	f000 80a3 	beq.w	80092aa <_printf_i+0x16e>
 8009164:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009168:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800916c:	e03a      	b.n	80091e4 <_printf_i+0xa8>
 800916e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009172:	2b15      	cmp	r3, #21
 8009174:	d8f6      	bhi.n	8009164 <_printf_i+0x28>
 8009176:	a101      	add	r1, pc, #4	; (adr r1, 800917c <_printf_i+0x40>)
 8009178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800917c:	080091d5 	.word	0x080091d5
 8009180:	080091e9 	.word	0x080091e9
 8009184:	08009165 	.word	0x08009165
 8009188:	08009165 	.word	0x08009165
 800918c:	08009165 	.word	0x08009165
 8009190:	08009165 	.word	0x08009165
 8009194:	080091e9 	.word	0x080091e9
 8009198:	08009165 	.word	0x08009165
 800919c:	08009165 	.word	0x08009165
 80091a0:	08009165 	.word	0x08009165
 80091a4:	08009165 	.word	0x08009165
 80091a8:	080092f5 	.word	0x080092f5
 80091ac:	08009219 	.word	0x08009219
 80091b0:	080092d7 	.word	0x080092d7
 80091b4:	08009165 	.word	0x08009165
 80091b8:	08009165 	.word	0x08009165
 80091bc:	08009317 	.word	0x08009317
 80091c0:	08009165 	.word	0x08009165
 80091c4:	08009219 	.word	0x08009219
 80091c8:	08009165 	.word	0x08009165
 80091cc:	08009165 	.word	0x08009165
 80091d0:	080092df 	.word	0x080092df
 80091d4:	682b      	ldr	r3, [r5, #0]
 80091d6:	1d1a      	adds	r2, r3, #4
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	602a      	str	r2, [r5, #0]
 80091dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80091e4:	2301      	movs	r3, #1
 80091e6:	e0a3      	b.n	8009330 <_printf_i+0x1f4>
 80091e8:	6820      	ldr	r0, [r4, #0]
 80091ea:	6829      	ldr	r1, [r5, #0]
 80091ec:	0606      	lsls	r6, r0, #24
 80091ee:	f101 0304 	add.w	r3, r1, #4
 80091f2:	d50a      	bpl.n	800920a <_printf_i+0xce>
 80091f4:	680e      	ldr	r6, [r1, #0]
 80091f6:	602b      	str	r3, [r5, #0]
 80091f8:	2e00      	cmp	r6, #0
 80091fa:	da03      	bge.n	8009204 <_printf_i+0xc8>
 80091fc:	232d      	movs	r3, #45	; 0x2d
 80091fe:	4276      	negs	r6, r6
 8009200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009204:	485e      	ldr	r0, [pc, #376]	; (8009380 <_printf_i+0x244>)
 8009206:	230a      	movs	r3, #10
 8009208:	e019      	b.n	800923e <_printf_i+0x102>
 800920a:	680e      	ldr	r6, [r1, #0]
 800920c:	602b      	str	r3, [r5, #0]
 800920e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009212:	bf18      	it	ne
 8009214:	b236      	sxthne	r6, r6
 8009216:	e7ef      	b.n	80091f8 <_printf_i+0xbc>
 8009218:	682b      	ldr	r3, [r5, #0]
 800921a:	6820      	ldr	r0, [r4, #0]
 800921c:	1d19      	adds	r1, r3, #4
 800921e:	6029      	str	r1, [r5, #0]
 8009220:	0601      	lsls	r1, r0, #24
 8009222:	d501      	bpl.n	8009228 <_printf_i+0xec>
 8009224:	681e      	ldr	r6, [r3, #0]
 8009226:	e002      	b.n	800922e <_printf_i+0xf2>
 8009228:	0646      	lsls	r6, r0, #25
 800922a:	d5fb      	bpl.n	8009224 <_printf_i+0xe8>
 800922c:	881e      	ldrh	r6, [r3, #0]
 800922e:	4854      	ldr	r0, [pc, #336]	; (8009380 <_printf_i+0x244>)
 8009230:	2f6f      	cmp	r7, #111	; 0x6f
 8009232:	bf0c      	ite	eq
 8009234:	2308      	moveq	r3, #8
 8009236:	230a      	movne	r3, #10
 8009238:	2100      	movs	r1, #0
 800923a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800923e:	6865      	ldr	r5, [r4, #4]
 8009240:	60a5      	str	r5, [r4, #8]
 8009242:	2d00      	cmp	r5, #0
 8009244:	bfa2      	ittt	ge
 8009246:	6821      	ldrge	r1, [r4, #0]
 8009248:	f021 0104 	bicge.w	r1, r1, #4
 800924c:	6021      	strge	r1, [r4, #0]
 800924e:	b90e      	cbnz	r6, 8009254 <_printf_i+0x118>
 8009250:	2d00      	cmp	r5, #0
 8009252:	d04d      	beq.n	80092f0 <_printf_i+0x1b4>
 8009254:	4615      	mov	r5, r2
 8009256:	fbb6 f1f3 	udiv	r1, r6, r3
 800925a:	fb03 6711 	mls	r7, r3, r1, r6
 800925e:	5dc7      	ldrb	r7, [r0, r7]
 8009260:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009264:	4637      	mov	r7, r6
 8009266:	42bb      	cmp	r3, r7
 8009268:	460e      	mov	r6, r1
 800926a:	d9f4      	bls.n	8009256 <_printf_i+0x11a>
 800926c:	2b08      	cmp	r3, #8
 800926e:	d10b      	bne.n	8009288 <_printf_i+0x14c>
 8009270:	6823      	ldr	r3, [r4, #0]
 8009272:	07de      	lsls	r6, r3, #31
 8009274:	d508      	bpl.n	8009288 <_printf_i+0x14c>
 8009276:	6923      	ldr	r3, [r4, #16]
 8009278:	6861      	ldr	r1, [r4, #4]
 800927a:	4299      	cmp	r1, r3
 800927c:	bfde      	ittt	le
 800927e:	2330      	movle	r3, #48	; 0x30
 8009280:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009284:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009288:	1b52      	subs	r2, r2, r5
 800928a:	6122      	str	r2, [r4, #16]
 800928c:	f8cd a000 	str.w	sl, [sp]
 8009290:	464b      	mov	r3, r9
 8009292:	aa03      	add	r2, sp, #12
 8009294:	4621      	mov	r1, r4
 8009296:	4640      	mov	r0, r8
 8009298:	f7ff fee2 	bl	8009060 <_printf_common>
 800929c:	3001      	adds	r0, #1
 800929e:	d14c      	bne.n	800933a <_printf_i+0x1fe>
 80092a0:	f04f 30ff 	mov.w	r0, #4294967295
 80092a4:	b004      	add	sp, #16
 80092a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092aa:	4835      	ldr	r0, [pc, #212]	; (8009380 <_printf_i+0x244>)
 80092ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092b0:	6829      	ldr	r1, [r5, #0]
 80092b2:	6823      	ldr	r3, [r4, #0]
 80092b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80092b8:	6029      	str	r1, [r5, #0]
 80092ba:	061d      	lsls	r5, r3, #24
 80092bc:	d514      	bpl.n	80092e8 <_printf_i+0x1ac>
 80092be:	07df      	lsls	r7, r3, #31
 80092c0:	bf44      	itt	mi
 80092c2:	f043 0320 	orrmi.w	r3, r3, #32
 80092c6:	6023      	strmi	r3, [r4, #0]
 80092c8:	b91e      	cbnz	r6, 80092d2 <_printf_i+0x196>
 80092ca:	6823      	ldr	r3, [r4, #0]
 80092cc:	f023 0320 	bic.w	r3, r3, #32
 80092d0:	6023      	str	r3, [r4, #0]
 80092d2:	2310      	movs	r3, #16
 80092d4:	e7b0      	b.n	8009238 <_printf_i+0xfc>
 80092d6:	6823      	ldr	r3, [r4, #0]
 80092d8:	f043 0320 	orr.w	r3, r3, #32
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	2378      	movs	r3, #120	; 0x78
 80092e0:	4828      	ldr	r0, [pc, #160]	; (8009384 <_printf_i+0x248>)
 80092e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80092e6:	e7e3      	b.n	80092b0 <_printf_i+0x174>
 80092e8:	0659      	lsls	r1, r3, #25
 80092ea:	bf48      	it	mi
 80092ec:	b2b6      	uxthmi	r6, r6
 80092ee:	e7e6      	b.n	80092be <_printf_i+0x182>
 80092f0:	4615      	mov	r5, r2
 80092f2:	e7bb      	b.n	800926c <_printf_i+0x130>
 80092f4:	682b      	ldr	r3, [r5, #0]
 80092f6:	6826      	ldr	r6, [r4, #0]
 80092f8:	6961      	ldr	r1, [r4, #20]
 80092fa:	1d18      	adds	r0, r3, #4
 80092fc:	6028      	str	r0, [r5, #0]
 80092fe:	0635      	lsls	r5, r6, #24
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	d501      	bpl.n	8009308 <_printf_i+0x1cc>
 8009304:	6019      	str	r1, [r3, #0]
 8009306:	e002      	b.n	800930e <_printf_i+0x1d2>
 8009308:	0670      	lsls	r0, r6, #25
 800930a:	d5fb      	bpl.n	8009304 <_printf_i+0x1c8>
 800930c:	8019      	strh	r1, [r3, #0]
 800930e:	2300      	movs	r3, #0
 8009310:	6123      	str	r3, [r4, #16]
 8009312:	4615      	mov	r5, r2
 8009314:	e7ba      	b.n	800928c <_printf_i+0x150>
 8009316:	682b      	ldr	r3, [r5, #0]
 8009318:	1d1a      	adds	r2, r3, #4
 800931a:	602a      	str	r2, [r5, #0]
 800931c:	681d      	ldr	r5, [r3, #0]
 800931e:	6862      	ldr	r2, [r4, #4]
 8009320:	2100      	movs	r1, #0
 8009322:	4628      	mov	r0, r5
 8009324:	f7f6 ff74 	bl	8000210 <memchr>
 8009328:	b108      	cbz	r0, 800932e <_printf_i+0x1f2>
 800932a:	1b40      	subs	r0, r0, r5
 800932c:	6060      	str	r0, [r4, #4]
 800932e:	6863      	ldr	r3, [r4, #4]
 8009330:	6123      	str	r3, [r4, #16]
 8009332:	2300      	movs	r3, #0
 8009334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009338:	e7a8      	b.n	800928c <_printf_i+0x150>
 800933a:	6923      	ldr	r3, [r4, #16]
 800933c:	462a      	mov	r2, r5
 800933e:	4649      	mov	r1, r9
 8009340:	4640      	mov	r0, r8
 8009342:	47d0      	blx	sl
 8009344:	3001      	adds	r0, #1
 8009346:	d0ab      	beq.n	80092a0 <_printf_i+0x164>
 8009348:	6823      	ldr	r3, [r4, #0]
 800934a:	079b      	lsls	r3, r3, #30
 800934c:	d413      	bmi.n	8009376 <_printf_i+0x23a>
 800934e:	68e0      	ldr	r0, [r4, #12]
 8009350:	9b03      	ldr	r3, [sp, #12]
 8009352:	4298      	cmp	r0, r3
 8009354:	bfb8      	it	lt
 8009356:	4618      	movlt	r0, r3
 8009358:	e7a4      	b.n	80092a4 <_printf_i+0x168>
 800935a:	2301      	movs	r3, #1
 800935c:	4632      	mov	r2, r6
 800935e:	4649      	mov	r1, r9
 8009360:	4640      	mov	r0, r8
 8009362:	47d0      	blx	sl
 8009364:	3001      	adds	r0, #1
 8009366:	d09b      	beq.n	80092a0 <_printf_i+0x164>
 8009368:	3501      	adds	r5, #1
 800936a:	68e3      	ldr	r3, [r4, #12]
 800936c:	9903      	ldr	r1, [sp, #12]
 800936e:	1a5b      	subs	r3, r3, r1
 8009370:	42ab      	cmp	r3, r5
 8009372:	dcf2      	bgt.n	800935a <_printf_i+0x21e>
 8009374:	e7eb      	b.n	800934e <_printf_i+0x212>
 8009376:	2500      	movs	r5, #0
 8009378:	f104 0619 	add.w	r6, r4, #25
 800937c:	e7f5      	b.n	800936a <_printf_i+0x22e>
 800937e:	bf00      	nop
 8009380:	08009a89 	.word	0x08009a89
 8009384:	08009a9a 	.word	0x08009a9a

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	; (80093a4 <_sbrk_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7fa fc60 	bl	8003c58 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	2000045c 	.word	0x2000045c

080093a8 <__sread>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	f000 fab2 	bl	8009918 <_read_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	bfab      	itete	ge
 80093b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80093ba:	89a3      	ldrhlt	r3, [r4, #12]
 80093bc:	181b      	addge	r3, r3, r0
 80093be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80093c2:	bfac      	ite	ge
 80093c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80093c6:	81a3      	strhlt	r3, [r4, #12]
 80093c8:	bd10      	pop	{r4, pc}

080093ca <__swrite>:
 80093ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ce:	461f      	mov	r7, r3
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	05db      	lsls	r3, r3, #23
 80093d4:	4605      	mov	r5, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4616      	mov	r6, r2
 80093da:	d505      	bpl.n	80093e8 <__swrite+0x1e>
 80093dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e0:	2302      	movs	r3, #2
 80093e2:	2200      	movs	r2, #0
 80093e4:	f000 f9c8 	bl	8009778 <_lseek_r>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	4632      	mov	r2, r6
 80093f6:	463b      	mov	r3, r7
 80093f8:	4628      	mov	r0, r5
 80093fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fe:	f000 b869 	b.w	80094d4 <_write_r>

08009402 <__sseek>:
 8009402:	b510      	push	{r4, lr}
 8009404:	460c      	mov	r4, r1
 8009406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940a:	f000 f9b5 	bl	8009778 <_lseek_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	bf15      	itete	ne
 8009414:	6560      	strne	r0, [r4, #84]	; 0x54
 8009416:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800941a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800941e:	81a3      	strheq	r3, [r4, #12]
 8009420:	bf18      	it	ne
 8009422:	81a3      	strhne	r3, [r4, #12]
 8009424:	bd10      	pop	{r4, pc}

08009426 <__sclose>:
 8009426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942a:	f000 b8d3 	b.w	80095d4 <_close_r>
	...

08009430 <__swbuf_r>:
 8009430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009432:	460e      	mov	r6, r1
 8009434:	4614      	mov	r4, r2
 8009436:	4605      	mov	r5, r0
 8009438:	b118      	cbz	r0, 8009442 <__swbuf_r+0x12>
 800943a:	6983      	ldr	r3, [r0, #24]
 800943c:	b90b      	cbnz	r3, 8009442 <__swbuf_r+0x12>
 800943e:	f7ff fb81 	bl	8008b44 <__sinit>
 8009442:	4b21      	ldr	r3, [pc, #132]	; (80094c8 <__swbuf_r+0x98>)
 8009444:	429c      	cmp	r4, r3
 8009446:	d12b      	bne.n	80094a0 <__swbuf_r+0x70>
 8009448:	686c      	ldr	r4, [r5, #4]
 800944a:	69a3      	ldr	r3, [r4, #24]
 800944c:	60a3      	str	r3, [r4, #8]
 800944e:	89a3      	ldrh	r3, [r4, #12]
 8009450:	071a      	lsls	r2, r3, #28
 8009452:	d52f      	bpl.n	80094b4 <__swbuf_r+0x84>
 8009454:	6923      	ldr	r3, [r4, #16]
 8009456:	b36b      	cbz	r3, 80094b4 <__swbuf_r+0x84>
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	6820      	ldr	r0, [r4, #0]
 800945c:	1ac0      	subs	r0, r0, r3
 800945e:	6963      	ldr	r3, [r4, #20]
 8009460:	b2f6      	uxtb	r6, r6
 8009462:	4283      	cmp	r3, r0
 8009464:	4637      	mov	r7, r6
 8009466:	dc04      	bgt.n	8009472 <__swbuf_r+0x42>
 8009468:	4621      	mov	r1, r4
 800946a:	4628      	mov	r0, r5
 800946c:	f000 f948 	bl	8009700 <_fflush_r>
 8009470:	bb30      	cbnz	r0, 80094c0 <__swbuf_r+0x90>
 8009472:	68a3      	ldr	r3, [r4, #8]
 8009474:	3b01      	subs	r3, #1
 8009476:	60a3      	str	r3, [r4, #8]
 8009478:	6823      	ldr	r3, [r4, #0]
 800947a:	1c5a      	adds	r2, r3, #1
 800947c:	6022      	str	r2, [r4, #0]
 800947e:	701e      	strb	r6, [r3, #0]
 8009480:	6963      	ldr	r3, [r4, #20]
 8009482:	3001      	adds	r0, #1
 8009484:	4283      	cmp	r3, r0
 8009486:	d004      	beq.n	8009492 <__swbuf_r+0x62>
 8009488:	89a3      	ldrh	r3, [r4, #12]
 800948a:	07db      	lsls	r3, r3, #31
 800948c:	d506      	bpl.n	800949c <__swbuf_r+0x6c>
 800948e:	2e0a      	cmp	r6, #10
 8009490:	d104      	bne.n	800949c <__swbuf_r+0x6c>
 8009492:	4621      	mov	r1, r4
 8009494:	4628      	mov	r0, r5
 8009496:	f000 f933 	bl	8009700 <_fflush_r>
 800949a:	b988      	cbnz	r0, 80094c0 <__swbuf_r+0x90>
 800949c:	4638      	mov	r0, r7
 800949e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094a0:	4b0a      	ldr	r3, [pc, #40]	; (80094cc <__swbuf_r+0x9c>)
 80094a2:	429c      	cmp	r4, r3
 80094a4:	d101      	bne.n	80094aa <__swbuf_r+0x7a>
 80094a6:	68ac      	ldr	r4, [r5, #8]
 80094a8:	e7cf      	b.n	800944a <__swbuf_r+0x1a>
 80094aa:	4b09      	ldr	r3, [pc, #36]	; (80094d0 <__swbuf_r+0xa0>)
 80094ac:	429c      	cmp	r4, r3
 80094ae:	bf08      	it	eq
 80094b0:	68ec      	ldreq	r4, [r5, #12]
 80094b2:	e7ca      	b.n	800944a <__swbuf_r+0x1a>
 80094b4:	4621      	mov	r1, r4
 80094b6:	4628      	mov	r0, r5
 80094b8:	f000 f81e 	bl	80094f8 <__swsetup_r>
 80094bc:	2800      	cmp	r0, #0
 80094be:	d0cb      	beq.n	8009458 <__swbuf_r+0x28>
 80094c0:	f04f 37ff 	mov.w	r7, #4294967295
 80094c4:	e7ea      	b.n	800949c <__swbuf_r+0x6c>
 80094c6:	bf00      	nop
 80094c8:	08009a38 	.word	0x08009a38
 80094cc:	08009a58 	.word	0x08009a58
 80094d0:	08009a18 	.word	0x08009a18

080094d4 <_write_r>:
 80094d4:	b538      	push	{r3, r4, r5, lr}
 80094d6:	4d07      	ldr	r5, [pc, #28]	; (80094f4 <_write_r+0x20>)
 80094d8:	4604      	mov	r4, r0
 80094da:	4608      	mov	r0, r1
 80094dc:	4611      	mov	r1, r2
 80094de:	2200      	movs	r2, #0
 80094e0:	602a      	str	r2, [r5, #0]
 80094e2:	461a      	mov	r2, r3
 80094e4:	f7f8 fe66 	bl	80021b4 <_write>
 80094e8:	1c43      	adds	r3, r0, #1
 80094ea:	d102      	bne.n	80094f2 <_write_r+0x1e>
 80094ec:	682b      	ldr	r3, [r5, #0]
 80094ee:	b103      	cbz	r3, 80094f2 <_write_r+0x1e>
 80094f0:	6023      	str	r3, [r4, #0]
 80094f2:	bd38      	pop	{r3, r4, r5, pc}
 80094f4:	2000045c 	.word	0x2000045c

080094f8 <__swsetup_r>:
 80094f8:	4b32      	ldr	r3, [pc, #200]	; (80095c4 <__swsetup_r+0xcc>)
 80094fa:	b570      	push	{r4, r5, r6, lr}
 80094fc:	681d      	ldr	r5, [r3, #0]
 80094fe:	4606      	mov	r6, r0
 8009500:	460c      	mov	r4, r1
 8009502:	b125      	cbz	r5, 800950e <__swsetup_r+0x16>
 8009504:	69ab      	ldr	r3, [r5, #24]
 8009506:	b913      	cbnz	r3, 800950e <__swsetup_r+0x16>
 8009508:	4628      	mov	r0, r5
 800950a:	f7ff fb1b 	bl	8008b44 <__sinit>
 800950e:	4b2e      	ldr	r3, [pc, #184]	; (80095c8 <__swsetup_r+0xd0>)
 8009510:	429c      	cmp	r4, r3
 8009512:	d10f      	bne.n	8009534 <__swsetup_r+0x3c>
 8009514:	686c      	ldr	r4, [r5, #4]
 8009516:	89a3      	ldrh	r3, [r4, #12]
 8009518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800951c:	0719      	lsls	r1, r3, #28
 800951e:	d42c      	bmi.n	800957a <__swsetup_r+0x82>
 8009520:	06dd      	lsls	r5, r3, #27
 8009522:	d411      	bmi.n	8009548 <__swsetup_r+0x50>
 8009524:	2309      	movs	r3, #9
 8009526:	6033      	str	r3, [r6, #0]
 8009528:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800952c:	81a3      	strh	r3, [r4, #12]
 800952e:	f04f 30ff 	mov.w	r0, #4294967295
 8009532:	e03e      	b.n	80095b2 <__swsetup_r+0xba>
 8009534:	4b25      	ldr	r3, [pc, #148]	; (80095cc <__swsetup_r+0xd4>)
 8009536:	429c      	cmp	r4, r3
 8009538:	d101      	bne.n	800953e <__swsetup_r+0x46>
 800953a:	68ac      	ldr	r4, [r5, #8]
 800953c:	e7eb      	b.n	8009516 <__swsetup_r+0x1e>
 800953e:	4b24      	ldr	r3, [pc, #144]	; (80095d0 <__swsetup_r+0xd8>)
 8009540:	429c      	cmp	r4, r3
 8009542:	bf08      	it	eq
 8009544:	68ec      	ldreq	r4, [r5, #12]
 8009546:	e7e6      	b.n	8009516 <__swsetup_r+0x1e>
 8009548:	0758      	lsls	r0, r3, #29
 800954a:	d512      	bpl.n	8009572 <__swsetup_r+0x7a>
 800954c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800954e:	b141      	cbz	r1, 8009562 <__swsetup_r+0x6a>
 8009550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009554:	4299      	cmp	r1, r3
 8009556:	d002      	beq.n	800955e <__swsetup_r+0x66>
 8009558:	4630      	mov	r0, r6
 800955a:	f000 f991 	bl	8009880 <_free_r>
 800955e:	2300      	movs	r3, #0
 8009560:	6363      	str	r3, [r4, #52]	; 0x34
 8009562:	89a3      	ldrh	r3, [r4, #12]
 8009564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009568:	81a3      	strh	r3, [r4, #12]
 800956a:	2300      	movs	r3, #0
 800956c:	6063      	str	r3, [r4, #4]
 800956e:	6923      	ldr	r3, [r4, #16]
 8009570:	6023      	str	r3, [r4, #0]
 8009572:	89a3      	ldrh	r3, [r4, #12]
 8009574:	f043 0308 	orr.w	r3, r3, #8
 8009578:	81a3      	strh	r3, [r4, #12]
 800957a:	6923      	ldr	r3, [r4, #16]
 800957c:	b94b      	cbnz	r3, 8009592 <__swsetup_r+0x9a>
 800957e:	89a3      	ldrh	r3, [r4, #12]
 8009580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009588:	d003      	beq.n	8009592 <__swsetup_r+0x9a>
 800958a:	4621      	mov	r1, r4
 800958c:	4630      	mov	r0, r6
 800958e:	f000 f92b 	bl	80097e8 <__smakebuf_r>
 8009592:	89a0      	ldrh	r0, [r4, #12]
 8009594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009598:	f010 0301 	ands.w	r3, r0, #1
 800959c:	d00a      	beq.n	80095b4 <__swsetup_r+0xbc>
 800959e:	2300      	movs	r3, #0
 80095a0:	60a3      	str	r3, [r4, #8]
 80095a2:	6963      	ldr	r3, [r4, #20]
 80095a4:	425b      	negs	r3, r3
 80095a6:	61a3      	str	r3, [r4, #24]
 80095a8:	6923      	ldr	r3, [r4, #16]
 80095aa:	b943      	cbnz	r3, 80095be <__swsetup_r+0xc6>
 80095ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80095b0:	d1ba      	bne.n	8009528 <__swsetup_r+0x30>
 80095b2:	bd70      	pop	{r4, r5, r6, pc}
 80095b4:	0781      	lsls	r1, r0, #30
 80095b6:	bf58      	it	pl
 80095b8:	6963      	ldrpl	r3, [r4, #20]
 80095ba:	60a3      	str	r3, [r4, #8]
 80095bc:	e7f4      	b.n	80095a8 <__swsetup_r+0xb0>
 80095be:	2000      	movs	r0, #0
 80095c0:	e7f7      	b.n	80095b2 <__swsetup_r+0xba>
 80095c2:	bf00      	nop
 80095c4:	20000010 	.word	0x20000010
 80095c8:	08009a38 	.word	0x08009a38
 80095cc:	08009a58 	.word	0x08009a58
 80095d0:	08009a18 	.word	0x08009a18

080095d4 <_close_r>:
 80095d4:	b538      	push	{r3, r4, r5, lr}
 80095d6:	4d06      	ldr	r5, [pc, #24]	; (80095f0 <_close_r+0x1c>)
 80095d8:	2300      	movs	r3, #0
 80095da:	4604      	mov	r4, r0
 80095dc:	4608      	mov	r0, r1
 80095de:	602b      	str	r3, [r5, #0]
 80095e0:	f7fa fb05 	bl	8003bee <_close>
 80095e4:	1c43      	adds	r3, r0, #1
 80095e6:	d102      	bne.n	80095ee <_close_r+0x1a>
 80095e8:	682b      	ldr	r3, [r5, #0]
 80095ea:	b103      	cbz	r3, 80095ee <_close_r+0x1a>
 80095ec:	6023      	str	r3, [r4, #0]
 80095ee:	bd38      	pop	{r3, r4, r5, pc}
 80095f0:	2000045c 	.word	0x2000045c

080095f4 <__sflush_r>:
 80095f4:	898a      	ldrh	r2, [r1, #12]
 80095f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80095fa:	4605      	mov	r5, r0
 80095fc:	0710      	lsls	r0, r2, #28
 80095fe:	460c      	mov	r4, r1
 8009600:	d458      	bmi.n	80096b4 <__sflush_r+0xc0>
 8009602:	684b      	ldr	r3, [r1, #4]
 8009604:	2b00      	cmp	r3, #0
 8009606:	dc05      	bgt.n	8009614 <__sflush_r+0x20>
 8009608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc02      	bgt.n	8009614 <__sflush_r+0x20>
 800960e:	2000      	movs	r0, #0
 8009610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009616:	2e00      	cmp	r6, #0
 8009618:	d0f9      	beq.n	800960e <__sflush_r+0x1a>
 800961a:	2300      	movs	r3, #0
 800961c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009620:	682f      	ldr	r7, [r5, #0]
 8009622:	602b      	str	r3, [r5, #0]
 8009624:	d032      	beq.n	800968c <__sflush_r+0x98>
 8009626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009628:	89a3      	ldrh	r3, [r4, #12]
 800962a:	075a      	lsls	r2, r3, #29
 800962c:	d505      	bpl.n	800963a <__sflush_r+0x46>
 800962e:	6863      	ldr	r3, [r4, #4]
 8009630:	1ac0      	subs	r0, r0, r3
 8009632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009634:	b10b      	cbz	r3, 800963a <__sflush_r+0x46>
 8009636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009638:	1ac0      	subs	r0, r0, r3
 800963a:	2300      	movs	r3, #0
 800963c:	4602      	mov	r2, r0
 800963e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009640:	6a21      	ldr	r1, [r4, #32]
 8009642:	4628      	mov	r0, r5
 8009644:	47b0      	blx	r6
 8009646:	1c43      	adds	r3, r0, #1
 8009648:	89a3      	ldrh	r3, [r4, #12]
 800964a:	d106      	bne.n	800965a <__sflush_r+0x66>
 800964c:	6829      	ldr	r1, [r5, #0]
 800964e:	291d      	cmp	r1, #29
 8009650:	d82c      	bhi.n	80096ac <__sflush_r+0xb8>
 8009652:	4a2a      	ldr	r2, [pc, #168]	; (80096fc <__sflush_r+0x108>)
 8009654:	40ca      	lsrs	r2, r1
 8009656:	07d6      	lsls	r6, r2, #31
 8009658:	d528      	bpl.n	80096ac <__sflush_r+0xb8>
 800965a:	2200      	movs	r2, #0
 800965c:	6062      	str	r2, [r4, #4]
 800965e:	04d9      	lsls	r1, r3, #19
 8009660:	6922      	ldr	r2, [r4, #16]
 8009662:	6022      	str	r2, [r4, #0]
 8009664:	d504      	bpl.n	8009670 <__sflush_r+0x7c>
 8009666:	1c42      	adds	r2, r0, #1
 8009668:	d101      	bne.n	800966e <__sflush_r+0x7a>
 800966a:	682b      	ldr	r3, [r5, #0]
 800966c:	b903      	cbnz	r3, 8009670 <__sflush_r+0x7c>
 800966e:	6560      	str	r0, [r4, #84]	; 0x54
 8009670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009672:	602f      	str	r7, [r5, #0]
 8009674:	2900      	cmp	r1, #0
 8009676:	d0ca      	beq.n	800960e <__sflush_r+0x1a>
 8009678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800967c:	4299      	cmp	r1, r3
 800967e:	d002      	beq.n	8009686 <__sflush_r+0x92>
 8009680:	4628      	mov	r0, r5
 8009682:	f000 f8fd 	bl	8009880 <_free_r>
 8009686:	2000      	movs	r0, #0
 8009688:	6360      	str	r0, [r4, #52]	; 0x34
 800968a:	e7c1      	b.n	8009610 <__sflush_r+0x1c>
 800968c:	6a21      	ldr	r1, [r4, #32]
 800968e:	2301      	movs	r3, #1
 8009690:	4628      	mov	r0, r5
 8009692:	47b0      	blx	r6
 8009694:	1c41      	adds	r1, r0, #1
 8009696:	d1c7      	bne.n	8009628 <__sflush_r+0x34>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d0c4      	beq.n	8009628 <__sflush_r+0x34>
 800969e:	2b1d      	cmp	r3, #29
 80096a0:	d001      	beq.n	80096a6 <__sflush_r+0xb2>
 80096a2:	2b16      	cmp	r3, #22
 80096a4:	d101      	bne.n	80096aa <__sflush_r+0xb6>
 80096a6:	602f      	str	r7, [r5, #0]
 80096a8:	e7b1      	b.n	800960e <__sflush_r+0x1a>
 80096aa:	89a3      	ldrh	r3, [r4, #12]
 80096ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096b0:	81a3      	strh	r3, [r4, #12]
 80096b2:	e7ad      	b.n	8009610 <__sflush_r+0x1c>
 80096b4:	690f      	ldr	r7, [r1, #16]
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	d0a9      	beq.n	800960e <__sflush_r+0x1a>
 80096ba:	0793      	lsls	r3, r2, #30
 80096bc:	680e      	ldr	r6, [r1, #0]
 80096be:	bf08      	it	eq
 80096c0:	694b      	ldreq	r3, [r1, #20]
 80096c2:	600f      	str	r7, [r1, #0]
 80096c4:	bf18      	it	ne
 80096c6:	2300      	movne	r3, #0
 80096c8:	eba6 0807 	sub.w	r8, r6, r7
 80096cc:	608b      	str	r3, [r1, #8]
 80096ce:	f1b8 0f00 	cmp.w	r8, #0
 80096d2:	dd9c      	ble.n	800960e <__sflush_r+0x1a>
 80096d4:	6a21      	ldr	r1, [r4, #32]
 80096d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80096d8:	4643      	mov	r3, r8
 80096da:	463a      	mov	r2, r7
 80096dc:	4628      	mov	r0, r5
 80096de:	47b0      	blx	r6
 80096e0:	2800      	cmp	r0, #0
 80096e2:	dc06      	bgt.n	80096f2 <__sflush_r+0xfe>
 80096e4:	89a3      	ldrh	r3, [r4, #12]
 80096e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096ea:	81a3      	strh	r3, [r4, #12]
 80096ec:	f04f 30ff 	mov.w	r0, #4294967295
 80096f0:	e78e      	b.n	8009610 <__sflush_r+0x1c>
 80096f2:	4407      	add	r7, r0
 80096f4:	eba8 0800 	sub.w	r8, r8, r0
 80096f8:	e7e9      	b.n	80096ce <__sflush_r+0xda>
 80096fa:	bf00      	nop
 80096fc:	20400001 	.word	0x20400001

08009700 <_fflush_r>:
 8009700:	b538      	push	{r3, r4, r5, lr}
 8009702:	690b      	ldr	r3, [r1, #16]
 8009704:	4605      	mov	r5, r0
 8009706:	460c      	mov	r4, r1
 8009708:	b913      	cbnz	r3, 8009710 <_fflush_r+0x10>
 800970a:	2500      	movs	r5, #0
 800970c:	4628      	mov	r0, r5
 800970e:	bd38      	pop	{r3, r4, r5, pc}
 8009710:	b118      	cbz	r0, 800971a <_fflush_r+0x1a>
 8009712:	6983      	ldr	r3, [r0, #24]
 8009714:	b90b      	cbnz	r3, 800971a <_fflush_r+0x1a>
 8009716:	f7ff fa15 	bl	8008b44 <__sinit>
 800971a:	4b14      	ldr	r3, [pc, #80]	; (800976c <_fflush_r+0x6c>)
 800971c:	429c      	cmp	r4, r3
 800971e:	d11b      	bne.n	8009758 <_fflush_r+0x58>
 8009720:	686c      	ldr	r4, [r5, #4]
 8009722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d0ef      	beq.n	800970a <_fflush_r+0xa>
 800972a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800972c:	07d0      	lsls	r0, r2, #31
 800972e:	d404      	bmi.n	800973a <_fflush_r+0x3a>
 8009730:	0599      	lsls	r1, r3, #22
 8009732:	d402      	bmi.n	800973a <_fflush_r+0x3a>
 8009734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009736:	f7ff faa3 	bl	8008c80 <__retarget_lock_acquire_recursive>
 800973a:	4628      	mov	r0, r5
 800973c:	4621      	mov	r1, r4
 800973e:	f7ff ff59 	bl	80095f4 <__sflush_r>
 8009742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009744:	07da      	lsls	r2, r3, #31
 8009746:	4605      	mov	r5, r0
 8009748:	d4e0      	bmi.n	800970c <_fflush_r+0xc>
 800974a:	89a3      	ldrh	r3, [r4, #12]
 800974c:	059b      	lsls	r3, r3, #22
 800974e:	d4dd      	bmi.n	800970c <_fflush_r+0xc>
 8009750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009752:	f7ff fa96 	bl	8008c82 <__retarget_lock_release_recursive>
 8009756:	e7d9      	b.n	800970c <_fflush_r+0xc>
 8009758:	4b05      	ldr	r3, [pc, #20]	; (8009770 <_fflush_r+0x70>)
 800975a:	429c      	cmp	r4, r3
 800975c:	d101      	bne.n	8009762 <_fflush_r+0x62>
 800975e:	68ac      	ldr	r4, [r5, #8]
 8009760:	e7df      	b.n	8009722 <_fflush_r+0x22>
 8009762:	4b04      	ldr	r3, [pc, #16]	; (8009774 <_fflush_r+0x74>)
 8009764:	429c      	cmp	r4, r3
 8009766:	bf08      	it	eq
 8009768:	68ec      	ldreq	r4, [r5, #12]
 800976a:	e7da      	b.n	8009722 <_fflush_r+0x22>
 800976c:	08009a38 	.word	0x08009a38
 8009770:	08009a58 	.word	0x08009a58
 8009774:	08009a18 	.word	0x08009a18

08009778 <_lseek_r>:
 8009778:	b538      	push	{r3, r4, r5, lr}
 800977a:	4d07      	ldr	r5, [pc, #28]	; (8009798 <_lseek_r+0x20>)
 800977c:	4604      	mov	r4, r0
 800977e:	4608      	mov	r0, r1
 8009780:	4611      	mov	r1, r2
 8009782:	2200      	movs	r2, #0
 8009784:	602a      	str	r2, [r5, #0]
 8009786:	461a      	mov	r2, r3
 8009788:	f7fa fa58 	bl	8003c3c <_lseek>
 800978c:	1c43      	adds	r3, r0, #1
 800978e:	d102      	bne.n	8009796 <_lseek_r+0x1e>
 8009790:	682b      	ldr	r3, [r5, #0]
 8009792:	b103      	cbz	r3, 8009796 <_lseek_r+0x1e>
 8009794:	6023      	str	r3, [r4, #0]
 8009796:	bd38      	pop	{r3, r4, r5, pc}
 8009798:	2000045c 	.word	0x2000045c

0800979c <__swhatbuf_r>:
 800979c:	b570      	push	{r4, r5, r6, lr}
 800979e:	460e      	mov	r6, r1
 80097a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097a4:	2900      	cmp	r1, #0
 80097a6:	b096      	sub	sp, #88	; 0x58
 80097a8:	4614      	mov	r4, r2
 80097aa:	461d      	mov	r5, r3
 80097ac:	da08      	bge.n	80097c0 <__swhatbuf_r+0x24>
 80097ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80097b2:	2200      	movs	r2, #0
 80097b4:	602a      	str	r2, [r5, #0]
 80097b6:	061a      	lsls	r2, r3, #24
 80097b8:	d410      	bmi.n	80097dc <__swhatbuf_r+0x40>
 80097ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097be:	e00e      	b.n	80097de <__swhatbuf_r+0x42>
 80097c0:	466a      	mov	r2, sp
 80097c2:	f000 f8bb 	bl	800993c <_fstat_r>
 80097c6:	2800      	cmp	r0, #0
 80097c8:	dbf1      	blt.n	80097ae <__swhatbuf_r+0x12>
 80097ca:	9a01      	ldr	r2, [sp, #4]
 80097cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80097d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80097d4:	425a      	negs	r2, r3
 80097d6:	415a      	adcs	r2, r3
 80097d8:	602a      	str	r2, [r5, #0]
 80097da:	e7ee      	b.n	80097ba <__swhatbuf_r+0x1e>
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	2000      	movs	r0, #0
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	b016      	add	sp, #88	; 0x58
 80097e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080097e8 <__smakebuf_r>:
 80097e8:	898b      	ldrh	r3, [r1, #12]
 80097ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097ec:	079d      	lsls	r5, r3, #30
 80097ee:	4606      	mov	r6, r0
 80097f0:	460c      	mov	r4, r1
 80097f2:	d507      	bpl.n	8009804 <__smakebuf_r+0x1c>
 80097f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097f8:	6023      	str	r3, [r4, #0]
 80097fa:	6123      	str	r3, [r4, #16]
 80097fc:	2301      	movs	r3, #1
 80097fe:	6163      	str	r3, [r4, #20]
 8009800:	b002      	add	sp, #8
 8009802:	bd70      	pop	{r4, r5, r6, pc}
 8009804:	ab01      	add	r3, sp, #4
 8009806:	466a      	mov	r2, sp
 8009808:	f7ff ffc8 	bl	800979c <__swhatbuf_r>
 800980c:	9900      	ldr	r1, [sp, #0]
 800980e:	4605      	mov	r5, r0
 8009810:	4630      	mov	r0, r6
 8009812:	f7ff fa57 	bl	8008cc4 <_malloc_r>
 8009816:	b948      	cbnz	r0, 800982c <__smakebuf_r+0x44>
 8009818:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800981c:	059a      	lsls	r2, r3, #22
 800981e:	d4ef      	bmi.n	8009800 <__smakebuf_r+0x18>
 8009820:	f023 0303 	bic.w	r3, r3, #3
 8009824:	f043 0302 	orr.w	r3, r3, #2
 8009828:	81a3      	strh	r3, [r4, #12]
 800982a:	e7e3      	b.n	80097f4 <__smakebuf_r+0xc>
 800982c:	4b0d      	ldr	r3, [pc, #52]	; (8009864 <__smakebuf_r+0x7c>)
 800982e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009830:	89a3      	ldrh	r3, [r4, #12]
 8009832:	6020      	str	r0, [r4, #0]
 8009834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009838:	81a3      	strh	r3, [r4, #12]
 800983a:	9b00      	ldr	r3, [sp, #0]
 800983c:	6163      	str	r3, [r4, #20]
 800983e:	9b01      	ldr	r3, [sp, #4]
 8009840:	6120      	str	r0, [r4, #16]
 8009842:	b15b      	cbz	r3, 800985c <__smakebuf_r+0x74>
 8009844:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009848:	4630      	mov	r0, r6
 800984a:	f000 f889 	bl	8009960 <_isatty_r>
 800984e:	b128      	cbz	r0, 800985c <__smakebuf_r+0x74>
 8009850:	89a3      	ldrh	r3, [r4, #12]
 8009852:	f023 0303 	bic.w	r3, r3, #3
 8009856:	f043 0301 	orr.w	r3, r3, #1
 800985a:	81a3      	strh	r3, [r4, #12]
 800985c:	89a0      	ldrh	r0, [r4, #12]
 800985e:	4305      	orrs	r5, r0
 8009860:	81a5      	strh	r5, [r4, #12]
 8009862:	e7cd      	b.n	8009800 <__smakebuf_r+0x18>
 8009864:	08008add 	.word	0x08008add

08009868 <__malloc_lock>:
 8009868:	4801      	ldr	r0, [pc, #4]	; (8009870 <__malloc_lock+0x8>)
 800986a:	f7ff ba09 	b.w	8008c80 <__retarget_lock_acquire_recursive>
 800986e:	bf00      	nop
 8009870:	20000450 	.word	0x20000450

08009874 <__malloc_unlock>:
 8009874:	4801      	ldr	r0, [pc, #4]	; (800987c <__malloc_unlock+0x8>)
 8009876:	f7ff ba04 	b.w	8008c82 <__retarget_lock_release_recursive>
 800987a:	bf00      	nop
 800987c:	20000450 	.word	0x20000450

08009880 <_free_r>:
 8009880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009882:	2900      	cmp	r1, #0
 8009884:	d044      	beq.n	8009910 <_free_r+0x90>
 8009886:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800988a:	9001      	str	r0, [sp, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	f1a1 0404 	sub.w	r4, r1, #4
 8009892:	bfb8      	it	lt
 8009894:	18e4      	addlt	r4, r4, r3
 8009896:	f7ff ffe7 	bl	8009868 <__malloc_lock>
 800989a:	4a1e      	ldr	r2, [pc, #120]	; (8009914 <_free_r+0x94>)
 800989c:	9801      	ldr	r0, [sp, #4]
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	b933      	cbnz	r3, 80098b0 <_free_r+0x30>
 80098a2:	6063      	str	r3, [r4, #4]
 80098a4:	6014      	str	r4, [r2, #0]
 80098a6:	b003      	add	sp, #12
 80098a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098ac:	f7ff bfe2 	b.w	8009874 <__malloc_unlock>
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	d908      	bls.n	80098c6 <_free_r+0x46>
 80098b4:	6825      	ldr	r5, [r4, #0]
 80098b6:	1961      	adds	r1, r4, r5
 80098b8:	428b      	cmp	r3, r1
 80098ba:	bf01      	itttt	eq
 80098bc:	6819      	ldreq	r1, [r3, #0]
 80098be:	685b      	ldreq	r3, [r3, #4]
 80098c0:	1949      	addeq	r1, r1, r5
 80098c2:	6021      	streq	r1, [r4, #0]
 80098c4:	e7ed      	b.n	80098a2 <_free_r+0x22>
 80098c6:	461a      	mov	r2, r3
 80098c8:	685b      	ldr	r3, [r3, #4]
 80098ca:	b10b      	cbz	r3, 80098d0 <_free_r+0x50>
 80098cc:	42a3      	cmp	r3, r4
 80098ce:	d9fa      	bls.n	80098c6 <_free_r+0x46>
 80098d0:	6811      	ldr	r1, [r2, #0]
 80098d2:	1855      	adds	r5, r2, r1
 80098d4:	42a5      	cmp	r5, r4
 80098d6:	d10b      	bne.n	80098f0 <_free_r+0x70>
 80098d8:	6824      	ldr	r4, [r4, #0]
 80098da:	4421      	add	r1, r4
 80098dc:	1854      	adds	r4, r2, r1
 80098de:	42a3      	cmp	r3, r4
 80098e0:	6011      	str	r1, [r2, #0]
 80098e2:	d1e0      	bne.n	80098a6 <_free_r+0x26>
 80098e4:	681c      	ldr	r4, [r3, #0]
 80098e6:	685b      	ldr	r3, [r3, #4]
 80098e8:	6053      	str	r3, [r2, #4]
 80098ea:	4421      	add	r1, r4
 80098ec:	6011      	str	r1, [r2, #0]
 80098ee:	e7da      	b.n	80098a6 <_free_r+0x26>
 80098f0:	d902      	bls.n	80098f8 <_free_r+0x78>
 80098f2:	230c      	movs	r3, #12
 80098f4:	6003      	str	r3, [r0, #0]
 80098f6:	e7d6      	b.n	80098a6 <_free_r+0x26>
 80098f8:	6825      	ldr	r5, [r4, #0]
 80098fa:	1961      	adds	r1, r4, r5
 80098fc:	428b      	cmp	r3, r1
 80098fe:	bf04      	itt	eq
 8009900:	6819      	ldreq	r1, [r3, #0]
 8009902:	685b      	ldreq	r3, [r3, #4]
 8009904:	6063      	str	r3, [r4, #4]
 8009906:	bf04      	itt	eq
 8009908:	1949      	addeq	r1, r1, r5
 800990a:	6021      	streq	r1, [r4, #0]
 800990c:	6054      	str	r4, [r2, #4]
 800990e:	e7ca      	b.n	80098a6 <_free_r+0x26>
 8009910:	b003      	add	sp, #12
 8009912:	bd30      	pop	{r4, r5, pc}
 8009914:	20000454 	.word	0x20000454

08009918 <_read_r>:
 8009918:	b538      	push	{r3, r4, r5, lr}
 800991a:	4d07      	ldr	r5, [pc, #28]	; (8009938 <_read_r+0x20>)
 800991c:	4604      	mov	r4, r0
 800991e:	4608      	mov	r0, r1
 8009920:	4611      	mov	r1, r2
 8009922:	2200      	movs	r2, #0
 8009924:	602a      	str	r2, [r5, #0]
 8009926:	461a      	mov	r2, r3
 8009928:	f7fa f944 	bl	8003bb4 <_read>
 800992c:	1c43      	adds	r3, r0, #1
 800992e:	d102      	bne.n	8009936 <_read_r+0x1e>
 8009930:	682b      	ldr	r3, [r5, #0]
 8009932:	b103      	cbz	r3, 8009936 <_read_r+0x1e>
 8009934:	6023      	str	r3, [r4, #0]
 8009936:	bd38      	pop	{r3, r4, r5, pc}
 8009938:	2000045c 	.word	0x2000045c

0800993c <_fstat_r>:
 800993c:	b538      	push	{r3, r4, r5, lr}
 800993e:	4d07      	ldr	r5, [pc, #28]	; (800995c <_fstat_r+0x20>)
 8009940:	2300      	movs	r3, #0
 8009942:	4604      	mov	r4, r0
 8009944:	4608      	mov	r0, r1
 8009946:	4611      	mov	r1, r2
 8009948:	602b      	str	r3, [r5, #0]
 800994a:	f7fa f95c 	bl	8003c06 <_fstat>
 800994e:	1c43      	adds	r3, r0, #1
 8009950:	d102      	bne.n	8009958 <_fstat_r+0x1c>
 8009952:	682b      	ldr	r3, [r5, #0]
 8009954:	b103      	cbz	r3, 8009958 <_fstat_r+0x1c>
 8009956:	6023      	str	r3, [r4, #0]
 8009958:	bd38      	pop	{r3, r4, r5, pc}
 800995a:	bf00      	nop
 800995c:	2000045c 	.word	0x2000045c

08009960 <_isatty_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4d06      	ldr	r5, [pc, #24]	; (800997c <_isatty_r+0x1c>)
 8009964:	2300      	movs	r3, #0
 8009966:	4604      	mov	r4, r0
 8009968:	4608      	mov	r0, r1
 800996a:	602b      	str	r3, [r5, #0]
 800996c:	f7fa f95b 	bl	8003c26 <_isatty>
 8009970:	1c43      	adds	r3, r0, #1
 8009972:	d102      	bne.n	800997a <_isatty_r+0x1a>
 8009974:	682b      	ldr	r3, [r5, #0]
 8009976:	b103      	cbz	r3, 800997a <_isatty_r+0x1a>
 8009978:	6023      	str	r3, [r4, #0]
 800997a:	bd38      	pop	{r3, r4, r5, pc}
 800997c:	2000045c 	.word	0x2000045c

08009980 <_init>:
 8009980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009982:	bf00      	nop
 8009984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009986:	bc08      	pop	{r3}
 8009988:	469e      	mov	lr, r3
 800998a:	4770      	bx	lr

0800998c <_fini>:
 800998c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800998e:	bf00      	nop
 8009990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009992:	bc08      	pop	{r3}
 8009994:	469e      	mov	lr, r3
 8009996:	4770      	bx	lr
