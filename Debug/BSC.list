
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ccc4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000051c  0800ce98  0800ce98  0001ce98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3b4  0800d3b4  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3b4  0800d3b4  0001d3b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3bc  0800d3bc  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3bc  0800d3bc  0001d3bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d3c0  0800d3c0  0001d3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  0800d3c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000524  20000248  0800d608  00020248  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800d608  0002076c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000189e3  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003624  00000000  00000000  00038c57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003c280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003d550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029174  00000000  00000000  0003e6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f77  00000000  00000000  00067844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf3b  00000000  00000000  0007f7bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017a6f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e14  00000000  00000000  0017a748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000248 	.word	0x20000248
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ce7c 	.word	0x0800ce7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000024c 	.word	0x2000024c
 800020c:	0800ce7c 	.word	0x0800ce7c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_uldivmod>:
 8000c28:	b953      	cbnz	r3, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2a:	b94a      	cbnz	r2, 8000c40 <__aeabi_uldivmod+0x18>
 8000c2c:	2900      	cmp	r1, #0
 8000c2e:	bf08      	it	eq
 8000c30:	2800      	cmpeq	r0, #0
 8000c32:	bf1c      	itt	ne
 8000c34:	f04f 31ff 	movne.w	r1, #4294967295
 8000c38:	f04f 30ff 	movne.w	r0, #4294967295
 8000c3c:	f000 b974 	b.w	8000f28 <__aeabi_idiv0>
 8000c40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c48:	f000 f806 	bl	8000c58 <__udivmoddi4>
 8000c4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c54:	b004      	add	sp, #16
 8000c56:	4770      	bx	lr

08000c58 <__udivmoddi4>:
 8000c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c5c:	9d08      	ldr	r5, [sp, #32]
 8000c5e:	4604      	mov	r4, r0
 8000c60:	468e      	mov	lr, r1
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d14d      	bne.n	8000d02 <__udivmoddi4+0xaa>
 8000c66:	428a      	cmp	r2, r1
 8000c68:	4694      	mov	ip, r2
 8000c6a:	d969      	bls.n	8000d40 <__udivmoddi4+0xe8>
 8000c6c:	fab2 f282 	clz	r2, r2
 8000c70:	b152      	cbz	r2, 8000c88 <__udivmoddi4+0x30>
 8000c72:	fa01 f302 	lsl.w	r3, r1, r2
 8000c76:	f1c2 0120 	rsb	r1, r2, #32
 8000c7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c7e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c82:	ea41 0e03 	orr.w	lr, r1, r3
 8000c86:	4094      	lsls	r4, r2
 8000c88:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c8c:	0c21      	lsrs	r1, r4, #16
 8000c8e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c92:	fa1f f78c 	uxth.w	r7, ip
 8000c96:	fb08 e316 	mls	r3, r8, r6, lr
 8000c9a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c9e:	fb06 f107 	mul.w	r1, r6, r7
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d90a      	bls.n	8000cbc <__udivmoddi4+0x64>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cae:	f080 811f 	bcs.w	8000ef0 <__udivmoddi4+0x298>
 8000cb2:	4299      	cmp	r1, r3
 8000cb4:	f240 811c 	bls.w	8000ef0 <__udivmoddi4+0x298>
 8000cb8:	3e02      	subs	r6, #2
 8000cba:	4463      	add	r3, ip
 8000cbc:	1a5b      	subs	r3, r3, r1
 8000cbe:	b2a4      	uxth	r4, r4
 8000cc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cc4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cc8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ccc:	fb00 f707 	mul.w	r7, r0, r7
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	d90a      	bls.n	8000cea <__udivmoddi4+0x92>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cdc:	f080 810a 	bcs.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce0:	42a7      	cmp	r7, r4
 8000ce2:	f240 8107 	bls.w	8000ef4 <__udivmoddi4+0x29c>
 8000ce6:	4464      	add	r4, ip
 8000ce8:	3802      	subs	r0, #2
 8000cea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cee:	1be4      	subs	r4, r4, r7
 8000cf0:	2600      	movs	r6, #0
 8000cf2:	b11d      	cbz	r5, 8000cfc <__udivmoddi4+0xa4>
 8000cf4:	40d4      	lsrs	r4, r2
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cfc:	4631      	mov	r1, r6
 8000cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d02:	428b      	cmp	r3, r1
 8000d04:	d909      	bls.n	8000d1a <__udivmoddi4+0xc2>
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	f000 80ef 	beq.w	8000eea <__udivmoddi4+0x292>
 8000d0c:	2600      	movs	r6, #0
 8000d0e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d12:	4630      	mov	r0, r6
 8000d14:	4631      	mov	r1, r6
 8000d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1a:	fab3 f683 	clz	r6, r3
 8000d1e:	2e00      	cmp	r6, #0
 8000d20:	d14a      	bne.n	8000db8 <__udivmoddi4+0x160>
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d302      	bcc.n	8000d2c <__udivmoddi4+0xd4>
 8000d26:	4282      	cmp	r2, r0
 8000d28:	f200 80f9 	bhi.w	8000f1e <__udivmoddi4+0x2c6>
 8000d2c:	1a84      	subs	r4, r0, r2
 8000d2e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d32:	2001      	movs	r0, #1
 8000d34:	469e      	mov	lr, r3
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d0e0      	beq.n	8000cfc <__udivmoddi4+0xa4>
 8000d3a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d3e:	e7dd      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000d40:	b902      	cbnz	r2, 8000d44 <__udivmoddi4+0xec>
 8000d42:	deff      	udf	#255	; 0xff
 8000d44:	fab2 f282 	clz	r2, r2
 8000d48:	2a00      	cmp	r2, #0
 8000d4a:	f040 8092 	bne.w	8000e72 <__udivmoddi4+0x21a>
 8000d4e:	eba1 010c 	sub.w	r1, r1, ip
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f fe8c 	uxth.w	lr, ip
 8000d5a:	2601      	movs	r6, #1
 8000d5c:	0c20      	lsrs	r0, r4, #16
 8000d5e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d62:	fb07 1113 	mls	r1, r7, r3, r1
 8000d66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6a:	fb0e f003 	mul.w	r0, lr, r3
 8000d6e:	4288      	cmp	r0, r1
 8000d70:	d908      	bls.n	8000d84 <__udivmoddi4+0x12c>
 8000d72:	eb1c 0101 	adds.w	r1, ip, r1
 8000d76:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d7a:	d202      	bcs.n	8000d82 <__udivmoddi4+0x12a>
 8000d7c:	4288      	cmp	r0, r1
 8000d7e:	f200 80cb 	bhi.w	8000f18 <__udivmoddi4+0x2c0>
 8000d82:	4643      	mov	r3, r8
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d8c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d90:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d94:	fb0e fe00 	mul.w	lr, lr, r0
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x156>
 8000d9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000da0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000da4:	d202      	bcs.n	8000dac <__udivmoddi4+0x154>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f200 80bb 	bhi.w	8000f22 <__udivmoddi4+0x2ca>
 8000dac:	4608      	mov	r0, r1
 8000dae:	eba4 040e 	sub.w	r4, r4, lr
 8000db2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000db6:	e79c      	b.n	8000cf2 <__udivmoddi4+0x9a>
 8000db8:	f1c6 0720 	rsb	r7, r6, #32
 8000dbc:	40b3      	lsls	r3, r6
 8000dbe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dc2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dc6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dca:	fa01 f306 	lsl.w	r3, r1, r6
 8000dce:	431c      	orrs	r4, r3
 8000dd0:	40f9      	lsrs	r1, r7
 8000dd2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dd6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dda:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dde:	0c20      	lsrs	r0, r4, #16
 8000de0:	fa1f fe8c 	uxth.w	lr, ip
 8000de4:	fb09 1118 	mls	r1, r9, r8, r1
 8000de8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dec:	fb08 f00e 	mul.w	r0, r8, lr
 8000df0:	4288      	cmp	r0, r1
 8000df2:	fa02 f206 	lsl.w	r2, r2, r6
 8000df6:	d90b      	bls.n	8000e10 <__udivmoddi4+0x1b8>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e00:	f080 8088 	bcs.w	8000f14 <__udivmoddi4+0x2bc>
 8000e04:	4288      	cmp	r0, r1
 8000e06:	f240 8085 	bls.w	8000f14 <__udivmoddi4+0x2bc>
 8000e0a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	1a09      	subs	r1, r1, r0
 8000e12:	b2a4      	uxth	r4, r4
 8000e14:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e18:	fb09 1110 	mls	r1, r9, r0, r1
 8000e1c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e20:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e24:	458e      	cmp	lr, r1
 8000e26:	d908      	bls.n	8000e3a <__udivmoddi4+0x1e2>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e30:	d26c      	bcs.n	8000f0c <__udivmoddi4+0x2b4>
 8000e32:	458e      	cmp	lr, r1
 8000e34:	d96a      	bls.n	8000f0c <__udivmoddi4+0x2b4>
 8000e36:	3802      	subs	r0, #2
 8000e38:	4461      	add	r1, ip
 8000e3a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e3e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e42:	eba1 010e 	sub.w	r1, r1, lr
 8000e46:	42a1      	cmp	r1, r4
 8000e48:	46c8      	mov	r8, r9
 8000e4a:	46a6      	mov	lr, r4
 8000e4c:	d356      	bcc.n	8000efc <__udivmoddi4+0x2a4>
 8000e4e:	d053      	beq.n	8000ef8 <__udivmoddi4+0x2a0>
 8000e50:	b15d      	cbz	r5, 8000e6a <__udivmoddi4+0x212>
 8000e52:	ebb3 0208 	subs.w	r2, r3, r8
 8000e56:	eb61 010e 	sbc.w	r1, r1, lr
 8000e5a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e5e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e62:	40f1      	lsrs	r1, r6
 8000e64:	431f      	orrs	r7, r3
 8000e66:	e9c5 7100 	strd	r7, r1, [r5]
 8000e6a:	2600      	movs	r6, #0
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	f1c2 0320 	rsb	r3, r2, #32
 8000e76:	40d8      	lsrs	r0, r3
 8000e78:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e7c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e80:	4091      	lsls	r1, r2
 8000e82:	4301      	orrs	r1, r0
 8000e84:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e88:	fa1f fe8c 	uxth.w	lr, ip
 8000e8c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e90:	fb07 3610 	mls	r6, r7, r0, r3
 8000e94:	0c0b      	lsrs	r3, r1, #16
 8000e96:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e9a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e9e:	429e      	cmp	r6, r3
 8000ea0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ea4:	d908      	bls.n	8000eb8 <__udivmoddi4+0x260>
 8000ea6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eaa:	f100 38ff 	add.w	r8, r0, #4294967295
 8000eae:	d22f      	bcs.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb0:	429e      	cmp	r6, r3
 8000eb2:	d92d      	bls.n	8000f10 <__udivmoddi4+0x2b8>
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	4463      	add	r3, ip
 8000eb8:	1b9b      	subs	r3, r3, r6
 8000eba:	b289      	uxth	r1, r1
 8000ebc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ec0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ec4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ec8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ecc:	428b      	cmp	r3, r1
 8000ece:	d908      	bls.n	8000ee2 <__udivmoddi4+0x28a>
 8000ed0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ed8:	d216      	bcs.n	8000f08 <__udivmoddi4+0x2b0>
 8000eda:	428b      	cmp	r3, r1
 8000edc:	d914      	bls.n	8000f08 <__udivmoddi4+0x2b0>
 8000ede:	3e02      	subs	r6, #2
 8000ee0:	4461      	add	r1, ip
 8000ee2:	1ac9      	subs	r1, r1, r3
 8000ee4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ee8:	e738      	b.n	8000d5c <__udivmoddi4+0x104>
 8000eea:	462e      	mov	r6, r5
 8000eec:	4628      	mov	r0, r5
 8000eee:	e705      	b.n	8000cfc <__udivmoddi4+0xa4>
 8000ef0:	4606      	mov	r6, r0
 8000ef2:	e6e3      	b.n	8000cbc <__udivmoddi4+0x64>
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	e6f8      	b.n	8000cea <__udivmoddi4+0x92>
 8000ef8:	454b      	cmp	r3, r9
 8000efa:	d2a9      	bcs.n	8000e50 <__udivmoddi4+0x1f8>
 8000efc:	ebb9 0802 	subs.w	r8, r9, r2
 8000f00:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7a3      	b.n	8000e50 <__udivmoddi4+0x1f8>
 8000f08:	4646      	mov	r6, r8
 8000f0a:	e7ea      	b.n	8000ee2 <__udivmoddi4+0x28a>
 8000f0c:	4620      	mov	r0, r4
 8000f0e:	e794      	b.n	8000e3a <__udivmoddi4+0x1e2>
 8000f10:	4640      	mov	r0, r8
 8000f12:	e7d1      	b.n	8000eb8 <__udivmoddi4+0x260>
 8000f14:	46d0      	mov	r8, sl
 8000f16:	e77b      	b.n	8000e10 <__udivmoddi4+0x1b8>
 8000f18:	3b02      	subs	r3, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	e732      	b.n	8000d84 <__udivmoddi4+0x12c>
 8000f1e:	4630      	mov	r0, r6
 8000f20:	e709      	b.n	8000d36 <__udivmoddi4+0xde>
 8000f22:	4464      	add	r4, ip
 8000f24:	3802      	subs	r0, #2
 8000f26:	e742      	b.n	8000dae <__udivmoddi4+0x156>

08000f28 <__aeabi_idiv0>:
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop

08000f2c <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
		init_state();
 8000f30:	f000 f85a 	bl	8000fe8 <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000f34:	bf00      	nop
 8000f36:	bd80      	pop	{r7, pc}

08000f38 <getState>:
/**
 * Get state.
 *
 * @return Current state.
 */
State getState() {
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
    LOCK();
    State s = work.state;
 8000f3e:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <getState+0x1c>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8000f44:	79fb      	ldrb	r3, [r7, #7]
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	370c      	adds	r7, #12
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	200002ac 	.word	0x200002ac

08000f58 <getData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the buffer.
 *
 * @return Data bit length.
 */
int getData(Format *format, uint8_t *buf, int bitlength) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b088      	sub	sp, #32
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
    LOCK();

    if (bitlength < data.bitcount) {
 8000f64:	4b1e      	ldr	r3, [pc, #120]	; (8000fe0 <getData+0x88>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	da02      	bge.n	8000f74 <getData+0x1c>
        UNLOCK();
        return -1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e030      	b.n	8000fd6 <getData+0x7e>
    }

    const int nbits = data.bitcount;
 8000f74:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <getData+0x88>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	61bb      	str	r3, [r7, #24]
    const int nbytes = data.bitcount / 8 + (((data.bitcount % 8) != 0) ? 1 : 0);
 8000f7a:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <getData+0x88>)
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	da00      	bge.n	8000f84 <getData+0x2c>
 8000f82:	3307      	adds	r3, #7
 8000f84:	10db      	asrs	r3, r3, #3
 8000f86:	461a      	mov	r2, r3
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <getData+0x88>)
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	bf14      	ite	ne
 8000f94:	2301      	movne	r3, #1
 8000f96:	2300      	moveq	r3, #0
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	617b      	str	r3, [r7, #20]

    //*format = data.format;
    *format = NEC;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61fb      	str	r3, [r7, #28]
 8000fa8:	e00b      	b.n	8000fc2 <getData+0x6a>
        buf[i] = data.buffer[i];
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	68ba      	ldr	r2, [r7, #8]
 8000fae:	4413      	add	r3, r2
 8000fb0:	490b      	ldr	r1, [pc, #44]	; (8000fe0 <getData+0x88>)
 8000fb2:	69fa      	ldr	r2, [r7, #28]
 8000fb4:	440a      	add	r2, r1
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	7812      	ldrb	r2, [r2, #0]
 8000fba:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	61fb      	str	r3, [r7, #28]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	dbef      	blt.n	8000faa <getData+0x52>
    }
    printf("getData init_state()getData init_state()getData init_state()");
 8000fca:	4806      	ldr	r0, [pc, #24]	; (8000fe4 <getData+0x8c>)
 8000fcc:	f009 fe1c 	bl	800ac08 <iprintf>
    init_state();
 8000fd0:	f000 f80a 	bl	8000fe8 <init_state>

    UNLOCK();
    return nbits;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000264 	.word	0x20000264
 8000fe4:	0800ce98 	.word	0x0800ce98

08000fe8 <init_state>:

void init_state(void) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <init_state+0x7c>)
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000ff6:	4b1b      	ldr	r3, [pc, #108]	; (8001064 <init_state+0x7c>)
 8000ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ffc:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000ffe:	4b19      	ldr	r3, [pc, #100]	; (8001064 <init_state+0x7c>)
 8001000:	f04f 32ff 	mov.w	r2, #4294967295
 8001004:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8001006:	4b17      	ldr	r3, [pc, #92]	; (8001064 <init_state+0x7c>)
 8001008:	f04f 32ff 	mov.w	r2, #4294967295
 800100c:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 800100e:	4b15      	ldr	r3, [pc, #84]	; (8001064 <init_state+0x7c>)
 8001010:	f04f 32ff 	mov.w	r2, #4294967295
 8001014:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <init_state+0x7c>)
 8001018:	2200      	movs	r2, #0
 800101a:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <init_state+0x80>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <init_state+0x80>)
 8001024:	2200      	movs	r2, #0
 8001026:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);printf("HAL_TIM_Base_Stop_IT(&htim14)\n");  //timer.stop();
 8001028:	4810      	ldr	r0, [pc, #64]	; (800106c <init_state+0x84>)
 800102a:	f007 fb09 	bl	8008640 <HAL_TIM_Base_Stop_IT>
 800102e:	4810      	ldr	r0, [pc, #64]	; (8001070 <init_state+0x88>)
 8001030:	f009 fe70 	bl	800ad14 <puts>
    //HAL_NVIC_DisableIRQ(EXTI0_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <init_state+0x8c>)
 8001036:	2200      	movs	r2, #0
 8001038:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	e008      	b.n	8001052 <init_state+0x6a>
        data.buffer[i] = 0;
 8001040:	4a09      	ldr	r2, [pc, #36]	; (8001068 <init_state+0x80>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	3308      	adds	r3, #8
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3301      	adds	r3, #1
 8001050:	607b      	str	r3, [r7, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2b3f      	cmp	r3, #63	; 0x3f
 8001056:	d9f3      	bls.n	8001040 <init_state+0x58>
    }
}
 8001058:	bf00      	nop
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200002ac 	.word	0x200002ac
 8001068:	20000264 	.word	0x20000264
 800106c:	20000654 	.word	0x20000654
 8001070:	0800ced8 	.word	0x0800ced8
 8001074:	200002e4 	.word	0x200002e4

08001078 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8001078:	b5b0      	push	{r4, r5, r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 800107e:	4b96      	ldr	r3, [pc, #600]	; (80012d8 <isr_fall+0x260>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	2b02      	cmp	r3, #2
 8001084:	f000 83cd 	beq.w	8001822 <isr_fall+0x7aa>
 8001088:	2b02      	cmp	r3, #2
 800108a:	f300 83cc 	bgt.w	8001826 <isr_fall+0x7ae>
 800108e:	2b00      	cmp	r3, #0
 8001090:	d003      	beq.n	800109a <isr_fall+0x22>
 8001092:	2b01      	cmp	r3, #1
 8001094:	f000 8224 	beq.w	80014e0 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001098:	e3c5      	b.n	8001826 <isr_fall+0x7ae>
            if (work.c1 < 0) {
 800109a:	4b8f      	ldr	r3, [pc, #572]	; (80012d8 <isr_fall+0x260>)
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	da07      	bge.n	80010b2 <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT (&htim14)\n");  //timer.start();
 80010a2:	488e      	ldr	r0, [pc, #568]	; (80012dc <isr_fall+0x264>)
 80010a4:	f007 fa54 	bl	8008550 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 80010a8:	4b8d      	ldr	r3, [pc, #564]	; (80012e0 <isr_fall+0x268>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a8a      	ldr	r2, [pc, #552]	; (80012d8 <isr_fall+0x260>)
 80010ae:	6053      	str	r3, [r2, #4]
            break;
 80010b0:	e3bc      	b.n	800182c <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 80010b2:	4b8b      	ldr	r3, [pc, #556]	; (80012e0 <isr_fall+0x268>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4a88      	ldr	r2, [pc, #544]	; (80012d8 <isr_fall+0x260>)
 80010b8:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 80010ba:	4b87      	ldr	r3, [pc, #540]	; (80012d8 <isr_fall+0x260>)
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	4b86      	ldr	r3, [pc, #536]	; (80012d8 <isr_fall+0x260>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 80010c6:	4b84      	ldr	r3, [pc, #528]	; (80012d8 <isr_fall+0x260>)
 80010c8:	68da      	ldr	r2, [r3, #12]
 80010ca:	4b83      	ldr	r3, [pc, #524]	; (80012d8 <isr_fall+0x260>)
 80010cc:	689b      	ldr	r3, [r3, #8]
 80010ce:	1ad3      	subs	r3, r2, r3
 80010d0:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 80010d2:	f240 2332 	movw	r3, #562	; 0x232
 80010d6:	011b      	lsls	r3, r3, #4
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff fa43 	bl	8000564 <__aeabi_i2d>
 80010de:	a37a      	add	r3, pc, #488	; (adr r3, 80012c8 <isr_fall+0x250>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	f7ff faa8 	bl	8000638 <__aeabi_dmul>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4614      	mov	r4, r2
 80010ee:	461d      	mov	r5, r3
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff fa37 	bl	8000564 <__aeabi_i2d>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4620      	mov	r0, r4
 80010fc:	4629      	mov	r1, r5
 80010fe:	f7ff fd0d 	bl	8000b1c <__aeabi_dcmplt>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d056      	beq.n	80011b6 <isr_fall+0x13e>
 8001108:	6878      	ldr	r0, [r7, #4]
 800110a:	f7ff fa2b 	bl	8000564 <__aeabi_i2d>
 800110e:	4604      	mov	r4, r0
 8001110:	460d      	mov	r5, r1
 8001112:	f240 2332 	movw	r3, #562	; 0x232
 8001116:	011b      	lsls	r3, r3, #4
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa23 	bl	8000564 <__aeabi_i2d>
 800111e:	a36c      	add	r3, pc, #432	; (adr r3, 80012d0 <isr_fall+0x258>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fa88 	bl	8000638 <__aeabi_dmul>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4620      	mov	r0, r4
 800112e:	4629      	mov	r1, r5
 8001130:	f7ff fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d03d      	beq.n	80011b6 <isr_fall+0x13e>
 800113a:	f240 2332 	movw	r3, #562	; 0x232
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff fa0f 	bl	8000564 <__aeabi_i2d>
 8001146:	a360      	add	r3, pc, #384	; (adr r3, 80012c8 <isr_fall+0x250>)
 8001148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800114c:	f7ff fa74 	bl	8000638 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4614      	mov	r4, r2
 8001156:	461d      	mov	r5, r3
 8001158:	6838      	ldr	r0, [r7, #0]
 800115a:	f7ff fa03 	bl	8000564 <__aeabi_i2d>
 800115e:	4602      	mov	r2, r0
 8001160:	460b      	mov	r3, r1
 8001162:	4620      	mov	r0, r4
 8001164:	4629      	mov	r1, r5
 8001166:	f7ff fcd9 	bl	8000b1c <__aeabi_dcmplt>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d022      	beq.n	80011b6 <isr_fall+0x13e>
 8001170:	6838      	ldr	r0, [r7, #0]
 8001172:	f7ff f9f7 	bl	8000564 <__aeabi_i2d>
 8001176:	4604      	mov	r4, r0
 8001178:	460d      	mov	r5, r1
 800117a:	f240 2332 	movw	r3, #562	; 0x232
 800117e:	00db      	lsls	r3, r3, #3
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff f9ef 	bl	8000564 <__aeabi_i2d>
 8001186:	a352      	add	r3, pc, #328	; (adr r3, 80012d0 <isr_fall+0x258>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	f7ff fa54 	bl	8000638 <__aeabi_dmul>
 8001190:	4602      	mov	r2, r0
 8001192:	460b      	mov	r3, r1
 8001194:	4620      	mov	r0, r4
 8001196:	4629      	mov	r1, r5
 8001198:	f7ff fcc0 	bl	8000b1c <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d009      	beq.n	80011b6 <isr_fall+0x13e>
                    data.format = NEC;
 80011a2:	4b50      	ldr	r3, [pc, #320]	; (80012e4 <isr_fall+0x26c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80011a8:	4b4b      	ldr	r3, [pc, #300]	; (80012d8 <isr_fall+0x260>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80011ae:	4b4d      	ldr	r3, [pc, #308]	; (80012e4 <isr_fall+0x26c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	e193      	b.n	80014de <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 80011b6:	f240 2332 	movw	r3, #562	; 0x232
 80011ba:	011b      	lsls	r3, r3, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f9d1 	bl	8000564 <__aeabi_i2d>
 80011c2:	a341      	add	r3, pc, #260	; (adr r3, 80012c8 <isr_fall+0x250>)
 80011c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c8:	f7ff fa36 	bl	8000638 <__aeabi_dmul>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4614      	mov	r4, r2
 80011d2:	461d      	mov	r5, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f7ff f9c5 	bl	8000564 <__aeabi_i2d>
 80011da:	4602      	mov	r2, r0
 80011dc:	460b      	mov	r3, r1
 80011de:	4620      	mov	r0, r4
 80011e0:	4629      	mov	r1, r5
 80011e2:	f7ff fc9b 	bl	8000b1c <__aeabi_dcmplt>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d07d      	beq.n	80012e8 <isr_fall+0x270>
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff f9b9 	bl	8000564 <__aeabi_i2d>
 80011f2:	4604      	mov	r4, r0
 80011f4:	460d      	mov	r5, r1
 80011f6:	f240 2332 	movw	r3, #562	; 0x232
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f9b1 	bl	8000564 <__aeabi_i2d>
 8001202:	a333      	add	r3, pc, #204	; (adr r3, 80012d0 <isr_fall+0x258>)
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f7ff fa16 	bl	8000638 <__aeabi_dmul>
 800120c:	4602      	mov	r2, r0
 800120e:	460b      	mov	r3, r1
 8001210:	4620      	mov	r0, r4
 8001212:	4629      	mov	r1, r5
 8001214:	f7ff fc82 	bl	8000b1c <__aeabi_dcmplt>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d064      	beq.n	80012e8 <isr_fall+0x270>
 800121e:	f240 2332 	movw	r3, #562	; 0x232
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	4618      	mov	r0, r3
 8001226:	f7ff f99d 	bl	8000564 <__aeabi_i2d>
 800122a:	a327      	add	r3, pc, #156	; (adr r3, 80012c8 <isr_fall+0x250>)
 800122c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001230:	f7ff fa02 	bl	8000638 <__aeabi_dmul>
 8001234:	4602      	mov	r2, r0
 8001236:	460b      	mov	r3, r1
 8001238:	4614      	mov	r4, r2
 800123a:	461d      	mov	r5, r3
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff f991 	bl	8000564 <__aeabi_i2d>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	4620      	mov	r0, r4
 8001248:	4629      	mov	r1, r5
 800124a:	f7ff fc67 	bl	8000b1c <__aeabi_dcmplt>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d049      	beq.n	80012e8 <isr_fall+0x270>
 8001254:	6838      	ldr	r0, [r7, #0]
 8001256:	f7ff f985 	bl	8000564 <__aeabi_i2d>
 800125a:	4604      	mov	r4, r0
 800125c:	460d      	mov	r5, r1
 800125e:	f240 2332 	movw	r3, #562	; 0x232
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff f97d 	bl	8000564 <__aeabi_i2d>
 800126a:	a319      	add	r3, pc, #100	; (adr r3, 80012d0 <isr_fall+0x258>)
 800126c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001270:	f7ff f9e2 	bl	8000638 <__aeabi_dmul>
 8001274:	4602      	mov	r2, r0
 8001276:	460b      	mov	r3, r1
 8001278:	4620      	mov	r0, r4
 800127a:	4629      	mov	r1, r5
 800127c:	f7ff fc4e 	bl	8000b1c <__aeabi_dcmplt>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d030      	beq.n	80012e8 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 8001286:	4b17      	ldr	r3, [pc, #92]	; (80012e4 <isr_fall+0x26c>)
 8001288:	2202      	movs	r2, #2
 800128a:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 800128c:	4b12      	ldr	r3, [pc, #72]	; (80012d8 <isr_fall+0x260>)
 800128e:	2202      	movs	r2, #2
 8001290:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <isr_fall+0x26c>)
 8001294:	2200      	movs	r2, #0
 8001296:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <isr_fall+0x260>)
 800129a:	f04f 32ff 	mov.w	r2, #4294967295
 800129e:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <isr_fall+0x260>)
 80012a2:	f04f 32ff 	mov.w	r2, #4294967295
 80012a6:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <isr_fall+0x260>)
 80012aa:	f04f 32ff 	mov.w	r2, #4294967295
 80012ae:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80012b0:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <isr_fall+0x260>)
 80012b2:	f04f 32ff 	mov.w	r2, #4294967295
 80012b6:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <isr_fall+0x260>)
 80012ba:	f04f 32ff 	mov.w	r2, #4294967295
 80012be:	615a      	str	r2, [r3, #20]
 80012c0:	e10d      	b.n	80014de <isr_fall+0x466>
 80012c2:	bf00      	nop
 80012c4:	f3af 8000 	nop.w
 80012c8:	66666666 	.word	0x66666666
 80012cc:	3fe66666 	.word	0x3fe66666
 80012d0:	cccccccd 	.word	0xcccccccd
 80012d4:	3ff4cccc 	.word	0x3ff4cccc
 80012d8:	200002ac 	.word	0x200002ac
 80012dc:	20000654 	.word	0x20000654
 80012e0:	200002e4 	.word	0x200002e4
 80012e4:	20000264 	.word	0x20000264
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 80012e8:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012ec:	00db      	lsls	r3, r3, #3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f938 	bl	8000564 <__aeabi_i2d>
 80012f4:	a3de      	add	r3, pc, #888	; (adr r3, 8001670 <isr_fall+0x5f8>)
 80012f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012fa:	f7ff f99d 	bl	8000638 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4614      	mov	r4, r2
 8001304:	461d      	mov	r5, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff f92c 	bl	8000564 <__aeabi_i2d>
 800130c:	4602      	mov	r2, r0
 800130e:	460b      	mov	r3, r1
 8001310:	4620      	mov	r0, r4
 8001312:	4629      	mov	r1, r5
 8001314:	f7ff fc02 	bl	8000b1c <__aeabi_dcmplt>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d056      	beq.n	80013cc <isr_fall+0x354>
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff f920 	bl	8000564 <__aeabi_i2d>
 8001324:	4604      	mov	r4, r0
 8001326:	460d      	mov	r5, r1
 8001328:	f240 13a9 	movw	r3, #425	; 0x1a9
 800132c:	00db      	lsls	r3, r3, #3
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f918 	bl	8000564 <__aeabi_i2d>
 8001334:	a3d0      	add	r3, pc, #832	; (adr r3, 8001678 <isr_fall+0x600>)
 8001336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133a:	f7ff f97d 	bl	8000638 <__aeabi_dmul>
 800133e:	4602      	mov	r2, r0
 8001340:	460b      	mov	r3, r1
 8001342:	4620      	mov	r0, r4
 8001344:	4629      	mov	r1, r5
 8001346:	f7ff fbe9 	bl	8000b1c <__aeabi_dcmplt>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d03d      	beq.n	80013cc <isr_fall+0x354>
 8001350:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001354:	009b      	lsls	r3, r3, #2
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff f904 	bl	8000564 <__aeabi_i2d>
 800135c:	a3c4      	add	r3, pc, #784	; (adr r3, 8001670 <isr_fall+0x5f8>)
 800135e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001362:	f7ff f969 	bl	8000638 <__aeabi_dmul>
 8001366:	4602      	mov	r2, r0
 8001368:	460b      	mov	r3, r1
 800136a:	4614      	mov	r4, r2
 800136c:	461d      	mov	r5, r3
 800136e:	6838      	ldr	r0, [r7, #0]
 8001370:	f7ff f8f8 	bl	8000564 <__aeabi_i2d>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4620      	mov	r0, r4
 800137a:	4629      	mov	r1, r5
 800137c:	f7ff fbce 	bl	8000b1c <__aeabi_dcmplt>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d022      	beq.n	80013cc <isr_fall+0x354>
 8001386:	6838      	ldr	r0, [r7, #0]
 8001388:	f7ff f8ec 	bl	8000564 <__aeabi_i2d>
 800138c:	4604      	mov	r4, r0
 800138e:	460d      	mov	r5, r1
 8001390:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001394:	009b      	lsls	r3, r3, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f8e4 	bl	8000564 <__aeabi_i2d>
 800139c:	a3b6      	add	r3, pc, #728	; (adr r3, 8001678 <isr_fall+0x600>)
 800139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a2:	f7ff f949 	bl	8000638 <__aeabi_dmul>
 80013a6:	4602      	mov	r2, r0
 80013a8:	460b      	mov	r3, r1
 80013aa:	4620      	mov	r0, r4
 80013ac:	4629      	mov	r1, r5
 80013ae:	f7ff fbb5 	bl	8000b1c <__aeabi_dcmplt>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d009      	beq.n	80013cc <isr_fall+0x354>
                    data.format = AEHA;
 80013b8:	4bb1      	ldr	r3, [pc, #708]	; (8001680 <isr_fall+0x608>)
 80013ba:	2203      	movs	r2, #3
 80013bc:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80013be:	4bb1      	ldr	r3, [pc, #708]	; (8001684 <isr_fall+0x60c>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80013c4:	4bae      	ldr	r3, [pc, #696]	; (8001680 <isr_fall+0x608>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	e088      	b.n	80014de <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 80013cc:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff f8c6 	bl	8000564 <__aeabi_i2d>
 80013d8:	a3a5      	add	r3, pc, #660	; (adr r3, 8001670 <isr_fall+0x5f8>)
 80013da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013de:	f7ff f92b 	bl	8000638 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4614      	mov	r4, r2
 80013e8:	461d      	mov	r5, r3
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff f8ba 	bl	8000564 <__aeabi_i2d>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4620      	mov	r0, r4
 80013f6:	4629      	mov	r1, r5
 80013f8:	f7ff fb90 	bl	8000b1c <__aeabi_dcmplt>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d06a      	beq.n	80014d8 <isr_fall+0x460>
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff f8ae 	bl	8000564 <__aeabi_i2d>
 8001408:	4604      	mov	r4, r0
 800140a:	460d      	mov	r5, r1
 800140c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001410:	00db      	lsls	r3, r3, #3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff f8a6 	bl	8000564 <__aeabi_i2d>
 8001418:	a397      	add	r3, pc, #604	; (adr r3, 8001678 <isr_fall+0x600>)
 800141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141e:	f7ff f90b 	bl	8000638 <__aeabi_dmul>
 8001422:	4602      	mov	r2, r0
 8001424:	460b      	mov	r3, r1
 8001426:	4620      	mov	r0, r4
 8001428:	4629      	mov	r1, r5
 800142a:	f7ff fb77 	bl	8000b1c <__aeabi_dcmplt>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d051      	beq.n	80014d8 <isr_fall+0x460>
 8001434:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001438:	00db      	lsls	r3, r3, #3
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff f892 	bl	8000564 <__aeabi_i2d>
 8001440:	a38b      	add	r3, pc, #556	; (adr r3, 8001670 <isr_fall+0x5f8>)
 8001442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001446:	f7ff f8f7 	bl	8000638 <__aeabi_dmul>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff f886 	bl	8000564 <__aeabi_i2d>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4620      	mov	r0, r4
 800145e:	4629      	mov	r1, r5
 8001460:	f7ff fb5c 	bl	8000b1c <__aeabi_dcmplt>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d036      	beq.n	80014d8 <isr_fall+0x460>
 800146a:	6838      	ldr	r0, [r7, #0]
 800146c:	f7ff f87a 	bl	8000564 <__aeabi_i2d>
 8001470:	4604      	mov	r4, r0
 8001472:	460d      	mov	r5, r1
 8001474:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f872 	bl	8000564 <__aeabi_i2d>
 8001480:	a37d      	add	r3, pc, #500	; (adr r3, 8001678 <isr_fall+0x600>)
 8001482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001486:	f7ff f8d7 	bl	8000638 <__aeabi_dmul>
 800148a:	4602      	mov	r2, r0
 800148c:	460b      	mov	r3, r1
 800148e:	4620      	mov	r0, r4
 8001490:	4629      	mov	r1, r5
 8001492:	f7ff fb43 	bl	8000b1c <__aeabi_dcmplt>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d01d      	beq.n	80014d8 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 800149c:	4b78      	ldr	r3, [pc, #480]	; (8001680 <isr_fall+0x608>)
 800149e:	2204      	movs	r2, #4
 80014a0:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 80014a2:	4b78      	ldr	r3, [pc, #480]	; (8001684 <isr_fall+0x60c>)
 80014a4:	2202      	movs	r2, #2
 80014a6:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80014a8:	4b75      	ldr	r3, [pc, #468]	; (8001680 <isr_fall+0x608>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 80014ae:	4b75      	ldr	r3, [pc, #468]	; (8001684 <isr_fall+0x60c>)
 80014b0:	f04f 32ff 	mov.w	r2, #4294967295
 80014b4:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80014b6:	4b73      	ldr	r3, [pc, #460]	; (8001684 <isr_fall+0x60c>)
 80014b8:	f04f 32ff 	mov.w	r2, #4294967295
 80014bc:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80014be:	4b71      	ldr	r3, [pc, #452]	; (8001684 <isr_fall+0x60c>)
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80014c6:	4b6f      	ldr	r3, [pc, #444]	; (8001684 <isr_fall+0x60c>)
 80014c8:	f04f 32ff 	mov.w	r2, #4294967295
 80014cc:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80014ce:	4b6d      	ldr	r3, [pc, #436]	; (8001684 <isr_fall+0x60c>)
 80014d0:	f04f 32ff 	mov.w	r2, #4294967295
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	e002      	b.n	80014de <isr_fall+0x466>
                    init_state();//HAL_GPIO_TogglePin(Rsig_GPIO_Port, Rsig_Pin);
 80014d8:	f7ff fd86 	bl	8000fe8 <init_state>
            break;
 80014dc:	e1a6      	b.n	800182c <isr_fall+0x7b4>
 80014de:	e1a5      	b.n	800182c <isr_fall+0x7b4>
            if (NEC == data.format) {
 80014e0:	4b67      	ldr	r3, [pc, #412]	; (8001680 <isr_fall+0x608>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	f040 80d3 	bne.w	8001690 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80014ea:	4b67      	ldr	r3, [pc, #412]	; (8001688 <isr_fall+0x610>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a65      	ldr	r2, [pc, #404]	; (8001684 <isr_fall+0x60c>)
 80014f0:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80014f2:	4b64      	ldr	r3, [pc, #400]	; (8001684 <isr_fall+0x60c>)
 80014f4:	695a      	ldr	r2, [r3, #20]
 80014f6:	4b63      	ldr	r3, [pc, #396]	; (8001684 <isr_fall+0x60c>)
 80014f8:	691b      	ldr	r3, [r3, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 80014fe:	f240 2232 	movw	r2, #562	; 0x232
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f82b 	bl	8000564 <__aeabi_i2d>
 800150e:	a358      	add	r3, pc, #352	; (adr r3, 8001670 <isr_fall+0x5f8>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7ff f890 	bl	8000638 <__aeabi_dmul>
 8001518:	4602      	mov	r2, r0
 800151a:	460b      	mov	r3, r1
 800151c:	4614      	mov	r4, r2
 800151e:	461d      	mov	r5, r3
 8001520:	68b8      	ldr	r0, [r7, #8]
 8001522:	f7ff f81f 	bl	8000564 <__aeabi_i2d>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4620      	mov	r0, r4
 800152c:	4629      	mov	r1, r5
 800152e:	f7ff faf5 	bl	8000b1c <__aeabi_dcmplt>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d03a      	beq.n	80015ae <isr_fall+0x536>
 8001538:	68b8      	ldr	r0, [r7, #8]
 800153a:	f7ff f813 	bl	8000564 <__aeabi_i2d>
 800153e:	4604      	mov	r4, r0
 8001540:	460d      	mov	r5, r1
 8001542:	f240 2232 	movw	r2, #562	; 0x232
 8001546:	4613      	mov	r3, r2
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	4413      	add	r3, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff f809 	bl	8000564 <__aeabi_i2d>
 8001552:	a349      	add	r3, pc, #292	; (adr r3, 8001678 <isr_fall+0x600>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	f7ff f86e 	bl	8000638 <__aeabi_dmul>
 800155c:	4602      	mov	r2, r0
 800155e:	460b      	mov	r3, r1
 8001560:	4620      	mov	r0, r4
 8001562:	4629      	mov	r1, r5
 8001564:	f7ff fada 	bl	8000b1c <__aeabi_dcmplt>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d01f      	beq.n	80015ae <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800156e:	4b44      	ldr	r3, [pc, #272]	; (8001680 <isr_fall+0x608>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	da00      	bge.n	8001578 <isr_fall+0x500>
 8001576:	3307      	adds	r3, #7
 8001578:	10db      	asrs	r3, r3, #3
 800157a:	461a      	mov	r2, r3
 800157c:	4b40      	ldr	r3, [pc, #256]	; (8001680 <isr_fall+0x608>)
 800157e:	4413      	add	r3, r2
 8001580:	7a1b      	ldrb	r3, [r3, #8]
 8001582:	b259      	sxtb	r1, r3
 8001584:	4b3e      	ldr	r3, [pc, #248]	; (8001680 <isr_fall+0x608>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	4258      	negs	r0, r3
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	f000 0007 	and.w	r0, r0, #7
 8001592:	bf58      	it	pl
 8001594:	4243      	negpl	r3, r0
 8001596:	2001      	movs	r0, #1
 8001598:	fa00 f303 	lsl.w	r3, r0, r3
 800159c:	b25b      	sxtb	r3, r3
 800159e:	430b      	orrs	r3, r1
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <isr_fall+0x608>)
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	721a      	strb	r2, [r3, #8]
 80015ac:	e052      	b.n	8001654 <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 80015ae:	f240 2332 	movw	r3, #562	; 0x232
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7fe ffd6 	bl	8000564 <__aeabi_i2d>
 80015b8:	a32d      	add	r3, pc, #180	; (adr r3, 8001670 <isr_fall+0x5f8>)
 80015ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015be:	f7ff f83b 	bl	8000638 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	4614      	mov	r4, r2
 80015c8:	461d      	mov	r5, r3
 80015ca:	68b8      	ldr	r0, [r7, #8]
 80015cc:	f7fe ffca 	bl	8000564 <__aeabi_i2d>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4620      	mov	r0, r4
 80015d6:	4629      	mov	r1, r5
 80015d8:	f7ff faa0 	bl	8000b1c <__aeabi_dcmplt>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d038      	beq.n	8001654 <isr_fall+0x5dc>
 80015e2:	68b8      	ldr	r0, [r7, #8]
 80015e4:	f7fe ffbe 	bl	8000564 <__aeabi_i2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	f240 2332 	movw	r3, #562	; 0x232
 80015f0:	4618      	mov	r0, r3
 80015f2:	f7fe ffb7 	bl	8000564 <__aeabi_i2d>
 80015f6:	a320      	add	r3, pc, #128	; (adr r3, 8001678 <isr_fall+0x600>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7ff f81c 	bl	8000638 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7ff fa88 	bl	8000b1c <__aeabi_dcmplt>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d020      	beq.n	8001654 <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <isr_fall+0x608>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	da00      	bge.n	800161c <isr_fall+0x5a4>
 800161a:	3307      	adds	r3, #7
 800161c:	10db      	asrs	r3, r3, #3
 800161e:	461a      	mov	r2, r3
 8001620:	4b17      	ldr	r3, [pc, #92]	; (8001680 <isr_fall+0x608>)
 8001622:	4413      	add	r3, r2
 8001624:	7a1b      	ldrb	r3, [r3, #8]
 8001626:	b259      	sxtb	r1, r3
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <isr_fall+0x608>)
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	4258      	negs	r0, r3
 800162e:	f003 0307 	and.w	r3, r3, #7
 8001632:	f000 0007 	and.w	r0, r0, #7
 8001636:	bf58      	it	pl
 8001638:	4243      	negpl	r3, r0
 800163a:	2001      	movs	r0, #1
 800163c:	fa00 f303 	lsl.w	r3, r0, r3
 8001640:	b25b      	sxtb	r3, r3
 8001642:	43db      	mvns	r3, r3
 8001644:	b25b      	sxtb	r3, r3
 8001646:	400b      	ands	r3, r1
 8001648:	b25b      	sxtb	r3, r3
 800164a:	b2d9      	uxtb	r1, r3
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <isr_fall+0x608>)
 800164e:	4413      	add	r3, r2
 8001650:	460a      	mov	r2, r1
 8001652:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <isr_fall+0x608>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	3301      	adds	r3, #1
 800165a:	4a09      	ldr	r2, [pc, #36]	; (8001680 <isr_fall+0x608>)
 800165c:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <isr_fall+0x608>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b1e      	cmp	r3, #30
 8001664:	f340 80e1 	ble.w	800182a <isr_fall+0x7b2>
 8001668:	4b08      	ldr	r3, [pc, #32]	; (800168c <isr_fall+0x614>)
 800166a:	2201      	movs	r2, #1
 800166c:	701a      	strb	r2, [r3, #0]
            break;
 800166e:	e0dc      	b.n	800182a <isr_fall+0x7b2>
 8001670:	66666666 	.word	0x66666666
 8001674:	3fe66666 	.word	0x3fe66666
 8001678:	cccccccd 	.word	0xcccccccd
 800167c:	3ff4cccc 	.word	0x3ff4cccc
 8001680:	20000264 	.word	0x20000264
 8001684:	200002ac 	.word	0x200002ac
 8001688:	200002e4 	.word	0x200002e4
 800168c:	200002e9 	.word	0x200002e9
            } else if (AEHA == data.format) {
 8001690:	4b6d      	ldr	r3, [pc, #436]	; (8001848 <isr_fall+0x7d0>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b03      	cmp	r3, #3
 8001696:	f040 80bb 	bne.w	8001810 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800169a:	4b6c      	ldr	r3, [pc, #432]	; (800184c <isr_fall+0x7d4>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a6c      	ldr	r2, [pc, #432]	; (8001850 <isr_fall+0x7d8>)
 80016a0:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80016a2:	4b6b      	ldr	r3, [pc, #428]	; (8001850 <isr_fall+0x7d8>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4b6a      	ldr	r3, [pc, #424]	; (8001850 <isr_fall+0x7d8>)
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 80016ae:	f240 12a9 	movw	r2, #425	; 0x1a9
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff53 	bl	8000564 <__aeabi_i2d>
 80016be:	a35e      	add	r3, pc, #376	; (adr r3, 8001838 <isr_fall+0x7c0>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7fe ffb8 	bl	8000638 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f7fe ff47 	bl	8000564 <__aeabi_i2d>
 80016d6:	4602      	mov	r2, r0
 80016d8:	460b      	mov	r3, r1
 80016da:	4620      	mov	r0, r4
 80016dc:	4629      	mov	r1, r5
 80016de:	f7ff fa1d 	bl	8000b1c <__aeabi_dcmplt>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d03a      	beq.n	800175e <isr_fall+0x6e6>
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7fe ff3b 	bl	8000564 <__aeabi_i2d>
 80016ee:	4604      	mov	r4, r0
 80016f0:	460d      	mov	r5, r1
 80016f2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80016f6:	4613      	mov	r3, r2
 80016f8:	005b      	lsls	r3, r3, #1
 80016fa:	4413      	add	r3, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe ff31 	bl	8000564 <__aeabi_i2d>
 8001702:	a34f      	add	r3, pc, #316	; (adr r3, 8001840 <isr_fall+0x7c8>)
 8001704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001708:	f7fe ff96 	bl	8000638 <__aeabi_dmul>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4620      	mov	r0, r4
 8001712:	4629      	mov	r1, r5
 8001714:	f7ff fa02 	bl	8000b1c <__aeabi_dcmplt>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d01f      	beq.n	800175e <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800171e:	4b4a      	ldr	r3, [pc, #296]	; (8001848 <isr_fall+0x7d0>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	da00      	bge.n	8001728 <isr_fall+0x6b0>
 8001726:	3307      	adds	r3, #7
 8001728:	10db      	asrs	r3, r3, #3
 800172a:	461a      	mov	r2, r3
 800172c:	4b46      	ldr	r3, [pc, #280]	; (8001848 <isr_fall+0x7d0>)
 800172e:	4413      	add	r3, r2
 8001730:	7a1b      	ldrb	r3, [r3, #8]
 8001732:	b259      	sxtb	r1, r3
 8001734:	4b44      	ldr	r3, [pc, #272]	; (8001848 <isr_fall+0x7d0>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	4258      	negs	r0, r3
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	f000 0007 	and.w	r0, r0, #7
 8001742:	bf58      	it	pl
 8001744:	4243      	negpl	r3, r0
 8001746:	2001      	movs	r0, #1
 8001748:	fa00 f303 	lsl.w	r3, r0, r3
 800174c:	b25b      	sxtb	r3, r3
 800174e:	430b      	orrs	r3, r1
 8001750:	b25b      	sxtb	r3, r3
 8001752:	b2d9      	uxtb	r1, r3
 8001754:	4b3c      	ldr	r3, [pc, #240]	; (8001848 <isr_fall+0x7d0>)
 8001756:	4413      	add	r3, r2
 8001758:	460a      	mov	r2, r1
 800175a:	721a      	strb	r2, [r3, #8]
 800175c:	e052      	b.n	8001804 <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 800175e:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fefe 	bl	8000564 <__aeabi_i2d>
 8001768:	a333      	add	r3, pc, #204	; (adr r3, 8001838 <isr_fall+0x7c0>)
 800176a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176e:	f7fe ff63 	bl	8000638 <__aeabi_dmul>
 8001772:	4602      	mov	r2, r0
 8001774:	460b      	mov	r3, r1
 8001776:	4614      	mov	r4, r2
 8001778:	461d      	mov	r5, r3
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f7fe fef2 	bl	8000564 <__aeabi_i2d>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	4620      	mov	r0, r4
 8001786:	4629      	mov	r1, r5
 8001788:	f7ff f9c8 	bl	8000b1c <__aeabi_dcmplt>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d038      	beq.n	8001804 <isr_fall+0x78c>
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f7fe fee6 	bl	8000564 <__aeabi_i2d>
 8001798:	4604      	mov	r4, r0
 800179a:	460d      	mov	r5, r1
 800179c:	f240 13a9 	movw	r3, #425	; 0x1a9
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7fe fedf 	bl	8000564 <__aeabi_i2d>
 80017a6:	a326      	add	r3, pc, #152	; (adr r3, 8001840 <isr_fall+0x7c8>)
 80017a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ac:	f7fe ff44 	bl	8000638 <__aeabi_dmul>
 80017b0:	4602      	mov	r2, r0
 80017b2:	460b      	mov	r3, r1
 80017b4:	4620      	mov	r0, r4
 80017b6:	4629      	mov	r1, r5
 80017b8:	f7ff f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d020      	beq.n	8001804 <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <isr_fall+0x7d0>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	da00      	bge.n	80017cc <isr_fall+0x754>
 80017ca:	3307      	adds	r3, #7
 80017cc:	10db      	asrs	r3, r3, #3
 80017ce:	461a      	mov	r2, r3
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <isr_fall+0x7d0>)
 80017d2:	4413      	add	r3, r2
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	b259      	sxtb	r1, r3
 80017d8:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <isr_fall+0x7d0>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	4258      	negs	r0, r3
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	f000 0007 	and.w	r0, r0, #7
 80017e6:	bf58      	it	pl
 80017e8:	4243      	negpl	r3, r0
 80017ea:	2001      	movs	r0, #1
 80017ec:	fa00 f303 	lsl.w	r3, r0, r3
 80017f0:	b25b      	sxtb	r3, r3
 80017f2:	43db      	mvns	r3, r3
 80017f4:	b25b      	sxtb	r3, r3
 80017f6:	400b      	ands	r3, r1
 80017f8:	b25b      	sxtb	r3, r3
 80017fa:	b2d9      	uxtb	r1, r3
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <isr_fall+0x7d0>)
 80017fe:	4413      	add	r3, r2
 8001800:	460a      	mov	r2, r1
 8001802:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <isr_fall+0x7d0>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	3301      	adds	r3, #1
 800180a:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <isr_fall+0x7d0>)
 800180c:	6053      	str	r3, [r2, #4]
            break;
 800180e:	e00c      	b.n	800182a <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <isr_fall+0x7d0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b05      	cmp	r3, #5
 8001816:	d108      	bne.n	800182a <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <isr_fall+0x7d4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <isr_fall+0x7d8>)
 800181e:	6113      	str	r3, [r2, #16]
            break;
 8001820:	e003      	b.n	800182a <isr_fall+0x7b2>
            break;
 8001822:	bf00      	nop
 8001824:	e002      	b.n	800182c <isr_fall+0x7b4>
            break;
 8001826:	bf00      	nop
 8001828:	e000      	b.n	800182c <isr_fall+0x7b4>
            break;
 800182a:	bf00      	nop
    }
    UNLOCK();
}
 800182c:	bf00      	nop
 800182e:	3710      	adds	r7, #16
 8001830:	46bd      	mov	sp, r7
 8001832:	bdb0      	pop	{r4, r5, r7, pc}
 8001834:	f3af 8000 	nop.w
 8001838:	66666666 	.word	0x66666666
 800183c:	3fe66666 	.word	0x3fe66666
 8001840:	cccccccd 	.word	0xcccccccd
 8001844:	3ff4cccc 	.word	0x3ff4cccc
 8001848:	20000264 	.word	0x20000264
 800184c:	200002e4 	.word	0x200002e4
 8001850:	200002ac 	.word	0x200002ac
 8001854:	00000000 	.word	0x00000000

08001858 <isr_rise>:

void isr_rise(void) {
 8001858:	b5b0      	push	{r4, r5, r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 800185e:	4ba4      	ldr	r3, [pc, #656]	; (8001af0 <isr_rise+0x298>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b02      	cmp	r3, #2
 8001864:	f000 812e 	beq.w	8001ac4 <isr_rise+0x26c>
 8001868:	2b02      	cmp	r3, #2
 800186a:	f300 812d 	bgt.w	8001ac8 <isr_rise+0x270>
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <isr_rise+0x20>
 8001872:	2b01      	cmp	r3, #1
 8001874:	d058      	beq.n	8001928 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001876:	e127      	b.n	8001ac8 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001878:	4b9d      	ldr	r3, [pc, #628]	; (8001af0 <isr_rise+0x298>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db50      	blt.n	8001922 <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001880:	4b9c      	ldr	r3, [pc, #624]	; (8001af4 <isr_rise+0x29c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a9a      	ldr	r2, [pc, #616]	; (8001af0 <isr_rise+0x298>)
 8001886:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001888:	4b99      	ldr	r3, [pc, #612]	; (8001af0 <isr_rise+0x298>)
 800188a:	689a      	ldr	r2, [r3, #8]
 800188c:	4b98      	ldr	r3, [pc, #608]	; (8001af0 <isr_rise+0x298>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 8001894:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe62 	bl	8000564 <__aeabi_i2d>
 80018a0:	a38f      	add	r3, pc, #572	; (adr r3, 8001ae0 <isr_rise+0x288>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe fec7 	bl	8000638 <__aeabi_dmul>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4614      	mov	r4, r2
 80018b0:	461d      	mov	r5, r3
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	f7fe fe56 	bl	8000564 <__aeabi_i2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7ff f92c 	bl	8000b1c <__aeabi_dcmplt>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d022      	beq.n	8001910 <isr_rise+0xb8>
 80018ca:	6838      	ldr	r0, [r7, #0]
 80018cc:	f7fe fe4a 	bl	8000564 <__aeabi_i2d>
 80018d0:	4604      	mov	r4, r0
 80018d2:	460d      	mov	r5, r1
 80018d4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fe42 	bl	8000564 <__aeabi_i2d>
 80018e0:	a381      	add	r3, pc, #516	; (adr r3, 8001ae8 <isr_rise+0x290>)
 80018e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e6:	f7fe fea7 	bl	8000638 <__aeabi_dmul>
 80018ea:	4602      	mov	r2, r0
 80018ec:	460b      	mov	r3, r1
 80018ee:	4620      	mov	r0, r4
 80018f0:	4629      	mov	r1, r5
 80018f2:	f7ff f913 	bl	8000b1c <__aeabi_dcmplt>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d009      	beq.n	8001910 <isr_rise+0xb8>
                    data.format = SONY;
 80018fc:	4b7e      	ldr	r3, [pc, #504]	; (8001af8 <isr_rise+0x2a0>)
 80018fe:	2205      	movs	r2, #5
 8001900:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001902:	4b7b      	ldr	r3, [pc, #492]	; (8001af0 <isr_rise+0x298>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001908:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <isr_rise+0x2a0>)
 800190a:	2200      	movs	r2, #0
 800190c:	605a      	str	r2, [r3, #4]
            break;
 800190e:	e0dd      	b.n	8001acc <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 8001910:	4b7a      	ldr	r3, [pc, #488]	; (8001afc <isr_rise+0x2a4>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	683a      	ldr	r2, [r7, #0]
 8001916:	429a      	cmp	r2, r3
 8001918:	f280 80d8 	bge.w	8001acc <isr_rise+0x274>
                        init_state();//HAL_GPIO_TogglePin(Gsig_GPIO_Port, Gsig_Pin);
 800191c:	f7ff fb64 	bl	8000fe8 <init_state>
            break;
 8001920:	e0d4      	b.n	8001acc <isr_rise+0x274>
                init_state();//HAL_GPIO_TogglePin(Bsig_GPIO_Port, Bsig_Pin);
 8001922:	f7ff fb61 	bl	8000fe8 <init_state>
            break;
 8001926:	e0d1      	b.n	8001acc <isr_rise+0x274>
            if (NEC == data.format) {
 8001928:	4b73      	ldr	r3, [pc, #460]	; (8001af8 <isr_rise+0x2a0>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d104      	bne.n	800193a <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001930:	4b70      	ldr	r3, [pc, #448]	; (8001af4 <isr_rise+0x29c>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a6e      	ldr	r2, [pc, #440]	; (8001af0 <isr_rise+0x298>)
 8001936:	6113      	str	r3, [r2, #16]
            break;
 8001938:	e0ca      	b.n	8001ad0 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 800193a:	4b6f      	ldr	r3, [pc, #444]	; (8001af8 <isr_rise+0x2a0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b03      	cmp	r3, #3
 8001940:	d104      	bne.n	800194c <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001942:	4b6c      	ldr	r3, [pc, #432]	; (8001af4 <isr_rise+0x29c>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <isr_rise+0x298>)
 8001948:	6113      	str	r3, [r2, #16]
            break;
 800194a:	e0c1      	b.n	8001ad0 <isr_rise+0x278>
            } else if (SONY == data.format) {
 800194c:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <isr_rise+0x2a0>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b05      	cmp	r3, #5
 8001952:	f040 80bd 	bne.w	8001ad0 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 8001956:	4b67      	ldr	r3, [pc, #412]	; (8001af4 <isr_rise+0x29c>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a65      	ldr	r2, [pc, #404]	; (8001af0 <isr_rise+0x298>)
 800195c:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 800195e:	4b64      	ldr	r3, [pc, #400]	; (8001af0 <isr_rise+0x298>)
 8001960:	695a      	ldr	r2, [r3, #20]
 8001962:	4b63      	ldr	r3, [pc, #396]	; (8001af0 <isr_rise+0x298>)
 8001964:	691b      	ldr	r3, [r3, #16]
 8001966:	1ad3      	subs	r3, r2, r3
 8001968:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 800196a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fdf7 	bl	8000564 <__aeabi_i2d>
 8001976:	a35a      	add	r3, pc, #360	; (adr r3, 8001ae0 <isr_rise+0x288>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fe5c 	bl	8000638 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4614      	mov	r4, r2
 8001986:	461d      	mov	r5, r3
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7fe fdeb 	bl	8000564 <__aeabi_i2d>
 800198e:	4602      	mov	r2, r0
 8001990:	460b      	mov	r3, r1
 8001992:	4620      	mov	r0, r4
 8001994:	4629      	mov	r1, r5
 8001996:	f7ff f8c1 	bl	8000b1c <__aeabi_dcmplt>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d038      	beq.n	8001a12 <isr_rise+0x1ba>
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f7fe fddf 	bl	8000564 <__aeabi_i2d>
 80019a6:	4604      	mov	r4, r0
 80019a8:	460d      	mov	r5, r1
 80019aa:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	4618      	mov	r0, r3
 80019b2:	f7fe fdd7 	bl	8000564 <__aeabi_i2d>
 80019b6:	a34c      	add	r3, pc, #304	; (adr r3, 8001ae8 <isr_rise+0x290>)
 80019b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019bc:	f7fe fe3c 	bl	8000638 <__aeabi_dmul>
 80019c0:	4602      	mov	r2, r0
 80019c2:	460b      	mov	r3, r1
 80019c4:	4620      	mov	r0, r4
 80019c6:	4629      	mov	r1, r5
 80019c8:	f7ff f8a8 	bl	8000b1c <__aeabi_dcmplt>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01f      	beq.n	8001a12 <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80019d2:	4b49      	ldr	r3, [pc, #292]	; (8001af8 <isr_rise+0x2a0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	da00      	bge.n	80019dc <isr_rise+0x184>
 80019da:	3307      	adds	r3, #7
 80019dc:	10db      	asrs	r3, r3, #3
 80019de:	461a      	mov	r2, r3
 80019e0:	4b45      	ldr	r3, [pc, #276]	; (8001af8 <isr_rise+0x2a0>)
 80019e2:	4413      	add	r3, r2
 80019e4:	7a1b      	ldrb	r3, [r3, #8]
 80019e6:	b259      	sxtb	r1, r3
 80019e8:	4b43      	ldr	r3, [pc, #268]	; (8001af8 <isr_rise+0x2a0>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	4258      	negs	r0, r3
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	f000 0007 	and.w	r0, r0, #7
 80019f6:	bf58      	it	pl
 80019f8:	4243      	negpl	r3, r0
 80019fa:	2001      	movs	r0, #1
 80019fc:	fa00 f303 	lsl.w	r3, r0, r3
 8001a00:	b25b      	sxtb	r3, r3
 8001a02:	430b      	orrs	r3, r1
 8001a04:	b25b      	sxtb	r3, r3
 8001a06:	b2d9      	uxtb	r1, r3
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <isr_rise+0x2a0>)
 8001a0a:	4413      	add	r3, r2
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	721a      	strb	r2, [r3, #8]
 8001a10:	e052      	b.n	8001ab8 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 8001a12:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a16:	4618      	mov	r0, r3
 8001a18:	f7fe fda4 	bl	8000564 <__aeabi_i2d>
 8001a1c:	a330      	add	r3, pc, #192	; (adr r3, 8001ae0 <isr_rise+0x288>)
 8001a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a22:	f7fe fe09 	bl	8000638 <__aeabi_dmul>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4614      	mov	r4, r2
 8001a2c:	461d      	mov	r5, r3
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7fe fd98 	bl	8000564 <__aeabi_i2d>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4620      	mov	r0, r4
 8001a3a:	4629      	mov	r1, r5
 8001a3c:	f7ff f86e 	bl	8000b1c <__aeabi_dcmplt>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d038      	beq.n	8001ab8 <isr_rise+0x260>
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7fe fd8c 	bl	8000564 <__aeabi_i2d>
 8001a4c:	4604      	mov	r4, r0
 8001a4e:	460d      	mov	r5, r1
 8001a50:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd85 	bl	8000564 <__aeabi_i2d>
 8001a5a:	a323      	add	r3, pc, #140	; (adr r3, 8001ae8 <isr_rise+0x290>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe fdea 	bl	8000638 <__aeabi_dmul>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4620      	mov	r0, r4
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	f7ff f856 	bl	8000b1c <__aeabi_dcmplt>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d020      	beq.n	8001ab8 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001a76:	4b20      	ldr	r3, [pc, #128]	; (8001af8 <isr_rise+0x2a0>)
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	da00      	bge.n	8001a80 <isr_rise+0x228>
 8001a7e:	3307      	adds	r3, #7
 8001a80:	10db      	asrs	r3, r3, #3
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b1c      	ldr	r3, [pc, #112]	; (8001af8 <isr_rise+0x2a0>)
 8001a86:	4413      	add	r3, r2
 8001a88:	7a1b      	ldrb	r3, [r3, #8]
 8001a8a:	b259      	sxtb	r1, r3
 8001a8c:	4b1a      	ldr	r3, [pc, #104]	; (8001af8 <isr_rise+0x2a0>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	4258      	negs	r0, r3
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	f000 0007 	and.w	r0, r0, #7
 8001a9a:	bf58      	it	pl
 8001a9c:	4243      	negpl	r3, r0
 8001a9e:	2001      	movs	r0, #1
 8001aa0:	fa00 f303 	lsl.w	r3, r0, r3
 8001aa4:	b25b      	sxtb	r3, r3
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	b25b      	sxtb	r3, r3
 8001aaa:	400b      	ands	r3, r1
 8001aac:	b25b      	sxtb	r3, r3
 8001aae:	b2d9      	uxtb	r1, r3
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <isr_rise+0x2a0>)
 8001ab2:	4413      	add	r3, r2
 8001ab4:	460a      	mov	r2, r1
 8001ab6:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001ab8:	4b0f      	ldr	r3, [pc, #60]	; (8001af8 <isr_rise+0x2a0>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	3301      	adds	r3, #1
 8001abe:	4a0e      	ldr	r2, [pc, #56]	; (8001af8 <isr_rise+0x2a0>)
 8001ac0:	6053      	str	r3, [r2, #4]
            break;
 8001ac2:	e005      	b.n	8001ad0 <isr_rise+0x278>
            break;
 8001ac4:	bf00      	nop
 8001ac6:	e004      	b.n	8001ad2 <isr_rise+0x27a>
            break;
 8001ac8:	bf00      	nop
 8001aca:	e002      	b.n	8001ad2 <isr_rise+0x27a>
            break;
 8001acc:	bf00      	nop
 8001ace:	e000      	b.n	8001ad2 <isr_rise+0x27a>
            break;
 8001ad0:	bf00      	nop
    }
    UNLOCK();
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bdb0      	pop	{r4, r5, r7, pc}
 8001ada:	bf00      	nop
 8001adc:	f3af 8000 	nop.w
 8001ae0:	66666666 	.word	0x66666666
 8001ae4:	3fe66666 	.word	0x3fe66666
 8001ae8:	cccccccd 	.word	0xcccccccd
 8001aec:	3ff4cccc 	.word	0x3ff4cccc
 8001af0:	200002ac 	.word	0x200002ac
 8001af4:	200002e4 	.word	0x200002e4
 8001af8:	20000264 	.word	0x20000264
 8001afc:	0800cf90 	.word	0x0800cf90

08001b00 <isr_timeout>:

void isr_timeout(void) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001b04:	4b12      	ldr	r3, [pc, #72]	; (8001b50 <isr_timeout+0x50>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d11f      	bne.n	8001b4c <isr_timeout+0x4c>
        work.state = Received;
 8001b0c:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <isr_timeout+0x50>)
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); //input interrupt stop
 8001b12:	2006      	movs	r0, #6
 8001b14:	f005 f98f 	bl	8006e36 <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 8001b18:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <isr_timeout+0x54>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 8001b1e:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <isr_timeout+0x58>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <isr_timeout+0x50>)
 8001b26:	f04f 32ff 	mov.w	r2, #4294967295
 8001b2a:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <isr_timeout+0x50>)
 8001b2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b32:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001b34:	4b06      	ldr	r3, [pc, #24]	; (8001b50 <isr_timeout+0x50>)
 8001b36:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3a:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001b3c:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <isr_timeout+0x50>)
 8001b3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b42:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001b44:	4b02      	ldr	r3, [pc, #8]	; (8001b50 <isr_timeout+0x50>)
 8001b46:	f04f 32ff 	mov.w	r2, #4294967295
 8001b4a:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001b4c:	bf00      	nop
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	200002ac 	.word	0x200002ac
 8001b54:	200002e9 	.word	0x200002e9
 8001b58:	200002e8 	.word	0x200002e8

08001b5c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b60:	f3bf 8f4f 	dsb	sy
}
 8001b64:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b66:	4b06      	ldr	r3, [pc, #24]	; (8001b80 <__NVIC_SystemReset+0x24>)
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b6e:	4904      	ldr	r1, [pc, #16]	; (8001b80 <__NVIC_SystemReset+0x24>)
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <__NVIC_SystemReset+0x28>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b76:	f3bf 8f4f 	dsb	sy
}
 8001b7a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b7c:	bf00      	nop
 8001b7e:	e7fd      	b.n	8001b7c <__NVIC_SystemReset+0x20>
 8001b80:	e000ed00 	.word	0xe000ed00
 8001b84:	05fa0004 	.word	0x05fa0004

08001b88 <HAL_TIM_PeriodElapsedCallback>:

uint8_t inhome=0;
int ir_count_idle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)//uss timer, 10khz
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a30      	ldr	r2, [pc, #192]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d104      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8001b9a:	4b30      	ldr	r3, [pc, #192]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a2e      	ldr	r2, [pc, #184]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001ba2:	6013      	str	r3, [r2, #0]
//	  if(us_Tick>0xffff0000){us_Tick=0;}

  }

  if(htim->Instance == TIM6)//system timer, 100hz
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a2d      	ldr	r2, [pc, #180]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d127      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x76>
  {
	  gTick++;
 8001bae:	4b2d      	ldr	r3, [pc, #180]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	3301      	adds	r3, #1
 8001bb4:	4a2b      	ldr	r2, [pc, #172]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bb6:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bba:	6819      	ldr	r1, [r3, #0]
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001bbe:	fba3 2301 	umull	r2, r3, r3, r1
 8001bc2:	08da      	lsrs	r2, r3, #3
 8001bc4:	4613      	mov	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	4413      	add	r3, r2
 8001bca:	005b      	lsls	r3, r3, #1
 8001bcc:	1aca      	subs	r2, r1, r3
 8001bce:	2a00      	cmp	r2, #0
 8001bd0:	d104      	bne.n	8001bdc <HAL_TIM_PeriodElapsedCallback+0x54>
 8001bd2:	4b26      	ldr	r3, [pc, #152]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4a24      	ldr	r2, [pc, #144]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001bda:	6013      	str	r3, [r2, #0]
	  if((gTick%50) == 0){Tick_500ms++;}
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	4b23      	ldr	r3, [pc, #140]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001be2:	fba3 1302 	umull	r1, r3, r3, r2
 8001be6:	091b      	lsrs	r3, r3, #4
 8001be8:	2132      	movs	r1, #50	; 0x32
 8001bea:	fb01 f303 	mul.w	r3, r1, r3
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d104      	bne.n	8001bfe <HAL_TIM_PeriodElapsedCallback+0x76>
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	4a1e      	ldr	r2, [pc, #120]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001bfc:	6013      	str	r3, [r2, #0]
  {
//	  USS_tick++;
//	  if(USS_tick>0xffff0000){USS_tick=0;}
  }

  if(htim->Instance == TIM9)//uss timer, 1779hz
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a1d      	ldr	r2, [pc, #116]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	d118      	bne.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0xb2>
  {
	  if(TIR_setData_flag){tick();}
 8001c08:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0x8c>
 8001c10:	f001 f8f0 	bl	8002df4 <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d005      	beq.n	8001c28 <HAL_TIM_PeriodElapsedCallback+0xa0>
 8001c1c:	4b19      	ldr	r3, [pc, #100]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c1e:	781b      	ldrb	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	4b17      	ldr	r3, [pc, #92]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c26:	701a      	strb	r2, [r3, #0]

	  if(isr_timeout_counter>1)//횟수 수정할 것
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d904      	bls.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0xb2>
	  {
		  isr_timeout_counter = 0;
 8001c30:	4b14      	ldr	r3, [pc, #80]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 8001c36:	f7ff ff63 	bl	8001b00 <isr_timeout>
	  }
  }

  if(htim->Instance == TIM14)//IR NEC timer, 1Mhz
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a12      	ldr	r2, [pc, #72]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d104      	bne.n	8001c4e <HAL_TIM_PeriodElapsedCallback+0xc6>
  {
	  IR_NEC_Tick+=4;
 8001c44:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3304      	adds	r3, #4
 8001c4a:	4a10      	ldr	r2, [pc, #64]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001c4c:	6013      	str	r3, [r2, #0]
	  //HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
  }
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	40000c00 	.word	0x40000c00
 8001c5c:	200002c4 	.word	0x200002c4
 8001c60:	40001000 	.word	0x40001000
 8001c64:	200002c8 	.word	0x200002c8
 8001c68:	cccccccd 	.word	0xcccccccd
 8001c6c:	200002d0 	.word	0x200002d0
 8001c70:	51eb851f 	.word	0x51eb851f
 8001c74:	200002d4 	.word	0x200002d4
 8001c78:	40014000 	.word	0x40014000
 8001c7c:	200002e0 	.word	0x200002e0
 8001c80:	200002e9 	.word	0x200002e9
 8001c84:	200002e8 	.word	0x200002e8
 8001c88:	40002000 	.word	0x40002000
 8001c8c:	200002e4 	.word	0x200002e4

08001c90 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d104      	bne.n	8001caa <HAL_GPIO_EXTI_Callback+0x1a>
    	USS_end[0] = us_Tick;
 8001ca0:	4b24      	ldr	r3, [pc, #144]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b24      	ldr	r3, [pc, #144]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ca8:	601a      	str	r2, [r3, #0]
    	//printf("USS_end[0]: %d\n", USS_end[0]);
    	//printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }

    if(GPIO_Pin == USS_Data2_Pin) {
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cb0:	d104      	bne.n	8001cbc <HAL_GPIO_EXTI_Callback+0x2c>
    	USS_end[1] = us_Tick;
 8001cb2:	4b20      	ldr	r3, [pc, #128]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	4b1f      	ldr	r3, [pc, #124]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cba:	605a      	str	r2, [r3, #4]
    	//printf("USS_end[1]: %d\n", USS_end[1]);
    	//printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }

    if(GPIO_Pin == USS_Data3_Pin) {
 8001cbc:	88fb      	ldrh	r3, [r7, #6]
 8001cbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cc2:	d104      	bne.n	8001cce <HAL_GPIO_EXTI_Callback+0x3e>
    	USS_end[2] = us_Tick;
 8001cc4:	4b1b      	ldr	r3, [pc, #108]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	461a      	mov	r2, r3
 8001cca:	4b1b      	ldr	r3, [pc, #108]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001ccc:	609a      	str	r2, [r3, #8]
    	//printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }

    if(GPIO_Pin == USS_Data4_Pin) {
 8001cce:	88fb      	ldrh	r3, [r7, #6]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d104      	bne.n	8001cde <HAL_GPIO_EXTI_Callback+0x4e>
    	USS_end[3] = us_Tick;
 8001cd4:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	461a      	mov	r2, r3
 8001cda:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cdc:	60da      	str	r2, [r3, #12]
    	//printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }

    if(GPIO_Pin == USS_Data5_Pin) {
 8001cde:	88fb      	ldrh	r3, [r7, #6]
 8001ce0:	2b80      	cmp	r3, #128	; 0x80
 8001ce2:	d104      	bne.n	8001cee <HAL_GPIO_EXTI_Callback+0x5e>
    	USS_end[4] = us_Tick;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4b13      	ldr	r3, [pc, #76]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cec:	611a      	str	r2, [r3, #16]
    	//printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }

    if(GPIO_Pin == USS_Data6_Pin) {
 8001cee:	88fb      	ldrh	r3, [r7, #6]
 8001cf0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cf4:	d104      	bne.n	8001d00 <HAL_GPIO_EXTI_Callback+0x70>
    	USS_end[5] = us_Tick;
 8001cf6:	4b0f      	ldr	r3, [pc, #60]	; (8001d34 <HAL_GPIO_EXTI_Callback+0xa4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001cfe:	615a      	str	r2, [r3, #20]
    	//HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
    }



    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d111      	bne.n	8001d2a <HAL_GPIO_EXTI_Callback+0x9a>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){	isr_rise(); }//high edge
 8001d06:	2101      	movs	r1, #1
 8001d08:	480c      	ldr	r0, [pc, #48]	; (8001d3c <HAL_GPIO_EXTI_Callback+0xac>)
 8001d0a:	f005 fa5b 	bl	80071c4 <HAL_GPIO_ReadPin>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_GPIO_EXTI_Callback+0x88>
 8001d14:	f7ff fda0 	bl	8001858 <isr_rise>
             if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ isr_fall();}//low edge
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4808      	ldr	r0, [pc, #32]	; (8001d3c <HAL_GPIO_EXTI_Callback+0xac>)
 8001d1c:	f005 fa52 	bl	80071c4 <HAL_GPIO_ReadPin>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d101      	bne.n	8001d2a <HAL_GPIO_EXTI_Callback+0x9a>
 8001d26:	f7ff f9a7 	bl	8001078 <isr_fall>
        }
}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200002c4 	.word	0x200002c4
 8001d38:	20000740 	.word	0x20000740
 8001d3c:	40021000 	.word	0x40021000

08001d40 <startTTS>:


void startTTS()
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1c5a      	adds	r2, r3, #1
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	3310      	adds	r3, #16
 8001d52:	443b      	add	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	1c5a      	adds	r2, r3, #1
 8001d5e:	60fa      	str	r2, [r7, #12]
 8001d60:	3310      	adds	r3, #16
 8001d62:	443b      	add	r3, r7
 8001d64:	2200      	movs	r2, #0
 8001d66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1c5a      	adds	r2, r3, #1
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	3310      	adds	r3, #16
 8001d72:	443b      	add	r3, r7
 8001d74:	2200      	movs	r2, #0
 8001d76:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1c5a      	adds	r2, r3, #1
 8001d7e:	60fa      	str	r2, [r7, #12]
 8001d80:	3310      	adds	r3, #16
 8001d82:	443b      	add	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1c5a      	adds	r2, r3, #1
 8001d8e:	60fa      	str	r2, [r7, #12]
 8001d90:	3310      	adds	r3, #16
 8001d92:	443b      	add	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1c5a      	adds	r2, r3, #1
 8001d9e:	60fa      	str	r2, [r7, #12]
 8001da0:	3310      	adds	r3, #16
 8001da2:	443b      	add	r3, r7
 8001da4:	2200      	movs	r2, #0
 8001da6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	60fa      	str	r2, [r7, #12]
 8001db0:	3310      	adds	r3, #16
 8001db2:	443b      	add	r3, r7
 8001db4:	2201      	movs	r2, #1
 8001db6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	1c5a      	adds	r2, r3, #1
 8001dbe:	60fa      	str	r2, [r7, #12]
 8001dc0:	3310      	adds	r3, #16
 8001dc2:	443b      	add	r3, r7
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001dca:	1d39      	adds	r1, r7, #4
 8001dcc:	2301      	movs	r3, #1
 8001dce:	2208      	movs	r2, #8
 8001dd0:	f241 3089 	movw	r0, #5001	; 0x1389
 8001dd4:	f001 fab2 	bl	800333c <sendCan>
}
 8001dd8:	bf00      	nop
 8001dda:	3710      	adds	r7, #16
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}

08001de0 <endTTS>:

void endTTS()
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	60fa      	str	r2, [r7, #12]
 8001df0:	3310      	adds	r3, #16
 8001df2:	443b      	add	r3, r7
 8001df4:	2200      	movs	r2, #0
 8001df6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	60fa      	str	r2, [r7, #12]
 8001e00:	3310      	adds	r3, #16
 8001e02:	443b      	add	r3, r7
 8001e04:	2200      	movs	r2, #0
 8001e06:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	60fa      	str	r2, [r7, #12]
 8001e10:	3310      	adds	r3, #16
 8001e12:	443b      	add	r3, r7
 8001e14:	2200      	movs	r2, #0
 8001e16:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	1c5a      	adds	r2, r3, #1
 8001e1e:	60fa      	str	r2, [r7, #12]
 8001e20:	3310      	adds	r3, #16
 8001e22:	443b      	add	r3, r7
 8001e24:	2200      	movs	r2, #0
 8001e26:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	60fa      	str	r2, [r7, #12]
 8001e30:	3310      	adds	r3, #16
 8001e32:	443b      	add	r3, r7
 8001e34:	2200      	movs	r2, #0
 8001e36:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1c5a      	adds	r2, r3, #1
 8001e3e:	60fa      	str	r2, [r7, #12]
 8001e40:	3310      	adds	r3, #16
 8001e42:	443b      	add	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 9;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	1c5a      	adds	r2, r3, #1
 8001e4e:	60fa      	str	r2, [r7, #12]
 8001e50:	3310      	adds	r3, #16
 8001e52:	443b      	add	r3, r7
 8001e54:	2209      	movs	r2, #9
 8001e56:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	1c5a      	adds	r2, r3, #1
 8001e5e:	60fa      	str	r2, [r7, #12]
 8001e60:	3310      	adds	r3, #16
 8001e62:	443b      	add	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001e6a:	1d39      	adds	r1, r7, #4
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	2208      	movs	r2, #8
 8001e70:	f241 3089 	movw	r0, #5001	; 0x1389
 8001e74:	f001 fa62 	bl	800333c <sendCan>
}
 8001e78:	bf00      	nop
 8001e7a:	3710      	adds	r7, #16
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <parsePmm>:

void parsePmm(uint8_t *msg)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3307      	adds	r3, #7
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	4b12      	ldr	r3, [pc, #72]	; (8001edc <parsePmm+0x5c>)
 8001e92:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	3306      	adds	r3, #6
 8001e98:	781a      	ldrb	r2, [r3, #0]
 8001e9a:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <parsePmm+0x60>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	09d2      	lsrs	r2, r2, #7
 8001ea0:	b2d2      	uxtb	r2, r2
 8001ea2:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	3306      	adds	r3, #6
 8001ea8:	781b      	ldrb	r3, [r3, #0]
 8001eaa:	119b      	asrs	r3, r3, #6
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	4b0c      	ldr	r3, [pc, #48]	; (8001ee0 <parsePmm+0x60>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f002 0201 	and.w	r2, r2, #1
 8001eb6:	b2d2      	uxtb	r2, r2
 8001eb8:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3306      	adds	r3, #6
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	115b      	asrs	r3, r3, #5
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	4b06      	ldr	r3, [pc, #24]	; (8001ee0 <parsePmm+0x60>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f002 0201 	and.w	r2, r2, #1
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	745a      	strb	r2, [r3, #17]
}
 8001ed0:	bf00      	nop
 8001ed2:	370c      	adds	r7, #12
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eda:	4770      	bx	lr
 8001edc:	20000320 	.word	0x20000320
 8001ee0:	2000031c 	.word	0x2000031c

08001ee4 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b085      	sub	sp, #20
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
 8001ef0:	e012      	b.n	8001f18 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3307      	adds	r3, #7
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	461a      	mov	r2, r3
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	fa42 f303 	asr.w	r3, r2, r3
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	f003 0301 	and.w	r3, r3, #1
 8001f06:	b2d9      	uxtb	r1, r3
 8001f08:	4a0a      	ldr	r2, [pc, #40]	; (8001f34 <parseTop+0x50>)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	460a      	mov	r2, r1
 8001f10:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	3301      	adds	r3, #1
 8001f16:	60fb      	str	r3, [r7, #12]
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	2b05      	cmp	r3, #5
 8001f1c:	dde9      	ble.n	8001ef2 <parseTop+0xe>
    touch = msg[6];
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	799a      	ldrb	r2, [r3, #6]
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <parseTop+0x54>)
 8001f24:	701a      	strb	r2, [r3, #0]
}
 8001f26:	bf00      	nop
 8001f28:	3714      	adds	r7, #20
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	20000314 	.word	0x20000314
 8001f38:	20000311 	.word	0x20000311

08001f3c <parseState>:


void parseState(uint8_t *msg)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3307      	adds	r3, #7
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <parseState+0x78>)
 8001f4e:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3305      	adds	r3, #5
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	09db      	lsrs	r3, r3, #7
 8001f58:	b2da      	uxtb	r2, r3
 8001f5a:	4b17      	ldr	r3, [pc, #92]	; (8001fb8 <parseState+0x7c>)
 8001f5c:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	3305      	adds	r3, #5
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	119b      	asrs	r3, r3, #6
 8001f66:	b2db      	uxtb	r3, r3
 8001f68:	f003 0301 	and.w	r3, r3, #1
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b13      	ldr	r3, [pc, #76]	; (8001fbc <parseState+0x80>)
 8001f70:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	3304      	adds	r3, #4
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	09db      	lsrs	r3, r3, #7
 8001f7a:	b2da      	uxtb	r2, r3
 8001f7c:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <parseState+0x84>)
 8001f7e:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3304      	adds	r3, #4
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	119b      	asrs	r3, r3, #6
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <parseState+0x88>)
 8001f92:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3304      	adds	r3, #4
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	115b      	asrs	r3, r3, #5
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	f003 0301 	and.w	r3, r3, #1
 8001fa2:	b2da      	uxtb	r2, r3
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <parseState+0x8c>)
 8001fa6:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	20000308 	.word	0x20000308
 8001fb8:	2000030c 	.word	0x2000030c
 8001fbc:	2000030d 	.word	0x2000030d
 8001fc0:	2000030e 	.word	0x2000030e
 8001fc4:	2000030f 	.word	0x2000030f
 8001fc8:	20000310 	.word	0x20000310

08001fcc <controlMotor>:

void controlMotor()
{
 8001fcc:	b590      	push	{r4, r7, lr}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af02      	add	r7, sp, #8
    static int count = 0;
   // printf("motor_sw=%d, motor_break=%d\n", motor_sw, motor_break);
    //printf("cmd_motor_rpm_left=%d, cmd_motor_rpm_right=%d\n", (int)motor.cmd_motor_rpm_left, (int)motor.cmd_motor_rpm_right);
    if(motor_sw)
 8001fd2:	4b43      	ldr	r3, [pc, #268]	; (80020e0 <controlMotor+0x114>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d079      	beq.n	80020ce <controlMotor+0x102>
    {
        if(motor_disable_flag)
 8001fda:	4b42      	ldr	r3, [pc, #264]	; (80020e4 <controlMotor+0x118>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d004      	beq.n	8001fec <controlMotor+0x20>
        {
        	//printf("enable\n");
            enable();
 8001fe2:	f002 faf3 	bl	80045cc <enable>
            motor_disable_flag = 0;
 8001fe6:	4b3f      	ldr	r3, [pc, #252]	; (80020e4 <controlMotor+0x118>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001fec:	4b3e      	ldr	r3, [pc, #248]	; (80020e8 <controlMotor+0x11c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d129      	bne.n	8002048 <controlMotor+0x7c>
        {
            control((int)motor.cmd_motor_rpm_left,(int)motor.cmd_motor_rpm_right);
 8001ff4:	4b3d      	ldr	r3, [pc, #244]	; (80020ec <controlMotor+0x120>)
 8001ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ffa:	4610      	mov	r0, r2
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	f7fe fdcb 	bl	8000b98 <__aeabi_d2iz>
 8002002:	4603      	mov	r3, r0
 8002004:	b21c      	sxth	r4, r3
 8002006:	4b39      	ldr	r3, [pc, #228]	; (80020ec <controlMotor+0x120>)
 8002008:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800200c:	4610      	mov	r0, r2
 800200e:	4619      	mov	r1, r3
 8002010:	f7fe fdc2 	bl	8000b98 <__aeabi_d2iz>
 8002014:	4603      	mov	r3, r0
 8002016:	b21b      	sxth	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	4620      	mov	r0, r4
 800201c:	f002 fc76 	bl	800490c <control>
            motor_break = 2;
 8002020:	4b31      	ldr	r3, [pc, #196]	; (80020e8 <controlMotor+0x11c>)
 8002022:	2202      	movs	r2, #2
 8002024:	601a      	str	r2, [r3, #0]
            count = 0;
 8002026:	4b32      	ldr	r3, [pc, #200]	; (80020f0 <controlMotor+0x124>)
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
            printf("motor_break==1  %f  %f\n", motor.cmd_motor_rpm_left,motor.cmd_motor_rpm_right);
 800202c:	4b2f      	ldr	r3, [pc, #188]	; (80020ec <controlMotor+0x120>)
 800202e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002032:	4b2e      	ldr	r3, [pc, #184]	; (80020ec <controlMotor+0x120>)
 8002034:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002038:	e9cd 2300 	strd	r2, r3, [sp]
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	482c      	ldr	r0, [pc, #176]	; (80020f4 <controlMotor+0x128>)
 8002042:	f008 fde1 	bl	800ac08 <iprintf>
    {
        disable();
        motor_disable_flag = 1;
     //   printf("disable==1\n");
    }
}
 8002046:	e047      	b.n	80020d8 <controlMotor+0x10c>
        else if(motor_break == 2)
 8002048:	4b27      	ldr	r3, [pc, #156]	; (80020e8 <controlMotor+0x11c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d12f      	bne.n	80020b0 <controlMotor+0xe4>
            count++;
 8002050:	4b27      	ldr	r3, [pc, #156]	; (80020f0 <controlMotor+0x124>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3301      	adds	r3, #1
 8002056:	4a26      	ldr	r2, [pc, #152]	; (80020f0 <controlMotor+0x124>)
 8002058:	6013      	str	r3, [r2, #0]
            control((int)motor.cmd_motor_rpm_left,(int)motor.cmd_motor_rpm_right);
 800205a:	4b24      	ldr	r3, [pc, #144]	; (80020ec <controlMotor+0x120>)
 800205c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002060:	4610      	mov	r0, r2
 8002062:	4619      	mov	r1, r3
 8002064:	f7fe fd98 	bl	8000b98 <__aeabi_d2iz>
 8002068:	4603      	mov	r3, r0
 800206a:	b21c      	sxth	r4, r3
 800206c:	4b1f      	ldr	r3, [pc, #124]	; (80020ec <controlMotor+0x120>)
 800206e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f7fe fd8f 	bl	8000b98 <__aeabi_d2iz>
 800207a:	4603      	mov	r3, r0
 800207c:	b21b      	sxth	r3, r3
 800207e:	4619      	mov	r1, r3
 8002080:	4620      	mov	r0, r4
 8002082:	f002 fc43 	bl	800490c <control>
            if(count == 20)
 8002086:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <controlMotor+0x124>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b14      	cmp	r3, #20
 800208c:	d102      	bne.n	8002094 <controlMotor+0xc8>
                motor_break = 3;
 800208e:	4b16      	ldr	r3, [pc, #88]	; (80020e8 <controlMotor+0x11c>)
 8002090:	2203      	movs	r2, #3
 8002092:	601a      	str	r2, [r3, #0]
            printf("motor_break==2  %f  %f\n", motor.cmd_motor_rpm_left,motor.cmd_motor_rpm_right);
 8002094:	4b15      	ldr	r3, [pc, #84]	; (80020ec <controlMotor+0x120>)
 8002096:	e9d3 0100 	ldrd	r0, r1, [r3]
 800209a:	4b14      	ldr	r3, [pc, #80]	; (80020ec <controlMotor+0x120>)
 800209c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020a0:	e9cd 2300 	strd	r2, r3, [sp]
 80020a4:	4602      	mov	r2, r0
 80020a6:	460b      	mov	r3, r1
 80020a8:	4813      	ldr	r0, [pc, #76]	; (80020f8 <controlMotor+0x12c>)
 80020aa:	f008 fdad 	bl	800ac08 <iprintf>
}
 80020ae:	e013      	b.n	80020d8 <controlMotor+0x10c>
        else if(motor_break == 3)
 80020b0:	4b0d      	ldr	r3, [pc, #52]	; (80020e8 <controlMotor+0x11c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d10f      	bne.n	80020d8 <controlMotor+0x10c>
            control(0,0);
 80020b8:	2100      	movs	r1, #0
 80020ba:	2000      	movs	r0, #0
 80020bc:	f002 fc26 	bl	800490c <control>
            count = 0;
 80020c0:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <controlMotor+0x124>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
            printf("control(0,0); \n");
 80020c6:	480d      	ldr	r0, [pc, #52]	; (80020fc <controlMotor+0x130>)
 80020c8:	f008 fe24 	bl	800ad14 <puts>
}
 80020cc:	e004      	b.n	80020d8 <controlMotor+0x10c>
        disable();
 80020ce:	f002 fae1 	bl	8004694 <disable>
        motor_disable_flag = 1;
 80020d2:	4b04      	ldr	r3, [pc, #16]	; (80020e4 <controlMotor+0x118>)
 80020d4:	2201      	movs	r2, #1
 80020d6:	601a      	str	r2, [r3, #0]
}
 80020d8:	bf00      	nop
 80020da:	3704      	adds	r7, #4
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd90      	pop	{r4, r7, pc}
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000304 	.word	0x20000304
 80020e8:	20000300 	.word	0x20000300
 80020ec:	20000330 	.word	0x20000330
 80020f0:	20000398 	.word	0x20000398
 80020f4:	0800cef8 	.word	0x0800cef8
 80020f8:	0800cf10 	.word	0x0800cf10
 80020fc:	0800cf28 	.word	0x0800cf28

08002100 <toRPM>:


int toRPM()
{
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	af00      	add	r7, sp, #0
//    printf("toRPMtoRPMtoRPMtoRPMtoRPMtoRPMtoRPMtoRPMtoRPMtoRPM\n");
//	printf("toRPM left right: %f %f", motor.cmd_motor_rpm_left , motor.cmd_motor_rpm_right);
    motor.cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor.cmd_v + (WHEEL_DISTANCE/2)*motor.cmd_w);
 8002104:	4b24      	ldr	r3, [pc, #144]	; (8002198 <toRPM+0x98>)
 8002106:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800210a:	4b23      	ldr	r3, [pc, #140]	; (8002198 <toRPM+0x98>)
 800210c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002110:	a31d      	add	r3, pc, #116	; (adr r3, 8002188 <toRPM+0x88>)
 8002112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002116:	f7fe fa8f 	bl	8000638 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4620      	mov	r0, r4
 8002120:	4629      	mov	r1, r5
 8002122:	f7fe f8d3 	bl	80002cc <__adddf3>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	a318      	add	r3, pc, #96	; (adr r3, 8002190 <toRPM+0x90>)
 8002130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002134:	f7fe fa80 	bl	8000638 <__aeabi_dmul>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4916      	ldr	r1, [pc, #88]	; (8002198 <toRPM+0x98>)
 800213e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    motor.cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor.cmd_v - (WHEEL_DISTANCE/2)*motor.cmd_w);
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <toRPM+0x98>)
 8002144:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002148:	4b13      	ldr	r3, [pc, #76]	; (8002198 <toRPM+0x98>)
 800214a:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800214e:	a30e      	add	r3, pc, #56	; (adr r3, 8002188 <toRPM+0x88>)
 8002150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002154:	f7fe fa70 	bl	8000638 <__aeabi_dmul>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4620      	mov	r0, r4
 800215e:	4629      	mov	r1, r5
 8002160:	f7fe f8b2 	bl	80002c8 <__aeabi_dsub>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	a308      	add	r3, pc, #32	; (adr r3, 8002190 <toRPM+0x90>)
 800216e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002172:	f7fe fa61 	bl	8000638 <__aeabi_dmul>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4907      	ldr	r1, [pc, #28]	; (8002198 <toRPM+0x98>)
 800217c:	e9c1 2300 	strd	r2, r3, [r1]
    return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	bdb0      	pop	{r4, r5, r7, pc}
 8002186:	bf00      	nop
 8002188:	0e560419 	.word	0x0e560419
 800218c:	3fcdb22d 	.word	0x3fcdb22d
 8002190:	31bcaa49 	.word	0x31bcaa49
 8002194:	40625d31 	.word	0x40625d31
 8002198:	20000330 	.word	0x20000330

0800219c <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	3301      	adds	r3, #1
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	021b      	lsls	r3, r3, #8
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	4313      	orrs	r3, r2
 80021b6:	81fb      	strh	r3, [r7, #14]
    motor.cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 80021b8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f9d1 	bl	8000564 <__aeabi_i2d>
 80021c2:	f04f 0200 	mov.w	r2, #0
 80021c6:	4b17      	ldr	r3, [pc, #92]	; (8002224 <parseCmdvel+0x88>)
 80021c8:	f7fe fb60 	bl	800088c <__aeabi_ddiv>
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	4915      	ldr	r1, [pc, #84]	; (8002228 <parseCmdvel+0x8c>)
 80021d2:	e9c1 2308 	strd	r2, r3, [r1, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3302      	adds	r3, #2
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	b21a      	sxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3303      	adds	r3, #3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	021b      	lsls	r3, r3, #8
 80021e6:	b21b      	sxth	r3, r3
 80021e8:	4313      	orrs	r3, r2
 80021ea:	81fb      	strh	r3, [r7, #14]
    motor.cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 80021ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f7fe f9b7 	bl	8000564 <__aeabi_i2d>
 80021f6:	f04f 0200 	mov.w	r2, #0
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <parseCmdvel+0x88>)
 80021fc:	f7fe fb46 	bl	800088c <__aeabi_ddiv>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4908      	ldr	r1, [pc, #32]	; (8002228 <parseCmdvel+0x8c>)
 8002206:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    motor_sw = msg[4];
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	791a      	ldrb	r2, [r3, #4]
 800220e:	4b07      	ldr	r3, [pc, #28]	; (800222c <parseCmdvel+0x90>)
 8002210:	701a      	strb	r2, [r3, #0]
    toRPM();
 8002212:	f7ff ff75 	bl	8002100 <toRPM>
    motor_break = 1;
 8002216:	4b06      	ldr	r3, [pc, #24]	; (8002230 <parseCmdvel+0x94>)
 8002218:	2201      	movs	r2, #1
 800221a:	601a      	str	r2, [r3, #0]
}
 800221c:	bf00      	nop
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40590000 	.word	0x40590000
 8002228:	20000330 	.word	0x20000330
 800222c:	20000000 	.word	0x20000000
 8002230:	20000300 	.word	0x20000300

08002234 <sendEnc>:



void sendEnc(int id)
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b087      	sub	sp, #28
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 800223c:	2300      	movs	r3, #0
 800223e:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor.real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8002240:	4b5c      	ldr	r3, [pc, #368]	; (80023b4 <sendEnc+0x180>)
 8002242:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002246:	f04f 0200 	mov.w	r2, #0
 800224a:	4b5b      	ldr	r3, [pc, #364]	; (80023b8 <sendEnc+0x184>)
 800224c:	f7fe f9f4 	bl	8000638 <__aeabi_dmul>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f7fe fc9e 	bl	8000b98 <__aeabi_d2iz>
 800225c:	4603      	mov	r3, r0
 800225e:	b219      	sxth	r1, r3
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	617a      	str	r2, [r7, #20]
 8002266:	b2ca      	uxtb	r2, r1
 8002268:	3318      	adds	r3, #24
 800226a:	443b      	add	r3, r7
 800226c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor.real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8002270:	4b50      	ldr	r3, [pc, #320]	; (80023b4 <sendEnc+0x180>)
 8002272:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002276:	f04f 0200 	mov.w	r2, #0
 800227a:	4b4f      	ldr	r3, [pc, #316]	; (80023b8 <sendEnc+0x184>)
 800227c:	f7fe f9dc 	bl	8000638 <__aeabi_dmul>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4610      	mov	r0, r2
 8002286:	4619      	mov	r1, r3
 8002288:	f7fe fc86 	bl	8000b98 <__aeabi_d2iz>
 800228c:	4603      	mov	r3, r0
 800228e:	b21b      	sxth	r3, r3
 8002290:	121b      	asrs	r3, r3, #8
 8002292:	b219      	sxth	r1, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	1c5a      	adds	r2, r3, #1
 8002298:	617a      	str	r2, [r7, #20]
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	3318      	adds	r3, #24
 800229e:	443b      	add	r3, r7
 80022a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor.real_w*SIGNIFICANT_FIGURES)) & 0xff;
 80022a4:	4b43      	ldr	r3, [pc, #268]	; (80023b4 <sendEnc+0x180>)
 80022a6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	4b42      	ldr	r3, [pc, #264]	; (80023b8 <sendEnc+0x184>)
 80022b0:	f7fe f9c2 	bl	8000638 <__aeabi_dmul>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fc6c 	bl	8000b98 <__aeabi_d2iz>
 80022c0:	4603      	mov	r3, r0
 80022c2:	b219      	sxth	r1, r3
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	617a      	str	r2, [r7, #20]
 80022ca:	b2ca      	uxtb	r2, r1
 80022cc:	3318      	adds	r3, #24
 80022ce:	443b      	add	r3, r7
 80022d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor.real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80022d4:	4b37      	ldr	r3, [pc, #220]	; (80023b4 <sendEnc+0x180>)
 80022d6:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80022da:	f04f 0200 	mov.w	r2, #0
 80022de:	4b36      	ldr	r3, [pc, #216]	; (80023b8 <sendEnc+0x184>)
 80022e0:	f7fe f9aa 	bl	8000638 <__aeabi_dmul>
 80022e4:	4602      	mov	r2, r0
 80022e6:	460b      	mov	r3, r1
 80022e8:	4610      	mov	r0, r2
 80022ea:	4619      	mov	r1, r3
 80022ec:	f7fe fc54 	bl	8000b98 <__aeabi_d2iz>
 80022f0:	4603      	mov	r3, r0
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	121b      	asrs	r3, r3, #8
 80022f6:	b219      	sxth	r1, r3
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	617a      	str	r2, [r7, #20]
 80022fe:	b2ca      	uxtb	r2, r1
 8002300:	3318      	adds	r3, #24
 8002302:	443b      	add	r3, r7
 8002304:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 8002308:	4b2c      	ldr	r3, [pc, #176]	; (80023bc <sendEnc+0x188>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	7c1b      	ldrb	r3, [r3, #16]
 800230e:	005b      	lsls	r3, r3, #1
 8002310:	b25a      	sxtb	r2, r3
 8002312:	4b2a      	ldr	r3, [pc, #168]	; (80023bc <sendEnc+0x188>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	7bdb      	ldrb	r3, [r3, #15]
 8002318:	b25b      	sxtb	r3, r3
 800231a:	4313      	orrs	r3, r2
 800231c:	b259      	sxtb	r1, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	617a      	str	r2, [r7, #20]
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	3318      	adds	r3, #24
 8002328:	443b      	add	r3, r7
 800232a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor.RCURR * 100;
 800232e:	4b21      	ldr	r3, [pc, #132]	; (80023b4 <sendEnc+0x180>)
 8002330:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002334:	f04f 0200 	mov.w	r2, #0
 8002338:	4b1f      	ldr	r3, [pc, #124]	; (80023b8 <sendEnc+0x184>)
 800233a:	f7fe f97d 	bl	8000638 <__aeabi_dmul>
 800233e:	4602      	mov	r2, r0
 8002340:	460b      	mov	r3, r1
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	697c      	ldr	r4, [r7, #20]
 8002348:	1c63      	adds	r3, r4, #1
 800234a:	617b      	str	r3, [r7, #20]
 800234c:	f7fe fc4c 	bl	8000be8 <__aeabi_d2uiz>
 8002350:	4603      	mov	r3, r0
 8002352:	b2da      	uxtb	r2, r3
 8002354:	f104 0318 	add.w	r3, r4, #24
 8002358:	443b      	add	r3, r7
 800235a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor.LCURR * 100;
 800235e:	4b15      	ldr	r3, [pc, #84]	; (80023b4 <sendEnc+0x180>)
 8002360:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <sendEnc+0x184>)
 800236a:	f7fe f965 	bl	8000638 <__aeabi_dmul>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4610      	mov	r0, r2
 8002374:	4619      	mov	r1, r3
 8002376:	697c      	ldr	r4, [r7, #20]
 8002378:	1c63      	adds	r3, r4, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	f7fe fc34 	bl	8000be8 <__aeabi_d2uiz>
 8002380:	4603      	mov	r3, r0
 8002382:	b2da      	uxtb	r2, r3
 8002384:	f104 0318 	add.w	r3, r4, #24
 8002388:	443b      	add	r3, r7
 800238a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	617a      	str	r2, [r7, #20]
 8002394:	3318      	adds	r3, #24
 8002396:	443b      	add	r3, r7
 8002398:	2200      	movs	r2, #0
 800239a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f107 010c 	add.w	r1, r7, #12
 80023a4:	2301      	movs	r3, #1
 80023a6:	2208      	movs	r2, #8
 80023a8:	f000 ffc8 	bl	800333c <sendCan>
}
 80023ac:	bf00      	nop
 80023ae:	371c      	adds	r7, #28
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd90      	pop	{r4, r7, pc}
 80023b4:	20000330 	.word	0x20000330
 80023b8:	40590000 	.word	0x40590000
 80023bc:	2000031c 	.word	0x2000031c

080023c0 <toVW>:


int toVW(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	af00      	add	r7, sp, #0

    motor.real_motor_rpm_left=(double)motor.LRPM;
 80023c4:	4b26      	ldr	r3, [pc, #152]	; (8002460 <toVW+0xa0>)
 80023c6:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80023ca:	4618      	mov	r0, r3
 80023cc:	f7fe f8ca 	bl	8000564 <__aeabi_i2d>
 80023d0:	4602      	mov	r2, r0
 80023d2:	460b      	mov	r3, r1
 80023d4:	4922      	ldr	r1, [pc, #136]	; (8002460 <toVW+0xa0>)
 80023d6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    motor.real_motor_rpm_right=(double)motor.RRPM;
 80023da:	4b21      	ldr	r3, [pc, #132]	; (8002460 <toVW+0xa0>)
 80023dc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f8bf 	bl	8000564 <__aeabi_i2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	491d      	ldr	r1, [pc, #116]	; (8002460 <toVW+0xa0>)
 80023ec:	e9c1 2306 	strd	r2, r3, [r1, #24]

    motor.real_v = (motor.real_motor_rpm_left+motor.real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 80023f0:	4b1b      	ldr	r3, [pc, #108]	; (8002460 <toVW+0xa0>)
 80023f2:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80023f6:	4b1a      	ldr	r3, [pc, #104]	; (8002460 <toVW+0xa0>)
 80023f8:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023fc:	f7fd ff66 	bl	80002cc <__adddf3>
 8002400:	4602      	mov	r2, r0
 8002402:	460b      	mov	r3, r1
 8002404:	4610      	mov	r0, r2
 8002406:	4619      	mov	r1, r3
 8002408:	a311      	add	r3, pc, #68	; (adr r3, 8002450 <toVW+0x90>)
 800240a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240e:	f7fe f913 	bl	8000638 <__aeabi_dmul>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4912      	ldr	r1, [pc, #72]	; (8002460 <toVW+0xa0>)
 8002418:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    motor.real_w = (motor.real_motor_rpm_right-motor.real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <toVW+0xa0>)
 800241e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002422:	4b0f      	ldr	r3, [pc, #60]	; (8002460 <toVW+0xa0>)
 8002424:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002428:	f7fd ff4e 	bl	80002c8 <__aeabi_dsub>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	a308      	add	r3, pc, #32	; (adr r3, 8002458 <toVW+0x98>)
 8002436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800243a:	f7fe f8fd 	bl	8000638 <__aeabi_dmul>
 800243e:	4602      	mov	r2, r0
 8002440:	460b      	mov	r3, r1
 8002442:	4907      	ldr	r1, [pc, #28]	; (8002460 <toVW+0xa0>)
 8002444:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    return 0;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	306c65e9 	.word	0x306c65e9
 8002454:	3f6be16e 	.word	0x3f6be16e
 8002458:	5313b470 	.word	0x5313b470
 800245c:	3f8e0b32 	.word	0x3f8e0b32
 8002460:	20000330 	.word	0x20000330

08002464 <parseEnc>:


void parseEnc(uint8_t *msg)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	2bd8      	cmp	r3, #216	; 0xd8
 8002472:	d132      	bne.n	80024da <parseEnc+0x76>
    {

        motor.LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	3302      	adds	r3, #2
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	b21a      	sxth	r2, r3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	3303      	adds	r3, #3
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	021b      	lsls	r3, r3, #8
 8002484:	b21b      	sxth	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b21a      	sxth	r2, r3
 800248a:	4b30      	ldr	r3, [pc, #192]	; (800254c <parseEnc+0xe8>)
 800248c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor.RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3305      	adds	r3, #5
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	b21a      	sxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	3306      	adds	r3, #6
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	021b      	lsls	r3, r3, #8
 80024a0:	b21b      	sxth	r3, r3
 80024a2:	4313      	orrs	r3, r2
 80024a4:	b21a      	sxth	r2, r3
 80024a6:	4b29      	ldr	r3, [pc, #164]	; (800254c <parseEnc+0xe8>)
 80024a8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor.LRPM=-1*(motor.LRPM);
 80024ac:	4b27      	ldr	r3, [pc, #156]	; (800254c <parseEnc+0xe8>)
 80024ae:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	425b      	negs	r3, r3
 80024b6:	b29b      	uxth	r3, r3
 80024b8:	b21a      	sxth	r2, r3
 80024ba:	4b24      	ldr	r3, [pc, #144]	; (800254c <parseEnc+0xe8>)
 80024bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80024c0:	4b23      	ldr	r3, [pc, #140]	; (8002550 <parseEnc+0xec>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	7852      	ldrb	r2, [r2, #1]
 80024c8:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 80024ca:	4b21      	ldr	r3, [pc, #132]	; (8002550 <parseEnc+0xec>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	7912      	ldrb	r2, [r2, #4]
 80024d2:	741a      	strb	r2, [r3, #16]

        toVW();
 80024d4:	f7ff ff74 	bl	80023c0 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor.LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 80024d8:	e034      	b.n	8002544 <parseEnc+0xe0>
    else if(msg[0]==PID_MAIN_DATA)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2bc1      	cmp	r3, #193	; 0xc1
 80024e0:	d116      	bne.n	8002510 <parseEnc+0xac>
        motor.RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3304      	adds	r3, #4
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	461a      	mov	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3305      	adds	r3, #5
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	4313      	orrs	r3, r2
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fe f835 	bl	8000564 <__aeabi_i2d>
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b15      	ldr	r3, [pc, #84]	; (8002554 <parseEnc+0xf0>)
 8002500:	f7fe f9c4 	bl	800088c <__aeabi_ddiv>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4910      	ldr	r1, [pc, #64]	; (800254c <parseEnc+0xe8>)
 800250a:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48
}
 800250e:	e019      	b.n	8002544 <parseEnc+0xe0>
    else if(msg[0]==PID_MAIN_DATA2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	2bc8      	cmp	r3, #200	; 0xc8
 8002516:	d115      	bne.n	8002544 <parseEnc+0xe0>
        motor.LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	3304      	adds	r3, #4
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3305      	adds	r3, #5
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4313      	orrs	r3, r2
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f81a 	bl	8000564 <__aeabi_i2d>
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b07      	ldr	r3, [pc, #28]	; (8002554 <parseEnc+0xf0>)
 8002536:	f7fe f9a9 	bl	800088c <__aeabi_ddiv>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4903      	ldr	r1, [pc, #12]	; (800254c <parseEnc+0xe8>)
 8002540:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
}
 8002544:	bf00      	nop
 8002546:	3708      	adds	r7, #8
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	20000330 	.word	0x20000330
 8002550:	2000031c 	.word	0x2000031c
 8002554:	40240000 	.word	0x40240000

08002558 <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	3304      	adds	r3, #4
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	b21a      	sxth	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3305      	adds	r3, #5
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	021b      	lsls	r3, r3, #8
 8002570:	b21b      	sxth	r3, r3
 8002572:	4313      	orrs	r3, r2
 8002574:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	3306      	adds	r3, #6
 800257a:	781b      	ldrb	r3, [r3, #0]
 800257c:	b21a      	sxth	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3307      	adds	r3, #7
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	021b      	lsls	r3, r3, #8
 8002586:	b21b      	sxth	r3, r3
 8002588:	4313      	orrs	r3, r2
 800258a:	81bb      	strh	r3, [r7, #12]

        motor.LRPM = (-lrpm) / 10.0;
 800258c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002590:	425b      	negs	r3, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f7fd ffe6 	bl	8000564 <__aeabi_i2d>
 8002598:	f04f 0200 	mov.w	r2, #0
 800259c:	4b14      	ldr	r3, [pc, #80]	; (80025f0 <parseEnc114+0x98>)
 800259e:	f7fe f975 	bl	800088c <__aeabi_ddiv>
 80025a2:	4602      	mov	r2, r0
 80025a4:	460b      	mov	r3, r1
 80025a6:	4610      	mov	r0, r2
 80025a8:	4619      	mov	r1, r3
 80025aa:	f7fe faf5 	bl	8000b98 <__aeabi_d2iz>
 80025ae:	4603      	mov	r3, r0
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	4b10      	ldr	r3, [pc, #64]	; (80025f4 <parseEnc114+0x9c>)
 80025b4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor.RRPM = (rrpm) / 10.0;
 80025b8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025bc:	4618      	mov	r0, r3
 80025be:	f7fd ffd1 	bl	8000564 <__aeabi_i2d>
 80025c2:	f04f 0200 	mov.w	r2, #0
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <parseEnc114+0x98>)
 80025c8:	f7fe f960 	bl	800088c <__aeabi_ddiv>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4610      	mov	r0, r2
 80025d2:	4619      	mov	r1, r3
 80025d4:	f7fe fae0 	bl	8000b98 <__aeabi_d2iz>
 80025d8:	4603      	mov	r3, r0
 80025da:	b21a      	sxth	r2, r3
 80025dc:	4b05      	ldr	r3, [pc, #20]	; (80025f4 <parseEnc114+0x9c>)
 80025de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

        toVW();
 80025e2:	f7ff feed 	bl	80023c0 <toVW>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40240000 	.word	0x40240000
 80025f4:	20000330 	.word	0x20000330

080025f8 <parseState114>:

void parseState114(uint8_t *msg)
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3304      	adds	r3, #4
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	b25a      	sxtb	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	3305      	adds	r3, #5
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	b25b      	sxtb	r3, r3
 8002612:	4313      	orrs	r3, r2
 8002614:	b25a      	sxtb	r2, r3
 8002616:	4b12      	ldr	r3, [pc, #72]	; (8002660 <parseState114+0x68>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3306      	adds	r3, #6
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	b25a      	sxtb	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3307      	adds	r3, #7
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	021b      	lsls	r3, r3, #8
 800262e:	b25b      	sxtb	r3, r3
 8002630:	4313      	orrs	r3, r2
 8002632:	b25a      	sxtb	r2, r3
 8002634:	4b0a      	ldr	r3, [pc, #40]	; (8002660 <parseState114+0x68>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	b2d2      	uxtb	r2, r2
 800263a:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 800263c:	4b08      	ldr	r3, [pc, #32]	; (8002660 <parseState114+0x68>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	7bdb      	ldrb	r3, [r3, #15]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d104      	bne.n	8002650 <parseState114+0x58>
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <parseState114+0x68>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	7c1b      	ldrb	r3, [r3, #16]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d003      	beq.n	8002658 <parseState114+0x60>
    {
        reset();
 8002650:	f002 f872 	bl	8004738 <reset>
        startMotor();
 8002654:	f001 ffb0 	bl	80045b8 <startMotor>
    }
}
 8002658:	bf00      	nop
 800265a:	3708      	adds	r7, #8
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	2000031c 	.word	0x2000031c

08002664 <stateReady>:


int stateReady()//이거 전에 ir통신을 받아야 겠는데?
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 8002668:	4b30      	ldr	r3, [pc, #192]	; (800272c <stateReady+0xc8>)
 800266a:	2200      	movs	r2, #0
 800266c:	601a      	str	r2, [r3, #0]
 800266e:	e050      	b.n	8002712 <stateReady+0xae>
	{
		HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data);
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <stateReady+0xcc>)
 8002672:	4a30      	ldr	r2, [pc, #192]	; (8002734 <stateReady+0xd0>)
 8002674:	2100      	movs	r1, #0
 8002676:	4830      	ldr	r0, [pc, #192]	; (8002738 <stateReady+0xd4>)
 8002678:	f003 ff4c 	bl	8006514 <HAL_CAN_GetRxMessage>
		if(g_tCan_Rx_Header.ExtId == 6001){
 800267c:	4b2d      	ldr	r3, [pc, #180]	; (8002734 <stateReady+0xd0>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f241 7271 	movw	r2, #6001	; 0x1771
 8002684:	4293      	cmp	r3, r2
 8002686:	d102      	bne.n	800268e <stateReady+0x2a>
			check_msg = 1;
 8002688:	4b2c      	ldr	r3, [pc, #176]	; (800273c <stateReady+0xd8>)
 800268a:	2201      	movs	r2, #1
 800268c:	601a      	str	r2, [r3, #0]
		}


		    //check_msg = charging->checkIRdata();
		if(check_msg == 1)
 800268e:	4b2b      	ldr	r3, [pc, #172]	; (800273c <stateReady+0xd8>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d102      	bne.n	800269c <stateReady+0x38>
		{
			start_docking_flag = 1;
 8002696:	4b2a      	ldr	r3, [pc, #168]	; (8002740 <stateReady+0xdc>)
 8002698:	2201      	movs	r2, #1
 800269a:	701a      	strb	r2, [r3, #0]
//			sendIRdata(robot_standby);
//			HAL_NVIC_EnableIRQ(EXTI0_IRQn);//이걸로 수신시작할 것
		}

		if(ir_count++ >= 2)
 800269c:	4b29      	ldr	r3, [pc, #164]	; (8002744 <stateReady+0xe0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	1c5a      	adds	r2, r3, #1
 80026a2:	4928      	ldr	r1, [pc, #160]	; (8002744 <stateReady+0xe0>)
 80026a4:	600a      	str	r2, [r1, #0]
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	dd08      	ble.n	80026bc <stateReady+0x58>
		{
			sendIRdata(robot_standby);
 80026aa:	4827      	ldr	r0, [pc, #156]	; (8002748 <stateReady+0xe4>)
 80026ac:	f000 fea0 	bl	80033f0 <sendIRdata>
			ir_count = 0;
 80026b0:	4b24      	ldr	r3, [pc, #144]	; (8002744 <stateReady+0xe0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	601a      	str	r2, [r3, #0]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);//이걸로 수신시작할 것
 80026b6:	2006      	movs	r0, #6
 80026b8:	f004 fbaf 	bl	8006e1a <HAL_NVIC_EnableIRQ>
		}

		if(start_docking_flag)
 80026bc:	4b20      	ldr	r3, [pc, #128]	; (8002740 <stateReady+0xdc>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d014      	beq.n	80026ee <stateReady+0x8a>
		{
		   startTTS();
 80026c4:	f7ff fb3c 	bl	8001d40 <startTTS>
		   //State_set(IDLE);
		   ready_flag = 1;
 80026c8:	4b20      	ldr	r3, [pc, #128]	; (800274c <stateReady+0xe8>)
 80026ca:	2201      	movs	r2, #1
 80026cc:	701a      	strb	r2, [r3, #0]
		   start_docking_flag = 0;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	; (8002740 <stateReady+0xdc>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
		   //mutex.lock();
		   check_msg = 0;
 80026d4:	4b19      	ldr	r3, [pc, #100]	; (800273c <stateReady+0xd8>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	601a      	str	r2, [r3, #0]
		   printf("init_state()\n");
 80026da:	481d      	ldr	r0, [pc, #116]	; (8002750 <stateReady+0xec>)
 80026dc:	f008 fb1a 	bl	800ad14 <puts>
           init_state();
 80026e0:	f7fe fc82 	bl	8000fe8 <init_state>
           HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80026e4:	2006      	movs	r0, #6
 80026e6:	f004 fba6 	bl	8006e36 <HAL_NVIC_DisableIRQ>
		   return 1;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e01c      	b.n	8002728 <stateReady+0xc4>
//			inhome_check_cnt = 0;
//			endTTS();
//			//ThisThread::sleep_for(50);
//			NVIC_SystemReset();
//		}
		HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 80026ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f2:	4818      	ldr	r0, [pc, #96]	; (8002754 <stateReady+0xf0>)
 80026f4:	f004 fd97 	bl	8007226 <HAL_GPIO_TogglePin>
		check_msg = checkIRdata();
 80026f8:	f000 fe90 	bl	800341c <checkIRdata>
 80026fc:	4603      	mov	r3, r0
 80026fe:	4a0f      	ldr	r2, [pc, #60]	; (800273c <stateReady+0xd8>)
 8002700:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8002702:	2064      	movs	r0, #100	; 0x64
 8002704:	f002 ff84 	bl	8005610 <HAL_Delay>
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 8002708:	4b08      	ldr	r3, [pc, #32]	; (800272c <stateReady+0xc8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	4a07      	ldr	r2, [pc, #28]	; (800272c <stateReady+0xc8>)
 8002710:	6013      	str	r3, [r2, #0]
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <stateReady+0xc8>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b48      	cmp	r3, #72	; 0x48
 8002718:	ddaa      	ble.n	8002670 <stateReady+0xc>
	}
	endTTS();
 800271a:	f7ff fb61 	bl	8001de0 <endTTS>
	HAL_Delay(100);
 800271e:	2064      	movs	r0, #100	; 0x64
 8002720:	f002 ff76 	bl	8005610 <HAL_Delay>
	//ThisThread::sleep_for(50);
	NVIC_SystemReset();
 8002724:	f7ff fa1a 	bl	8001b5c <__NVIC_SystemReset>
    //inhome_check_cnt++;
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	2000038c 	.word	0x2000038c
 8002730:	200003fc 	.word	0x200003fc
 8002734:	20000404 	.word	0x20000404
 8002738:	200004b0 	.word	0x200004b0
 800273c:	20000328 	.word	0x20000328
 8002740:	20000325 	.word	0x20000325
 8002744:	20000388 	.word	0x20000388
 8002748:	20000004 	.word	0x20000004
 800274c:	20000324 	.word	0x20000324
 8002750:	0800cf38 	.word	0x0800cf38
 8002754:	40020400 	.word	0x40020400

08002758 <stateThread>:

void stateThread()
{
 8002758:	b580      	push	{r7, lr}
 800275a:	af00      	add	r7, sp, #0

	//printf("stateThread, robot_state: %d\n", robot_state);
        switch(robot_state)
 800275c:	4b45      	ldr	r3, [pc, #276]	; (8002874 <stateThread+0x11c>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2b0c      	cmp	r3, #12
 8002762:	f200 8085 	bhi.w	8002870 <stateThread+0x118>
 8002766:	a201      	add	r2, pc, #4	; (adr r2, 800276c <stateThread+0x14>)
 8002768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800276c:	080027a1 	.word	0x080027a1
 8002770:	080027a7 	.word	0x080027a7
 8002774:	080027b9 	.word	0x080027b9
 8002778:	080027d9 	.word	0x080027d9
 800277c:	080027eb 	.word	0x080027eb
 8002780:	080027fd 	.word	0x080027fd
 8002784:	08002809 	.word	0x08002809
 8002788:	0800281b 	.word	0x0800281b
 800278c:	08002841 	.word	0x08002841
 8002790:	08002871 	.word	0x08002871
 8002794:	0800284d 	.word	0x0800284d
 8002798:	08002859 	.word	0x08002859
 800279c:	08002865 	.word	0x08002865
        {
            case INIT:
                turnOff();
 80027a0:	f000 fef8 	bl	8003594 <turnOff>
                break;
 80027a4:	e064      	b.n	8002870 <stateThread+0x118>

            case DOCKING:
                turnOn(white);
 80027a6:	4b34      	ldr	r3, [pc, #208]	; (8002878 <stateThread+0x120>)
 80027a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027ac:	f000 feb6 	bl	800351c <turnOn>
                inhome = 0;
 80027b0:	4b32      	ldr	r3, [pc, #200]	; (800287c <stateThread+0x124>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	701a      	strb	r2, [r3, #0]
                break;
 80027b6:	e05b      	b.n	8002870 <stateThread+0x118>

            case CHARGING:
                if(battery>95)
 80027b8:	4b31      	ldr	r3, [pc, #196]	; (8002880 <stateThread+0x128>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	2b5f      	cmp	r3, #95	; 0x5f
 80027be:	dd05      	ble.n	80027cc <stateThread+0x74>
                {
                    turnOn(green);
 80027c0:	4b30      	ldr	r3, [pc, #192]	; (8002884 <stateThread+0x12c>)
 80027c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027c6:	f000 fea9 	bl	800351c <turnOn>
                }
                else
                {
                    turnOn(yellow);
                }
                break;
 80027ca:	e051      	b.n	8002870 <stateThread+0x118>
                    turnOn(yellow);
 80027cc:	4b2e      	ldr	r3, [pc, #184]	; (8002888 <stateThread+0x130>)
 80027ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027d2:	f000 fea3 	bl	800351c <turnOn>
                break;
 80027d6:	e04b      	b.n	8002870 <stateThread+0x118>

            case WORKING:
                turnOn(white);
 80027d8:	4b27      	ldr	r3, [pc, #156]	; (8002878 <stateThread+0x120>)
 80027da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027de:	f000 fe9d 	bl	800351c <turnOn>
                inhome = 0;
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <stateThread+0x124>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
                break;
 80027e8:	e042      	b.n	8002870 <stateThread+0x118>

            case STOP:
                turnOn(purple);
 80027ea:	4b28      	ldr	r3, [pc, #160]	; (800288c <stateThread+0x134>)
 80027ec:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027f0:	f000 fe94 	bl	800351c <turnOn>
                inhome = 0;
 80027f4:	4b21      	ldr	r3, [pc, #132]	; (800287c <stateThread+0x124>)
 80027f6:	2200      	movs	r2, #0
 80027f8:	701a      	strb	r2, [r3, #0]
                break;
 80027fa:	e039      	b.n	8002870 <stateThread+0x118>

            case W_STOP:
                turnOn(purple);
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <stateThread+0x134>)
 80027fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002802:	f000 fe8b 	bl	800351c <turnOn>
                break;
 8002806:	e033      	b.n	8002870 <stateThread+0x118>

            case EMERGENCY:
                turnOn(red);
 8002808:	4b21      	ldr	r3, [pc, #132]	; (8002890 <stateThread+0x138>)
 800280a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800280e:	f000 fe85 	bl	800351c <turnOn>
                inhome = 0;
 8002812:	4b1a      	ldr	r3, [pc, #104]	; (800287c <stateThread+0x124>)
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
                break;
 8002818:	e02a      	b.n	8002870 <stateThread+0x118>

            case MANUAL:
                if(touch)
 800281a:	4b1e      	ldr	r3, [pc, #120]	; (8002894 <stateThread+0x13c>)
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d005      	beq.n	800282e <stateThread+0xd6>
                    turnOn(blue);
 8002822:	4b1d      	ldr	r3, [pc, #116]	; (8002898 <stateThread+0x140>)
 8002824:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002828:	f000 fe78 	bl	800351c <turnOn>
 800282c:	e004      	b.n	8002838 <stateThread+0xe0>
                else
                    turnOn(skyblue);
 800282e:	4b1b      	ldr	r3, [pc, #108]	; (800289c <stateThread+0x144>)
 8002830:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002834:	f000 fe72 	bl	800351c <turnOn>
                inhome = 0;
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <stateThread+0x124>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
                break;
 800283e:	e017      	b.n	8002870 <stateThread+0x118>

            case WALL_FOLLOWING:
                turnOn(white);
 8002840:	4b0d      	ldr	r3, [pc, #52]	; (8002878 <stateThread+0x120>)
 8002842:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002846:	f000 fe69 	bl	800351c <turnOn>
                break;
 800284a:	e011      	b.n	8002870 <stateThread+0x118>
            case 10: //debug
                turnOn(blue);
 800284c:	4b12      	ldr	r3, [pc, #72]	; (8002898 <stateThread+0x140>)
 800284e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002852:	f000 fe63 	bl	800351c <turnOn>
                break;
 8002856:	e00b      	b.n	8002870 <stateThread+0x118>

			case 11: //for operation test
				turnOn(red);
 8002858:	4b0d      	ldr	r3, [pc, #52]	; (8002890 <stateThread+0x138>)
 800285a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800285e:	f000 fe5d 	bl	800351c <turnOn>
				break;
 8002862:	e005      	b.n	8002870 <stateThread+0x118>

			case 12: //for operation test
				turnOn(green);
 8002864:	4b07      	ldr	r3, [pc, #28]	; (8002884 <stateThread+0x12c>)
 8002866:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800286a:	f000 fe57 	bl	800351c <turnOn>
				break;
 800286e:	bf00      	nop
//        mutex.lock();
//        check_msg = charging->checkIRdata();
//        mutex.unlock();
//        ThisThread::sleep_for(131);

}
 8002870:	bf00      	nop
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000308 	.word	0x20000308
 8002878:	20000050 	.word	0x20000050
 800287c:	20000390 	.word	0x20000390
 8002880:	20000320 	.word	0x20000320
 8002884:	20000014 	.word	0x20000014
 8002888:	2000002c 	.word	0x2000002c
 800288c:	20000044 	.word	0x20000044
 8002890:	20000038 	.word	0x20000038
 8002894:	20000311 	.word	0x20000311
 8002898:	2000005c 	.word	0x2000005c
 800289c:	20000020 	.word	0x20000020

080028a0 <stateIdle>:


void stateIdle()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
    //int check_msg = 0;
    //check_msg = charging->checkIRdata();

    if(robot_state == CHARGING)
 80028a4:	4b12      	ldr	r3, [pc, #72]	; (80028f0 <stateIdle+0x50>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d114      	bne.n	80028d6 <stateIdle+0x36>
    {
        if(ir_count_idle++ >= 2)
 80028ac:	4b11      	ldr	r3, [pc, #68]	; (80028f4 <stateIdle+0x54>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	1c5a      	adds	r2, r3, #1
 80028b2:	4910      	ldr	r1, [pc, #64]	; (80028f4 <stateIdle+0x54>)
 80028b4:	600a      	str	r2, [r1, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	dd10      	ble.n	80028dc <stateIdle+0x3c>
        {
            if(charger_sw == 1)
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <stateIdle+0x58>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b01      	cmp	r3, #1
            else if(charger_sw == 0)
            {
                // charging->sendIRdata(charger_off);
            }

            if(battery>=95)
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <stateIdle+0x5c>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	2b5e      	cmp	r3, #94	; 0x5e
 80028c6:	dd02      	ble.n	80028ce <stateIdle+0x2e>
            {
                sendIRdata(battery_full);//나중에 타이머 잘 끄는지 꼭확인
 80028c8:	480d      	ldr	r0, [pc, #52]	; (8002900 <stateIdle+0x60>)
 80028ca:	f000 fd91 	bl	80033f0 <sendIRdata>
            }
            ir_count_idle = 0;
 80028ce:	4b09      	ldr	r3, [pc, #36]	; (80028f4 <stateIdle+0x54>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	e002      	b.n	80028dc <stateIdle+0x3c>
        }
    }
    else
    {
        check_msg = 0;
 80028d6:	4b0b      	ldr	r3, [pc, #44]	; (8002904 <stateIdle+0x64>)
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
    }

    if(check_msg == 2)
 80028dc:	4b09      	ldr	r3, [pc, #36]	; (8002904 <stateIdle+0x64>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	2b02      	cmp	r3, #2
 80028e2:	d102      	bne.n	80028ea <stateIdle+0x4a>
    {
        inhome = 1;
 80028e4:	4b08      	ldr	r3, [pc, #32]	; (8002908 <stateIdle+0x68>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]

    }

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000308 	.word	0x20000308
 80028f4:	20000394 	.word	0x20000394
 80028f8:	2000030f 	.word	0x2000030f
 80028fc:	20000320 	.word	0x20000320
 8002900:	20000010 	.word	0x20000010
 8002904:	20000328 	.word	0x20000328
 8002908:	20000390 	.word	0x20000390

0800290c <spinonce>:


void spinonce(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08c      	sub	sp, #48	; 0x30
 8002910:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 8002912:	4a92      	ldr	r2, [pc, #584]	; (8002b5c <spinonce+0x250>)
 8002914:	f107 0310 	add.w	r3, r7, #16
 8002918:	e892 0003 	ldmia.w	r2, {r0, r1}
 800291c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]

    uint32_t CanId = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t FDval[4]={0,};
 8002928:	463b      	mov	r3, r7
 800292a:	2200      	movs	r2, #0
 800292c:	601a      	str	r2, [r3, #0]
 800292e:	605a      	str	r2, [r3, #4]
	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 8002930:	2100      	movs	r1, #0
 8002932:	2000      	movs	r0, #0
 8002934:	f000 fcb6 	bl	80032a4 <CanInit>


    HAL_Delay(4000);//must set more 4s
 8002938:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800293c:	f002 fe68 	bl	8005610 <HAL_Delay>

    //ready_flag = 1;
    start_docking_flag = 0;
 8002940:	4b87      	ldr	r3, [pc, #540]	; (8002b60 <spinonce+0x254>)
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 8002946:	4b87      	ldr	r3, [pc, #540]	; (8002b64 <spinonce+0x258>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 800294c:	2301      	movs	r3, #1
 800294e:	76fb      	strb	r3, [r7, #27]

    settingMotor();
 8002950:	f002 f90e 	bl	8004b70 <settingMotor>
    startMotor();
 8002954:	f001 fe30 	bl	80045b8 <startMotor>

	TransmitterIR_init();
 8002958:	f000 f9b0 	bl	8002cbc <TransmitterIR_init>
    ReceiverIR_init();
 800295c:	f7fe fae6 	bl	8000f2c <ReceiverIR_init>

#if debugging
    check_msg = 1;///must remove only debugging
    ready_flag = 1;
#endif
    stateReady();
 8002960:	f7ff fe80 	bl	8002664 <stateReady>
    HAL_Delay(1000);
 8002964:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002968:	f002 fe52 	bl	8005610 <HAL_Delay>

	while(1)
	{


		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 800296c:	4b7e      	ldr	r3, [pc, #504]	; (8002b68 <spinonce+0x25c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f103 020a 	add.w	r2, r3, #10
 8002974:	4b7d      	ldr	r3, [pc, #500]	; (8002b6c <spinonce+0x260>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d221      	bcs.n	80029c0 <spinonce+0xb4>
			FDsen_seq = Tick_100ms;
 800297c:	4b7b      	ldr	r3, [pc, #492]	; (8002b6c <spinonce+0x260>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <spinonce+0x25c>)
 8002982:	6013      	str	r3, [r2, #0]
			//printf("flag8\n");
		    for(int i=0;i<4;i++){
 8002984:	2300      	movs	r3, #0
 8002986:	62bb      	str	r3, [r7, #40]	; 0x28
 8002988:	e014      	b.n	80029b4 <spinonce+0xa8>
		    	HAL_ADC_Start(&hadc1);
 800298a:	4879      	ldr	r0, [pc, #484]	; (8002b70 <spinonce+0x264>)
 800298c:	f002 fea8 	bl	80056e0 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100);
 8002990:	2164      	movs	r1, #100	; 0x64
 8002992:	4877      	ldr	r0, [pc, #476]	; (8002b70 <spinonce+0x264>)
 8002994:	f002 ffa6 	bl	80058e4 <HAL_ADC_PollForConversion>
				FDval[i] = HAL_ADC_GetValue(&hadc1);
 8002998:	4875      	ldr	r0, [pc, #468]	; (8002b70 <spinonce+0x264>)
 800299a:	f003 f82e 	bl	80059fa <HAL_ADC_GetValue>
 800299e:	4603      	mov	r3, r0
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	3330      	adds	r3, #48	; 0x30
 80029a8:	443b      	add	r3, r7
 80029aa:	f823 2c30 	strh.w	r2, [r3, #-48]
		    for(int i=0;i<4;i++){
 80029ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b0:	3301      	adds	r3, #1
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80029b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029b6:	2b03      	cmp	r3, #3
 80029b8:	dde7      	ble.n	800298a <spinonce+0x7e>
		    }
		    HAL_ADC_Stop(&hadc1);
 80029ba:	486d      	ldr	r0, [pc, #436]	; (8002b70 <spinonce+0x264>)
 80029bc:	f002 ff5e 	bl	800587c <HAL_ADC_Stop>
		  //HAL_Delay(100);


			}

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80029c0:	4b6c      	ldr	r3, [pc, #432]	; (8002b74 <spinonce+0x268>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	1d5a      	adds	r2, r3, #5
 80029c6:	4b69      	ldr	r3, [pc, #420]	; (8002b6c <spinonce+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d20c      	bcs.n	80029e8 <spinonce+0xdc>
    		toggle_seq = Tick_100ms;
 80029ce:	4b67      	ldr	r3, [pc, #412]	; (8002b6c <spinonce+0x260>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a68      	ldr	r2, [pc, #416]	; (8002b74 <spinonce+0x268>)
 80029d4:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 80029d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80029da:	4867      	ldr	r0, [pc, #412]	; (8002b78 <spinonce+0x26c>)
 80029dc:	f004 fc23 	bl	8007226 <HAL_GPIO_TogglePin>
    		stateIdle();
 80029e0:	f7ff ff5e 	bl	80028a0 <stateIdle>
    		stateThread();
 80029e4:	f7ff feb8 	bl	8002758 <stateThread>
    		//printf("redtest\n");
    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 80029e8:	4b64      	ldr	r3, [pc, #400]	; (8002b7c <spinonce+0x270>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	1d1a      	adds	r2, r3, #4
 80029ee:	4b64      	ldr	r3, [pc, #400]	; (8002b80 <spinonce+0x274>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d209      	bcs.n	8002a0a <spinonce+0xfe>
    		controlmotor_seq = gTick;
 80029f6:	4b62      	ldr	r3, [pc, #392]	; (8002b80 <spinonce+0x274>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a60      	ldr	r2, [pc, #384]	; (8002b7c <spinonce+0x270>)
 80029fc:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 80029fe:	f7ff fae5 	bl	8001fcc <controlMotor>
            sendEnc(CANID3);
 8002a02:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8002a06:	f7ff fc15 	bl	8002234 <sendEnc>
            //printf("controlmotor_seq%d\n", gTick);
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 8002a0a:	4b5e      	ldr	r3, [pc, #376]	; (8002b84 <spinonce+0x278>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	1cda      	adds	r2, r3, #3
 8002a10:	4b5b      	ldr	r3, [pc, #364]	; (8002b80 <spinonce+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d213      	bcs.n	8002a40 <spinonce+0x134>
    		reqmotor_seq = gTick;
 8002a18:	4b59      	ldr	r3, [pc, #356]	; (8002b80 <spinonce+0x274>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a59      	ldr	r2, [pc, #356]	; (8002b84 <spinonce+0x278>)
 8002a1e:	6013      	str	r3, [r2, #0]
    		reqmotor_toggle ^= 1;
 8002a20:	4b59      	ldr	r3, [pc, #356]	; (8002b88 <spinonce+0x27c>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	f083 0301 	eor.w	r3, r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4b57      	ldr	r3, [pc, #348]	; (8002b88 <spinonce+0x27c>)
 8002a2c:	701a      	strb	r2, [r3, #0]
    		//printf("reqmotor_seq: %d\n", reqmotor_seq);
    		if(reqmotor_toggle){reqEnc();/*printf("reqEnc() ");*/}
 8002a2e:	4b56      	ldr	r3, [pc, #344]	; (8002b88 <spinonce+0x27c>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d002      	beq.n	8002a3c <spinonce+0x130>
 8002a36:	f001 fecf 	bl	80047d8 <reqEnc>
 8002a3a:	e001      	b.n	8002a40 <spinonce+0x134>
    		else{reqState();/*printf("reqState()\n");*/}
 8002a3c:	f001 ff19 	bl	8004872 <reqState>
//    		stateThread();
//
//    	}


		if((Tick_100ms>sendsensor_seq+4)){
 8002a40:	4b52      	ldr	r3, [pc, #328]	; (8002b8c <spinonce+0x280>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	1d1a      	adds	r2, r3, #4
 8002a46:	4b49      	ldr	r3, [pc, #292]	; (8002b6c <spinonce+0x260>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d25f      	bcs.n	8002b0e <spinonce+0x202>
			sendsensor_seq = Tick_100ms;
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <spinonce+0x260>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a4e      	ldr	r2, [pc, #312]	; (8002b8c <spinonce+0x280>)
 8002a54:	6013      	str	r3, [r2, #0]
			sensor_seq_count ^= 1;
 8002a56:	4b4e      	ldr	r3, [pc, #312]	; (8002b90 <spinonce+0x284>)
 8002a58:	781b      	ldrb	r3, [r3, #0]
 8002a5a:	f083 0301 	eor.w	r3, r3, #1
 8002a5e:	b2da      	uxtb	r2, r3
 8002a60:	4b4b      	ldr	r3, [pc, #300]	; (8002b90 <spinonce+0x284>)
 8002a62:	701a      	strb	r2, [r3, #0]
//			pre_usTick = us_Tick;
//			while(us_Tick < pre_usTick+30){;}//wait 150us
//			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);

			//////////////////////////////////////////////
			if(sensor_seq_count){
 8002a64:	4b4a      	ldr	r3, [pc, #296]	; (8002b90 <spinonce+0x284>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d012      	beq.n	8002a92 <spinonce+0x186>
//				for(int i=1;i<7;i+=2){
//				buf[i-1] = USSn_DataRead(i);

//				}
				//printf("flag1111111111111\n");
				buf[0] = USSn_DataRead(1);
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	f002 fc8b 	bl	8005388 <USSn_DataRead>
 8002a72:	4603      	mov	r3, r0
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	723b      	strb	r3, [r7, #8]
				buf[2] = USSn_DataRead(3);
 8002a78:	2003      	movs	r0, #3
 8002a7a:	f002 fc85 	bl	8005388 <USSn_DataRead>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	72bb      	strb	r3, [r7, #10]
				buf[4] = USSn_DataRead(5);;
 8002a84:	2005      	movs	r0, #5
 8002a86:	f002 fc7f 	bl	8005388 <USSn_DataRead>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	733b      	strb	r3, [r7, #12]
 8002a90:	e011      	b.n	8002ab6 <spinonce+0x1aa>
			else {
//					for(int i=2;i<7;i+=2){
//					buf[i-1] = USSn_DataRead(i);//printf("flag211\n");
//					}
				//printf("flag22222222222222\n");
				buf[1] = USSn_DataRead(2);
 8002a92:	2002      	movs	r0, #2
 8002a94:	f002 fc78 	bl	8005388 <USSn_DataRead>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	727b      	strb	r3, [r7, #9]
				buf[3] = USSn_DataRead(4);
 8002a9e:	2004      	movs	r0, #4
 8002aa0:	f002 fc72 	bl	8005388 <USSn_DataRead>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	72fb      	strb	r3, [r7, #11]
				buf[5] = USSn_DataRead(6);
 8002aaa:	2006      	movs	r0, #6
 8002aac:	f002 fc6c 	bl	8005388 <USSn_DataRead>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	737b      	strb	r3, [r7, #13]
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
			buf[6] = inhome << 1;
 8002ab6:	4b37      	ldr	r3, [pc, #220]	; (8002b94 <spinonce+0x288>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	73bb      	strb	r3, [r7, #14]
			//printf("flag11\n");
			//printf("FDval[1]: %d\n", FDval[1]);
			for(int i=0; i<4;i++){
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ac4:	e016      	b.n	8002af4 <spinonce+0x1e8>
				if(FDval[i]>150){
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	3330      	adds	r3, #48	; 0x30
 8002acc:	443b      	add	r3, r7
 8002ace:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 8002ad2:	2b96      	cmp	r3, #150	; 0x96
 8002ad4:	d90b      	bls.n	8002aee <spinonce+0x1e2>
					buf[7] |= 1<<i+4;
 8002ad6:	7bfb      	ldrb	r3, [r7, #15]
 8002ad8:	b25a      	sxtb	r2, r3
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	3304      	adds	r3, #4
 8002ade:	2101      	movs	r1, #1
 8002ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ae4:	b25b      	sxtb	r3, r3
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	b25b      	sxtb	r3, r3
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	73fb      	strb	r3, [r7, #15]
			for(int i=0; i<4;i++){
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	3301      	adds	r3, #1
 8002af2:	627b      	str	r3, [r7, #36]	; 0x24
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	2b03      	cmp	r3, #3
 8002af8:	dde5      	ble.n	8002ac6 <spinonce+0x1ba>
				//else {buf[7] |= 0<<i+4;}
			}
			//buf[index] = 0;
			//printf("flag12\n");
			//printf("sendcan: %d %d %d %d %d %d %d %d \n", buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7] );
			sendCan(CANID4, buf, 8, 1);//test
 8002afa:	f107 0108 	add.w	r1, r7, #8
 8002afe:	2301      	movs	r3, #1
 8002b00:	2208      	movs	r2, #8
 8002b02:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8002b06:	f000 fc19 	bl	800333c <sendCan>
			//printf("flag13\n");
			//index = 0;
			buf[7]=0;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	73fb      	strb	r3, [r7, #15]
			//printf("flag2\n");
		}

		if(FLAG_RxCplt>0){
 8002b0e:	4b22      	ldr	r3, [pc, #136]	; (8002b98 <spinonce+0x28c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f43f af2a 	beq.w	800296c <spinonce+0x60>
			//printf("flag3\n");
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8002b18:	2300      	movs	r3, #0
 8002b1a:	623b      	str	r3, [r7, #32]
 8002b1c:	e00c      	b.n	8002b38 <spinonce+0x22c>
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	; (8002b9c <spinonce+0x290>)
 8002b20:	6a3b      	ldr	r3, [r7, #32]
 8002b22:	4413      	add	r3, r2
 8002b24:	7819      	ldrb	r1, [r3, #0]
 8002b26:	f107 0210 	add.w	r2, r7, #16
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	460a      	mov	r2, r1
 8002b30:	701a      	strb	r2, [r3, #0]
 8002b32:	6a3b      	ldr	r3, [r7, #32]
 8002b34:	3301      	adds	r3, #1
 8002b36:	623b      	str	r3, [r7, #32]
 8002b38:	6a3b      	ldr	r3, [r7, #32]
 8002b3a:	2b07      	cmp	r3, #7
 8002b3c:	ddef      	ble.n	8002b1e <spinonce+0x212>
    		FLAG_RxCplt--;
 8002b3e:	4b16      	ldr	r3, [pc, #88]	; (8002b98 <spinonce+0x28c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <spinonce+0x28c>)
 8002b46:	6013      	str	r3, [r2, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8002b48:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <spinonce+0x294>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	4b14      	ldr	r3, [pc, #80]	; (8002ba0 <spinonce+0x294>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d927      	bls.n	8002ba4 <spinonce+0x298>
 8002b54:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <spinonce+0x294>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b5a:	e026      	b.n	8002baa <spinonce+0x29e>
 8002b5c:	0800cf48 	.word	0x0800cf48
 8002b60:	20000325 	.word	0x20000325
 8002b64:	20000328 	.word	0x20000328
 8002b68:	200002dc 	.word	0x200002dc
 8002b6c:	200002d0 	.word	0x200002d0
 8002b70:	20000468 	.word	0x20000468
 8002b74:	200002d8 	.word	0x200002d8
 8002b78:	40020400 	.word	0x40020400
 8002b7c:	200002f0 	.word	0x200002f0
 8002b80:	200002c8 	.word	0x200002c8
 8002b84:	200002f8 	.word	0x200002f8
 8002b88:	200002fc 	.word	0x200002fc
 8002b8c:	200002ec 	.word	0x200002ec
 8002b90:	200002f4 	.word	0x200002f4
 8002b94:	20000390 	.word	0x20000390
 8002b98:	200003f8 	.word	0x200003f8
 8002b9c:	200003fc 	.word	0x200003fc
 8002ba0:	20000404 	.word	0x20000404
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8002ba4:	4b42      	ldr	r3, [pc, #264]	; (8002cb0 <spinonce+0x3a4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
			//if(CanId==1001){printf("canid1001 ready: %d\n", ready_flag);}
			//printf("canid ready: %d\n", ready_flag);
			if(ready_flag)
 8002baa:	4b42      	ldr	r3, [pc, #264]	; (8002cb4 <spinonce+0x3a8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d072      	beq.n	8002c98 <spinonce+0x38c>
			{
				//printf("flag4\n");
				switch(CanId)
 8002bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bb4:	4a40      	ldr	r2, [pc, #256]	; (8002cb8 <spinonce+0x3ac>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d04e      	beq.n	8002c58 <spinonce+0x34c>
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	4a3e      	ldr	r2, [pc, #248]	; (8002cb8 <spinonce+0x3ac>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d86d      	bhi.n	8002c9e <spinonce+0x392>
 8002bc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bc4:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d03f      	beq.n	8002c4c <spinonce+0x340>
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d863      	bhi.n	8002c9e <spinonce+0x392>
 8002bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd8:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d02f      	beq.n	8002c40 <spinonce+0x334>
 8002be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be2:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d859      	bhi.n	8002c9e <spinonce+0x392>
 8002bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bec:	f240 7201 	movw	r2, #1793	; 0x701
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d04e      	beq.n	8002c92 <spinonce+0x386>
 8002bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bf6:	f240 7201 	movw	r2, #1793	; 0x701
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d84f      	bhi.n	8002c9e <spinonce+0x392>
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	f240 5281 	movw	r2, #1409	; 0x581
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d02d      	beq.n	8002c64 <spinonce+0x358>
 8002c08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0a:	f240 5281 	movw	r2, #1409	; 0x581
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d845      	bhi.n	8002c9e <spinonce+0x392>
 8002c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c14:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d005      	beq.n	8002c28 <spinonce+0x31c>
 8002c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c1e:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d006      	beq.n	8002c34 <spinonce+0x328>
 8002c26:	e03a      	b.n	8002c9e <spinonce+0x392>
				{
				//printf("flag5\n");
				case CANID1:
					parseCmdvel(canbuf);
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7ff fab5 	bl	800219c <parseCmdvel>
					//printf("parseCmdvel\n");
					break;
 8002c32:	e034      	b.n	8002c9e <spinonce+0x392>

				case CANID2:
					parseState(canbuf);
 8002c34:	f107 0310 	add.w	r3, r7, #16
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7ff f97f 	bl	8001f3c <parseState>
					//printf("parseState\n");
					break;
 8002c3e:	e02e      	b.n	8002c9e <spinonce+0x392>

				case CANID5:
					parseTop(canbuf);
 8002c40:	f107 0310 	add.w	r3, r7, #16
 8002c44:	4618      	mov	r0, r3
 8002c46:	f7ff f94d 	bl	8001ee4 <parseTop>
					break;
 8002c4a:	e028      	b.n	8002c9e <spinonce+0x392>

				case CANID6:
					parsePmm(canbuf);
 8002c4c:	f107 0310 	add.w	r3, r7, #16
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff f915 	bl	8001e80 <parsePmm>
					break;
 8002c56:	e022      	b.n	8002c9e <spinonce+0x392>

				case CANID7:
					parseEnc(canbuf);
 8002c58:	f107 0310 	add.w	r3, r7, #16
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fc01 	bl	8002464 <parseEnc>
					break;
 8002c62:	e01c      	b.n	8002c9e <spinonce+0x392>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8002c64:	7c7b      	ldrb	r3, [r7, #17]
 8002c66:	2b6c      	cmp	r3, #108	; 0x6c
 8002c68:	d107      	bne.n	8002c7a <spinonce+0x36e>
 8002c6a:	7cbb      	ldrb	r3, [r7, #18]
 8002c6c:	2b60      	cmp	r3, #96	; 0x60
 8002c6e:	d104      	bne.n	8002c7a <spinonce+0x36e>
						parseEnc114(canbuf);
 8002c70:	f107 0310 	add.w	r3, r7, #16
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff fc6f 	bl	8002558 <parseEnc114>
                        //printf("parseEnc114(canbuf)\n");
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 8002c7a:	7c7b      	ldrb	r3, [r7, #17]
 8002c7c:	2b3f      	cmp	r3, #63	; 0x3f
 8002c7e:	d10d      	bne.n	8002c9c <spinonce+0x390>
 8002c80:	7cbb      	ldrb	r3, [r7, #18]
 8002c82:	2b60      	cmp	r3, #96	; 0x60
 8002c84:	d10a      	bne.n	8002c9c <spinonce+0x390>
						parseState114(canbuf);
 8002c86:	f107 0310 	add.w	r3, r7, #16
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff fcb4 	bl	80025f8 <parseState114>
                        //printf("parseState114(canbuf)\n");
					break;
 8002c90:	e004      	b.n	8002c9c <spinonce+0x390>

				case MOTOR114_START_ID:
					startMotor();
 8002c92:	f001 fc91 	bl	80045b8 <startMotor>
					break;
 8002c96:	e002      	b.n	8002c9e <spinonce+0x392>
					//printf("flag6\n");


				}

			}
 8002c98:	bf00      	nop
 8002c9a:	e000      	b.n	8002c9e <spinonce+0x392>
					break;
 8002c9c:	bf00      	nop

			//printf("flag7\n");
			g_tCan_Rx_Header.StdId=0;
 8002c9e:	4b04      	ldr	r3, [pc, #16]	; (8002cb0 <spinonce+0x3a4>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8002ca4:	4b02      	ldr	r3, [pc, #8]	; (8002cb0 <spinonce+0x3a4>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	605a      	str	r2, [r3, #4]
			CanId = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	62fb      	str	r3, [r7, #44]	; 0x2c
		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 8002cae:	e65d      	b.n	800296c <spinonce+0x60>
 8002cb0:	20000404 	.word	0x20000404
 8002cb4:	20000324 	.word	0x20000324
 8002cb8:	00b8b701 	.word	0x00b8b701

08002cbc <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	af00      	add	r7, sp, #0




	IRDUTY0;
 8002cc0:	4b0e      	ldr	r3, [pc, #56]	; (8002cfc <TransmitterIR_init+0x40>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <TransmitterIR_init+0x44>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 8002cce:	4b0c      	ldr	r3, [pc, #48]	; (8002d00 <TransmitterIR_init+0x44>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 8002cd4:	4b0a      	ldr	r3, [pc, #40]	; (8002d00 <TransmitterIR_init+0x44>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <TransmitterIR_init+0x44>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 8002ce0:	4b07      	ldr	r3, [pc, #28]	; (8002d00 <TransmitterIR_init+0x44>)
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 8002ce6:	4b07      	ldr	r3, [pc, #28]	; (8002d04 <TransmitterIR_init+0x48>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 8002cec:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <TransmitterIR_init+0x48>)
 8002cee:	2200      	movs	r2, #0
 8002cf0:	605a      	str	r2, [r3, #4]




}
 8002cf2:	bf00      	nop
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	200004d8 	.word	0x200004d8
 8002d00:	200003e4 	.word	0x200003e4
 8002d04:	2000039c 	.word	0x2000039c

08002d08 <TIR_getState>:

TIR_State TIR_getState(void) {
 8002d08:	b480      	push	{r7}
 8002d0a:	b083      	sub	sp, #12
 8002d0c:	af00      	add	r7, sp, #0
    LOCK();
    TIR_State s = TIR_work.state;
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <TIR_getState+0x1c>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8002d14:	79fb      	ldrb	r3, [r7, #7]
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	370c      	adds	r7, #12
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	200003e4 	.word	0x200003e4

08002d28 <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
 8002d34:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (TIR_work.state != TIR_Idle) {
 8002d36:	4b2b      	ldr	r3, [pc, #172]	; (8002de4 <setData+0xbc>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <setData+0x1c>
        UNLOCK();
        return -1;
 8002d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d42:	e04a      	b.n	8002dda <setData+0xb2>
    }

    TIR_work.state = Leader;
 8002d44:	4b27      	ldr	r3, [pc, #156]	; (8002de4 <setData+0xbc>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]
    TIR_work.bitcount = 0;
 8002d4a:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <setData+0xbc>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	605a      	str	r2, [r3, #4]
    TIR_work.leader = 0;
 8002d50:	4b24      	ldr	r3, [pc, #144]	; (8002de4 <setData+0xbc>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	609a      	str	r2, [r3, #8]
    TIR_work.data = 0;
 8002d56:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <setData+0xbc>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	60da      	str	r2, [r3, #12]
    TIR_work.trailer = 0;
 8002d5c:	4b21      	ldr	r3, [pc, #132]	; (8002de4 <setData+0xbc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	611a      	str	r2, [r3, #16]

    TIR_data.format = format;
 8002d62:	4a21      	ldr	r2, [pc, #132]	; (8002de8 <setData+0xc0>)
 8002d64:	7bfb      	ldrb	r3, [r7, #15]
 8002d66:	7013      	strb	r3, [r2, #0]
    TIR_data.bitlength = bitlength;
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <setData+0xc0>)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	da00      	bge.n	8002d76 <setData+0x4e>
 8002d74:	3307      	adds	r3, #7
 8002d76:	10db      	asrs	r3, r3, #3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8002d8e:	2300      	movs	r3, #0
 8002d90:	617b      	str	r3, [r7, #20]
 8002d92:	e00c      	b.n	8002dae <setData+0x86>
        TIR_data.buffer[i] = buf[i];
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	4413      	add	r3, r2
 8002d9a:	7819      	ldrb	r1, [r3, #0]
 8002d9c:	4a12      	ldr	r2, [pc, #72]	; (8002de8 <setData+0xc0>)
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	4413      	add	r3, r2
 8002da2:	3308      	adds	r3, #8
 8002da4:	460a      	mov	r2, r1
 8002da6:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	429a      	cmp	r2, r3
 8002db4:	dbee      	blt.n	8002d94 <setData+0x6c>
    }

    switch (format) {
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b05      	cmp	r3, #5
 8002dba:	d00c      	beq.n	8002dd6 <setData+0xae>
 8002dbc:	2b05      	cmp	r3, #5
 8002dbe:	dc0b      	bgt.n	8002dd8 <setData+0xb0>
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d001      	beq.n	8002dc8 <setData+0xa0>
 8002dc4:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 8002dc6:	e007      	b.n	8002dd8 <setData+0xb0>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8002dc8:	4808      	ldr	r0, [pc, #32]	; (8002dec <setData+0xc4>)
 8002dca:	f005 fbc1 	bl	8008550 <HAL_TIM_Base_Start_IT>
        		TIR_setData_flag = 1;
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <setData+0xc8>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	701a      	strb	r2, [r3, #0]
            break;
 8002dd4:	e000      	b.n	8002dd8 <setData+0xb0>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 8002dd6:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 8002dd8:	687b      	ldr	r3, [r7, #4]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	200003e4 	.word	0x200003e4
 8002de8:	2000039c 	.word	0x2000039c
 8002dec:	20000608 	.word	0x20000608
 8002df0:	200002e0 	.word	0x200002e0

08002df4 <tick>:

void tick(void) {
 8002df4:	b580      	push	{r7, lr}
 8002df6:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 8002df8:	4b80      	ldr	r3, [pc, #512]	; (8002ffc <tick+0x208>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b03      	cmp	r3, #3
 8002dfe:	f200 8247 	bhi.w	8003290 <tick+0x49c>
 8002e02:	a201      	add	r2, pc, #4	; (adr r2, 8002e08 <tick+0x14>)
 8002e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e33 	.word	0x08002e33
 8002e10:	08002f19 	.word	0x08002f19
 8002e14:	0800317f 	.word	0x0800317f
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8002e18:	4b78      	ldr	r3, [pc, #480]	; (8002ffc <tick+0x208>)
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8002e1e:	4b77      	ldr	r3, [pc, #476]	; (8002ffc <tick+0x208>)
 8002e20:	2200      	movs	r2, #0
 8002e22:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8002e24:	4b75      	ldr	r3, [pc, #468]	; (8002ffc <tick+0x208>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8002e2a:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <tick+0x208>)
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	611a      	str	r2, [r3, #16]
            break;
 8002e30:	e235      	b.n	800329e <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8002e32:	4b73      	ldr	r3, [pc, #460]	; (8003000 <tick+0x20c>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d121      	bne.n	8002e7e <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002e3a:	4b70      	ldr	r3, [pc, #448]	; (8002ffc <tick+0x208>)
 8002e3c:	689a      	ldr	r2, [r3, #8]
 8002e3e:	4b71      	ldr	r3, [pc, #452]	; (8003004 <tick+0x210>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	da04      	bge.n	8002e50 <tick+0x5c>
                    IRDUTY50;
 8002e46:	4b70      	ldr	r3, [pc, #448]	; (8003008 <tick+0x214>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2234      	movs	r2, #52	; 0x34
 8002e4c:	635a      	str	r2, [r3, #52]	; 0x34
 8002e4e:	e003      	b.n	8002e58 <tick+0x64>
                } else {
                    IRDUTY0;
 8002e50:	4b6d      	ldr	r3, [pc, #436]	; (8003008 <tick+0x214>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002e58:	4b68      	ldr	r3, [pc, #416]	; (8002ffc <tick+0x208>)
 8002e5a:	689b      	ldr	r3, [r3, #8]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	4a67      	ldr	r2, [pc, #412]	; (8002ffc <tick+0x208>)
 8002e60:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002e62:	4b68      	ldr	r3, [pc, #416]	; (8003004 <tick+0x210>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	4b69      	ldr	r3, [pc, #420]	; (800300c <tick+0x218>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	441a      	add	r2, r3
 8002e6c:	4b63      	ldr	r3, [pc, #396]	; (8002ffc <tick+0x208>)
 8002e6e:	689b      	ldr	r3, [r3, #8]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	f300 820f 	bgt.w	8003294 <tick+0x4a0>
                    TIR_work.state = Data;
 8002e76:	4b61      	ldr	r3, [pc, #388]	; (8002ffc <tick+0x208>)
 8002e78:	2202      	movs	r2, #2
 8002e7a:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002e7c:	e20a      	b.n	8003294 <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8002e7e:	4b60      	ldr	r3, [pc, #384]	; (8003000 <tick+0x20c>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b03      	cmp	r3, #3
 8002e84:	d121      	bne.n	8002eca <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002e86:	4b5d      	ldr	r3, [pc, #372]	; (8002ffc <tick+0x208>)
 8002e88:	689a      	ldr	r2, [r3, #8]
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <tick+0x21c>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	da04      	bge.n	8002e9c <tick+0xa8>
                    IRDUTY50;
 8002e92:	4b5d      	ldr	r3, [pc, #372]	; (8003008 <tick+0x214>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2234      	movs	r2, #52	; 0x34
 8002e98:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9a:	e003      	b.n	8002ea4 <tick+0xb0>
                    IRDUTY0;
 8002e9c:	4b5a      	ldr	r3, [pc, #360]	; (8003008 <tick+0x214>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002ea4:	4b55      	ldr	r3, [pc, #340]	; (8002ffc <tick+0x208>)
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	4a54      	ldr	r2, [pc, #336]	; (8002ffc <tick+0x208>)
 8002eac:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8002eae:	4b58      	ldr	r3, [pc, #352]	; (8003010 <tick+0x21c>)
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	4b58      	ldr	r3, [pc, #352]	; (8003014 <tick+0x220>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	441a      	add	r2, r3
 8002eb8:	4b50      	ldr	r3, [pc, #320]	; (8002ffc <tick+0x208>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f300 81e9 	bgt.w	8003294 <tick+0x4a0>
                    TIR_work.state = Data;
 8002ec2:	4b4e      	ldr	r3, [pc, #312]	; (8002ffc <tick+0x208>)
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	701a      	strb	r2, [r3, #0]
            break;
 8002ec8:	e1e4      	b.n	8003294 <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 8002eca:	4b4d      	ldr	r3, [pc, #308]	; (8003000 <tick+0x20c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	f040 81e0 	bne.w	8003294 <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8002ed4:	4b49      	ldr	r3, [pc, #292]	; (8002ffc <tick+0x208>)
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	4b4f      	ldr	r3, [pc, #316]	; (8003018 <tick+0x224>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	429a      	cmp	r2, r3
 8002ede:	da04      	bge.n	8002eea <tick+0xf6>
                    IRDUTY50;
 8002ee0:	4b49      	ldr	r3, [pc, #292]	; (8003008 <tick+0x214>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2234      	movs	r2, #52	; 0x34
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee8:	e003      	b.n	8002ef2 <tick+0xfe>
                    IRDUTY0;
 8002eea:	4b47      	ldr	r3, [pc, #284]	; (8003008 <tick+0x214>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002ef2:	4b42      	ldr	r3, [pc, #264]	; (8002ffc <tick+0x208>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	4a40      	ldr	r2, [pc, #256]	; (8002ffc <tick+0x208>)
 8002efa:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8002efc:	4b46      	ldr	r3, [pc, #280]	; (8003018 <tick+0x224>)
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	4b46      	ldr	r3, [pc, #280]	; (800301c <tick+0x228>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	441a      	add	r2, r3
 8002f06:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <tick+0x208>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	f300 81c2 	bgt.w	8003294 <tick+0x4a0>
                    TIR_work.state = Data;
 8002f10:	4b3a      	ldr	r3, [pc, #232]	; (8002ffc <tick+0x208>)
 8002f12:	2202      	movs	r2, #2
 8002f14:	701a      	strb	r2, [r3, #0]
            break;
 8002f16:	e1bd      	b.n	8003294 <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 8002f18:	4b39      	ldr	r3, [pc, #228]	; (8003000 <tick+0x20c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d15b      	bne.n	8002fd8 <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8002f20:	4b36      	ldr	r3, [pc, #216]	; (8002ffc <tick+0x208>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d109      	bne.n	8002f3c <tick+0x148>
                    IRDUTY50;
 8002f28:	4b37      	ldr	r3, [pc, #220]	; (8003008 <tick+0x214>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2234      	movs	r2, #52	; 0x34
 8002f2e:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002f30:	4b32      	ldr	r3, [pc, #200]	; (8002ffc <tick+0x208>)
 8002f32:	68db      	ldr	r3, [r3, #12]
 8002f34:	3301      	adds	r3, #1
 8002f36:	4a31      	ldr	r2, [pc, #196]	; (8002ffc <tick+0x208>)
 8002f38:	60d3      	str	r3, [r2, #12]
 8002f3a:	e042      	b.n	8002fc2 <tick+0x1ce>
                } else {
                    IRDUTY0;
 8002f3c:	4b32      	ldr	r3, [pc, #200]	; (8003008 <tick+0x214>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2200      	movs	r2, #0
 8002f42:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002f44:	4b2d      	ldr	r3, [pc, #180]	; (8002ffc <tick+0x208>)
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	da00      	bge.n	8002f4e <tick+0x15a>
 8002f4c:	3307      	adds	r3, #7
 8002f4e:	10db      	asrs	r3, r3, #3
 8002f50:	461a      	mov	r2, r3
 8002f52:	4b2b      	ldr	r3, [pc, #172]	; (8003000 <tick+0x20c>)
 8002f54:	4413      	add	r3, r2
 8002f56:	7a1b      	ldrb	r3, [r3, #8]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4b28      	ldr	r3, [pc, #160]	; (8002ffc <tick+0x208>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	425a      	negs	r2, r3
 8002f60:	f003 0307 	and.w	r3, r3, #7
 8002f64:	f002 0207 	and.w	r2, r2, #7
 8002f68:	bf58      	it	pl
 8002f6a:	4253      	negpl	r3, r2
 8002f6c:	fa41 f303 	asr.w	r3, r1, r3
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d012      	beq.n	8002f9e <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 8002f78:	4b20      	ldr	r3, [pc, #128]	; (8002ffc <tick+0x208>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	2b02      	cmp	r3, #2
 8002f7e:	dd08      	ble.n	8002f92 <tick+0x19e>
                            TIR_work.bitcount++;
 8002f80:	4b1e      	ldr	r3, [pc, #120]	; (8002ffc <tick+0x208>)
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	3301      	adds	r3, #1
 8002f86:	4a1d      	ldr	r2, [pc, #116]	; (8002ffc <tick+0x208>)
 8002f88:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002f8a:	4b1c      	ldr	r3, [pc, #112]	; (8002ffc <tick+0x208>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	60da      	str	r2, [r3, #12]
 8002f90:	e017      	b.n	8002fc2 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002f92:	4b1a      	ldr	r3, [pc, #104]	; (8002ffc <tick+0x208>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	3301      	adds	r3, #1
 8002f98:	4a18      	ldr	r2, [pc, #96]	; (8002ffc <tick+0x208>)
 8002f9a:	60d3      	str	r3, [r2, #12]
 8002f9c:	e011      	b.n	8002fc2 <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8002f9e:	4b17      	ldr	r3, [pc, #92]	; (8002ffc <tick+0x208>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	dd08      	ble.n	8002fb8 <tick+0x1c4>
                            TIR_work.bitcount++;
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <tick+0x208>)
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	3301      	adds	r3, #1
 8002fac:	4a13      	ldr	r2, [pc, #76]	; (8002ffc <tick+0x208>)
 8002fae:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002fb0:	4b12      	ldr	r3, [pc, #72]	; (8002ffc <tick+0x208>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	60da      	str	r2, [r3, #12]
 8002fb6:	e004      	b.n	8002fc2 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002fb8:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <tick+0x208>)
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <tick+0x208>)
 8002fc0:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002fc2:	4b0f      	ldr	r3, [pc, #60]	; (8003000 <tick+0x20c>)
 8002fc4:	685a      	ldr	r2, [r3, #4]
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <tick+0x208>)
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	f300 8164 	bgt.w	8003298 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002fd0:	4b0a      	ldr	r3, [pc, #40]	; (8002ffc <tick+0x208>)
 8002fd2:	2203      	movs	r2, #3
 8002fd4:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8002fd6:	e15f      	b.n	8003298 <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 8002fd8:	4b09      	ldr	r3, [pc, #36]	; (8003000 <tick+0x20c>)
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d16d      	bne.n	80030bc <tick+0x2c8>
                if (TIR_work.data == 0) {
 8002fe0:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <tick+0x208>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d11b      	bne.n	8003020 <tick+0x22c>
                    IRDUTY50;
 8002fe8:	4b07      	ldr	r3, [pc, #28]	; (8003008 <tick+0x214>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2234      	movs	r2, #52	; 0x34
 8002fee:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002ff0:	4b02      	ldr	r3, [pc, #8]	; (8002ffc <tick+0x208>)
 8002ff2:	68db      	ldr	r3, [r3, #12]
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	4a01      	ldr	r2, [pc, #4]	; (8002ffc <tick+0x208>)
 8002ff8:	60d3      	str	r3, [r2, #12]
 8002ffa:	e054      	b.n	80030a6 <tick+0x2b2>
 8002ffc:	200003e4 	.word	0x200003e4
 8003000:	2000039c 	.word	0x2000039c
 8003004:	0800cf94 	.word	0x0800cf94
 8003008:	200004d8 	.word	0x200004d8
 800300c:	0800cf98 	.word	0x0800cf98
 8003010:	0800cf9c 	.word	0x0800cf9c
 8003014:	0800cfa0 	.word	0x0800cfa0
 8003018:	0800cfa4 	.word	0x0800cfa4
 800301c:	0800cfa8 	.word	0x0800cfa8
                    IRDUTY0;
 8003020:	4b91      	ldr	r3, [pc, #580]	; (8003268 <tick+0x474>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	2200      	movs	r2, #0
 8003026:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8003028:	4b90      	ldr	r3, [pc, #576]	; (800326c <tick+0x478>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	2b00      	cmp	r3, #0
 800302e:	da00      	bge.n	8003032 <tick+0x23e>
 8003030:	3307      	adds	r3, #7
 8003032:	10db      	asrs	r3, r3, #3
 8003034:	461a      	mov	r2, r3
 8003036:	4b8e      	ldr	r3, [pc, #568]	; (8003270 <tick+0x47c>)
 8003038:	4413      	add	r3, r2
 800303a:	7a1b      	ldrb	r3, [r3, #8]
 800303c:	4619      	mov	r1, r3
 800303e:	4b8b      	ldr	r3, [pc, #556]	; (800326c <tick+0x478>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	425a      	negs	r2, r3
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	f002 0207 	and.w	r2, r2, #7
 800304c:	bf58      	it	pl
 800304e:	4253      	negpl	r3, r2
 8003050:	fa41 f303 	asr.w	r3, r1, r3
 8003054:	f003 0301 	and.w	r3, r3, #1
 8003058:	2b00      	cmp	r3, #0
 800305a:	d012      	beq.n	8003082 <tick+0x28e>
                        if (3 <= TIR_work.data) {
 800305c:	4b83      	ldr	r3, [pc, #524]	; (800326c <tick+0x478>)
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	2b02      	cmp	r3, #2
 8003062:	dd08      	ble.n	8003076 <tick+0x282>
                            TIR_work.bitcount++;
 8003064:	4b81      	ldr	r3, [pc, #516]	; (800326c <tick+0x478>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	3301      	adds	r3, #1
 800306a:	4a80      	ldr	r2, [pc, #512]	; (800326c <tick+0x478>)
 800306c:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 800306e:	4b7f      	ldr	r3, [pc, #508]	; (800326c <tick+0x478>)
 8003070:	2200      	movs	r2, #0
 8003072:	60da      	str	r2, [r3, #12]
 8003074:	e017      	b.n	80030a6 <tick+0x2b2>
                            TIR_work.data++;
 8003076:	4b7d      	ldr	r3, [pc, #500]	; (800326c <tick+0x478>)
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	3301      	adds	r3, #1
 800307c:	4a7b      	ldr	r2, [pc, #492]	; (800326c <tick+0x478>)
 800307e:	60d3      	str	r3, [r2, #12]
 8003080:	e011      	b.n	80030a6 <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 8003082:	4b7a      	ldr	r3, [pc, #488]	; (800326c <tick+0x478>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	2b00      	cmp	r3, #0
 8003088:	dd08      	ble.n	800309c <tick+0x2a8>
                            TIR_work.bitcount++;
 800308a:	4b78      	ldr	r3, [pc, #480]	; (800326c <tick+0x478>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	3301      	adds	r3, #1
 8003090:	4a76      	ldr	r2, [pc, #472]	; (800326c <tick+0x478>)
 8003092:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8003094:	4b75      	ldr	r3, [pc, #468]	; (800326c <tick+0x478>)
 8003096:	2200      	movs	r2, #0
 8003098:	60da      	str	r2, [r3, #12]
 800309a:	e004      	b.n	80030a6 <tick+0x2b2>
                            TIR_work.data++;
 800309c:	4b73      	ldr	r3, [pc, #460]	; (800326c <tick+0x478>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a72      	ldr	r2, [pc, #456]	; (800326c <tick+0x478>)
 80030a4:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 80030a6:	4b72      	ldr	r3, [pc, #456]	; (8003270 <tick+0x47c>)
 80030a8:	685a      	ldr	r2, [r3, #4]
 80030aa:	4b70      	ldr	r3, [pc, #448]	; (800326c <tick+0x478>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	f300 80f2 	bgt.w	8003298 <tick+0x4a4>
                    TIR_work.state = Trailer;
 80030b4:	4b6d      	ldr	r3, [pc, #436]	; (800326c <tick+0x478>)
 80030b6:	2203      	movs	r2, #3
 80030b8:	701a      	strb	r2, [r3, #0]
            break;
 80030ba:	e0ed      	b.n	8003298 <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 80030bc:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <tick+0x47c>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	2b05      	cmp	r3, #5
 80030c2:	f040 80e9 	bne.w	8003298 <tick+0x4a4>
                if (TIR_work.data == 0) {
 80030c6:	4b69      	ldr	r3, [pc, #420]	; (800326c <tick+0x478>)
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d109      	bne.n	80030e2 <tick+0x2ee>
                    IRDUTY0;
 80030ce:	4b66      	ldr	r3, [pc, #408]	; (8003268 <tick+0x474>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2200      	movs	r2, #0
 80030d4:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 80030d6:	4b65      	ldr	r3, [pc, #404]	; (800326c <tick+0x478>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	3301      	adds	r3, #1
 80030dc:	4a63      	ldr	r2, [pc, #396]	; (800326c <tick+0x478>)
 80030de:	60d3      	str	r3, [r2, #12]
 80030e0:	e042      	b.n	8003168 <tick+0x374>
                    IRDUTY50;
 80030e2:	4b61      	ldr	r3, [pc, #388]	; (8003268 <tick+0x474>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2234      	movs	r2, #52	; 0x34
 80030e8:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 80030ea:	4b60      	ldr	r3, [pc, #384]	; (800326c <tick+0x478>)
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	da00      	bge.n	80030f4 <tick+0x300>
 80030f2:	3307      	adds	r3, #7
 80030f4:	10db      	asrs	r3, r3, #3
 80030f6:	461a      	mov	r2, r3
 80030f8:	4b5d      	ldr	r3, [pc, #372]	; (8003270 <tick+0x47c>)
 80030fa:	4413      	add	r3, r2
 80030fc:	7a1b      	ldrb	r3, [r3, #8]
 80030fe:	4619      	mov	r1, r3
 8003100:	4b5a      	ldr	r3, [pc, #360]	; (800326c <tick+0x478>)
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	425a      	negs	r2, r3
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	f002 0207 	and.w	r2, r2, #7
 800310e:	bf58      	it	pl
 8003110:	4253      	negpl	r3, r2
 8003112:	fa41 f303 	asr.w	r3, r1, r3
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	2b00      	cmp	r3, #0
 800311c:	d012      	beq.n	8003144 <tick+0x350>
                        if (2 <= TIR_work.data) {
 800311e:	4b53      	ldr	r3, [pc, #332]	; (800326c <tick+0x478>)
 8003120:	68db      	ldr	r3, [r3, #12]
 8003122:	2b01      	cmp	r3, #1
 8003124:	dd08      	ble.n	8003138 <tick+0x344>
                            TIR_work.bitcount++;
 8003126:	4b51      	ldr	r3, [pc, #324]	; (800326c <tick+0x478>)
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	3301      	adds	r3, #1
 800312c:	4a4f      	ldr	r2, [pc, #316]	; (800326c <tick+0x478>)
 800312e:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8003130:	4b4e      	ldr	r3, [pc, #312]	; (800326c <tick+0x478>)
 8003132:	2200      	movs	r2, #0
 8003134:	60da      	str	r2, [r3, #12]
 8003136:	e017      	b.n	8003168 <tick+0x374>
                            TIR_work.data++;
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <tick+0x478>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	3301      	adds	r3, #1
 800313e:	4a4b      	ldr	r2, [pc, #300]	; (800326c <tick+0x478>)
 8003140:	60d3      	str	r3, [r2, #12]
 8003142:	e011      	b.n	8003168 <tick+0x374>
                        if (1 <= TIR_work.data) {
 8003144:	4b49      	ldr	r3, [pc, #292]	; (800326c <tick+0x478>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	dd08      	ble.n	800315e <tick+0x36a>
                            TIR_work.bitcount++;
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <tick+0x478>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	3301      	adds	r3, #1
 8003152:	4a46      	ldr	r2, [pc, #280]	; (800326c <tick+0x478>)
 8003154:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8003156:	4b45      	ldr	r3, [pc, #276]	; (800326c <tick+0x478>)
 8003158:	2200      	movs	r2, #0
 800315a:	60da      	str	r2, [r3, #12]
 800315c:	e004      	b.n	8003168 <tick+0x374>
                            TIR_work.data++;
 800315e:	4b43      	ldr	r3, [pc, #268]	; (800326c <tick+0x478>)
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	4a41      	ldr	r2, [pc, #260]	; (800326c <tick+0x478>)
 8003166:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <tick+0x47c>)
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	4b3f      	ldr	r3, [pc, #252]	; (800326c <tick+0x478>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	f300 8091 	bgt.w	8003298 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8003176:	4b3d      	ldr	r3, [pc, #244]	; (800326c <tick+0x478>)
 8003178:	2203      	movs	r2, #3
 800317a:	701a      	strb	r2, [r3, #0]
            break;
 800317c:	e08c      	b.n	8003298 <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 800317e:	4b3c      	ldr	r3, [pc, #240]	; (8003270 <tick+0x47c>)
 8003180:	781b      	ldrb	r3, [r3, #0]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d126      	bne.n	80031d4 <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <tick+0x478>)
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	4b3a      	ldr	r3, [pc, #232]	; (8003274 <tick+0x480>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	429a      	cmp	r2, r3
 8003190:	da04      	bge.n	800319c <tick+0x3a8>
                    IRDUTY50;
 8003192:	4b35      	ldr	r3, [pc, #212]	; (8003268 <tick+0x474>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2234      	movs	r2, #52	; 0x34
 8003198:	635a      	str	r2, [r3, #52]	; 0x34
 800319a:	e003      	b.n	80031a4 <tick+0x3b0>
                } else {
                    IRDUTY0;
 800319c:	4b32      	ldr	r3, [pc, #200]	; (8003268 <tick+0x474>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	2200      	movs	r2, #0
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 80031a4:	4b31      	ldr	r3, [pc, #196]	; (800326c <tick+0x478>)
 80031a6:	691b      	ldr	r3, [r3, #16]
 80031a8:	3301      	adds	r3, #1
 80031aa:	4a30      	ldr	r2, [pc, #192]	; (800326c <tick+0x478>)
 80031ac:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 80031ae:	4b31      	ldr	r3, [pc, #196]	; (8003274 <tick+0x480>)
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	4b31      	ldr	r3, [pc, #196]	; (8003278 <tick+0x484>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	441a      	add	r2, r3
 80031b8:	4b2c      	ldr	r3, [pc, #176]	; (800326c <tick+0x478>)
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	429a      	cmp	r2, r3
 80031be:	dc6d      	bgt.n	800329c <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 80031c0:	4b2a      	ldr	r3, [pc, #168]	; (800326c <tick+0x478>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 80031c6:	482d      	ldr	r0, [pc, #180]	; (800327c <tick+0x488>)
 80031c8:	f005 fa3a 	bl	8008640 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI0_IRQn);//이걸로 수신시작할 것
 80031cc:	2006      	movs	r0, #6
 80031ce:	f003 fe24 	bl	8006e1a <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 80031d2:	e063      	b.n	800329c <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <tick+0x47c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b03      	cmp	r3, #3
 80031da:	d120      	bne.n	800321e <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 80031dc:	4b23      	ldr	r3, [pc, #140]	; (800326c <tick+0x478>)
 80031de:	691a      	ldr	r2, [r3, #16]
 80031e0:	4b27      	ldr	r3, [pc, #156]	; (8003280 <tick+0x48c>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	429a      	cmp	r2, r3
 80031e6:	da04      	bge.n	80031f2 <tick+0x3fe>
                    IRDUTY50;
 80031e8:	4b1f      	ldr	r3, [pc, #124]	; (8003268 <tick+0x474>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2234      	movs	r2, #52	; 0x34
 80031ee:	635a      	str	r2, [r3, #52]	; 0x34
 80031f0:	e003      	b.n	80031fa <tick+0x406>
                    IRDUTY0;
 80031f2:	4b1d      	ldr	r3, [pc, #116]	; (8003268 <tick+0x474>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2200      	movs	r2, #0
 80031f8:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 80031fa:	4b1c      	ldr	r3, [pc, #112]	; (800326c <tick+0x478>)
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	3301      	adds	r3, #1
 8003200:	4a1a      	ldr	r2, [pc, #104]	; (800326c <tick+0x478>)
 8003202:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8003204:	4b1e      	ldr	r3, [pc, #120]	; (8003280 <tick+0x48c>)
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <tick+0x490>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	441a      	add	r2, r3
 800320e:	4b17      	ldr	r3, [pc, #92]	; (800326c <tick+0x478>)
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	dc42      	bgt.n	800329c <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <tick+0x478>)
 8003218:	2200      	movs	r2, #0
 800321a:	701a      	strb	r2, [r3, #0]
            break;
 800321c:	e03e      	b.n	800329c <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 800321e:	4b14      	ldr	r3, [pc, #80]	; (8003270 <tick+0x47c>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b05      	cmp	r3, #5
 8003224:	d13a      	bne.n	800329c <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <tick+0x478>)
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	4b17      	ldr	r3, [pc, #92]	; (8003288 <tick+0x494>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	da04      	bge.n	800323c <tick+0x448>
                    IRDUTY50;
 8003232:	4b0d      	ldr	r3, [pc, #52]	; (8003268 <tick+0x474>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2234      	movs	r2, #52	; 0x34
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
 800323a:	e003      	b.n	8003244 <tick+0x450>
                    IRDUTY0;
 800323c:	4b0a      	ldr	r3, [pc, #40]	; (8003268 <tick+0x474>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2200      	movs	r2, #0
 8003242:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8003244:	4b09      	ldr	r3, [pc, #36]	; (800326c <tick+0x478>)
 8003246:	691b      	ldr	r3, [r3, #16]
 8003248:	3301      	adds	r3, #1
 800324a:	4a08      	ldr	r2, [pc, #32]	; (800326c <tick+0x478>)
 800324c:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 800324e:	4b0e      	ldr	r3, [pc, #56]	; (8003288 <tick+0x494>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b0e      	ldr	r3, [pc, #56]	; (800328c <tick+0x498>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	441a      	add	r2, r3
 8003258:	4b04      	ldr	r3, [pc, #16]	; (800326c <tick+0x478>)
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	429a      	cmp	r2, r3
 800325e:	dc1d      	bgt.n	800329c <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8003260:	4b02      	ldr	r3, [pc, #8]	; (800326c <tick+0x478>)
 8003262:	2200      	movs	r2, #0
 8003264:	701a      	strb	r2, [r3, #0]
            break;
 8003266:	e019      	b.n	800329c <tick+0x4a8>
 8003268:	200004d8 	.word	0x200004d8
 800326c:	200003e4 	.word	0x200003e4
 8003270:	2000039c 	.word	0x2000039c
 8003274:	0800cfac 	.word	0x0800cfac
 8003278:	0800cfb0 	.word	0x0800cfb0
 800327c:	20000608 	.word	0x20000608
 8003280:	0800cfb4 	.word	0x0800cfb4
 8003284:	0800cfb8 	.word	0x0800cfb8
 8003288:	0800cfbc 	.word	0x0800cfbc
 800328c:	0800cfc0 	.word	0x0800cfc0
        default:
            break;
 8003290:	bf00      	nop
 8003292:	e004      	b.n	800329e <tick+0x4aa>
            break;
 8003294:	bf00      	nop
 8003296:	e002      	b.n	800329e <tick+0x4aa>
            break;
 8003298:	bf00      	nop
 800329a:	e000      	b.n	800329e <tick+0x4aa>
            break;
 800329c:	bf00      	nop
    }
    UNLOCK();
}
 800329e:	bf00      	nop
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop

080032a4 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b082      	sub	sp, #8
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80032ae:	4b21      	ldr	r3, [pc, #132]	; (8003334 <CanInit+0x90>)
 80032b0:	2200      	movs	r2, #0
 80032b2:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <CanInit+0x90>)
 80032b6:	2200      	movs	r2, #0
 80032b8:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80032ba:	4b1e      	ldr	r3, [pc, #120]	; (8003334 <CanInit+0x90>)
 80032bc:	2201      	movs	r2, #1
 80032be:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0c1b      	lsrs	r3, r3, #16
 80032c4:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <CanInit+0x90>)
 80032c6:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80032ce:	4013      	ands	r3, r2
 80032d0:	4a18      	ldr	r2, [pc, #96]	; (8003334 <CanInit+0x90>)
 80032d2:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	0c1b      	lsrs	r3, r3, #16
 80032d8:	4a16      	ldr	r2, [pc, #88]	; (8003334 <CanInit+0x90>)
 80032da:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80032e2:	4013      	ands	r3, r2
 80032e4:	4a13      	ldr	r2, [pc, #76]	; (8003334 <CanInit+0x90>)
 80032e6:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80032e8:	4b12      	ldr	r3, [pc, #72]	; (8003334 <CanInit+0x90>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80032ee:	4b11      	ldr	r3, [pc, #68]	; (8003334 <CanInit+0x90>)
 80032f0:	2201      	movs	r2, #1
 80032f2:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 80032f4:	4b0f      	ldr	r3, [pc, #60]	; (8003334 <CanInit+0x90>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 80032fa:	480f      	ldr	r0, [pc, #60]	; (8003338 <CanInit+0x94>)
 80032fc:	f002 ffb6 	bl	800626c <HAL_CAN_Start>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <CanInit+0x66>
 8003306:	f000 fd9d 	bl	8003e44 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800330a:	2102      	movs	r1, #2
 800330c:	480a      	ldr	r0, [pc, #40]	; (8003338 <CanInit+0x94>)
 800330e:	f003 fa13 	bl	8006738 <HAL_CAN_ActivateNotification>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d000      	beq.n	800331a <CanInit+0x76>
 8003318:	e7fe      	b.n	8003318 <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800331a:	4906      	ldr	r1, [pc, #24]	; (8003334 <CanInit+0x90>)
 800331c:	4806      	ldr	r0, [pc, #24]	; (8003338 <CanInit+0x94>)
 800331e:	f002 fec5 	bl	80060ac <HAL_CAN_ConfigFilter>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8003328:	f000 fd8c 	bl	8003e44 <Error_Handler>
    }
}
 800332c:	bf00      	nop
 800332e:	3708      	adds	r7, #8
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000420 	.word	0x20000420
 8003338:	200004b0 	.word	0x200004b0

0800333c <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b08c      	sub	sp, #48	; 0x30
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	4611      	mov	r1, r2
 8003348:	461a      	mov	r2, r3
 800334a:	460b      	mov	r3, r1
 800334c:	71fb      	strb	r3, [r7, #7]
 800334e:	4613      	mov	r3, r2
 8003350:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800335a:	2300      	movs	r3, #0
 800335c:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 800335e:	79bb      	ldrb	r3, [r7, #6]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d001      	beq.n	8003368 <sendCan+0x2c>
 8003364:	2304      	movs	r3, #4
 8003366:	e000      	b.n	800336a <sendCan+0x2e>
 8003368:	2300      	movs	r3, #0
 800336a:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 800336c:	79fb      	ldrb	r3, [r7, #7]
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8003370:	2301      	movs	r3, #1
 8003372:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8003376:	480d      	ldr	r0, [pc, #52]	; (80033ac <sendCan+0x70>)
 8003378:	f003 f897 	bl	80064aa <HAL_CAN_GetTxMailboxesFreeLevel>
 800337c:	4603      	mov	r3, r0
 800337e:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d00d      	beq.n	80033a2 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8003386:	f107 0310 	add.w	r3, r7, #16
 800338a:	f107 0114 	add.w	r1, r7, #20
 800338e:	68ba      	ldr	r2, [r7, #8]
 8003390:	4806      	ldr	r0, [pc, #24]	; (80033ac <sendCan+0x70>)
 8003392:	f002 ffaf 	bl	80062f4 <HAL_CAN_AddTxMessage>
 8003396:	4603      	mov	r3, r0
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 800339a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800339c:	2b00      	cmp	r3, #0
 800339e:	d000      	beq.n	80033a2 <sendCan+0x66>
 80033a0:	e7fe      	b.n	80033a0 <sendCan+0x64>
//        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
//        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
    }
}
 80033a2:	bf00      	nop
 80033a4:	3730      	adds	r7, #48	; 0x30
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200004b0 	.word	0x200004b0

080033b0 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80033b8:	4b09      	ldr	r3, [pc, #36]	; (80033e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80033ba:	4a0a      	ldr	r2, [pc, #40]	; (80033e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80033bc:	2100      	movs	r1, #0
 80033be:	480a      	ldr	r0, [pc, #40]	; (80033e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80033c0:	f003 f8a8 	bl	8006514 <HAL_CAN_GetRxMessage>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d000      	beq.n	80033cc <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 80033ca:	e7fe      	b.n	80033ca <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 80033cc:	4b07      	ldr	r3, [pc, #28]	; (80033ec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	3301      	adds	r3, #1
 80033d2:	4a06      	ldr	r2, [pc, #24]	; (80033ec <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80033d4:	6013      	str	r3, [r2, #0]

}
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	200003fc 	.word	0x200003fc
 80033e4:	20000404 	.word	0x20000404
 80033e8:	200004b0 	.word	0x200004b0
 80033ec:	200003f8 	.word	0x200003f8

080033f0 <sendIRdata>:
    uint8_t charger_on[4] = {0xCA, 0x35, 0x9E, 0x61};//
    uint8_t charger_off[4] = {0xCA, 0x35, 0x9F, 0x60};//
    uint8_t battery_full[4] = {0xCA, 0x35, 0xAA, 0x55};

void sendIRdata(uint8_t send_data[])
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b082      	sub	sp, #8
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
    if(TIR_getState() == Idle)
 80033f8:	f7ff fc86 	bl	8002d08 <TIR_getState>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d107      	bne.n	8003412 <sendIRdata+0x22>
    {
        //ir_rx->evt.disable_irq();
    	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8003402:	2006      	movs	r0, #6
 8003404:	f003 fd17 	bl	8006e36 <HAL_NVIC_DisableIRQ>
        setData(NEC, send_data, 32);
 8003408:	2220      	movs	r2, #32
 800340a:	6879      	ldr	r1, [r7, #4]
 800340c:	2001      	movs	r0, #1
 800340e:	f7ff fc8b 	bl	8002d28 <setData>
        //ir_rx->evt.enable_irq();
    }
}
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
	...

0800341c <checkIRdata>:

int checkIRdata()
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
    int bitcount = 0;
 8003422:	2300      	movs	r3, #0
 8003424:	607b      	str	r3, [r7, #4]
    int check_count = 0;
 8003426:	2300      	movs	r3, #0
 8003428:	603b      	str	r3, [r7, #0]
    int start_docking_count = 0;
 800342a:	2300      	movs	r3, #0
 800342c:	617b      	str	r3, [r7, #20]
    int finish_docking_count = 0;
 800342e:	2300      	movs	r3, #0
 8003430:	613b      	str	r3, [r7, #16]

    if(getState() == Received)
 8003432:	f7fd fd81 	bl	8000f38 <getState>
 8003436:	4603      	mov	r3, r0
 8003438:	2b02      	cmp	r3, #2
 800343a:	d115      	bne.n	8003468 <checkIRdata+0x4c>
    {
        for(int i = 0; i < 32; i++)
 800343c:	2300      	movs	r3, #0
 800343e:	60fb      	str	r3, [r7, #12]
 8003440:	e007      	b.n	8003452 <checkIRdata+0x36>
        {
            recv_buf[i] = '0';
 8003442:	4a30      	ldr	r2, [pc, #192]	; (8003504 <checkIRdata+0xe8>)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	2230      	movs	r2, #48	; 0x30
 800344a:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 32; i++)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b1f      	cmp	r3, #31
 8003456:	ddf4      	ble.n	8003442 <checkIRdata+0x26>
        }
        bitcount = getData(NEC, recv_buf, sizeof(recv_buf)*8);
 8003458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800345c:	4929      	ldr	r1, [pc, #164]	; (8003504 <checkIRdata+0xe8>)
 800345e:	2001      	movs	r0, #1
 8003460:	f7fd fd7a 	bl	8000f58 <getData>
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	e009      	b.n	800347c <checkIRdata+0x60>
    }
    else if(getState() != Received)
 8003468:	f7fd fd66 	bl	8000f38 <getState>
 800346c:	4603      	mov	r3, r0
 800346e:	2b02      	cmp	r3, #2
 8003470:	d004      	beq.n	800347c <checkIRdata+0x60>
    {
    	printf("getState() != Received\n");
 8003472:	4825      	ldr	r0, [pc, #148]	; (8003508 <checkIRdata+0xec>)
 8003474:	f007 fc4e 	bl	800ad14 <puts>
        return 0;
 8003478:	2300      	movs	r3, #0
 800347a:	e03e      	b.n	80034fa <checkIRdata+0xde>
    }

    for(int i = 0; i<4; i++)
 800347c:	2300      	movs	r3, #0
 800347e:	60bb      	str	r3, [r7, #8]
 8003480:	e02d      	b.n	80034de <checkIRdata+0xc2>
    {
        if(recv_buf[i] == start_docking[i]) {start_docking_count++;}
 8003482:	4a20      	ldr	r2, [pc, #128]	; (8003504 <checkIRdata+0xe8>)
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	4413      	add	r3, r2
 8003488:	781a      	ldrb	r2, [r3, #0]
 800348a:	4920      	ldr	r1, [pc, #128]	; (800350c <checkIRdata+0xf0>)
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	440b      	add	r3, r1
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d102      	bne.n	800349c <checkIRdata+0x80>
 8003496:	697b      	ldr	r3, [r7, #20]
 8003498:	3301      	adds	r3, #1
 800349a:	617b      	str	r3, [r7, #20]
        if(recv_buf[i] == finish_docking[i]) {finish_docking_count++;}
 800349c:	4a19      	ldr	r2, [pc, #100]	; (8003504 <checkIRdata+0xe8>)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	4413      	add	r3, r2
 80034a2:	781a      	ldrb	r2, [r3, #0]
 80034a4:	491a      	ldr	r1, [pc, #104]	; (8003510 <checkIRdata+0xf4>)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	440b      	add	r3, r1
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d102      	bne.n	80034b6 <checkIRdata+0x9a>
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	3301      	adds	r3, #1
 80034b4:	613b      	str	r3, [r7, #16]
        printf("%x : %x    ", recv_buf[i], start_docking[i]);
 80034b6:	4a13      	ldr	r2, [pc, #76]	; (8003504 <checkIRdata+0xe8>)
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	4413      	add	r3, r2
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	4619      	mov	r1, r3
 80034c0:	4a12      	ldr	r2, [pc, #72]	; (800350c <checkIRdata+0xf0>)
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	4413      	add	r3, r2
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4812      	ldr	r0, [pc, #72]	; (8003514 <checkIRdata+0xf8>)
 80034cc:	f007 fb9c 	bl	800ac08 <iprintf>
        printf("!!start_docking_count: %d\n", start_docking_count);
 80034d0:	6979      	ldr	r1, [r7, #20]
 80034d2:	4811      	ldr	r0, [pc, #68]	; (8003518 <checkIRdata+0xfc>)
 80034d4:	f007 fb98 	bl	800ac08 <iprintf>
    for(int i = 0; i<4; i++)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	3301      	adds	r3, #1
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	2b03      	cmp	r3, #3
 80034e2:	ddce      	ble.n	8003482 <checkIRdata+0x66>
    }


    if(start_docking_count == 4)
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d101      	bne.n	80034ee <checkIRdata+0xd2>
    {
        return 1;
 80034ea:	2301      	movs	r3, #1
 80034ec:	e005      	b.n	80034fa <checkIRdata+0xde>
    }
    else if(finish_docking_count == 4)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d101      	bne.n	80034f8 <checkIRdata+0xdc>
    {
        return 2;
 80034f4:	2302      	movs	r3, #2
 80034f6:	e000      	b.n	80034fa <checkIRdata+0xde>
    }

        return 0;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000448 	.word	0x20000448
 8003508:	0800cf50 	.word	0x0800cf50
 800350c:	20000008 	.word	0x20000008
 8003510:	2000000c 	.word	0x2000000c
 8003514:	0800cf68 	.word	0x0800cf68
 8003518:	0800cf74 	.word	0x0800cf74

0800351c <turnOn>:
RGB purple = {1.0,0.0,1.0};    //for DOCKING 1
RGB white = {1.0,1.0,1.0};      //for manual 7
RGB blue = {0.0,0.0,1.0};

void turnOn(RGB rgb)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	1d3b      	adds	r3, r7, #4
 8003524:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(rgb.red == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, SET);}
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b01      	cmp	r3, #1
 800352c:	d106      	bne.n	800353c <turnOn+0x20>
 800352e:	2201      	movs	r2, #1
 8003530:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003534:	4816      	ldr	r0, [pc, #88]	; (8003590 <turnOn+0x74>)
 8003536:	f003 fe5d 	bl	80071f4 <HAL_GPIO_WritePin>
 800353a:	e005      	b.n	8003548 <turnOn+0x2c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);}
 800353c:	2200      	movs	r2, #0
 800353e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003542:	4813      	ldr	r0, [pc, #76]	; (8003590 <turnOn+0x74>)
 8003544:	f003 fe56 	bl	80071f4 <HAL_GPIO_WritePin>
    if(rgb.green == 1) {HAL_GPIO_WritePin(Gsig_GPIO_Port, Gsig_Pin, SET);}
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d106      	bne.n	800355c <turnOn+0x40>
 800354e:	2201      	movs	r2, #1
 8003550:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003554:	480e      	ldr	r0, [pc, #56]	; (8003590 <turnOn+0x74>)
 8003556:	f003 fe4d 	bl	80071f4 <HAL_GPIO_WritePin>
 800355a:	e005      	b.n	8003568 <turnOn+0x4c>
    else {HAL_GPIO_WritePin(Gsig_GPIO_Port, Gsig_Pin, RESET);}
 800355c:	2200      	movs	r2, #0
 800355e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003562:	480b      	ldr	r0, [pc, #44]	; (8003590 <turnOn+0x74>)
 8003564:	f003 fe46 	bl	80071f4 <HAL_GPIO_WritePin>
    if(rgb.blue == 1) {HAL_GPIO_WritePin(Bsig_GPIO_Port, Bsig_Pin, SET);}
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2b01      	cmp	r3, #1
 800356c:	d106      	bne.n	800357c <turnOn+0x60>
 800356e:	2201      	movs	r2, #1
 8003570:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003574:	4806      	ldr	r0, [pc, #24]	; (8003590 <turnOn+0x74>)
 8003576:	f003 fe3d 	bl	80071f4 <HAL_GPIO_WritePin>
    else {HAL_GPIO_WritePin(Bsig_GPIO_Port, Bsig_Pin, RESET);}
}
 800357a:	e005      	b.n	8003588 <turnOn+0x6c>
    else {HAL_GPIO_WritePin(Bsig_GPIO_Port, Bsig_Pin, RESET);}
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003582:	4803      	ldr	r0, [pc, #12]	; (8003590 <turnOn+0x74>)
 8003584:	f003 fe36 	bl	80071f4 <HAL_GPIO_WritePin>
}
 8003588:	bf00      	nop
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}
 8003590:	40020c00 	.word	0x40020c00

08003594 <turnOff>:

void turnOff()
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800359e:	4808      	ldr	r0, [pc, #32]	; (80035c0 <turnOff+0x2c>)
 80035a0:	f003 fe28 	bl	80071f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Gsig_GPIO_Port, Gsig_Pin, RESET);
 80035a4:	2200      	movs	r2, #0
 80035a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80035aa:	4805      	ldr	r0, [pc, #20]	; (80035c0 <turnOff+0x2c>)
 80035ac:	f003 fe22 	bl	80071f4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Bsig_GPIO_Port, Bsig_Pin, RESET);
 80035b0:	2200      	movs	r2, #0
 80035b2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035b6:	4802      	ldr	r0, [pc, #8]	; (80035c0 <turnOff+0x2c>)
 80035b8:	f003 fe1c 	bl	80071f4 <HAL_GPIO_WritePin>
}
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40020c00 	.word	0x40020c00

080035c4 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b084      	sub	sp, #16
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	2364      	movs	r3, #100	; 0x64
 80035d6:	68b9      	ldr	r1, [r7, #8]
 80035d8:	4803      	ldr	r0, [pc, #12]	; (80035e8 <_write+0x24>)
 80035da:	f006 f9e7 	bl	80099ac <HAL_UART_Transmit>
	return (len);
 80035de:	687b      	ldr	r3, [r7, #4]
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	200006a0 	.word	0x200006a0

080035ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80035f0:	f001 ffb1 	bl	8005556 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
   SystemClock_Config();
 80035f4:	f000 f840 	bl	8003678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80035f8:	f000 fb1c 	bl	8003c34 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80035fc:	f000 faea 	bl	8003bd4 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8003600:	f000 f926 	bl	8003850 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003604:	f000 f95a 	bl	80038bc <MX_TIM2_Init>
  MX_TIM6_Init();
 8003608:	f000 fa1c 	bl	8003a44 <MX_TIM6_Init>
  MX_TIM7_Init();
 800360c:	f000 fa50 	bl	8003ab0 <MX_TIM7_Init>
  MX_TIM5_Init();
 8003610:	f000 f9ca 	bl	80039a8 <MX_TIM5_Init>
  MX_TIM14_Init();
 8003614:	f000 fabc 	bl	8003b90 <MX_TIM14_Init>
  MX_TIM9_Init();
 8003618:	f000 fa80 	bl	8003b1c <MX_TIM9_Init>
  MX_ADC1_Init();
 800361c:	f000 f898 	bl	8003750 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);//direct set
 8003620:	2200      	movs	r2, #0
 8003622:	2100      	movs	r1, #0
 8003624:	2008      	movs	r0, #8
 8003626:	f003 fbdc 	bl	8006de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//direct set
 800362a:	2008      	movs	r0, #8
 800362c:	f003 fbf5 	bl	8006e1a <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);//direct set
 8003630:	2200      	movs	r2, #0
 8003632:	2100      	movs	r1, #0
 8003634:	2006      	movs	r0, #6
 8003636:	f003 fbd4 	bl	8006de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);//direct set
 800363a:	2006      	movs	r0, #6
 800363c:	f003 fbed 	bl	8006e1a <HAL_NVIC_EnableIRQ>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 8003640:	2100      	movs	r1, #0
 8003642:	4809      	ldr	r0, [pc, #36]	; (8003668 <main+0x7c>)
 8003644:	f005 f88c 	bl	8008760 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <main+0x7c>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2234      	movs	r2, #52	; 0x34
 800364e:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
 8003650:	4806      	ldr	r0, [pc, #24]	; (800366c <main+0x80>)
 8003652:	f004 ff7d 	bl	8008550 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <main+0x84>)
 8003658:	f004 ff7a 	bl	8008550 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 800365c:	4805      	ldr	r0, [pc, #20]	; (8003674 <main+0x88>)
 800365e:	f004 ff77 	bl	8008550 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
	  //printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 8003662:	f7ff f953 	bl	800290c <spinonce>
 8003666:	e7fc      	b.n	8003662 <main+0x76>
 8003668:	200004d8 	.word	0x200004d8
 800366c:	20000524 	.word	0x20000524
 8003670:	20000570 	.word	0x20000570
 8003674:	20000608 	.word	0x20000608

08003678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b094      	sub	sp, #80	; 0x50
 800367c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800367e:	f107 0320 	add.w	r3, r7, #32
 8003682:	2230      	movs	r2, #48	; 0x30
 8003684:	2100      	movs	r1, #0
 8003686:	4618      	mov	r0, r3
 8003688:	f006 fe4c 	bl	800a324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800368c:	f107 030c 	add.w	r3, r7, #12
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]
 8003694:	605a      	str	r2, [r3, #4]
 8003696:	609a      	str	r2, [r3, #8]
 8003698:	60da      	str	r2, [r3, #12]
 800369a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800369c:	4b2a      	ldr	r3, [pc, #168]	; (8003748 <SystemClock_Config+0xd0>)
 800369e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a0:	4a29      	ldr	r2, [pc, #164]	; (8003748 <SystemClock_Config+0xd0>)
 80036a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036a6:	6413      	str	r3, [r2, #64]	; 0x40
 80036a8:	4b27      	ldr	r3, [pc, #156]	; (8003748 <SystemClock_Config+0xd0>)
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80036b4:	4b25      	ldr	r3, [pc, #148]	; (800374c <SystemClock_Config+0xd4>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a24      	ldr	r2, [pc, #144]	; (800374c <SystemClock_Config+0xd4>)
 80036ba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80036be:	6013      	str	r3, [r2, #0]
 80036c0:	4b22      	ldr	r3, [pc, #136]	; (800374c <SystemClock_Config+0xd4>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80036cc:	2301      	movs	r3, #1
 80036ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80036d0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80036d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80036d6:	2302      	movs	r3, #2
 80036d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80036da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80036de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80036e0:	2304      	movs	r3, #4
 80036e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80036e4:	23d8      	movs	r3, #216	; 0xd8
 80036e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80036e8:	2302      	movs	r3, #2
 80036ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036f0:	f107 0320 	add.w	r3, r7, #32
 80036f4:	4618      	mov	r0, r3
 80036f6:	f003 fe19 	bl	800732c <HAL_RCC_OscConfig>
 80036fa:	4603      	mov	r3, r0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d001      	beq.n	8003704 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003700:	f000 fba0 	bl	8003e44 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003704:	f003 fdc2 	bl	800728c <HAL_PWREx_EnableOverDrive>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800370e:	f000 fb99 	bl	8003e44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003712:	230f      	movs	r3, #15
 8003714:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003716:	2302      	movs	r3, #2
 8003718:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800371e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003722:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003724:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003728:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800372a:	f107 030c 	add.w	r3, r7, #12
 800372e:	2107      	movs	r1, #7
 8003730:	4618      	mov	r0, r3
 8003732:	f004 f89f 	bl	8007874 <HAL_RCC_ClockConfig>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800373c:	f000 fb82 	bl	8003e44 <Error_Handler>
  }
}
 8003740:	bf00      	nop
 8003742:	3750      	adds	r7, #80	; 0x50
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	40007000 	.word	0x40007000

08003750 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003756:	463b      	mov	r3, r7
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003762:	4b38      	ldr	r3, [pc, #224]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003764:	4a38      	ldr	r2, [pc, #224]	; (8003848 <MX_ADC1_Init+0xf8>)
 8003766:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003768:	4b36      	ldr	r3, [pc, #216]	; (8003844 <MX_ADC1_Init+0xf4>)
 800376a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800376e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003770:	4b34      	ldr	r3, [pc, #208]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003776:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003778:	4b32      	ldr	r3, [pc, #200]	; (8003844 <MX_ADC1_Init+0xf4>)
 800377a:	2201      	movs	r2, #1
 800377c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800377e:	4b31      	ldr	r3, [pc, #196]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003780:	2200      	movs	r2, #0
 8003782:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003784:	4b2f      	ldr	r3, [pc, #188]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003786:	2201      	movs	r2, #1
 8003788:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800378c:	4b2d      	ldr	r3, [pc, #180]	; (8003844 <MX_ADC1_Init+0xf4>)
 800378e:	2201      	movs	r2, #1
 8003790:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003792:	4b2c      	ldr	r3, [pc, #176]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003794:	2200      	movs	r2, #0
 8003796:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003798:	4b2a      	ldr	r3, [pc, #168]	; (8003844 <MX_ADC1_Init+0xf4>)
 800379a:	4a2c      	ldr	r2, [pc, #176]	; (800384c <MX_ADC1_Init+0xfc>)
 800379c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800379e:	4b29      	ldr	r3, [pc, #164]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80037a4:	4b27      	ldr	r3, [pc, #156]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037a6:	2204      	movs	r2, #4
 80037a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80037aa:	4b26      	ldr	r3, [pc, #152]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037b2:	4b24      	ldr	r3, [pc, #144]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80037b8:	4822      	ldr	r0, [pc, #136]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037ba:	f001 ff4d 	bl	8005658 <HAL_ADC_Init>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d001      	beq.n	80037c8 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 80037c4:	f000 fb3e 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80037c8:	2301      	movs	r3, #1
 80037ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80037cc:	2301      	movs	r3, #1
 80037ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80037d0:	2301      	movs	r3, #1
 80037d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037d4:	463b      	mov	r3, r7
 80037d6:	4619      	mov	r1, r3
 80037d8:	481a      	ldr	r0, [pc, #104]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037da:	f002 f91b 	bl	8005a14 <HAL_ADC_ConfigChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80037e4:	f000 fb2e 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80037e8:	2302      	movs	r3, #2
 80037ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80037ec:	2302      	movs	r3, #2
 80037ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	4619      	mov	r1, r3
 80037f4:	4813      	ldr	r0, [pc, #76]	; (8003844 <MX_ADC1_Init+0xf4>)
 80037f6:	f002 f90d 	bl	8005a14 <HAL_ADC_ConfigChannel>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8003800:	f000 fb20 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003804:	2303      	movs	r3, #3
 8003806:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003808:	2303      	movs	r3, #3
 800380a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800380c:	463b      	mov	r3, r7
 800380e:	4619      	mov	r1, r3
 8003810:	480c      	ldr	r0, [pc, #48]	; (8003844 <MX_ADC1_Init+0xf4>)
 8003812:	f002 f8ff 	bl	8005a14 <HAL_ADC_ConfigChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 800381c:	f000 fb12 	bl	8003e44 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003820:	2304      	movs	r3, #4
 8003822:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003824:	2304      	movs	r3, #4
 8003826:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003828:	463b      	mov	r3, r7
 800382a:	4619      	mov	r1, r3
 800382c:	4805      	ldr	r0, [pc, #20]	; (8003844 <MX_ADC1_Init+0xf4>)
 800382e:	f002 f8f1 	bl	8005a14 <HAL_ADC_ConfigChannel>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003838:	f000 fb04 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800383c:	bf00      	nop
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000468 	.word	0x20000468
 8003848:	40012000 	.word	0x40012000
 800384c:	0f000001 	.word	0x0f000001

08003850 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003854:	4b17      	ldr	r3, [pc, #92]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <MX_CAN1_Init+0x68>)
 8003858:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 800385a:	4b16      	ldr	r3, [pc, #88]	; (80038b4 <MX_CAN1_Init+0x64>)
 800385c:	221b      	movs	r2, #27
 800385e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003860:	4b14      	ldr	r3, [pc, #80]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003862:	2200      	movs	r2, #0
 8003864:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003868:	2200      	movs	r2, #0
 800386a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800386c:	4b11      	ldr	r3, [pc, #68]	; (80038b4 <MX_CAN1_Init+0x64>)
 800386e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003872:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003874:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003876:	2200      	movs	r2, #0
 8003878:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800387a:	4b0e      	ldr	r3, [pc, #56]	; (80038b4 <MX_CAN1_Init+0x64>)
 800387c:	2200      	movs	r2, #0
 800387e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003880:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003882:	2201      	movs	r2, #1
 8003884:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003886:	4b0b      	ldr	r3, [pc, #44]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003888:	2200      	movs	r2, #0
 800388a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800388c:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <MX_CAN1_Init+0x64>)
 800388e:	2201      	movs	r2, #1
 8003890:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003892:	4b08      	ldr	r3, [pc, #32]	; (80038b4 <MX_CAN1_Init+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003898:	4b06      	ldr	r3, [pc, #24]	; (80038b4 <MX_CAN1_Init+0x64>)
 800389a:	2200      	movs	r2, #0
 800389c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800389e:	4805      	ldr	r0, [pc, #20]	; (80038b4 <MX_CAN1_Init+0x64>)
 80038a0:	f002 fb08 	bl	8005eb4 <HAL_CAN_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 80038aa:	f000 facb 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	200004b0 	.word	0x200004b0
 80038b8:	40006400 	.word	0x40006400

080038bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08e      	sub	sp, #56	; 0x38
 80038c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80038c6:	2200      	movs	r2, #0
 80038c8:	601a      	str	r2, [r3, #0]
 80038ca:	605a      	str	r2, [r3, #4]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038d0:	f107 031c 	add.w	r3, r7, #28
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	605a      	str	r2, [r3, #4]
 80038da:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80038dc:	463b      	mov	r3, r7
 80038de:	2200      	movs	r2, #0
 80038e0:	601a      	str	r2, [r3, #0]
 80038e2:	605a      	str	r2, [r3, #4]
 80038e4:	609a      	str	r2, [r3, #8]
 80038e6:	60da      	str	r2, [r3, #12]
 80038e8:	611a      	str	r2, [r3, #16]
 80038ea:	615a      	str	r2, [r3, #20]
 80038ec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038ee:	4b2d      	ldr	r3, [pc, #180]	; (80039a4 <MX_TIM2_Init+0xe8>)
 80038f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 80038f6:	4b2b      	ldr	r3, [pc, #172]	; (80039a4 <MX_TIM2_Init+0xe8>)
 80038f8:	221a      	movs	r2, #26
 80038fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038fc:	4b29      	ldr	r3, [pc, #164]	; (80039a4 <MX_TIM2_Init+0xe8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 8003902:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003904:	2268      	movs	r2, #104	; 0x68
 8003906:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <MX_TIM2_Init+0xe8>)
 800390a:	2200      	movs	r2, #0
 800390c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800390e:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003910:	2200      	movs	r2, #0
 8003912:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003914:	4823      	ldr	r0, [pc, #140]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003916:	f004 fdc3 	bl	80084a0 <HAL_TIM_Base_Init>
 800391a:	4603      	mov	r3, r0
 800391c:	2b00      	cmp	r3, #0
 800391e:	d001      	beq.n	8003924 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003920:	f000 fa90 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003924:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003928:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800392a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800392e:	4619      	mov	r1, r3
 8003930:	481c      	ldr	r0, [pc, #112]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003932:	f005 fa91 	bl	8008e58 <HAL_TIM_ConfigClockSource>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d001      	beq.n	8003940 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800393c:	f000 fa82 	bl	8003e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003940:	4818      	ldr	r0, [pc, #96]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003942:	f004 feac 	bl	800869e <HAL_TIM_PWM_Init>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800394c:	f000 fa7a 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003950:	2300      	movs	r3, #0
 8003952:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003954:	2300      	movs	r3, #0
 8003956:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003958:	f107 031c 	add.w	r3, r7, #28
 800395c:	4619      	mov	r1, r3
 800395e:	4811      	ldr	r0, [pc, #68]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003960:	f005 ff2a 	bl	80097b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d001      	beq.n	800396e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800396a:	f000 fa6b 	bl	8003e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800396e:	2360      	movs	r3, #96	; 0x60
 8003970:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 8003972:	2333      	movs	r3, #51	; 0x33
 8003974:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003976:	2300      	movs	r3, #0
 8003978:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800397a:	2300      	movs	r3, #0
 800397c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800397e:	463b      	mov	r3, r7
 8003980:	2200      	movs	r2, #0
 8003982:	4619      	mov	r1, r3
 8003984:	4807      	ldr	r0, [pc, #28]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003986:	f005 f953 	bl	8008c30 <HAL_TIM_PWM_ConfigChannel>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003990:	f000 fa58 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003994:	4803      	ldr	r0, [pc, #12]	; (80039a4 <MX_TIM2_Init+0xe8>)
 8003996:	f001 fa73 	bl	8004e80 <HAL_TIM_MspPostInit>

}
 800399a:	bf00      	nop
 800399c:	3738      	adds	r7, #56	; 0x38
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200004d8 	.word	0x200004d8

080039a8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039ae:	f107 0310 	add.w	r3, r7, #16
 80039b2:	2200      	movs	r2, #0
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	605a      	str	r2, [r3, #4]
 80039b8:	609a      	str	r2, [r3, #8]
 80039ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039bc:	1d3b      	adds	r3, r7, #4
 80039be:	2200      	movs	r2, #0
 80039c0:	601a      	str	r2, [r3, #0]
 80039c2:	605a      	str	r2, [r3, #4]
 80039c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80039c6:	4b1d      	ldr	r3, [pc, #116]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039c8:	4a1d      	ldr	r2, [pc, #116]	; (8003a40 <MX_TIM5_Init+0x98>)
 80039ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 54-1;
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039ce:	2235      	movs	r2, #53	; 0x35
 80039d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100-1;
 80039d8:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039da:	2263      	movs	r2, #99	; 0x63
 80039dc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039de:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039e4:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80039ea:	4814      	ldr	r0, [pc, #80]	; (8003a3c <MX_TIM5_Init+0x94>)
 80039ec:	f004 fd58 	bl	80084a0 <HAL_TIM_Base_Init>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80039f6:	f000 fa25 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003a00:	f107 0310 	add.w	r3, r7, #16
 8003a04:	4619      	mov	r1, r3
 8003a06:	480d      	ldr	r0, [pc, #52]	; (8003a3c <MX_TIM5_Init+0x94>)
 8003a08:	f005 fa26 	bl	8008e58 <HAL_TIM_ConfigClockSource>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d001      	beq.n	8003a16 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003a12:	f000 fa17 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	4619      	mov	r1, r3
 8003a22:	4806      	ldr	r0, [pc, #24]	; (8003a3c <MX_TIM5_Init+0x94>)
 8003a24:	f005 fec8 	bl	80097b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d001      	beq.n	8003a32 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003a2e:	f000 fa09 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003a32:	bf00      	nop
 8003a34:	3720      	adds	r7, #32
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	20000524 	.word	0x20000524
 8003a40:	40000c00 	.word	0x40000c00

08003a44 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a4a:	1d3b      	adds	r3, r7, #4
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	601a      	str	r2, [r3, #0]
 8003a50:	605a      	str	r2, [r3, #4]
 8003a52:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a56:	4a15      	ldr	r2, [pc, #84]	; (8003aac <MX_TIM6_Init+0x68>)
 8003a58:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a5c:	226b      	movs	r2, #107	; 0x6b
 8003a5e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a62:	2200      	movs	r2, #0
 8003a64:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a68:	f242 720f 	movw	r2, #9999	; 0x270f
 8003a6c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a6e:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a76:	f004 fd13 	bl	80084a0 <HAL_TIM_Base_Init>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d001      	beq.n	8003a84 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003a80:	f000 f9e0 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a84:	2300      	movs	r3, #0
 8003a86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003a8c:	1d3b      	adds	r3, r7, #4
 8003a8e:	4619      	mov	r1, r3
 8003a90:	4805      	ldr	r0, [pc, #20]	; (8003aa8 <MX_TIM6_Init+0x64>)
 8003a92:	f005 fe91 	bl	80097b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a96:	4603      	mov	r3, r0
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d001      	beq.n	8003aa0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003a9c:	f000 f9d2 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000570 	.word	0x20000570
 8003aac:	40001000 	.word	0x40001000

08003ab0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003ab6:	1d3b      	adds	r3, r7, #4
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003ac0:	4b14      	ldr	r3, [pc, #80]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003ac2:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <MX_TIM7_Init+0x68>)
 8003ac4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8003ac6:	4b13      	ldr	r3, [pc, #76]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003ac8:	226b      	movs	r2, #107	; 0x6b
 8003aca:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003acc:	4b11      	ldr	r3, [pc, #68]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003ad4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003ad8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ada:	4b0e      	ldr	r3, [pc, #56]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003ae0:	480c      	ldr	r0, [pc, #48]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003ae2:	f004 fcdd 	bl	80084a0 <HAL_TIM_Base_Init>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003aec:	f000 f9aa 	bl	8003e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003af0:	2300      	movs	r3, #0
 8003af2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003af4:	2300      	movs	r3, #0
 8003af6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003af8:	1d3b      	adds	r3, r7, #4
 8003afa:	4619      	mov	r1, r3
 8003afc:	4805      	ldr	r0, [pc, #20]	; (8003b14 <MX_TIM7_Init+0x64>)
 8003afe:	f005 fe5b 	bl	80097b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d001      	beq.n	8003b0c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003b08:	f000 f99c 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003b0c:	bf00      	nop
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	200005bc 	.word	0x200005bc
 8003b18:	40001400 	.word	0x40001400

08003b1c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b084      	sub	sp, #16
 8003b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b22:	463b      	mov	r3, r7
 8003b24:	2200      	movs	r2, #0
 8003b26:	601a      	str	r2, [r3, #0]
 8003b28:	605a      	str	r2, [r3, #4]
 8003b2a:	609a      	str	r2, [r3, #8]
 8003b2c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b30:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <MX_TIM9_Init+0x70>)
 8003b32:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 8003b34:	4b14      	ldr	r3, [pc, #80]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b36:	22d7      	movs	r2, #215	; 0xd7
 8003b38:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b3a:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 8003b40:	4b11      	ldr	r3, [pc, #68]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b42:	f240 2231 	movw	r2, #561	; 0x231
 8003b46:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b48:	4b0f      	ldr	r3, [pc, #60]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b4e:	4b0e      	ldr	r3, [pc, #56]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003b54:	480c      	ldr	r0, [pc, #48]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b56:	f004 fca3 	bl	80084a0 <HAL_TIM_Base_Init>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d001      	beq.n	8003b64 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003b60:	f000 f970 	bl	8003e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b68:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003b6a:	463b      	mov	r3, r7
 8003b6c:	4619      	mov	r1, r3
 8003b6e:	4806      	ldr	r0, [pc, #24]	; (8003b88 <MX_TIM9_Init+0x6c>)
 8003b70:	f005 f972 	bl	8008e58 <HAL_TIM_ConfigClockSource>
 8003b74:	4603      	mov	r3, r0
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d001      	beq.n	8003b7e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003b7a:	f000 f963 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003b7e:	bf00      	nop
 8003b80:	3710      	adds	r7, #16
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	20000608 	.word	0x20000608
 8003b8c:	40014000 	.word	0x40014000

08003b90 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003b94:	4b0d      	ldr	r3, [pc, #52]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003b96:	4a0e      	ldr	r2, [pc, #56]	; (8003bd0 <MX_TIM14_Init+0x40>)
 8003b98:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 8003b9a:	4b0c      	ldr	r3, [pc, #48]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003b9c:	226b      	movs	r2, #107	; 0x6b
 8003b9e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ba0:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8003ba6:	4b09      	ldr	r3, [pc, #36]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003ba8:	2203      	movs	r2, #3
 8003baa:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003bac:	4b07      	ldr	r3, [pc, #28]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003bb2:	4b06      	ldr	r3, [pc, #24]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003bb8:	4804      	ldr	r0, [pc, #16]	; (8003bcc <MX_TIM14_Init+0x3c>)
 8003bba:	f004 fc71 	bl	80084a0 <HAL_TIM_Base_Init>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003bc4:	f000 f93e 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003bc8:	bf00      	nop
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	20000654 	.word	0x20000654
 8003bd0:	40002000 	.word	0x40002000

08003bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003bd8:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <MX_USART1_UART_Init+0x5c>)
 8003bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003bde:	4b13      	ldr	r3, [pc, #76]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003be6:	4b11      	ldr	r3, [pc, #68]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003bec:	4b0f      	ldr	r3, [pc, #60]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003bf2:	4b0e      	ldr	r3, [pc, #56]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003bfa:	220c      	movs	r2, #12
 8003bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003c06:	2200      	movs	r2, #0
 8003c08:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c0a:	4b08      	ldr	r3, [pc, #32]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c10:	4b06      	ldr	r3, [pc, #24]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c16:	4805      	ldr	r0, [pc, #20]	; (8003c2c <MX_USART1_UART_Init+0x58>)
 8003c18:	f005 fe7a 	bl	8009910 <HAL_UART_Init>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d001      	beq.n	8003c26 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003c22:	f000 f90f 	bl	8003e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003c26:	bf00      	nop
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	200006a0 	.word	0x200006a0
 8003c30:	40011000 	.word	0x40011000

08003c34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08c      	sub	sp, #48	; 0x30
 8003c38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c3a:	f107 031c 	add.w	r3, r7, #28
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]
 8003c44:	609a      	str	r2, [r3, #8]
 8003c46:	60da      	str	r2, [r3, #12]
 8003c48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c4a:	4b78      	ldr	r3, [pc, #480]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4e:	4a77      	ldr	r2, [pc, #476]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c50:	f043 0320 	orr.w	r3, r3, #32
 8003c54:	6313      	str	r3, [r2, #48]	; 0x30
 8003c56:	4b75      	ldr	r3, [pc, #468]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c62:	4b72      	ldr	r3, [pc, #456]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c76:	617b      	str	r3, [r7, #20]
 8003c78:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c7a:	4b6c      	ldr	r3, [pc, #432]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	4a6b      	ldr	r2, [pc, #428]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c80:	f043 0301 	orr.w	r3, r3, #1
 8003c84:	6313      	str	r3, [r2, #48]	; 0x30
 8003c86:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c92:	4b66      	ldr	r3, [pc, #408]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	4a65      	ldr	r2, [pc, #404]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8003c9e:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	f003 0302 	and.w	r3, r3, #2
 8003ca6:	60fb      	str	r3, [r7, #12]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003caa:	4b60      	ldr	r3, [pc, #384]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	4a5f      	ldr	r2, [pc, #380]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cb0:	f043 0308 	orr.w	r3, r3, #8
 8003cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cb6:	4b5d      	ldr	r3, [pc, #372]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	f003 0308 	and.w	r3, r3, #8
 8003cbe:	60bb      	str	r3, [r7, #8]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cc2:	4b5a      	ldr	r3, [pc, #360]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	4a59      	ldr	r2, [pc, #356]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cc8:	f043 0304 	orr.w	r3, r3, #4
 8003ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cce:	4b57      	ldr	r3, [pc, #348]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	607b      	str	r3, [r7, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003cda:	4b54      	ldr	r3, [pc, #336]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	4a53      	ldr	r2, [pc, #332]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003ce0:	f043 0310 	orr.w	r3, r3, #16
 8003ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce6:	4b51      	ldr	r3, [pc, #324]	; (8003e2c <MX_GPIO_Init+0x1f8>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	f003 0310 	and.w	r3, r3, #16
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_Trigger6_GPIO_Port, USS_Trigger6_Pin, GPIO_PIN_RESET);
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	2180      	movs	r1, #128	; 0x80
 8003cf6:	484e      	ldr	r0, [pc, #312]	; (8003e30 <MX_GPIO_Init+0x1fc>)
 8003cf8:	f003 fa7c 	bl	80071f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8003d02:	484c      	ldr	r0, [pc, #304]	; (8003e34 <MX_GPIO_Init+0x200>)
 8003d04:	f003 fa76 	bl	80071f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USS_Trigger2_Pin|Gsig_Pin|Rsig_Pin|Bsig_Pin
 8003d08:	2200      	movs	r2, #0
 8003d0a:	f247 1120 	movw	r1, #28960	; 0x7120
 8003d0e:	484a      	ldr	r0, [pc, #296]	; (8003e38 <MX_GPIO_Init+0x204>)
 8003d10:	f003 fa70 	bl	80071f4 <HAL_GPIO_WritePin>
                          |USS_Trigger1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin, GPIO_PIN_RESET);
 8003d14:	2200      	movs	r2, #0
 8003d16:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8003d1a:	4848      	ldr	r0, [pc, #288]	; (8003e3c <MX_GPIO_Init+0x208>)
 8003d1c:	f003 fa6a 	bl	80071f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USS_Trigger6_Pin */
  GPIO_InitStruct.Pin = USS_Trigger6_Pin;
 8003d20:	2380      	movs	r3, #128	; 0x80
 8003d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d24:	2301      	movs	r3, #1
 8003d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USS_Trigger6_GPIO_Port, &GPIO_InitStruct);
 8003d30:	f107 031c 	add.w	r3, r7, #28
 8003d34:	4619      	mov	r1, r3
 8003d36:	483e      	ldr	r0, [pc, #248]	; (8003e30 <MX_GPIO_Init+0x1fc>)
 8003d38:	f003 f898 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data6_Pin */
  GPIO_InitStruct.Pin = USS_Data6_Pin;
 8003d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data6_GPIO_Port, &GPIO_InitStruct);
 8003d4c:	f107 031c 	add.w	r3, r7, #28
 8003d50:	4619      	mov	r1, r3
 8003d52:	4838      	ldr	r0, [pc, #224]	; (8003e34 <MX_GPIO_Init+0x200>)
 8003d54:	f003 f88a 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8003d58:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d62:	2300      	movs	r3, #0
 8003d64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d66:	2300      	movs	r3, #0
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d6a:	f107 031c 	add.w	r3, r7, #28
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4830      	ldr	r0, [pc, #192]	; (8003e34 <MX_GPIO_Init+0x200>)
 8003d72:	f003 f87b 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger2_Pin Gsig_Pin Rsig_Pin Bsig_Pin
                           USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = USS_Trigger2_Pin|Gsig_Pin|Rsig_Pin|Bsig_Pin
 8003d76:	f247 1320 	movw	r3, #28960	; 0x7120
 8003d7a:	61fb      	str	r3, [r7, #28]
                          |USS_Trigger1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d80:	2300      	movs	r3, #0
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d84:	2300      	movs	r3, #0
 8003d86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003d88:	f107 031c 	add.w	r3, r7, #28
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	482a      	ldr	r0, [pc, #168]	; (8003e38 <MX_GPIO_Init+0x204>)
 8003d90:	f003 f86c 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data2_Pin USS_Data4_Pin USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data2_Pin|USS_Data4_Pin|USS_Data1_Pin;
 8003d94:	f44f 7311 	mov.w	r3, #580	; 0x244
 8003d98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003d9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003d9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003da0:	2301      	movs	r3, #1
 8003da2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003da4:	f107 031c 	add.w	r3, r7, #28
 8003da8:	4619      	mov	r1, r3
 8003daa:	4823      	ldr	r0, [pc, #140]	; (8003e38 <MX_GPIO_Init+0x204>)
 8003dac:	f003 f85e 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger5_Pin USS_Trigger3_Pin USS_Trigger4_Pin */
  GPIO_InitStruct.Pin = USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin;
 8003db0:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8003db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003db6:	2301      	movs	r3, #1
 8003db8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dc2:	f107 031c 	add.w	r3, r7, #28
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	481c      	ldr	r0, [pc, #112]	; (8003e3c <MX_GPIO_Init+0x208>)
 8003dca:	f003 f84f 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data5_Pin USS_Data3_Pin */
  GPIO_InitStruct.Pin = USS_Data5_Pin|USS_Data3_Pin;
 8003dce:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003dd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003dd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	4619      	mov	r1, r3
 8003de4:	4815      	ldr	r0, [pc, #84]	; (8003e3c <MX_GPIO_Init+0x208>)
 8003de6:	f003 f841 	bl	8006e6c <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 8003dea:	2301      	movs	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003dee:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003df4:	2301      	movs	r3, #1
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 8003df8:	f107 031c 	add.w	r3, r7, #28
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	4810      	ldr	r0, [pc, #64]	; (8003e40 <MX_GPIO_Init+0x20c>)
 8003e00:	f003 f834 	bl	8006e6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003e04:	2200      	movs	r2, #0
 8003e06:	2100      	movs	r1, #0
 8003e08:	2017      	movs	r0, #23
 8003e0a:	f002 ffea 	bl	8006de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003e0e:	2017      	movs	r0, #23
 8003e10:	f003 f803 	bl	8006e1a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003e14:	2200      	movs	r2, #0
 8003e16:	2100      	movs	r1, #0
 8003e18:	2028      	movs	r0, #40	; 0x28
 8003e1a:	f002 ffe2 	bl	8006de2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003e1e:	2028      	movs	r0, #40	; 0x28
 8003e20:	f002 fffb 	bl	8006e1a <HAL_NVIC_EnableIRQ>

}
 8003e24:	bf00      	nop
 8003e26:	3730      	adds	r7, #48	; 0x30
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	40021400 	.word	0x40021400
 8003e34:	40020400 	.word	0x40020400
 8003e38:	40020c00 	.word	0x40020c00
 8003e3c:	40020800 	.word	0x40020800
 8003e40:	40021000 	.word	0x40021000

08003e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003e48:	b672      	cpsid	i
}
 8003e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003e4c:	e7fe      	b.n	8003e4c <Error_Handler+0x8>

08003e4e <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b084      	sub	sp, #16
 8003e52:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1c5a      	adds	r2, r3, #1
 8003e5c:	60fa      	str	r2, [r7, #12]
 8003e5e:	3310      	adds	r3, #16
 8003e60:	443b      	add	r3, r7
 8003e62:	222f      	movs	r2, #47	; 0x2f
 8003e64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	1c5a      	adds	r2, r3, #1
 8003e6c:	60fa      	str	r2, [r7, #12]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	443b      	add	r3, r7
 8003e72:	2260      	movs	r2, #96	; 0x60
 8003e74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	60fa      	str	r2, [r7, #12]
 8003e7e:	3310      	adds	r3, #16
 8003e80:	443b      	add	r3, r7
 8003e82:	2260      	movs	r2, #96	; 0x60
 8003e84:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	60fa      	str	r2, [r7, #12]
 8003e8e:	3310      	adds	r3, #16
 8003e90:	443b      	add	r3, r7
 8003e92:	2200      	movs	r2, #0
 8003e94:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	1c5a      	adds	r2, r3, #1
 8003e9c:	60fa      	str	r2, [r7, #12]
 8003e9e:	3310      	adds	r3, #16
 8003ea0:	443b      	add	r3, r7
 8003ea2:	2203      	movs	r2, #3
 8003ea4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	60fa      	str	r2, [r7, #12]
 8003eae:	3310      	adds	r3, #16
 8003eb0:	443b      	add	r3, r7
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	60fa      	str	r2, [r7, #12]
 8003ebe:	3310      	adds	r3, #16
 8003ec0:	443b      	add	r3, r7
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003ec8:	1d3a      	adds	r2, r7, #4
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4413      	add	r3, r2
 8003ece:	2200      	movs	r2, #0
 8003ed0:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ed2:	1d39      	adds	r1, r7, #4
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	2208      	movs	r2, #8
 8003ed8:	f240 6001 	movw	r0, #1537	; 0x601
 8003edc:	f7ff fa2e 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003ee0:	2064      	movs	r0, #100	; 0x64
 8003ee2:	f001 fb95 	bl	8005610 <HAL_Delay>
}
 8003ee6:	bf00      	nop
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <synchronousMode>:

void synchronousMode()
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b084      	sub	sp, #16
 8003ef2:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	60fa      	str	r2, [r7, #12]
 8003efe:	3310      	adds	r3, #16
 8003f00:	443b      	add	r3, r7
 8003f02:	222b      	movs	r2, #43	; 0x2b
 8003f04:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	1c5a      	adds	r2, r3, #1
 8003f0c:	60fa      	str	r2, [r7, #12]
 8003f0e:	3310      	adds	r3, #16
 8003f10:	443b      	add	r3, r7
 8003f12:	220f      	movs	r2, #15
 8003f14:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	1c5a      	adds	r2, r3, #1
 8003f1c:	60fa      	str	r2, [r7, #12]
 8003f1e:	3310      	adds	r3, #16
 8003f20:	443b      	add	r3, r7
 8003f22:	2220      	movs	r2, #32
 8003f24:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	1c5a      	adds	r2, r3, #1
 8003f2c:	60fa      	str	r2, [r7, #12]
 8003f2e:	3310      	adds	r3, #16
 8003f30:	443b      	add	r3, r7
 8003f32:	2200      	movs	r2, #0
 8003f34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	60fa      	str	r2, [r7, #12]
 8003f3e:	3310      	adds	r3, #16
 8003f40:	443b      	add	r3, r7
 8003f42:	2201      	movs	r2, #1
 8003f44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60fa      	str	r2, [r7, #12]
 8003f4e:	3310      	adds	r3, #16
 8003f50:	443b      	add	r3, r7
 8003f52:	2200      	movs	r2, #0
 8003f54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	60fa      	str	r2, [r7, #12]
 8003f5e:	3310      	adds	r3, #16
 8003f60:	443b      	add	r3, r7
 8003f62:	2200      	movs	r2, #0
 8003f64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003f68:	1d3a      	adds	r2, r7, #4
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003f72:	1d39      	adds	r1, r7, #4
 8003f74:	2300      	movs	r3, #0
 8003f76:	2208      	movs	r2, #8
 8003f78:	f240 6001 	movw	r0, #1537	; 0x601
 8003f7c:	f7ff f9de 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003f80:	2064      	movs	r0, #100	; 0x64
 8003f82:	f001 fb45 	bl	8005610 <HAL_Delay>
}
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <settingEnc>:

void settingEnc(int16_t enc)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b086      	sub	sp, #24
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e055      	b.n	800404a <settingEnc+0xbc>
    {
        int index = 0;
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	1c5a      	adds	r2, r3, #1
 8003fa6:	613a      	str	r2, [r7, #16]
 8003fa8:	3318      	adds	r3, #24
 8003faa:	443b      	add	r3, r7
 8003fac:	222b      	movs	r2, #43	; 0x2b
 8003fae:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	1c5a      	adds	r2, r3, #1
 8003fb6:	613a      	str	r2, [r7, #16]
 8003fb8:	3318      	adds	r3, #24
 8003fba:	443b      	add	r3, r7
 8003fbc:	220e      	movs	r2, #14
 8003fbe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	613a      	str	r2, [r7, #16]
 8003fc8:	3318      	adds	r3, #24
 8003fca:	443b      	add	r3, r7
 8003fcc:	2220      	movs	r2, #32
 8003fce:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	b2da      	uxtb	r2, r3
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1c59      	adds	r1, r3, #1
 8003fda:	6139      	str	r1, [r7, #16]
 8003fdc:	3201      	adds	r2, #1
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	443b      	add	r3, r7
 8003fe4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1c5a      	adds	r2, r3, #1
 8003fec:	613a      	str	r2, [r7, #16]
 8003fee:	88fa      	ldrh	r2, [r7, #6]
 8003ff0:	b2d2      	uxtb	r2, r2
 8003ff2:	3318      	adds	r3, #24
 8003ff4:	443b      	add	r3, r7
 8003ff6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 8003ffa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003ffe:	121b      	asrs	r3, r3, #8
 8004000:	b219      	sxth	r1, r3
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	1c5a      	adds	r2, r3, #1
 8004006:	613a      	str	r2, [r7, #16]
 8004008:	b2ca      	uxtb	r2, r1
 800400a:	3318      	adds	r3, #24
 800400c:	443b      	add	r3, r7
 800400e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	613a      	str	r2, [r7, #16]
 8004018:	3318      	adds	r3, #24
 800401a:	443b      	add	r3, r7
 800401c:	2200      	movs	r2, #0
 800401e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004022:	f107 0208 	add.w	r2, r7, #8
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	4413      	add	r3, r2
 800402a:	2200      	movs	r2, #0
 800402c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800402e:	f107 0108 	add.w	r1, r7, #8
 8004032:	2300      	movs	r3, #0
 8004034:	2208      	movs	r2, #8
 8004036:	f240 6001 	movw	r0, #1537	; 0x601
 800403a:	f7ff f97f 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800403e:	2064      	movs	r0, #100	; 0x64
 8004040:	f001 fae6 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	3301      	adds	r3, #1
 8004048:	617b      	str	r3, [r7, #20]
 800404a:	697b      	ldr	r3, [r7, #20]
 800404c:	2b01      	cmp	r3, #1
 800404e:	dda6      	ble.n	8003f9e <settingEnc+0x10>
    }
}
 8004050:	bf00      	nop
 8004052:	bf00      	nop
 8004054:	3718      	adds	r7, #24
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <settingPole>:

void settingPole(int16_t pole)
{
 800405a:	b580      	push	{r7, lr}
 800405c:	b086      	sub	sp, #24
 800405e:	af00      	add	r7, sp, #0
 8004060:	4603      	mov	r3, r0
 8004062:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
 8004068:	e055      	b.n	8004116 <settingPole+0xbc>
    {
        int index = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1c5a      	adds	r2, r3, #1
 8004072:	613a      	str	r2, [r7, #16]
 8004074:	3318      	adds	r3, #24
 8004076:	443b      	add	r3, r7
 8004078:	222b      	movs	r2, #43	; 0x2b
 800407a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	613a      	str	r2, [r7, #16]
 8004084:	3318      	adds	r3, #24
 8004086:	443b      	add	r3, r7
 8004088:	220c      	movs	r2, #12
 800408a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1c5a      	adds	r2, r3, #1
 8004092:	613a      	str	r2, [r7, #16]
 8004094:	3318      	adds	r3, #24
 8004096:	443b      	add	r3, r7
 8004098:	2220      	movs	r2, #32
 800409a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 800409e:	697b      	ldr	r3, [r7, #20]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1c59      	adds	r1, r3, #1
 80040a6:	6139      	str	r1, [r7, #16]
 80040a8:	3201      	adds	r2, #1
 80040aa:	b2d2      	uxtb	r2, r2
 80040ac:	3318      	adds	r3, #24
 80040ae:	443b      	add	r3, r7
 80040b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1c5a      	adds	r2, r3, #1
 80040b8:	613a      	str	r2, [r7, #16]
 80040ba:	88fa      	ldrh	r2, [r7, #6]
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	3318      	adds	r3, #24
 80040c0:	443b      	add	r3, r7
 80040c2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 80040c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040ca:	121b      	asrs	r3, r3, #8
 80040cc:	b219      	sxth	r1, r3
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	1c5a      	adds	r2, r3, #1
 80040d2:	613a      	str	r2, [r7, #16]
 80040d4:	b2ca      	uxtb	r2, r1
 80040d6:	3318      	adds	r3, #24
 80040d8:	443b      	add	r3, r7
 80040da:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	613a      	str	r2, [r7, #16]
 80040e4:	3318      	adds	r3, #24
 80040e6:	443b      	add	r3, r7
 80040e8:	2200      	movs	r2, #0
 80040ea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80040ee:	f107 0208 	add.w	r2, r7, #8
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	4413      	add	r3, r2
 80040f6:	2200      	movs	r2, #0
 80040f8:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80040fa:	f107 0108 	add.w	r1, r7, #8
 80040fe:	2300      	movs	r3, #0
 8004100:	2208      	movs	r2, #8
 8004102:	f240 6001 	movw	r0, #1537	; 0x601
 8004106:	f7ff f919 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800410a:	2064      	movs	r0, #100	; 0x64
 800410c:	f001 fa80 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	3301      	adds	r3, #1
 8004114:	617b      	str	r3, [r7, #20]
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2b01      	cmp	r3, #1
 800411a:	dda6      	ble.n	800406a <settingPole+0x10>
    }
}
 800411c:	bf00      	nop
 800411e:	bf00      	nop
 8004120:	3718      	adds	r7, #24
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}

08004126 <settingBreak>:

void settingBreak(uint8_t enable)
{
 8004126:	b580      	push	{r7, lr}
 8004128:	b086      	sub	sp, #24
 800412a:	af00      	add	r7, sp, #0
 800412c:	4603      	mov	r3, r0
 800412e:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8004130:	2300      	movs	r3, #0
 8004132:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	617a      	str	r2, [r7, #20]
 800413a:	3318      	adds	r3, #24
 800413c:	443b      	add	r3, r7
 800413e:	222b      	movs	r2, #43	; 0x2b
 8004140:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	1c5a      	adds	r2, r3, #1
 8004148:	617a      	str	r2, [r7, #20]
 800414a:	3318      	adds	r3, #24
 800414c:	443b      	add	r3, r7
 800414e:	2207      	movs	r2, #7
 8004150:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	1c5a      	adds	r2, r3, #1
 8004158:	617a      	str	r2, [r7, #20]
 800415a:	3318      	adds	r3, #24
 800415c:	443b      	add	r3, r7
 800415e:	2220      	movs	r2, #32
 8004160:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	1c5a      	adds	r2, r3, #1
 8004168:	617a      	str	r2, [r7, #20]
 800416a:	3318      	adds	r3, #24
 800416c:	443b      	add	r3, r7
 800416e:	2200      	movs	r2, #0
 8004170:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	617a      	str	r2, [r7, #20]
 800417a:	3318      	adds	r3, #24
 800417c:	443b      	add	r3, r7
 800417e:	79fa      	ldrb	r2, [r7, #7]
 8004180:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	617a      	str	r2, [r7, #20]
 800418a:	3318      	adds	r3, #24
 800418c:	443b      	add	r3, r7
 800418e:	2200      	movs	r2, #0
 8004190:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	1c5a      	adds	r2, r3, #1
 8004198:	617a      	str	r2, [r7, #20]
 800419a:	3318      	adds	r3, #24
 800419c:	443b      	add	r3, r7
 800419e:	2200      	movs	r2, #0
 80041a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80041a4:	f107 020c 	add.w	r2, r7, #12
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	4413      	add	r3, r2
 80041ac:	2200      	movs	r2, #0
 80041ae:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80041b0:	f107 010c 	add.w	r1, r7, #12
 80041b4:	2300      	movs	r3, #0
 80041b6:	2208      	movs	r2, #8
 80041b8:	f240 6001 	movw	r0, #1537	; 0x601
 80041bc:	f7ff f8be 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80041c0:	2064      	movs	r0, #100	; 0x64
 80041c2:	f001 fa25 	bl	8005610 <HAL_Delay>
}
 80041c6:	bf00      	nop
 80041c8:	3718      	adds	r7, #24
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b086      	sub	sp, #24
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	4603      	mov	r3, r0
 80041d6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 80041d8:	2300      	movs	r3, #0
 80041da:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	1c5a      	adds	r2, r3, #1
 80041e0:	617a      	str	r2, [r7, #20]
 80041e2:	3318      	adds	r3, #24
 80041e4:	443b      	add	r3, r7
 80041e6:	222b      	movs	r2, #43	; 0x2b
 80041e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	617a      	str	r2, [r7, #20]
 80041f2:	3318      	adds	r3, #24
 80041f4:	443b      	add	r3, r7
 80041f6:	2208      	movs	r2, #8
 80041f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	1c5a      	adds	r2, r3, #1
 8004200:	617a      	str	r2, [r7, #20]
 8004202:	3318      	adds	r3, #24
 8004204:	443b      	add	r3, r7
 8004206:	2220      	movs	r2, #32
 8004208:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	617a      	str	r2, [r7, #20]
 8004212:	3318      	adds	r3, #24
 8004214:	443b      	add	r3, r7
 8004216:	2200      	movs	r2, #0
 8004218:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	617a      	str	r2, [r7, #20]
 8004222:	88fa      	ldrh	r2, [r7, #6]
 8004224:	b2d2      	uxtb	r2, r2
 8004226:	3318      	adds	r3, #24
 8004228:	443b      	add	r3, r7
 800422a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 800422e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004232:	121b      	asrs	r3, r3, #8
 8004234:	b219      	sxth	r1, r3
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	1c5a      	adds	r2, r3, #1
 800423a:	617a      	str	r2, [r7, #20]
 800423c:	b2ca      	uxtb	r2, r1
 800423e:	3318      	adds	r3, #24
 8004240:	443b      	add	r3, r7
 8004242:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004246:	697b      	ldr	r3, [r7, #20]
 8004248:	1c5a      	adds	r2, r3, #1
 800424a:	617a      	str	r2, [r7, #20]
 800424c:	3318      	adds	r3, #24
 800424e:	443b      	add	r3, r7
 8004250:	2200      	movs	r2, #0
 8004252:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004256:	f107 020c 	add.w	r2, r7, #12
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	4413      	add	r3, r2
 800425e:	2200      	movs	r2, #0
 8004260:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004262:	f107 010c 	add.w	r1, r7, #12
 8004266:	2300      	movs	r3, #0
 8004268:	2208      	movs	r2, #8
 800426a:	f240 6001 	movw	r0, #1537	; 0x601
 800426e:	f7ff f865 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8004272:	2064      	movs	r0, #100	; 0x64
 8004274:	f001 f9cc 	bl	8005610 <HAL_Delay>
}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 800428a:	2300      	movs	r3, #0
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e05e      	b.n	800434e <settingRatedCurrent+0xce>
    {
        int index = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	1c5a      	adds	r2, r3, #1
 8004298:	613a      	str	r2, [r7, #16]
 800429a:	3318      	adds	r3, #24
 800429c:	443b      	add	r3, r7
 800429e:	222b      	movs	r2, #43	; 0x2b
 80042a0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1c5a      	adds	r2, r3, #1
 80042a8:	613a      	str	r2, [r7, #16]
 80042aa:	3318      	adds	r3, #24
 80042ac:	443b      	add	r3, r7
 80042ae:	2214      	movs	r2, #20
 80042b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1c5a      	adds	r2, r3, #1
 80042b8:	613a      	str	r2, [r7, #16]
 80042ba:	3318      	adds	r3, #24
 80042bc:	443b      	add	r3, r7
 80042be:	2220      	movs	r2, #32
 80042c0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	1c59      	adds	r1, r3, #1
 80042cc:	6139      	str	r1, [r7, #16]
 80042ce:	3201      	adds	r2, #1
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	3318      	adds	r3, #24
 80042d4:	443b      	add	r3, r7
 80042d6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	4b20      	ldr	r3, [pc, #128]	; (8004360 <settingRatedCurrent+0xe0>)
 80042e0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80042e4:	f7fc f9a8 	bl	8000638 <__aeabi_dmul>
 80042e8:	4602      	mov	r2, r0
 80042ea:	460b      	mov	r3, r1
 80042ec:	4610      	mov	r0, r2
 80042ee:	4619      	mov	r1, r3
 80042f0:	f7fc fc52 	bl	8000b98 <__aeabi_d2iz>
 80042f4:	4601      	mov	r1, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1c5a      	adds	r2, r3, #1
 80042fa:	613a      	str	r2, [r7, #16]
 80042fc:	b2ca      	uxtb	r2, r1
 80042fe:	3318      	adds	r3, #24
 8004300:	443b      	add	r3, r7
 8004302:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1c5a      	adds	r2, r3, #1
 800430a:	613a      	str	r2, [r7, #16]
 800430c:	3318      	adds	r3, #24
 800430e:	443b      	add	r3, r7
 8004310:	2200      	movs	r2, #0
 8004312:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	1c5a      	adds	r2, r3, #1
 800431a:	613a      	str	r2, [r7, #16]
 800431c:	3318      	adds	r3, #24
 800431e:	443b      	add	r3, r7
 8004320:	2200      	movs	r2, #0
 8004322:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004326:	f107 0208 	add.w	r2, r7, #8
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004332:	f107 0108 	add.w	r1, r7, #8
 8004336:	2300      	movs	r3, #0
 8004338:	2208      	movs	r2, #8
 800433a:	f240 6001 	movw	r0, #1537	; 0x601
 800433e:	f7fe fffd 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004342:	2064      	movs	r0, #100	; 0x64
 8004344:	f001 f964 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	2b01      	cmp	r3, #1
 8004352:	dd9d      	ble.n	8004290 <settingRatedCurrent+0x10>
    }
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop
 8004358:	3718      	adds	r7, #24
 800435a:	46bd      	mov	sp, r7
 800435c:	bd80      	pop	{r7, pc}
 800435e:	bf00      	nop
 8004360:	40240000 	.word	0x40240000

08004364 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b086      	sub	sp, #24
 8004368:	af00      	add	r7, sp, #0
 800436a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 800436e:	2300      	movs	r3, #0
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e05e      	b.n	8004432 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8004374:	2300      	movs	r3, #0
 8004376:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	1c5a      	adds	r2, r3, #1
 800437c:	613a      	str	r2, [r7, #16]
 800437e:	3318      	adds	r3, #24
 8004380:	443b      	add	r3, r7
 8004382:	222b      	movs	r2, #43	; 0x2b
 8004384:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	613a      	str	r2, [r7, #16]
 800438e:	3318      	adds	r3, #24
 8004390:	443b      	add	r3, r7
 8004392:	2215      	movs	r2, #21
 8004394:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	1c5a      	adds	r2, r3, #1
 800439c:	613a      	str	r2, [r7, #16]
 800439e:	3318      	adds	r3, #24
 80043a0:	443b      	add	r3, r7
 80043a2:	2220      	movs	r2, #32
 80043a4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	b2da      	uxtb	r2, r3
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	6139      	str	r1, [r7, #16]
 80043b2:	3201      	adds	r2, #1
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	3318      	adds	r3, #24
 80043b8:	443b      	add	r3, r7
 80043ba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 80043be:	f04f 0200 	mov.w	r2, #0
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <settingMaxCurrent+0xe0>)
 80043c4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80043c8:	f7fc f936 	bl	8000638 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4610      	mov	r0, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f7fc fbe0 	bl	8000b98 <__aeabi_d2iz>
 80043d8:	4601      	mov	r1, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1c5a      	adds	r2, r3, #1
 80043de:	613a      	str	r2, [r7, #16]
 80043e0:	b2ca      	uxtb	r2, r1
 80043e2:	3318      	adds	r3, #24
 80043e4:	443b      	add	r3, r7
 80043e6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	613a      	str	r2, [r7, #16]
 80043f0:	3318      	adds	r3, #24
 80043f2:	443b      	add	r3, r7
 80043f4:	2200      	movs	r2, #0
 80043f6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	613a      	str	r2, [r7, #16]
 8004400:	3318      	adds	r3, #24
 8004402:	443b      	add	r3, r7
 8004404:	2200      	movs	r2, #0
 8004406:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800440a:	f107 0208 	add.w	r2, r7, #8
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	4413      	add	r3, r2
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004416:	f107 0108 	add.w	r1, r7, #8
 800441a:	2300      	movs	r3, #0
 800441c:	2208      	movs	r2, #8
 800441e:	f240 6001 	movw	r0, #1537	; 0x601
 8004422:	f7fe ff8b 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f001 f8f2 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	3301      	adds	r3, #1
 8004430:	617b      	str	r3, [r7, #20]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b01      	cmp	r3, #1
 8004436:	dd9d      	ble.n	8004374 <settingMaxCurrent+0x10>
    }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3718      	adds	r7, #24
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40240000 	.word	0x40240000

08004448 <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b086      	sub	sp, #24
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004452:	2300      	movs	r3, #0
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	e055      	b.n	8004504 <settingHallOffset+0xbc>
    {
        int index = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	613a      	str	r2, [r7, #16]
 8004462:	3318      	adds	r3, #24
 8004464:	443b      	add	r3, r7
 8004466:	222b      	movs	r2, #43	; 0x2b
 8004468:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	613a      	str	r2, [r7, #16]
 8004472:	3318      	adds	r3, #24
 8004474:	443b      	add	r3, r7
 8004476:	2211      	movs	r2, #17
 8004478:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	613a      	str	r2, [r7, #16]
 8004482:	3318      	adds	r3, #24
 8004484:	443b      	add	r3, r7
 8004486:	2220      	movs	r2, #32
 8004488:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	b2da      	uxtb	r2, r3
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	1c59      	adds	r1, r3, #1
 8004494:	6139      	str	r1, [r7, #16]
 8004496:	3201      	adds	r2, #1
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	3318      	adds	r3, #24
 800449c:	443b      	add	r3, r7
 800449e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	613a      	str	r2, [r7, #16]
 80044a8:	88fa      	ldrh	r2, [r7, #6]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	3318      	adds	r3, #24
 80044ae:	443b      	add	r3, r7
 80044b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 80044b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80044b8:	121b      	asrs	r3, r3, #8
 80044ba:	b219      	sxth	r1, r3
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	613a      	str	r2, [r7, #16]
 80044c2:	b2ca      	uxtb	r2, r1
 80044c4:	3318      	adds	r3, #24
 80044c6:	443b      	add	r3, r7
 80044c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	1c5a      	adds	r2, r3, #1
 80044d0:	613a      	str	r2, [r7, #16]
 80044d2:	3318      	adds	r3, #24
 80044d4:	443b      	add	r3, r7
 80044d6:	2200      	movs	r2, #0
 80044d8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80044dc:	f107 0208 	add.w	r2, r7, #8
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	4413      	add	r3, r2
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80044e8:	f107 0108 	add.w	r1, r7, #8
 80044ec:	2300      	movs	r3, #0
 80044ee:	2208      	movs	r2, #8
 80044f0:	f240 6001 	movw	r0, #1537	; 0x601
 80044f4:	f7fe ff22 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80044f8:	2064      	movs	r0, #100	; 0x64
 80044fa:	f001 f889 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	3301      	adds	r3, #1
 8004502:	617b      	str	r3, [r7, #20]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2b01      	cmp	r3, #1
 8004508:	dda6      	ble.n	8004458 <settingHallOffset+0x10>
    }
}
 800450a:	bf00      	nop
 800450c:	bf00      	nop
 800450e:	3718      	adds	r7, #24
 8004510:	46bd      	mov	sp, r7
 8004512:	bd80      	pop	{r7, pc}

08004514 <save>:

void save()
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800451a:	2300      	movs	r3, #0
 800451c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	1c5a      	adds	r2, r3, #1
 8004522:	60fa      	str	r2, [r7, #12]
 8004524:	3310      	adds	r3, #16
 8004526:	443b      	add	r3, r7
 8004528:	222b      	movs	r2, #43	; 0x2b
 800452a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	1c5a      	adds	r2, r3, #1
 8004532:	60fa      	str	r2, [r7, #12]
 8004534:	3310      	adds	r3, #16
 8004536:	443b      	add	r3, r7
 8004538:	2210      	movs	r2, #16
 800453a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	1c5a      	adds	r2, r3, #1
 8004542:	60fa      	str	r2, [r7, #12]
 8004544:	3310      	adds	r3, #16
 8004546:	443b      	add	r3, r7
 8004548:	2220      	movs	r2, #32
 800454a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1c5a      	adds	r2, r3, #1
 8004552:	60fa      	str	r2, [r7, #12]
 8004554:	3310      	adds	r3, #16
 8004556:	443b      	add	r3, r7
 8004558:	2200      	movs	r2, #0
 800455a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	1c5a      	adds	r2, r3, #1
 8004562:	60fa      	str	r2, [r7, #12]
 8004564:	3310      	adds	r3, #16
 8004566:	443b      	add	r3, r7
 8004568:	2201      	movs	r2, #1
 800456a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	60fa      	str	r2, [r7, #12]
 8004574:	3310      	adds	r3, #16
 8004576:	443b      	add	r3, r7
 8004578:	2200      	movs	r2, #0
 800457a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	1c5a      	adds	r2, r3, #1
 8004582:	60fa      	str	r2, [r7, #12]
 8004584:	3310      	adds	r3, #16
 8004586:	443b      	add	r3, r7
 8004588:	2200      	movs	r2, #0
 800458a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800458e:	1d3a      	adds	r2, r7, #4
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4413      	add	r3, r2
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]
    index = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800459c:	1d39      	adds	r1, r7, #4
 800459e:	2300      	movs	r3, #0
 80045a0:	2208      	movs	r2, #8
 80045a2:	f240 6001 	movw	r0, #1537	; 0x601
 80045a6:	f7fe fec9 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80045aa:	2064      	movs	r0, #100	; 0x64
 80045ac:	f001 f830 	bl	8005610 <HAL_Delay>
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <startMotor>:



void startMotor()
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
    enable();
 80045bc:	f000 f806 	bl	80045cc <enable>
    velocityMode();
 80045c0:	f7ff fc45 	bl	8003e4e <velocityMode>
    synchronousMode();
 80045c4:	f7ff fc93 	bl	8003eee <synchronousMode>
}
 80045c8:	bf00      	nop
 80045ca:	bd80      	pop	{r7, pc}

080045cc <enable>:

void enable()
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 80045d2:	4b2f      	ldr	r3, [pc, #188]	; (8004690 <enable+0xc4>)
 80045d4:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
 80045da:	e050      	b.n	800467e <enable+0xb2>
    {
        int index = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	613a      	str	r2, [r7, #16]
 80045e6:	3318      	adds	r3, #24
 80045e8:	443b      	add	r3, r7
 80045ea:	222b      	movs	r2, #43	; 0x2b
 80045ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	613a      	str	r2, [r7, #16]
 80045f6:	3318      	adds	r3, #24
 80045f8:	443b      	add	r3, r7
 80045fa:	2240      	movs	r2, #64	; 0x40
 80045fc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	613a      	str	r2, [r7, #16]
 8004606:	3318      	adds	r3, #24
 8004608:	443b      	add	r3, r7
 800460a:	2260      	movs	r2, #96	; 0x60
 800460c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	613a      	str	r2, [r7, #16]
 8004616:	3318      	adds	r3, #24
 8004618:	443b      	add	r3, r7
 800461a:	2200      	movs	r2, #0
 800461c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	613a      	str	r2, [r7, #16]
 8004626:	1d39      	adds	r1, r7, #4
 8004628:	697a      	ldr	r2, [r7, #20]
 800462a:	440a      	add	r2, r1
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	3318      	adds	r3, #24
 8004630:	443b      	add	r3, r7
 8004632:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	613a      	str	r2, [r7, #16]
 800463c:	3318      	adds	r3, #24
 800463e:	443b      	add	r3, r7
 8004640:	2200      	movs	r2, #0
 8004642:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	1c5a      	adds	r2, r3, #1
 800464a:	613a      	str	r2, [r7, #16]
 800464c:	3318      	adds	r3, #24
 800464e:	443b      	add	r3, r7
 8004650:	2200      	movs	r2, #0
 8004652:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004656:	f107 0208 	add.w	r2, r7, #8
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	4413      	add	r3, r2
 800465e:	2200      	movs	r2, #0
 8004660:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004662:	f107 0108 	add.w	r1, r7, #8
 8004666:	2300      	movs	r3, #0
 8004668:	2208      	movs	r2, #8
 800466a:	f240 6001 	movw	r0, #1537	; 0x601
 800466e:	f7fe fe65 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004672:	2064      	movs	r0, #100	; 0x64
 8004674:	f000 ffcc 	bl	8005610 <HAL_Delay>
    for(int i =0;i<4;i++)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	3301      	adds	r3, #1
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b03      	cmp	r3, #3
 8004682:	ddab      	ble.n	80045dc <enable+0x10>
    }
}
 8004684:	bf00      	nop
 8004686:	bf00      	nop
 8004688:	3718      	adds	r7, #24
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	0f070600 	.word	0x0f070600

08004694 <disable>:

void disable()
{
 8004694:	b580      	push	{r7, lr}
 8004696:	b084      	sub	sp, #16
 8004698:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800469a:	2300      	movs	r3, #0
 800469c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	60fa      	str	r2, [r7, #12]
 80046a4:	3310      	adds	r3, #16
 80046a6:	443b      	add	r3, r7
 80046a8:	222b      	movs	r2, #43	; 0x2b
 80046aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	60fa      	str	r2, [r7, #12]
 80046b4:	3310      	adds	r3, #16
 80046b6:	443b      	add	r3, r7
 80046b8:	2240      	movs	r2, #64	; 0x40
 80046ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	60fa      	str	r2, [r7, #12]
 80046c4:	3310      	adds	r3, #16
 80046c6:	443b      	add	r3, r7
 80046c8:	2260      	movs	r2, #96	; 0x60
 80046ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	60fa      	str	r2, [r7, #12]
 80046d4:	3310      	adds	r3, #16
 80046d6:	443b      	add	r3, r7
 80046d8:	2200      	movs	r2, #0
 80046da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	60fa      	str	r2, [r7, #12]
 80046e4:	3310      	adds	r3, #16
 80046e6:	443b      	add	r3, r7
 80046e8:	2200      	movs	r2, #0
 80046ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1c5a      	adds	r2, r3, #1
 80046f2:	60fa      	str	r2, [r7, #12]
 80046f4:	3310      	adds	r3, #16
 80046f6:	443b      	add	r3, r7
 80046f8:	2200      	movs	r2, #0
 80046fa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	1c5a      	adds	r2, r3, #1
 8004702:	60fa      	str	r2, [r7, #12]
 8004704:	3310      	adds	r3, #16
 8004706:	443b      	add	r3, r7
 8004708:	2200      	movs	r2, #0
 800470a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800470e:	1d3a      	adds	r2, r7, #4
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	2200      	movs	r2, #0
 8004716:	701a      	strb	r2, [r3, #0]
    index = 0;
 8004718:	2300      	movs	r3, #0
 800471a:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800471c:	1d39      	adds	r1, r7, #4
 800471e:	2300      	movs	r3, #0
 8004720:	2208      	movs	r2, #8
 8004722:	f240 6001 	movw	r0, #1537	; 0x601
 8004726:	f7fe fe09 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800472a:	2064      	movs	r0, #100	; 0x64
 800472c:	f000 ff70 	bl	8005610 <HAL_Delay>
}
 8004730:	bf00      	nop
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <reset>:

void reset()
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800473e:	2300      	movs	r3, #0
 8004740:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1c5a      	adds	r2, r3, #1
 8004746:	60fa      	str	r2, [r7, #12]
 8004748:	3310      	adds	r3, #16
 800474a:	443b      	add	r3, r7
 800474c:	222b      	movs	r2, #43	; 0x2b
 800474e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1c5a      	adds	r2, r3, #1
 8004756:	60fa      	str	r2, [r7, #12]
 8004758:	3310      	adds	r3, #16
 800475a:	443b      	add	r3, r7
 800475c:	2240      	movs	r2, #64	; 0x40
 800475e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	60fa      	str	r2, [r7, #12]
 8004768:	3310      	adds	r3, #16
 800476a:	443b      	add	r3, r7
 800476c:	2260      	movs	r2, #96	; 0x60
 800476e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	60fa      	str	r2, [r7, #12]
 8004778:	3310      	adds	r3, #16
 800477a:	443b      	add	r3, r7
 800477c:	2200      	movs	r2, #0
 800477e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	1c5a      	adds	r2, r3, #1
 8004786:	60fa      	str	r2, [r7, #12]
 8004788:	3310      	adds	r3, #16
 800478a:	443b      	add	r3, r7
 800478c:	2280      	movs	r2, #128	; 0x80
 800478e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	1c5a      	adds	r2, r3, #1
 8004796:	60fa      	str	r2, [r7, #12]
 8004798:	3310      	adds	r3, #16
 800479a:	443b      	add	r3, r7
 800479c:	2200      	movs	r2, #0
 800479e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	1c5a      	adds	r2, r3, #1
 80047a6:	60fa      	str	r2, [r7, #12]
 80047a8:	3310      	adds	r3, #16
 80047aa:	443b      	add	r3, r7
 80047ac:	2200      	movs	r2, #0
 80047ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80047b2:	1d3a      	adds	r2, r7, #4
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	2200      	movs	r2, #0
 80047ba:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80047bc:	1d39      	adds	r1, r7, #4
 80047be:	2300      	movs	r3, #0
 80047c0:	2208      	movs	r2, #8
 80047c2:	f240 6001 	movw	r0, #1537	; 0x601
 80047c6:	f7fe fdb9 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80047ca:	2064      	movs	r0, #100	; 0x64
 80047cc:	f000 ff20 	bl	8005610 <HAL_Delay>
}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <reqEnc>:

void reqEnc()
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80047de:	2300      	movs	r3, #0
 80047e0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	1c5a      	adds	r2, r3, #1
 80047e6:	60fa      	str	r2, [r7, #12]
 80047e8:	3310      	adds	r3, #16
 80047ea:	443b      	add	r3, r7
 80047ec:	2240      	movs	r2, #64	; 0x40
 80047ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	1c5a      	adds	r2, r3, #1
 80047f6:	60fa      	str	r2, [r7, #12]
 80047f8:	3310      	adds	r3, #16
 80047fa:	443b      	add	r3, r7
 80047fc:	226c      	movs	r2, #108	; 0x6c
 80047fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	60fa      	str	r2, [r7, #12]
 8004808:	3310      	adds	r3, #16
 800480a:	443b      	add	r3, r7
 800480c:	2260      	movs	r2, #96	; 0x60
 800480e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	1c5a      	adds	r2, r3, #1
 8004816:	60fa      	str	r2, [r7, #12]
 8004818:	3310      	adds	r3, #16
 800481a:	443b      	add	r3, r7
 800481c:	2203      	movs	r2, #3
 800481e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	1c5a      	adds	r2, r3, #1
 8004826:	60fa      	str	r2, [r7, #12]
 8004828:	3310      	adds	r3, #16
 800482a:	443b      	add	r3, r7
 800482c:	2200      	movs	r2, #0
 800482e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	60fa      	str	r2, [r7, #12]
 8004838:	3310      	adds	r3, #16
 800483a:	443b      	add	r3, r7
 800483c:	2200      	movs	r2, #0
 800483e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	60fa      	str	r2, [r7, #12]
 8004848:	3310      	adds	r3, #16
 800484a:	443b      	add	r3, r7
 800484c:	2200      	movs	r2, #0
 800484e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004852:	1d3a      	adds	r2, r7, #4
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	2200      	movs	r2, #0
 800485a:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800485c:	1d39      	adds	r1, r7, #4
 800485e:	2300      	movs	r3, #0
 8004860:	2208      	movs	r2, #8
 8004862:	f240 6001 	movw	r0, #1537	; 0x601
 8004866:	f7fe fd69 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800486a:	bf00      	nop
 800486c:	3710      	adds	r7, #16
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <reqState>:

void reqState()
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b084      	sub	sp, #16
 8004876:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	1c5a      	adds	r2, r3, #1
 8004880:	60fa      	str	r2, [r7, #12]
 8004882:	3310      	adds	r3, #16
 8004884:	443b      	add	r3, r7
 8004886:	2240      	movs	r2, #64	; 0x40
 8004888:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	1c5a      	adds	r2, r3, #1
 8004890:	60fa      	str	r2, [r7, #12]
 8004892:	3310      	adds	r3, #16
 8004894:	443b      	add	r3, r7
 8004896:	223f      	movs	r2, #63	; 0x3f
 8004898:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	1c5a      	adds	r2, r3, #1
 80048a0:	60fa      	str	r2, [r7, #12]
 80048a2:	3310      	adds	r3, #16
 80048a4:	443b      	add	r3, r7
 80048a6:	2260      	movs	r2, #96	; 0x60
 80048a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	60fa      	str	r2, [r7, #12]
 80048b2:	3310      	adds	r3, #16
 80048b4:	443b      	add	r3, r7
 80048b6:	2200      	movs	r2, #0
 80048b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	1c5a      	adds	r2, r3, #1
 80048c0:	60fa      	str	r2, [r7, #12]
 80048c2:	3310      	adds	r3, #16
 80048c4:	443b      	add	r3, r7
 80048c6:	2200      	movs	r2, #0
 80048c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	1c5a      	adds	r2, r3, #1
 80048d0:	60fa      	str	r2, [r7, #12]
 80048d2:	3310      	adds	r3, #16
 80048d4:	443b      	add	r3, r7
 80048d6:	2200      	movs	r2, #0
 80048d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	60fa      	str	r2, [r7, #12]
 80048e2:	3310      	adds	r3, #16
 80048e4:	443b      	add	r3, r7
 80048e6:	2200      	movs	r2, #0
 80048e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80048ec:	1d3a      	adds	r2, r7, #4
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	2200      	movs	r2, #0
 80048f4:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80048f6:	1d39      	adds	r1, r7, #4
 80048f8:	2300      	movs	r3, #0
 80048fa:	2208      	movs	r2, #8
 80048fc:	f240 6001 	movw	r0, #1537	; 0x601
 8004900:	f7fe fd1c 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
 8004912:	4603      	mov	r3, r0
 8004914:	460a      	mov	r2, r1
 8004916:	80fb      	strh	r3, [r7, #6]
 8004918:	4613      	mov	r3, r2
 800491a:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 800491c:	88fb      	ldrh	r3, [r7, #6]
 800491e:	425b      	negs	r3, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	1c5a      	adds	r2, r3, #1
 800492c:	617a      	str	r2, [r7, #20]
 800492e:	3318      	adds	r3, #24
 8004930:	443b      	add	r3, r7
 8004932:	2223      	movs	r2, #35	; 0x23
 8004934:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	617a      	str	r2, [r7, #20]
 800493e:	3318      	adds	r3, #24
 8004940:	443b      	add	r3, r7
 8004942:	22ff      	movs	r2, #255	; 0xff
 8004944:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	1c5a      	adds	r2, r3, #1
 800494c:	617a      	str	r2, [r7, #20]
 800494e:	3318      	adds	r3, #24
 8004950:	443b      	add	r3, r7
 8004952:	2260      	movs	r2, #96	; 0x60
 8004954:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	617a      	str	r2, [r7, #20]
 800495e:	3318      	adds	r3, #24
 8004960:	443b      	add	r3, r7
 8004962:	2203      	movs	r2, #3
 8004964:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	617a      	str	r2, [r7, #20]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	b2d2      	uxtb	r2, r2
 8004972:	3318      	adds	r3, #24
 8004974:	443b      	add	r3, r7
 8004976:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 800497a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800497e:	121b      	asrs	r3, r3, #8
 8004980:	b219      	sxth	r1, r3
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	617a      	str	r2, [r7, #20]
 8004988:	b2ca      	uxtb	r2, r1
 800498a:	3318      	adds	r3, #24
 800498c:	443b      	add	r3, r7
 800498e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	1c5a      	adds	r2, r3, #1
 8004996:	617a      	str	r2, [r7, #20]
 8004998:	88ba      	ldrh	r2, [r7, #4]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	3318      	adds	r3, #24
 800499e:	443b      	add	r3, r7
 80049a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 80049a4:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80049a8:	121b      	asrs	r3, r3, #8
 80049aa:	b21b      	sxth	r3, r3
 80049ac:	b2d9      	uxtb	r1, r3
 80049ae:	f107 020c 	add.w	r2, r7, #12
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	4413      	add	r3, r2
 80049b6:	460a      	mov	r2, r1
 80049b8:	701a      	strb	r2, [r3, #0]
//    printf("hihi swv\n");
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80049ba:	f107 010c 	add.w	r1, r7, #12
 80049be:	2300      	movs	r3, #0
 80049c0:	2208      	movs	r2, #8
 80049c2:	f240 6001 	movw	r0, #1537	; 0x601
 80049c6:	f7fe fcb9 	bl	800333c <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80049ca:	bf00      	nop
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <settingKP>:

void settingKP(int16_t kp)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b086      	sub	sp, #24
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	4603      	mov	r3, r0
 80049da:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80049dc:	2300      	movs	r3, #0
 80049de:	617b      	str	r3, [r7, #20]
 80049e0:	e055      	b.n	8004a8e <settingKP+0xbc>
    {
        int index = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	613a      	str	r2, [r7, #16]
 80049ec:	3318      	adds	r3, #24
 80049ee:	443b      	add	r3, r7
 80049f0:	221d      	movs	r2, #29
 80049f2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	613a      	str	r2, [r7, #16]
 80049fc:	3318      	adds	r3, #24
 80049fe:	443b      	add	r3, r7
 8004a00:	2220      	movs	r2, #32
 8004a02:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	1c5a      	adds	r2, r3, #1
 8004a0a:	613a      	str	r2, [r7, #16]
 8004a0c:	3318      	adds	r3, #24
 8004a0e:	443b      	add	r3, r7
 8004a10:	2220      	movs	r2, #32
 8004a12:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1c59      	adds	r1, r3, #1
 8004a1e:	6139      	str	r1, [r7, #16]
 8004a20:	3201      	adds	r2, #1
 8004a22:	b2d2      	uxtb	r2, r2
 8004a24:	3318      	adds	r3, #24
 8004a26:	443b      	add	r3, r7
 8004a28:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	613a      	str	r2, [r7, #16]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	b2d2      	uxtb	r2, r2
 8004a36:	3318      	adds	r3, #24
 8004a38:	443b      	add	r3, r7
 8004a3a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 8004a3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a42:	121b      	asrs	r3, r3, #8
 8004a44:	b219      	sxth	r1, r3
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1c5a      	adds	r2, r3, #1
 8004a4a:	613a      	str	r2, [r7, #16]
 8004a4c:	b2ca      	uxtb	r2, r1
 8004a4e:	3318      	adds	r3, #24
 8004a50:	443b      	add	r3, r7
 8004a52:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	613a      	str	r2, [r7, #16]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	443b      	add	r3, r7
 8004a60:	2200      	movs	r2, #0
 8004a62:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004a66:	f107 0208 	add.w	r2, r7, #8
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	2200      	movs	r2, #0
 8004a70:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004a72:	f107 0108 	add.w	r1, r7, #8
 8004a76:	2300      	movs	r3, #0
 8004a78:	2208      	movs	r2, #8
 8004a7a:	f240 6001 	movw	r0, #1537	; 0x601
 8004a7e:	f7fe fc5d 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8004a82:	2064      	movs	r0, #100	; 0x64
 8004a84:	f000 fdc4 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	617b      	str	r3, [r7, #20]
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	dda6      	ble.n	80049e2 <settingKP+0x10>
    }
}
 8004a94:	bf00      	nop
 8004a96:	bf00      	nop
 8004a98:	3718      	adds	r7, #24
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bd80      	pop	{r7, pc}

08004a9e <settingKI>:

void settingKI(int16_t ki)
{
 8004a9e:	b580      	push	{r7, lr}
 8004aa0:	b086      	sub	sp, #24
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e055      	b.n	8004b5a <settingKI+0xbc>
    {
        int index = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	613a      	str	r2, [r7, #16]
 8004ab8:	3318      	adds	r3, #24
 8004aba:	443b      	add	r3, r7
 8004abc:	221e      	movs	r2, #30
 8004abe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1c5a      	adds	r2, r3, #1
 8004ac6:	613a      	str	r2, [r7, #16]
 8004ac8:	3318      	adds	r3, #24
 8004aca:	443b      	add	r3, r7
 8004acc:	2220      	movs	r2, #32
 8004ace:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	613a      	str	r2, [r7, #16]
 8004ad8:	3318      	adds	r3, #24
 8004ada:	443b      	add	r3, r7
 8004adc:	2220      	movs	r2, #32
 8004ade:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	1c59      	adds	r1, r3, #1
 8004aea:	6139      	str	r1, [r7, #16]
 8004aec:	3201      	adds	r2, #1
 8004aee:	b2d2      	uxtb	r2, r2
 8004af0:	3318      	adds	r3, #24
 8004af2:	443b      	add	r3, r7
 8004af4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	1c5a      	adds	r2, r3, #1
 8004afc:	613a      	str	r2, [r7, #16]
 8004afe:	88fa      	ldrh	r2, [r7, #6]
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	3318      	adds	r3, #24
 8004b04:	443b      	add	r3, r7
 8004b06:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 8004b0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b0e:	121b      	asrs	r3, r3, #8
 8004b10:	b219      	sxth	r1, r3
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	613a      	str	r2, [r7, #16]
 8004b18:	b2ca      	uxtb	r2, r1
 8004b1a:	3318      	adds	r3, #24
 8004b1c:	443b      	add	r3, r7
 8004b1e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	1c5a      	adds	r2, r3, #1
 8004b26:	613a      	str	r2, [r7, #16]
 8004b28:	3318      	adds	r3, #24
 8004b2a:	443b      	add	r3, r7
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004b32:	f107 0208 	add.w	r2, r7, #8
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	4413      	add	r3, r2
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004b3e:	f107 0108 	add.w	r1, r7, #8
 8004b42:	2300      	movs	r3, #0
 8004b44:	2208      	movs	r2, #8
 8004b46:	f240 6001 	movw	r0, #1537	; 0x601
 8004b4a:	f7fe fbf7 	bl	800333c <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004b4e:	2064      	movs	r0, #100	; 0x64
 8004b50:	f000 fd5e 	bl	8005610 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	3301      	adds	r3, #1
 8004b58:	617b      	str	r3, [r7, #20]
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	dda6      	ble.n	8004aae <settingKI+0x10>
    }
}
 8004b60:	bf00      	nop
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	0000      	movs	r0, r0
 8004b6c:	0000      	movs	r0, r0
	...

08004b70 <settingMotor>:
void settingMotor()
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8004b74:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004b78:	f7ff fa09 	bl	8003f8e <settingEnc>
    settingPole(POLE_PAIR);
 8004b7c:	200a      	movs	r0, #10
 8004b7e:	f7ff fa6c 	bl	800405a <settingPole>
    settingBreak(BREAK_OPTION);
 8004b82:	2001      	movs	r0, #1
 8004b84:	f7ff facf 	bl	8004126 <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004b88:	20c8      	movs	r0, #200	; 0xc8
 8004b8a:	f7ff fb20 	bl	80041ce <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 8004b8e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004bc0 <settingMotor+0x50>
 8004b92:	f7ff fb75 	bl	8004280 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 8004b96:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004bc8 <settingMotor+0x58>
 8004b9a:	f7ff fbe3 	bl	8004364 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 8004b9e:	20f0      	movs	r0, #240	; 0xf0
 8004ba0:	f7ff fc52 	bl	8004448 <settingHallOffset>
    settingKP(KP_GAIN);
 8004ba4:	f240 2026 	movw	r0, #550	; 0x226
 8004ba8:	f7ff ff13 	bl	80049d2 <settingKP>
    settingKI(KI_GAIN);
 8004bac:	206e      	movs	r0, #110	; 0x6e
 8004bae:	f7ff ff76 	bl	8004a9e <settingKI>
    save();
 8004bb2:	f7ff fcaf 	bl	8004514 <save>
}
 8004bb6:	bf00      	nop
 8004bb8:	bd80      	pop	{r7, pc}
 8004bba:	bf00      	nop
 8004bbc:	f3af 8000 	nop.w
 8004bc0:	00000000 	.word	0x00000000
 8004bc4:	40200000 	.word	0x40200000
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	40300000 	.word	0x40300000

08004bd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004bd0:	b480      	push	{r7}
 8004bd2:	b083      	sub	sp, #12
 8004bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004bd6:	4b0f      	ldr	r3, [pc, #60]	; (8004c14 <HAL_MspInit+0x44>)
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bda:	4a0e      	ldr	r2, [pc, #56]	; (8004c14 <HAL_MspInit+0x44>)
 8004bdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6413      	str	r3, [r2, #64]	; 0x40
 8004be2:	4b0c      	ldr	r3, [pc, #48]	; (8004c14 <HAL_MspInit+0x44>)
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bee:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <HAL_MspInit+0x44>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a08      	ldr	r2, [pc, #32]	; (8004c14 <HAL_MspInit+0x44>)
 8004bf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b06      	ldr	r3, [pc, #24]	; (8004c14 <HAL_MspInit+0x44>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c02:	603b      	str	r3, [r7, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c06:	bf00      	nop
 8004c08:	370c      	adds	r7, #12
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c10:	4770      	bx	lr
 8004c12:	bf00      	nop
 8004c14:	40023800 	.word	0x40023800

08004c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b08a      	sub	sp, #40	; 0x28
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c20:	f107 0314 	add.w	r3, r7, #20
 8004c24:	2200      	movs	r2, #0
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	605a      	str	r2, [r3, #4]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	60da      	str	r2, [r3, #12]
 8004c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a15      	ldr	r2, [pc, #84]	; (8004c8c <HAL_ADC_MspInit+0x74>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d123      	bne.n	8004c82 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004c3a:	4b15      	ldr	r3, [pc, #84]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c3e:	4a14      	ldr	r2, [pc, #80]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c44:	6453      	str	r3, [r2, #68]	; 0x44
 8004c46:	4b12      	ldr	r3, [pc, #72]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	613b      	str	r3, [r7, #16]
 8004c50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c52:	4b0f      	ldr	r3, [pc, #60]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c56:	4a0e      	ldr	r2, [pc, #56]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c58:	f043 0301 	orr.w	r3, r3, #1
 8004c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c5e:	4b0c      	ldr	r3, [pc, #48]	; (8004c90 <HAL_ADC_MspInit+0x78>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004c6a:	231e      	movs	r3, #30
 8004c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c72:	2300      	movs	r3, #0
 8004c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c76:	f107 0314 	add.w	r3, r7, #20
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	4805      	ldr	r0, [pc, #20]	; (8004c94 <HAL_ADC_MspInit+0x7c>)
 8004c7e:	f002 f8f5 	bl	8006e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004c82:	bf00      	nop
 8004c84:	3728      	adds	r7, #40	; 0x28
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40012000 	.word	0x40012000
 8004c90:	40023800 	.word	0x40023800
 8004c94:	40020000 	.word	0x40020000

08004c98 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b08a      	sub	sp, #40	; 0x28
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ca0:	f107 0314 	add.w	r3, r7, #20
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	601a      	str	r2, [r3, #0]
 8004ca8:	605a      	str	r2, [r3, #4]
 8004caa:	609a      	str	r2, [r3, #8]
 8004cac:	60da      	str	r2, [r3, #12]
 8004cae:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1b      	ldr	r2, [pc, #108]	; (8004d24 <HAL_CAN_MspInit+0x8c>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d12f      	bne.n	8004d1a <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004cba:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cbe:	4a1a      	ldr	r2, [pc, #104]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004cc0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004cc4:	6413      	str	r3, [r2, #64]	; 0x40
 8004cc6:	4b18      	ldr	r3, [pc, #96]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cce:	613b      	str	r3, [r7, #16]
 8004cd0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004cd2:	4b15      	ldr	r3, [pc, #84]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd6:	4a14      	ldr	r2, [pc, #80]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004cd8:	f043 0308 	orr.w	r3, r3, #8
 8004cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8004cde:	4b12      	ldr	r3, [pc, #72]	; (8004d28 <HAL_CAN_MspInit+0x90>)
 8004ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce2:	f003 0308 	and.w	r3, r3, #8
 8004ce6:	60fb      	str	r3, [r7, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004cea:	2303      	movs	r3, #3
 8004cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cee:	2302      	movs	r3, #2
 8004cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf6:	2303      	movs	r3, #3
 8004cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004cfa:	2309      	movs	r3, #9
 8004cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004cfe:	f107 0314 	add.w	r3, r7, #20
 8004d02:	4619      	mov	r1, r3
 8004d04:	4809      	ldr	r0, [pc, #36]	; (8004d2c <HAL_CAN_MspInit+0x94>)
 8004d06:	f002 f8b1 	bl	8006e6c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2100      	movs	r1, #0
 8004d0e:	2014      	movs	r0, #20
 8004d10:	f002 f867 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004d14:	2014      	movs	r0, #20
 8004d16:	f002 f880 	bl	8006e1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004d1a:	bf00      	nop
 8004d1c:	3728      	adds	r7, #40	; 0x28
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	40006400 	.word	0x40006400
 8004d28:	40023800 	.word	0x40023800
 8004d2c:	40020c00 	.word	0x40020c00

08004d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b088      	sub	sp, #32
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d40:	d10c      	bne.n	8004d5c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004d42:	4b49      	ldr	r3, [pc, #292]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	4a48      	ldr	r2, [pc, #288]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d48:	f043 0301 	orr.w	r3, r3, #1
 8004d4c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d4e:	4b46      	ldr	r3, [pc, #280]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d52:	f003 0301 	and.w	r3, r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
 8004d58:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004d5a:	e080      	b.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a42      	ldr	r2, [pc, #264]	; (8004e6c <HAL_TIM_Base_MspInit+0x13c>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d114      	bne.n	8004d90 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004d66:	4b40      	ldr	r3, [pc, #256]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d6c:	f043 0308 	orr.w	r3, r3, #8
 8004d70:	6413      	str	r3, [r2, #64]	; 0x40
 8004d72:	4b3d      	ldr	r3, [pc, #244]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d76:	f003 0308 	and.w	r3, r3, #8
 8004d7a:	61bb      	str	r3, [r7, #24]
 8004d7c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2100      	movs	r1, #0
 8004d82:	2032      	movs	r0, #50	; 0x32
 8004d84:	f002 f82d 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004d88:	2032      	movs	r0, #50	; 0x32
 8004d8a:	f002 f846 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 8004d8e:	e066      	b.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a36      	ldr	r2, [pc, #216]	; (8004e70 <HAL_TIM_Base_MspInit+0x140>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d114      	bne.n	8004dc4 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004d9a:	4b33      	ldr	r3, [pc, #204]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	4a32      	ldr	r2, [pc, #200]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004da0:	f043 0310 	orr.w	r3, r3, #16
 8004da4:	6413      	str	r3, [r2, #64]	; 0x40
 8004da6:	4b30      	ldr	r3, [pc, #192]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004daa:	f003 0310 	and.w	r3, r3, #16
 8004dae:	617b      	str	r3, [r7, #20]
 8004db0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004db2:	2200      	movs	r2, #0
 8004db4:	2100      	movs	r1, #0
 8004db6:	2036      	movs	r0, #54	; 0x36
 8004db8:	f002 f813 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004dbc:	2036      	movs	r0, #54	; 0x36
 8004dbe:	f002 f82c 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 8004dc2:	e04c      	b.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	4a2a      	ldr	r2, [pc, #168]	; (8004e74 <HAL_TIM_Base_MspInit+0x144>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d114      	bne.n	8004df8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004dce:	4b26      	ldr	r3, [pc, #152]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	4a25      	ldr	r2, [pc, #148]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004dd4:	f043 0320 	orr.w	r3, r3, #32
 8004dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004dda:	4b23      	ldr	r3, [pc, #140]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	613b      	str	r3, [r7, #16]
 8004de4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004de6:	2200      	movs	r2, #0
 8004de8:	2100      	movs	r1, #0
 8004dea:	2037      	movs	r0, #55	; 0x37
 8004dec:	f001 fff9 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004df0:	2037      	movs	r0, #55	; 0x37
 8004df2:	f002 f812 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 8004df6:	e032      	b.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <HAL_TIM_Base_MspInit+0x148>)
 8004dfe:	4293      	cmp	r3, r2
 8004e00:	d114      	bne.n	8004e2c <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004e02:	4b19      	ldr	r3, [pc, #100]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e06:	4a18      	ldr	r2, [pc, #96]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e0e:	4b16      	ldr	r3, [pc, #88]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e16:	60fb      	str	r3, [r7, #12]
 8004e18:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	2018      	movs	r0, #24
 8004e20:	f001 ffdf 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004e24:	2018      	movs	r0, #24
 8004e26:	f001 fff8 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 8004e2a:	e018      	b.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a12      	ldr	r2, [pc, #72]	; (8004e7c <HAL_TIM_Base_MspInit+0x14c>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d113      	bne.n	8004e5e <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004e36:	4b0c      	ldr	r3, [pc, #48]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a0b      	ldr	r2, [pc, #44]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <HAL_TIM_Base_MspInit+0x138>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004e4e:	2200      	movs	r2, #0
 8004e50:	2100      	movs	r1, #0
 8004e52:	202d      	movs	r0, #45	; 0x2d
 8004e54:	f001 ffc5 	bl	8006de2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004e58:	202d      	movs	r0, #45	; 0x2d
 8004e5a:	f001 ffde 	bl	8006e1a <HAL_NVIC_EnableIRQ>
}
 8004e5e:	bf00      	nop
 8004e60:	3720      	adds	r7, #32
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	40023800 	.word	0x40023800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40001000 	.word	0x40001000
 8004e74:	40001400 	.word	0x40001400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40002000 	.word	0x40002000

08004e80 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e88:	f107 030c 	add.w	r3, r7, #12
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	605a      	str	r2, [r3, #4]
 8004e92:	609a      	str	r2, [r3, #8]
 8004e94:	60da      	str	r2, [r3, #12]
 8004e96:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea0:	d11b      	bne.n	8004eda <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea2:	4b10      	ldr	r3, [pc, #64]	; (8004ee4 <HAL_TIM_MspPostInit+0x64>)
 8004ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea6:	4a0f      	ldr	r2, [pc, #60]	; (8004ee4 <HAL_TIM_MspPostInit+0x64>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	6313      	str	r3, [r2, #48]	; 0x30
 8004eae:	4b0d      	ldr	r3, [pc, #52]	; (8004ee4 <HAL_TIM_MspPostInit+0x64>)
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	60bb      	str	r3, [r7, #8]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004eba:	2320      	movs	r3, #32
 8004ebc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004eca:	2301      	movs	r3, #1
 8004ecc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ece:	f107 030c 	add.w	r3, r7, #12
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4804      	ldr	r0, [pc, #16]	; (8004ee8 <HAL_TIM_MspPostInit+0x68>)
 8004ed6:	f001 ffc9 	bl	8006e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004eda:	bf00      	nop
 8004edc:	3720      	adds	r7, #32
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40020000 	.word	0x40020000

08004eec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b0aa      	sub	sp, #168	; 0xa8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ef4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
 8004efc:	605a      	str	r2, [r3, #4]
 8004efe:	609a      	str	r2, [r3, #8]
 8004f00:	60da      	str	r2, [r3, #12]
 8004f02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004f04:	f107 0310 	add.w	r3, r7, #16
 8004f08:	2284      	movs	r2, #132	; 0x84
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	4618      	mov	r0, r3
 8004f0e:	f005 fa09 	bl	800a324 <memset>
  if(huart->Instance==USART1)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a21      	ldr	r2, [pc, #132]	; (8004f9c <HAL_UART_MspInit+0xb0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d13a      	bne.n	8004f92 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004f1c:	2340      	movs	r3, #64	; 0x40
 8004f1e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004f20:	2300      	movs	r3, #0
 8004f22:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004f24:	f107 0310 	add.w	r3, r7, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f002 fec9 	bl	8007cc0 <HAL_RCCEx_PeriphCLKConfig>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d001      	beq.n	8004f38 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f34:	f7fe ff86 	bl	8003e44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004f38:	4b19      	ldr	r3, [pc, #100]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3c:	4a18      	ldr	r2, [pc, #96]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f3e:	f043 0310 	orr.w	r3, r3, #16
 8004f42:	6453      	str	r3, [r2, #68]	; 0x44
 8004f44:	4b16      	ldr	r3, [pc, #88]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f50:	4b13      	ldr	r3, [pc, #76]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f54:	4a12      	ldr	r2, [pc, #72]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f56:	f043 0302 	orr.w	r3, r3, #2
 8004f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8004f5c:	4b10      	ldr	r3, [pc, #64]	; (8004fa0 <HAL_UART_MspInit+0xb4>)
 8004f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004f68:	23c0      	movs	r3, #192	; 0xc0
 8004f6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004f7a:	2303      	movs	r3, #3
 8004f7c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004f80:	2307      	movs	r3, #7
 8004f82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f86:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004f8a:	4619      	mov	r1, r3
 8004f8c:	4805      	ldr	r0, [pc, #20]	; (8004fa4 <HAL_UART_MspInit+0xb8>)
 8004f8e:	f001 ff6d 	bl	8006e6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004f92:	bf00      	nop
 8004f94:	37a8      	adds	r7, #168	; 0xa8
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	40011000 	.word	0x40011000
 8004fa0:	40023800 	.word	0x40023800
 8004fa4:	40020400 	.word	0x40020400

08004fa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004fac:	e7fe      	b.n	8004fac <NMI_Handler+0x4>

08004fae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004fb2:	e7fe      	b.n	8004fb2 <HardFault_Handler+0x4>

08004fb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004fb8:	e7fe      	b.n	8004fb8 <MemManage_Handler+0x4>

08004fba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004fbe:	e7fe      	b.n	8004fbe <BusFault_Handler+0x4>

08004fc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004fc4:	e7fe      	b.n	8004fc4 <UsageFault_Handler+0x4>

08004fc6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004fca:	bf00      	nop
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr

08004fd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004fd8:	bf00      	nop
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr

08004fe2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004ff4:	f000 faec 	bl	80055d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004ff8:	bf00      	nop
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005000:	4802      	ldr	r0, [pc, #8]	; (800500c <CAN1_RX0_IRQHandler+0x10>)
 8005002:	f001 fbbf 	bl	8006784 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005006:	bf00      	nop
 8005008:	bd80      	pop	{r7, pc}
 800500a:	bf00      	nop
 800500c:	200004b0 	.word	0x200004b0

08005010 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8005014:	2040      	movs	r0, #64	; 0x40
 8005016:	f002 f921 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data5_Pin);
 800501a:	2080      	movs	r0, #128	; 0x80
 800501c:	f002 f91e 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data2_Pin);
 8005020:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005024:	f002 f91a 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8005028:	bf00      	nop
 800502a:	bd80      	pop	{r7, pc}

0800502c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8005030:	4802      	ldr	r0, [pc, #8]	; (800503c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8005032:	f003 fcdd 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005036:	bf00      	nop
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	20000608 	.word	0x20000608

08005040 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data3_Pin);
 8005044:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005048:	f002 f908 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data6_Pin);
 800504c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005050:	f002 f904 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005054:	bf00      	nop
 8005056:	bd80      	pop	{r7, pc}

08005058 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800505c:	4802      	ldr	r0, [pc, #8]	; (8005068 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800505e:	f003 fcc7 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8005062:	bf00      	nop
 8005064:	bd80      	pop	{r7, pc}
 8005066:	bf00      	nop
 8005068:	20000654 	.word	0x20000654

0800506c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005070:	4802      	ldr	r0, [pc, #8]	; (800507c <TIM5_IRQHandler+0x10>)
 8005072:	f003 fcbd 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8005076:	bf00      	nop
 8005078:	bd80      	pop	{r7, pc}
 800507a:	bf00      	nop
 800507c:	20000524 	.word	0x20000524

08005080 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005084:	4802      	ldr	r0, [pc, #8]	; (8005090 <TIM6_DAC_IRQHandler+0x10>)
 8005086:	f003 fcb3 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800508a:	bf00      	nop
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	20000570 	.word	0x20000570

08005094 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005098:	4802      	ldr	r0, [pc, #8]	; (80050a4 <TIM7_IRQHandler+0x10>)
 800509a:	f003 fca9 	bl	80089f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800509e:	bf00      	nop
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	bf00      	nop
 80050a4:	200005bc 	.word	0x200005bc

080050a8 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USS_Data4_Pin);
 80050ac:	2004      	movs	r0, #4
 80050ae:	f002 f8d5 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
}
 80050b2:	bf00      	nop
 80050b4:	bd80      	pop	{r7, pc}

080050b6 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 80050b6:	b580      	push	{r7, lr}
 80050b8:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 80050ba:	2001      	movs	r0, #1
 80050bc:	f002 f8ce 	bl	800725c <HAL_GPIO_EXTI_IRQHandler>
}
 80050c0:	bf00      	nop
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80050c4:	b480      	push	{r7}
 80050c6:	af00      	add	r7, sp, #0
	return 1;
 80050c8:	2301      	movs	r3, #1
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr

080050d4 <_kill>:

int _kill(int pid, int sig)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80050de:	f005 f8f7 	bl	800a2d0 <__errno>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2216      	movs	r2, #22
 80050e6:	601a      	str	r2, [r3, #0]
	return -1;
 80050e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	3708      	adds	r7, #8
 80050f0:	46bd      	mov	sp, r7
 80050f2:	bd80      	pop	{r7, pc}

080050f4 <_exit>:

void _exit (int status)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80050fc:	f04f 31ff 	mov.w	r1, #4294967295
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f7ff ffe7 	bl	80050d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005106:	e7fe      	b.n	8005106 <_exit+0x12>

08005108 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b086      	sub	sp, #24
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005114:	2300      	movs	r3, #0
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e00a      	b.n	8005130 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800511a:	f3af 8000 	nop.w
 800511e:	4601      	mov	r1, r0
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	1c5a      	adds	r2, r3, #1
 8005124:	60ba      	str	r2, [r7, #8]
 8005126:	b2ca      	uxtb	r2, r1
 8005128:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800512a:	697b      	ldr	r3, [r7, #20]
 800512c:	3301      	adds	r3, #1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	429a      	cmp	r2, r3
 8005136:	dbf0      	blt.n	800511a <_read+0x12>
	}

return len;
 8005138:	687b      	ldr	r3, [r7, #4]
}
 800513a:	4618      	mov	r0, r3
 800513c:	3718      	adds	r7, #24
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}

08005142 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005142:	b480      	push	{r7}
 8005144:	b083      	sub	sp, #12
 8005146:	af00      	add	r7, sp, #0
 8005148:	6078      	str	r0, [r7, #4]
	return -1;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
 8005162:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800516a:	605a      	str	r2, [r3, #4]
	return 0;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <_isatty>:

int _isatty(int file)
{
 800517a:	b480      	push	{r7}
 800517c:	b083      	sub	sp, #12
 800517e:	af00      	add	r7, sp, #0
 8005180:	6078      	str	r0, [r7, #4]
	return 1;
 8005182:	2301      	movs	r3, #1
}
 8005184:	4618      	mov	r0, r3
 8005186:	370c      	adds	r7, #12
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005190:	b480      	push	{r7}
 8005192:	b085      	sub	sp, #20
 8005194:	af00      	add	r7, sp, #0
 8005196:	60f8      	str	r0, [r7, #12]
 8005198:	60b9      	str	r1, [r7, #8]
 800519a:	607a      	str	r2, [r7, #4]
	return 0;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b086      	sub	sp, #24
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80051b4:	4a14      	ldr	r2, [pc, #80]	; (8005208 <_sbrk+0x5c>)
 80051b6:	4b15      	ldr	r3, [pc, #84]	; (800520c <_sbrk+0x60>)
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80051c0:	4b13      	ldr	r3, [pc, #76]	; (8005210 <_sbrk+0x64>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d102      	bne.n	80051ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051c8:	4b11      	ldr	r3, [pc, #68]	; (8005210 <_sbrk+0x64>)
 80051ca:	4a12      	ldr	r2, [pc, #72]	; (8005214 <_sbrk+0x68>)
 80051cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051ce:	4b10      	ldr	r3, [pc, #64]	; (8005210 <_sbrk+0x64>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	429a      	cmp	r2, r3
 80051da:	d207      	bcs.n	80051ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051dc:	f005 f878 	bl	800a2d0 <__errno>
 80051e0:	4603      	mov	r3, r0
 80051e2:	220c      	movs	r2, #12
 80051e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051e6:	f04f 33ff 	mov.w	r3, #4294967295
 80051ea:	e009      	b.n	8005200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051ec:	4b08      	ldr	r3, [pc, #32]	; (8005210 <_sbrk+0x64>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051f2:	4b07      	ldr	r3, [pc, #28]	; (8005210 <_sbrk+0x64>)
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	4413      	add	r3, r2
 80051fa:	4a05      	ldr	r2, [pc, #20]	; (8005210 <_sbrk+0x64>)
 80051fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051fe:	68fb      	ldr	r3, [r7, #12]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20050000 	.word	0x20050000
 800520c:	00000400 	.word	0x00000400
 8005210:	20000724 	.word	0x20000724
 8005214:	20000770 	.word	0x20000770

08005218 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005218:	b480      	push	{r7}
 800521a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800521c:	4b06      	ldr	r3, [pc, #24]	; (8005238 <SystemInit+0x20>)
 800521e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005222:	4a05      	ldr	r2, [pc, #20]	; (8005238 <SystemInit+0x20>)
 8005224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800522c:	bf00      	nop
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr
 8005236:	bf00      	nop
 8005238:	e000ed00 	.word	0xe000ed00

0800523c <USSn_Trigger>:
extern uint32_t pre_usTick;



void USSn_Trigger(int USSn)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
	//printf("flag11121\n");
	//printf("HAL_TIM_Base_Start_IT (&htim5)\n");
	//tmp=HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz

	//printf("flag11122: %u\n", tmp);
	USS_start[USSn-1] = us_Tick;//start uss trigger
 8005248:	4b48      	ldr	r3, [pc, #288]	; (800536c <USSn_Trigger+0x130>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3b01      	subs	r3, #1
 8005250:	4611      	mov	r1, r2
 8005252:	4a47      	ldr	r2, [pc, #284]	; (8005370 <USSn_Trigger+0x134>)
 8005254:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	switch(USSn){
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	3b01      	subs	r3, #1
 800525c:	2b05      	cmp	r3, #5
 800525e:	d836      	bhi.n	80052ce <USSn_Trigger+0x92>
 8005260:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <USSn_Trigger+0x2c>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005281 	.word	0x08005281
 800526c:	0800528d 	.word	0x0800528d
 8005270:	0800529b 	.word	0x0800529b
 8005274:	080052a9 	.word	0x080052a9
 8005278:	080052b7 	.word	0x080052b7
 800527c:	080052c3 	.word	0x080052c3
		case 1:
			USS1_Trigger_Set;
 8005280:	2201      	movs	r2, #1
 8005282:	2120      	movs	r1, #32
 8005284:	483b      	ldr	r0, [pc, #236]	; (8005374 <USSn_Trigger+0x138>)
 8005286:	f001 ffb5 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 800528a:	e020      	b.n	80052ce <USSn_Trigger+0x92>

		case 2:
			USS2_Trigger_Set;
 800528c:	2201      	movs	r2, #1
 800528e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005292:	4838      	ldr	r0, [pc, #224]	; (8005374 <USSn_Trigger+0x138>)
 8005294:	f001 ffae 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 8005298:	e019      	b.n	80052ce <USSn_Trigger+0x92>

		case 3:
			USS3_Trigger_Set;
 800529a:	2201      	movs	r2, #1
 800529c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80052a0:	4835      	ldr	r0, [pc, #212]	; (8005378 <USSn_Trigger+0x13c>)
 80052a2:	f001 ffa7 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 80052a6:	e012      	b.n	80052ce <USSn_Trigger+0x92>

		case 4:
			USS4_Trigger_Set;
 80052a8:	2201      	movs	r2, #1
 80052aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80052ae:	4832      	ldr	r0, [pc, #200]	; (8005378 <USSn_Trigger+0x13c>)
 80052b0:	f001 ffa0 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 80052b4:	e00b      	b.n	80052ce <USSn_Trigger+0x92>

		case 5:
			USS5_Trigger_Set;
 80052b6:	2201      	movs	r2, #1
 80052b8:	2140      	movs	r1, #64	; 0x40
 80052ba:	482f      	ldr	r0, [pc, #188]	; (8005378 <USSn_Trigger+0x13c>)
 80052bc:	f001 ff9a 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 80052c0:	e005      	b.n	80052ce <USSn_Trigger+0x92>

		case 6:
			USS6_Trigger_Set;
 80052c2:	2201      	movs	r2, #1
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	482d      	ldr	r0, [pc, #180]	; (800537c <USSn_Trigger+0x140>)
 80052c8:	f001 ff94 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 80052cc:	bf00      	nop
	}



	//printf("USS_start%d: %d\n",USSn-1 ,USS_start[USSn-1]);
	pre_usTick = us_Tick;
 80052ce:	4b27      	ldr	r3, [pc, #156]	; (800536c <USSn_Trigger+0x130>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a2b      	ldr	r2, [pc, #172]	; (8005380 <USSn_Trigger+0x144>)
 80052d4:	6013      	str	r3, [r2, #0]
	//printf("flag11123\n");
	for(int i=0;i<1500;i++){;}//wait about 200us
 80052d6:	2300      	movs	r3, #0
 80052d8:	60fb      	str	r3, [r7, #12]
 80052da:	e002      	b.n	80052e2 <USSn_Trigger+0xa6>
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	3301      	adds	r3, #1
 80052e0:	60fb      	str	r3, [r7, #12]
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f240 52db 	movw	r2, #1499	; 0x5db
 80052e8:	4293      	cmp	r3, r2
 80052ea:	ddf7      	ble.n	80052dc <USSn_Trigger+0xa0>
	//printf("flag11124\n");
	switch(USSn){
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	3b01      	subs	r3, #1
 80052f0:	2b05      	cmp	r3, #5
 80052f2:	d836      	bhi.n	8005362 <USSn_Trigger+0x126>
 80052f4:	a201      	add	r2, pc, #4	; (adr r2, 80052fc <USSn_Trigger+0xc0>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	08005315 	.word	0x08005315
 8005300:	08005321 	.word	0x08005321
 8005304:	0800532f 	.word	0x0800532f
 8005308:	0800533d 	.word	0x0800533d
 800530c:	0800534b 	.word	0x0800534b
 8005310:	08005357 	.word	0x08005357
		case 1:
			USS1_Trigger_ReSet;
 8005314:	2200      	movs	r2, #0
 8005316:	2120      	movs	r1, #32
 8005318:	4816      	ldr	r0, [pc, #88]	; (8005374 <USSn_Trigger+0x138>)
 800531a:	f001 ff6b 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 800531e:	e020      	b.n	8005362 <USSn_Trigger+0x126>

		case 2:
			USS2_Trigger_ReSet;
 8005320:	2200      	movs	r2, #0
 8005322:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005326:	4813      	ldr	r0, [pc, #76]	; (8005374 <USSn_Trigger+0x138>)
 8005328:	f001 ff64 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 800532c:	e019      	b.n	8005362 <USSn_Trigger+0x126>

		case 3:
			USS3_Trigger_ReSet;
 800532e:	2200      	movs	r2, #0
 8005330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005334:	4810      	ldr	r0, [pc, #64]	; (8005378 <USSn_Trigger+0x13c>)
 8005336:	f001 ff5d 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 800533a:	e012      	b.n	8005362 <USSn_Trigger+0x126>

		case 4:
			USS4_Trigger_ReSet;
 800533c:	2200      	movs	r2, #0
 800533e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005342:	480d      	ldr	r0, [pc, #52]	; (8005378 <USSn_Trigger+0x13c>)
 8005344:	f001 ff56 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 8005348:	e00b      	b.n	8005362 <USSn_Trigger+0x126>

		case 5:
			USS5_Trigger_ReSet;
 800534a:	2200      	movs	r2, #0
 800534c:	2140      	movs	r1, #64	; 0x40
 800534e:	480a      	ldr	r0, [pc, #40]	; (8005378 <USSn_Trigger+0x13c>)
 8005350:	f001 ff50 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 8005354:	e005      	b.n	8005362 <USSn_Trigger+0x126>

		case 6:
			USS6_Trigger_ReSet;
 8005356:	2200      	movs	r2, #0
 8005358:	2180      	movs	r1, #128	; 0x80
 800535a:	4808      	ldr	r0, [pc, #32]	; (800537c <USSn_Trigger+0x140>)
 800535c:	f001 ff4a 	bl	80071f4 <HAL_GPIO_WritePin>
			break;
 8005360:	bf00      	nop

	}
	//printf("flag11125\n");
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
 800536a:	bf00      	nop
 800536c:	200002c4 	.word	0x200002c4
 8005370:	20000728 	.word	0x20000728
 8005374:	40020c00 	.word	0x40020c00
 8005378:	40020800 	.word	0x40020800
 800537c:	40021400 	.word	0x40021400
 8005380:	200002cc 	.word	0x200002cc
 8005384:	00000000 	.word	0x00000000

08005388 <USSn_DataRead>:

uint8_t USSn_DataRead(int USSn)
{
 8005388:	b5b0      	push	{r4, r5, r7, lr}
 800538a:	b086      	sub	sp, #24
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
	int32_t USS_tmp = 0;
 8005390:	2300      	movs	r3, #0
 8005392:	617b      	str	r3, [r7, #20]
	double USS_calc = 0;
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	f04f 0300 	mov.w	r3, #0
 800539c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("flag1111\n");
	USSn_Trigger(USSn);
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f7ff ff4b 	bl	800523c <USSn_Trigger>
	HAL_Delay(30);
 80053a6:	201e      	movs	r0, #30
 80053a8:	f000 f932 	bl	8005610 <HAL_Delay>
	USS_tmp = USS_end[USSn-1]-USS_start[USSn-1];
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	3b01      	subs	r3, #1
 80053b0:	4a51      	ldr	r2, [pc, #324]	; (80054f8 <USSn_DataRead+0x170>)
 80053b2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	3b01      	subs	r3, #1
 80053ba:	4950      	ldr	r1, [pc, #320]	; (80054fc <USSn_DataRead+0x174>)
 80053bc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	617b      	str	r3, [r7, #20]




	//printf("x3[0]: %d \n", USS_calc[0]);
	USS_calc += (0.01*(double)USS_tmp)*(1*(double)USS_tmp);//x^2, (0.108*10^-3)*x^2
 80053c4:	6978      	ldr	r0, [r7, #20]
 80053c6:	f7fb f8cd 	bl	8000564 <__aeabi_i2d>
 80053ca:	a341      	add	r3, pc, #260	; (adr r3, 80054d0 <USSn_DataRead+0x148>)
 80053cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d0:	f7fb f932 	bl	8000638 <__aeabi_dmul>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4614      	mov	r4, r2
 80053da:	461d      	mov	r5, r3
 80053dc:	6978      	ldr	r0, [r7, #20]
 80053de:	f7fb f8c1 	bl	8000564 <__aeabi_i2d>
 80053e2:	4602      	mov	r2, r0
 80053e4:	460b      	mov	r3, r1
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fb f925 	bl	8000638 <__aeabi_dmul>
 80053ee:	4602      	mov	r2, r0
 80053f0:	460b      	mov	r3, r1
 80053f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80053f6:	f7fa ff69 	bl	80002cc <__adddf3>
 80053fa:	4602      	mov	r2, r0
 80053fc:	460b      	mov	r3, r1
 80053fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("1: %f \n", USS_calc);
	USS_calc += (0.182*(double)USS_tmp);//x^1, (0.933)*x^1
 8005402:	6978      	ldr	r0, [r7, #20]
 8005404:	f7fb f8ae 	bl	8000564 <__aeabi_i2d>
 8005408:	a333      	add	r3, pc, #204	; (adr r3, 80054d8 <USSn_DataRead+0x150>)
 800540a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540e:	f7fb f913 	bl	8000638 <__aeabi_dmul>
 8005412:	4602      	mov	r2, r0
 8005414:	460b      	mov	r3, r1
 8005416:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800541a:	f7fa ff57 	bl	80002cc <__adddf3>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("2: %f \n", USS_calc);
	USS_calc += 0.53;//x^0, constant
 8005426:	a32e      	add	r3, pc, #184	; (adr r3, 80054e0 <USSn_DataRead+0x158>)
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005430:	f7fa ff4c 	bl	80002cc <__adddf3>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("3: %f \n", USS_calc);
	USS_calc -= (0.042*(double)USS_tmp)*(1*(double)USS_tmp)*(0.001*(double)USS_tmp);//x^3, (0.0361*10^-6)*x^3
 800543c:	6978      	ldr	r0, [r7, #20]
 800543e:	f7fb f891 	bl	8000564 <__aeabi_i2d>
 8005442:	a329      	add	r3, pc, #164	; (adr r3, 80054e8 <USSn_DataRead+0x160>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fb f8f6 	bl	8000638 <__aeabi_dmul>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	6978      	ldr	r0, [r7, #20]
 8005456:	f7fb f885 	bl	8000564 <__aeabi_i2d>
 800545a:	4602      	mov	r2, r0
 800545c:	460b      	mov	r3, r1
 800545e:	4620      	mov	r0, r4
 8005460:	4629      	mov	r1, r5
 8005462:	f7fb f8e9 	bl	8000638 <__aeabi_dmul>
 8005466:	4602      	mov	r2, r0
 8005468:	460b      	mov	r3, r1
 800546a:	4614      	mov	r4, r2
 800546c:	461d      	mov	r5, r3
 800546e:	6978      	ldr	r0, [r7, #20]
 8005470:	f7fb f878 	bl	8000564 <__aeabi_i2d>
 8005474:	a31e      	add	r3, pc, #120	; (adr r3, 80054f0 <USSn_DataRead+0x168>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fb f8dd 	bl	8000638 <__aeabi_dmul>
 800547e:	4602      	mov	r2, r0
 8005480:	460b      	mov	r3, r1
 8005482:	4620      	mov	r0, r4
 8005484:	4629      	mov	r1, r5
 8005486:	f7fb f8d7 	bl	8000638 <__aeabi_dmul>
 800548a:	4602      	mov	r2, r0
 800548c:	460b      	mov	r3, r1
 800548e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005492:	f7fa ff19 	bl	80002c8 <__aeabi_dsub>
 8005496:	4602      	mov	r2, r0
 8005498:	460b      	mov	r3, r1
 800549a:	e9c7 2302 	strd	r2, r3, [r7, #8]
	//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start[0], USS_end[0], (USS_end[0]-USS_start[0]));
	//printf("flag1112\n");
	//USSn_Trigger(USSn);
	//printf("flag1113\n");
	//printf("\nUSS_tmp:%d USS_calc:%d USSn:%d\n", USS_tmp, USS_calc, USSn);
	if(USS_calc>250) {return 0;}
 800549e:	f04f 0200 	mov.w	r2, #0
 80054a2:	4b17      	ldr	r3, [pc, #92]	; (8005500 <USSn_DataRead+0x178>)
 80054a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054a8:	f7fb fb56 	bl	8000b58 <__aeabi_dcmpgt>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d001      	beq.n	80054b6 <USSn_DataRead+0x12e>
 80054b2:	2300      	movs	r3, #0
 80054b4:	e005      	b.n	80054c2 <USSn_DataRead+0x13a>

	return (uint8_t)USS_calc;
 80054b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054ba:	f7fb fb95 	bl	8000be8 <__aeabi_d2uiz>
 80054be:	4603      	mov	r3, r0
 80054c0:	b2db      	uxtb	r3, r3
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3718      	adds	r7, #24
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bdb0      	pop	{r4, r5, r7, pc}
 80054ca:	bf00      	nop
 80054cc:	f3af 8000 	nop.w
 80054d0:	47ae147b 	.word	0x47ae147b
 80054d4:	3f847ae1 	.word	0x3f847ae1
 80054d8:	a7ef9db2 	.word	0xa7ef9db2
 80054dc:	3fc74bc6 	.word	0x3fc74bc6
 80054e0:	8f5c28f6 	.word	0x8f5c28f6
 80054e4:	3fe0f5c2 	.word	0x3fe0f5c2
 80054e8:	24dd2f1b 	.word	0x24dd2f1b
 80054ec:	3fa58106 	.word	0x3fa58106
 80054f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80054f4:	3f50624d 	.word	0x3f50624d
 80054f8:	20000740 	.word	0x20000740
 80054fc:	20000728 	.word	0x20000728
 8005500:	406f4000 	.word	0x406f4000

08005504 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005504:	f8df d034 	ldr.w	sp, [pc, #52]	; 800553c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005508:	480d      	ldr	r0, [pc, #52]	; (8005540 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800550a:	490e      	ldr	r1, [pc, #56]	; (8005544 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800550c:	4a0e      	ldr	r2, [pc, #56]	; (8005548 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800550e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005510:	e002      	b.n	8005518 <LoopCopyDataInit>

08005512 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005512:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005514:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005516:	3304      	adds	r3, #4

08005518 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005518:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800551a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800551c:	d3f9      	bcc.n	8005512 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800551e:	4a0b      	ldr	r2, [pc, #44]	; (800554c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005520:	4c0b      	ldr	r4, [pc, #44]	; (8005550 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005522:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005524:	e001      	b.n	800552a <LoopFillZerobss>

08005526 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005526:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005528:	3204      	adds	r2, #4

0800552a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800552a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800552c:	d3fb      	bcc.n	8005526 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800552e:	f7ff fe73 	bl	8005218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005532:	f004 fed3 	bl	800a2dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005536:	f7fe f859 	bl	80035ec <main>
  bx  lr    
 800553a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800553c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005540:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005544:	20000244 	.word	0x20000244
  ldr r2, =_sidata
 8005548:	0800d3c4 	.word	0x0800d3c4
  ldr r2, =_sbss
 800554c:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 8005550:	2000076c 	.word	0x2000076c

08005554 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005554:	e7fe      	b.n	8005554 <ADC_IRQHandler>

08005556 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005556:	b580      	push	{r7, lr}
 8005558:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800555a:	2003      	movs	r0, #3
 800555c:	f001 fc36 	bl	8006dcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005560:	200f      	movs	r0, #15
 8005562:	f000 f805 	bl	8005570 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005566:	f7ff fb33 	bl	8004bd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	bd80      	pop	{r7, pc}

08005570 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b082      	sub	sp, #8
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005578:	4b12      	ldr	r3, [pc, #72]	; (80055c4 <HAL_InitTick+0x54>)
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	4b12      	ldr	r3, [pc, #72]	; (80055c8 <HAL_InitTick+0x58>)
 800557e:	781b      	ldrb	r3, [r3, #0]
 8005580:	4619      	mov	r1, r3
 8005582:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005586:	fbb3 f3f1 	udiv	r3, r3, r1
 800558a:	fbb2 f3f3 	udiv	r3, r2, r3
 800558e:	4618      	mov	r0, r3
 8005590:	f001 fc5f 	bl	8006e52 <HAL_SYSTICK_Config>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e00e      	b.n	80055bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2b0f      	cmp	r3, #15
 80055a2:	d80a      	bhi.n	80055ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80055a4:	2200      	movs	r2, #0
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	f04f 30ff 	mov.w	r0, #4294967295
 80055ac:	f001 fc19 	bl	8006de2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80055b0:	4a06      	ldr	r2, [pc, #24]	; (80055cc <HAL_InitTick+0x5c>)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80055ba:	2301      	movs	r3, #1
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000068 	.word	0x20000068
 80055c8:	20000070 	.word	0x20000070
 80055cc:	2000006c 	.word	0x2000006c

080055d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80055d0:	b480      	push	{r7}
 80055d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_IncTick+0x20>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <HAL_IncTick+0x24>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4413      	add	r3, r2
 80055e0:	4a04      	ldr	r2, [pc, #16]	; (80055f4 <HAL_IncTick+0x24>)
 80055e2:	6013      	str	r3, [r2, #0]
}
 80055e4:	bf00      	nop
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	20000070 	.word	0x20000070
 80055f4:	20000758 	.word	0x20000758

080055f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  return uwTick;
 80055fc:	4b03      	ldr	r3, [pc, #12]	; (800560c <HAL_GetTick+0x14>)
 80055fe:	681b      	ldr	r3, [r3, #0]
}
 8005600:	4618      	mov	r0, r3
 8005602:	46bd      	mov	sp, r7
 8005604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005608:	4770      	bx	lr
 800560a:	bf00      	nop
 800560c:	20000758 	.word	0x20000758

08005610 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b084      	sub	sp, #16
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005618:	f7ff ffee 	bl	80055f8 <HAL_GetTick>
 800561c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005628:	d005      	beq.n	8005636 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800562a:	4b0a      	ldr	r3, [pc, #40]	; (8005654 <HAL_Delay+0x44>)
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	461a      	mov	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	4413      	add	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005636:	bf00      	nop
 8005638:	f7ff ffde 	bl	80055f8 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	68fa      	ldr	r2, [r7, #12]
 8005644:	429a      	cmp	r2, r3
 8005646:	d8f7      	bhi.n	8005638 <HAL_Delay+0x28>
  {
  }
}
 8005648:	bf00      	nop
 800564a:	bf00      	nop
 800564c:	3710      	adds	r7, #16
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000070 	.word	0x20000070

08005658 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005660:	2300      	movs	r3, #0
 8005662:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e031      	b.n	80056d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f7ff face 	bl	8004c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d116      	bne.n	80056c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800569a:	4b10      	ldr	r3, [pc, #64]	; (80056dc <HAL_ADC_Init+0x84>)
 800569c:	4013      	ands	r3, r2
 800569e:	f043 0202 	orr.w	r2, r3, #2
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fb0a 	bl	8005cc0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b6:	f023 0303 	bic.w	r3, r3, #3
 80056ba:	f043 0201 	orr.w	r2, r3, #1
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	641a      	str	r2, [r3, #64]	; 0x40
 80056c2:	e001      	b.n	80056c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3710      	adds	r7, #16
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	ffffeefd 	.word	0xffffeefd

080056e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b085      	sub	sp, #20
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80056e8:	2300      	movs	r3, #0
 80056ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d101      	bne.n	80056fa <HAL_ADC_Start+0x1a>
 80056f6:	2302      	movs	r3, #2
 80056f8:	e0ad      	b.n	8005856 <HAL_ADC_Start+0x176>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f003 0301 	and.w	r3, r3, #1
 800570c:	2b01      	cmp	r3, #1
 800570e:	d018      	beq.n	8005742 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	689a      	ldr	r2, [r3, #8]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005720:	4b50      	ldr	r3, [pc, #320]	; (8005864 <HAL_ADC_Start+0x184>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a50      	ldr	r2, [pc, #320]	; (8005868 <HAL_ADC_Start+0x188>)
 8005726:	fba2 2303 	umull	r2, r3, r2, r3
 800572a:	0c9a      	lsrs	r2, r3, #18
 800572c:	4613      	mov	r3, r2
 800572e:	005b      	lsls	r3, r3, #1
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005734:	e002      	b.n	800573c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3b01      	subs	r3, #1
 800573a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1f9      	bne.n	8005736 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	2b01      	cmp	r3, #1
 800574e:	d175      	bne.n	800583c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005754:	4b45      	ldr	r3, [pc, #276]	; (800586c <HAL_ADC_Start+0x18c>)
 8005756:	4013      	ands	r3, r2
 8005758:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005772:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005776:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800578a:	d106      	bne.n	800579a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005790:	f023 0206 	bic.w	r2, r3, #6
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	645a      	str	r2, [r3, #68]	; 0x44
 8005798:	e002      	b.n	80057a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80057b2:	4b2f      	ldr	r3, [pc, #188]	; (8005870 <HAL_ADC_Start+0x190>)
 80057b4:	685b      	ldr	r3, [r3, #4]
 80057b6:	f003 031f 	and.w	r3, r3, #31
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d10f      	bne.n	80057de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d143      	bne.n	8005854 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689a      	ldr	r2, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80057da:	609a      	str	r2, [r3, #8]
 80057dc:	e03a      	b.n	8005854 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a24      	ldr	r2, [pc, #144]	; (8005874 <HAL_ADC_Start+0x194>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d10e      	bne.n	8005806 <HAL_ADC_Start+0x126>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d107      	bne.n	8005806 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005804:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005806:	4b1a      	ldr	r3, [pc, #104]	; (8005870 <HAL_ADC_Start+0x190>)
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	f003 0310 	and.w	r3, r3, #16
 800580e:	2b00      	cmp	r3, #0
 8005810:	d120      	bne.n	8005854 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a18      	ldr	r2, [pc, #96]	; (8005878 <HAL_ADC_Start+0x198>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d11b      	bne.n	8005854 <HAL_ADC_Start+0x174>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d114      	bne.n	8005854 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005838:	609a      	str	r2, [r3, #8]
 800583a:	e00b      	b.n	8005854 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005840:	f043 0210 	orr.w	r2, r3, #16
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800584c:	f043 0201 	orr.w	r2, r3, #1
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3714      	adds	r7, #20
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000068 	.word	0x20000068
 8005868:	431bde83 	.word	0x431bde83
 800586c:	fffff8fe 	.word	0xfffff8fe
 8005870:	40012300 	.word	0x40012300
 8005874:	40012000 	.word	0x40012000
 8005878:	40012200 	.word	0x40012200

0800587c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800587c:	b480      	push	{r7}
 800587e:	b083      	sub	sp, #12
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_ADC_Stop+0x16>
 800588e:	2302      	movs	r3, #2
 8005890:	e01f      	b.n	80058d2 <HAL_ADC_Stop+0x56>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f022 0201 	bic.w	r2, r2, #1
 80058a8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d107      	bne.n	80058c8 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058bc:	4b08      	ldr	r3, [pc, #32]	; (80058e0 <HAL_ADC_Stop+0x64>)
 80058be:	4013      	ands	r3, r2
 80058c0:	f043 0201 	orr.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	ffffeefe 	.word	0xffffeefe

080058e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005900:	d113      	bne.n	800592a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800590c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005910:	d10b      	bne.n	800592a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005916:	f043 0220 	orr.w	r2, r3, #32
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005926:	2301      	movs	r3, #1
 8005928:	e063      	b.n	80059f2 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800592a:	f7ff fe65 	bl	80055f8 <HAL_GetTick>
 800592e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005930:	e021      	b.n	8005976 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005938:	d01d      	beq.n	8005976 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d007      	beq.n	8005950 <HAL_ADC_PollForConversion+0x6c>
 8005940:	f7ff fe5a 	bl	80055f8 <HAL_GetTick>
 8005944:	4602      	mov	r2, r0
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	683a      	ldr	r2, [r7, #0]
 800594c:	429a      	cmp	r2, r3
 800594e:	d212      	bcs.n	8005976 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0302 	and.w	r3, r3, #2
 800595a:	2b02      	cmp	r3, #2
 800595c:	d00b      	beq.n	8005976 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005962:	f043 0204 	orr.w	r2, r3, #4
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e03d      	b.n	80059f2 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0302 	and.w	r3, r3, #2
 8005980:	2b02      	cmp	r3, #2
 8005982:	d1d6      	bne.n	8005932 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f06f 0212 	mvn.w	r2, #18
 800598c:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005992:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d123      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d11f      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d006      	beq.n	80059cc <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d111      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d105      	bne.n	80059f0 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e8:	f043 0201 	orr.w	r2, r3, #1
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3710      	adds	r7, #16
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bd80      	pop	{r7, pc}

080059fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80059fa:	b480      	push	{r7}
 80059fc:	b083      	sub	sp, #12
 80059fe:	af00      	add	r7, sp, #0
 8005a00:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d101      	bne.n	8005a30 <HAL_ADC_ConfigChannel+0x1c>
 8005a2c:	2302      	movs	r3, #2
 8005a2e:	e136      	b.n	8005c9e <HAL_ADC_ConfigChannel+0x28a>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b09      	cmp	r3, #9
 8005a3e:	d93a      	bls.n	8005ab6 <HAL_ADC_ConfigChannel+0xa2>
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a48:	d035      	beq.n	8005ab6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	68d9      	ldr	r1, [r3, #12]
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	4613      	mov	r3, r2
 8005a5a:	005b      	lsls	r3, r3, #1
 8005a5c:	4413      	add	r3, r2
 8005a5e:	3b1e      	subs	r3, #30
 8005a60:	2207      	movs	r2, #7
 8005a62:	fa02 f303 	lsl.w	r3, r2, r3
 8005a66:	43da      	mvns	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	400a      	ands	r2, r1
 8005a6e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a8d      	ldr	r2, [pc, #564]	; (8005cac <HAL_ADC_ConfigChannel+0x298>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d10a      	bne.n	8005a90 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68d9      	ldr	r1, [r3, #12]
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	061a      	lsls	r2, r3, #24
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005a8e:	e035      	b.n	8005afc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68d9      	ldr	r1, [r3, #12]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	689a      	ldr	r2, [r3, #8]
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	005b      	lsls	r3, r3, #1
 8005aa6:	4403      	add	r3, r0
 8005aa8:	3b1e      	subs	r3, #30
 8005aaa:	409a      	lsls	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	430a      	orrs	r2, r1
 8005ab2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ab4:	e022      	b.n	8005afc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	6919      	ldr	r1, [r3, #16]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	4413      	add	r3, r2
 8005aca:	2207      	movs	r2, #7
 8005acc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad0:	43da      	mvns	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	400a      	ands	r2, r1
 8005ad8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6919      	ldr	r1, [r3, #16]
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	689a      	ldr	r2, [r3, #8]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4618      	mov	r0, r3
 8005aec:	4603      	mov	r3, r0
 8005aee:	005b      	lsls	r3, r3, #1
 8005af0:	4403      	add	r3, r0
 8005af2:	409a      	lsls	r2, r3
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	430a      	orrs	r2, r1
 8005afa:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	2b06      	cmp	r3, #6
 8005b02:	d824      	bhi.n	8005b4e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	685a      	ldr	r2, [r3, #4]
 8005b0e:	4613      	mov	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	3b05      	subs	r3, #5
 8005b16:	221f      	movs	r2, #31
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	43da      	mvns	r2, r3
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	400a      	ands	r2, r1
 8005b24:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	b29b      	uxth	r3, r3
 8005b32:	4618      	mov	r0, r3
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	685a      	ldr	r2, [r3, #4]
 8005b38:	4613      	mov	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3b05      	subs	r3, #5
 8005b40:	fa00 f203 	lsl.w	r2, r0, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	635a      	str	r2, [r3, #52]	; 0x34
 8005b4c:	e04c      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	2b0c      	cmp	r3, #12
 8005b54:	d824      	bhi.n	8005ba0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	3b23      	subs	r3, #35	; 0x23
 8005b68:	221f      	movs	r2, #31
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	43da      	mvns	r2, r3
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	400a      	ands	r2, r1
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	4618      	mov	r0, r3
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	4413      	add	r3, r2
 8005b90:	3b23      	subs	r3, #35	; 0x23
 8005b92:	fa00 f203 	lsl.w	r2, r0, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	631a      	str	r2, [r3, #48]	; 0x30
 8005b9e:	e023      	b.n	8005be8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	685a      	ldr	r2, [r3, #4]
 8005baa:	4613      	mov	r3, r2
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	4413      	add	r3, r2
 8005bb0:	3b41      	subs	r3, #65	; 0x41
 8005bb2:	221f      	movs	r2, #31
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	43da      	mvns	r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	400a      	ands	r2, r1
 8005bc0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	4618      	mov	r0, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685a      	ldr	r2, [r3, #4]
 8005bd4:	4613      	mov	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	4413      	add	r3, r2
 8005bda:	3b41      	subs	r3, #65	; 0x41
 8005bdc:	fa00 f203 	lsl.w	r2, r0, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a30      	ldr	r2, [pc, #192]	; (8005cb0 <HAL_ADC_ConfigChannel+0x29c>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d10a      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x1f4>
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bfa:	d105      	bne.n	8005c08 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005bfc:	4b2d      	ldr	r3, [pc, #180]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	4a2c      	ldr	r2, [pc, #176]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c02:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005c06:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a28      	ldr	r2, [pc, #160]	; (8005cb0 <HAL_ADC_ConfigChannel+0x29c>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d10f      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x21e>
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	2b12      	cmp	r3, #18
 8005c18:	d10b      	bne.n	8005c32 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005c1a:	4b26      	ldr	r3, [pc, #152]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	4a25      	ldr	r2, [pc, #148]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c20:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005c24:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005c26:	4b23      	ldr	r3, [pc, #140]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c28:	685b      	ldr	r3, [r3, #4]
 8005c2a:	4a22      	ldr	r2, [pc, #136]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005c30:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <HAL_ADC_ConfigChannel+0x29c>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d12b      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x280>
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1a      	ldr	r2, [pc, #104]	; (8005cac <HAL_ADC_ConfigChannel+0x298>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d003      	beq.n	8005c4e <HAL_ADC_ConfigChannel+0x23a>
 8005c46:	683b      	ldr	r3, [r7, #0]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	2b11      	cmp	r3, #17
 8005c4c:	d122      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005c4e:	4b19      	ldr	r3, [pc, #100]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	4a18      	ldr	r2, [pc, #96]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c54:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005c58:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005c5a:	4b16      	ldr	r3, [pc, #88]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_ADC_ConfigChannel+0x2a0>)
 8005c60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005c64:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c66:	683b      	ldr	r3, [r7, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a10      	ldr	r2, [pc, #64]	; (8005cac <HAL_ADC_ConfigChannel+0x298>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d111      	bne.n	8005c94 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005c70:	4b11      	ldr	r3, [pc, #68]	; (8005cb8 <HAL_ADC_ConfigChannel+0x2a4>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a11      	ldr	r2, [pc, #68]	; (8005cbc <HAL_ADC_ConfigChannel+0x2a8>)
 8005c76:	fba2 2303 	umull	r2, r3, r2, r3
 8005c7a:	0c9a      	lsrs	r2, r3, #18
 8005c7c:	4613      	mov	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	4413      	add	r3, r2
 8005c82:	005b      	lsls	r3, r3, #1
 8005c84:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005c86:	e002      	b.n	8005c8e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d1f9      	bne.n	8005c88 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3714      	adds	r7, #20
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	10000012 	.word	0x10000012
 8005cb0:	40012000 	.word	0x40012000
 8005cb4:	40012300 	.word	0x40012300
 8005cb8:	20000068 	.word	0x20000068
 8005cbc:	431bde83 	.word	0x431bde83

08005cc0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005cc8:	4b78      	ldr	r3, [pc, #480]	; (8005eac <ADC_Init+0x1ec>)
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	4a77      	ldr	r2, [pc, #476]	; (8005eac <ADC_Init+0x1ec>)
 8005cce:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005cd2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005cd4:	4b75      	ldr	r3, [pc, #468]	; (8005eac <ADC_Init+0x1ec>)
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	4973      	ldr	r1, [pc, #460]	; (8005eac <ADC_Init+0x1ec>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	685a      	ldr	r2, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005cf0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6859      	ldr	r1, [r3, #4]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	021a      	lsls	r2, r3, #8
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	430a      	orrs	r2, r1
 8005d04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005d14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6859      	ldr	r1, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689a      	ldr	r2, [r3, #8]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	430a      	orrs	r2, r1
 8005d26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689a      	ldr	r2, [r3, #8]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	68da      	ldr	r2, [r3, #12]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	4a58      	ldr	r2, [pc, #352]	; (8005eb0 <ADC_Init+0x1f0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d022      	beq.n	8005d9a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005d62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	6899      	ldr	r1, [r3, #8]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	430a      	orrs	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	689a      	ldr	r2, [r3, #8]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005d84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	6899      	ldr	r1, [r3, #8]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	e00f      	b.n	8005dba <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005da8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689a      	ldr	r2, [r3, #8]
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005db8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0202 	bic.w	r2, r2, #2
 8005dc8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	6899      	ldr	r1, [r3, #8]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	005a      	lsls	r2, r3, #1
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	430a      	orrs	r2, r1
 8005ddc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d01b      	beq.n	8005e20 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	685a      	ldr	r2, [r3, #4]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	685a      	ldr	r2, [r3, #4]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005e06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6859      	ldr	r1, [r3, #4]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	3b01      	subs	r3, #1
 8005e14:	035a      	lsls	r2, r3, #13
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	605a      	str	r2, [r3, #4]
 8005e1e:	e007      	b.n	8005e30 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005e2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	69db      	ldr	r3, [r3, #28]
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	051a      	lsls	r2, r3, #20
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	430a      	orrs	r2, r1
 8005e54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	689a      	ldr	r2, [r3, #8]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005e64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6899      	ldr	r1, [r3, #8]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005e72:	025a      	lsls	r2, r3, #9
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	430a      	orrs	r2, r1
 8005e7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689a      	ldr	r2, [r3, #8]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	6899      	ldr	r1, [r3, #8]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
 8005e96:	029a      	lsls	r2, r3, #10
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	609a      	str	r2, [r3, #8]
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	40012300 	.word	0x40012300
 8005eb0:	0f000001 	.word	0x0f000001

08005eb4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b084      	sub	sp, #16
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d101      	bne.n	8005ec6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e0ed      	b.n	80060a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f7fe fee0 	bl	8004c98 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f042 0201 	orr.w	r2, r2, #1
 8005ee6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ee8:	f7ff fb86 	bl	80055f8 <HAL_GetTick>
 8005eec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005eee:	e012      	b.n	8005f16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ef0:	f7ff fb82 	bl	80055f8 <HAL_GetTick>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	1ad3      	subs	r3, r2, r3
 8005efa:	2b0a      	cmp	r3, #10
 8005efc:	d90b      	bls.n	8005f16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2205      	movs	r2, #5
 8005f0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e0c5      	b.n	80060a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0e5      	beq.n	8005ef0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f022 0202 	bic.w	r2, r2, #2
 8005f32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005f34:	f7ff fb60 	bl	80055f8 <HAL_GetTick>
 8005f38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f3a:	e012      	b.n	8005f62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005f3c:	f7ff fb5c 	bl	80055f8 <HAL_GetTick>
 8005f40:	4602      	mov	r2, r0
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1ad3      	subs	r3, r2, r3
 8005f46:	2b0a      	cmp	r3, #10
 8005f48:	d90b      	bls.n	8005f62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2205      	movs	r2, #5
 8005f5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e09f      	b.n	80060a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	685b      	ldr	r3, [r3, #4]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1e5      	bne.n	8005f3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	7e1b      	ldrb	r3, [r3, #24]
 8005f74:	2b01      	cmp	r3, #1
 8005f76:	d108      	bne.n	8005f8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681a      	ldr	r2, [r3, #0]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005f86:	601a      	str	r2, [r3, #0]
 8005f88:	e007      	b.n	8005f9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	681a      	ldr	r2, [r3, #0]
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	7e5b      	ldrb	r3, [r3, #25]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d108      	bne.n	8005fb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	e007      	b.n	8005fc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	7e9b      	ldrb	r3, [r3, #26]
 8005fc8:	2b01      	cmp	r3, #1
 8005fca:	d108      	bne.n	8005fde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f042 0220 	orr.w	r2, r2, #32
 8005fda:	601a      	str	r2, [r3, #0]
 8005fdc:	e007      	b.n	8005fee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0220 	bic.w	r2, r2, #32
 8005fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	7edb      	ldrb	r3, [r3, #27]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d108      	bne.n	8006008 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 0210 	bic.w	r2, r2, #16
 8006004:	601a      	str	r2, [r3, #0]
 8006006:	e007      	b.n	8006018 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	681a      	ldr	r2, [r3, #0]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f042 0210 	orr.w	r2, r2, #16
 8006016:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	7f1b      	ldrb	r3, [r3, #28]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d108      	bne.n	8006032 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f042 0208 	orr.w	r2, r2, #8
 800602e:	601a      	str	r2, [r3, #0]
 8006030:	e007      	b.n	8006042 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681a      	ldr	r2, [r3, #0]
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	f022 0208 	bic.w	r2, r2, #8
 8006040:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	7f5b      	ldrb	r3, [r3, #29]
 8006046:	2b01      	cmp	r3, #1
 8006048:	d108      	bne.n	800605c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f042 0204 	orr.w	r2, r2, #4
 8006058:	601a      	str	r2, [r3, #0]
 800605a:	e007      	b.n	800606c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f022 0204 	bic.w	r2, r2, #4
 800606a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68db      	ldr	r3, [r3, #12]
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	691b      	ldr	r3, [r3, #16]
 800607a:	431a      	orrs	r2, r3
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	ea42 0103 	orr.w	r1, r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	1e5a      	subs	r2, r3, #1
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	430a      	orrs	r2, r1
 8006090:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3710      	adds	r7, #16
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060c2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80060c4:	7cfb      	ldrb	r3, [r7, #19]
 80060c6:	2b01      	cmp	r3, #1
 80060c8:	d003      	beq.n	80060d2 <HAL_CAN_ConfigFilter+0x26>
 80060ca:	7cfb      	ldrb	r3, [r7, #19]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	f040 80be 	bne.w	800624e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80060d2:	4b65      	ldr	r3, [pc, #404]	; (8006268 <HAL_CAN_ConfigFilter+0x1bc>)
 80060d4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060dc:	f043 0201 	orr.w	r2, r3, #1
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80060ec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	021b      	lsls	r3, r3, #8
 8006102:	431a      	orrs	r2, r3
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	f003 031f 	and.w	r3, r3, #31
 8006112:	2201      	movs	r2, #1
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43db      	mvns	r3, r3
 8006124:	401a      	ands	r2, r3
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800612c:	683b      	ldr	r3, [r7, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d123      	bne.n	800617c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006156:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	3248      	adds	r2, #72	; 0x48
 800615c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006170:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006172:	6979      	ldr	r1, [r7, #20]
 8006174:	3348      	adds	r3, #72	; 0x48
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	440b      	add	r3, r1
 800617a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	69db      	ldr	r3, [r3, #28]
 8006180:	2b01      	cmp	r3, #1
 8006182:	d122      	bne.n	80061ca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	431a      	orrs	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80061a4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	3248      	adds	r2, #72	; 0x48
 80061aa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	68db      	ldr	r3, [r3, #12]
 80061b8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80061be:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80061c0:	6979      	ldr	r1, [r7, #20]
 80061c2:	3348      	adds	r3, #72	; 0x48
 80061c4:	00db      	lsls	r3, r3, #3
 80061c6:	440b      	add	r3, r1
 80061c8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d109      	bne.n	80061e6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	43db      	mvns	r3, r3
 80061dc:	401a      	ands	r2, r3
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80061e4:	e007      	b.n	80061f6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	431a      	orrs	r2, r3
 80061f0:	697b      	ldr	r3, [r7, #20]
 80061f2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d109      	bne.n	8006212 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006210:	e007      	b.n	8006222 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	431a      	orrs	r2, r3
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	2b01      	cmp	r3, #1
 8006228:	d107      	bne.n	800623a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	431a      	orrs	r2, r3
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006240:	f023 0201 	bic.w	r2, r3, #1
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	e006      	b.n	800625c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800625a:	2301      	movs	r3, #1
  }
}
 800625c:	4618      	mov	r0, r3
 800625e:	371c      	adds	r7, #28
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40006400 	.word	0x40006400

0800626c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d12e      	bne.n	80062de <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f022 0201 	bic.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006298:	f7ff f9ae 	bl	80055f8 <HAL_GetTick>
 800629c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800629e:	e012      	b.n	80062c6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80062a0:	f7ff f9aa 	bl	80055f8 <HAL_GetTick>
 80062a4:	4602      	mov	r2, r0
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	2b0a      	cmp	r3, #10
 80062ac:	d90b      	bls.n	80062c6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2205      	movs	r2, #5
 80062be:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e012      	b.n	80062ec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	685b      	ldr	r3, [r3, #4]
 80062cc:	f003 0301 	and.w	r3, r3, #1
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1e5      	bne.n	80062a0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	2200      	movs	r2, #0
 80062d8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	e006      	b.n	80062ec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062e2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
  }
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b089      	sub	sp, #36	; 0x24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	60f8      	str	r0, [r7, #12]
 80062fc:	60b9      	str	r1, [r7, #8]
 80062fe:	607a      	str	r2, [r7, #4]
 8006300:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006308:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006312:	7ffb      	ldrb	r3, [r7, #31]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d003      	beq.n	8006320 <HAL_CAN_AddTxMessage+0x2c>
 8006318:	7ffb      	ldrb	r3, [r7, #31]
 800631a:	2b02      	cmp	r3, #2
 800631c:	f040 80b8 	bne.w	8006490 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006326:	2b00      	cmp	r3, #0
 8006328:	d10a      	bne.n	8006340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800632a:	69bb      	ldr	r3, [r7, #24]
 800632c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006334:	69bb      	ldr	r3, [r7, #24]
 8006336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 80a0 	beq.w	8006480 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006340:	69bb      	ldr	r3, [r7, #24]
 8006342:	0e1b      	lsrs	r3, r3, #24
 8006344:	f003 0303 	and.w	r3, r3, #3
 8006348:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d907      	bls.n	8006360 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e09e      	b.n	800649e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006360:	2201      	movs	r2, #1
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	409a      	lsls	r2, r3
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d10d      	bne.n	800638e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800637c:	68f9      	ldr	r1, [r7, #12]
 800637e:	6809      	ldr	r1, [r1, #0]
 8006380:	431a      	orrs	r2, r3
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	3318      	adds	r3, #24
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	440b      	add	r3, r1
 800638a:	601a      	str	r2, [r3, #0]
 800638c:	e00f      	b.n	80063ae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006398:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800639e:	68f9      	ldr	r1, [r7, #12]
 80063a0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80063a2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	3318      	adds	r3, #24
 80063a8:	011b      	lsls	r3, r3, #4
 80063aa:	440b      	add	r3, r1
 80063ac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6819      	ldr	r1, [r3, #0]
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	691a      	ldr	r2, [r3, #16]
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	3318      	adds	r3, #24
 80063ba:	011b      	lsls	r3, r3, #4
 80063bc:	440b      	add	r3, r1
 80063be:	3304      	adds	r3, #4
 80063c0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	7d1b      	ldrb	r3, [r3, #20]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d111      	bne.n	80063ee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	3318      	adds	r3, #24
 80063d2:	011b      	lsls	r3, r3, #4
 80063d4:	4413      	add	r3, r2
 80063d6:	3304      	adds	r3, #4
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	6811      	ldr	r1, [r2, #0]
 80063de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80063e2:	697b      	ldr	r3, [r7, #20]
 80063e4:	3318      	adds	r3, #24
 80063e6:	011b      	lsls	r3, r3, #4
 80063e8:	440b      	add	r3, r1
 80063ea:	3304      	adds	r3, #4
 80063ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	3307      	adds	r3, #7
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	061a      	lsls	r2, r3, #24
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	3306      	adds	r3, #6
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	041b      	lsls	r3, r3, #16
 80063fe:	431a      	orrs	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	3305      	adds	r3, #5
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	021b      	lsls	r3, r3, #8
 8006408:	4313      	orrs	r3, r2
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	3204      	adds	r2, #4
 800640e:	7812      	ldrb	r2, [r2, #0]
 8006410:	4610      	mov	r0, r2
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	6811      	ldr	r1, [r2, #0]
 8006416:	ea43 0200 	orr.w	r2, r3, r0
 800641a:	697b      	ldr	r3, [r7, #20]
 800641c:	011b      	lsls	r3, r3, #4
 800641e:	440b      	add	r3, r1
 8006420:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006424:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	3303      	adds	r3, #3
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	061a      	lsls	r2, r3, #24
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3302      	adds	r3, #2
 8006432:	781b      	ldrb	r3, [r3, #0]
 8006434:	041b      	lsls	r3, r3, #16
 8006436:	431a      	orrs	r2, r3
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	3301      	adds	r3, #1
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	021b      	lsls	r3, r3, #8
 8006440:	4313      	orrs	r3, r2
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	7812      	ldrb	r2, [r2, #0]
 8006446:	4610      	mov	r0, r2
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	6811      	ldr	r1, [r2, #0]
 800644c:	ea43 0200 	orr.w	r2, r3, r0
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	011b      	lsls	r3, r3, #4
 8006454:	440b      	add	r3, r1
 8006456:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800645a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	3318      	adds	r3, #24
 8006464:	011b      	lsls	r3, r3, #4
 8006466:	4413      	add	r3, r2
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68fa      	ldr	r2, [r7, #12]
 800646c:	6811      	ldr	r1, [r2, #0]
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3318      	adds	r3, #24
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	440b      	add	r3, r1
 800647a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e00e      	b.n	800649e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006484:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e006      	b.n	800649e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006494:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800649c:	2301      	movs	r3, #1
  }
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3724      	adds	r7, #36	; 0x24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a8:	4770      	bx	lr

080064aa <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b085      	sub	sp, #20
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80064b2:	2300      	movs	r3, #0
 80064b4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064bc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80064be:	7afb      	ldrb	r3, [r7, #11]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d002      	beq.n	80064ca <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80064c4:	7afb      	ldrb	r3, [r7, #11]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d11d      	bne.n	8006506 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	689b      	ldr	r3, [r3, #8]
 80064d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d002      	beq.n	80064de <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	3301      	adds	r3, #1
 80064dc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d002      	beq.n	80064f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	3301      	adds	r3, #1
 80064f0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	689b      	ldr	r3, [r3, #8]
 80064f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d002      	beq.n	8006506 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006506:	68fb      	ldr	r3, [r7, #12]
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006514:	b480      	push	{r7}
 8006516:	b087      	sub	sp, #28
 8006518:	af00      	add	r7, sp, #0
 800651a:	60f8      	str	r0, [r7, #12]
 800651c:	60b9      	str	r1, [r7, #8]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006528:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800652a:	7dfb      	ldrb	r3, [r7, #23]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <HAL_CAN_GetRxMessage+0x24>
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	2b02      	cmp	r3, #2
 8006534:	f040 80f3 	bne.w	800671e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006538:	68bb      	ldr	r3, [r7, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10e      	bne.n	800655c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	f003 0303 	and.w	r3, r3, #3
 8006548:	2b00      	cmp	r3, #0
 800654a:	d116      	bne.n	800657a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006550:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e0e7      	b.n	800672c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e0d8      	b.n	800672c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681a      	ldr	r2, [r3, #0]
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	331b      	adds	r3, #27
 8006582:	011b      	lsls	r3, r3, #4
 8006584:	4413      	add	r3, r2
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	f003 0204 	and.w	r2, r3, #4
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d10c      	bne.n	80065b2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	331b      	adds	r3, #27
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	4413      	add	r3, r2
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	0d5b      	lsrs	r3, r3, #21
 80065a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	601a      	str	r2, [r3, #0]
 80065b0:	e00b      	b.n	80065ca <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681a      	ldr	r2, [r3, #0]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	331b      	adds	r3, #27
 80065ba:	011b      	lsls	r3, r3, #4
 80065bc:	4413      	add	r3, r2
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	08db      	lsrs	r3, r3, #3
 80065c2:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68bb      	ldr	r3, [r7, #8]
 80065d0:	331b      	adds	r3, #27
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	4413      	add	r3, r2
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0202 	and.w	r2, r3, #2
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	331b      	adds	r3, #27
 80065e8:	011b      	lsls	r3, r3, #4
 80065ea:	4413      	add	r3, r2
 80065ec:	3304      	adds	r3, #4
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 020f 	and.w	r2, r3, #15
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	331b      	adds	r3, #27
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	4413      	add	r3, r2
 8006604:	3304      	adds	r3, #4
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	0a1b      	lsrs	r3, r3, #8
 800660a:	b2da      	uxtb	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	331b      	adds	r3, #27
 8006618:	011b      	lsls	r3, r3, #4
 800661a:	4413      	add	r3, r2
 800661c:	3304      	adds	r3, #4
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	0c1b      	lsrs	r3, r3, #16
 8006622:	b29a      	uxth	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	011b      	lsls	r3, r3, #4
 8006630:	4413      	add	r3, r2
 8006632:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	b2da      	uxtb	r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	68bb      	ldr	r3, [r7, #8]
 8006644:	011b      	lsls	r3, r3, #4
 8006646:	4413      	add	r3, r2
 8006648:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	0a1a      	lsrs	r2, r3, #8
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	3301      	adds	r3, #1
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681a      	ldr	r2, [r3, #0]
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	4413      	add	r3, r2
 8006662:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	0c1a      	lsrs	r2, r3, #16
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	3302      	adds	r3, #2
 800666e:	b2d2      	uxtb	r2, r2
 8006670:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681a      	ldr	r2, [r3, #0]
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	011b      	lsls	r3, r3, #4
 800667a:	4413      	add	r3, r2
 800667c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	0e1a      	lsrs	r2, r3, #24
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	3303      	adds	r3, #3
 8006688:	b2d2      	uxtb	r2, r2
 800668a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	4413      	add	r3, r2
 8006696:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	3304      	adds	r3, #4
 80066a0:	b2d2      	uxtb	r2, r2
 80066a2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681a      	ldr	r2, [r3, #0]
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	011b      	lsls	r3, r3, #4
 80066ac:	4413      	add	r3, r2
 80066ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	0a1a      	lsrs	r2, r3, #8
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	3305      	adds	r3, #5
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	0c1a      	lsrs	r2, r3, #16
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	3306      	adds	r3, #6
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	011b      	lsls	r3, r3, #4
 80066e0:	4413      	add	r3, r2
 80066e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	0e1a      	lsrs	r2, r3, #24
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	3307      	adds	r3, #7
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d108      	bne.n	800670a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0220 	orr.w	r2, r2, #32
 8006706:	60da      	str	r2, [r3, #12]
 8006708:	e007      	b.n	800671a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691a      	ldr	r2, [r3, #16]
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0220 	orr.w	r2, r2, #32
 8006718:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800671a:	2300      	movs	r3, #0
 800671c:	e006      	b.n	800672c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006722:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
  }
}
 800672c:	4618      	mov	r0, r3
 800672e:	371c      	adds	r7, #28
 8006730:	46bd      	mov	sp, r7
 8006732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006736:	4770      	bx	lr

08006738 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
 800673e:	6078      	str	r0, [r7, #4]
 8006740:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006748:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800674a:	7bfb      	ldrb	r3, [r7, #15]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d002      	beq.n	8006756 <HAL_CAN_ActivateNotification+0x1e>
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	2b02      	cmp	r3, #2
 8006754:	d109      	bne.n	800676a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	6959      	ldr	r1, [r3, #20]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	683a      	ldr	r2, [r7, #0]
 8006762:	430a      	orrs	r2, r1
 8006764:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006766:	2300      	movs	r3, #0
 8006768:	e006      	b.n	8006778 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800676e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
  }
}
 8006778:	4618      	mov	r0, r3
 800677a:	3714      	adds	r7, #20
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b08a      	sub	sp, #40	; 0x28
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800678c:	2300      	movs	r3, #0
 800678e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	695b      	ldr	r3, [r3, #20]
 8006796:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	691b      	ldr	r3, [r3, #16]
 80067b6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699b      	ldr	r3, [r3, #24]
 80067be:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	f003 0301 	and.w	r3, r3, #1
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d07c      	beq.n	80068c4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	f003 0301 	and.w	r3, r3, #1
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d023      	beq.n	800681c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2201      	movs	r2, #1
 80067da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	f003 0302 	and.w	r3, r3, #2
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d003      	beq.n	80067ee <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f983 	bl	8006af2 <HAL_CAN_TxMailbox0CompleteCallback>
 80067ec:	e016      	b.n	800681c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	f003 0304 	and.w	r3, r3, #4
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d004      	beq.n	8006802 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80067f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80067fe:	627b      	str	r3, [r7, #36]	; 0x24
 8006800:	e00c      	b.n	800681c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f003 0308 	and.w	r3, r3, #8
 8006808:	2b00      	cmp	r3, #0
 800680a:	d004      	beq.n	8006816 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006812:	627b      	str	r3, [r7, #36]	; 0x24
 8006814:	e002      	b.n	800681c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 f989 	bl	8006b2e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800681c:	69bb      	ldr	r3, [r7, #24]
 800681e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006822:	2b00      	cmp	r3, #0
 8006824:	d024      	beq.n	8006870 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800682e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006830:	69bb      	ldr	r3, [r7, #24]
 8006832:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006836:	2b00      	cmp	r3, #0
 8006838:	d003      	beq.n	8006842 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f963 	bl	8006b06 <HAL_CAN_TxMailbox1CompleteCallback>
 8006840:	e016      	b.n	8006870 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006842:	69bb      	ldr	r3, [r7, #24]
 8006844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006848:	2b00      	cmp	r3, #0
 800684a:	d004      	beq.n	8006856 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006852:	627b      	str	r3, [r7, #36]	; 0x24
 8006854:	e00c      	b.n	8006870 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006856:	69bb      	ldr	r3, [r7, #24]
 8006858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800685c:	2b00      	cmp	r3, #0
 800685e:	d004      	beq.n	800686a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006862:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006866:	627b      	str	r3, [r7, #36]	; 0x24
 8006868:	e002      	b.n	8006870 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f969 	bl	8006b42 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006876:	2b00      	cmp	r3, #0
 8006878:	d024      	beq.n	80068c4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006882:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006884:	69bb      	ldr	r3, [r7, #24]
 8006886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f000 f943 	bl	8006b1a <HAL_CAN_TxMailbox2CompleteCallback>
 8006894:	e016      	b.n	80068c4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068a6:	627b      	str	r3, [r7, #36]	; 0x24
 80068a8:	e00c      	b.n	80068c4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d004      	beq.n	80068be <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068ba:	627b      	str	r3, [r7, #36]	; 0x24
 80068bc:	e002      	b.n	80068c4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 f949 	bl	8006b56 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80068c4:	6a3b      	ldr	r3, [r7, #32]
 80068c6:	f003 0308 	and.w	r3, r3, #8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00c      	beq.n	80068e8 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f003 0310 	and.w	r3, r3, #16
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d007      	beq.n	80068e8 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80068de:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	2210      	movs	r2, #16
 80068e6:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80068e8:	6a3b      	ldr	r3, [r7, #32]
 80068ea:	f003 0304 	and.w	r3, r3, #4
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d00b      	beq.n	800690a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	f003 0308 	and.w	r3, r3, #8
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d006      	beq.n	800690a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2208      	movs	r2, #8
 8006902:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	f000 f930 	bl	8006b6a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800690a:	6a3b      	ldr	r3, [r7, #32]
 800690c:	f003 0302 	and.w	r3, r3, #2
 8006910:	2b00      	cmp	r3, #0
 8006912:	d009      	beq.n	8006928 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	68db      	ldr	r3, [r3, #12]
 800691a:	f003 0303 	and.w	r3, r3, #3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f7fc fd44 	bl	80033b0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006928:	6a3b      	ldr	r3, [r7, #32]
 800692a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	f003 0310 	and.w	r3, r3, #16
 8006938:	2b00      	cmp	r3, #0
 800693a:	d007      	beq.n	800694c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006942:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2210      	movs	r2, #16
 800694a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800694c:	6a3b      	ldr	r3, [r7, #32]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00b      	beq.n	800696e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f003 0308 	and.w	r3, r3, #8
 800695c:	2b00      	cmp	r3, #0
 800695e:	d006      	beq.n	800696e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	2208      	movs	r2, #8
 8006966:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	f000 f912 	bl	8006b92 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800696e:	6a3b      	ldr	r3, [r7, #32]
 8006970:	f003 0310 	and.w	r3, r3, #16
 8006974:	2b00      	cmp	r3, #0
 8006976:	d009      	beq.n	800698c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	691b      	ldr	r3, [r3, #16]
 800697e:	f003 0303 	and.w	r3, r3, #3
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006986:	6878      	ldr	r0, [r7, #4]
 8006988:	f000 f8f9 	bl	8006b7e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d00b      	beq.n	80069ae <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006996:	69fb      	ldr	r3, [r7, #28]
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d006      	beq.n	80069ae <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2210      	movs	r2, #16
 80069a6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80069a8:	6878      	ldr	r0, [r7, #4]
 80069aa:	f000 f8fc 	bl	8006ba6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00b      	beq.n	80069d0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d006      	beq.n	80069d0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	2208      	movs	r2, #8
 80069c8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80069ca:	6878      	ldr	r0, [r7, #4]
 80069cc:	f000 f8f5 	bl	8006bba <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80069d0:	6a3b      	ldr	r3, [r7, #32]
 80069d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d07b      	beq.n	8006ad2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d072      	beq.n	8006aca <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80069e4:	6a3b      	ldr	r3, [r7, #32]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d008      	beq.n	8006a00 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d003      	beq.n	8006a00 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80069f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fa:	f043 0301 	orr.w	r3, r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a00:	6a3b      	ldr	r3, [r7, #32]
 8006a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d008      	beq.n	8006a1c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d003      	beq.n	8006a1c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006a1c:	6a3b      	ldr	r3, [r7, #32]
 8006a1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d008      	beq.n	8006a38 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a32:	f043 0304 	orr.w	r3, r3, #4
 8006a36:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006a38:	6a3b      	ldr	r3, [r7, #32]
 8006a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d043      	beq.n	8006aca <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d03e      	beq.n	8006aca <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006a52:	2b60      	cmp	r3, #96	; 0x60
 8006a54:	d02b      	beq.n	8006aae <HAL_CAN_IRQHandler+0x32a>
 8006a56:	2b60      	cmp	r3, #96	; 0x60
 8006a58:	d82e      	bhi.n	8006ab8 <HAL_CAN_IRQHandler+0x334>
 8006a5a:	2b50      	cmp	r3, #80	; 0x50
 8006a5c:	d022      	beq.n	8006aa4 <HAL_CAN_IRQHandler+0x320>
 8006a5e:	2b50      	cmp	r3, #80	; 0x50
 8006a60:	d82a      	bhi.n	8006ab8 <HAL_CAN_IRQHandler+0x334>
 8006a62:	2b40      	cmp	r3, #64	; 0x40
 8006a64:	d019      	beq.n	8006a9a <HAL_CAN_IRQHandler+0x316>
 8006a66:	2b40      	cmp	r3, #64	; 0x40
 8006a68:	d826      	bhi.n	8006ab8 <HAL_CAN_IRQHandler+0x334>
 8006a6a:	2b30      	cmp	r3, #48	; 0x30
 8006a6c:	d010      	beq.n	8006a90 <HAL_CAN_IRQHandler+0x30c>
 8006a6e:	2b30      	cmp	r3, #48	; 0x30
 8006a70:	d822      	bhi.n	8006ab8 <HAL_CAN_IRQHandler+0x334>
 8006a72:	2b10      	cmp	r3, #16
 8006a74:	d002      	beq.n	8006a7c <HAL_CAN_IRQHandler+0x2f8>
 8006a76:	2b20      	cmp	r3, #32
 8006a78:	d005      	beq.n	8006a86 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006a7a:	e01d      	b.n	8006ab8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7e:	f043 0308 	orr.w	r3, r3, #8
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006a84:	e019      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a88:	f043 0310 	orr.w	r3, r3, #16
 8006a8c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006a8e:	e014      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a92:	f043 0320 	orr.w	r3, r3, #32
 8006a96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006a98:	e00f      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006aa2:	e00a      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aaa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006aac:	e005      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ab6:	e000      	b.n	8006aba <HAL_CAN_IRQHandler+0x336>
            break;
 8006ab8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	699a      	ldr	r2, [r3, #24]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ac8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d008      	beq.n	8006aea <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ade:	431a      	orrs	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 f872 	bl	8006bce <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006aea:	bf00      	nop
 8006aec:	3728      	adds	r7, #40	; 0x28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	bd80      	pop	{r7, pc}

08006af2 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006b0e:	bf00      	nop
 8006b10:	370c      	adds	r7, #12
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b083      	sub	sp, #12
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr

08006b2e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006b7e:	b480      	push	{r7}
 8006b80:	b083      	sub	sp, #12
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006b86:	bf00      	nop
 8006b88:	370c      	adds	r7, #12
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006b9a:	bf00      	nop
 8006b9c:	370c      	adds	r7, #12
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr

08006ba6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006ba6:	b480      	push	{r7}
 8006ba8:	b083      	sub	sp, #12
 8006baa:	af00      	add	r7, sp, #0
 8006bac:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006bae:	bf00      	nop
 8006bb0:	370c      	adds	r7, #12
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006bba:	b480      	push	{r7}
 8006bbc:	b083      	sub	sp, #12
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006bc2:	bf00      	nop
 8006bc4:	370c      	adds	r7, #12
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr

08006bce <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006bce:	b480      	push	{r7}
 8006bd0:	b083      	sub	sp, #12
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006bd6:	bf00      	nop
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr
	...

08006be4 <__NVIC_SetPriorityGrouping>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b085      	sub	sp, #20
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f003 0307 	and.w	r3, r3, #7
 8006bf2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006bf4:	4b0b      	ldr	r3, [pc, #44]	; (8006c24 <__NVIC_SetPriorityGrouping+0x40>)
 8006bf6:	68db      	ldr	r3, [r3, #12]
 8006bf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006bfa:	68ba      	ldr	r2, [r7, #8]
 8006bfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006c00:	4013      	ands	r3, r2
 8006c02:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006c0c:	4b06      	ldr	r3, [pc, #24]	; (8006c28 <__NVIC_SetPriorityGrouping+0x44>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006c12:	4a04      	ldr	r2, [pc, #16]	; (8006c24 <__NVIC_SetPriorityGrouping+0x40>)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	60d3      	str	r3, [r2, #12]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr
 8006c24:	e000ed00 	.word	0xe000ed00
 8006c28:	05fa0000 	.word	0x05fa0000

08006c2c <__NVIC_GetPriorityGrouping>:
{
 8006c2c:	b480      	push	{r7}
 8006c2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006c30:	4b04      	ldr	r3, [pc, #16]	; (8006c44 <__NVIC_GetPriorityGrouping+0x18>)
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	0a1b      	lsrs	r3, r3, #8
 8006c36:	f003 0307 	and.w	r3, r3, #7
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <__NVIC_EnableIRQ>:
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	db0b      	blt.n	8006c72 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c5a:	79fb      	ldrb	r3, [r7, #7]
 8006c5c:	f003 021f 	and.w	r2, r3, #31
 8006c60:	4907      	ldr	r1, [pc, #28]	; (8006c80 <__NVIC_EnableIRQ+0x38>)
 8006c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c66:	095b      	lsrs	r3, r3, #5
 8006c68:	2001      	movs	r0, #1
 8006c6a:	fa00 f202 	lsl.w	r2, r0, r2
 8006c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop
 8006c80:	e000e100 	.word	0xe000e100

08006c84 <__NVIC_DisableIRQ>:
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	db12      	blt.n	8006cbc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	f003 021f 	and.w	r2, r3, #31
 8006c9c:	490a      	ldr	r1, [pc, #40]	; (8006cc8 <__NVIC_DisableIRQ+0x44>)
 8006c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ca2:	095b      	lsrs	r3, r3, #5
 8006ca4:	2001      	movs	r0, #1
 8006ca6:	fa00 f202 	lsl.w	r2, r0, r2
 8006caa:	3320      	adds	r3, #32
 8006cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006cb0:	f3bf 8f4f 	dsb	sy
}
 8006cb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006cb6:	f3bf 8f6f 	isb	sy
}
 8006cba:	bf00      	nop
}
 8006cbc:	bf00      	nop
 8006cbe:	370c      	adds	r7, #12
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc6:	4770      	bx	lr
 8006cc8:	e000e100 	.word	0xe000e100

08006ccc <__NVIC_SetPriority>:
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	6039      	str	r1, [r7, #0]
 8006cd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	db0a      	blt.n	8006cf6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	490c      	ldr	r1, [pc, #48]	; (8006d18 <__NVIC_SetPriority+0x4c>)
 8006ce6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006cea:	0112      	lsls	r2, r2, #4
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	440b      	add	r3, r1
 8006cf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006cf4:	e00a      	b.n	8006d0c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	b2da      	uxtb	r2, r3
 8006cfa:	4908      	ldr	r1, [pc, #32]	; (8006d1c <__NVIC_SetPriority+0x50>)
 8006cfc:	79fb      	ldrb	r3, [r7, #7]
 8006cfe:	f003 030f 	and.w	r3, r3, #15
 8006d02:	3b04      	subs	r3, #4
 8006d04:	0112      	lsls	r2, r2, #4
 8006d06:	b2d2      	uxtb	r2, r2
 8006d08:	440b      	add	r3, r1
 8006d0a:	761a      	strb	r2, [r3, #24]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr
 8006d18:	e000e100 	.word	0xe000e100
 8006d1c:	e000ed00 	.word	0xe000ed00

08006d20 <NVIC_EncodePriority>:
{
 8006d20:	b480      	push	{r7}
 8006d22:	b089      	sub	sp, #36	; 0x24
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	f1c3 0307 	rsb	r3, r3, #7
 8006d3a:	2b04      	cmp	r3, #4
 8006d3c:	bf28      	it	cs
 8006d3e:	2304      	movcs	r3, #4
 8006d40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d42:	69fb      	ldr	r3, [r7, #28]
 8006d44:	3304      	adds	r3, #4
 8006d46:	2b06      	cmp	r3, #6
 8006d48:	d902      	bls.n	8006d50 <NVIC_EncodePriority+0x30>
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	3b03      	subs	r3, #3
 8006d4e:	e000      	b.n	8006d52 <NVIC_EncodePriority+0x32>
 8006d50:	2300      	movs	r3, #0
 8006d52:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d54:	f04f 32ff 	mov.w	r2, #4294967295
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d5e:	43da      	mvns	r2, r3
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	401a      	ands	r2, r3
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006d68:	f04f 31ff 	mov.w	r1, #4294967295
 8006d6c:	697b      	ldr	r3, [r7, #20]
 8006d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8006d72:	43d9      	mvns	r1, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006d78:	4313      	orrs	r3, r2
}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3724      	adds	r7, #36	; 0x24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d84:	4770      	bx	lr
	...

08006d88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	3b01      	subs	r3, #1
 8006d94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006d98:	d301      	bcc.n	8006d9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e00f      	b.n	8006dbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <SysTick_Config+0x40>)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	3b01      	subs	r3, #1
 8006da4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006da6:	210f      	movs	r1, #15
 8006da8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dac:	f7ff ff8e 	bl	8006ccc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006db0:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <SysTick_Config+0x40>)
 8006db2:	2200      	movs	r2, #0
 8006db4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006db6:	4b04      	ldr	r3, [pc, #16]	; (8006dc8 <SysTick_Config+0x40>)
 8006db8:	2207      	movs	r2, #7
 8006dba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	3708      	adds	r7, #8
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	e000e010 	.word	0xe000e010

08006dcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b082      	sub	sp, #8
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f7ff ff05 	bl	8006be4 <__NVIC_SetPriorityGrouping>
}
 8006dda:	bf00      	nop
 8006ddc:	3708      	adds	r7, #8
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b086      	sub	sp, #24
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	4603      	mov	r3, r0
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006df0:	2300      	movs	r3, #0
 8006df2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006df4:	f7ff ff1a 	bl	8006c2c <__NVIC_GetPriorityGrouping>
 8006df8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	6978      	ldr	r0, [r7, #20]
 8006e00:	f7ff ff8e 	bl	8006d20 <NVIC_EncodePriority>
 8006e04:	4602      	mov	r2, r0
 8006e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006e0a:	4611      	mov	r1, r2
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7ff ff5d 	bl	8006ccc <__NVIC_SetPriority>
}
 8006e12:	bf00      	nop
 8006e14:	3718      	adds	r7, #24
 8006e16:	46bd      	mov	sp, r7
 8006e18:	bd80      	pop	{r7, pc}

08006e1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006e1a:	b580      	push	{r7, lr}
 8006e1c:	b082      	sub	sp, #8
 8006e1e:	af00      	add	r7, sp, #0
 8006e20:	4603      	mov	r3, r0
 8006e22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006e24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff ff0d 	bl	8006c48 <__NVIC_EnableIRQ>
}
 8006e2e:	bf00      	nop
 8006e30:	3708      	adds	r7, #8
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b082      	sub	sp, #8
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f7ff ff1d 	bl	8006c84 <__NVIC_DisableIRQ>
}
 8006e4a:	bf00      	nop
 8006e4c:	3708      	adds	r7, #8
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}

08006e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006e52:	b580      	push	{r7, lr}
 8006e54:	b082      	sub	sp, #8
 8006e56:	af00      	add	r7, sp, #0
 8006e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f7ff ff94 	bl	8006d88 <SysTick_Config>
 8006e60:	4603      	mov	r3, r0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3708      	adds	r7, #8
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
	...

08006e6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	; 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
 8006e74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e76:	2300      	movs	r3, #0
 8006e78:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	e175      	b.n	8007178 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	69fb      	ldr	r3, [r7, #28]
 8006e90:	fa02 f303 	lsl.w	r3, r2, r3
 8006e94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ea0:	693a      	ldr	r2, [r7, #16]
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	f040 8164 	bne.w	8007172 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006eaa:	683b      	ldr	r3, [r7, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f003 0303 	and.w	r3, r3, #3
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d005      	beq.n	8006ec2 <HAL_GPIO_Init+0x56>
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	685b      	ldr	r3, [r3, #4]
 8006eba:	f003 0303 	and.w	r3, r3, #3
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	d130      	bne.n	8006f24 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	005b      	lsls	r3, r3, #1
 8006ecc:	2203      	movs	r2, #3
 8006ece:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed2:	43db      	mvns	r3, r3
 8006ed4:	69ba      	ldr	r2, [r7, #24]
 8006ed6:	4013      	ands	r3, r2
 8006ed8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	68da      	ldr	r2, [r3, #12]
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	005b      	lsls	r3, r3, #1
 8006ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ef8:	2201      	movs	r2, #1
 8006efa:	69fb      	ldr	r3, [r7, #28]
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	43db      	mvns	r3, r3
 8006f02:	69ba      	ldr	r2, [r7, #24]
 8006f04:	4013      	ands	r3, r2
 8006f06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	091b      	lsrs	r3, r3, #4
 8006f0e:	f003 0201 	and.w	r2, r3, #1
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	fa02 f303 	lsl.w	r3, r2, r3
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	4313      	orrs	r3, r2
 8006f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	f003 0303 	and.w	r3, r3, #3
 8006f2c:	2b03      	cmp	r3, #3
 8006f2e:	d017      	beq.n	8006f60 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	68db      	ldr	r3, [r3, #12]
 8006f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f36:	69fb      	ldr	r3, [r7, #28]
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	2203      	movs	r2, #3
 8006f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f40:	43db      	mvns	r3, r3
 8006f42:	69ba      	ldr	r2, [r7, #24]
 8006f44:	4013      	ands	r3, r2
 8006f46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	689a      	ldr	r2, [r3, #8]
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	005b      	lsls	r3, r3, #1
 8006f50:	fa02 f303 	lsl.w	r3, r2, r3
 8006f54:	69ba      	ldr	r2, [r7, #24]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	69ba      	ldr	r2, [r7, #24]
 8006f5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 0303 	and.w	r3, r3, #3
 8006f68:	2b02      	cmp	r3, #2
 8006f6a:	d123      	bne.n	8006fb4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	08da      	lsrs	r2, r3, #3
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	3208      	adds	r2, #8
 8006f74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f7a:	69fb      	ldr	r3, [r7, #28]
 8006f7c:	f003 0307 	and.w	r3, r3, #7
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	220f      	movs	r2, #15
 8006f84:	fa02 f303 	lsl.w	r3, r2, r3
 8006f88:	43db      	mvns	r3, r3
 8006f8a:	69ba      	ldr	r2, [r7, #24]
 8006f8c:	4013      	ands	r3, r2
 8006f8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	691a      	ldr	r2, [r3, #16]
 8006f94:	69fb      	ldr	r3, [r7, #28]
 8006f96:	f003 0307 	and.w	r3, r3, #7
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa0:	69ba      	ldr	r2, [r7, #24]
 8006fa2:	4313      	orrs	r3, r2
 8006fa4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	08da      	lsrs	r2, r3, #3
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	3208      	adds	r2, #8
 8006fae:	69b9      	ldr	r1, [r7, #24]
 8006fb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	2203      	movs	r2, #3
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	43db      	mvns	r3, r3
 8006fc6:	69ba      	ldr	r2, [r7, #24]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	f003 0203 	and.w	r2, r3, #3
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	005b      	lsls	r3, r3, #1
 8006fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f000 80be 	beq.w	8007172 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ff6:	4b66      	ldr	r3, [pc, #408]	; (8007190 <HAL_GPIO_Init+0x324>)
 8006ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffa:	4a65      	ldr	r2, [pc, #404]	; (8007190 <HAL_GPIO_Init+0x324>)
 8006ffc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007000:	6453      	str	r3, [r2, #68]	; 0x44
 8007002:	4b63      	ldr	r3, [pc, #396]	; (8007190 <HAL_GPIO_Init+0x324>)
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800700a:	60fb      	str	r3, [r7, #12]
 800700c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800700e:	4a61      	ldr	r2, [pc, #388]	; (8007194 <HAL_GPIO_Init+0x328>)
 8007010:	69fb      	ldr	r3, [r7, #28]
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	3302      	adds	r3, #2
 8007016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800701a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800701c:	69fb      	ldr	r3, [r7, #28]
 800701e:	f003 0303 	and.w	r3, r3, #3
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	220f      	movs	r2, #15
 8007026:	fa02 f303 	lsl.w	r3, r2, r3
 800702a:	43db      	mvns	r3, r3
 800702c:	69ba      	ldr	r2, [r7, #24]
 800702e:	4013      	ands	r3, r2
 8007030:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	4a58      	ldr	r2, [pc, #352]	; (8007198 <HAL_GPIO_Init+0x32c>)
 8007036:	4293      	cmp	r3, r2
 8007038:	d037      	beq.n	80070aa <HAL_GPIO_Init+0x23e>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	4a57      	ldr	r2, [pc, #348]	; (800719c <HAL_GPIO_Init+0x330>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d031      	beq.n	80070a6 <HAL_GPIO_Init+0x23a>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	4a56      	ldr	r2, [pc, #344]	; (80071a0 <HAL_GPIO_Init+0x334>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d02b      	beq.n	80070a2 <HAL_GPIO_Init+0x236>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	4a55      	ldr	r2, [pc, #340]	; (80071a4 <HAL_GPIO_Init+0x338>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d025      	beq.n	800709e <HAL_GPIO_Init+0x232>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a54      	ldr	r2, [pc, #336]	; (80071a8 <HAL_GPIO_Init+0x33c>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d01f      	beq.n	800709a <HAL_GPIO_Init+0x22e>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a53      	ldr	r2, [pc, #332]	; (80071ac <HAL_GPIO_Init+0x340>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d019      	beq.n	8007096 <HAL_GPIO_Init+0x22a>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a52      	ldr	r2, [pc, #328]	; (80071b0 <HAL_GPIO_Init+0x344>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d013      	beq.n	8007092 <HAL_GPIO_Init+0x226>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a51      	ldr	r2, [pc, #324]	; (80071b4 <HAL_GPIO_Init+0x348>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00d      	beq.n	800708e <HAL_GPIO_Init+0x222>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a50      	ldr	r2, [pc, #320]	; (80071b8 <HAL_GPIO_Init+0x34c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d007      	beq.n	800708a <HAL_GPIO_Init+0x21e>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a4f      	ldr	r2, [pc, #316]	; (80071bc <HAL_GPIO_Init+0x350>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d101      	bne.n	8007086 <HAL_GPIO_Init+0x21a>
 8007082:	2309      	movs	r3, #9
 8007084:	e012      	b.n	80070ac <HAL_GPIO_Init+0x240>
 8007086:	230a      	movs	r3, #10
 8007088:	e010      	b.n	80070ac <HAL_GPIO_Init+0x240>
 800708a:	2308      	movs	r3, #8
 800708c:	e00e      	b.n	80070ac <HAL_GPIO_Init+0x240>
 800708e:	2307      	movs	r3, #7
 8007090:	e00c      	b.n	80070ac <HAL_GPIO_Init+0x240>
 8007092:	2306      	movs	r3, #6
 8007094:	e00a      	b.n	80070ac <HAL_GPIO_Init+0x240>
 8007096:	2305      	movs	r3, #5
 8007098:	e008      	b.n	80070ac <HAL_GPIO_Init+0x240>
 800709a:	2304      	movs	r3, #4
 800709c:	e006      	b.n	80070ac <HAL_GPIO_Init+0x240>
 800709e:	2303      	movs	r3, #3
 80070a0:	e004      	b.n	80070ac <HAL_GPIO_Init+0x240>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e002      	b.n	80070ac <HAL_GPIO_Init+0x240>
 80070a6:	2301      	movs	r3, #1
 80070a8:	e000      	b.n	80070ac <HAL_GPIO_Init+0x240>
 80070aa:	2300      	movs	r3, #0
 80070ac:	69fa      	ldr	r2, [r7, #28]
 80070ae:	f002 0203 	and.w	r2, r2, #3
 80070b2:	0092      	lsls	r2, r2, #2
 80070b4:	4093      	lsls	r3, r2
 80070b6:	69ba      	ldr	r2, [r7, #24]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80070bc:	4935      	ldr	r1, [pc, #212]	; (8007194 <HAL_GPIO_Init+0x328>)
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	089b      	lsrs	r3, r3, #2
 80070c2:	3302      	adds	r3, #2
 80070c4:	69ba      	ldr	r2, [r7, #24]
 80070c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ca:	4b3d      	ldr	r3, [pc, #244]	; (80071c0 <HAL_GPIO_Init+0x354>)
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	4013      	ands	r3, r2
 80070d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d003      	beq.n	80070ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80070e6:	69ba      	ldr	r2, [r7, #24]
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070ee:	4a34      	ldr	r2, [pc, #208]	; (80071c0 <HAL_GPIO_Init+0x354>)
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f4:	4b32      	ldr	r3, [pc, #200]	; (80071c0 <HAL_GPIO_Init+0x354>)
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	43db      	mvns	r3, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4013      	ands	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007110:	69ba      	ldr	r2, [r7, #24]
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	4313      	orrs	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007118:	4a29      	ldr	r2, [pc, #164]	; (80071c0 <HAL_GPIO_Init+0x354>)
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800711e:	4b28      	ldr	r3, [pc, #160]	; (80071c0 <HAL_GPIO_Init+0x354>)
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	43db      	mvns	r3, r3
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	4013      	ands	r3, r2
 800712c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	685b      	ldr	r3, [r3, #4]
 8007132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800713a:	69ba      	ldr	r2, [r7, #24]
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	4313      	orrs	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007142:	4a1f      	ldr	r2, [pc, #124]	; (80071c0 <HAL_GPIO_Init+0x354>)
 8007144:	69bb      	ldr	r3, [r7, #24]
 8007146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007148:	4b1d      	ldr	r3, [pc, #116]	; (80071c0 <HAL_GPIO_Init+0x354>)
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	43db      	mvns	r3, r3
 8007152:	69ba      	ldr	r2, [r7, #24]
 8007154:	4013      	ands	r3, r2
 8007156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007160:	2b00      	cmp	r3, #0
 8007162:	d003      	beq.n	800716c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007164:	69ba      	ldr	r2, [r7, #24]
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	4313      	orrs	r3, r2
 800716a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800716c:	4a14      	ldr	r2, [pc, #80]	; (80071c0 <HAL_GPIO_Init+0x354>)
 800716e:	69bb      	ldr	r3, [r7, #24]
 8007170:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007172:	69fb      	ldr	r3, [r7, #28]
 8007174:	3301      	adds	r3, #1
 8007176:	61fb      	str	r3, [r7, #28]
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	2b0f      	cmp	r3, #15
 800717c:	f67f ae86 	bls.w	8006e8c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007180:	bf00      	nop
 8007182:	bf00      	nop
 8007184:	3724      	adds	r7, #36	; 0x24
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
 800718e:	bf00      	nop
 8007190:	40023800 	.word	0x40023800
 8007194:	40013800 	.word	0x40013800
 8007198:	40020000 	.word	0x40020000
 800719c:	40020400 	.word	0x40020400
 80071a0:	40020800 	.word	0x40020800
 80071a4:	40020c00 	.word	0x40020c00
 80071a8:	40021000 	.word	0x40021000
 80071ac:	40021400 	.word	0x40021400
 80071b0:	40021800 	.word	0x40021800
 80071b4:	40021c00 	.word	0x40021c00
 80071b8:	40022000 	.word	0x40022000
 80071bc:	40022400 	.word	0x40022400
 80071c0:	40013c00 	.word	0x40013c00

080071c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b085      	sub	sp, #20
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	460b      	mov	r3, r1
 80071ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	691a      	ldr	r2, [r3, #16]
 80071d4:	887b      	ldrh	r3, [r7, #2]
 80071d6:	4013      	ands	r3, r2
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d002      	beq.n	80071e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80071dc:	2301      	movs	r3, #1
 80071de:	73fb      	strb	r3, [r7, #15]
 80071e0:	e001      	b.n	80071e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80071e2:	2300      	movs	r3, #0
 80071e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80071e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b083      	sub	sp, #12
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	460b      	mov	r3, r1
 80071fe:	807b      	strh	r3, [r7, #2]
 8007200:	4613      	mov	r3, r2
 8007202:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007204:	787b      	ldrb	r3, [r7, #1]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800720a:	887a      	ldrh	r2, [r7, #2]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007210:	e003      	b.n	800721a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8007212:	887b      	ldrh	r3, [r7, #2]
 8007214:	041a      	lsls	r2, r3, #16
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	619a      	str	r2, [r3, #24]
}
 800721a:	bf00      	nop
 800721c:	370c      	adds	r7, #12
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr

08007226 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007226:	b480      	push	{r7}
 8007228:	b085      	sub	sp, #20
 800722a:	af00      	add	r7, sp, #0
 800722c:	6078      	str	r0, [r7, #4]
 800722e:	460b      	mov	r3, r1
 8007230:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	4013      	ands	r3, r2
 800723e:	041a      	lsls	r2, r3, #16
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	43d9      	mvns	r1, r3
 8007244:	887b      	ldrh	r3, [r7, #2]
 8007246:	400b      	ands	r3, r1
 8007248:	431a      	orrs	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	619a      	str	r2, [r3, #24]
}
 800724e:	bf00      	nop
 8007250:	3714      	adds	r7, #20
 8007252:	46bd      	mov	sp, r7
 8007254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007258:	4770      	bx	lr
	...

0800725c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	4603      	mov	r3, r0
 8007264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8007266:	4b08      	ldr	r3, [pc, #32]	; (8007288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007268:	695a      	ldr	r2, [r3, #20]
 800726a:	88fb      	ldrh	r3, [r7, #6]
 800726c:	4013      	ands	r3, r2
 800726e:	2b00      	cmp	r3, #0
 8007270:	d006      	beq.n	8007280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007272:	4a05      	ldr	r2, [pc, #20]	; (8007288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007278:	88fb      	ldrh	r3, [r7, #6]
 800727a:	4618      	mov	r0, r3
 800727c:	f7fa fd08 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8007280:	bf00      	nop
 8007282:	3708      	adds	r7, #8
 8007284:	46bd      	mov	sp, r7
 8007286:	bd80      	pop	{r7, pc}
 8007288:	40013c00 	.word	0x40013c00

0800728c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007292:	2300      	movs	r3, #0
 8007294:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8007296:	4b23      	ldr	r3, [pc, #140]	; (8007324 <HAL_PWREx_EnableOverDrive+0x98>)
 8007298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800729a:	4a22      	ldr	r2, [pc, #136]	; (8007324 <HAL_PWREx_EnableOverDrive+0x98>)
 800729c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072a0:	6413      	str	r3, [r2, #64]	; 0x40
 80072a2:	4b20      	ldr	r3, [pc, #128]	; (8007324 <HAL_PWREx_EnableOverDrive+0x98>)
 80072a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072aa:	603b      	str	r3, [r7, #0]
 80072ac:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80072ae:	4b1e      	ldr	r3, [pc, #120]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1d      	ldr	r2, [pc, #116]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072b8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072ba:	f7fe f99d 	bl	80055f8 <HAL_GetTick>
 80072be:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072c0:	e009      	b.n	80072d6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072c2:	f7fe f999 	bl	80055f8 <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072d0:	d901      	bls.n	80072d6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80072d2:	2303      	movs	r3, #3
 80072d4:	e022      	b.n	800731c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80072d6:	4b14      	ldr	r3, [pc, #80]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e2:	d1ee      	bne.n	80072c2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80072e4:	4b10      	ldr	r3, [pc, #64]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a0f      	ldr	r2, [pc, #60]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 80072ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072ee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072f0:	f7fe f982 	bl	80055f8 <HAL_GetTick>
 80072f4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80072f6:	e009      	b.n	800730c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80072f8:	f7fe f97e 	bl	80055f8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007306:	d901      	bls.n	800730c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007308:	2303      	movs	r3, #3
 800730a:	e007      	b.n	800731c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800730c:	4b06      	ldr	r3, [pc, #24]	; (8007328 <HAL_PWREx_EnableOverDrive+0x9c>)
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007318:	d1ee      	bne.n	80072f8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	40023800 	.word	0x40023800
 8007328:	40007000 	.word	0x40007000

0800732c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b086      	sub	sp, #24
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007334:	2300      	movs	r3, #0
 8007336:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d101      	bne.n	8007342 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e291      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f003 0301 	and.w	r3, r3, #1
 800734a:	2b00      	cmp	r3, #0
 800734c:	f000 8087 	beq.w	800745e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007350:	4b96      	ldr	r3, [pc, #600]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	f003 030c 	and.w	r3, r3, #12
 8007358:	2b04      	cmp	r3, #4
 800735a:	d00c      	beq.n	8007376 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800735c:	4b93      	ldr	r3, [pc, #588]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 030c 	and.w	r3, r3, #12
 8007364:	2b08      	cmp	r3, #8
 8007366:	d112      	bne.n	800738e <HAL_RCC_OscConfig+0x62>
 8007368:	4b90      	ldr	r3, [pc, #576]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007374:	d10b      	bne.n	800738e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007376:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800737e:	2b00      	cmp	r3, #0
 8007380:	d06c      	beq.n	800745c <HAL_RCC_OscConfig+0x130>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d168      	bne.n	800745c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800738a:	2301      	movs	r3, #1
 800738c:	e26b      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007396:	d106      	bne.n	80073a6 <HAL_RCC_OscConfig+0x7a>
 8007398:	4b84      	ldr	r3, [pc, #528]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a83      	ldr	r2, [pc, #524]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800739e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073a2:	6013      	str	r3, [r2, #0]
 80073a4:	e02e      	b.n	8007404 <HAL_RCC_OscConfig+0xd8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	685b      	ldr	r3, [r3, #4]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d10c      	bne.n	80073c8 <HAL_RCC_OscConfig+0x9c>
 80073ae:	4b7f      	ldr	r3, [pc, #508]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a7e      	ldr	r2, [pc, #504]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073b8:	6013      	str	r3, [r2, #0]
 80073ba:	4b7c      	ldr	r3, [pc, #496]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a7b      	ldr	r2, [pc, #492]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80073c4:	6013      	str	r3, [r2, #0]
 80073c6:	e01d      	b.n	8007404 <HAL_RCC_OscConfig+0xd8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80073d0:	d10c      	bne.n	80073ec <HAL_RCC_OscConfig+0xc0>
 80073d2:	4b76      	ldr	r3, [pc, #472]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a75      	ldr	r2, [pc, #468]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80073dc:	6013      	str	r3, [r2, #0]
 80073de:	4b73      	ldr	r3, [pc, #460]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a72      	ldr	r2, [pc, #456]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80073e8:	6013      	str	r3, [r2, #0]
 80073ea:	e00b      	b.n	8007404 <HAL_RCC_OscConfig+0xd8>
 80073ec:	4b6f      	ldr	r3, [pc, #444]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a6e      	ldr	r2, [pc, #440]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073f6:	6013      	str	r3, [r2, #0]
 80073f8:	4b6c      	ldr	r3, [pc, #432]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a6b      	ldr	r2, [pc, #428]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80073fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d013      	beq.n	8007434 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800740c:	f7fe f8f4 	bl	80055f8 <HAL_GetTick>
 8007410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007412:	e008      	b.n	8007426 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007414:	f7fe f8f0 	bl	80055f8 <HAL_GetTick>
 8007418:	4602      	mov	r2, r0
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	1ad3      	subs	r3, r2, r3
 800741e:	2b64      	cmp	r3, #100	; 0x64
 8007420:	d901      	bls.n	8007426 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e21f      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007426:	4b61      	ldr	r3, [pc, #388]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742e:	2b00      	cmp	r3, #0
 8007430:	d0f0      	beq.n	8007414 <HAL_RCC_OscConfig+0xe8>
 8007432:	e014      	b.n	800745e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007434:	f7fe f8e0 	bl	80055f8 <HAL_GetTick>
 8007438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800743a:	e008      	b.n	800744e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800743c:	f7fe f8dc 	bl	80055f8 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	2b64      	cmp	r3, #100	; 0x64
 8007448:	d901      	bls.n	800744e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800744a:	2303      	movs	r3, #3
 800744c:	e20b      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800744e:	4b57      	ldr	r3, [pc, #348]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007456:	2b00      	cmp	r3, #0
 8007458:	d1f0      	bne.n	800743c <HAL_RCC_OscConfig+0x110>
 800745a:	e000      	b.n	800745e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800745c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0302 	and.w	r3, r3, #2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d069      	beq.n	800753e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800746a:	4b50      	ldr	r3, [pc, #320]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800746c:	689b      	ldr	r3, [r3, #8]
 800746e:	f003 030c 	and.w	r3, r3, #12
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00b      	beq.n	800748e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007476:	4b4d      	ldr	r3, [pc, #308]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007478:	689b      	ldr	r3, [r3, #8]
 800747a:	f003 030c 	and.w	r3, r3, #12
 800747e:	2b08      	cmp	r3, #8
 8007480:	d11c      	bne.n	80074bc <HAL_RCC_OscConfig+0x190>
 8007482:	4b4a      	ldr	r3, [pc, #296]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800748e:	4b47      	ldr	r3, [pc, #284]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d005      	beq.n	80074a6 <HAL_RCC_OscConfig+0x17a>
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d001      	beq.n	80074a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80074a2:	2301      	movs	r3, #1
 80074a4:	e1df      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074a6:	4b41      	ldr	r3, [pc, #260]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	691b      	ldr	r3, [r3, #16]
 80074b2:	00db      	lsls	r3, r3, #3
 80074b4:	493d      	ldr	r1, [pc, #244]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074b6:	4313      	orrs	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80074ba:	e040      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	68db      	ldr	r3, [r3, #12]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d023      	beq.n	800750c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80074c4:	4b39      	ldr	r3, [pc, #228]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	4a38      	ldr	r2, [pc, #224]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074ca:	f043 0301 	orr.w	r3, r3, #1
 80074ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80074d0:	f7fe f892 	bl	80055f8 <HAL_GetTick>
 80074d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074d6:	e008      	b.n	80074ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80074d8:	f7fe f88e 	bl	80055f8 <HAL_GetTick>
 80074dc:	4602      	mov	r2, r0
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	1ad3      	subs	r3, r2, r3
 80074e2:	2b02      	cmp	r3, #2
 80074e4:	d901      	bls.n	80074ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80074e6:	2303      	movs	r3, #3
 80074e8:	e1bd      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80074ea:	4b30      	ldr	r3, [pc, #192]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d0f0      	beq.n	80074d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80074f6:	4b2d      	ldr	r3, [pc, #180]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	691b      	ldr	r3, [r3, #16]
 8007502:	00db      	lsls	r3, r3, #3
 8007504:	4929      	ldr	r1, [pc, #164]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007506:	4313      	orrs	r3, r2
 8007508:	600b      	str	r3, [r1, #0]
 800750a:	e018      	b.n	800753e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800750c:	4b27      	ldr	r3, [pc, #156]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	4a26      	ldr	r2, [pc, #152]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007512:	f023 0301 	bic.w	r3, r3, #1
 8007516:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007518:	f7fe f86e 	bl	80055f8 <HAL_GetTick>
 800751c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800751e:	e008      	b.n	8007532 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007520:	f7fe f86a 	bl	80055f8 <HAL_GetTick>
 8007524:	4602      	mov	r2, r0
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	1ad3      	subs	r3, r2, r3
 800752a:	2b02      	cmp	r3, #2
 800752c:	d901      	bls.n	8007532 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800752e:	2303      	movs	r3, #3
 8007530:	e199      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007532:	4b1e      	ldr	r3, [pc, #120]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f003 0302 	and.w	r3, r3, #2
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1f0      	bne.n	8007520 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b00      	cmp	r3, #0
 8007548:	d038      	beq.n	80075bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	695b      	ldr	r3, [r3, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d019      	beq.n	8007586 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007552:	4b16      	ldr	r3, [pc, #88]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007554:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007556:	4a15      	ldr	r2, [pc, #84]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007558:	f043 0301 	orr.w	r3, r3, #1
 800755c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800755e:	f7fe f84b 	bl	80055f8 <HAL_GetTick>
 8007562:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007564:	e008      	b.n	8007578 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007566:	f7fe f847 	bl	80055f8 <HAL_GetTick>
 800756a:	4602      	mov	r2, r0
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1ad3      	subs	r3, r2, r3
 8007570:	2b02      	cmp	r3, #2
 8007572:	d901      	bls.n	8007578 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007574:	2303      	movs	r3, #3
 8007576:	e176      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800757a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d0f0      	beq.n	8007566 <HAL_RCC_OscConfig+0x23a>
 8007584:	e01a      	b.n	80075bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007586:	4b09      	ldr	r3, [pc, #36]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 8007588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800758a:	4a08      	ldr	r2, [pc, #32]	; (80075ac <HAL_RCC_OscConfig+0x280>)
 800758c:	f023 0301 	bic.w	r3, r3, #1
 8007590:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007592:	f7fe f831 	bl	80055f8 <HAL_GetTick>
 8007596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007598:	e00a      	b.n	80075b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800759a:	f7fe f82d 	bl	80055f8 <HAL_GetTick>
 800759e:	4602      	mov	r2, r0
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1ad3      	subs	r3, r2, r3
 80075a4:	2b02      	cmp	r3, #2
 80075a6:	d903      	bls.n	80075b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e15c      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
 80075ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80075b0:	4b91      	ldr	r3, [pc, #580]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80075b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1ee      	bne.n	800759a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f003 0304 	and.w	r3, r3, #4
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	f000 80a4 	beq.w	8007712 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80075ca:	4b8b      	ldr	r3, [pc, #556]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80075cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10d      	bne.n	80075f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80075d6:	4b88      	ldr	r3, [pc, #544]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80075d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075da:	4a87      	ldr	r2, [pc, #540]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80075dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075e0:	6413      	str	r3, [r2, #64]	; 0x40
 80075e2:	4b85      	ldr	r3, [pc, #532]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80075e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075ea:	60bb      	str	r3, [r7, #8]
 80075ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075ee:	2301      	movs	r3, #1
 80075f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80075f2:	4b82      	ldr	r3, [pc, #520]	; (80077fc <HAL_RCC_OscConfig+0x4d0>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d118      	bne.n	8007630 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80075fe:	4b7f      	ldr	r3, [pc, #508]	; (80077fc <HAL_RCC_OscConfig+0x4d0>)
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4a7e      	ldr	r2, [pc, #504]	; (80077fc <HAL_RCC_OscConfig+0x4d0>)
 8007604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007608:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800760a:	f7fd fff5 	bl	80055f8 <HAL_GetTick>
 800760e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007610:	e008      	b.n	8007624 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007612:	f7fd fff1 	bl	80055f8 <HAL_GetTick>
 8007616:	4602      	mov	r2, r0
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	1ad3      	subs	r3, r2, r3
 800761c:	2b64      	cmp	r3, #100	; 0x64
 800761e:	d901      	bls.n	8007624 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e120      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007624:	4b75      	ldr	r3, [pc, #468]	; (80077fc <HAL_RCC_OscConfig+0x4d0>)
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800762c:	2b00      	cmp	r3, #0
 800762e:	d0f0      	beq.n	8007612 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d106      	bne.n	8007646 <HAL_RCC_OscConfig+0x31a>
 8007638:	4b6f      	ldr	r3, [pc, #444]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800763a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800763c:	4a6e      	ldr	r2, [pc, #440]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800763e:	f043 0301 	orr.w	r3, r3, #1
 8007642:	6713      	str	r3, [r2, #112]	; 0x70
 8007644:	e02d      	b.n	80076a2 <HAL_RCC_OscConfig+0x376>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d10c      	bne.n	8007668 <HAL_RCC_OscConfig+0x33c>
 800764e:	4b6a      	ldr	r3, [pc, #424]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007652:	4a69      	ldr	r2, [pc, #420]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007654:	f023 0301 	bic.w	r3, r3, #1
 8007658:	6713      	str	r3, [r2, #112]	; 0x70
 800765a:	4b67      	ldr	r3, [pc, #412]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800765c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800765e:	4a66      	ldr	r2, [pc, #408]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007660:	f023 0304 	bic.w	r3, r3, #4
 8007664:	6713      	str	r3, [r2, #112]	; 0x70
 8007666:	e01c      	b.n	80076a2 <HAL_RCC_OscConfig+0x376>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	2b05      	cmp	r3, #5
 800766e:	d10c      	bne.n	800768a <HAL_RCC_OscConfig+0x35e>
 8007670:	4b61      	ldr	r3, [pc, #388]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007674:	4a60      	ldr	r2, [pc, #384]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007676:	f043 0304 	orr.w	r3, r3, #4
 800767a:	6713      	str	r3, [r2, #112]	; 0x70
 800767c:	4b5e      	ldr	r3, [pc, #376]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800767e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007680:	4a5d      	ldr	r2, [pc, #372]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007682:	f043 0301 	orr.w	r3, r3, #1
 8007686:	6713      	str	r3, [r2, #112]	; 0x70
 8007688:	e00b      	b.n	80076a2 <HAL_RCC_OscConfig+0x376>
 800768a:	4b5b      	ldr	r3, [pc, #364]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800768c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800768e:	4a5a      	ldr	r2, [pc, #360]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007690:	f023 0301 	bic.w	r3, r3, #1
 8007694:	6713      	str	r3, [r2, #112]	; 0x70
 8007696:	4b58      	ldr	r3, [pc, #352]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800769a:	4a57      	ldr	r2, [pc, #348]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800769c:	f023 0304 	bic.w	r3, r3, #4
 80076a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d015      	beq.n	80076d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076aa:	f7fd ffa5 	bl	80055f8 <HAL_GetTick>
 80076ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076b0:	e00a      	b.n	80076c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076b2:	f7fd ffa1 	bl	80055f8 <HAL_GetTick>
 80076b6:	4602      	mov	r2, r0
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	1ad3      	subs	r3, r2, r3
 80076bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d901      	bls.n	80076c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80076c4:	2303      	movs	r3, #3
 80076c6:	e0ce      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80076c8:	4b4b      	ldr	r3, [pc, #300]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80076ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076cc:	f003 0302 	and.w	r3, r3, #2
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d0ee      	beq.n	80076b2 <HAL_RCC_OscConfig+0x386>
 80076d4:	e014      	b.n	8007700 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d6:	f7fd ff8f 	bl	80055f8 <HAL_GetTick>
 80076da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076dc:	e00a      	b.n	80076f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80076de:	f7fd ff8b 	bl	80055f8 <HAL_GetTick>
 80076e2:	4602      	mov	r2, r0
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	1ad3      	subs	r3, r2, r3
 80076e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d901      	bls.n	80076f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80076f0:	2303      	movs	r3, #3
 80076f2:	e0b8      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80076f4:	4b40      	ldr	r3, [pc, #256]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80076f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f8:	f003 0302 	and.w	r3, r3, #2
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1ee      	bne.n	80076de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b01      	cmp	r3, #1
 8007704:	d105      	bne.n	8007712 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007706:	4b3c      	ldr	r3, [pc, #240]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800770a:	4a3b      	ldr	r2, [pc, #236]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800770c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007710:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	699b      	ldr	r3, [r3, #24]
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 80a4 	beq.w	8007864 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800771c:	4b36      	ldr	r3, [pc, #216]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	f003 030c 	and.w	r3, r3, #12
 8007724:	2b08      	cmp	r3, #8
 8007726:	d06b      	beq.n	8007800 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	699b      	ldr	r3, [r3, #24]
 800772c:	2b02      	cmp	r3, #2
 800772e:	d149      	bne.n	80077c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007730:	4b31      	ldr	r3, [pc, #196]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a30      	ldr	r2, [pc, #192]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007736:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800773a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800773c:	f7fd ff5c 	bl	80055f8 <HAL_GetTick>
 8007740:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007742:	e008      	b.n	8007756 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007744:	f7fd ff58 	bl	80055f8 <HAL_GetTick>
 8007748:	4602      	mov	r2, r0
 800774a:	693b      	ldr	r3, [r7, #16]
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	2b02      	cmp	r3, #2
 8007750:	d901      	bls.n	8007756 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e087      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007756:	4b28      	ldr	r3, [pc, #160]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775e:	2b00      	cmp	r3, #0
 8007760:	d1f0      	bne.n	8007744 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	69da      	ldr	r2, [r3, #28]
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a1b      	ldr	r3, [r3, #32]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007778:	085b      	lsrs	r3, r3, #1
 800777a:	3b01      	subs	r3, #1
 800777c:	041b      	lsls	r3, r3, #16
 800777e:	431a      	orrs	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007784:	061b      	lsls	r3, r3, #24
 8007786:	4313      	orrs	r3, r2
 8007788:	4a1b      	ldr	r2, [pc, #108]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 800778a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800778e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007790:	4b19      	ldr	r3, [pc, #100]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a18      	ldr	r2, [pc, #96]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 8007796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800779a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fd ff2c 	bl	80055f8 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077a4:	f7fd ff28 	bl	80055f8 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e057      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077b6:	4b10      	ldr	r3, [pc, #64]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d0f0      	beq.n	80077a4 <HAL_RCC_OscConfig+0x478>
 80077c2:	e04f      	b.n	8007864 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c4:	4b0c      	ldr	r3, [pc, #48]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a0b      	ldr	r2, [pc, #44]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80077ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80077ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d0:	f7fd ff12 	bl	80055f8 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077d8:	f7fd ff0e 	bl	80055f8 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b02      	cmp	r3, #2
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80077e6:	2303      	movs	r3, #3
 80077e8:	e03d      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077ea:	4b03      	ldr	r3, [pc, #12]	; (80077f8 <HAL_RCC_OscConfig+0x4cc>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x4ac>
 80077f6:	e035      	b.n	8007864 <HAL_RCC_OscConfig+0x538>
 80077f8:	40023800 	.word	0x40023800
 80077fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007800:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <HAL_RCC_OscConfig+0x544>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	2b01      	cmp	r3, #1
 800780c:	d028      	beq.n	8007860 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007818:	429a      	cmp	r2, r3
 800781a:	d121      	bne.n	8007860 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007826:	429a      	cmp	r2, r3
 8007828:	d11a      	bne.n	8007860 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800782a:	68fa      	ldr	r2, [r7, #12]
 800782c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007830:	4013      	ands	r3, r2
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007836:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007838:	4293      	cmp	r3, r2
 800783a:	d111      	bne.n	8007860 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007846:	085b      	lsrs	r3, r3, #1
 8007848:	3b01      	subs	r3, #1
 800784a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800784c:	429a      	cmp	r2, r3
 800784e:	d107      	bne.n	8007860 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800785a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800785c:	429a      	cmp	r2, r3
 800785e:	d001      	beq.n	8007864 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007860:	2301      	movs	r3, #1
 8007862:	e000      	b.n	8007866 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	40023800 	.word	0x40023800

08007874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d101      	bne.n	800788c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007888:	2301      	movs	r3, #1
 800788a:	e0d0      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800788c:	4b6a      	ldr	r3, [pc, #424]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 030f 	and.w	r3, r3, #15
 8007894:	683a      	ldr	r2, [r7, #0]
 8007896:	429a      	cmp	r2, r3
 8007898:	d910      	bls.n	80078bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800789a:	4b67      	ldr	r3, [pc, #412]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 020f 	bic.w	r2, r3, #15
 80078a2:	4965      	ldr	r1, [pc, #404]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80078aa:	4b63      	ldr	r3, [pc, #396]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f003 030f 	and.w	r3, r3, #15
 80078b2:	683a      	ldr	r2, [r7, #0]
 80078b4:	429a      	cmp	r2, r3
 80078b6:	d001      	beq.n	80078bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80078b8:	2301      	movs	r3, #1
 80078ba:	e0b8      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d020      	beq.n	800790a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f003 0304 	and.w	r3, r3, #4
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d005      	beq.n	80078e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80078d4:	4b59      	ldr	r3, [pc, #356]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80078d6:	689b      	ldr	r3, [r3, #8]
 80078d8:	4a58      	ldr	r2, [pc, #352]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80078da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80078de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f003 0308 	and.w	r3, r3, #8
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d005      	beq.n	80078f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80078ec:	4b53      	ldr	r3, [pc, #332]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	4a52      	ldr	r2, [pc, #328]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80078f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80078f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80078f8:	4b50      	ldr	r3, [pc, #320]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	689b      	ldr	r3, [r3, #8]
 8007904:	494d      	ldr	r1, [pc, #308]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007906:	4313      	orrs	r3, r2
 8007908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0301 	and.w	r3, r3, #1
 8007912:	2b00      	cmp	r3, #0
 8007914:	d040      	beq.n	8007998 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	685b      	ldr	r3, [r3, #4]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d107      	bne.n	800792e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791e:	4b47      	ldr	r3, [pc, #284]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007926:	2b00      	cmp	r3, #0
 8007928:	d115      	bne.n	8007956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e07f      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	685b      	ldr	r3, [r3, #4]
 8007932:	2b02      	cmp	r3, #2
 8007934:	d107      	bne.n	8007946 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007936:	4b41      	ldr	r3, [pc, #260]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d109      	bne.n	8007956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e073      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007946:	4b3d      	ldr	r3, [pc, #244]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f003 0302 	and.w	r3, r3, #2
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e06b      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007956:	4b39      	ldr	r3, [pc, #228]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f023 0203 	bic.w	r2, r3, #3
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	685b      	ldr	r3, [r3, #4]
 8007962:	4936      	ldr	r1, [pc, #216]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007964:	4313      	orrs	r3, r2
 8007966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007968:	f7fd fe46 	bl	80055f8 <HAL_GetTick>
 800796c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800796e:	e00a      	b.n	8007986 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007970:	f7fd fe42 	bl	80055f8 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	f241 3288 	movw	r2, #5000	; 0x1388
 800797e:	4293      	cmp	r3, r2
 8007980:	d901      	bls.n	8007986 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e053      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007986:	4b2d      	ldr	r3, [pc, #180]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 020c 	and.w	r2, r3, #12
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	429a      	cmp	r2, r3
 8007996:	d1eb      	bne.n	8007970 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007998:	4b27      	ldr	r3, [pc, #156]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d210      	bcs.n	80079c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079a6:	4b24      	ldr	r3, [pc, #144]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	f023 020f 	bic.w	r2, r3, #15
 80079ae:	4922      	ldr	r1, [pc, #136]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	4313      	orrs	r3, r2
 80079b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80079b6:	4b20      	ldr	r3, [pc, #128]	; (8007a38 <HAL_RCC_ClockConfig+0x1c4>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 030f 	and.w	r3, r3, #15
 80079be:	683a      	ldr	r2, [r7, #0]
 80079c0:	429a      	cmp	r2, r3
 80079c2:	d001      	beq.n	80079c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80079c4:	2301      	movs	r3, #1
 80079c6:	e032      	b.n	8007a2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 0304 	and.w	r3, r3, #4
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d008      	beq.n	80079e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80079d4:	4b19      	ldr	r3, [pc, #100]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	68db      	ldr	r3, [r3, #12]
 80079e0:	4916      	ldr	r1, [pc, #88]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0308 	and.w	r3, r3, #8
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d009      	beq.n	8007a06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80079f2:	4b12      	ldr	r3, [pc, #72]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 80079f4:	689b      	ldr	r3, [r3, #8]
 80079f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	490e      	ldr	r1, [pc, #56]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007a02:	4313      	orrs	r3, r2
 8007a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007a06:	f000 f821 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	4b0b      	ldr	r3, [pc, #44]	; (8007a3c <HAL_RCC_ClockConfig+0x1c8>)
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	091b      	lsrs	r3, r3, #4
 8007a12:	f003 030f 	and.w	r3, r3, #15
 8007a16:	490a      	ldr	r1, [pc, #40]	; (8007a40 <HAL_RCC_ClockConfig+0x1cc>)
 8007a18:	5ccb      	ldrb	r3, [r1, r3]
 8007a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a1e:	4a09      	ldr	r2, [pc, #36]	; (8007a44 <HAL_RCC_ClockConfig+0x1d0>)
 8007a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007a22:	4b09      	ldr	r3, [pc, #36]	; (8007a48 <HAL_RCC_ClockConfig+0x1d4>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd fda2 	bl	8005570 <HAL_InitTick>

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3710      	adds	r7, #16
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}
 8007a36:	bf00      	nop
 8007a38:	40023c00 	.word	0x40023c00
 8007a3c:	40023800 	.word	0x40023800
 8007a40:	0800cfc4 	.word	0x0800cfc4
 8007a44:	20000068 	.word	0x20000068
 8007a48:	2000006c 	.word	0x2000006c

08007a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007a50:	b094      	sub	sp, #80	; 0x50
 8007a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007a54:	2300      	movs	r3, #0
 8007a56:	647b      	str	r3, [r7, #68]	; 0x44
 8007a58:	2300      	movs	r3, #0
 8007a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007a60:	2300      	movs	r3, #0
 8007a62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007a64:	4b79      	ldr	r3, [pc, #484]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a66:	689b      	ldr	r3, [r3, #8]
 8007a68:	f003 030c 	and.w	r3, r3, #12
 8007a6c:	2b08      	cmp	r3, #8
 8007a6e:	d00d      	beq.n	8007a8c <HAL_RCC_GetSysClockFreq+0x40>
 8007a70:	2b08      	cmp	r3, #8
 8007a72:	f200 80e1 	bhi.w	8007c38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_RCC_GetSysClockFreq+0x34>
 8007a7a:	2b04      	cmp	r3, #4
 8007a7c:	d003      	beq.n	8007a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8007a7e:	e0db      	b.n	8007c38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007a80:	4b73      	ldr	r3, [pc, #460]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007a82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a84:	e0db      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007a86:	4b73      	ldr	r3, [pc, #460]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x208>)
 8007a88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007a8a:	e0d8      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007a8c:	4b6f      	ldr	r3, [pc, #444]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007a96:	4b6d      	ldr	r3, [pc, #436]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d063      	beq.n	8007b6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007aa2:	4b6a      	ldr	r3, [pc, #424]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007aa4:	685b      	ldr	r3, [r3, #4]
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ab4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	637b      	str	r3, [r7, #52]	; 0x34
 8007aba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007abe:	4622      	mov	r2, r4
 8007ac0:	462b      	mov	r3, r5
 8007ac2:	f04f 0000 	mov.w	r0, #0
 8007ac6:	f04f 0100 	mov.w	r1, #0
 8007aca:	0159      	lsls	r1, r3, #5
 8007acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ad0:	0150      	lsls	r0, r2, #5
 8007ad2:	4602      	mov	r2, r0
 8007ad4:	460b      	mov	r3, r1
 8007ad6:	4621      	mov	r1, r4
 8007ad8:	1a51      	subs	r1, r2, r1
 8007ada:	6139      	str	r1, [r7, #16]
 8007adc:	4629      	mov	r1, r5
 8007ade:	eb63 0301 	sbc.w	r3, r3, r1
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	f04f 0200 	mov.w	r2, #0
 8007ae8:	f04f 0300 	mov.w	r3, #0
 8007aec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007af0:	4659      	mov	r1, fp
 8007af2:	018b      	lsls	r3, r1, #6
 8007af4:	4651      	mov	r1, sl
 8007af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007afa:	4651      	mov	r1, sl
 8007afc:	018a      	lsls	r2, r1, #6
 8007afe:	4651      	mov	r1, sl
 8007b00:	ebb2 0801 	subs.w	r8, r2, r1
 8007b04:	4659      	mov	r1, fp
 8007b06:	eb63 0901 	sbc.w	r9, r3, r1
 8007b0a:	f04f 0200 	mov.w	r2, #0
 8007b0e:	f04f 0300 	mov.w	r3, #0
 8007b12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007b16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007b1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007b1e:	4690      	mov	r8, r2
 8007b20:	4699      	mov	r9, r3
 8007b22:	4623      	mov	r3, r4
 8007b24:	eb18 0303 	adds.w	r3, r8, r3
 8007b28:	60bb      	str	r3, [r7, #8]
 8007b2a:	462b      	mov	r3, r5
 8007b2c:	eb49 0303 	adc.w	r3, r9, r3
 8007b30:	60fb      	str	r3, [r7, #12]
 8007b32:	f04f 0200 	mov.w	r2, #0
 8007b36:	f04f 0300 	mov.w	r3, #0
 8007b3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007b3e:	4629      	mov	r1, r5
 8007b40:	024b      	lsls	r3, r1, #9
 8007b42:	4621      	mov	r1, r4
 8007b44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007b48:	4621      	mov	r1, r4
 8007b4a:	024a      	lsls	r2, r1, #9
 8007b4c:	4610      	mov	r0, r2
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b52:	2200      	movs	r2, #0
 8007b54:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007b5c:	f7f9 f864 	bl	8000c28 <__aeabi_uldivmod>
 8007b60:	4602      	mov	r2, r0
 8007b62:	460b      	mov	r3, r1
 8007b64:	4613      	mov	r3, r2
 8007b66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b68:	e058      	b.n	8007c1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b6a:	4b38      	ldr	r3, [pc, #224]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	099b      	lsrs	r3, r3, #6
 8007b70:	2200      	movs	r2, #0
 8007b72:	4618      	mov	r0, r3
 8007b74:	4611      	mov	r1, r2
 8007b76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007b7a:	623b      	str	r3, [r7, #32]
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	627b      	str	r3, [r7, #36]	; 0x24
 8007b80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007b84:	4642      	mov	r2, r8
 8007b86:	464b      	mov	r3, r9
 8007b88:	f04f 0000 	mov.w	r0, #0
 8007b8c:	f04f 0100 	mov.w	r1, #0
 8007b90:	0159      	lsls	r1, r3, #5
 8007b92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007b96:	0150      	lsls	r0, r2, #5
 8007b98:	4602      	mov	r2, r0
 8007b9a:	460b      	mov	r3, r1
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	eb63 0b01 	sbc.w	fp, r3, r1
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007bb4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007bb8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007bbc:	ebb2 040a 	subs.w	r4, r2, sl
 8007bc0:	eb63 050b 	sbc.w	r5, r3, fp
 8007bc4:	f04f 0200 	mov.w	r2, #0
 8007bc8:	f04f 0300 	mov.w	r3, #0
 8007bcc:	00eb      	lsls	r3, r5, #3
 8007bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007bd2:	00e2      	lsls	r2, r4, #3
 8007bd4:	4614      	mov	r4, r2
 8007bd6:	461d      	mov	r5, r3
 8007bd8:	4643      	mov	r3, r8
 8007bda:	18e3      	adds	r3, r4, r3
 8007bdc:	603b      	str	r3, [r7, #0]
 8007bde:	464b      	mov	r3, r9
 8007be0:	eb45 0303 	adc.w	r3, r5, r3
 8007be4:	607b      	str	r3, [r7, #4]
 8007be6:	f04f 0200 	mov.w	r2, #0
 8007bea:	f04f 0300 	mov.w	r3, #0
 8007bee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007bf2:	4629      	mov	r1, r5
 8007bf4:	028b      	lsls	r3, r1, #10
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007bfc:	4621      	mov	r1, r4
 8007bfe:	028a      	lsls	r2, r1, #10
 8007c00:	4610      	mov	r0, r2
 8007c02:	4619      	mov	r1, r3
 8007c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c06:	2200      	movs	r2, #0
 8007c08:	61bb      	str	r3, [r7, #24]
 8007c0a:	61fa      	str	r2, [r7, #28]
 8007c0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007c10:	f7f9 f80a 	bl	8000c28 <__aeabi_uldivmod>
 8007c14:	4602      	mov	r2, r0
 8007c16:	460b      	mov	r3, r1
 8007c18:	4613      	mov	r3, r2
 8007c1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007c1c:	4b0b      	ldr	r3, [pc, #44]	; (8007c4c <HAL_RCC_GetSysClockFreq+0x200>)
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	0c1b      	lsrs	r3, r3, #16
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	3301      	adds	r3, #1
 8007c28:	005b      	lsls	r3, r3, #1
 8007c2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007c2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c36:	e002      	b.n	8007c3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3750      	adds	r7, #80	; 0x50
 8007c44:	46bd      	mov	sp, r7
 8007c46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c4a:	bf00      	nop
 8007c4c:	40023800 	.word	0x40023800
 8007c50:	00f42400 	.word	0x00f42400
 8007c54:	007a1200 	.word	0x007a1200

08007c58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c5c:	4b03      	ldr	r3, [pc, #12]	; (8007c6c <HAL_RCC_GetHCLKFreq+0x14>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
}
 8007c60:	4618      	mov	r0, r3
 8007c62:	46bd      	mov	sp, r7
 8007c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c68:	4770      	bx	lr
 8007c6a:	bf00      	nop
 8007c6c:	20000068 	.word	0x20000068

08007c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007c74:	f7ff fff0 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	4b05      	ldr	r3, [pc, #20]	; (8007c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	0a9b      	lsrs	r3, r3, #10
 8007c80:	f003 0307 	and.w	r3, r3, #7
 8007c84:	4903      	ldr	r1, [pc, #12]	; (8007c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c86:	5ccb      	ldrb	r3, [r1, r3]
 8007c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	40023800 	.word	0x40023800
 8007c94:	0800cfd4 	.word	0x0800cfd4

08007c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c9c:	f7ff ffdc 	bl	8007c58 <HAL_RCC_GetHCLKFreq>
 8007ca0:	4602      	mov	r2, r0
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	0b5b      	lsrs	r3, r3, #13
 8007ca8:	f003 0307 	and.w	r3, r3, #7
 8007cac:	4903      	ldr	r1, [pc, #12]	; (8007cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cae:	5ccb      	ldrb	r3, [r1, r3]
 8007cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	bd80      	pop	{r7, pc}
 8007cb8:	40023800 	.word	0x40023800
 8007cbc:	0800cfd4 	.word	0x0800cfd4

08007cc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ccc:	2300      	movs	r3, #0
 8007cce:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d012      	beq.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007ce8:	4b69      	ldr	r3, [pc, #420]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	4a68      	ldr	r2, [pc, #416]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007cf2:	6093      	str	r3, [r2, #8]
 8007cf4:	4b66      	ldr	r3, [pc, #408]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cf6:	689a      	ldr	r2, [r3, #8]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	4964      	ldr	r1, [pc, #400]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cfe:	4313      	orrs	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d101      	bne.n	8007d0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d017      	beq.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007d1a:	4b5d      	ldr	r3, [pc, #372]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d28:	4959      	ldr	r1, [pc, #356]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d38:	d101      	bne.n	8007d3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007d3a:	2301      	movs	r3, #1
 8007d3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d017      	beq.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007d56:	4b4e      	ldr	r3, [pc, #312]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d64:	494a      	ldr	r1, [pc, #296]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d66:	4313      	orrs	r3, r2
 8007d68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007d74:	d101      	bne.n	8007d7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007d76:	2301      	movs	r3, #1
 8007d78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d101      	bne.n	8007d86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007d82:	2301      	movs	r3, #1
 8007d84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d001      	beq.n	8007d96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007d92:	2301      	movs	r3, #1
 8007d94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f003 0320 	and.w	r3, r3, #32
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f000 808b 	beq.w	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007da4:	4b3a      	ldr	r3, [pc, #232]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da8:	4a39      	ldr	r2, [pc, #228]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007dae:	6413      	str	r3, [r2, #64]	; 0x40
 8007db0:	4b37      	ldr	r3, [pc, #220]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007db8:	60bb      	str	r3, [r7, #8]
 8007dba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007dbc:	4b35      	ldr	r3, [pc, #212]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a34      	ldr	r2, [pc, #208]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dc8:	f7fd fc16 	bl	80055f8 <HAL_GetTick>
 8007dcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007dce:	e008      	b.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dd0:	f7fd fc12 	bl	80055f8 <HAL_GetTick>
 8007dd4:	4602      	mov	r2, r0
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	2b64      	cmp	r3, #100	; 0x64
 8007ddc:	d901      	bls.n	8007de2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e357      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007de2:	4b2c      	ldr	r3, [pc, #176]	; (8007e94 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d0f0      	beq.n	8007dd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007dee:	4b28      	ldr	r3, [pc, #160]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007df6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d035      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e06:	693a      	ldr	r2, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d02e      	beq.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007e0c:	4b20      	ldr	r3, [pc, #128]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e14:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007e16:	4b1e      	ldr	r3, [pc, #120]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e1a:	4a1d      	ldr	r2, [pc, #116]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e20:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007e22:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e26:	4a1a      	ldr	r2, [pc, #104]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e2c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007e2e:	4a18      	ldr	r2, [pc, #96]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007e34:	4b16      	ldr	r3, [pc, #88]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e38:	f003 0301 	and.w	r3, r3, #1
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d114      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e40:	f7fd fbda 	bl	80055f8 <HAL_GetTick>
 8007e44:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e46:	e00a      	b.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007e48:	f7fd fbd6 	bl	80055f8 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	697b      	ldr	r3, [r7, #20]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d901      	bls.n	8007e5e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	e319      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e5e:	4b0c      	ldr	r3, [pc, #48]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e62:	f003 0302 	and.w	r3, r3, #2
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d0ee      	beq.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007e76:	d111      	bne.n	8007e9c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007e78:	4b05      	ldr	r3, [pc, #20]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e7a:	689b      	ldr	r3, [r3, #8]
 8007e7c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007e84:	4b04      	ldr	r3, [pc, #16]	; (8007e98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007e86:	400b      	ands	r3, r1
 8007e88:	4901      	ldr	r1, [pc, #4]	; (8007e90 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	608b      	str	r3, [r1, #8]
 8007e8e:	e00b      	b.n	8007ea8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007e90:	40023800 	.word	0x40023800
 8007e94:	40007000 	.word	0x40007000
 8007e98:	0ffffcff 	.word	0x0ffffcff
 8007e9c:	4baa      	ldr	r3, [pc, #680]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007e9e:	689b      	ldr	r3, [r3, #8]
 8007ea0:	4aa9      	ldr	r2, [pc, #676]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ea2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007ea6:	6093      	str	r3, [r2, #8]
 8007ea8:	4ba7      	ldr	r3, [pc, #668]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eb4:	49a4      	ldr	r1, [pc, #656]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007eb6:	4313      	orrs	r3, r2
 8007eb8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 0310 	and.w	r3, r3, #16
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d010      	beq.n	8007ee8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007ec6:	4ba0      	ldr	r3, [pc, #640]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ecc:	4a9e      	ldr	r2, [pc, #632]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ed2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007ed6:	4b9c      	ldr	r3, [pc, #624]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ed8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	4999      	ldr	r1, [pc, #612]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d00a      	beq.n	8007f0a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ef4:	4b94      	ldr	r3, [pc, #592]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f02:	4991      	ldr	r1, [pc, #580]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f04:	4313      	orrs	r3, r2
 8007f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007f16:	4b8c      	ldr	r3, [pc, #560]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f1c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f24:	4988      	ldr	r1, [pc, #544]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f26:	4313      	orrs	r3, r2
 8007f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d00a      	beq.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007f38:	4b83      	ldr	r3, [pc, #524]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f3e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f46:	4980      	ldr	r1, [pc, #512]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f48:	4313      	orrs	r3, r2
 8007f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007f5a:	4b7b      	ldr	r3, [pc, #492]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f60:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f68:	4977      	ldr	r1, [pc, #476]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00a      	beq.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007f7c:	4b72      	ldr	r3, [pc, #456]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f82:	f023 0203 	bic.w	r2, r3, #3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f8a:	496f      	ldr	r1, [pc, #444]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007f8c:	4313      	orrs	r3, r2
 8007f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d00a      	beq.n	8007fb4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f9e:	4b6a      	ldr	r3, [pc, #424]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fa4:	f023 020c 	bic.w	r2, r3, #12
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007fac:	4966      	ldr	r1, [pc, #408]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d00a      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007fc0:	4b61      	ldr	r3, [pc, #388]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fc6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fce:	495e      	ldr	r1, [pc, #376]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007fe2:	4b59      	ldr	r3, [pc, #356]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fe8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ff0:	4955      	ldr	r1, [pc, #340]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008000:	2b00      	cmp	r3, #0
 8008002:	d00a      	beq.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008004:	4b50      	ldr	r3, [pc, #320]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800800a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008012:	494d      	ldr	r1, [pc, #308]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008014:	4313      	orrs	r3, r2
 8008016:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008022:	2b00      	cmp	r3, #0
 8008024:	d00a      	beq.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008026:	4b48      	ldr	r3, [pc, #288]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800802c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008034:	4944      	ldr	r1, [pc, #272]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008036:	4313      	orrs	r3, r2
 8008038:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00a      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008048:	4b3f      	ldr	r3, [pc, #252]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800804a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800804e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	493c      	ldr	r1, [pc, #240]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008058:	4313      	orrs	r3, r2
 800805a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008066:	2b00      	cmp	r3, #0
 8008068:	d00a      	beq.n	8008080 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800806a:	4b37      	ldr	r3, [pc, #220]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800806c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008070:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008078:	4933      	ldr	r1, [pc, #204]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800807a:	4313      	orrs	r3, r2
 800807c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d00a      	beq.n	80080a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800808c:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800808e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008092:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800809a:	492b      	ldr	r1, [pc, #172]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800809c:	4313      	orrs	r3, r2
 800809e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d011      	beq.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80080ae:	4b26      	ldr	r3, [pc, #152]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080bc:	4922      	ldr	r1, [pc, #136]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080be:	4313      	orrs	r3, r2
 80080c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80080c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080cc:	d101      	bne.n	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80080ce:	2301      	movs	r3, #1
 80080d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0308 	and.w	r3, r3, #8
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d001      	beq.n	80080e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80080de:	2301      	movs	r3, #1
 80080e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80080ee:	4b16      	ldr	r3, [pc, #88]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80080f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080fc:	4912      	ldr	r1, [pc, #72]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fe:	4313      	orrs	r3, r2
 8008100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800810c:	2b00      	cmp	r3, #0
 800810e:	d00b      	beq.n	8008128 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008110:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008116:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008120:	4909      	ldr	r1, [pc, #36]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008122:	4313      	orrs	r3, r2
 8008124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	2b01      	cmp	r3, #1
 800812c:	d006      	beq.n	800813c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008136:	2b00      	cmp	r3, #0
 8008138:	f000 80d9 	beq.w	80082ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800813c:	4b02      	ldr	r3, [pc, #8]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a01      	ldr	r2, [pc, #4]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008142:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008146:	e001      	b.n	800814c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008148:	40023800 	.word	0x40023800
 800814c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800814e:	f7fd fa53 	bl	80055f8 <HAL_GetTick>
 8008152:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008154:	e008      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008156:	f7fd fa4f 	bl	80055f8 <HAL_GetTick>
 800815a:	4602      	mov	r2, r0
 800815c:	697b      	ldr	r3, [r7, #20]
 800815e:	1ad3      	subs	r3, r2, r3
 8008160:	2b64      	cmp	r3, #100	; 0x64
 8008162:	d901      	bls.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008164:	2303      	movs	r3, #3
 8008166:	e194      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008168:	4b6c      	ldr	r3, [pc, #432]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d1f0      	bne.n	8008156 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f003 0301 	and.w	r3, r3, #1
 800817c:	2b00      	cmp	r3, #0
 800817e:	d021      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008184:	2b00      	cmp	r3, #0
 8008186:	d11d      	bne.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008188:	4b64      	ldr	r3, [pc, #400]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800818a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800818e:	0c1b      	lsrs	r3, r3, #16
 8008190:	f003 0303 	and.w	r3, r3, #3
 8008194:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008196:	4b61      	ldr	r3, [pc, #388]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800819c:	0e1b      	lsrs	r3, r3, #24
 800819e:	f003 030f 	and.w	r3, r3, #15
 80081a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	019a      	lsls	r2, r3, #6
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	041b      	lsls	r3, r3, #16
 80081ae:	431a      	orrs	r2, r3
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	061b      	lsls	r3, r3, #24
 80081b4:	431a      	orrs	r2, r3
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	071b      	lsls	r3, r3, #28
 80081bc:	4957      	ldr	r1, [pc, #348]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d004      	beq.n	80081da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80081d8:	d00a      	beq.n	80081f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d02e      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081ee:	d129      	bne.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80081f0:	4b4a      	ldr	r3, [pc, #296]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80081f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f6:	0c1b      	lsrs	r3, r3, #16
 80081f8:	f003 0303 	and.w	r3, r3, #3
 80081fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081fe:	4b47      	ldr	r3, [pc, #284]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008204:	0f1b      	lsrs	r3, r3, #28
 8008206:	f003 0307 	and.w	r3, r3, #7
 800820a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	019a      	lsls	r2, r3, #6
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	041b      	lsls	r3, r3, #16
 8008216:	431a      	orrs	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	061b      	lsls	r3, r3, #24
 800821e:	431a      	orrs	r2, r3
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	071b      	lsls	r3, r3, #28
 8008224:	493d      	ldr	r1, [pc, #244]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008226:	4313      	orrs	r3, r2
 8008228:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800822c:	4b3b      	ldr	r3, [pc, #236]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800822e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008232:	f023 021f 	bic.w	r2, r3, #31
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823a:	3b01      	subs	r3, #1
 800823c:	4937      	ldr	r1, [pc, #220]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800823e:	4313      	orrs	r3, r2
 8008240:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800824c:	2b00      	cmp	r3, #0
 800824e:	d01d      	beq.n	800828c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008250:	4b32      	ldr	r3, [pc, #200]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008256:	0e1b      	lsrs	r3, r3, #24
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800825e:	4b2f      	ldr	r3, [pc, #188]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008264:	0f1b      	lsrs	r3, r3, #28
 8008266:	f003 0307 	and.w	r3, r3, #7
 800826a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	685b      	ldr	r3, [r3, #4]
 8008270:	019a      	lsls	r2, r3, #6
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	691b      	ldr	r3, [r3, #16]
 8008276:	041b      	lsls	r3, r3, #16
 8008278:	431a      	orrs	r2, r3
 800827a:	693b      	ldr	r3, [r7, #16]
 800827c:	061b      	lsls	r3, r3, #24
 800827e:	431a      	orrs	r2, r3
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	071b      	lsls	r3, r3, #28
 8008284:	4925      	ldr	r1, [pc, #148]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008286:	4313      	orrs	r3, r2
 8008288:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008294:	2b00      	cmp	r3, #0
 8008296:	d011      	beq.n	80082bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	019a      	lsls	r2, r3, #6
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	691b      	ldr	r3, [r3, #16]
 80082a2:	041b      	lsls	r3, r3, #16
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	68db      	ldr	r3, [r3, #12]
 80082aa:	061b      	lsls	r3, r3, #24
 80082ac:	431a      	orrs	r2, r3
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	071b      	lsls	r3, r3, #28
 80082b4:	4919      	ldr	r1, [pc, #100]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80082bc:	4b17      	ldr	r3, [pc, #92]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4a16      	ldr	r2, [pc, #88]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80082c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082c8:	f7fd f996 	bl	80055f8 <HAL_GetTick>
 80082cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082ce:	e008      	b.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80082d0:	f7fd f992 	bl	80055f8 <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	2b64      	cmp	r3, #100	; 0x64
 80082dc:	d901      	bls.n	80082e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80082de:	2303      	movs	r3, #3
 80082e0:	e0d7      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80082e2:	4b0e      	ldr	r3, [pc, #56]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d0f0      	beq.n	80082d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80082ee:	69bb      	ldr	r3, [r7, #24]
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	f040 80cd 	bne.w	8008490 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80082f6:	4b09      	ldr	r3, [pc, #36]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a08      	ldr	r2, [pc, #32]	; (800831c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80082fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008300:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008302:	f7fd f979 	bl	80055f8 <HAL_GetTick>
 8008306:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008308:	e00a      	b.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800830a:	f7fd f975 	bl	80055f8 <HAL_GetTick>
 800830e:	4602      	mov	r2, r0
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	1ad3      	subs	r3, r2, r3
 8008314:	2b64      	cmp	r3, #100	; 0x64
 8008316:	d903      	bls.n	8008320 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008318:	2303      	movs	r3, #3
 800831a:	e0ba      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800831c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008320:	4b5e      	ldr	r3, [pc, #376]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800832c:	d0ed      	beq.n	800830a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d003      	beq.n	8008342 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800833e:	2b00      	cmp	r3, #0
 8008340:	d009      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800834a:	2b00      	cmp	r3, #0
 800834c:	d02e      	beq.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008352:	2b00      	cmp	r3, #0
 8008354:	d12a      	bne.n	80083ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008356:	4b51      	ldr	r3, [pc, #324]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	f003 0303 	and.w	r3, r3, #3
 8008362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008364:	4b4d      	ldr	r3, [pc, #308]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800836a:	0f1b      	lsrs	r3, r3, #28
 800836c:	f003 0307 	and.w	r3, r3, #7
 8008370:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	019a      	lsls	r2, r3, #6
 8008378:	693b      	ldr	r3, [r7, #16]
 800837a:	041b      	lsls	r3, r3, #16
 800837c:	431a      	orrs	r2, r3
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	061b      	lsls	r3, r3, #24
 8008384:	431a      	orrs	r2, r3
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	071b      	lsls	r3, r3, #28
 800838a:	4944      	ldr	r1, [pc, #272]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800838c:	4313      	orrs	r3, r2
 800838e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008392:	4b42      	ldr	r3, [pc, #264]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008394:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008398:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a0:	3b01      	subs	r3, #1
 80083a2:	021b      	lsls	r3, r3, #8
 80083a4:	493d      	ldr	r1, [pc, #244]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d022      	beq.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083c0:	d11d      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80083c2:	4b36      	ldr	r3, [pc, #216]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083c8:	0e1b      	lsrs	r3, r3, #24
 80083ca:	f003 030f 	and.w	r3, r3, #15
 80083ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80083d0:	4b32      	ldr	r3, [pc, #200]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083d6:	0f1b      	lsrs	r3, r3, #28
 80083d8:	f003 0307 	and.w	r3, r3, #7
 80083dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	695b      	ldr	r3, [r3, #20]
 80083e2:	019a      	lsls	r2, r3, #6
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a1b      	ldr	r3, [r3, #32]
 80083e8:	041b      	lsls	r3, r3, #16
 80083ea:	431a      	orrs	r2, r3
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	061b      	lsls	r3, r3, #24
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	071b      	lsls	r3, r3, #28
 80083f6:	4929      	ldr	r1, [pc, #164]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80083f8:	4313      	orrs	r3, r2
 80083fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f003 0308 	and.w	r3, r3, #8
 8008406:	2b00      	cmp	r3, #0
 8008408:	d028      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800840a:	4b24      	ldr	r3, [pc, #144]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800840c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008410:	0e1b      	lsrs	r3, r3, #24
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008418:	4b20      	ldr	r3, [pc, #128]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800841a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800841e:	0c1b      	lsrs	r3, r3, #16
 8008420:	f003 0303 	and.w	r3, r3, #3
 8008424:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	019a      	lsls	r2, r3, #6
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	041b      	lsls	r3, r3, #16
 8008430:	431a      	orrs	r2, r3
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	061b      	lsls	r3, r3, #24
 8008436:	431a      	orrs	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	69db      	ldr	r3, [r3, #28]
 800843c:	071b      	lsls	r3, r3, #28
 800843e:	4917      	ldr	r1, [pc, #92]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008440:	4313      	orrs	r3, r2
 8008442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008446:	4b15      	ldr	r3, [pc, #84]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008448:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800844c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008454:	4911      	ldr	r1, [pc, #68]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800845c:	4b0f      	ldr	r3, [pc, #60]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a0e      	ldr	r2, [pc, #56]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008466:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008468:	f7fd f8c6 	bl	80055f8 <HAL_GetTick>
 800846c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800846e:	e008      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008470:	f7fd f8c2 	bl	80055f8 <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	1ad3      	subs	r3, r2, r3
 800847a:	2b64      	cmp	r3, #100	; 0x64
 800847c:	d901      	bls.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e007      	b.n	8008492 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008482:	4b06      	ldr	r3, [pc, #24]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800848a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800848e:	d1ef      	bne.n	8008470 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008490:	2300      	movs	r3, #0
}
 8008492:	4618      	mov	r0, r3
 8008494:	3720      	adds	r7, #32
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}
 800849a:	bf00      	nop
 800849c:	40023800 	.word	0x40023800

080084a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80084ae:	2301      	movs	r3, #1
 80084b0:	e049      	b.n	8008546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d106      	bne.n	80084cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2200      	movs	r2, #0
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f7fc fc32 	bl	8004d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2202      	movs	r2, #2
 80084d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681a      	ldr	r2, [r3, #0]
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	3304      	adds	r3, #4
 80084dc:	4619      	mov	r1, r3
 80084de:	4610      	mov	r0, r2
 80084e0:	f000 fdac 	bl	800903c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2201      	movs	r2, #1
 80084e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2201      	movs	r2, #1
 80084f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	2201      	movs	r2, #1
 8008510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2201      	movs	r2, #1
 8008518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008544:	2300      	movs	r3, #0
}
 8008546:	4618      	mov	r0, r3
 8008548:	3708      	adds	r7, #8
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
	...

08008550 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800855e:	b2db      	uxtb	r3, r3
 8008560:	2b01      	cmp	r3, #1
 8008562:	d001      	beq.n	8008568 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e054      	b.n	8008612 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2202      	movs	r2, #2
 800856c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	68da      	ldr	r2, [r3, #12]
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	f042 0201 	orr.w	r2, r2, #1
 800857e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4a26      	ldr	r2, [pc, #152]	; (8008620 <HAL_TIM_Base_Start_IT+0xd0>)
 8008586:	4293      	cmp	r3, r2
 8008588:	d022      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008592:	d01d      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a22      	ldr	r2, [pc, #136]	; (8008624 <HAL_TIM_Base_Start_IT+0xd4>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d018      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4a21      	ldr	r2, [pc, #132]	; (8008628 <HAL_TIM_Base_Start_IT+0xd8>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d013      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	4a1f      	ldr	r2, [pc, #124]	; (800862c <HAL_TIM_Base_Start_IT+0xdc>)
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d00e      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a1e      	ldr	r2, [pc, #120]	; (8008630 <HAL_TIM_Base_Start_IT+0xe0>)
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d009      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a1c      	ldr	r2, [pc, #112]	; (8008634 <HAL_TIM_Base_Start_IT+0xe4>)
 80085c2:	4293      	cmp	r3, r2
 80085c4:	d004      	beq.n	80085d0 <HAL_TIM_Base_Start_IT+0x80>
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	4a1b      	ldr	r2, [pc, #108]	; (8008638 <HAL_TIM_Base_Start_IT+0xe8>)
 80085cc:	4293      	cmp	r3, r2
 80085ce:	d115      	bne.n	80085fc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	689a      	ldr	r2, [r3, #8]
 80085d6:	4b19      	ldr	r3, [pc, #100]	; (800863c <HAL_TIM_Base_Start_IT+0xec>)
 80085d8:	4013      	ands	r3, r2
 80085da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	2b06      	cmp	r3, #6
 80085e0:	d015      	beq.n	800860e <HAL_TIM_Base_Start_IT+0xbe>
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085e8:	d011      	beq.n	800860e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f042 0201 	orr.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085fa:	e008      	b.n	800860e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f042 0201 	orr.w	r2, r2, #1
 800860a:	601a      	str	r2, [r3, #0]
 800860c:	e000      	b.n	8008610 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800860e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008610:	2300      	movs	r3, #0
}
 8008612:	4618      	mov	r0, r3
 8008614:	3714      	adds	r7, #20
 8008616:	46bd      	mov	sp, r7
 8008618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800861c:	4770      	bx	lr
 800861e:	bf00      	nop
 8008620:	40010000 	.word	0x40010000
 8008624:	40000400 	.word	0x40000400
 8008628:	40000800 	.word	0x40000800
 800862c:	40000c00 	.word	0x40000c00
 8008630:	40010400 	.word	0x40010400
 8008634:	40014000 	.word	0x40014000
 8008638:	40001800 	.word	0x40001800
 800863c:	00010007 	.word	0x00010007

08008640 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008640:	b480      	push	{r7}
 8008642:	b083      	sub	sp, #12
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f022 0201 	bic.w	r2, r2, #1
 8008656:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	6a1a      	ldr	r2, [r3, #32]
 800865e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008662:	4013      	ands	r3, r2
 8008664:	2b00      	cmp	r3, #0
 8008666:	d10f      	bne.n	8008688 <HAL_TIM_Base_Stop_IT+0x48>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6a1a      	ldr	r2, [r3, #32]
 800866e:	f240 4344 	movw	r3, #1092	; 0x444
 8008672:	4013      	ands	r3, r2
 8008674:	2b00      	cmp	r3, #0
 8008676:	d107      	bne.n	8008688 <HAL_TIM_Base_Stop_IT+0x48>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f022 0201 	bic.w	r2, r2, #1
 8008686:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2201      	movs	r2, #1
 800868c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008690:	2300      	movs	r3, #0
}
 8008692:	4618      	mov	r0, r3
 8008694:	370c      	adds	r7, #12
 8008696:	46bd      	mov	sp, r7
 8008698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869c:	4770      	bx	lr

0800869e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b082      	sub	sp, #8
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d101      	bne.n	80086b0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e049      	b.n	8008744 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d106      	bne.n	80086ca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086c4:	6878      	ldr	r0, [r7, #4]
 80086c6:	f000 f841 	bl	800874c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2202      	movs	r2, #2
 80086ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3304      	adds	r3, #4
 80086da:	4619      	mov	r1, r3
 80086dc:	4610      	mov	r0, r2
 80086de:	f000 fcad 	bl	800903c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	2201      	movs	r2, #1
 80086ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	2201      	movs	r2, #1
 80086f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3708      	adds	r7, #8
 8008748:	46bd      	mov	sp, r7
 800874a:	bd80      	pop	{r7, pc}

0800874c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800874c:	b480      	push	{r7}
 800874e:	b083      	sub	sp, #12
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008754:	bf00      	nop
 8008756:	370c      	adds	r7, #12
 8008758:	46bd      	mov	sp, r7
 800875a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875e:	4770      	bx	lr

08008760 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b084      	sub	sp, #16
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800876a:	2300      	movs	r3, #0
 800876c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b00      	cmp	r3, #0
 8008772:	d109      	bne.n	8008788 <HAL_TIM_PWM_Start_IT+0x28>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800877a:	b2db      	uxtb	r3, r3
 800877c:	2b01      	cmp	r3, #1
 800877e:	bf14      	ite	ne
 8008780:	2301      	movne	r3, #1
 8008782:	2300      	moveq	r3, #0
 8008784:	b2db      	uxtb	r3, r3
 8008786:	e03c      	b.n	8008802 <HAL_TIM_PWM_Start_IT+0xa2>
 8008788:	683b      	ldr	r3, [r7, #0]
 800878a:	2b04      	cmp	r3, #4
 800878c:	d109      	bne.n	80087a2 <HAL_TIM_PWM_Start_IT+0x42>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008794:	b2db      	uxtb	r3, r3
 8008796:	2b01      	cmp	r3, #1
 8008798:	bf14      	ite	ne
 800879a:	2301      	movne	r3, #1
 800879c:	2300      	moveq	r3, #0
 800879e:	b2db      	uxtb	r3, r3
 80087a0:	e02f      	b.n	8008802 <HAL_TIM_PWM_Start_IT+0xa2>
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	d109      	bne.n	80087bc <HAL_TIM_PWM_Start_IT+0x5c>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087ae:	b2db      	uxtb	r3, r3
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	bf14      	ite	ne
 80087b4:	2301      	movne	r3, #1
 80087b6:	2300      	moveq	r3, #0
 80087b8:	b2db      	uxtb	r3, r3
 80087ba:	e022      	b.n	8008802 <HAL_TIM_PWM_Start_IT+0xa2>
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	2b0c      	cmp	r3, #12
 80087c0:	d109      	bne.n	80087d6 <HAL_TIM_PWM_Start_IT+0x76>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	bf14      	ite	ne
 80087ce:	2301      	movne	r3, #1
 80087d0:	2300      	moveq	r3, #0
 80087d2:	b2db      	uxtb	r3, r3
 80087d4:	e015      	b.n	8008802 <HAL_TIM_PWM_Start_IT+0xa2>
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	2b10      	cmp	r3, #16
 80087da:	d109      	bne.n	80087f0 <HAL_TIM_PWM_Start_IT+0x90>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	bf14      	ite	ne
 80087e8:	2301      	movne	r3, #1
 80087ea:	2300      	moveq	r3, #0
 80087ec:	b2db      	uxtb	r3, r3
 80087ee:	e008      	b.n	8008802 <HAL_TIM_PWM_Start_IT+0xa2>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf14      	ite	ne
 80087fc:	2301      	movne	r3, #1
 80087fe:	2300      	moveq	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	2b00      	cmp	r3, #0
 8008804:	d001      	beq.n	800880a <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008806:	2301      	movs	r3, #1
 8008808:	e0dd      	b.n	80089c6 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <HAL_TIM_PWM_Start_IT+0xba>
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2202      	movs	r2, #2
 8008814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008818:	e023      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x102>
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	2b04      	cmp	r3, #4
 800881e:	d104      	bne.n	800882a <HAL_TIM_PWM_Start_IT+0xca>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	2202      	movs	r2, #2
 8008824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008828:	e01b      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x102>
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	2b08      	cmp	r3, #8
 800882e:	d104      	bne.n	800883a <HAL_TIM_PWM_Start_IT+0xda>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2202      	movs	r2, #2
 8008834:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008838:	e013      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x102>
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	2b0c      	cmp	r3, #12
 800883e:	d104      	bne.n	800884a <HAL_TIM_PWM_Start_IT+0xea>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008848:	e00b      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x102>
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b10      	cmp	r3, #16
 800884e:	d104      	bne.n	800885a <HAL_TIM_PWM_Start_IT+0xfa>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2202      	movs	r2, #2
 8008854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008858:	e003      	b.n	8008862 <HAL_TIM_PWM_Start_IT+0x102>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2202      	movs	r2, #2
 800885e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2b0c      	cmp	r3, #12
 8008866:	d841      	bhi.n	80088ec <HAL_TIM_PWM_Start_IT+0x18c>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <HAL_TIM_PWM_Start_IT+0x110>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	080088a5 	.word	0x080088a5
 8008874:	080088ed 	.word	0x080088ed
 8008878:	080088ed 	.word	0x080088ed
 800887c:	080088ed 	.word	0x080088ed
 8008880:	080088b7 	.word	0x080088b7
 8008884:	080088ed 	.word	0x080088ed
 8008888:	080088ed 	.word	0x080088ed
 800888c:	080088ed 	.word	0x080088ed
 8008890:	080088c9 	.word	0x080088c9
 8008894:	080088ed 	.word	0x080088ed
 8008898:	080088ed 	.word	0x080088ed
 800889c:	080088ed 	.word	0x080088ed
 80088a0:	080088db 	.word	0x080088db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	68da      	ldr	r2, [r3, #12]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	f042 0202 	orr.w	r2, r2, #2
 80088b2:	60da      	str	r2, [r3, #12]
      break;
 80088b4:	e01d      	b.n	80088f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	68da      	ldr	r2, [r3, #12]
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f042 0204 	orr.w	r2, r2, #4
 80088c4:	60da      	str	r2, [r3, #12]
      break;
 80088c6:	e014      	b.n	80088f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	68da      	ldr	r2, [r3, #12]
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	f042 0208 	orr.w	r2, r2, #8
 80088d6:	60da      	str	r2, [r3, #12]
      break;
 80088d8:	e00b      	b.n	80088f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	68da      	ldr	r2, [r3, #12]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f042 0210 	orr.w	r2, r2, #16
 80088e8:	60da      	str	r2, [r3, #12]
      break;
 80088ea:	e002      	b.n	80088f2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80088ec:	2301      	movs	r3, #1
 80088ee:	73fb      	strb	r3, [r7, #15]
      break;
 80088f0:	bf00      	nop
  }

  if (status == HAL_OK)
 80088f2:	7bfb      	ldrb	r3, [r7, #15]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d165      	bne.n	80089c4 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2201      	movs	r2, #1
 80088fe:	6839      	ldr	r1, [r7, #0]
 8008900:	4618      	mov	r0, r3
 8008902:	f000 ff33 	bl	800976c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4a31      	ldr	r2, [pc, #196]	; (80089d0 <HAL_TIM_PWM_Start_IT+0x270>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d004      	beq.n	800891a <HAL_TIM_PWM_Start_IT+0x1ba>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a2f      	ldr	r2, [pc, #188]	; (80089d4 <HAL_TIM_PWM_Start_IT+0x274>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d101      	bne.n	800891e <HAL_TIM_PWM_Start_IT+0x1be>
 800891a:	2301      	movs	r3, #1
 800891c:	e000      	b.n	8008920 <HAL_TIM_PWM_Start_IT+0x1c0>
 800891e:	2300      	movs	r3, #0
 8008920:	2b00      	cmp	r3, #0
 8008922:	d007      	beq.n	8008934 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008932:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a25      	ldr	r2, [pc, #148]	; (80089d0 <HAL_TIM_PWM_Start_IT+0x270>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d022      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008946:	d01d      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a22      	ldr	r2, [pc, #136]	; (80089d8 <HAL_TIM_PWM_Start_IT+0x278>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d018      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	4a21      	ldr	r2, [pc, #132]	; (80089dc <HAL_TIM_PWM_Start_IT+0x27c>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d013      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	4a1f      	ldr	r2, [pc, #124]	; (80089e0 <HAL_TIM_PWM_Start_IT+0x280>)
 8008962:	4293      	cmp	r3, r2
 8008964:	d00e      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	4a1a      	ldr	r2, [pc, #104]	; (80089d4 <HAL_TIM_PWM_Start_IT+0x274>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d009      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a1b      	ldr	r2, [pc, #108]	; (80089e4 <HAL_TIM_PWM_Start_IT+0x284>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d004      	beq.n	8008984 <HAL_TIM_PWM_Start_IT+0x224>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a1a      	ldr	r2, [pc, #104]	; (80089e8 <HAL_TIM_PWM_Start_IT+0x288>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d115      	bne.n	80089b0 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	689a      	ldr	r2, [r3, #8]
 800898a:	4b18      	ldr	r3, [pc, #96]	; (80089ec <HAL_TIM_PWM_Start_IT+0x28c>)
 800898c:	4013      	ands	r3, r2
 800898e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	2b06      	cmp	r3, #6
 8008994:	d015      	beq.n	80089c2 <HAL_TIM_PWM_Start_IT+0x262>
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800899c:	d011      	beq.n	80089c2 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0201 	orr.w	r2, r2, #1
 80089ac:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089ae:	e008      	b.n	80089c2 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f042 0201 	orr.w	r2, r2, #1
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	e000      	b.n	80089c4 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80089c2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80089c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089c6:	4618      	mov	r0, r3
 80089c8:	3710      	adds	r7, #16
 80089ca:	46bd      	mov	sp, r7
 80089cc:	bd80      	pop	{r7, pc}
 80089ce:	bf00      	nop
 80089d0:	40010000 	.word	0x40010000
 80089d4:	40010400 	.word	0x40010400
 80089d8:	40000400 	.word	0x40000400
 80089dc:	40000800 	.word	0x40000800
 80089e0:	40000c00 	.word	0x40000c00
 80089e4:	40014000 	.word	0x40014000
 80089e8:	40001800 	.word	0x40001800
 80089ec:	00010007 	.word	0x00010007

080089f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	691b      	ldr	r3, [r3, #16]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b02      	cmp	r3, #2
 8008a04:	d122      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b02      	cmp	r3, #2
 8008a12:	d11b      	bne.n	8008a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f06f 0202 	mvn.w	r2, #2
 8008a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2201      	movs	r2, #1
 8008a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	f003 0303 	and.w	r3, r3, #3
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d003      	beq.n	8008a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 fae4 	bl	8009000 <HAL_TIM_IC_CaptureCallback>
 8008a38:	e005      	b.n	8008a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 fad6 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a40:	6878      	ldr	r0, [r7, #4]
 8008a42:	f000 fae7 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2200      	movs	r2, #0
 8008a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	691b      	ldr	r3, [r3, #16]
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	2b04      	cmp	r3, #4
 8008a58:	d122      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b04      	cmp	r3, #4
 8008a66:	d11b      	bne.n	8008aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f06f 0204 	mvn.w	r2, #4
 8008a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	699b      	ldr	r3, [r3, #24]
 8008a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d003      	beq.n	8008a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f000 faba 	bl	8009000 <HAL_TIM_IC_CaptureCallback>
 8008a8c:	e005      	b.n	8008a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 faac 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f000 fabd 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	f003 0308 	and.w	r3, r3, #8
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d122      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	68db      	ldr	r3, [r3, #12]
 8008ab4:	f003 0308 	and.w	r3, r3, #8
 8008ab8:	2b08      	cmp	r3, #8
 8008aba:	d11b      	bne.n	8008af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f06f 0208 	mvn.w	r2, #8
 8008ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2204      	movs	r2, #4
 8008aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	69db      	ldr	r3, [r3, #28]
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d003      	beq.n	8008ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008ada:	6878      	ldr	r0, [r7, #4]
 8008adc:	f000 fa90 	bl	8009000 <HAL_TIM_IC_CaptureCallback>
 8008ae0:	e005      	b.n	8008aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f000 fa82 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f000 fa93 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f003 0310 	and.w	r3, r3, #16
 8008afe:	2b10      	cmp	r3, #16
 8008b00:	d122      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68db      	ldr	r3, [r3, #12]
 8008b08:	f003 0310 	and.w	r3, r3, #16
 8008b0c:	2b10      	cmp	r3, #16
 8008b0e:	d11b      	bne.n	8008b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f06f 0210 	mvn.w	r2, #16
 8008b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2208      	movs	r2, #8
 8008b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	69db      	ldr	r3, [r3, #28]
 8008b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d003      	beq.n	8008b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa66 	bl	8009000 <HAL_TIM_IC_CaptureCallback>
 8008b34:	e005      	b.n	8008b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 fa58 	bl	8008fec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 fa69 	bl	8009014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2200      	movs	r2, #0
 8008b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d10e      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b01      	cmp	r3, #1
 8008b62:	d107      	bne.n	8008b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0201 	mvn.w	r2, #1
 8008b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7f9 f80a 	bl	8001b88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	691b      	ldr	r3, [r3, #16]
 8008b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b7e:	2b80      	cmp	r3, #128	; 0x80
 8008b80:	d10e      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b8c:	2b80      	cmp	r3, #128	; 0x80
 8008b8e:	d107      	bne.n	8008ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fea4 	bl	80098e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	691b      	ldr	r3, [r3, #16]
 8008ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bae:	d10e      	bne.n	8008bce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008bba:	2b80      	cmp	r3, #128	; 0x80
 8008bbc:	d107      	bne.n	8008bce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008bc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008bc8:	6878      	ldr	r0, [r7, #4]
 8008bca:	f000 fe97 	bl	80098fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b40      	cmp	r3, #64	; 0x40
 8008bda:	d10e      	bne.n	8008bfa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008be6:	2b40      	cmp	r3, #64	; 0x40
 8008be8:	d107      	bne.n	8008bfa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f000 fa17 	bl	8009028 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	f003 0320 	and.w	r3, r3, #32
 8008c04:	2b20      	cmp	r3, #32
 8008c06:	d10e      	bne.n	8008c26 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	f003 0320 	and.w	r3, r3, #32
 8008c12:	2b20      	cmp	r3, #32
 8008c14:	d107      	bne.n	8008c26 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f06f 0220 	mvn.w	r2, #32
 8008c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 fe57 	bl	80098d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008c26:	bf00      	nop
 8008c28:	3708      	adds	r7, #8
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}
	...

08008c30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b086      	sub	sp, #24
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	60f8      	str	r0, [r7, #12]
 8008c38:	60b9      	str	r1, [r7, #8]
 8008c3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d101      	bne.n	8008c4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c4a:	2302      	movs	r3, #2
 8008c4c:	e0ff      	b.n	8008e4e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	2201      	movs	r2, #1
 8008c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b14      	cmp	r3, #20
 8008c5a:	f200 80f0 	bhi.w	8008e3e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008e3f 	.word	0x08008e3f
 8008c6c:	08008e3f 	.word	0x08008e3f
 8008c70:	08008e3f 	.word	0x08008e3f
 8008c74:	08008cf9 	.word	0x08008cf9
 8008c78:	08008e3f 	.word	0x08008e3f
 8008c7c:	08008e3f 	.word	0x08008e3f
 8008c80:	08008e3f 	.word	0x08008e3f
 8008c84:	08008d3b 	.word	0x08008d3b
 8008c88:	08008e3f 	.word	0x08008e3f
 8008c8c:	08008e3f 	.word	0x08008e3f
 8008c90:	08008e3f 	.word	0x08008e3f
 8008c94:	08008d7b 	.word	0x08008d7b
 8008c98:	08008e3f 	.word	0x08008e3f
 8008c9c:	08008e3f 	.word	0x08008e3f
 8008ca0:	08008e3f 	.word	0x08008e3f
 8008ca4:	08008dbd 	.word	0x08008dbd
 8008ca8:	08008e3f 	.word	0x08008e3f
 8008cac:	08008e3f 	.word	0x08008e3f
 8008cb0:	08008e3f 	.word	0x08008e3f
 8008cb4:	08008dfd 	.word	0x08008dfd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68b9      	ldr	r1, [r7, #8]
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f000 fa5c 	bl	800917c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f042 0208 	orr.w	r2, r2, #8
 8008cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	699a      	ldr	r2, [r3, #24]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0204 	bic.w	r2, r2, #4
 8008ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	6999      	ldr	r1, [r3, #24]
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	691a      	ldr	r2, [r3, #16]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	619a      	str	r2, [r3, #24]
      break;
 8008cf6:	e0a5      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	68b9      	ldr	r1, [r7, #8]
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f000 faae 	bl	8009260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	699a      	ldr	r2, [r3, #24]
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	6999      	ldr	r1, [r3, #24]
 8008d2a:	68bb      	ldr	r3, [r7, #8]
 8008d2c:	691b      	ldr	r3, [r3, #16]
 8008d2e:	021a      	lsls	r2, r3, #8
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	430a      	orrs	r2, r1
 8008d36:	619a      	str	r2, [r3, #24]
      break;
 8008d38:	e084      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68b9      	ldr	r1, [r7, #8]
 8008d40:	4618      	mov	r0, r3
 8008d42:	f000 fb05 	bl	8009350 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f042 0208 	orr.w	r2, r2, #8
 8008d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69da      	ldr	r2, [r3, #28]
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f022 0204 	bic.w	r2, r2, #4
 8008d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69d9      	ldr	r1, [r3, #28]
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	691a      	ldr	r2, [r3, #16]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	430a      	orrs	r2, r1
 8008d76:	61da      	str	r2, [r3, #28]
      break;
 8008d78:	e064      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68b9      	ldr	r1, [r7, #8]
 8008d80:	4618      	mov	r0, r3
 8008d82:	f000 fb5b 	bl	800943c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69da      	ldr	r2, [r3, #28]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69da      	ldr	r2, [r3, #28]
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	69d9      	ldr	r1, [r3, #28]
 8008dac:	68bb      	ldr	r3, [r7, #8]
 8008dae:	691b      	ldr	r3, [r3, #16]
 8008db0:	021a      	lsls	r2, r3, #8
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	430a      	orrs	r2, r1
 8008db8:	61da      	str	r2, [r3, #28]
      break;
 8008dba:	e043      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68b9      	ldr	r1, [r7, #8]
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 fb92 	bl	80094ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f042 0208 	orr.w	r2, r2, #8
 8008dd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f022 0204 	bic.w	r2, r2, #4
 8008de6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	430a      	orrs	r2, r1
 8008df8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008dfa:	e023      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68b9      	ldr	r1, [r7, #8]
 8008e02:	4618      	mov	r0, r3
 8008e04:	f000 fbc4 	bl	8009590 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	021a      	lsls	r2, r3, #8
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	430a      	orrs	r2, r1
 8008e3a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008e3c:	e002      	b.n	8008e44 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	75fb      	strb	r3, [r7, #23]
      break;
 8008e42:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008e4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3718      	adds	r7, #24
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}
 8008e56:	bf00      	nop

08008e58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	6078      	str	r0, [r7, #4]
 8008e60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e62:	2300      	movs	r3, #0
 8008e64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e6c:	2b01      	cmp	r3, #1
 8008e6e:	d101      	bne.n	8008e74 <HAL_TIM_ConfigClockSource+0x1c>
 8008e70:	2302      	movs	r3, #2
 8008e72:	e0b4      	b.n	8008fde <HAL_TIM_ConfigClockSource+0x186>
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	689b      	ldr	r3, [r3, #8]
 8008e8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008e8c:	68ba      	ldr	r2, [r7, #8]
 8008e8e:	4b56      	ldr	r3, [pc, #344]	; (8008fe8 <HAL_TIM_ConfigClockSource+0x190>)
 8008e90:	4013      	ands	r3, r2
 8008e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eac:	d03e      	beq.n	8008f2c <HAL_TIM_ConfigClockSource+0xd4>
 8008eae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008eb2:	f200 8087 	bhi.w	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008eb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008eba:	f000 8086 	beq.w	8008fca <HAL_TIM_ConfigClockSource+0x172>
 8008ebe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec2:	d87f      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ec4:	2b70      	cmp	r3, #112	; 0x70
 8008ec6:	d01a      	beq.n	8008efe <HAL_TIM_ConfigClockSource+0xa6>
 8008ec8:	2b70      	cmp	r3, #112	; 0x70
 8008eca:	d87b      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d050      	beq.n	8008f72 <HAL_TIM_ConfigClockSource+0x11a>
 8008ed0:	2b60      	cmp	r3, #96	; 0x60
 8008ed2:	d877      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ed4:	2b50      	cmp	r3, #80	; 0x50
 8008ed6:	d03c      	beq.n	8008f52 <HAL_TIM_ConfigClockSource+0xfa>
 8008ed8:	2b50      	cmp	r3, #80	; 0x50
 8008eda:	d873      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008edc:	2b40      	cmp	r3, #64	; 0x40
 8008ede:	d058      	beq.n	8008f92 <HAL_TIM_ConfigClockSource+0x13a>
 8008ee0:	2b40      	cmp	r3, #64	; 0x40
 8008ee2:	d86f      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ee4:	2b30      	cmp	r3, #48	; 0x30
 8008ee6:	d064      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ee8:	2b30      	cmp	r3, #48	; 0x30
 8008eea:	d86b      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d060      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef0:	2b20      	cmp	r3, #32
 8008ef2:	d867      	bhi.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d05c      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008ef8:	2b10      	cmp	r3, #16
 8008efa:	d05a      	beq.n	8008fb2 <HAL_TIM_ConfigClockSource+0x15a>
 8008efc:	e062      	b.n	8008fc4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6899      	ldr	r1, [r3, #8]
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685a      	ldr	r2, [r3, #4]
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f000 fc0d 	bl	800972c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	689b      	ldr	r3, [r3, #8]
 8008f18:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008f20:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	609a      	str	r2, [r3, #8]
      break;
 8008f2a:	e04f      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6818      	ldr	r0, [r3, #0]
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	6899      	ldr	r1, [r3, #8]
 8008f34:	683b      	ldr	r3, [r7, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	68db      	ldr	r3, [r3, #12]
 8008f3c:	f000 fbf6 	bl	800972c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	689a      	ldr	r2, [r3, #8]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008f4e:	609a      	str	r2, [r3, #8]
      break;
 8008f50:	e03c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6818      	ldr	r0, [r3, #0]
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	6859      	ldr	r1, [r3, #4]
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	f000 fb6a 	bl	8009638 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2150      	movs	r1, #80	; 0x50
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	f000 fbc3 	bl	80096f6 <TIM_ITRx_SetConfig>
      break;
 8008f70:	e02c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6818      	ldr	r0, [r3, #0]
 8008f76:	683b      	ldr	r3, [r7, #0]
 8008f78:	6859      	ldr	r1, [r3, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	461a      	mov	r2, r3
 8008f80:	f000 fb89 	bl	8009696 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	2160      	movs	r1, #96	; 0x60
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 fbb3 	bl	80096f6 <TIM_ITRx_SetConfig>
      break;
 8008f90:	e01c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6818      	ldr	r0, [r3, #0]
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	6859      	ldr	r1, [r3, #4]
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	f000 fb4a 	bl	8009638 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2140      	movs	r1, #64	; 0x40
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 fba3 	bl	80096f6 <TIM_ITRx_SetConfig>
      break;
 8008fb0:	e00c      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	4619      	mov	r1, r3
 8008fbc:	4610      	mov	r0, r2
 8008fbe:	f000 fb9a 	bl	80096f6 <TIM_ITRx_SetConfig>
      break;
 8008fc2:	e003      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8008fc8:	e000      	b.n	8008fcc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008fca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	2201      	movs	r2, #1
 8008fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3710      	adds	r7, #16
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	fffeff88 	.word	0xfffeff88

08008fec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ff4:	bf00      	nop
 8008ff6:	370c      	adds	r7, #12
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009008:	bf00      	nop
 800900a:	370c      	adds	r7, #12
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr

08009014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009014:	b480      	push	{r7}
 8009016:	b083      	sub	sp, #12
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800901c:	bf00      	nop
 800901e:	370c      	adds	r7, #12
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009030:	bf00      	nop
 8009032:	370c      	adds	r7, #12
 8009034:	46bd      	mov	sp, r7
 8009036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903a:	4770      	bx	lr

0800903c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800903c:	b480      	push	{r7}
 800903e:	b085      	sub	sp, #20
 8009040:	af00      	add	r7, sp, #0
 8009042:	6078      	str	r0, [r7, #4]
 8009044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	4a40      	ldr	r2, [pc, #256]	; (8009150 <TIM_Base_SetConfig+0x114>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d013      	beq.n	800907c <TIM_Base_SetConfig+0x40>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800905a:	d00f      	beq.n	800907c <TIM_Base_SetConfig+0x40>
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	4a3d      	ldr	r2, [pc, #244]	; (8009154 <TIM_Base_SetConfig+0x118>)
 8009060:	4293      	cmp	r3, r2
 8009062:	d00b      	beq.n	800907c <TIM_Base_SetConfig+0x40>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a3c      	ldr	r2, [pc, #240]	; (8009158 <TIM_Base_SetConfig+0x11c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d007      	beq.n	800907c <TIM_Base_SetConfig+0x40>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a3b      	ldr	r2, [pc, #236]	; (800915c <TIM_Base_SetConfig+0x120>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_Base_SetConfig+0x40>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a3a      	ldr	r2, [pc, #232]	; (8009160 <TIM_Base_SetConfig+0x124>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d108      	bne.n	800908e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009082:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	685b      	ldr	r3, [r3, #4]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	4a2f      	ldr	r2, [pc, #188]	; (8009150 <TIM_Base_SetConfig+0x114>)
 8009092:	4293      	cmp	r3, r2
 8009094:	d02b      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909c:	d027      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	4a2c      	ldr	r2, [pc, #176]	; (8009154 <TIM_Base_SetConfig+0x118>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d023      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a2b      	ldr	r2, [pc, #172]	; (8009158 <TIM_Base_SetConfig+0x11c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d01f      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	4a2a      	ldr	r2, [pc, #168]	; (800915c <TIM_Base_SetConfig+0x120>)
 80090b2:	4293      	cmp	r3, r2
 80090b4:	d01b      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a29      	ldr	r2, [pc, #164]	; (8009160 <TIM_Base_SetConfig+0x124>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d017      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a28      	ldr	r2, [pc, #160]	; (8009164 <TIM_Base_SetConfig+0x128>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d013      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a27      	ldr	r2, [pc, #156]	; (8009168 <TIM_Base_SetConfig+0x12c>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d00f      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a26      	ldr	r2, [pc, #152]	; (800916c <TIM_Base_SetConfig+0x130>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d00b      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a25      	ldr	r2, [pc, #148]	; (8009170 <TIM_Base_SetConfig+0x134>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d007      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a24      	ldr	r2, [pc, #144]	; (8009174 <TIM_Base_SetConfig+0x138>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d003      	beq.n	80090ee <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a23      	ldr	r2, [pc, #140]	; (8009178 <TIM_Base_SetConfig+0x13c>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d108      	bne.n	8009100 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80090f6:	683b      	ldr	r3, [r7, #0]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009106:	683b      	ldr	r3, [r7, #0]
 8009108:	695b      	ldr	r3, [r3, #20]
 800910a:	4313      	orrs	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68fa      	ldr	r2, [r7, #12]
 8009112:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	689a      	ldr	r2, [r3, #8]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a0a      	ldr	r2, [pc, #40]	; (8009150 <TIM_Base_SetConfig+0x114>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d003      	beq.n	8009134 <TIM_Base_SetConfig+0xf8>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a0c      	ldr	r2, [pc, #48]	; (8009160 <TIM_Base_SetConfig+0x124>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d103      	bne.n	800913c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	691a      	ldr	r2, [r3, #16]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	615a      	str	r2, [r3, #20]
}
 8009142:	bf00      	nop
 8009144:	3714      	adds	r7, #20
 8009146:	46bd      	mov	sp, r7
 8009148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914c:	4770      	bx	lr
 800914e:	bf00      	nop
 8009150:	40010000 	.word	0x40010000
 8009154:	40000400 	.word	0x40000400
 8009158:	40000800 	.word	0x40000800
 800915c:	40000c00 	.word	0x40000c00
 8009160:	40010400 	.word	0x40010400
 8009164:	40014000 	.word	0x40014000
 8009168:	40014400 	.word	0x40014400
 800916c:	40014800 	.word	0x40014800
 8009170:	40001800 	.word	0x40001800
 8009174:	40001c00 	.word	0x40001c00
 8009178:	40002000 	.word	0x40002000

0800917c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6a1b      	ldr	r3, [r3, #32]
 800918a:	f023 0201 	bic.w	r2, r3, #1
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	685b      	ldr	r3, [r3, #4]
 800919c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80091a4:	68fa      	ldr	r2, [r7, #12]
 80091a6:	4b2b      	ldr	r3, [pc, #172]	; (8009254 <TIM_OC1_SetConfig+0xd8>)
 80091a8:	4013      	ands	r3, r2
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f023 0303 	bic.w	r3, r3, #3
 80091b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68fa      	ldr	r2, [r7, #12]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80091be:	697b      	ldr	r3, [r7, #20]
 80091c0:	f023 0302 	bic.w	r3, r3, #2
 80091c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	689b      	ldr	r3, [r3, #8]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	4313      	orrs	r3, r2
 80091ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	4a21      	ldr	r2, [pc, #132]	; (8009258 <TIM_OC1_SetConfig+0xdc>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d003      	beq.n	80091e0 <TIM_OC1_SetConfig+0x64>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	4a20      	ldr	r2, [pc, #128]	; (800925c <TIM_OC1_SetConfig+0xe0>)
 80091dc:	4293      	cmp	r3, r2
 80091de:	d10c      	bne.n	80091fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	f023 0308 	bic.w	r3, r3, #8
 80091e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80091f2:	697b      	ldr	r3, [r7, #20]
 80091f4:	f023 0304 	bic.w	r3, r3, #4
 80091f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	4a16      	ldr	r2, [pc, #88]	; (8009258 <TIM_OC1_SetConfig+0xdc>)
 80091fe:	4293      	cmp	r3, r2
 8009200:	d003      	beq.n	800920a <TIM_OC1_SetConfig+0x8e>
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	4a15      	ldr	r2, [pc, #84]	; (800925c <TIM_OC1_SetConfig+0xe0>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d111      	bne.n	800922e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800920a:	693b      	ldr	r3, [r7, #16]
 800920c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	695b      	ldr	r3, [r3, #20]
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	4313      	orrs	r3, r2
 8009222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009224:	683b      	ldr	r3, [r7, #0]
 8009226:	699b      	ldr	r3, [r3, #24]
 8009228:	693a      	ldr	r2, [r7, #16]
 800922a:	4313      	orrs	r3, r2
 800922c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	693a      	ldr	r2, [r7, #16]
 8009232:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	68fa      	ldr	r2, [r7, #12]
 8009238:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685a      	ldr	r2, [r3, #4]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	621a      	str	r2, [r3, #32]
}
 8009248:	bf00      	nop
 800924a:	371c      	adds	r7, #28
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	fffeff8f 	.word	0xfffeff8f
 8009258:	40010000 	.word	0x40010000
 800925c:	40010400 	.word	0x40010400

08009260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009260:	b480      	push	{r7}
 8009262:	b087      	sub	sp, #28
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
 8009268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a1b      	ldr	r3, [r3, #32]
 800926e:	f023 0210 	bic.w	r2, r3, #16
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a1b      	ldr	r3, [r3, #32]
 800927a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	685b      	ldr	r3, [r3, #4]
 8009280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	699b      	ldr	r3, [r3, #24]
 8009286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4b2e      	ldr	r3, [pc, #184]	; (8009344 <TIM_OC2_SetConfig+0xe4>)
 800928c:	4013      	ands	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f023 0320 	bic.w	r3, r3, #32
 80092aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	011b      	lsls	r3, r3, #4
 80092b2:	697a      	ldr	r2, [r7, #20]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a23      	ldr	r2, [pc, #140]	; (8009348 <TIM_OC2_SetConfig+0xe8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d003      	beq.n	80092c8 <TIM_OC2_SetConfig+0x68>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a22      	ldr	r2, [pc, #136]	; (800934c <TIM_OC2_SetConfig+0xec>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d10d      	bne.n	80092e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80092ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	68db      	ldr	r3, [r3, #12]
 80092d4:	011b      	lsls	r3, r3, #4
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80092e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	4a18      	ldr	r2, [pc, #96]	; (8009348 <TIM_OC2_SetConfig+0xe8>)
 80092e8:	4293      	cmp	r3, r2
 80092ea:	d003      	beq.n	80092f4 <TIM_OC2_SetConfig+0x94>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	4a17      	ldr	r2, [pc, #92]	; (800934c <TIM_OC2_SetConfig+0xec>)
 80092f0:	4293      	cmp	r3, r2
 80092f2:	d113      	bne.n	800931c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80092fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009302:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	695b      	ldr	r3, [r3, #20]
 8009308:	009b      	lsls	r3, r3, #2
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	4313      	orrs	r3, r2
 800930e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009310:	683b      	ldr	r3, [r7, #0]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	009b      	lsls	r3, r3, #2
 8009316:	693a      	ldr	r2, [r7, #16]
 8009318:	4313      	orrs	r3, r2
 800931a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	685a      	ldr	r2, [r3, #4]
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	697a      	ldr	r2, [r7, #20]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
 8009342:	bf00      	nop
 8009344:	feff8fff 	.word	0xfeff8fff
 8009348:	40010000 	.word	0x40010000
 800934c:	40010400 	.word	0x40010400

08009350 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6a1b      	ldr	r3, [r3, #32]
 800936a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	69db      	ldr	r3, [r3, #28]
 8009376:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009378:	68fa      	ldr	r2, [r7, #12]
 800937a:	4b2d      	ldr	r3, [pc, #180]	; (8009430 <TIM_OC3_SetConfig+0xe0>)
 800937c:	4013      	ands	r3, r2
 800937e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	f023 0303 	bic.w	r3, r3, #3
 8009386:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009388:	683b      	ldr	r3, [r7, #0]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68fa      	ldr	r2, [r7, #12]
 800938e:	4313      	orrs	r3, r2
 8009390:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009392:	697b      	ldr	r3, [r7, #20]
 8009394:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009398:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	021b      	lsls	r3, r3, #8
 80093a0:	697a      	ldr	r2, [r7, #20]
 80093a2:	4313      	orrs	r3, r2
 80093a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	4a22      	ldr	r2, [pc, #136]	; (8009434 <TIM_OC3_SetConfig+0xe4>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d003      	beq.n	80093b6 <TIM_OC3_SetConfig+0x66>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	4a21      	ldr	r2, [pc, #132]	; (8009438 <TIM_OC3_SetConfig+0xe8>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d10d      	bne.n	80093d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80093bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80093be:	683b      	ldr	r3, [r7, #0]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	021b      	lsls	r3, r3, #8
 80093c4:	697a      	ldr	r2, [r7, #20]
 80093c6:	4313      	orrs	r3, r2
 80093c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80093ca:	697b      	ldr	r3, [r7, #20]
 80093cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80093d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	4a17      	ldr	r2, [pc, #92]	; (8009434 <TIM_OC3_SetConfig+0xe4>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d003      	beq.n	80093e2 <TIM_OC3_SetConfig+0x92>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	4a16      	ldr	r2, [pc, #88]	; (8009438 <TIM_OC3_SetConfig+0xe8>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d113      	bne.n	800940a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80093ea:	693b      	ldr	r3, [r7, #16]
 80093ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80093f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80093f2:	683b      	ldr	r3, [r7, #0]
 80093f4:	695b      	ldr	r3, [r3, #20]
 80093f6:	011b      	lsls	r3, r3, #4
 80093f8:	693a      	ldr	r2, [r7, #16]
 80093fa:	4313      	orrs	r3, r2
 80093fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	699b      	ldr	r3, [r3, #24]
 8009402:	011b      	lsls	r3, r3, #4
 8009404:	693a      	ldr	r2, [r7, #16]
 8009406:	4313      	orrs	r3, r2
 8009408:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	693a      	ldr	r2, [r7, #16]
 800940e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	68fa      	ldr	r2, [r7, #12]
 8009414:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	685a      	ldr	r2, [r3, #4]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	697a      	ldr	r2, [r7, #20]
 8009422:	621a      	str	r2, [r3, #32]
}
 8009424:	bf00      	nop
 8009426:	371c      	adds	r7, #28
 8009428:	46bd      	mov	sp, r7
 800942a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942e:	4770      	bx	lr
 8009430:	fffeff8f 	.word	0xfffeff8f
 8009434:	40010000 	.word	0x40010000
 8009438:	40010400 	.word	0x40010400

0800943c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800943c:	b480      	push	{r7}
 800943e:	b087      	sub	sp, #28
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
 8009444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a1b      	ldr	r3, [r3, #32]
 800944a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	69db      	ldr	r3, [r3, #28]
 8009462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	4b1e      	ldr	r3, [pc, #120]	; (80094e0 <TIM_OC4_SetConfig+0xa4>)
 8009468:	4013      	ands	r3, r2
 800946a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	021b      	lsls	r3, r3, #8
 800947a:	68fa      	ldr	r2, [r7, #12]
 800947c:	4313      	orrs	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009486:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	031b      	lsls	r3, r3, #12
 800948e:	693a      	ldr	r2, [r7, #16]
 8009490:	4313      	orrs	r3, r2
 8009492:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	4a13      	ldr	r2, [pc, #76]	; (80094e4 <TIM_OC4_SetConfig+0xa8>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d003      	beq.n	80094a4 <TIM_OC4_SetConfig+0x68>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a12      	ldr	r2, [pc, #72]	; (80094e8 <TIM_OC4_SetConfig+0xac>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d109      	bne.n	80094b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80094aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	695b      	ldr	r3, [r3, #20]
 80094b0:	019b      	lsls	r3, r3, #6
 80094b2:	697a      	ldr	r2, [r7, #20]
 80094b4:	4313      	orrs	r3, r2
 80094b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	697a      	ldr	r2, [r7, #20]
 80094bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	693a      	ldr	r2, [r7, #16]
 80094d0:	621a      	str	r2, [r3, #32]
}
 80094d2:	bf00      	nop
 80094d4:	371c      	adds	r7, #28
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	feff8fff 	.word	0xfeff8fff
 80094e4:	40010000 	.word	0x40010000
 80094e8:	40010400 	.word	0x40010400

080094ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80094ec:	b480      	push	{r7}
 80094ee:	b087      	sub	sp, #28
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
 80094f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6a1b      	ldr	r3, [r3, #32]
 80094fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6a1b      	ldr	r3, [r3, #32]
 8009506:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	685b      	ldr	r3, [r3, #4]
 800950c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4b1b      	ldr	r3, [pc, #108]	; (8009584 <TIM_OC5_SetConfig+0x98>)
 8009518:	4013      	ands	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	68fa      	ldr	r2, [r7, #12]
 8009522:	4313      	orrs	r3, r2
 8009524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009526:	693b      	ldr	r3, [r7, #16]
 8009528:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800952c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800952e:	683b      	ldr	r3, [r7, #0]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	041b      	lsls	r3, r3, #16
 8009534:	693a      	ldr	r2, [r7, #16]
 8009536:	4313      	orrs	r3, r2
 8009538:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	4a12      	ldr	r2, [pc, #72]	; (8009588 <TIM_OC5_SetConfig+0x9c>)
 800953e:	4293      	cmp	r3, r2
 8009540:	d003      	beq.n	800954a <TIM_OC5_SetConfig+0x5e>
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	4a11      	ldr	r2, [pc, #68]	; (800958c <TIM_OC5_SetConfig+0xa0>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d109      	bne.n	800955e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009550:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	695b      	ldr	r3, [r3, #20]
 8009556:	021b      	lsls	r3, r3, #8
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	4313      	orrs	r3, r2
 800955c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	697a      	ldr	r2, [r7, #20]
 8009562:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800956a:	683b      	ldr	r3, [r7, #0]
 800956c:	685a      	ldr	r2, [r3, #4]
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	693a      	ldr	r2, [r7, #16]
 8009576:	621a      	str	r2, [r3, #32]
}
 8009578:	bf00      	nop
 800957a:	371c      	adds	r7, #28
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr
 8009584:	fffeff8f 	.word	0xfffeff8f
 8009588:	40010000 	.word	0x40010000
 800958c:	40010400 	.word	0x40010400

08009590 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009590:	b480      	push	{r7}
 8009592:	b087      	sub	sp, #28
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6a1b      	ldr	r3, [r3, #32]
 800959e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	4b1c      	ldr	r3, [pc, #112]	; (800962c <TIM_OC6_SetConfig+0x9c>)
 80095bc:	4013      	ands	r3, r2
 80095be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	021b      	lsls	r3, r3, #8
 80095c6:	68fa      	ldr	r2, [r7, #12]
 80095c8:	4313      	orrs	r3, r2
 80095ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80095cc:	693b      	ldr	r3, [r7, #16]
 80095ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80095d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	689b      	ldr	r3, [r3, #8]
 80095d8:	051b      	lsls	r3, r3, #20
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a13      	ldr	r2, [pc, #76]	; (8009630 <TIM_OC6_SetConfig+0xa0>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d003      	beq.n	80095f0 <TIM_OC6_SetConfig+0x60>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a12      	ldr	r2, [pc, #72]	; (8009634 <TIM_OC6_SetConfig+0xa4>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d109      	bne.n	8009604 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80095f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	695b      	ldr	r3, [r3, #20]
 80095fc:	029b      	lsls	r3, r3, #10
 80095fe:	697a      	ldr	r2, [r7, #20]
 8009600:	4313      	orrs	r3, r2
 8009602:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	697a      	ldr	r2, [r7, #20]
 8009608:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	693a      	ldr	r2, [r7, #16]
 800961c:	621a      	str	r2, [r3, #32]
}
 800961e:	bf00      	nop
 8009620:	371c      	adds	r7, #28
 8009622:	46bd      	mov	sp, r7
 8009624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009628:	4770      	bx	lr
 800962a:	bf00      	nop
 800962c:	feff8fff 	.word	0xfeff8fff
 8009630:	40010000 	.word	0x40010000
 8009634:	40010400 	.word	0x40010400

08009638 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009638:	b480      	push	{r7}
 800963a:	b087      	sub	sp, #28
 800963c:	af00      	add	r7, sp, #0
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	60b9      	str	r1, [r7, #8]
 8009642:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	6a1b      	ldr	r3, [r3, #32]
 8009648:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	6a1b      	ldr	r3, [r3, #32]
 800964e:	f023 0201 	bic.w	r2, r3, #1
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	699b      	ldr	r3, [r3, #24]
 800965a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800965c:	693b      	ldr	r3, [r7, #16]
 800965e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009662:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	011b      	lsls	r3, r3, #4
 8009668:	693a      	ldr	r2, [r7, #16]
 800966a:	4313      	orrs	r3, r2
 800966c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	f023 030a 	bic.w	r3, r3, #10
 8009674:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009676:	697a      	ldr	r2, [r7, #20]
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	4313      	orrs	r3, r2
 800967c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	693a      	ldr	r2, [r7, #16]
 8009682:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	697a      	ldr	r2, [r7, #20]
 8009688:	621a      	str	r2, [r3, #32]
}
 800968a:	bf00      	nop
 800968c:	371c      	adds	r7, #28
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr

08009696 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009696:	b480      	push	{r7}
 8009698:	b087      	sub	sp, #28
 800969a:	af00      	add	r7, sp, #0
 800969c:	60f8      	str	r0, [r7, #12]
 800969e:	60b9      	str	r1, [r7, #8]
 80096a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	f023 0210 	bic.w	r2, r3, #16
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	699b      	ldr	r3, [r3, #24]
 80096b2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6a1b      	ldr	r3, [r3, #32]
 80096b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80096c0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	031b      	lsls	r3, r3, #12
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80096cc:	693b      	ldr	r3, [r7, #16]
 80096ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80096d2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	011b      	lsls	r3, r3, #4
 80096d8:	693a      	ldr	r2, [r7, #16]
 80096da:	4313      	orrs	r3, r2
 80096dc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	697a      	ldr	r2, [r7, #20]
 80096e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr

080096f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80096f6:	b480      	push	{r7}
 80096f8:	b085      	sub	sp, #20
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800970c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800970e:	683a      	ldr	r2, [r7, #0]
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	4313      	orrs	r3, r2
 8009714:	f043 0307 	orr.w	r3, r3, #7
 8009718:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	609a      	str	r2, [r3, #8]
}
 8009720:	bf00      	nop
 8009722:	3714      	adds	r7, #20
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
 8009738:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689b      	ldr	r3, [r3, #8]
 800973e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009740:	697b      	ldr	r3, [r7, #20]
 8009742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009746:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	021a      	lsls	r2, r3, #8
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	431a      	orrs	r2, r3
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	4313      	orrs	r3, r2
 8009754:	697a      	ldr	r2, [r7, #20]
 8009756:	4313      	orrs	r3, r2
 8009758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	609a      	str	r2, [r3, #8]
}
 8009760:	bf00      	nop
 8009762:	371c      	adds	r7, #28
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr

0800976c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800976c:	b480      	push	{r7}
 800976e:	b087      	sub	sp, #28
 8009770:	af00      	add	r7, sp, #0
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	f003 031f 	and.w	r3, r3, #31
 800977e:	2201      	movs	r2, #1
 8009780:	fa02 f303 	lsl.w	r3, r2, r3
 8009784:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	6a1a      	ldr	r2, [r3, #32]
 800978a:	697b      	ldr	r3, [r7, #20]
 800978c:	43db      	mvns	r3, r3
 800978e:	401a      	ands	r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6a1a      	ldr	r2, [r3, #32]
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	f003 031f 	and.w	r3, r3, #31
 800979e:	6879      	ldr	r1, [r7, #4]
 80097a0:	fa01 f303 	lsl.w	r3, r1, r3
 80097a4:	431a      	orrs	r2, r3
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	621a      	str	r2, [r3, #32]
}
 80097aa:	bf00      	nop
 80097ac:	371c      	adds	r7, #28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b4:	4770      	bx	lr
	...

080097b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b085      	sub	sp, #20
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
 80097c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097c8:	2b01      	cmp	r3, #1
 80097ca:	d101      	bne.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80097cc:	2302      	movs	r3, #2
 80097ce:	e06d      	b.n	80098ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2202      	movs	r2, #2
 80097dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	685b      	ldr	r3, [r3, #4]
 80097e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	689b      	ldr	r3, [r3, #8]
 80097ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a30      	ldr	r2, [pc, #192]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d004      	beq.n	8009804 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a2f      	ldr	r2, [pc, #188]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d108      	bne.n	8009816 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800980a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	685b      	ldr	r3, [r3, #4]
 8009810:	68fa      	ldr	r2, [r7, #12]
 8009812:	4313      	orrs	r3, r2
 8009814:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800981c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	4313      	orrs	r3, r2
 8009826:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	68fa      	ldr	r2, [r7, #12]
 800982e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	4a20      	ldr	r2, [pc, #128]	; (80098b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009836:	4293      	cmp	r3, r2
 8009838:	d022      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009842:	d01d      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	4a1d      	ldr	r2, [pc, #116]	; (80098c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d018      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4a1c      	ldr	r2, [pc, #112]	; (80098c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009854:	4293      	cmp	r3, r2
 8009856:	d013      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a1a      	ldr	r2, [pc, #104]	; (80098c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800985e:	4293      	cmp	r3, r2
 8009860:	d00e      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	4a15      	ldr	r2, [pc, #84]	; (80098bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d009      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a16      	ldr	r2, [pc, #88]	; (80098cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d004      	beq.n	8009880 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	4a15      	ldr	r2, [pc, #84]	; (80098d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800987c:	4293      	cmp	r3, r2
 800987e:	d10c      	bne.n	800989a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009880:	68bb      	ldr	r3, [r7, #8]
 8009882:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009886:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	689b      	ldr	r3, [r3, #8]
 800988c:	68ba      	ldr	r2, [r7, #8]
 800988e:	4313      	orrs	r3, r2
 8009890:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	68ba      	ldr	r2, [r7, #8]
 8009898:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2201      	movs	r2, #1
 800989e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2200      	movs	r2, #0
 80098a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098aa:	2300      	movs	r3, #0
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3714      	adds	r7, #20
 80098b0:	46bd      	mov	sp, r7
 80098b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b6:	4770      	bx	lr
 80098b8:	40010000 	.word	0x40010000
 80098bc:	40010400 	.word	0x40010400
 80098c0:	40000400 	.word	0x40000400
 80098c4:	40000800 	.word	0x40000800
 80098c8:	40000c00 	.word	0x40000c00
 80098cc:	40014000 	.word	0x40014000
 80098d0:	40001800 	.word	0x40001800

080098d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr

080098e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80098e8:	b480      	push	{r7}
 80098ea:	b083      	sub	sp, #12
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80098f0:	bf00      	nop
 80098f2:	370c      	adds	r7, #12
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b083      	sub	sp, #12
 8009900:	af00      	add	r7, sp, #0
 8009902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr

08009910 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009910:	b580      	push	{r7, lr}
 8009912:	b082      	sub	sp, #8
 8009914:	af00      	add	r7, sp, #0
 8009916:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d101      	bne.n	8009922 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800991e:	2301      	movs	r3, #1
 8009920:	e040      	b.n	80099a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009926:	2b00      	cmp	r3, #0
 8009928:	d106      	bne.n	8009938 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2200      	movs	r2, #0
 800992e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7fb fada 	bl	8004eec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2224      	movs	r2, #36	; 0x24
 800993c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	681a      	ldr	r2, [r3, #0]
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	f022 0201 	bic.w	r2, r2, #1
 800994c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800994e:	6878      	ldr	r0, [r7, #4]
 8009950:	f000 f8c0 	bl	8009ad4 <UART_SetConfig>
 8009954:	4603      	mov	r3, r0
 8009956:	2b01      	cmp	r3, #1
 8009958:	d101      	bne.n	800995e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	e022      	b.n	80099a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009962:	2b00      	cmp	r3, #0
 8009964:	d002      	beq.n	800996c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fb18 	bl	8009f9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800997a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689a      	ldr	r2, [r3, #8]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800998a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	681a      	ldr	r2, [r3, #0]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f042 0201 	orr.w	r2, r2, #1
 800999a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 fb9f 	bl	800a0e0 <UART_CheckIdleState>
 80099a2:	4603      	mov	r3, r0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}

080099ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b08a      	sub	sp, #40	; 0x28
 80099b0:	af02      	add	r7, sp, #8
 80099b2:	60f8      	str	r0, [r7, #12]
 80099b4:	60b9      	str	r1, [r7, #8]
 80099b6:	603b      	str	r3, [r7, #0]
 80099b8:	4613      	mov	r3, r2
 80099ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099c0:	2b20      	cmp	r3, #32
 80099c2:	f040 8081 	bne.w	8009ac8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d002      	beq.n	80099d2 <HAL_UART_Transmit+0x26>
 80099cc:	88fb      	ldrh	r3, [r7, #6]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d101      	bne.n	80099d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e079      	b.n	8009aca <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80099dc:	2b01      	cmp	r3, #1
 80099de:	d101      	bne.n	80099e4 <HAL_UART_Transmit+0x38>
 80099e0:	2302      	movs	r3, #2
 80099e2:	e072      	b.n	8009aca <HAL_UART_Transmit+0x11e>
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	2201      	movs	r2, #1
 80099e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	2200      	movs	r2, #0
 80099f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2221      	movs	r2, #33	; 0x21
 80099f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80099fa:	f7fb fdfd 	bl	80055f8 <HAL_GetTick>
 80099fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	88fa      	ldrh	r2, [r7, #6]
 8009a04:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	88fa      	ldrh	r2, [r7, #6]
 8009a0c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	689b      	ldr	r3, [r3, #8]
 8009a14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009a18:	d108      	bne.n	8009a2c <HAL_UART_Transmit+0x80>
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	691b      	ldr	r3, [r3, #16]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d104      	bne.n	8009a2c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009a26:	68bb      	ldr	r3, [r7, #8]
 8009a28:	61bb      	str	r3, [r7, #24]
 8009a2a:	e003      	b.n	8009a34 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009a30:	2300      	movs	r3, #0
 8009a32:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	2200      	movs	r2, #0
 8009a38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009a3c:	e02c      	b.n	8009a98 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	697b      	ldr	r3, [r7, #20]
 8009a44:	2200      	movs	r2, #0
 8009a46:	2180      	movs	r1, #128	; 0x80
 8009a48:	68f8      	ldr	r0, [r7, #12]
 8009a4a:	f000 fb7c 	bl	800a146 <UART_WaitOnFlagUntilTimeout>
 8009a4e:	4603      	mov	r3, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d001      	beq.n	8009a58 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e038      	b.n	8009aca <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009a58:	69fb      	ldr	r3, [r7, #28]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	881b      	ldrh	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009a6c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	3302      	adds	r3, #2
 8009a72:	61bb      	str	r3, [r7, #24]
 8009a74:	e007      	b.n	8009a86 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009a76:	69fb      	ldr	r3, [r7, #28]
 8009a78:	781a      	ldrb	r2, [r3, #0]
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009a80:	69fb      	ldr	r3, [r7, #28]
 8009a82:	3301      	adds	r3, #1
 8009a84:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	d1cc      	bne.n	8009a3e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	9300      	str	r3, [sp, #0]
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	2140      	movs	r1, #64	; 0x40
 8009aae:	68f8      	ldr	r0, [r7, #12]
 8009ab0:	f000 fb49 	bl	800a146 <UART_WaitOnFlagUntilTimeout>
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d001      	beq.n	8009abe <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009aba:	2303      	movs	r3, #3
 8009abc:	e005      	b.n	8009aca <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2220      	movs	r2, #32
 8009ac2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	e000      	b.n	8009aca <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009ac8:	2302      	movs	r3, #2
  }
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	3720      	adds	r7, #32
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}
	...

08009ad4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b088      	sub	sp, #32
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009adc:	2300      	movs	r3, #0
 8009ade:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	689a      	ldr	r2, [r3, #8]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	691b      	ldr	r3, [r3, #16]
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	695b      	ldr	r3, [r3, #20]
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	69db      	ldr	r3, [r3, #28]
 8009af4:	4313      	orrs	r3, r2
 8009af6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	681a      	ldr	r2, [r3, #0]
 8009afe:	4ba6      	ldr	r3, [pc, #664]	; (8009d98 <UART_SetConfig+0x2c4>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	6812      	ldr	r2, [r2, #0]
 8009b06:	6979      	ldr	r1, [r7, #20]
 8009b08:	430b      	orrs	r3, r1
 8009b0a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	68da      	ldr	r2, [r3, #12]
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	430a      	orrs	r2, r1
 8009b20:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	699b      	ldr	r3, [r3, #24]
 8009b26:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	6a1b      	ldr	r3, [r3, #32]
 8009b2c:	697a      	ldr	r2, [r7, #20]
 8009b2e:	4313      	orrs	r3, r2
 8009b30:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	689b      	ldr	r3, [r3, #8]
 8009b38:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	430a      	orrs	r2, r1
 8009b44:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a94      	ldr	r2, [pc, #592]	; (8009d9c <UART_SetConfig+0x2c8>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d120      	bne.n	8009b92 <UART_SetConfig+0xbe>
 8009b50:	4b93      	ldr	r3, [pc, #588]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b56:	f003 0303 	and.w	r3, r3, #3
 8009b5a:	2b03      	cmp	r3, #3
 8009b5c:	d816      	bhi.n	8009b8c <UART_SetConfig+0xb8>
 8009b5e:	a201      	add	r2, pc, #4	; (adr r2, 8009b64 <UART_SetConfig+0x90>)
 8009b60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b64:	08009b75 	.word	0x08009b75
 8009b68:	08009b81 	.word	0x08009b81
 8009b6c:	08009b7b 	.word	0x08009b7b
 8009b70:	08009b87 	.word	0x08009b87
 8009b74:	2301      	movs	r3, #1
 8009b76:	77fb      	strb	r3, [r7, #31]
 8009b78:	e150      	b.n	8009e1c <UART_SetConfig+0x348>
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	77fb      	strb	r3, [r7, #31]
 8009b7e:	e14d      	b.n	8009e1c <UART_SetConfig+0x348>
 8009b80:	2304      	movs	r3, #4
 8009b82:	77fb      	strb	r3, [r7, #31]
 8009b84:	e14a      	b.n	8009e1c <UART_SetConfig+0x348>
 8009b86:	2308      	movs	r3, #8
 8009b88:	77fb      	strb	r3, [r7, #31]
 8009b8a:	e147      	b.n	8009e1c <UART_SetConfig+0x348>
 8009b8c:	2310      	movs	r3, #16
 8009b8e:	77fb      	strb	r3, [r7, #31]
 8009b90:	e144      	b.n	8009e1c <UART_SetConfig+0x348>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	4a83      	ldr	r2, [pc, #524]	; (8009da4 <UART_SetConfig+0x2d0>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d132      	bne.n	8009c02 <UART_SetConfig+0x12e>
 8009b9c:	4b80      	ldr	r3, [pc, #512]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ba2:	f003 030c 	and.w	r3, r3, #12
 8009ba6:	2b0c      	cmp	r3, #12
 8009ba8:	d828      	bhi.n	8009bfc <UART_SetConfig+0x128>
 8009baa:	a201      	add	r2, pc, #4	; (adr r2, 8009bb0 <UART_SetConfig+0xdc>)
 8009bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb0:	08009be5 	.word	0x08009be5
 8009bb4:	08009bfd 	.word	0x08009bfd
 8009bb8:	08009bfd 	.word	0x08009bfd
 8009bbc:	08009bfd 	.word	0x08009bfd
 8009bc0:	08009bf1 	.word	0x08009bf1
 8009bc4:	08009bfd 	.word	0x08009bfd
 8009bc8:	08009bfd 	.word	0x08009bfd
 8009bcc:	08009bfd 	.word	0x08009bfd
 8009bd0:	08009beb 	.word	0x08009beb
 8009bd4:	08009bfd 	.word	0x08009bfd
 8009bd8:	08009bfd 	.word	0x08009bfd
 8009bdc:	08009bfd 	.word	0x08009bfd
 8009be0:	08009bf7 	.word	0x08009bf7
 8009be4:	2300      	movs	r3, #0
 8009be6:	77fb      	strb	r3, [r7, #31]
 8009be8:	e118      	b.n	8009e1c <UART_SetConfig+0x348>
 8009bea:	2302      	movs	r3, #2
 8009bec:	77fb      	strb	r3, [r7, #31]
 8009bee:	e115      	b.n	8009e1c <UART_SetConfig+0x348>
 8009bf0:	2304      	movs	r3, #4
 8009bf2:	77fb      	strb	r3, [r7, #31]
 8009bf4:	e112      	b.n	8009e1c <UART_SetConfig+0x348>
 8009bf6:	2308      	movs	r3, #8
 8009bf8:	77fb      	strb	r3, [r7, #31]
 8009bfa:	e10f      	b.n	8009e1c <UART_SetConfig+0x348>
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	77fb      	strb	r3, [r7, #31]
 8009c00:	e10c      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	4a68      	ldr	r2, [pc, #416]	; (8009da8 <UART_SetConfig+0x2d4>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d120      	bne.n	8009c4e <UART_SetConfig+0x17a>
 8009c0c:	4b64      	ldr	r3, [pc, #400]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009c0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c12:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009c16:	2b30      	cmp	r3, #48	; 0x30
 8009c18:	d013      	beq.n	8009c42 <UART_SetConfig+0x16e>
 8009c1a:	2b30      	cmp	r3, #48	; 0x30
 8009c1c:	d814      	bhi.n	8009c48 <UART_SetConfig+0x174>
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d009      	beq.n	8009c36 <UART_SetConfig+0x162>
 8009c22:	2b20      	cmp	r3, #32
 8009c24:	d810      	bhi.n	8009c48 <UART_SetConfig+0x174>
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <UART_SetConfig+0x15c>
 8009c2a:	2b10      	cmp	r3, #16
 8009c2c:	d006      	beq.n	8009c3c <UART_SetConfig+0x168>
 8009c2e:	e00b      	b.n	8009c48 <UART_SetConfig+0x174>
 8009c30:	2300      	movs	r3, #0
 8009c32:	77fb      	strb	r3, [r7, #31]
 8009c34:	e0f2      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c36:	2302      	movs	r3, #2
 8009c38:	77fb      	strb	r3, [r7, #31]
 8009c3a:	e0ef      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c3c:	2304      	movs	r3, #4
 8009c3e:	77fb      	strb	r3, [r7, #31]
 8009c40:	e0ec      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c42:	2308      	movs	r3, #8
 8009c44:	77fb      	strb	r3, [r7, #31]
 8009c46:	e0e9      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c48:	2310      	movs	r3, #16
 8009c4a:	77fb      	strb	r3, [r7, #31]
 8009c4c:	e0e6      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	4a56      	ldr	r2, [pc, #344]	; (8009dac <UART_SetConfig+0x2d8>)
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d120      	bne.n	8009c9a <UART_SetConfig+0x1c6>
 8009c58:	4b51      	ldr	r3, [pc, #324]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009c5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c5e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009c62:	2bc0      	cmp	r3, #192	; 0xc0
 8009c64:	d013      	beq.n	8009c8e <UART_SetConfig+0x1ba>
 8009c66:	2bc0      	cmp	r3, #192	; 0xc0
 8009c68:	d814      	bhi.n	8009c94 <UART_SetConfig+0x1c0>
 8009c6a:	2b80      	cmp	r3, #128	; 0x80
 8009c6c:	d009      	beq.n	8009c82 <UART_SetConfig+0x1ae>
 8009c6e:	2b80      	cmp	r3, #128	; 0x80
 8009c70:	d810      	bhi.n	8009c94 <UART_SetConfig+0x1c0>
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d002      	beq.n	8009c7c <UART_SetConfig+0x1a8>
 8009c76:	2b40      	cmp	r3, #64	; 0x40
 8009c78:	d006      	beq.n	8009c88 <UART_SetConfig+0x1b4>
 8009c7a:	e00b      	b.n	8009c94 <UART_SetConfig+0x1c0>
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	77fb      	strb	r3, [r7, #31]
 8009c80:	e0cc      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c82:	2302      	movs	r3, #2
 8009c84:	77fb      	strb	r3, [r7, #31]
 8009c86:	e0c9      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c88:	2304      	movs	r3, #4
 8009c8a:	77fb      	strb	r3, [r7, #31]
 8009c8c:	e0c6      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c8e:	2308      	movs	r3, #8
 8009c90:	77fb      	strb	r3, [r7, #31]
 8009c92:	e0c3      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c94:	2310      	movs	r3, #16
 8009c96:	77fb      	strb	r3, [r7, #31]
 8009c98:	e0c0      	b.n	8009e1c <UART_SetConfig+0x348>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4a44      	ldr	r2, [pc, #272]	; (8009db0 <UART_SetConfig+0x2dc>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d125      	bne.n	8009cf0 <UART_SetConfig+0x21c>
 8009ca4:	4b3e      	ldr	r3, [pc, #248]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb2:	d017      	beq.n	8009ce4 <UART_SetConfig+0x210>
 8009cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009cb8:	d817      	bhi.n	8009cea <UART_SetConfig+0x216>
 8009cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cbe:	d00b      	beq.n	8009cd8 <UART_SetConfig+0x204>
 8009cc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009cc4:	d811      	bhi.n	8009cea <UART_SetConfig+0x216>
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d003      	beq.n	8009cd2 <UART_SetConfig+0x1fe>
 8009cca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009cce:	d006      	beq.n	8009cde <UART_SetConfig+0x20a>
 8009cd0:	e00b      	b.n	8009cea <UART_SetConfig+0x216>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	77fb      	strb	r3, [r7, #31]
 8009cd6:	e0a1      	b.n	8009e1c <UART_SetConfig+0x348>
 8009cd8:	2302      	movs	r3, #2
 8009cda:	77fb      	strb	r3, [r7, #31]
 8009cdc:	e09e      	b.n	8009e1c <UART_SetConfig+0x348>
 8009cde:	2304      	movs	r3, #4
 8009ce0:	77fb      	strb	r3, [r7, #31]
 8009ce2:	e09b      	b.n	8009e1c <UART_SetConfig+0x348>
 8009ce4:	2308      	movs	r3, #8
 8009ce6:	77fb      	strb	r3, [r7, #31]
 8009ce8:	e098      	b.n	8009e1c <UART_SetConfig+0x348>
 8009cea:	2310      	movs	r3, #16
 8009cec:	77fb      	strb	r3, [r7, #31]
 8009cee:	e095      	b.n	8009e1c <UART_SetConfig+0x348>
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a2f      	ldr	r2, [pc, #188]	; (8009db4 <UART_SetConfig+0x2e0>)
 8009cf6:	4293      	cmp	r3, r2
 8009cf8:	d125      	bne.n	8009d46 <UART_SetConfig+0x272>
 8009cfa:	4b29      	ldr	r3, [pc, #164]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009cfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d08:	d017      	beq.n	8009d3a <UART_SetConfig+0x266>
 8009d0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d0e:	d817      	bhi.n	8009d40 <UART_SetConfig+0x26c>
 8009d10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d14:	d00b      	beq.n	8009d2e <UART_SetConfig+0x25a>
 8009d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d1a:	d811      	bhi.n	8009d40 <UART_SetConfig+0x26c>
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d003      	beq.n	8009d28 <UART_SetConfig+0x254>
 8009d20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d24:	d006      	beq.n	8009d34 <UART_SetConfig+0x260>
 8009d26:	e00b      	b.n	8009d40 <UART_SetConfig+0x26c>
 8009d28:	2301      	movs	r3, #1
 8009d2a:	77fb      	strb	r3, [r7, #31]
 8009d2c:	e076      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d2e:	2302      	movs	r3, #2
 8009d30:	77fb      	strb	r3, [r7, #31]
 8009d32:	e073      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d34:	2304      	movs	r3, #4
 8009d36:	77fb      	strb	r3, [r7, #31]
 8009d38:	e070      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d3a:	2308      	movs	r3, #8
 8009d3c:	77fb      	strb	r3, [r7, #31]
 8009d3e:	e06d      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d40:	2310      	movs	r3, #16
 8009d42:	77fb      	strb	r3, [r7, #31]
 8009d44:	e06a      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a1b      	ldr	r2, [pc, #108]	; (8009db8 <UART_SetConfig+0x2e4>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d138      	bne.n	8009dc2 <UART_SetConfig+0x2ee>
 8009d50:	4b13      	ldr	r3, [pc, #76]	; (8009da0 <UART_SetConfig+0x2cc>)
 8009d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009d5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d5e:	d017      	beq.n	8009d90 <UART_SetConfig+0x2bc>
 8009d60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009d64:	d82a      	bhi.n	8009dbc <UART_SetConfig+0x2e8>
 8009d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d6a:	d00b      	beq.n	8009d84 <UART_SetConfig+0x2b0>
 8009d6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d70:	d824      	bhi.n	8009dbc <UART_SetConfig+0x2e8>
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d003      	beq.n	8009d7e <UART_SetConfig+0x2aa>
 8009d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d7a:	d006      	beq.n	8009d8a <UART_SetConfig+0x2b6>
 8009d7c:	e01e      	b.n	8009dbc <UART_SetConfig+0x2e8>
 8009d7e:	2300      	movs	r3, #0
 8009d80:	77fb      	strb	r3, [r7, #31]
 8009d82:	e04b      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d84:	2302      	movs	r3, #2
 8009d86:	77fb      	strb	r3, [r7, #31]
 8009d88:	e048      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d8a:	2304      	movs	r3, #4
 8009d8c:	77fb      	strb	r3, [r7, #31]
 8009d8e:	e045      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d90:	2308      	movs	r3, #8
 8009d92:	77fb      	strb	r3, [r7, #31]
 8009d94:	e042      	b.n	8009e1c <UART_SetConfig+0x348>
 8009d96:	bf00      	nop
 8009d98:	efff69f3 	.word	0xefff69f3
 8009d9c:	40011000 	.word	0x40011000
 8009da0:	40023800 	.word	0x40023800
 8009da4:	40004400 	.word	0x40004400
 8009da8:	40004800 	.word	0x40004800
 8009dac:	40004c00 	.word	0x40004c00
 8009db0:	40005000 	.word	0x40005000
 8009db4:	40011400 	.word	0x40011400
 8009db8:	40007800 	.word	0x40007800
 8009dbc:	2310      	movs	r3, #16
 8009dbe:	77fb      	strb	r3, [r7, #31]
 8009dc0:	e02c      	b.n	8009e1c <UART_SetConfig+0x348>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	4a72      	ldr	r2, [pc, #456]	; (8009f90 <UART_SetConfig+0x4bc>)
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d125      	bne.n	8009e18 <UART_SetConfig+0x344>
 8009dcc:	4b71      	ldr	r3, [pc, #452]	; (8009f94 <UART_SetConfig+0x4c0>)
 8009dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dd2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009dd6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009dda:	d017      	beq.n	8009e0c <UART_SetConfig+0x338>
 8009ddc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009de0:	d817      	bhi.n	8009e12 <UART_SetConfig+0x33e>
 8009de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009de6:	d00b      	beq.n	8009e00 <UART_SetConfig+0x32c>
 8009de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009dec:	d811      	bhi.n	8009e12 <UART_SetConfig+0x33e>
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d003      	beq.n	8009dfa <UART_SetConfig+0x326>
 8009df2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009df6:	d006      	beq.n	8009e06 <UART_SetConfig+0x332>
 8009df8:	e00b      	b.n	8009e12 <UART_SetConfig+0x33e>
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	77fb      	strb	r3, [r7, #31]
 8009dfe:	e00d      	b.n	8009e1c <UART_SetConfig+0x348>
 8009e00:	2302      	movs	r3, #2
 8009e02:	77fb      	strb	r3, [r7, #31]
 8009e04:	e00a      	b.n	8009e1c <UART_SetConfig+0x348>
 8009e06:	2304      	movs	r3, #4
 8009e08:	77fb      	strb	r3, [r7, #31]
 8009e0a:	e007      	b.n	8009e1c <UART_SetConfig+0x348>
 8009e0c:	2308      	movs	r3, #8
 8009e0e:	77fb      	strb	r3, [r7, #31]
 8009e10:	e004      	b.n	8009e1c <UART_SetConfig+0x348>
 8009e12:	2310      	movs	r3, #16
 8009e14:	77fb      	strb	r3, [r7, #31]
 8009e16:	e001      	b.n	8009e1c <UART_SetConfig+0x348>
 8009e18:	2310      	movs	r3, #16
 8009e1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	69db      	ldr	r3, [r3, #28]
 8009e20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009e24:	d15b      	bne.n	8009ede <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8009e26:	7ffb      	ldrb	r3, [r7, #31]
 8009e28:	2b08      	cmp	r3, #8
 8009e2a:	d828      	bhi.n	8009e7e <UART_SetConfig+0x3aa>
 8009e2c:	a201      	add	r2, pc, #4	; (adr r2, 8009e34 <UART_SetConfig+0x360>)
 8009e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e32:	bf00      	nop
 8009e34:	08009e59 	.word	0x08009e59
 8009e38:	08009e61 	.word	0x08009e61
 8009e3c:	08009e69 	.word	0x08009e69
 8009e40:	08009e7f 	.word	0x08009e7f
 8009e44:	08009e6f 	.word	0x08009e6f
 8009e48:	08009e7f 	.word	0x08009e7f
 8009e4c:	08009e7f 	.word	0x08009e7f
 8009e50:	08009e7f 	.word	0x08009e7f
 8009e54:	08009e77 	.word	0x08009e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009e58:	f7fd ff0a 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 8009e5c:	61b8      	str	r0, [r7, #24]
        break;
 8009e5e:	e013      	b.n	8009e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009e60:	f7fd ff1a 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 8009e64:	61b8      	str	r0, [r7, #24]
        break;
 8009e66:	e00f      	b.n	8009e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009e68:	4b4b      	ldr	r3, [pc, #300]	; (8009f98 <UART_SetConfig+0x4c4>)
 8009e6a:	61bb      	str	r3, [r7, #24]
        break;
 8009e6c:	e00c      	b.n	8009e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009e6e:	f7fd fded 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009e72:	61b8      	str	r0, [r7, #24]
        break;
 8009e74:	e008      	b.n	8009e88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e7a:	61bb      	str	r3, [r7, #24]
        break;
 8009e7c:	e004      	b.n	8009e88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009e7e:	2300      	movs	r3, #0
 8009e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	77bb      	strb	r3, [r7, #30]
        break;
 8009e86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d074      	beq.n	8009f78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	005a      	lsls	r2, r3, #1
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	685b      	ldr	r3, [r3, #4]
 8009e96:	085b      	lsrs	r3, r3, #1
 8009e98:	441a      	add	r2, r3
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	685b      	ldr	r3, [r3, #4]
 8009e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ea2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	2b0f      	cmp	r3, #15
 8009ea8:	d916      	bls.n	8009ed8 <UART_SetConfig+0x404>
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009eb0:	d212      	bcs.n	8009ed8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	b29b      	uxth	r3, r3
 8009eb6:	f023 030f 	bic.w	r3, r3, #15
 8009eba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009ebc:	693b      	ldr	r3, [r7, #16]
 8009ebe:	085b      	lsrs	r3, r3, #1
 8009ec0:	b29b      	uxth	r3, r3
 8009ec2:	f003 0307 	and.w	r3, r3, #7
 8009ec6:	b29a      	uxth	r2, r3
 8009ec8:	89fb      	ldrh	r3, [r7, #14]
 8009eca:	4313      	orrs	r3, r2
 8009ecc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	89fa      	ldrh	r2, [r7, #14]
 8009ed4:	60da      	str	r2, [r3, #12]
 8009ed6:	e04f      	b.n	8009f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009ed8:	2301      	movs	r3, #1
 8009eda:	77bb      	strb	r3, [r7, #30]
 8009edc:	e04c      	b.n	8009f78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009ede:	7ffb      	ldrb	r3, [r7, #31]
 8009ee0:	2b08      	cmp	r3, #8
 8009ee2:	d828      	bhi.n	8009f36 <UART_SetConfig+0x462>
 8009ee4:	a201      	add	r2, pc, #4	; (adr r2, 8009eec <UART_SetConfig+0x418>)
 8009ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eea:	bf00      	nop
 8009eec:	08009f11 	.word	0x08009f11
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	08009f37 	.word	0x08009f37
 8009efc:	08009f27 	.word	0x08009f27
 8009f00:	08009f37 	.word	0x08009f37
 8009f04:	08009f37 	.word	0x08009f37
 8009f08:	08009f37 	.word	0x08009f37
 8009f0c:	08009f2f 	.word	0x08009f2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f10:	f7fd feae 	bl	8007c70 <HAL_RCC_GetPCLK1Freq>
 8009f14:	61b8      	str	r0, [r7, #24]
        break;
 8009f16:	e013      	b.n	8009f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009f18:	f7fd febe 	bl	8007c98 <HAL_RCC_GetPCLK2Freq>
 8009f1c:	61b8      	str	r0, [r7, #24]
        break;
 8009f1e:	e00f      	b.n	8009f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f20:	4b1d      	ldr	r3, [pc, #116]	; (8009f98 <UART_SetConfig+0x4c4>)
 8009f22:	61bb      	str	r3, [r7, #24]
        break;
 8009f24:	e00c      	b.n	8009f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f26:	f7fd fd91 	bl	8007a4c <HAL_RCC_GetSysClockFreq>
 8009f2a:	61b8      	str	r0, [r7, #24]
        break;
 8009f2c:	e008      	b.n	8009f40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f32:	61bb      	str	r3, [r7, #24]
        break;
 8009f34:	e004      	b.n	8009f40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8009f36:	2300      	movs	r3, #0
 8009f38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	77bb      	strb	r3, [r7, #30]
        break;
 8009f3e:	bf00      	nop
    }

    if (pclk != 0U)
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d018      	beq.n	8009f78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	685b      	ldr	r3, [r3, #4]
 8009f4a:	085a      	lsrs	r2, r3, #1
 8009f4c:	69bb      	ldr	r3, [r7, #24]
 8009f4e:	441a      	add	r2, r3
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	685b      	ldr	r3, [r3, #4]
 8009f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f5a:	693b      	ldr	r3, [r7, #16]
 8009f5c:	2b0f      	cmp	r3, #15
 8009f5e:	d909      	bls.n	8009f74 <UART_SetConfig+0x4a0>
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f66:	d205      	bcs.n	8009f74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009f68:	693b      	ldr	r3, [r7, #16]
 8009f6a:	b29a      	uxth	r2, r3
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60da      	str	r2, [r3, #12]
 8009f72:	e001      	b.n	8009f78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009f74:	2301      	movs	r3, #1
 8009f76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2200      	movs	r2, #0
 8009f82:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009f84:	7fbb      	ldrb	r3, [r7, #30]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3720      	adds	r7, #32
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	40007c00 	.word	0x40007c00
 8009f94:	40023800 	.word	0x40023800
 8009f98:	00f42400 	.word	0x00f42400

08009f9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009f9c:	b480      	push	{r7}
 8009f9e:	b083      	sub	sp, #12
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fa8:	f003 0301 	and.w	r3, r3, #1
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d00a      	beq.n	8009fc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	430a      	orrs	r2, r1
 8009fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	f003 0302 	and.w	r3, r3, #2
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00a      	beq.n	8009fe8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	430a      	orrs	r2, r1
 8009fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fec:	f003 0304 	and.w	r3, r3, #4
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d00a      	beq.n	800a00a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	430a      	orrs	r2, r1
 800a008:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	2b00      	cmp	r3, #0
 800a014:	d00a      	beq.n	800a02c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	685b      	ldr	r3, [r3, #4]
 800a01c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	430a      	orrs	r2, r1
 800a02a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a030:	f003 0310 	and.w	r3, r3, #16
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00a      	beq.n	800a04e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	430a      	orrs	r2, r1
 800a04c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a052:	f003 0320 	and.w	r3, r3, #32
 800a056:	2b00      	cmp	r3, #0
 800a058:	d00a      	beq.n	800a070 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	689b      	ldr	r3, [r3, #8]
 800a060:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	430a      	orrs	r2, r1
 800a06e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d01a      	beq.n	800a0b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	430a      	orrs	r2, r1
 800a090:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a09a:	d10a      	bne.n	800a0b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	685b      	ldr	r3, [r3, #4]
 800a0a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	430a      	orrs	r2, r1
 800a0b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00a      	beq.n	800a0d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	430a      	orrs	r2, r1
 800a0d2:	605a      	str	r2, [r3, #4]
  }
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a0e0:	b580      	push	{r7, lr}
 800a0e2:	b086      	sub	sp, #24
 800a0e4:	af02      	add	r7, sp, #8
 800a0e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2200      	movs	r2, #0
 800a0ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a0f0:	f7fb fa82 	bl	80055f8 <HAL_GetTick>
 800a0f4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f003 0308 	and.w	r3, r3, #8
 800a100:	2b08      	cmp	r3, #8
 800a102:	d10e      	bne.n	800a122 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a104:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a108:	9300      	str	r3, [sp, #0]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f817 	bl	800a146 <UART_WaitOnFlagUntilTimeout>
 800a118:	4603      	mov	r3, r0
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d001      	beq.n	800a122 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a11e:	2303      	movs	r3, #3
 800a120:	e00d      	b.n	800a13e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2220      	movs	r2, #32
 800a12c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2200      	movs	r2, #0
 800a138:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	3710      	adds	r7, #16
 800a142:	46bd      	mov	sp, r7
 800a144:	bd80      	pop	{r7, pc}

0800a146 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a146:	b580      	push	{r7, lr}
 800a148:	b09c      	sub	sp, #112	; 0x70
 800a14a:	af00      	add	r7, sp, #0
 800a14c:	60f8      	str	r0, [r7, #12]
 800a14e:	60b9      	str	r1, [r7, #8]
 800a150:	603b      	str	r3, [r7, #0]
 800a152:	4613      	mov	r3, r2
 800a154:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a156:	e0a5      	b.n	800a2a4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a158:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a15a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a15e:	f000 80a1 	beq.w	800a2a4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a162:	f7fb fa49 	bl	80055f8 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a16e:	429a      	cmp	r2, r3
 800a170:	d302      	bcc.n	800a178 <UART_WaitOnFlagUntilTimeout+0x32>
 800a172:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a174:	2b00      	cmp	r3, #0
 800a176:	d13e      	bne.n	800a1f6 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a17e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a180:	e853 3f00 	ldrex	r3, [r3]
 800a184:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a186:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a188:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a18c:	667b      	str	r3, [r7, #100]	; 0x64
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	461a      	mov	r2, r3
 800a194:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a196:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a198:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a19a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a19c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a19e:	e841 2300 	strex	r3, r2, [r1]
 800a1a2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d1e6      	bne.n	800a178 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	3308      	adds	r3, #8
 800a1b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1b4:	e853 3f00 	ldrex	r3, [r3]
 800a1b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1bc:	f023 0301 	bic.w	r3, r3, #1
 800a1c0:	663b      	str	r3, [r7, #96]	; 0x60
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	3308      	adds	r3, #8
 800a1c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a1ca:	64ba      	str	r2, [r7, #72]	; 0x48
 800a1cc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a1d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a1d2:	e841 2300 	strex	r3, r2, [r1]
 800a1d6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a1d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d1e5      	bne.n	800a1aa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a1f2:	2303      	movs	r3, #3
 800a1f4:	e067      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	681b      	ldr	r3, [r3, #0]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	f003 0304 	and.w	r3, r3, #4
 800a200:	2b00      	cmp	r3, #0
 800a202:	d04f      	beq.n	800a2a4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	69db      	ldr	r3, [r3, #28]
 800a20a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a20e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a212:	d147      	bne.n	800a2a4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a21c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a226:	e853 3f00 	ldrex	r3, [r3]
 800a22a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a232:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	461a      	mov	r2, r3
 800a23a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a23c:	637b      	str	r3, [r7, #52]	; 0x34
 800a23e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a240:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a242:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a244:	e841 2300 	strex	r3, r2, [r1]
 800a248:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a24a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d1e6      	bne.n	800a21e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	3308      	adds	r3, #8
 800a256:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a258:	697b      	ldr	r3, [r7, #20]
 800a25a:	e853 3f00 	ldrex	r3, [r3]
 800a25e:	613b      	str	r3, [r7, #16]
   return(result);
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f023 0301 	bic.w	r3, r3, #1
 800a266:	66bb      	str	r3, [r7, #104]	; 0x68
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	3308      	adds	r3, #8
 800a26e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a270:	623a      	str	r2, [r7, #32]
 800a272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a274:	69f9      	ldr	r1, [r7, #28]
 800a276:	6a3a      	ldr	r2, [r7, #32]
 800a278:	e841 2300 	strex	r3, r2, [r1]
 800a27c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a27e:	69bb      	ldr	r3, [r7, #24]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e5      	bne.n	800a250 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2220      	movs	r2, #32
 800a288:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	2220      	movs	r2, #32
 800a28e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	2220      	movs	r2, #32
 800a294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	2200      	movs	r2, #0
 800a29c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a2a0:	2303      	movs	r3, #3
 800a2a2:	e010      	b.n	800a2c6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	69da      	ldr	r2, [r3, #28]
 800a2aa:	68bb      	ldr	r3, [r7, #8]
 800a2ac:	4013      	ands	r3, r2
 800a2ae:	68ba      	ldr	r2, [r7, #8]
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	bf0c      	ite	eq
 800a2b4:	2301      	moveq	r3, #1
 800a2b6:	2300      	movne	r3, #0
 800a2b8:	b2db      	uxtb	r3, r3
 800a2ba:	461a      	mov	r2, r3
 800a2bc:	79fb      	ldrb	r3, [r7, #7]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	f43f af4a 	beq.w	800a158 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a2c4:	2300      	movs	r3, #0
}
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	3770      	adds	r7, #112	; 0x70
 800a2ca:	46bd      	mov	sp, r7
 800a2cc:	bd80      	pop	{r7, pc}
	...

0800a2d0 <__errno>:
 800a2d0:	4b01      	ldr	r3, [pc, #4]	; (800a2d8 <__errno+0x8>)
 800a2d2:	6818      	ldr	r0, [r3, #0]
 800a2d4:	4770      	bx	lr
 800a2d6:	bf00      	nop
 800a2d8:	20000074 	.word	0x20000074

0800a2dc <__libc_init_array>:
 800a2dc:	b570      	push	{r4, r5, r6, lr}
 800a2de:	4d0d      	ldr	r5, [pc, #52]	; (800a314 <__libc_init_array+0x38>)
 800a2e0:	4c0d      	ldr	r4, [pc, #52]	; (800a318 <__libc_init_array+0x3c>)
 800a2e2:	1b64      	subs	r4, r4, r5
 800a2e4:	10a4      	asrs	r4, r4, #2
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	42a6      	cmp	r6, r4
 800a2ea:	d109      	bne.n	800a300 <__libc_init_array+0x24>
 800a2ec:	4d0b      	ldr	r5, [pc, #44]	; (800a31c <__libc_init_array+0x40>)
 800a2ee:	4c0c      	ldr	r4, [pc, #48]	; (800a320 <__libc_init_array+0x44>)
 800a2f0:	f002 fdc4 	bl	800ce7c <_init>
 800a2f4:	1b64      	subs	r4, r4, r5
 800a2f6:	10a4      	asrs	r4, r4, #2
 800a2f8:	2600      	movs	r6, #0
 800a2fa:	42a6      	cmp	r6, r4
 800a2fc:	d105      	bne.n	800a30a <__libc_init_array+0x2e>
 800a2fe:	bd70      	pop	{r4, r5, r6, pc}
 800a300:	f855 3b04 	ldr.w	r3, [r5], #4
 800a304:	4798      	blx	r3
 800a306:	3601      	adds	r6, #1
 800a308:	e7ee      	b.n	800a2e8 <__libc_init_array+0xc>
 800a30a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a30e:	4798      	blx	r3
 800a310:	3601      	adds	r6, #1
 800a312:	e7f2      	b.n	800a2fa <__libc_init_array+0x1e>
 800a314:	0800d3bc 	.word	0x0800d3bc
 800a318:	0800d3bc 	.word	0x0800d3bc
 800a31c:	0800d3bc 	.word	0x0800d3bc
 800a320:	0800d3c0 	.word	0x0800d3c0

0800a324 <memset>:
 800a324:	4402      	add	r2, r0
 800a326:	4603      	mov	r3, r0
 800a328:	4293      	cmp	r3, r2
 800a32a:	d100      	bne.n	800a32e <memset+0xa>
 800a32c:	4770      	bx	lr
 800a32e:	f803 1b01 	strb.w	r1, [r3], #1
 800a332:	e7f9      	b.n	800a328 <memset+0x4>

0800a334 <__cvt>:
 800a334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a338:	ec55 4b10 	vmov	r4, r5, d0
 800a33c:	2d00      	cmp	r5, #0
 800a33e:	460e      	mov	r6, r1
 800a340:	4619      	mov	r1, r3
 800a342:	462b      	mov	r3, r5
 800a344:	bfbb      	ittet	lt
 800a346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a34a:	461d      	movlt	r5, r3
 800a34c:	2300      	movge	r3, #0
 800a34e:	232d      	movlt	r3, #45	; 0x2d
 800a350:	700b      	strb	r3, [r1, #0]
 800a352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a358:	4691      	mov	r9, r2
 800a35a:	f023 0820 	bic.w	r8, r3, #32
 800a35e:	bfbc      	itt	lt
 800a360:	4622      	movlt	r2, r4
 800a362:	4614      	movlt	r4, r2
 800a364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a368:	d005      	beq.n	800a376 <__cvt+0x42>
 800a36a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a36e:	d100      	bne.n	800a372 <__cvt+0x3e>
 800a370:	3601      	adds	r6, #1
 800a372:	2102      	movs	r1, #2
 800a374:	e000      	b.n	800a378 <__cvt+0x44>
 800a376:	2103      	movs	r1, #3
 800a378:	ab03      	add	r3, sp, #12
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	ab02      	add	r3, sp, #8
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	ec45 4b10 	vmov	d0, r4, r5
 800a384:	4653      	mov	r3, sl
 800a386:	4632      	mov	r2, r6
 800a388:	f000 fe1a 	bl	800afc0 <_dtoa_r>
 800a38c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a390:	4607      	mov	r7, r0
 800a392:	d102      	bne.n	800a39a <__cvt+0x66>
 800a394:	f019 0f01 	tst.w	r9, #1
 800a398:	d022      	beq.n	800a3e0 <__cvt+0xac>
 800a39a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a39e:	eb07 0906 	add.w	r9, r7, r6
 800a3a2:	d110      	bne.n	800a3c6 <__cvt+0x92>
 800a3a4:	783b      	ldrb	r3, [r7, #0]
 800a3a6:	2b30      	cmp	r3, #48	; 0x30
 800a3a8:	d10a      	bne.n	800a3c0 <__cvt+0x8c>
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	4620      	mov	r0, r4
 800a3b0:	4629      	mov	r1, r5
 800a3b2:	f7f6 fba9 	bl	8000b08 <__aeabi_dcmpeq>
 800a3b6:	b918      	cbnz	r0, 800a3c0 <__cvt+0x8c>
 800a3b8:	f1c6 0601 	rsb	r6, r6, #1
 800a3bc:	f8ca 6000 	str.w	r6, [sl]
 800a3c0:	f8da 3000 	ldr.w	r3, [sl]
 800a3c4:	4499      	add	r9, r3
 800a3c6:	2200      	movs	r2, #0
 800a3c8:	2300      	movs	r3, #0
 800a3ca:	4620      	mov	r0, r4
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	f7f6 fb9b 	bl	8000b08 <__aeabi_dcmpeq>
 800a3d2:	b108      	cbz	r0, 800a3d8 <__cvt+0xa4>
 800a3d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3d8:	2230      	movs	r2, #48	; 0x30
 800a3da:	9b03      	ldr	r3, [sp, #12]
 800a3dc:	454b      	cmp	r3, r9
 800a3de:	d307      	bcc.n	800a3f0 <__cvt+0xbc>
 800a3e0:	9b03      	ldr	r3, [sp, #12]
 800a3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3e4:	1bdb      	subs	r3, r3, r7
 800a3e6:	4638      	mov	r0, r7
 800a3e8:	6013      	str	r3, [r2, #0]
 800a3ea:	b004      	add	sp, #16
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	1c59      	adds	r1, r3, #1
 800a3f2:	9103      	str	r1, [sp, #12]
 800a3f4:	701a      	strb	r2, [r3, #0]
 800a3f6:	e7f0      	b.n	800a3da <__cvt+0xa6>

0800a3f8 <__exponent>:
 800a3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2900      	cmp	r1, #0
 800a3fe:	bfb8      	it	lt
 800a400:	4249      	neglt	r1, r1
 800a402:	f803 2b02 	strb.w	r2, [r3], #2
 800a406:	bfb4      	ite	lt
 800a408:	222d      	movlt	r2, #45	; 0x2d
 800a40a:	222b      	movge	r2, #43	; 0x2b
 800a40c:	2909      	cmp	r1, #9
 800a40e:	7042      	strb	r2, [r0, #1]
 800a410:	dd2a      	ble.n	800a468 <__exponent+0x70>
 800a412:	f10d 0407 	add.w	r4, sp, #7
 800a416:	46a4      	mov	ip, r4
 800a418:	270a      	movs	r7, #10
 800a41a:	46a6      	mov	lr, r4
 800a41c:	460a      	mov	r2, r1
 800a41e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a422:	fb07 1516 	mls	r5, r7, r6, r1
 800a426:	3530      	adds	r5, #48	; 0x30
 800a428:	2a63      	cmp	r2, #99	; 0x63
 800a42a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a42e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a432:	4631      	mov	r1, r6
 800a434:	dcf1      	bgt.n	800a41a <__exponent+0x22>
 800a436:	3130      	adds	r1, #48	; 0x30
 800a438:	f1ae 0502 	sub.w	r5, lr, #2
 800a43c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a440:	1c44      	adds	r4, r0, #1
 800a442:	4629      	mov	r1, r5
 800a444:	4561      	cmp	r1, ip
 800a446:	d30a      	bcc.n	800a45e <__exponent+0x66>
 800a448:	f10d 0209 	add.w	r2, sp, #9
 800a44c:	eba2 020e 	sub.w	r2, r2, lr
 800a450:	4565      	cmp	r5, ip
 800a452:	bf88      	it	hi
 800a454:	2200      	movhi	r2, #0
 800a456:	4413      	add	r3, r2
 800a458:	1a18      	subs	r0, r3, r0
 800a45a:	b003      	add	sp, #12
 800a45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a462:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a466:	e7ed      	b.n	800a444 <__exponent+0x4c>
 800a468:	2330      	movs	r3, #48	; 0x30
 800a46a:	3130      	adds	r1, #48	; 0x30
 800a46c:	7083      	strb	r3, [r0, #2]
 800a46e:	70c1      	strb	r1, [r0, #3]
 800a470:	1d03      	adds	r3, r0, #4
 800a472:	e7f1      	b.n	800a458 <__exponent+0x60>

0800a474 <_printf_float>:
 800a474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a478:	ed2d 8b02 	vpush	{d8}
 800a47c:	b08d      	sub	sp, #52	; 0x34
 800a47e:	460c      	mov	r4, r1
 800a480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a484:	4616      	mov	r6, r2
 800a486:	461f      	mov	r7, r3
 800a488:	4605      	mov	r5, r0
 800a48a:	f001 fd3f 	bl	800bf0c <_localeconv_r>
 800a48e:	f8d0 a000 	ldr.w	sl, [r0]
 800a492:	4650      	mov	r0, sl
 800a494:	f7f5 febc 	bl	8000210 <strlen>
 800a498:	2300      	movs	r3, #0
 800a49a:	930a      	str	r3, [sp, #40]	; 0x28
 800a49c:	6823      	ldr	r3, [r4, #0]
 800a49e:	9305      	str	r3, [sp, #20]
 800a4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a4a8:	3307      	adds	r3, #7
 800a4aa:	f023 0307 	bic.w	r3, r3, #7
 800a4ae:	f103 0208 	add.w	r2, r3, #8
 800a4b2:	f8c8 2000 	str.w	r2, [r8]
 800a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a4be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a4c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4c6:	9307      	str	r3, [sp, #28]
 800a4c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4cc:	ee08 0a10 	vmov	s16, r0
 800a4d0:	4b9f      	ldr	r3, [pc, #636]	; (800a750 <_printf_float+0x2dc>)
 800a4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4da:	f7f6 fb47 	bl	8000b6c <__aeabi_dcmpun>
 800a4de:	bb88      	cbnz	r0, 800a544 <_printf_float+0xd0>
 800a4e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4e4:	4b9a      	ldr	r3, [pc, #616]	; (800a750 <_printf_float+0x2dc>)
 800a4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ea:	f7f6 fb21 	bl	8000b30 <__aeabi_dcmple>
 800a4ee:	bb48      	cbnz	r0, 800a544 <_printf_float+0xd0>
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	4649      	mov	r1, r9
 800a4f8:	f7f6 fb10 	bl	8000b1c <__aeabi_dcmplt>
 800a4fc:	b110      	cbz	r0, 800a504 <_printf_float+0x90>
 800a4fe:	232d      	movs	r3, #45	; 0x2d
 800a500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a504:	4b93      	ldr	r3, [pc, #588]	; (800a754 <_printf_float+0x2e0>)
 800a506:	4894      	ldr	r0, [pc, #592]	; (800a758 <_printf_float+0x2e4>)
 800a508:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a50c:	bf94      	ite	ls
 800a50e:	4698      	movls	r8, r3
 800a510:	4680      	movhi	r8, r0
 800a512:	2303      	movs	r3, #3
 800a514:	6123      	str	r3, [r4, #16]
 800a516:	9b05      	ldr	r3, [sp, #20]
 800a518:	f023 0204 	bic.w	r2, r3, #4
 800a51c:	6022      	str	r2, [r4, #0]
 800a51e:	f04f 0900 	mov.w	r9, #0
 800a522:	9700      	str	r7, [sp, #0]
 800a524:	4633      	mov	r3, r6
 800a526:	aa0b      	add	r2, sp, #44	; 0x2c
 800a528:	4621      	mov	r1, r4
 800a52a:	4628      	mov	r0, r5
 800a52c:	f000 f9d8 	bl	800a8e0 <_printf_common>
 800a530:	3001      	adds	r0, #1
 800a532:	f040 8090 	bne.w	800a656 <_printf_float+0x1e2>
 800a536:	f04f 30ff 	mov.w	r0, #4294967295
 800a53a:	b00d      	add	sp, #52	; 0x34
 800a53c:	ecbd 8b02 	vpop	{d8}
 800a540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a544:	4642      	mov	r2, r8
 800a546:	464b      	mov	r3, r9
 800a548:	4640      	mov	r0, r8
 800a54a:	4649      	mov	r1, r9
 800a54c:	f7f6 fb0e 	bl	8000b6c <__aeabi_dcmpun>
 800a550:	b140      	cbz	r0, 800a564 <_printf_float+0xf0>
 800a552:	464b      	mov	r3, r9
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfbc      	itt	lt
 800a558:	232d      	movlt	r3, #45	; 0x2d
 800a55a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a55e:	487f      	ldr	r0, [pc, #508]	; (800a75c <_printf_float+0x2e8>)
 800a560:	4b7f      	ldr	r3, [pc, #508]	; (800a760 <_printf_float+0x2ec>)
 800a562:	e7d1      	b.n	800a508 <_printf_float+0x94>
 800a564:	6863      	ldr	r3, [r4, #4]
 800a566:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a56a:	9206      	str	r2, [sp, #24]
 800a56c:	1c5a      	adds	r2, r3, #1
 800a56e:	d13f      	bne.n	800a5f0 <_printf_float+0x17c>
 800a570:	2306      	movs	r3, #6
 800a572:	6063      	str	r3, [r4, #4]
 800a574:	9b05      	ldr	r3, [sp, #20]
 800a576:	6861      	ldr	r1, [r4, #4]
 800a578:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a57c:	2300      	movs	r3, #0
 800a57e:	9303      	str	r3, [sp, #12]
 800a580:	ab0a      	add	r3, sp, #40	; 0x28
 800a582:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a586:	ab09      	add	r3, sp, #36	; 0x24
 800a588:	ec49 8b10 	vmov	d0, r8, r9
 800a58c:	9300      	str	r3, [sp, #0]
 800a58e:	6022      	str	r2, [r4, #0]
 800a590:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a594:	4628      	mov	r0, r5
 800a596:	f7ff fecd 	bl	800a334 <__cvt>
 800a59a:	9b06      	ldr	r3, [sp, #24]
 800a59c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a59e:	2b47      	cmp	r3, #71	; 0x47
 800a5a0:	4680      	mov	r8, r0
 800a5a2:	d108      	bne.n	800a5b6 <_printf_float+0x142>
 800a5a4:	1cc8      	adds	r0, r1, #3
 800a5a6:	db02      	blt.n	800a5ae <_printf_float+0x13a>
 800a5a8:	6863      	ldr	r3, [r4, #4]
 800a5aa:	4299      	cmp	r1, r3
 800a5ac:	dd41      	ble.n	800a632 <_printf_float+0x1be>
 800a5ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800a5b2:	fa5f fb8b 	uxtb.w	fp, fp
 800a5b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a5ba:	d820      	bhi.n	800a5fe <_printf_float+0x18a>
 800a5bc:	3901      	subs	r1, #1
 800a5be:	465a      	mov	r2, fp
 800a5c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5c4:	9109      	str	r1, [sp, #36]	; 0x24
 800a5c6:	f7ff ff17 	bl	800a3f8 <__exponent>
 800a5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5cc:	1813      	adds	r3, r2, r0
 800a5ce:	2a01      	cmp	r2, #1
 800a5d0:	4681      	mov	r9, r0
 800a5d2:	6123      	str	r3, [r4, #16]
 800a5d4:	dc02      	bgt.n	800a5dc <_printf_float+0x168>
 800a5d6:	6822      	ldr	r2, [r4, #0]
 800a5d8:	07d2      	lsls	r2, r2, #31
 800a5da:	d501      	bpl.n	800a5e0 <_printf_float+0x16c>
 800a5dc:	3301      	adds	r3, #1
 800a5de:	6123      	str	r3, [r4, #16]
 800a5e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d09c      	beq.n	800a522 <_printf_float+0xae>
 800a5e8:	232d      	movs	r3, #45	; 0x2d
 800a5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5ee:	e798      	b.n	800a522 <_printf_float+0xae>
 800a5f0:	9a06      	ldr	r2, [sp, #24]
 800a5f2:	2a47      	cmp	r2, #71	; 0x47
 800a5f4:	d1be      	bne.n	800a574 <_printf_float+0x100>
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d1bc      	bne.n	800a574 <_printf_float+0x100>
 800a5fa:	2301      	movs	r3, #1
 800a5fc:	e7b9      	b.n	800a572 <_printf_float+0xfe>
 800a5fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a602:	d118      	bne.n	800a636 <_printf_float+0x1c2>
 800a604:	2900      	cmp	r1, #0
 800a606:	6863      	ldr	r3, [r4, #4]
 800a608:	dd0b      	ble.n	800a622 <_printf_float+0x1ae>
 800a60a:	6121      	str	r1, [r4, #16]
 800a60c:	b913      	cbnz	r3, 800a614 <_printf_float+0x1a0>
 800a60e:	6822      	ldr	r2, [r4, #0]
 800a610:	07d0      	lsls	r0, r2, #31
 800a612:	d502      	bpl.n	800a61a <_printf_float+0x1a6>
 800a614:	3301      	adds	r3, #1
 800a616:	440b      	add	r3, r1
 800a618:	6123      	str	r3, [r4, #16]
 800a61a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a61c:	f04f 0900 	mov.w	r9, #0
 800a620:	e7de      	b.n	800a5e0 <_printf_float+0x16c>
 800a622:	b913      	cbnz	r3, 800a62a <_printf_float+0x1b6>
 800a624:	6822      	ldr	r2, [r4, #0]
 800a626:	07d2      	lsls	r2, r2, #31
 800a628:	d501      	bpl.n	800a62e <_printf_float+0x1ba>
 800a62a:	3302      	adds	r3, #2
 800a62c:	e7f4      	b.n	800a618 <_printf_float+0x1a4>
 800a62e:	2301      	movs	r3, #1
 800a630:	e7f2      	b.n	800a618 <_printf_float+0x1a4>
 800a632:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a638:	4299      	cmp	r1, r3
 800a63a:	db05      	blt.n	800a648 <_printf_float+0x1d4>
 800a63c:	6823      	ldr	r3, [r4, #0]
 800a63e:	6121      	str	r1, [r4, #16]
 800a640:	07d8      	lsls	r0, r3, #31
 800a642:	d5ea      	bpl.n	800a61a <_printf_float+0x1a6>
 800a644:	1c4b      	adds	r3, r1, #1
 800a646:	e7e7      	b.n	800a618 <_printf_float+0x1a4>
 800a648:	2900      	cmp	r1, #0
 800a64a:	bfd4      	ite	le
 800a64c:	f1c1 0202 	rsble	r2, r1, #2
 800a650:	2201      	movgt	r2, #1
 800a652:	4413      	add	r3, r2
 800a654:	e7e0      	b.n	800a618 <_printf_float+0x1a4>
 800a656:	6823      	ldr	r3, [r4, #0]
 800a658:	055a      	lsls	r2, r3, #21
 800a65a:	d407      	bmi.n	800a66c <_printf_float+0x1f8>
 800a65c:	6923      	ldr	r3, [r4, #16]
 800a65e:	4642      	mov	r2, r8
 800a660:	4631      	mov	r1, r6
 800a662:	4628      	mov	r0, r5
 800a664:	47b8      	blx	r7
 800a666:	3001      	adds	r0, #1
 800a668:	d12c      	bne.n	800a6c4 <_printf_float+0x250>
 800a66a:	e764      	b.n	800a536 <_printf_float+0xc2>
 800a66c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a670:	f240 80e0 	bls.w	800a834 <_printf_float+0x3c0>
 800a674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a678:	2200      	movs	r2, #0
 800a67a:	2300      	movs	r3, #0
 800a67c:	f7f6 fa44 	bl	8000b08 <__aeabi_dcmpeq>
 800a680:	2800      	cmp	r0, #0
 800a682:	d034      	beq.n	800a6ee <_printf_float+0x27a>
 800a684:	4a37      	ldr	r2, [pc, #220]	; (800a764 <_printf_float+0x2f0>)
 800a686:	2301      	movs	r3, #1
 800a688:	4631      	mov	r1, r6
 800a68a:	4628      	mov	r0, r5
 800a68c:	47b8      	blx	r7
 800a68e:	3001      	adds	r0, #1
 800a690:	f43f af51 	beq.w	800a536 <_printf_float+0xc2>
 800a694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a698:	429a      	cmp	r2, r3
 800a69a:	db02      	blt.n	800a6a2 <_printf_float+0x22e>
 800a69c:	6823      	ldr	r3, [r4, #0]
 800a69e:	07d8      	lsls	r0, r3, #31
 800a6a0:	d510      	bpl.n	800a6c4 <_printf_float+0x250>
 800a6a2:	ee18 3a10 	vmov	r3, s16
 800a6a6:	4652      	mov	r2, sl
 800a6a8:	4631      	mov	r1, r6
 800a6aa:	4628      	mov	r0, r5
 800a6ac:	47b8      	blx	r7
 800a6ae:	3001      	adds	r0, #1
 800a6b0:	f43f af41 	beq.w	800a536 <_printf_float+0xc2>
 800a6b4:	f04f 0800 	mov.w	r8, #0
 800a6b8:	f104 091a 	add.w	r9, r4, #26
 800a6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6be:	3b01      	subs	r3, #1
 800a6c0:	4543      	cmp	r3, r8
 800a6c2:	dc09      	bgt.n	800a6d8 <_printf_float+0x264>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	079b      	lsls	r3, r3, #30
 800a6c8:	f100 8105 	bmi.w	800a8d6 <_printf_float+0x462>
 800a6cc:	68e0      	ldr	r0, [r4, #12]
 800a6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6d0:	4298      	cmp	r0, r3
 800a6d2:	bfb8      	it	lt
 800a6d4:	4618      	movlt	r0, r3
 800a6d6:	e730      	b.n	800a53a <_printf_float+0xc6>
 800a6d8:	2301      	movs	r3, #1
 800a6da:	464a      	mov	r2, r9
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4628      	mov	r0, r5
 800a6e0:	47b8      	blx	r7
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f43f af27 	beq.w	800a536 <_printf_float+0xc2>
 800a6e8:	f108 0801 	add.w	r8, r8, #1
 800a6ec:	e7e6      	b.n	800a6bc <_printf_float+0x248>
 800a6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	dc39      	bgt.n	800a768 <_printf_float+0x2f4>
 800a6f4:	4a1b      	ldr	r2, [pc, #108]	; (800a764 <_printf_float+0x2f0>)
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	4631      	mov	r1, r6
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	47b8      	blx	r7
 800a6fe:	3001      	adds	r0, #1
 800a700:	f43f af19 	beq.w	800a536 <_printf_float+0xc2>
 800a704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a708:	4313      	orrs	r3, r2
 800a70a:	d102      	bne.n	800a712 <_printf_float+0x29e>
 800a70c:	6823      	ldr	r3, [r4, #0]
 800a70e:	07d9      	lsls	r1, r3, #31
 800a710:	d5d8      	bpl.n	800a6c4 <_printf_float+0x250>
 800a712:	ee18 3a10 	vmov	r3, s16
 800a716:	4652      	mov	r2, sl
 800a718:	4631      	mov	r1, r6
 800a71a:	4628      	mov	r0, r5
 800a71c:	47b8      	blx	r7
 800a71e:	3001      	adds	r0, #1
 800a720:	f43f af09 	beq.w	800a536 <_printf_float+0xc2>
 800a724:	f04f 0900 	mov.w	r9, #0
 800a728:	f104 0a1a 	add.w	sl, r4, #26
 800a72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72e:	425b      	negs	r3, r3
 800a730:	454b      	cmp	r3, r9
 800a732:	dc01      	bgt.n	800a738 <_printf_float+0x2c4>
 800a734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a736:	e792      	b.n	800a65e <_printf_float+0x1ea>
 800a738:	2301      	movs	r3, #1
 800a73a:	4652      	mov	r2, sl
 800a73c:	4631      	mov	r1, r6
 800a73e:	4628      	mov	r0, r5
 800a740:	47b8      	blx	r7
 800a742:	3001      	adds	r0, #1
 800a744:	f43f aef7 	beq.w	800a536 <_printf_float+0xc2>
 800a748:	f109 0901 	add.w	r9, r9, #1
 800a74c:	e7ee      	b.n	800a72c <_printf_float+0x2b8>
 800a74e:	bf00      	nop
 800a750:	7fefffff 	.word	0x7fefffff
 800a754:	0800cfe0 	.word	0x0800cfe0
 800a758:	0800cfe4 	.word	0x0800cfe4
 800a75c:	0800cfec 	.word	0x0800cfec
 800a760:	0800cfe8 	.word	0x0800cfe8
 800a764:	0800cff0 	.word	0x0800cff0
 800a768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a76a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a76c:	429a      	cmp	r2, r3
 800a76e:	bfa8      	it	ge
 800a770:	461a      	movge	r2, r3
 800a772:	2a00      	cmp	r2, #0
 800a774:	4691      	mov	r9, r2
 800a776:	dc37      	bgt.n	800a7e8 <_printf_float+0x374>
 800a778:	f04f 0b00 	mov.w	fp, #0
 800a77c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a780:	f104 021a 	add.w	r2, r4, #26
 800a784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a786:	9305      	str	r3, [sp, #20]
 800a788:	eba3 0309 	sub.w	r3, r3, r9
 800a78c:	455b      	cmp	r3, fp
 800a78e:	dc33      	bgt.n	800a7f8 <_printf_float+0x384>
 800a790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a794:	429a      	cmp	r2, r3
 800a796:	db3b      	blt.n	800a810 <_printf_float+0x39c>
 800a798:	6823      	ldr	r3, [r4, #0]
 800a79a:	07da      	lsls	r2, r3, #31
 800a79c:	d438      	bmi.n	800a810 <_printf_float+0x39c>
 800a79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a7a0:	9a05      	ldr	r2, [sp, #20]
 800a7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a7a4:	1a9a      	subs	r2, r3, r2
 800a7a6:	eba3 0901 	sub.w	r9, r3, r1
 800a7aa:	4591      	cmp	r9, r2
 800a7ac:	bfa8      	it	ge
 800a7ae:	4691      	movge	r9, r2
 800a7b0:	f1b9 0f00 	cmp.w	r9, #0
 800a7b4:	dc35      	bgt.n	800a822 <_printf_float+0x3ae>
 800a7b6:	f04f 0800 	mov.w	r8, #0
 800a7ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7be:	f104 0a1a 	add.w	sl, r4, #26
 800a7c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7c6:	1a9b      	subs	r3, r3, r2
 800a7c8:	eba3 0309 	sub.w	r3, r3, r9
 800a7cc:	4543      	cmp	r3, r8
 800a7ce:	f77f af79 	ble.w	800a6c4 <_printf_float+0x250>
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	4652      	mov	r2, sl
 800a7d6:	4631      	mov	r1, r6
 800a7d8:	4628      	mov	r0, r5
 800a7da:	47b8      	blx	r7
 800a7dc:	3001      	adds	r0, #1
 800a7de:	f43f aeaa 	beq.w	800a536 <_printf_float+0xc2>
 800a7e2:	f108 0801 	add.w	r8, r8, #1
 800a7e6:	e7ec      	b.n	800a7c2 <_printf_float+0x34e>
 800a7e8:	4613      	mov	r3, r2
 800a7ea:	4631      	mov	r1, r6
 800a7ec:	4642      	mov	r2, r8
 800a7ee:	4628      	mov	r0, r5
 800a7f0:	47b8      	blx	r7
 800a7f2:	3001      	adds	r0, #1
 800a7f4:	d1c0      	bne.n	800a778 <_printf_float+0x304>
 800a7f6:	e69e      	b.n	800a536 <_printf_float+0xc2>
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	9205      	str	r2, [sp, #20]
 800a800:	47b8      	blx	r7
 800a802:	3001      	adds	r0, #1
 800a804:	f43f ae97 	beq.w	800a536 <_printf_float+0xc2>
 800a808:	9a05      	ldr	r2, [sp, #20]
 800a80a:	f10b 0b01 	add.w	fp, fp, #1
 800a80e:	e7b9      	b.n	800a784 <_printf_float+0x310>
 800a810:	ee18 3a10 	vmov	r3, s16
 800a814:	4652      	mov	r2, sl
 800a816:	4631      	mov	r1, r6
 800a818:	4628      	mov	r0, r5
 800a81a:	47b8      	blx	r7
 800a81c:	3001      	adds	r0, #1
 800a81e:	d1be      	bne.n	800a79e <_printf_float+0x32a>
 800a820:	e689      	b.n	800a536 <_printf_float+0xc2>
 800a822:	9a05      	ldr	r2, [sp, #20]
 800a824:	464b      	mov	r3, r9
 800a826:	4442      	add	r2, r8
 800a828:	4631      	mov	r1, r6
 800a82a:	4628      	mov	r0, r5
 800a82c:	47b8      	blx	r7
 800a82e:	3001      	adds	r0, #1
 800a830:	d1c1      	bne.n	800a7b6 <_printf_float+0x342>
 800a832:	e680      	b.n	800a536 <_printf_float+0xc2>
 800a834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a836:	2a01      	cmp	r2, #1
 800a838:	dc01      	bgt.n	800a83e <_printf_float+0x3ca>
 800a83a:	07db      	lsls	r3, r3, #31
 800a83c:	d538      	bpl.n	800a8b0 <_printf_float+0x43c>
 800a83e:	2301      	movs	r3, #1
 800a840:	4642      	mov	r2, r8
 800a842:	4631      	mov	r1, r6
 800a844:	4628      	mov	r0, r5
 800a846:	47b8      	blx	r7
 800a848:	3001      	adds	r0, #1
 800a84a:	f43f ae74 	beq.w	800a536 <_printf_float+0xc2>
 800a84e:	ee18 3a10 	vmov	r3, s16
 800a852:	4652      	mov	r2, sl
 800a854:	4631      	mov	r1, r6
 800a856:	4628      	mov	r0, r5
 800a858:	47b8      	blx	r7
 800a85a:	3001      	adds	r0, #1
 800a85c:	f43f ae6b 	beq.w	800a536 <_printf_float+0xc2>
 800a860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a864:	2200      	movs	r2, #0
 800a866:	2300      	movs	r3, #0
 800a868:	f7f6 f94e 	bl	8000b08 <__aeabi_dcmpeq>
 800a86c:	b9d8      	cbnz	r0, 800a8a6 <_printf_float+0x432>
 800a86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a870:	f108 0201 	add.w	r2, r8, #1
 800a874:	3b01      	subs	r3, #1
 800a876:	4631      	mov	r1, r6
 800a878:	4628      	mov	r0, r5
 800a87a:	47b8      	blx	r7
 800a87c:	3001      	adds	r0, #1
 800a87e:	d10e      	bne.n	800a89e <_printf_float+0x42a>
 800a880:	e659      	b.n	800a536 <_printf_float+0xc2>
 800a882:	2301      	movs	r3, #1
 800a884:	4652      	mov	r2, sl
 800a886:	4631      	mov	r1, r6
 800a888:	4628      	mov	r0, r5
 800a88a:	47b8      	blx	r7
 800a88c:	3001      	adds	r0, #1
 800a88e:	f43f ae52 	beq.w	800a536 <_printf_float+0xc2>
 800a892:	f108 0801 	add.w	r8, r8, #1
 800a896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a898:	3b01      	subs	r3, #1
 800a89a:	4543      	cmp	r3, r8
 800a89c:	dcf1      	bgt.n	800a882 <_printf_float+0x40e>
 800a89e:	464b      	mov	r3, r9
 800a8a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8a4:	e6dc      	b.n	800a660 <_printf_float+0x1ec>
 800a8a6:	f04f 0800 	mov.w	r8, #0
 800a8aa:	f104 0a1a 	add.w	sl, r4, #26
 800a8ae:	e7f2      	b.n	800a896 <_printf_float+0x422>
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	4642      	mov	r2, r8
 800a8b4:	e7df      	b.n	800a876 <_printf_float+0x402>
 800a8b6:	2301      	movs	r3, #1
 800a8b8:	464a      	mov	r2, r9
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	4628      	mov	r0, r5
 800a8be:	47b8      	blx	r7
 800a8c0:	3001      	adds	r0, #1
 800a8c2:	f43f ae38 	beq.w	800a536 <_printf_float+0xc2>
 800a8c6:	f108 0801 	add.w	r8, r8, #1
 800a8ca:	68e3      	ldr	r3, [r4, #12]
 800a8cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8ce:	1a5b      	subs	r3, r3, r1
 800a8d0:	4543      	cmp	r3, r8
 800a8d2:	dcf0      	bgt.n	800a8b6 <_printf_float+0x442>
 800a8d4:	e6fa      	b.n	800a6cc <_printf_float+0x258>
 800a8d6:	f04f 0800 	mov.w	r8, #0
 800a8da:	f104 0919 	add.w	r9, r4, #25
 800a8de:	e7f4      	b.n	800a8ca <_printf_float+0x456>

0800a8e0 <_printf_common>:
 800a8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8e4:	4616      	mov	r6, r2
 800a8e6:	4699      	mov	r9, r3
 800a8e8:	688a      	ldr	r2, [r1, #8]
 800a8ea:	690b      	ldr	r3, [r1, #16]
 800a8ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8f0:	4293      	cmp	r3, r2
 800a8f2:	bfb8      	it	lt
 800a8f4:	4613      	movlt	r3, r2
 800a8f6:	6033      	str	r3, [r6, #0]
 800a8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8fc:	4607      	mov	r7, r0
 800a8fe:	460c      	mov	r4, r1
 800a900:	b10a      	cbz	r2, 800a906 <_printf_common+0x26>
 800a902:	3301      	adds	r3, #1
 800a904:	6033      	str	r3, [r6, #0]
 800a906:	6823      	ldr	r3, [r4, #0]
 800a908:	0699      	lsls	r1, r3, #26
 800a90a:	bf42      	ittt	mi
 800a90c:	6833      	ldrmi	r3, [r6, #0]
 800a90e:	3302      	addmi	r3, #2
 800a910:	6033      	strmi	r3, [r6, #0]
 800a912:	6825      	ldr	r5, [r4, #0]
 800a914:	f015 0506 	ands.w	r5, r5, #6
 800a918:	d106      	bne.n	800a928 <_printf_common+0x48>
 800a91a:	f104 0a19 	add.w	sl, r4, #25
 800a91e:	68e3      	ldr	r3, [r4, #12]
 800a920:	6832      	ldr	r2, [r6, #0]
 800a922:	1a9b      	subs	r3, r3, r2
 800a924:	42ab      	cmp	r3, r5
 800a926:	dc26      	bgt.n	800a976 <_printf_common+0x96>
 800a928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a92c:	1e13      	subs	r3, r2, #0
 800a92e:	6822      	ldr	r2, [r4, #0]
 800a930:	bf18      	it	ne
 800a932:	2301      	movne	r3, #1
 800a934:	0692      	lsls	r2, r2, #26
 800a936:	d42b      	bmi.n	800a990 <_printf_common+0xb0>
 800a938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a93c:	4649      	mov	r1, r9
 800a93e:	4638      	mov	r0, r7
 800a940:	47c0      	blx	r8
 800a942:	3001      	adds	r0, #1
 800a944:	d01e      	beq.n	800a984 <_printf_common+0xa4>
 800a946:	6823      	ldr	r3, [r4, #0]
 800a948:	68e5      	ldr	r5, [r4, #12]
 800a94a:	6832      	ldr	r2, [r6, #0]
 800a94c:	f003 0306 	and.w	r3, r3, #6
 800a950:	2b04      	cmp	r3, #4
 800a952:	bf08      	it	eq
 800a954:	1aad      	subeq	r5, r5, r2
 800a956:	68a3      	ldr	r3, [r4, #8]
 800a958:	6922      	ldr	r2, [r4, #16]
 800a95a:	bf0c      	ite	eq
 800a95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a960:	2500      	movne	r5, #0
 800a962:	4293      	cmp	r3, r2
 800a964:	bfc4      	itt	gt
 800a966:	1a9b      	subgt	r3, r3, r2
 800a968:	18ed      	addgt	r5, r5, r3
 800a96a:	2600      	movs	r6, #0
 800a96c:	341a      	adds	r4, #26
 800a96e:	42b5      	cmp	r5, r6
 800a970:	d11a      	bne.n	800a9a8 <_printf_common+0xc8>
 800a972:	2000      	movs	r0, #0
 800a974:	e008      	b.n	800a988 <_printf_common+0xa8>
 800a976:	2301      	movs	r3, #1
 800a978:	4652      	mov	r2, sl
 800a97a:	4649      	mov	r1, r9
 800a97c:	4638      	mov	r0, r7
 800a97e:	47c0      	blx	r8
 800a980:	3001      	adds	r0, #1
 800a982:	d103      	bne.n	800a98c <_printf_common+0xac>
 800a984:	f04f 30ff 	mov.w	r0, #4294967295
 800a988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a98c:	3501      	adds	r5, #1
 800a98e:	e7c6      	b.n	800a91e <_printf_common+0x3e>
 800a990:	18e1      	adds	r1, r4, r3
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	2030      	movs	r0, #48	; 0x30
 800a996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a99a:	4422      	add	r2, r4
 800a99c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9a4:	3302      	adds	r3, #2
 800a9a6:	e7c7      	b.n	800a938 <_printf_common+0x58>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	4622      	mov	r2, r4
 800a9ac:	4649      	mov	r1, r9
 800a9ae:	4638      	mov	r0, r7
 800a9b0:	47c0      	blx	r8
 800a9b2:	3001      	adds	r0, #1
 800a9b4:	d0e6      	beq.n	800a984 <_printf_common+0xa4>
 800a9b6:	3601      	adds	r6, #1
 800a9b8:	e7d9      	b.n	800a96e <_printf_common+0x8e>
	...

0800a9bc <_printf_i>:
 800a9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9c0:	7e0f      	ldrb	r7, [r1, #24]
 800a9c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9c4:	2f78      	cmp	r7, #120	; 0x78
 800a9c6:	4691      	mov	r9, r2
 800a9c8:	4680      	mov	r8, r0
 800a9ca:	460c      	mov	r4, r1
 800a9cc:	469a      	mov	sl, r3
 800a9ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9d2:	d807      	bhi.n	800a9e4 <_printf_i+0x28>
 800a9d4:	2f62      	cmp	r7, #98	; 0x62
 800a9d6:	d80a      	bhi.n	800a9ee <_printf_i+0x32>
 800a9d8:	2f00      	cmp	r7, #0
 800a9da:	f000 80d8 	beq.w	800ab8e <_printf_i+0x1d2>
 800a9de:	2f58      	cmp	r7, #88	; 0x58
 800a9e0:	f000 80a3 	beq.w	800ab2a <_printf_i+0x16e>
 800a9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9ec:	e03a      	b.n	800aa64 <_printf_i+0xa8>
 800a9ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9f2:	2b15      	cmp	r3, #21
 800a9f4:	d8f6      	bhi.n	800a9e4 <_printf_i+0x28>
 800a9f6:	a101      	add	r1, pc, #4	; (adr r1, 800a9fc <_printf_i+0x40>)
 800a9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9fc:	0800aa55 	.word	0x0800aa55
 800aa00:	0800aa69 	.word	0x0800aa69
 800aa04:	0800a9e5 	.word	0x0800a9e5
 800aa08:	0800a9e5 	.word	0x0800a9e5
 800aa0c:	0800a9e5 	.word	0x0800a9e5
 800aa10:	0800a9e5 	.word	0x0800a9e5
 800aa14:	0800aa69 	.word	0x0800aa69
 800aa18:	0800a9e5 	.word	0x0800a9e5
 800aa1c:	0800a9e5 	.word	0x0800a9e5
 800aa20:	0800a9e5 	.word	0x0800a9e5
 800aa24:	0800a9e5 	.word	0x0800a9e5
 800aa28:	0800ab75 	.word	0x0800ab75
 800aa2c:	0800aa99 	.word	0x0800aa99
 800aa30:	0800ab57 	.word	0x0800ab57
 800aa34:	0800a9e5 	.word	0x0800a9e5
 800aa38:	0800a9e5 	.word	0x0800a9e5
 800aa3c:	0800ab97 	.word	0x0800ab97
 800aa40:	0800a9e5 	.word	0x0800a9e5
 800aa44:	0800aa99 	.word	0x0800aa99
 800aa48:	0800a9e5 	.word	0x0800a9e5
 800aa4c:	0800a9e5 	.word	0x0800a9e5
 800aa50:	0800ab5f 	.word	0x0800ab5f
 800aa54:	682b      	ldr	r3, [r5, #0]
 800aa56:	1d1a      	adds	r2, r3, #4
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	602a      	str	r2, [r5, #0]
 800aa5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa64:	2301      	movs	r3, #1
 800aa66:	e0a3      	b.n	800abb0 <_printf_i+0x1f4>
 800aa68:	6820      	ldr	r0, [r4, #0]
 800aa6a:	6829      	ldr	r1, [r5, #0]
 800aa6c:	0606      	lsls	r6, r0, #24
 800aa6e:	f101 0304 	add.w	r3, r1, #4
 800aa72:	d50a      	bpl.n	800aa8a <_printf_i+0xce>
 800aa74:	680e      	ldr	r6, [r1, #0]
 800aa76:	602b      	str	r3, [r5, #0]
 800aa78:	2e00      	cmp	r6, #0
 800aa7a:	da03      	bge.n	800aa84 <_printf_i+0xc8>
 800aa7c:	232d      	movs	r3, #45	; 0x2d
 800aa7e:	4276      	negs	r6, r6
 800aa80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa84:	485e      	ldr	r0, [pc, #376]	; (800ac00 <_printf_i+0x244>)
 800aa86:	230a      	movs	r3, #10
 800aa88:	e019      	b.n	800aabe <_printf_i+0x102>
 800aa8a:	680e      	ldr	r6, [r1, #0]
 800aa8c:	602b      	str	r3, [r5, #0]
 800aa8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aa92:	bf18      	it	ne
 800aa94:	b236      	sxthne	r6, r6
 800aa96:	e7ef      	b.n	800aa78 <_printf_i+0xbc>
 800aa98:	682b      	ldr	r3, [r5, #0]
 800aa9a:	6820      	ldr	r0, [r4, #0]
 800aa9c:	1d19      	adds	r1, r3, #4
 800aa9e:	6029      	str	r1, [r5, #0]
 800aaa0:	0601      	lsls	r1, r0, #24
 800aaa2:	d501      	bpl.n	800aaa8 <_printf_i+0xec>
 800aaa4:	681e      	ldr	r6, [r3, #0]
 800aaa6:	e002      	b.n	800aaae <_printf_i+0xf2>
 800aaa8:	0646      	lsls	r6, r0, #25
 800aaaa:	d5fb      	bpl.n	800aaa4 <_printf_i+0xe8>
 800aaac:	881e      	ldrh	r6, [r3, #0]
 800aaae:	4854      	ldr	r0, [pc, #336]	; (800ac00 <_printf_i+0x244>)
 800aab0:	2f6f      	cmp	r7, #111	; 0x6f
 800aab2:	bf0c      	ite	eq
 800aab4:	2308      	moveq	r3, #8
 800aab6:	230a      	movne	r3, #10
 800aab8:	2100      	movs	r1, #0
 800aaba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aabe:	6865      	ldr	r5, [r4, #4]
 800aac0:	60a5      	str	r5, [r4, #8]
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	bfa2      	ittt	ge
 800aac6:	6821      	ldrge	r1, [r4, #0]
 800aac8:	f021 0104 	bicge.w	r1, r1, #4
 800aacc:	6021      	strge	r1, [r4, #0]
 800aace:	b90e      	cbnz	r6, 800aad4 <_printf_i+0x118>
 800aad0:	2d00      	cmp	r5, #0
 800aad2:	d04d      	beq.n	800ab70 <_printf_i+0x1b4>
 800aad4:	4615      	mov	r5, r2
 800aad6:	fbb6 f1f3 	udiv	r1, r6, r3
 800aada:	fb03 6711 	mls	r7, r3, r1, r6
 800aade:	5dc7      	ldrb	r7, [r0, r7]
 800aae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aae4:	4637      	mov	r7, r6
 800aae6:	42bb      	cmp	r3, r7
 800aae8:	460e      	mov	r6, r1
 800aaea:	d9f4      	bls.n	800aad6 <_printf_i+0x11a>
 800aaec:	2b08      	cmp	r3, #8
 800aaee:	d10b      	bne.n	800ab08 <_printf_i+0x14c>
 800aaf0:	6823      	ldr	r3, [r4, #0]
 800aaf2:	07de      	lsls	r6, r3, #31
 800aaf4:	d508      	bpl.n	800ab08 <_printf_i+0x14c>
 800aaf6:	6923      	ldr	r3, [r4, #16]
 800aaf8:	6861      	ldr	r1, [r4, #4]
 800aafa:	4299      	cmp	r1, r3
 800aafc:	bfde      	ittt	le
 800aafe:	2330      	movle	r3, #48	; 0x30
 800ab00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab08:	1b52      	subs	r2, r2, r5
 800ab0a:	6122      	str	r2, [r4, #16]
 800ab0c:	f8cd a000 	str.w	sl, [sp]
 800ab10:	464b      	mov	r3, r9
 800ab12:	aa03      	add	r2, sp, #12
 800ab14:	4621      	mov	r1, r4
 800ab16:	4640      	mov	r0, r8
 800ab18:	f7ff fee2 	bl	800a8e0 <_printf_common>
 800ab1c:	3001      	adds	r0, #1
 800ab1e:	d14c      	bne.n	800abba <_printf_i+0x1fe>
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	b004      	add	sp, #16
 800ab26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2a:	4835      	ldr	r0, [pc, #212]	; (800ac00 <_printf_i+0x244>)
 800ab2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab30:	6829      	ldr	r1, [r5, #0]
 800ab32:	6823      	ldr	r3, [r4, #0]
 800ab34:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab38:	6029      	str	r1, [r5, #0]
 800ab3a:	061d      	lsls	r5, r3, #24
 800ab3c:	d514      	bpl.n	800ab68 <_printf_i+0x1ac>
 800ab3e:	07df      	lsls	r7, r3, #31
 800ab40:	bf44      	itt	mi
 800ab42:	f043 0320 	orrmi.w	r3, r3, #32
 800ab46:	6023      	strmi	r3, [r4, #0]
 800ab48:	b91e      	cbnz	r6, 800ab52 <_printf_i+0x196>
 800ab4a:	6823      	ldr	r3, [r4, #0]
 800ab4c:	f023 0320 	bic.w	r3, r3, #32
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	2310      	movs	r3, #16
 800ab54:	e7b0      	b.n	800aab8 <_printf_i+0xfc>
 800ab56:	6823      	ldr	r3, [r4, #0]
 800ab58:	f043 0320 	orr.w	r3, r3, #32
 800ab5c:	6023      	str	r3, [r4, #0]
 800ab5e:	2378      	movs	r3, #120	; 0x78
 800ab60:	4828      	ldr	r0, [pc, #160]	; (800ac04 <_printf_i+0x248>)
 800ab62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ab66:	e7e3      	b.n	800ab30 <_printf_i+0x174>
 800ab68:	0659      	lsls	r1, r3, #25
 800ab6a:	bf48      	it	mi
 800ab6c:	b2b6      	uxthmi	r6, r6
 800ab6e:	e7e6      	b.n	800ab3e <_printf_i+0x182>
 800ab70:	4615      	mov	r5, r2
 800ab72:	e7bb      	b.n	800aaec <_printf_i+0x130>
 800ab74:	682b      	ldr	r3, [r5, #0]
 800ab76:	6826      	ldr	r6, [r4, #0]
 800ab78:	6961      	ldr	r1, [r4, #20]
 800ab7a:	1d18      	adds	r0, r3, #4
 800ab7c:	6028      	str	r0, [r5, #0]
 800ab7e:	0635      	lsls	r5, r6, #24
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	d501      	bpl.n	800ab88 <_printf_i+0x1cc>
 800ab84:	6019      	str	r1, [r3, #0]
 800ab86:	e002      	b.n	800ab8e <_printf_i+0x1d2>
 800ab88:	0670      	lsls	r0, r6, #25
 800ab8a:	d5fb      	bpl.n	800ab84 <_printf_i+0x1c8>
 800ab8c:	8019      	strh	r1, [r3, #0]
 800ab8e:	2300      	movs	r3, #0
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	4615      	mov	r5, r2
 800ab94:	e7ba      	b.n	800ab0c <_printf_i+0x150>
 800ab96:	682b      	ldr	r3, [r5, #0]
 800ab98:	1d1a      	adds	r2, r3, #4
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	681d      	ldr	r5, [r3, #0]
 800ab9e:	6862      	ldr	r2, [r4, #4]
 800aba0:	2100      	movs	r1, #0
 800aba2:	4628      	mov	r0, r5
 800aba4:	f7f5 fb3c 	bl	8000220 <memchr>
 800aba8:	b108      	cbz	r0, 800abae <_printf_i+0x1f2>
 800abaa:	1b40      	subs	r0, r0, r5
 800abac:	6060      	str	r0, [r4, #4]
 800abae:	6863      	ldr	r3, [r4, #4]
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	2300      	movs	r3, #0
 800abb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abb8:	e7a8      	b.n	800ab0c <_printf_i+0x150>
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	462a      	mov	r2, r5
 800abbe:	4649      	mov	r1, r9
 800abc0:	4640      	mov	r0, r8
 800abc2:	47d0      	blx	sl
 800abc4:	3001      	adds	r0, #1
 800abc6:	d0ab      	beq.n	800ab20 <_printf_i+0x164>
 800abc8:	6823      	ldr	r3, [r4, #0]
 800abca:	079b      	lsls	r3, r3, #30
 800abcc:	d413      	bmi.n	800abf6 <_printf_i+0x23a>
 800abce:	68e0      	ldr	r0, [r4, #12]
 800abd0:	9b03      	ldr	r3, [sp, #12]
 800abd2:	4298      	cmp	r0, r3
 800abd4:	bfb8      	it	lt
 800abd6:	4618      	movlt	r0, r3
 800abd8:	e7a4      	b.n	800ab24 <_printf_i+0x168>
 800abda:	2301      	movs	r3, #1
 800abdc:	4632      	mov	r2, r6
 800abde:	4649      	mov	r1, r9
 800abe0:	4640      	mov	r0, r8
 800abe2:	47d0      	blx	sl
 800abe4:	3001      	adds	r0, #1
 800abe6:	d09b      	beq.n	800ab20 <_printf_i+0x164>
 800abe8:	3501      	adds	r5, #1
 800abea:	68e3      	ldr	r3, [r4, #12]
 800abec:	9903      	ldr	r1, [sp, #12]
 800abee:	1a5b      	subs	r3, r3, r1
 800abf0:	42ab      	cmp	r3, r5
 800abf2:	dcf2      	bgt.n	800abda <_printf_i+0x21e>
 800abf4:	e7eb      	b.n	800abce <_printf_i+0x212>
 800abf6:	2500      	movs	r5, #0
 800abf8:	f104 0619 	add.w	r6, r4, #25
 800abfc:	e7f5      	b.n	800abea <_printf_i+0x22e>
 800abfe:	bf00      	nop
 800ac00:	0800cff2 	.word	0x0800cff2
 800ac04:	0800d003 	.word	0x0800d003

0800ac08 <iprintf>:
 800ac08:	b40f      	push	{r0, r1, r2, r3}
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <iprintf+0x2c>)
 800ac0c:	b513      	push	{r0, r1, r4, lr}
 800ac0e:	681c      	ldr	r4, [r3, #0]
 800ac10:	b124      	cbz	r4, 800ac1c <iprintf+0x14>
 800ac12:	69a3      	ldr	r3, [r4, #24]
 800ac14:	b913      	cbnz	r3, 800ac1c <iprintf+0x14>
 800ac16:	4620      	mov	r0, r4
 800ac18:	f001 f8da 	bl	800bdd0 <__sinit>
 800ac1c:	ab05      	add	r3, sp, #20
 800ac1e:	9a04      	ldr	r2, [sp, #16]
 800ac20:	68a1      	ldr	r1, [r4, #8]
 800ac22:	9301      	str	r3, [sp, #4]
 800ac24:	4620      	mov	r0, r4
 800ac26:	f001 fe97 	bl	800c958 <_vfiprintf_r>
 800ac2a:	b002      	add	sp, #8
 800ac2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ac30:	b004      	add	sp, #16
 800ac32:	4770      	bx	lr
 800ac34:	20000074 	.word	0x20000074

0800ac38 <_puts_r>:
 800ac38:	b570      	push	{r4, r5, r6, lr}
 800ac3a:	460e      	mov	r6, r1
 800ac3c:	4605      	mov	r5, r0
 800ac3e:	b118      	cbz	r0, 800ac48 <_puts_r+0x10>
 800ac40:	6983      	ldr	r3, [r0, #24]
 800ac42:	b90b      	cbnz	r3, 800ac48 <_puts_r+0x10>
 800ac44:	f001 f8c4 	bl	800bdd0 <__sinit>
 800ac48:	69ab      	ldr	r3, [r5, #24]
 800ac4a:	68ac      	ldr	r4, [r5, #8]
 800ac4c:	b913      	cbnz	r3, 800ac54 <_puts_r+0x1c>
 800ac4e:	4628      	mov	r0, r5
 800ac50:	f001 f8be 	bl	800bdd0 <__sinit>
 800ac54:	4b2c      	ldr	r3, [pc, #176]	; (800ad08 <_puts_r+0xd0>)
 800ac56:	429c      	cmp	r4, r3
 800ac58:	d120      	bne.n	800ac9c <_puts_r+0x64>
 800ac5a:	686c      	ldr	r4, [r5, #4]
 800ac5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ac5e:	07db      	lsls	r3, r3, #31
 800ac60:	d405      	bmi.n	800ac6e <_puts_r+0x36>
 800ac62:	89a3      	ldrh	r3, [r4, #12]
 800ac64:	0598      	lsls	r0, r3, #22
 800ac66:	d402      	bmi.n	800ac6e <_puts_r+0x36>
 800ac68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ac6a:	f001 f954 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800ac6e:	89a3      	ldrh	r3, [r4, #12]
 800ac70:	0719      	lsls	r1, r3, #28
 800ac72:	d51d      	bpl.n	800acb0 <_puts_r+0x78>
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b1db      	cbz	r3, 800acb0 <_puts_r+0x78>
 800ac78:	3e01      	subs	r6, #1
 800ac7a:	68a3      	ldr	r3, [r4, #8]
 800ac7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ac80:	3b01      	subs	r3, #1
 800ac82:	60a3      	str	r3, [r4, #8]
 800ac84:	bb39      	cbnz	r1, 800acd6 <_puts_r+0x9e>
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	da38      	bge.n	800acfc <_puts_r+0xc4>
 800ac8a:	4622      	mov	r2, r4
 800ac8c:	210a      	movs	r1, #10
 800ac8e:	4628      	mov	r0, r5
 800ac90:	f000 f848 	bl	800ad24 <__swbuf_r>
 800ac94:	3001      	adds	r0, #1
 800ac96:	d011      	beq.n	800acbc <_puts_r+0x84>
 800ac98:	250a      	movs	r5, #10
 800ac9a:	e011      	b.n	800acc0 <_puts_r+0x88>
 800ac9c:	4b1b      	ldr	r3, [pc, #108]	; (800ad0c <_puts_r+0xd4>)
 800ac9e:	429c      	cmp	r4, r3
 800aca0:	d101      	bne.n	800aca6 <_puts_r+0x6e>
 800aca2:	68ac      	ldr	r4, [r5, #8]
 800aca4:	e7da      	b.n	800ac5c <_puts_r+0x24>
 800aca6:	4b1a      	ldr	r3, [pc, #104]	; (800ad10 <_puts_r+0xd8>)
 800aca8:	429c      	cmp	r4, r3
 800acaa:	bf08      	it	eq
 800acac:	68ec      	ldreq	r4, [r5, #12]
 800acae:	e7d5      	b.n	800ac5c <_puts_r+0x24>
 800acb0:	4621      	mov	r1, r4
 800acb2:	4628      	mov	r0, r5
 800acb4:	f000 f888 	bl	800adc8 <__swsetup_r>
 800acb8:	2800      	cmp	r0, #0
 800acba:	d0dd      	beq.n	800ac78 <_puts_r+0x40>
 800acbc:	f04f 35ff 	mov.w	r5, #4294967295
 800acc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800acc2:	07da      	lsls	r2, r3, #31
 800acc4:	d405      	bmi.n	800acd2 <_puts_r+0x9a>
 800acc6:	89a3      	ldrh	r3, [r4, #12]
 800acc8:	059b      	lsls	r3, r3, #22
 800acca:	d402      	bmi.n	800acd2 <_puts_r+0x9a>
 800accc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800acce:	f001 f923 	bl	800bf18 <__retarget_lock_release_recursive>
 800acd2:	4628      	mov	r0, r5
 800acd4:	bd70      	pop	{r4, r5, r6, pc}
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	da04      	bge.n	800ace4 <_puts_r+0xac>
 800acda:	69a2      	ldr	r2, [r4, #24]
 800acdc:	429a      	cmp	r2, r3
 800acde:	dc06      	bgt.n	800acee <_puts_r+0xb6>
 800ace0:	290a      	cmp	r1, #10
 800ace2:	d004      	beq.n	800acee <_puts_r+0xb6>
 800ace4:	6823      	ldr	r3, [r4, #0]
 800ace6:	1c5a      	adds	r2, r3, #1
 800ace8:	6022      	str	r2, [r4, #0]
 800acea:	7019      	strb	r1, [r3, #0]
 800acec:	e7c5      	b.n	800ac7a <_puts_r+0x42>
 800acee:	4622      	mov	r2, r4
 800acf0:	4628      	mov	r0, r5
 800acf2:	f000 f817 	bl	800ad24 <__swbuf_r>
 800acf6:	3001      	adds	r0, #1
 800acf8:	d1bf      	bne.n	800ac7a <_puts_r+0x42>
 800acfa:	e7df      	b.n	800acbc <_puts_r+0x84>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	250a      	movs	r5, #10
 800ad00:	1c5a      	adds	r2, r3, #1
 800ad02:	6022      	str	r2, [r4, #0]
 800ad04:	701d      	strb	r5, [r3, #0]
 800ad06:	e7db      	b.n	800acc0 <_puts_r+0x88>
 800ad08:	0800d0c4 	.word	0x0800d0c4
 800ad0c:	0800d0e4 	.word	0x0800d0e4
 800ad10:	0800d0a4 	.word	0x0800d0a4

0800ad14 <puts>:
 800ad14:	4b02      	ldr	r3, [pc, #8]	; (800ad20 <puts+0xc>)
 800ad16:	4601      	mov	r1, r0
 800ad18:	6818      	ldr	r0, [r3, #0]
 800ad1a:	f7ff bf8d 	b.w	800ac38 <_puts_r>
 800ad1e:	bf00      	nop
 800ad20:	20000074 	.word	0x20000074

0800ad24 <__swbuf_r>:
 800ad24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad26:	460e      	mov	r6, r1
 800ad28:	4614      	mov	r4, r2
 800ad2a:	4605      	mov	r5, r0
 800ad2c:	b118      	cbz	r0, 800ad36 <__swbuf_r+0x12>
 800ad2e:	6983      	ldr	r3, [r0, #24]
 800ad30:	b90b      	cbnz	r3, 800ad36 <__swbuf_r+0x12>
 800ad32:	f001 f84d 	bl	800bdd0 <__sinit>
 800ad36:	4b21      	ldr	r3, [pc, #132]	; (800adbc <__swbuf_r+0x98>)
 800ad38:	429c      	cmp	r4, r3
 800ad3a:	d12b      	bne.n	800ad94 <__swbuf_r+0x70>
 800ad3c:	686c      	ldr	r4, [r5, #4]
 800ad3e:	69a3      	ldr	r3, [r4, #24]
 800ad40:	60a3      	str	r3, [r4, #8]
 800ad42:	89a3      	ldrh	r3, [r4, #12]
 800ad44:	071a      	lsls	r2, r3, #28
 800ad46:	d52f      	bpl.n	800ada8 <__swbuf_r+0x84>
 800ad48:	6923      	ldr	r3, [r4, #16]
 800ad4a:	b36b      	cbz	r3, 800ada8 <__swbuf_r+0x84>
 800ad4c:	6923      	ldr	r3, [r4, #16]
 800ad4e:	6820      	ldr	r0, [r4, #0]
 800ad50:	1ac0      	subs	r0, r0, r3
 800ad52:	6963      	ldr	r3, [r4, #20]
 800ad54:	b2f6      	uxtb	r6, r6
 800ad56:	4283      	cmp	r3, r0
 800ad58:	4637      	mov	r7, r6
 800ad5a:	dc04      	bgt.n	800ad66 <__swbuf_r+0x42>
 800ad5c:	4621      	mov	r1, r4
 800ad5e:	4628      	mov	r0, r5
 800ad60:	f000 ffa2 	bl	800bca8 <_fflush_r>
 800ad64:	bb30      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad66:	68a3      	ldr	r3, [r4, #8]
 800ad68:	3b01      	subs	r3, #1
 800ad6a:	60a3      	str	r3, [r4, #8]
 800ad6c:	6823      	ldr	r3, [r4, #0]
 800ad6e:	1c5a      	adds	r2, r3, #1
 800ad70:	6022      	str	r2, [r4, #0]
 800ad72:	701e      	strb	r6, [r3, #0]
 800ad74:	6963      	ldr	r3, [r4, #20]
 800ad76:	3001      	adds	r0, #1
 800ad78:	4283      	cmp	r3, r0
 800ad7a:	d004      	beq.n	800ad86 <__swbuf_r+0x62>
 800ad7c:	89a3      	ldrh	r3, [r4, #12]
 800ad7e:	07db      	lsls	r3, r3, #31
 800ad80:	d506      	bpl.n	800ad90 <__swbuf_r+0x6c>
 800ad82:	2e0a      	cmp	r6, #10
 800ad84:	d104      	bne.n	800ad90 <__swbuf_r+0x6c>
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f000 ff8d 	bl	800bca8 <_fflush_r>
 800ad8e:	b988      	cbnz	r0, 800adb4 <__swbuf_r+0x90>
 800ad90:	4638      	mov	r0, r7
 800ad92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad94:	4b0a      	ldr	r3, [pc, #40]	; (800adc0 <__swbuf_r+0x9c>)
 800ad96:	429c      	cmp	r4, r3
 800ad98:	d101      	bne.n	800ad9e <__swbuf_r+0x7a>
 800ad9a:	68ac      	ldr	r4, [r5, #8]
 800ad9c:	e7cf      	b.n	800ad3e <__swbuf_r+0x1a>
 800ad9e:	4b09      	ldr	r3, [pc, #36]	; (800adc4 <__swbuf_r+0xa0>)
 800ada0:	429c      	cmp	r4, r3
 800ada2:	bf08      	it	eq
 800ada4:	68ec      	ldreq	r4, [r5, #12]
 800ada6:	e7ca      	b.n	800ad3e <__swbuf_r+0x1a>
 800ada8:	4621      	mov	r1, r4
 800adaa:	4628      	mov	r0, r5
 800adac:	f000 f80c 	bl	800adc8 <__swsetup_r>
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d0cb      	beq.n	800ad4c <__swbuf_r+0x28>
 800adb4:	f04f 37ff 	mov.w	r7, #4294967295
 800adb8:	e7ea      	b.n	800ad90 <__swbuf_r+0x6c>
 800adba:	bf00      	nop
 800adbc:	0800d0c4 	.word	0x0800d0c4
 800adc0:	0800d0e4 	.word	0x0800d0e4
 800adc4:	0800d0a4 	.word	0x0800d0a4

0800adc8 <__swsetup_r>:
 800adc8:	4b32      	ldr	r3, [pc, #200]	; (800ae94 <__swsetup_r+0xcc>)
 800adca:	b570      	push	{r4, r5, r6, lr}
 800adcc:	681d      	ldr	r5, [r3, #0]
 800adce:	4606      	mov	r6, r0
 800add0:	460c      	mov	r4, r1
 800add2:	b125      	cbz	r5, 800adde <__swsetup_r+0x16>
 800add4:	69ab      	ldr	r3, [r5, #24]
 800add6:	b913      	cbnz	r3, 800adde <__swsetup_r+0x16>
 800add8:	4628      	mov	r0, r5
 800adda:	f000 fff9 	bl	800bdd0 <__sinit>
 800adde:	4b2e      	ldr	r3, [pc, #184]	; (800ae98 <__swsetup_r+0xd0>)
 800ade0:	429c      	cmp	r4, r3
 800ade2:	d10f      	bne.n	800ae04 <__swsetup_r+0x3c>
 800ade4:	686c      	ldr	r4, [r5, #4]
 800ade6:	89a3      	ldrh	r3, [r4, #12]
 800ade8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800adec:	0719      	lsls	r1, r3, #28
 800adee:	d42c      	bmi.n	800ae4a <__swsetup_r+0x82>
 800adf0:	06dd      	lsls	r5, r3, #27
 800adf2:	d411      	bmi.n	800ae18 <__swsetup_r+0x50>
 800adf4:	2309      	movs	r3, #9
 800adf6:	6033      	str	r3, [r6, #0]
 800adf8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	f04f 30ff 	mov.w	r0, #4294967295
 800ae02:	e03e      	b.n	800ae82 <__swsetup_r+0xba>
 800ae04:	4b25      	ldr	r3, [pc, #148]	; (800ae9c <__swsetup_r+0xd4>)
 800ae06:	429c      	cmp	r4, r3
 800ae08:	d101      	bne.n	800ae0e <__swsetup_r+0x46>
 800ae0a:	68ac      	ldr	r4, [r5, #8]
 800ae0c:	e7eb      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae0e:	4b24      	ldr	r3, [pc, #144]	; (800aea0 <__swsetup_r+0xd8>)
 800ae10:	429c      	cmp	r4, r3
 800ae12:	bf08      	it	eq
 800ae14:	68ec      	ldreq	r4, [r5, #12]
 800ae16:	e7e6      	b.n	800ade6 <__swsetup_r+0x1e>
 800ae18:	0758      	lsls	r0, r3, #29
 800ae1a:	d512      	bpl.n	800ae42 <__swsetup_r+0x7a>
 800ae1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ae1e:	b141      	cbz	r1, 800ae32 <__swsetup_r+0x6a>
 800ae20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ae24:	4299      	cmp	r1, r3
 800ae26:	d002      	beq.n	800ae2e <__swsetup_r+0x66>
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f001 fc8b 	bl	800c744 <_free_r>
 800ae2e:	2300      	movs	r3, #0
 800ae30:	6363      	str	r3, [r4, #52]	; 0x34
 800ae32:	89a3      	ldrh	r3, [r4, #12]
 800ae34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ae38:	81a3      	strh	r3, [r4, #12]
 800ae3a:	2300      	movs	r3, #0
 800ae3c:	6063      	str	r3, [r4, #4]
 800ae3e:	6923      	ldr	r3, [r4, #16]
 800ae40:	6023      	str	r3, [r4, #0]
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	f043 0308 	orr.w	r3, r3, #8
 800ae48:	81a3      	strh	r3, [r4, #12]
 800ae4a:	6923      	ldr	r3, [r4, #16]
 800ae4c:	b94b      	cbnz	r3, 800ae62 <__swsetup_r+0x9a>
 800ae4e:	89a3      	ldrh	r3, [r4, #12]
 800ae50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ae54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ae58:	d003      	beq.n	800ae62 <__swsetup_r+0x9a>
 800ae5a:	4621      	mov	r1, r4
 800ae5c:	4630      	mov	r0, r6
 800ae5e:	f001 f881 	bl	800bf64 <__smakebuf_r>
 800ae62:	89a0      	ldrh	r0, [r4, #12]
 800ae64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae68:	f010 0301 	ands.w	r3, r0, #1
 800ae6c:	d00a      	beq.n	800ae84 <__swsetup_r+0xbc>
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60a3      	str	r3, [r4, #8]
 800ae72:	6963      	ldr	r3, [r4, #20]
 800ae74:	425b      	negs	r3, r3
 800ae76:	61a3      	str	r3, [r4, #24]
 800ae78:	6923      	ldr	r3, [r4, #16]
 800ae7a:	b943      	cbnz	r3, 800ae8e <__swsetup_r+0xc6>
 800ae7c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ae80:	d1ba      	bne.n	800adf8 <__swsetup_r+0x30>
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	0781      	lsls	r1, r0, #30
 800ae86:	bf58      	it	pl
 800ae88:	6963      	ldrpl	r3, [r4, #20]
 800ae8a:	60a3      	str	r3, [r4, #8]
 800ae8c:	e7f4      	b.n	800ae78 <__swsetup_r+0xb0>
 800ae8e:	2000      	movs	r0, #0
 800ae90:	e7f7      	b.n	800ae82 <__swsetup_r+0xba>
 800ae92:	bf00      	nop
 800ae94:	20000074 	.word	0x20000074
 800ae98:	0800d0c4 	.word	0x0800d0c4
 800ae9c:	0800d0e4 	.word	0x0800d0e4
 800aea0:	0800d0a4 	.word	0x0800d0a4

0800aea4 <quorem>:
 800aea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea8:	6903      	ldr	r3, [r0, #16]
 800aeaa:	690c      	ldr	r4, [r1, #16]
 800aeac:	42a3      	cmp	r3, r4
 800aeae:	4607      	mov	r7, r0
 800aeb0:	f2c0 8081 	blt.w	800afb6 <quorem+0x112>
 800aeb4:	3c01      	subs	r4, #1
 800aeb6:	f101 0814 	add.w	r8, r1, #20
 800aeba:	f100 0514 	add.w	r5, r0, #20
 800aebe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aec2:	9301      	str	r3, [sp, #4]
 800aec4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aec8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aecc:	3301      	adds	r3, #1
 800aece:	429a      	cmp	r2, r3
 800aed0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aed4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aed8:	fbb2 f6f3 	udiv	r6, r2, r3
 800aedc:	d331      	bcc.n	800af42 <quorem+0x9e>
 800aede:	f04f 0e00 	mov.w	lr, #0
 800aee2:	4640      	mov	r0, r8
 800aee4:	46ac      	mov	ip, r5
 800aee6:	46f2      	mov	sl, lr
 800aee8:	f850 2b04 	ldr.w	r2, [r0], #4
 800aeec:	b293      	uxth	r3, r2
 800aeee:	fb06 e303 	mla	r3, r6, r3, lr
 800aef2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	ebaa 0303 	sub.w	r3, sl, r3
 800aefc:	f8dc a000 	ldr.w	sl, [ip]
 800af00:	0c12      	lsrs	r2, r2, #16
 800af02:	fa13 f38a 	uxtah	r3, r3, sl
 800af06:	fb06 e202 	mla	r2, r6, r2, lr
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	9b00      	ldr	r3, [sp, #0]
 800af0e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af12:	b292      	uxth	r2, r2
 800af14:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af1c:	f8bd 3000 	ldrh.w	r3, [sp]
 800af20:	4581      	cmp	r9, r0
 800af22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af26:	f84c 3b04 	str.w	r3, [ip], #4
 800af2a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af2e:	d2db      	bcs.n	800aee8 <quorem+0x44>
 800af30:	f855 300b 	ldr.w	r3, [r5, fp]
 800af34:	b92b      	cbnz	r3, 800af42 <quorem+0x9e>
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	3b04      	subs	r3, #4
 800af3a:	429d      	cmp	r5, r3
 800af3c:	461a      	mov	r2, r3
 800af3e:	d32e      	bcc.n	800af9e <quorem+0xfa>
 800af40:	613c      	str	r4, [r7, #16]
 800af42:	4638      	mov	r0, r7
 800af44:	f001 fae6 	bl	800c514 <__mcmp>
 800af48:	2800      	cmp	r0, #0
 800af4a:	db24      	blt.n	800af96 <quorem+0xf2>
 800af4c:	3601      	adds	r6, #1
 800af4e:	4628      	mov	r0, r5
 800af50:	f04f 0c00 	mov.w	ip, #0
 800af54:	f858 2b04 	ldr.w	r2, [r8], #4
 800af58:	f8d0 e000 	ldr.w	lr, [r0]
 800af5c:	b293      	uxth	r3, r2
 800af5e:	ebac 0303 	sub.w	r3, ip, r3
 800af62:	0c12      	lsrs	r2, r2, #16
 800af64:	fa13 f38e 	uxtah	r3, r3, lr
 800af68:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af6c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af70:	b29b      	uxth	r3, r3
 800af72:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af76:	45c1      	cmp	r9, r8
 800af78:	f840 3b04 	str.w	r3, [r0], #4
 800af7c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af80:	d2e8      	bcs.n	800af54 <quorem+0xb0>
 800af82:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af86:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af8a:	b922      	cbnz	r2, 800af96 <quorem+0xf2>
 800af8c:	3b04      	subs	r3, #4
 800af8e:	429d      	cmp	r5, r3
 800af90:	461a      	mov	r2, r3
 800af92:	d30a      	bcc.n	800afaa <quorem+0x106>
 800af94:	613c      	str	r4, [r7, #16]
 800af96:	4630      	mov	r0, r6
 800af98:	b003      	add	sp, #12
 800af9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af9e:	6812      	ldr	r2, [r2, #0]
 800afa0:	3b04      	subs	r3, #4
 800afa2:	2a00      	cmp	r2, #0
 800afa4:	d1cc      	bne.n	800af40 <quorem+0x9c>
 800afa6:	3c01      	subs	r4, #1
 800afa8:	e7c7      	b.n	800af3a <quorem+0x96>
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	3b04      	subs	r3, #4
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d1f0      	bne.n	800af94 <quorem+0xf0>
 800afb2:	3c01      	subs	r4, #1
 800afb4:	e7eb      	b.n	800af8e <quorem+0xea>
 800afb6:	2000      	movs	r0, #0
 800afb8:	e7ee      	b.n	800af98 <quorem+0xf4>
 800afba:	0000      	movs	r0, r0
 800afbc:	0000      	movs	r0, r0
	...

0800afc0 <_dtoa_r>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	ed2d 8b04 	vpush	{d8-d9}
 800afc8:	ec57 6b10 	vmov	r6, r7, d0
 800afcc:	b093      	sub	sp, #76	; 0x4c
 800afce:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afd0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afd4:	9106      	str	r1, [sp, #24]
 800afd6:	ee10 aa10 	vmov	sl, s0
 800afda:	4604      	mov	r4, r0
 800afdc:	9209      	str	r2, [sp, #36]	; 0x24
 800afde:	930c      	str	r3, [sp, #48]	; 0x30
 800afe0:	46bb      	mov	fp, r7
 800afe2:	b975      	cbnz	r5, 800b002 <_dtoa_r+0x42>
 800afe4:	2010      	movs	r0, #16
 800afe6:	f000 fffd 	bl	800bfe4 <malloc>
 800afea:	4602      	mov	r2, r0
 800afec:	6260      	str	r0, [r4, #36]	; 0x24
 800afee:	b920      	cbnz	r0, 800affa <_dtoa_r+0x3a>
 800aff0:	4ba7      	ldr	r3, [pc, #668]	; (800b290 <_dtoa_r+0x2d0>)
 800aff2:	21ea      	movs	r1, #234	; 0xea
 800aff4:	48a7      	ldr	r0, [pc, #668]	; (800b294 <_dtoa_r+0x2d4>)
 800aff6:	f001 fe45 	bl	800cc84 <__assert_func>
 800affa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800affe:	6005      	str	r5, [r0, #0]
 800b000:	60c5      	str	r5, [r0, #12]
 800b002:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b004:	6819      	ldr	r1, [r3, #0]
 800b006:	b151      	cbz	r1, 800b01e <_dtoa_r+0x5e>
 800b008:	685a      	ldr	r2, [r3, #4]
 800b00a:	604a      	str	r2, [r1, #4]
 800b00c:	2301      	movs	r3, #1
 800b00e:	4093      	lsls	r3, r2
 800b010:	608b      	str	r3, [r1, #8]
 800b012:	4620      	mov	r0, r4
 800b014:	f001 f83c 	bl	800c090 <_Bfree>
 800b018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b01a:	2200      	movs	r2, #0
 800b01c:	601a      	str	r2, [r3, #0]
 800b01e:	1e3b      	subs	r3, r7, #0
 800b020:	bfaa      	itet	ge
 800b022:	2300      	movge	r3, #0
 800b024:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b028:	f8c8 3000 	strge.w	r3, [r8]
 800b02c:	4b9a      	ldr	r3, [pc, #616]	; (800b298 <_dtoa_r+0x2d8>)
 800b02e:	bfbc      	itt	lt
 800b030:	2201      	movlt	r2, #1
 800b032:	f8c8 2000 	strlt.w	r2, [r8]
 800b036:	ea33 030b 	bics.w	r3, r3, fp
 800b03a:	d11b      	bne.n	800b074 <_dtoa_r+0xb4>
 800b03c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b03e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b048:	4333      	orrs	r3, r6
 800b04a:	f000 8592 	beq.w	800bb72 <_dtoa_r+0xbb2>
 800b04e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b050:	b963      	cbnz	r3, 800b06c <_dtoa_r+0xac>
 800b052:	4b92      	ldr	r3, [pc, #584]	; (800b29c <_dtoa_r+0x2dc>)
 800b054:	e022      	b.n	800b09c <_dtoa_r+0xdc>
 800b056:	4b92      	ldr	r3, [pc, #584]	; (800b2a0 <_dtoa_r+0x2e0>)
 800b058:	9301      	str	r3, [sp, #4]
 800b05a:	3308      	adds	r3, #8
 800b05c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b05e:	6013      	str	r3, [r2, #0]
 800b060:	9801      	ldr	r0, [sp, #4]
 800b062:	b013      	add	sp, #76	; 0x4c
 800b064:	ecbd 8b04 	vpop	{d8-d9}
 800b068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b06c:	4b8b      	ldr	r3, [pc, #556]	; (800b29c <_dtoa_r+0x2dc>)
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	3303      	adds	r3, #3
 800b072:	e7f3      	b.n	800b05c <_dtoa_r+0x9c>
 800b074:	2200      	movs	r2, #0
 800b076:	2300      	movs	r3, #0
 800b078:	4650      	mov	r0, sl
 800b07a:	4659      	mov	r1, fp
 800b07c:	f7f5 fd44 	bl	8000b08 <__aeabi_dcmpeq>
 800b080:	ec4b ab19 	vmov	d9, sl, fp
 800b084:	4680      	mov	r8, r0
 800b086:	b158      	cbz	r0, 800b0a0 <_dtoa_r+0xe0>
 800b088:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b08a:	2301      	movs	r3, #1
 800b08c:	6013      	str	r3, [r2, #0]
 800b08e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b090:	2b00      	cmp	r3, #0
 800b092:	f000 856b 	beq.w	800bb6c <_dtoa_r+0xbac>
 800b096:	4883      	ldr	r0, [pc, #524]	; (800b2a4 <_dtoa_r+0x2e4>)
 800b098:	6018      	str	r0, [r3, #0]
 800b09a:	1e43      	subs	r3, r0, #1
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	e7df      	b.n	800b060 <_dtoa_r+0xa0>
 800b0a0:	ec4b ab10 	vmov	d0, sl, fp
 800b0a4:	aa10      	add	r2, sp, #64	; 0x40
 800b0a6:	a911      	add	r1, sp, #68	; 0x44
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f001 fad9 	bl	800c660 <__d2b>
 800b0ae:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0b2:	ee08 0a10 	vmov	s16, r0
 800b0b6:	2d00      	cmp	r5, #0
 800b0b8:	f000 8084 	beq.w	800b1c4 <_dtoa_r+0x204>
 800b0bc:	ee19 3a90 	vmov	r3, s19
 800b0c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0c4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0c8:	4656      	mov	r6, sl
 800b0ca:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0ce:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0d2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0d6:	4b74      	ldr	r3, [pc, #464]	; (800b2a8 <_dtoa_r+0x2e8>)
 800b0d8:	2200      	movs	r2, #0
 800b0da:	4630      	mov	r0, r6
 800b0dc:	4639      	mov	r1, r7
 800b0de:	f7f5 f8f3 	bl	80002c8 <__aeabi_dsub>
 800b0e2:	a365      	add	r3, pc, #404	; (adr r3, 800b278 <_dtoa_r+0x2b8>)
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	f7f5 faa6 	bl	8000638 <__aeabi_dmul>
 800b0ec:	a364      	add	r3, pc, #400	; (adr r3, 800b280 <_dtoa_r+0x2c0>)
 800b0ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f2:	f7f5 f8eb 	bl	80002cc <__adddf3>
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	4628      	mov	r0, r5
 800b0fa:	460f      	mov	r7, r1
 800b0fc:	f7f5 fa32 	bl	8000564 <__aeabi_i2d>
 800b100:	a361      	add	r3, pc, #388	; (adr r3, 800b288 <_dtoa_r+0x2c8>)
 800b102:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b106:	f7f5 fa97 	bl	8000638 <__aeabi_dmul>
 800b10a:	4602      	mov	r2, r0
 800b10c:	460b      	mov	r3, r1
 800b10e:	4630      	mov	r0, r6
 800b110:	4639      	mov	r1, r7
 800b112:	f7f5 f8db 	bl	80002cc <__adddf3>
 800b116:	4606      	mov	r6, r0
 800b118:	460f      	mov	r7, r1
 800b11a:	f7f5 fd3d 	bl	8000b98 <__aeabi_d2iz>
 800b11e:	2200      	movs	r2, #0
 800b120:	9000      	str	r0, [sp, #0]
 800b122:	2300      	movs	r3, #0
 800b124:	4630      	mov	r0, r6
 800b126:	4639      	mov	r1, r7
 800b128:	f7f5 fcf8 	bl	8000b1c <__aeabi_dcmplt>
 800b12c:	b150      	cbz	r0, 800b144 <_dtoa_r+0x184>
 800b12e:	9800      	ldr	r0, [sp, #0]
 800b130:	f7f5 fa18 	bl	8000564 <__aeabi_i2d>
 800b134:	4632      	mov	r2, r6
 800b136:	463b      	mov	r3, r7
 800b138:	f7f5 fce6 	bl	8000b08 <__aeabi_dcmpeq>
 800b13c:	b910      	cbnz	r0, 800b144 <_dtoa_r+0x184>
 800b13e:	9b00      	ldr	r3, [sp, #0]
 800b140:	3b01      	subs	r3, #1
 800b142:	9300      	str	r3, [sp, #0]
 800b144:	9b00      	ldr	r3, [sp, #0]
 800b146:	2b16      	cmp	r3, #22
 800b148:	d85a      	bhi.n	800b200 <_dtoa_r+0x240>
 800b14a:	9a00      	ldr	r2, [sp, #0]
 800b14c:	4b57      	ldr	r3, [pc, #348]	; (800b2ac <_dtoa_r+0x2ec>)
 800b14e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b152:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b156:	ec51 0b19 	vmov	r0, r1, d9
 800b15a:	f7f5 fcdf 	bl	8000b1c <__aeabi_dcmplt>
 800b15e:	2800      	cmp	r0, #0
 800b160:	d050      	beq.n	800b204 <_dtoa_r+0x244>
 800b162:	9b00      	ldr	r3, [sp, #0]
 800b164:	3b01      	subs	r3, #1
 800b166:	9300      	str	r3, [sp, #0]
 800b168:	2300      	movs	r3, #0
 800b16a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b16c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b16e:	1b5d      	subs	r5, r3, r5
 800b170:	1e6b      	subs	r3, r5, #1
 800b172:	9305      	str	r3, [sp, #20]
 800b174:	bf45      	ittet	mi
 800b176:	f1c5 0301 	rsbmi	r3, r5, #1
 800b17a:	9304      	strmi	r3, [sp, #16]
 800b17c:	2300      	movpl	r3, #0
 800b17e:	2300      	movmi	r3, #0
 800b180:	bf4c      	ite	mi
 800b182:	9305      	strmi	r3, [sp, #20]
 800b184:	9304      	strpl	r3, [sp, #16]
 800b186:	9b00      	ldr	r3, [sp, #0]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	db3d      	blt.n	800b208 <_dtoa_r+0x248>
 800b18c:	9b05      	ldr	r3, [sp, #20]
 800b18e:	9a00      	ldr	r2, [sp, #0]
 800b190:	920a      	str	r2, [sp, #40]	; 0x28
 800b192:	4413      	add	r3, r2
 800b194:	9305      	str	r3, [sp, #20]
 800b196:	2300      	movs	r3, #0
 800b198:	9307      	str	r3, [sp, #28]
 800b19a:	9b06      	ldr	r3, [sp, #24]
 800b19c:	2b09      	cmp	r3, #9
 800b19e:	f200 8089 	bhi.w	800b2b4 <_dtoa_r+0x2f4>
 800b1a2:	2b05      	cmp	r3, #5
 800b1a4:	bfc4      	itt	gt
 800b1a6:	3b04      	subgt	r3, #4
 800b1a8:	9306      	strgt	r3, [sp, #24]
 800b1aa:	9b06      	ldr	r3, [sp, #24]
 800b1ac:	f1a3 0302 	sub.w	r3, r3, #2
 800b1b0:	bfcc      	ite	gt
 800b1b2:	2500      	movgt	r5, #0
 800b1b4:	2501      	movle	r5, #1
 800b1b6:	2b03      	cmp	r3, #3
 800b1b8:	f200 8087 	bhi.w	800b2ca <_dtoa_r+0x30a>
 800b1bc:	e8df f003 	tbb	[pc, r3]
 800b1c0:	59383a2d 	.word	0x59383a2d
 800b1c4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1c8:	441d      	add	r5, r3
 800b1ca:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	bfc1      	itttt	gt
 800b1d2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1d6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1da:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1de:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1e2:	bfda      	itte	le
 800b1e4:	f1c3 0320 	rsble	r3, r3, #32
 800b1e8:	fa06 f003 	lslle.w	r0, r6, r3
 800b1ec:	4318      	orrgt	r0, r3
 800b1ee:	f7f5 f9a9 	bl	8000544 <__aeabi_ui2d>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4606      	mov	r6, r0
 800b1f6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b1fa:	3d01      	subs	r5, #1
 800b1fc:	930e      	str	r3, [sp, #56]	; 0x38
 800b1fe:	e76a      	b.n	800b0d6 <_dtoa_r+0x116>
 800b200:	2301      	movs	r3, #1
 800b202:	e7b2      	b.n	800b16a <_dtoa_r+0x1aa>
 800b204:	900b      	str	r0, [sp, #44]	; 0x2c
 800b206:	e7b1      	b.n	800b16c <_dtoa_r+0x1ac>
 800b208:	9b04      	ldr	r3, [sp, #16]
 800b20a:	9a00      	ldr	r2, [sp, #0]
 800b20c:	1a9b      	subs	r3, r3, r2
 800b20e:	9304      	str	r3, [sp, #16]
 800b210:	4253      	negs	r3, r2
 800b212:	9307      	str	r3, [sp, #28]
 800b214:	2300      	movs	r3, #0
 800b216:	930a      	str	r3, [sp, #40]	; 0x28
 800b218:	e7bf      	b.n	800b19a <_dtoa_r+0x1da>
 800b21a:	2300      	movs	r3, #0
 800b21c:	9308      	str	r3, [sp, #32]
 800b21e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b220:	2b00      	cmp	r3, #0
 800b222:	dc55      	bgt.n	800b2d0 <_dtoa_r+0x310>
 800b224:	2301      	movs	r3, #1
 800b226:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b22a:	461a      	mov	r2, r3
 800b22c:	9209      	str	r2, [sp, #36]	; 0x24
 800b22e:	e00c      	b.n	800b24a <_dtoa_r+0x28a>
 800b230:	2301      	movs	r3, #1
 800b232:	e7f3      	b.n	800b21c <_dtoa_r+0x25c>
 800b234:	2300      	movs	r3, #0
 800b236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b238:	9308      	str	r3, [sp, #32]
 800b23a:	9b00      	ldr	r3, [sp, #0]
 800b23c:	4413      	add	r3, r2
 800b23e:	9302      	str	r3, [sp, #8]
 800b240:	3301      	adds	r3, #1
 800b242:	2b01      	cmp	r3, #1
 800b244:	9303      	str	r3, [sp, #12]
 800b246:	bfb8      	it	lt
 800b248:	2301      	movlt	r3, #1
 800b24a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b24c:	2200      	movs	r2, #0
 800b24e:	6042      	str	r2, [r0, #4]
 800b250:	2204      	movs	r2, #4
 800b252:	f102 0614 	add.w	r6, r2, #20
 800b256:	429e      	cmp	r6, r3
 800b258:	6841      	ldr	r1, [r0, #4]
 800b25a:	d93d      	bls.n	800b2d8 <_dtoa_r+0x318>
 800b25c:	4620      	mov	r0, r4
 800b25e:	f000 fed7 	bl	800c010 <_Balloc>
 800b262:	9001      	str	r0, [sp, #4]
 800b264:	2800      	cmp	r0, #0
 800b266:	d13b      	bne.n	800b2e0 <_dtoa_r+0x320>
 800b268:	4b11      	ldr	r3, [pc, #68]	; (800b2b0 <_dtoa_r+0x2f0>)
 800b26a:	4602      	mov	r2, r0
 800b26c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b270:	e6c0      	b.n	800aff4 <_dtoa_r+0x34>
 800b272:	2301      	movs	r3, #1
 800b274:	e7df      	b.n	800b236 <_dtoa_r+0x276>
 800b276:	bf00      	nop
 800b278:	636f4361 	.word	0x636f4361
 800b27c:	3fd287a7 	.word	0x3fd287a7
 800b280:	8b60c8b3 	.word	0x8b60c8b3
 800b284:	3fc68a28 	.word	0x3fc68a28
 800b288:	509f79fb 	.word	0x509f79fb
 800b28c:	3fd34413 	.word	0x3fd34413
 800b290:	0800d021 	.word	0x0800d021
 800b294:	0800d038 	.word	0x0800d038
 800b298:	7ff00000 	.word	0x7ff00000
 800b29c:	0800d01d 	.word	0x0800d01d
 800b2a0:	0800d014 	.word	0x0800d014
 800b2a4:	0800cff1 	.word	0x0800cff1
 800b2a8:	3ff80000 	.word	0x3ff80000
 800b2ac:	0800d188 	.word	0x0800d188
 800b2b0:	0800d093 	.word	0x0800d093
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	9306      	str	r3, [sp, #24]
 800b2ba:	9508      	str	r5, [sp, #32]
 800b2bc:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	2312      	movs	r3, #18
 800b2c8:	e7b0      	b.n	800b22c <_dtoa_r+0x26c>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	9308      	str	r3, [sp, #32]
 800b2ce:	e7f5      	b.n	800b2bc <_dtoa_r+0x2fc>
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2d6:	e7b8      	b.n	800b24a <_dtoa_r+0x28a>
 800b2d8:	3101      	adds	r1, #1
 800b2da:	6041      	str	r1, [r0, #4]
 800b2dc:	0052      	lsls	r2, r2, #1
 800b2de:	e7b8      	b.n	800b252 <_dtoa_r+0x292>
 800b2e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2e2:	9a01      	ldr	r2, [sp, #4]
 800b2e4:	601a      	str	r2, [r3, #0]
 800b2e6:	9b03      	ldr	r3, [sp, #12]
 800b2e8:	2b0e      	cmp	r3, #14
 800b2ea:	f200 809d 	bhi.w	800b428 <_dtoa_r+0x468>
 800b2ee:	2d00      	cmp	r5, #0
 800b2f0:	f000 809a 	beq.w	800b428 <_dtoa_r+0x468>
 800b2f4:	9b00      	ldr	r3, [sp, #0]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	dd32      	ble.n	800b360 <_dtoa_r+0x3a0>
 800b2fa:	4ab7      	ldr	r2, [pc, #732]	; (800b5d8 <_dtoa_r+0x618>)
 800b2fc:	f003 030f 	and.w	r3, r3, #15
 800b300:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b304:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b308:	9b00      	ldr	r3, [sp, #0]
 800b30a:	05d8      	lsls	r0, r3, #23
 800b30c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b310:	d516      	bpl.n	800b340 <_dtoa_r+0x380>
 800b312:	4bb2      	ldr	r3, [pc, #712]	; (800b5dc <_dtoa_r+0x61c>)
 800b314:	ec51 0b19 	vmov	r0, r1, d9
 800b318:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b31c:	f7f5 fab6 	bl	800088c <__aeabi_ddiv>
 800b320:	f007 070f 	and.w	r7, r7, #15
 800b324:	4682      	mov	sl, r0
 800b326:	468b      	mov	fp, r1
 800b328:	2503      	movs	r5, #3
 800b32a:	4eac      	ldr	r6, [pc, #688]	; (800b5dc <_dtoa_r+0x61c>)
 800b32c:	b957      	cbnz	r7, 800b344 <_dtoa_r+0x384>
 800b32e:	4642      	mov	r2, r8
 800b330:	464b      	mov	r3, r9
 800b332:	4650      	mov	r0, sl
 800b334:	4659      	mov	r1, fp
 800b336:	f7f5 faa9 	bl	800088c <__aeabi_ddiv>
 800b33a:	4682      	mov	sl, r0
 800b33c:	468b      	mov	fp, r1
 800b33e:	e028      	b.n	800b392 <_dtoa_r+0x3d2>
 800b340:	2502      	movs	r5, #2
 800b342:	e7f2      	b.n	800b32a <_dtoa_r+0x36a>
 800b344:	07f9      	lsls	r1, r7, #31
 800b346:	d508      	bpl.n	800b35a <_dtoa_r+0x39a>
 800b348:	4640      	mov	r0, r8
 800b34a:	4649      	mov	r1, r9
 800b34c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b350:	f7f5 f972 	bl	8000638 <__aeabi_dmul>
 800b354:	3501      	adds	r5, #1
 800b356:	4680      	mov	r8, r0
 800b358:	4689      	mov	r9, r1
 800b35a:	107f      	asrs	r7, r7, #1
 800b35c:	3608      	adds	r6, #8
 800b35e:	e7e5      	b.n	800b32c <_dtoa_r+0x36c>
 800b360:	f000 809b 	beq.w	800b49a <_dtoa_r+0x4da>
 800b364:	9b00      	ldr	r3, [sp, #0]
 800b366:	4f9d      	ldr	r7, [pc, #628]	; (800b5dc <_dtoa_r+0x61c>)
 800b368:	425e      	negs	r6, r3
 800b36a:	4b9b      	ldr	r3, [pc, #620]	; (800b5d8 <_dtoa_r+0x618>)
 800b36c:	f006 020f 	and.w	r2, r6, #15
 800b370:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b378:	ec51 0b19 	vmov	r0, r1, d9
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	1136      	asrs	r6, r6, #4
 800b382:	4682      	mov	sl, r0
 800b384:	468b      	mov	fp, r1
 800b386:	2300      	movs	r3, #0
 800b388:	2502      	movs	r5, #2
 800b38a:	2e00      	cmp	r6, #0
 800b38c:	d17a      	bne.n	800b484 <_dtoa_r+0x4c4>
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d1d3      	bne.n	800b33a <_dtoa_r+0x37a>
 800b392:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b394:	2b00      	cmp	r3, #0
 800b396:	f000 8082 	beq.w	800b49e <_dtoa_r+0x4de>
 800b39a:	4b91      	ldr	r3, [pc, #580]	; (800b5e0 <_dtoa_r+0x620>)
 800b39c:	2200      	movs	r2, #0
 800b39e:	4650      	mov	r0, sl
 800b3a0:	4659      	mov	r1, fp
 800b3a2:	f7f5 fbbb 	bl	8000b1c <__aeabi_dcmplt>
 800b3a6:	2800      	cmp	r0, #0
 800b3a8:	d079      	beq.n	800b49e <_dtoa_r+0x4de>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d076      	beq.n	800b49e <_dtoa_r+0x4de>
 800b3b0:	9b02      	ldr	r3, [sp, #8]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	dd36      	ble.n	800b424 <_dtoa_r+0x464>
 800b3b6:	9b00      	ldr	r3, [sp, #0]
 800b3b8:	4650      	mov	r0, sl
 800b3ba:	4659      	mov	r1, fp
 800b3bc:	1e5f      	subs	r7, r3, #1
 800b3be:	2200      	movs	r2, #0
 800b3c0:	4b88      	ldr	r3, [pc, #544]	; (800b5e4 <_dtoa_r+0x624>)
 800b3c2:	f7f5 f939 	bl	8000638 <__aeabi_dmul>
 800b3c6:	9e02      	ldr	r6, [sp, #8]
 800b3c8:	4682      	mov	sl, r0
 800b3ca:	468b      	mov	fp, r1
 800b3cc:	3501      	adds	r5, #1
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	f7f5 f8c8 	bl	8000564 <__aeabi_i2d>
 800b3d4:	4652      	mov	r2, sl
 800b3d6:	465b      	mov	r3, fp
 800b3d8:	f7f5 f92e 	bl	8000638 <__aeabi_dmul>
 800b3dc:	4b82      	ldr	r3, [pc, #520]	; (800b5e8 <_dtoa_r+0x628>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	f7f4 ff74 	bl	80002cc <__adddf3>
 800b3e4:	46d0      	mov	r8, sl
 800b3e6:	46d9      	mov	r9, fp
 800b3e8:	4682      	mov	sl, r0
 800b3ea:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3ee:	2e00      	cmp	r6, #0
 800b3f0:	d158      	bne.n	800b4a4 <_dtoa_r+0x4e4>
 800b3f2:	4b7e      	ldr	r3, [pc, #504]	; (800b5ec <_dtoa_r+0x62c>)
 800b3f4:	2200      	movs	r2, #0
 800b3f6:	4640      	mov	r0, r8
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	f7f4 ff65 	bl	80002c8 <__aeabi_dsub>
 800b3fe:	4652      	mov	r2, sl
 800b400:	465b      	mov	r3, fp
 800b402:	4680      	mov	r8, r0
 800b404:	4689      	mov	r9, r1
 800b406:	f7f5 fba7 	bl	8000b58 <__aeabi_dcmpgt>
 800b40a:	2800      	cmp	r0, #0
 800b40c:	f040 8295 	bne.w	800b93a <_dtoa_r+0x97a>
 800b410:	4652      	mov	r2, sl
 800b412:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b416:	4640      	mov	r0, r8
 800b418:	4649      	mov	r1, r9
 800b41a:	f7f5 fb7f 	bl	8000b1c <__aeabi_dcmplt>
 800b41e:	2800      	cmp	r0, #0
 800b420:	f040 8289 	bne.w	800b936 <_dtoa_r+0x976>
 800b424:	ec5b ab19 	vmov	sl, fp, d9
 800b428:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	f2c0 8148 	blt.w	800b6c0 <_dtoa_r+0x700>
 800b430:	9a00      	ldr	r2, [sp, #0]
 800b432:	2a0e      	cmp	r2, #14
 800b434:	f300 8144 	bgt.w	800b6c0 <_dtoa_r+0x700>
 800b438:	4b67      	ldr	r3, [pc, #412]	; (800b5d8 <_dtoa_r+0x618>)
 800b43a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b43e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b444:	2b00      	cmp	r3, #0
 800b446:	f280 80d5 	bge.w	800b5f4 <_dtoa_r+0x634>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f300 80d1 	bgt.w	800b5f4 <_dtoa_r+0x634>
 800b452:	f040 826f 	bne.w	800b934 <_dtoa_r+0x974>
 800b456:	4b65      	ldr	r3, [pc, #404]	; (800b5ec <_dtoa_r+0x62c>)
 800b458:	2200      	movs	r2, #0
 800b45a:	4640      	mov	r0, r8
 800b45c:	4649      	mov	r1, r9
 800b45e:	f7f5 f8eb 	bl	8000638 <__aeabi_dmul>
 800b462:	4652      	mov	r2, sl
 800b464:	465b      	mov	r3, fp
 800b466:	f7f5 fb6d 	bl	8000b44 <__aeabi_dcmpge>
 800b46a:	9e03      	ldr	r6, [sp, #12]
 800b46c:	4637      	mov	r7, r6
 800b46e:	2800      	cmp	r0, #0
 800b470:	f040 8245 	bne.w	800b8fe <_dtoa_r+0x93e>
 800b474:	9d01      	ldr	r5, [sp, #4]
 800b476:	2331      	movs	r3, #49	; 0x31
 800b478:	f805 3b01 	strb.w	r3, [r5], #1
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	3301      	adds	r3, #1
 800b480:	9300      	str	r3, [sp, #0]
 800b482:	e240      	b.n	800b906 <_dtoa_r+0x946>
 800b484:	07f2      	lsls	r2, r6, #31
 800b486:	d505      	bpl.n	800b494 <_dtoa_r+0x4d4>
 800b488:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b48c:	f7f5 f8d4 	bl	8000638 <__aeabi_dmul>
 800b490:	3501      	adds	r5, #1
 800b492:	2301      	movs	r3, #1
 800b494:	1076      	asrs	r6, r6, #1
 800b496:	3708      	adds	r7, #8
 800b498:	e777      	b.n	800b38a <_dtoa_r+0x3ca>
 800b49a:	2502      	movs	r5, #2
 800b49c:	e779      	b.n	800b392 <_dtoa_r+0x3d2>
 800b49e:	9f00      	ldr	r7, [sp, #0]
 800b4a0:	9e03      	ldr	r6, [sp, #12]
 800b4a2:	e794      	b.n	800b3ce <_dtoa_r+0x40e>
 800b4a4:	9901      	ldr	r1, [sp, #4]
 800b4a6:	4b4c      	ldr	r3, [pc, #304]	; (800b5d8 <_dtoa_r+0x618>)
 800b4a8:	4431      	add	r1, r6
 800b4aa:	910d      	str	r1, [sp, #52]	; 0x34
 800b4ac:	9908      	ldr	r1, [sp, #32]
 800b4ae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4b2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4b6:	2900      	cmp	r1, #0
 800b4b8:	d043      	beq.n	800b542 <_dtoa_r+0x582>
 800b4ba:	494d      	ldr	r1, [pc, #308]	; (800b5f0 <_dtoa_r+0x630>)
 800b4bc:	2000      	movs	r0, #0
 800b4be:	f7f5 f9e5 	bl	800088c <__aeabi_ddiv>
 800b4c2:	4652      	mov	r2, sl
 800b4c4:	465b      	mov	r3, fp
 800b4c6:	f7f4 feff 	bl	80002c8 <__aeabi_dsub>
 800b4ca:	9d01      	ldr	r5, [sp, #4]
 800b4cc:	4682      	mov	sl, r0
 800b4ce:	468b      	mov	fp, r1
 800b4d0:	4649      	mov	r1, r9
 800b4d2:	4640      	mov	r0, r8
 800b4d4:	f7f5 fb60 	bl	8000b98 <__aeabi_d2iz>
 800b4d8:	4606      	mov	r6, r0
 800b4da:	f7f5 f843 	bl	8000564 <__aeabi_i2d>
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f4 feef 	bl	80002c8 <__aeabi_dsub>
 800b4ea:	3630      	adds	r6, #48	; 0x30
 800b4ec:	f805 6b01 	strb.w	r6, [r5], #1
 800b4f0:	4652      	mov	r2, sl
 800b4f2:	465b      	mov	r3, fp
 800b4f4:	4680      	mov	r8, r0
 800b4f6:	4689      	mov	r9, r1
 800b4f8:	f7f5 fb10 	bl	8000b1c <__aeabi_dcmplt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	d163      	bne.n	800b5c8 <_dtoa_r+0x608>
 800b500:	4642      	mov	r2, r8
 800b502:	464b      	mov	r3, r9
 800b504:	4936      	ldr	r1, [pc, #216]	; (800b5e0 <_dtoa_r+0x620>)
 800b506:	2000      	movs	r0, #0
 800b508:	f7f4 fede 	bl	80002c8 <__aeabi_dsub>
 800b50c:	4652      	mov	r2, sl
 800b50e:	465b      	mov	r3, fp
 800b510:	f7f5 fb04 	bl	8000b1c <__aeabi_dcmplt>
 800b514:	2800      	cmp	r0, #0
 800b516:	f040 80b5 	bne.w	800b684 <_dtoa_r+0x6c4>
 800b51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b51c:	429d      	cmp	r5, r3
 800b51e:	d081      	beq.n	800b424 <_dtoa_r+0x464>
 800b520:	4b30      	ldr	r3, [pc, #192]	; (800b5e4 <_dtoa_r+0x624>)
 800b522:	2200      	movs	r2, #0
 800b524:	4650      	mov	r0, sl
 800b526:	4659      	mov	r1, fp
 800b528:	f7f5 f886 	bl	8000638 <__aeabi_dmul>
 800b52c:	4b2d      	ldr	r3, [pc, #180]	; (800b5e4 <_dtoa_r+0x624>)
 800b52e:	4682      	mov	sl, r0
 800b530:	468b      	mov	fp, r1
 800b532:	4640      	mov	r0, r8
 800b534:	4649      	mov	r1, r9
 800b536:	2200      	movs	r2, #0
 800b538:	f7f5 f87e 	bl	8000638 <__aeabi_dmul>
 800b53c:	4680      	mov	r8, r0
 800b53e:	4689      	mov	r9, r1
 800b540:	e7c6      	b.n	800b4d0 <_dtoa_r+0x510>
 800b542:	4650      	mov	r0, sl
 800b544:	4659      	mov	r1, fp
 800b546:	f7f5 f877 	bl	8000638 <__aeabi_dmul>
 800b54a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54c:	9d01      	ldr	r5, [sp, #4]
 800b54e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b550:	4682      	mov	sl, r0
 800b552:	468b      	mov	fp, r1
 800b554:	4649      	mov	r1, r9
 800b556:	4640      	mov	r0, r8
 800b558:	f7f5 fb1e 	bl	8000b98 <__aeabi_d2iz>
 800b55c:	4606      	mov	r6, r0
 800b55e:	f7f5 f801 	bl	8000564 <__aeabi_i2d>
 800b562:	3630      	adds	r6, #48	; 0x30
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7f4 feac 	bl	80002c8 <__aeabi_dsub>
 800b570:	f805 6b01 	strb.w	r6, [r5], #1
 800b574:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b576:	429d      	cmp	r5, r3
 800b578:	4680      	mov	r8, r0
 800b57a:	4689      	mov	r9, r1
 800b57c:	f04f 0200 	mov.w	r2, #0
 800b580:	d124      	bne.n	800b5cc <_dtoa_r+0x60c>
 800b582:	4b1b      	ldr	r3, [pc, #108]	; (800b5f0 <_dtoa_r+0x630>)
 800b584:	4650      	mov	r0, sl
 800b586:	4659      	mov	r1, fp
 800b588:	f7f4 fea0 	bl	80002cc <__adddf3>
 800b58c:	4602      	mov	r2, r0
 800b58e:	460b      	mov	r3, r1
 800b590:	4640      	mov	r0, r8
 800b592:	4649      	mov	r1, r9
 800b594:	f7f5 fae0 	bl	8000b58 <__aeabi_dcmpgt>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d173      	bne.n	800b684 <_dtoa_r+0x6c4>
 800b59c:	4652      	mov	r2, sl
 800b59e:	465b      	mov	r3, fp
 800b5a0:	4913      	ldr	r1, [pc, #76]	; (800b5f0 <_dtoa_r+0x630>)
 800b5a2:	2000      	movs	r0, #0
 800b5a4:	f7f4 fe90 	bl	80002c8 <__aeabi_dsub>
 800b5a8:	4602      	mov	r2, r0
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	4640      	mov	r0, r8
 800b5ae:	4649      	mov	r1, r9
 800b5b0:	f7f5 fab4 	bl	8000b1c <__aeabi_dcmplt>
 800b5b4:	2800      	cmp	r0, #0
 800b5b6:	f43f af35 	beq.w	800b424 <_dtoa_r+0x464>
 800b5ba:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5bc:	1e6b      	subs	r3, r5, #1
 800b5be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5c4:	2b30      	cmp	r3, #48	; 0x30
 800b5c6:	d0f8      	beq.n	800b5ba <_dtoa_r+0x5fa>
 800b5c8:	9700      	str	r7, [sp, #0]
 800b5ca:	e049      	b.n	800b660 <_dtoa_r+0x6a0>
 800b5cc:	4b05      	ldr	r3, [pc, #20]	; (800b5e4 <_dtoa_r+0x624>)
 800b5ce:	f7f5 f833 	bl	8000638 <__aeabi_dmul>
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	4689      	mov	r9, r1
 800b5d6:	e7bd      	b.n	800b554 <_dtoa_r+0x594>
 800b5d8:	0800d188 	.word	0x0800d188
 800b5dc:	0800d160 	.word	0x0800d160
 800b5e0:	3ff00000 	.word	0x3ff00000
 800b5e4:	40240000 	.word	0x40240000
 800b5e8:	401c0000 	.word	0x401c0000
 800b5ec:	40140000 	.word	0x40140000
 800b5f0:	3fe00000 	.word	0x3fe00000
 800b5f4:	9d01      	ldr	r5, [sp, #4]
 800b5f6:	4656      	mov	r6, sl
 800b5f8:	465f      	mov	r7, fp
 800b5fa:	4642      	mov	r2, r8
 800b5fc:	464b      	mov	r3, r9
 800b5fe:	4630      	mov	r0, r6
 800b600:	4639      	mov	r1, r7
 800b602:	f7f5 f943 	bl	800088c <__aeabi_ddiv>
 800b606:	f7f5 fac7 	bl	8000b98 <__aeabi_d2iz>
 800b60a:	4682      	mov	sl, r0
 800b60c:	f7f4 ffaa 	bl	8000564 <__aeabi_i2d>
 800b610:	4642      	mov	r2, r8
 800b612:	464b      	mov	r3, r9
 800b614:	f7f5 f810 	bl	8000638 <__aeabi_dmul>
 800b618:	4602      	mov	r2, r0
 800b61a:	460b      	mov	r3, r1
 800b61c:	4630      	mov	r0, r6
 800b61e:	4639      	mov	r1, r7
 800b620:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b624:	f7f4 fe50 	bl	80002c8 <__aeabi_dsub>
 800b628:	f805 6b01 	strb.w	r6, [r5], #1
 800b62c:	9e01      	ldr	r6, [sp, #4]
 800b62e:	9f03      	ldr	r7, [sp, #12]
 800b630:	1bae      	subs	r6, r5, r6
 800b632:	42b7      	cmp	r7, r6
 800b634:	4602      	mov	r2, r0
 800b636:	460b      	mov	r3, r1
 800b638:	d135      	bne.n	800b6a6 <_dtoa_r+0x6e6>
 800b63a:	f7f4 fe47 	bl	80002cc <__adddf3>
 800b63e:	4642      	mov	r2, r8
 800b640:	464b      	mov	r3, r9
 800b642:	4606      	mov	r6, r0
 800b644:	460f      	mov	r7, r1
 800b646:	f7f5 fa87 	bl	8000b58 <__aeabi_dcmpgt>
 800b64a:	b9d0      	cbnz	r0, 800b682 <_dtoa_r+0x6c2>
 800b64c:	4642      	mov	r2, r8
 800b64e:	464b      	mov	r3, r9
 800b650:	4630      	mov	r0, r6
 800b652:	4639      	mov	r1, r7
 800b654:	f7f5 fa58 	bl	8000b08 <__aeabi_dcmpeq>
 800b658:	b110      	cbz	r0, 800b660 <_dtoa_r+0x6a0>
 800b65a:	f01a 0f01 	tst.w	sl, #1
 800b65e:	d110      	bne.n	800b682 <_dtoa_r+0x6c2>
 800b660:	4620      	mov	r0, r4
 800b662:	ee18 1a10 	vmov	r1, s16
 800b666:	f000 fd13 	bl	800c090 <_Bfree>
 800b66a:	2300      	movs	r3, #0
 800b66c:	9800      	ldr	r0, [sp, #0]
 800b66e:	702b      	strb	r3, [r5, #0]
 800b670:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b672:	3001      	adds	r0, #1
 800b674:	6018      	str	r0, [r3, #0]
 800b676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b678:	2b00      	cmp	r3, #0
 800b67a:	f43f acf1 	beq.w	800b060 <_dtoa_r+0xa0>
 800b67e:	601d      	str	r5, [r3, #0]
 800b680:	e4ee      	b.n	800b060 <_dtoa_r+0xa0>
 800b682:	9f00      	ldr	r7, [sp, #0]
 800b684:	462b      	mov	r3, r5
 800b686:	461d      	mov	r5, r3
 800b688:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b68c:	2a39      	cmp	r2, #57	; 0x39
 800b68e:	d106      	bne.n	800b69e <_dtoa_r+0x6de>
 800b690:	9a01      	ldr	r2, [sp, #4]
 800b692:	429a      	cmp	r2, r3
 800b694:	d1f7      	bne.n	800b686 <_dtoa_r+0x6c6>
 800b696:	9901      	ldr	r1, [sp, #4]
 800b698:	2230      	movs	r2, #48	; 0x30
 800b69a:	3701      	adds	r7, #1
 800b69c:	700a      	strb	r2, [r1, #0]
 800b69e:	781a      	ldrb	r2, [r3, #0]
 800b6a0:	3201      	adds	r2, #1
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	e790      	b.n	800b5c8 <_dtoa_r+0x608>
 800b6a6:	4ba6      	ldr	r3, [pc, #664]	; (800b940 <_dtoa_r+0x980>)
 800b6a8:	2200      	movs	r2, #0
 800b6aa:	f7f4 ffc5 	bl	8000638 <__aeabi_dmul>
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4606      	mov	r6, r0
 800b6b4:	460f      	mov	r7, r1
 800b6b6:	f7f5 fa27 	bl	8000b08 <__aeabi_dcmpeq>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d09d      	beq.n	800b5fa <_dtoa_r+0x63a>
 800b6be:	e7cf      	b.n	800b660 <_dtoa_r+0x6a0>
 800b6c0:	9a08      	ldr	r2, [sp, #32]
 800b6c2:	2a00      	cmp	r2, #0
 800b6c4:	f000 80d7 	beq.w	800b876 <_dtoa_r+0x8b6>
 800b6c8:	9a06      	ldr	r2, [sp, #24]
 800b6ca:	2a01      	cmp	r2, #1
 800b6cc:	f300 80ba 	bgt.w	800b844 <_dtoa_r+0x884>
 800b6d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6d2:	2a00      	cmp	r2, #0
 800b6d4:	f000 80b2 	beq.w	800b83c <_dtoa_r+0x87c>
 800b6d8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6dc:	9e07      	ldr	r6, [sp, #28]
 800b6de:	9d04      	ldr	r5, [sp, #16]
 800b6e0:	9a04      	ldr	r2, [sp, #16]
 800b6e2:	441a      	add	r2, r3
 800b6e4:	9204      	str	r2, [sp, #16]
 800b6e6:	9a05      	ldr	r2, [sp, #20]
 800b6e8:	2101      	movs	r1, #1
 800b6ea:	441a      	add	r2, r3
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	9205      	str	r2, [sp, #20]
 800b6f0:	f000 fd86 	bl	800c200 <__i2b>
 800b6f4:	4607      	mov	r7, r0
 800b6f6:	2d00      	cmp	r5, #0
 800b6f8:	dd0c      	ble.n	800b714 <_dtoa_r+0x754>
 800b6fa:	9b05      	ldr	r3, [sp, #20]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	dd09      	ble.n	800b714 <_dtoa_r+0x754>
 800b700:	42ab      	cmp	r3, r5
 800b702:	9a04      	ldr	r2, [sp, #16]
 800b704:	bfa8      	it	ge
 800b706:	462b      	movge	r3, r5
 800b708:	1ad2      	subs	r2, r2, r3
 800b70a:	9204      	str	r2, [sp, #16]
 800b70c:	9a05      	ldr	r2, [sp, #20]
 800b70e:	1aed      	subs	r5, r5, r3
 800b710:	1ad3      	subs	r3, r2, r3
 800b712:	9305      	str	r3, [sp, #20]
 800b714:	9b07      	ldr	r3, [sp, #28]
 800b716:	b31b      	cbz	r3, 800b760 <_dtoa_r+0x7a0>
 800b718:	9b08      	ldr	r3, [sp, #32]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 80af 	beq.w	800b87e <_dtoa_r+0x8be>
 800b720:	2e00      	cmp	r6, #0
 800b722:	dd13      	ble.n	800b74c <_dtoa_r+0x78c>
 800b724:	4639      	mov	r1, r7
 800b726:	4632      	mov	r2, r6
 800b728:	4620      	mov	r0, r4
 800b72a:	f000 fe29 	bl	800c380 <__pow5mult>
 800b72e:	ee18 2a10 	vmov	r2, s16
 800b732:	4601      	mov	r1, r0
 800b734:	4607      	mov	r7, r0
 800b736:	4620      	mov	r0, r4
 800b738:	f000 fd78 	bl	800c22c <__multiply>
 800b73c:	ee18 1a10 	vmov	r1, s16
 800b740:	4680      	mov	r8, r0
 800b742:	4620      	mov	r0, r4
 800b744:	f000 fca4 	bl	800c090 <_Bfree>
 800b748:	ee08 8a10 	vmov	s16, r8
 800b74c:	9b07      	ldr	r3, [sp, #28]
 800b74e:	1b9a      	subs	r2, r3, r6
 800b750:	d006      	beq.n	800b760 <_dtoa_r+0x7a0>
 800b752:	ee18 1a10 	vmov	r1, s16
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fe12 	bl	800c380 <__pow5mult>
 800b75c:	ee08 0a10 	vmov	s16, r0
 800b760:	2101      	movs	r1, #1
 800b762:	4620      	mov	r0, r4
 800b764:	f000 fd4c 	bl	800c200 <__i2b>
 800b768:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	4606      	mov	r6, r0
 800b76e:	f340 8088 	ble.w	800b882 <_dtoa_r+0x8c2>
 800b772:	461a      	mov	r2, r3
 800b774:	4601      	mov	r1, r0
 800b776:	4620      	mov	r0, r4
 800b778:	f000 fe02 	bl	800c380 <__pow5mult>
 800b77c:	9b06      	ldr	r3, [sp, #24]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	4606      	mov	r6, r0
 800b782:	f340 8081 	ble.w	800b888 <_dtoa_r+0x8c8>
 800b786:	f04f 0800 	mov.w	r8, #0
 800b78a:	6933      	ldr	r3, [r6, #16]
 800b78c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b790:	6918      	ldr	r0, [r3, #16]
 800b792:	f000 fce5 	bl	800c160 <__hi0bits>
 800b796:	f1c0 0020 	rsb	r0, r0, #32
 800b79a:	9b05      	ldr	r3, [sp, #20]
 800b79c:	4418      	add	r0, r3
 800b79e:	f010 001f 	ands.w	r0, r0, #31
 800b7a2:	f000 8092 	beq.w	800b8ca <_dtoa_r+0x90a>
 800b7a6:	f1c0 0320 	rsb	r3, r0, #32
 800b7aa:	2b04      	cmp	r3, #4
 800b7ac:	f340 808a 	ble.w	800b8c4 <_dtoa_r+0x904>
 800b7b0:	f1c0 001c 	rsb	r0, r0, #28
 800b7b4:	9b04      	ldr	r3, [sp, #16]
 800b7b6:	4403      	add	r3, r0
 800b7b8:	9304      	str	r3, [sp, #16]
 800b7ba:	9b05      	ldr	r3, [sp, #20]
 800b7bc:	4403      	add	r3, r0
 800b7be:	4405      	add	r5, r0
 800b7c0:	9305      	str	r3, [sp, #20]
 800b7c2:	9b04      	ldr	r3, [sp, #16]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	dd07      	ble.n	800b7d8 <_dtoa_r+0x818>
 800b7c8:	ee18 1a10 	vmov	r1, s16
 800b7cc:	461a      	mov	r2, r3
 800b7ce:	4620      	mov	r0, r4
 800b7d0:	f000 fe30 	bl	800c434 <__lshift>
 800b7d4:	ee08 0a10 	vmov	s16, r0
 800b7d8:	9b05      	ldr	r3, [sp, #20]
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	dd05      	ble.n	800b7ea <_dtoa_r+0x82a>
 800b7de:	4631      	mov	r1, r6
 800b7e0:	461a      	mov	r2, r3
 800b7e2:	4620      	mov	r0, r4
 800b7e4:	f000 fe26 	bl	800c434 <__lshift>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d06e      	beq.n	800b8ce <_dtoa_r+0x90e>
 800b7f0:	ee18 0a10 	vmov	r0, s16
 800b7f4:	4631      	mov	r1, r6
 800b7f6:	f000 fe8d 	bl	800c514 <__mcmp>
 800b7fa:	2800      	cmp	r0, #0
 800b7fc:	da67      	bge.n	800b8ce <_dtoa_r+0x90e>
 800b7fe:	9b00      	ldr	r3, [sp, #0]
 800b800:	3b01      	subs	r3, #1
 800b802:	ee18 1a10 	vmov	r1, s16
 800b806:	9300      	str	r3, [sp, #0]
 800b808:	220a      	movs	r2, #10
 800b80a:	2300      	movs	r3, #0
 800b80c:	4620      	mov	r0, r4
 800b80e:	f000 fc61 	bl	800c0d4 <__multadd>
 800b812:	9b08      	ldr	r3, [sp, #32]
 800b814:	ee08 0a10 	vmov	s16, r0
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f000 81b1 	beq.w	800bb80 <_dtoa_r+0xbc0>
 800b81e:	2300      	movs	r3, #0
 800b820:	4639      	mov	r1, r7
 800b822:	220a      	movs	r2, #10
 800b824:	4620      	mov	r0, r4
 800b826:	f000 fc55 	bl	800c0d4 <__multadd>
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	4607      	mov	r7, r0
 800b830:	f300 808e 	bgt.w	800b950 <_dtoa_r+0x990>
 800b834:	9b06      	ldr	r3, [sp, #24]
 800b836:	2b02      	cmp	r3, #2
 800b838:	dc51      	bgt.n	800b8de <_dtoa_r+0x91e>
 800b83a:	e089      	b.n	800b950 <_dtoa_r+0x990>
 800b83c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b83e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b842:	e74b      	b.n	800b6dc <_dtoa_r+0x71c>
 800b844:	9b03      	ldr	r3, [sp, #12]
 800b846:	1e5e      	subs	r6, r3, #1
 800b848:	9b07      	ldr	r3, [sp, #28]
 800b84a:	42b3      	cmp	r3, r6
 800b84c:	bfbf      	itttt	lt
 800b84e:	9b07      	ldrlt	r3, [sp, #28]
 800b850:	9607      	strlt	r6, [sp, #28]
 800b852:	1af2      	sublt	r2, r6, r3
 800b854:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b856:	bfb6      	itet	lt
 800b858:	189b      	addlt	r3, r3, r2
 800b85a:	1b9e      	subge	r6, r3, r6
 800b85c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b85e:	9b03      	ldr	r3, [sp, #12]
 800b860:	bfb8      	it	lt
 800b862:	2600      	movlt	r6, #0
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfb7      	itett	lt
 800b868:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b86c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b870:	1a9d      	sublt	r5, r3, r2
 800b872:	2300      	movlt	r3, #0
 800b874:	e734      	b.n	800b6e0 <_dtoa_r+0x720>
 800b876:	9e07      	ldr	r6, [sp, #28]
 800b878:	9d04      	ldr	r5, [sp, #16]
 800b87a:	9f08      	ldr	r7, [sp, #32]
 800b87c:	e73b      	b.n	800b6f6 <_dtoa_r+0x736>
 800b87e:	9a07      	ldr	r2, [sp, #28]
 800b880:	e767      	b.n	800b752 <_dtoa_r+0x792>
 800b882:	9b06      	ldr	r3, [sp, #24]
 800b884:	2b01      	cmp	r3, #1
 800b886:	dc18      	bgt.n	800b8ba <_dtoa_r+0x8fa>
 800b888:	f1ba 0f00 	cmp.w	sl, #0
 800b88c:	d115      	bne.n	800b8ba <_dtoa_r+0x8fa>
 800b88e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b892:	b993      	cbnz	r3, 800b8ba <_dtoa_r+0x8fa>
 800b894:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b898:	0d1b      	lsrs	r3, r3, #20
 800b89a:	051b      	lsls	r3, r3, #20
 800b89c:	b183      	cbz	r3, 800b8c0 <_dtoa_r+0x900>
 800b89e:	9b04      	ldr	r3, [sp, #16]
 800b8a0:	3301      	adds	r3, #1
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9b05      	ldr	r3, [sp, #20]
 800b8a6:	3301      	adds	r3, #1
 800b8a8:	9305      	str	r3, [sp, #20]
 800b8aa:	f04f 0801 	mov.w	r8, #1
 800b8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f47f af6a 	bne.w	800b78a <_dtoa_r+0x7ca>
 800b8b6:	2001      	movs	r0, #1
 800b8b8:	e76f      	b.n	800b79a <_dtoa_r+0x7da>
 800b8ba:	f04f 0800 	mov.w	r8, #0
 800b8be:	e7f6      	b.n	800b8ae <_dtoa_r+0x8ee>
 800b8c0:	4698      	mov	r8, r3
 800b8c2:	e7f4      	b.n	800b8ae <_dtoa_r+0x8ee>
 800b8c4:	f43f af7d 	beq.w	800b7c2 <_dtoa_r+0x802>
 800b8c8:	4618      	mov	r0, r3
 800b8ca:	301c      	adds	r0, #28
 800b8cc:	e772      	b.n	800b7b4 <_dtoa_r+0x7f4>
 800b8ce:	9b03      	ldr	r3, [sp, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	dc37      	bgt.n	800b944 <_dtoa_r+0x984>
 800b8d4:	9b06      	ldr	r3, [sp, #24]
 800b8d6:	2b02      	cmp	r3, #2
 800b8d8:	dd34      	ble.n	800b944 <_dtoa_r+0x984>
 800b8da:	9b03      	ldr	r3, [sp, #12]
 800b8dc:	9302      	str	r3, [sp, #8]
 800b8de:	9b02      	ldr	r3, [sp, #8]
 800b8e0:	b96b      	cbnz	r3, 800b8fe <_dtoa_r+0x93e>
 800b8e2:	4631      	mov	r1, r6
 800b8e4:	2205      	movs	r2, #5
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 fbf4 	bl	800c0d4 <__multadd>
 800b8ec:	4601      	mov	r1, r0
 800b8ee:	4606      	mov	r6, r0
 800b8f0:	ee18 0a10 	vmov	r0, s16
 800b8f4:	f000 fe0e 	bl	800c514 <__mcmp>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	f73f adbb 	bgt.w	800b474 <_dtoa_r+0x4b4>
 800b8fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b900:	9d01      	ldr	r5, [sp, #4]
 800b902:	43db      	mvns	r3, r3
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	f04f 0800 	mov.w	r8, #0
 800b90a:	4631      	mov	r1, r6
 800b90c:	4620      	mov	r0, r4
 800b90e:	f000 fbbf 	bl	800c090 <_Bfree>
 800b912:	2f00      	cmp	r7, #0
 800b914:	f43f aea4 	beq.w	800b660 <_dtoa_r+0x6a0>
 800b918:	f1b8 0f00 	cmp.w	r8, #0
 800b91c:	d005      	beq.n	800b92a <_dtoa_r+0x96a>
 800b91e:	45b8      	cmp	r8, r7
 800b920:	d003      	beq.n	800b92a <_dtoa_r+0x96a>
 800b922:	4641      	mov	r1, r8
 800b924:	4620      	mov	r0, r4
 800b926:	f000 fbb3 	bl	800c090 <_Bfree>
 800b92a:	4639      	mov	r1, r7
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fbaf 	bl	800c090 <_Bfree>
 800b932:	e695      	b.n	800b660 <_dtoa_r+0x6a0>
 800b934:	2600      	movs	r6, #0
 800b936:	4637      	mov	r7, r6
 800b938:	e7e1      	b.n	800b8fe <_dtoa_r+0x93e>
 800b93a:	9700      	str	r7, [sp, #0]
 800b93c:	4637      	mov	r7, r6
 800b93e:	e599      	b.n	800b474 <_dtoa_r+0x4b4>
 800b940:	40240000 	.word	0x40240000
 800b944:	9b08      	ldr	r3, [sp, #32]
 800b946:	2b00      	cmp	r3, #0
 800b948:	f000 80ca 	beq.w	800bae0 <_dtoa_r+0xb20>
 800b94c:	9b03      	ldr	r3, [sp, #12]
 800b94e:	9302      	str	r3, [sp, #8]
 800b950:	2d00      	cmp	r5, #0
 800b952:	dd05      	ble.n	800b960 <_dtoa_r+0x9a0>
 800b954:	4639      	mov	r1, r7
 800b956:	462a      	mov	r2, r5
 800b958:	4620      	mov	r0, r4
 800b95a:	f000 fd6b 	bl	800c434 <__lshift>
 800b95e:	4607      	mov	r7, r0
 800b960:	f1b8 0f00 	cmp.w	r8, #0
 800b964:	d05b      	beq.n	800ba1e <_dtoa_r+0xa5e>
 800b966:	6879      	ldr	r1, [r7, #4]
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fb51 	bl	800c010 <_Balloc>
 800b96e:	4605      	mov	r5, r0
 800b970:	b928      	cbnz	r0, 800b97e <_dtoa_r+0x9be>
 800b972:	4b87      	ldr	r3, [pc, #540]	; (800bb90 <_dtoa_r+0xbd0>)
 800b974:	4602      	mov	r2, r0
 800b976:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b97a:	f7ff bb3b 	b.w	800aff4 <_dtoa_r+0x34>
 800b97e:	693a      	ldr	r2, [r7, #16]
 800b980:	3202      	adds	r2, #2
 800b982:	0092      	lsls	r2, r2, #2
 800b984:	f107 010c 	add.w	r1, r7, #12
 800b988:	300c      	adds	r0, #12
 800b98a:	f000 fb33 	bl	800bff4 <memcpy>
 800b98e:	2201      	movs	r2, #1
 800b990:	4629      	mov	r1, r5
 800b992:	4620      	mov	r0, r4
 800b994:	f000 fd4e 	bl	800c434 <__lshift>
 800b998:	9b01      	ldr	r3, [sp, #4]
 800b99a:	f103 0901 	add.w	r9, r3, #1
 800b99e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	f00a 0301 	and.w	r3, sl, #1
 800b9aa:	46b8      	mov	r8, r7
 800b9ac:	9304      	str	r3, [sp, #16]
 800b9ae:	4607      	mov	r7, r0
 800b9b0:	4631      	mov	r1, r6
 800b9b2:	ee18 0a10 	vmov	r0, s16
 800b9b6:	f7ff fa75 	bl	800aea4 <quorem>
 800b9ba:	4641      	mov	r1, r8
 800b9bc:	9002      	str	r0, [sp, #8]
 800b9be:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9c2:	ee18 0a10 	vmov	r0, s16
 800b9c6:	f000 fda5 	bl	800c514 <__mcmp>
 800b9ca:	463a      	mov	r2, r7
 800b9cc:	9003      	str	r0, [sp, #12]
 800b9ce:	4631      	mov	r1, r6
 800b9d0:	4620      	mov	r0, r4
 800b9d2:	f000 fdbb 	bl	800c54c <__mdiff>
 800b9d6:	68c2      	ldr	r2, [r0, #12]
 800b9d8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9dc:	4605      	mov	r5, r0
 800b9de:	bb02      	cbnz	r2, 800ba22 <_dtoa_r+0xa62>
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	ee18 0a10 	vmov	r0, s16
 800b9e6:	f000 fd95 	bl	800c514 <__mcmp>
 800b9ea:	4602      	mov	r2, r0
 800b9ec:	4629      	mov	r1, r5
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	9207      	str	r2, [sp, #28]
 800b9f2:	f000 fb4d 	bl	800c090 <_Bfree>
 800b9f6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b9fa:	ea43 0102 	orr.w	r1, r3, r2
 800b9fe:	9b04      	ldr	r3, [sp, #16]
 800ba00:	430b      	orrs	r3, r1
 800ba02:	464d      	mov	r5, r9
 800ba04:	d10f      	bne.n	800ba26 <_dtoa_r+0xa66>
 800ba06:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba0a:	d02a      	beq.n	800ba62 <_dtoa_r+0xaa2>
 800ba0c:	9b03      	ldr	r3, [sp, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	dd02      	ble.n	800ba18 <_dtoa_r+0xa58>
 800ba12:	9b02      	ldr	r3, [sp, #8]
 800ba14:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba18:	f88b a000 	strb.w	sl, [fp]
 800ba1c:	e775      	b.n	800b90a <_dtoa_r+0x94a>
 800ba1e:	4638      	mov	r0, r7
 800ba20:	e7ba      	b.n	800b998 <_dtoa_r+0x9d8>
 800ba22:	2201      	movs	r2, #1
 800ba24:	e7e2      	b.n	800b9ec <_dtoa_r+0xa2c>
 800ba26:	9b03      	ldr	r3, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	db04      	blt.n	800ba36 <_dtoa_r+0xa76>
 800ba2c:	9906      	ldr	r1, [sp, #24]
 800ba2e:	430b      	orrs	r3, r1
 800ba30:	9904      	ldr	r1, [sp, #16]
 800ba32:	430b      	orrs	r3, r1
 800ba34:	d122      	bne.n	800ba7c <_dtoa_r+0xabc>
 800ba36:	2a00      	cmp	r2, #0
 800ba38:	ddee      	ble.n	800ba18 <_dtoa_r+0xa58>
 800ba3a:	ee18 1a10 	vmov	r1, s16
 800ba3e:	2201      	movs	r2, #1
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fcf7 	bl	800c434 <__lshift>
 800ba46:	4631      	mov	r1, r6
 800ba48:	ee08 0a10 	vmov	s16, r0
 800ba4c:	f000 fd62 	bl	800c514 <__mcmp>
 800ba50:	2800      	cmp	r0, #0
 800ba52:	dc03      	bgt.n	800ba5c <_dtoa_r+0xa9c>
 800ba54:	d1e0      	bne.n	800ba18 <_dtoa_r+0xa58>
 800ba56:	f01a 0f01 	tst.w	sl, #1
 800ba5a:	d0dd      	beq.n	800ba18 <_dtoa_r+0xa58>
 800ba5c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba60:	d1d7      	bne.n	800ba12 <_dtoa_r+0xa52>
 800ba62:	2339      	movs	r3, #57	; 0x39
 800ba64:	f88b 3000 	strb.w	r3, [fp]
 800ba68:	462b      	mov	r3, r5
 800ba6a:	461d      	mov	r5, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba72:	2a39      	cmp	r2, #57	; 0x39
 800ba74:	d071      	beq.n	800bb5a <_dtoa_r+0xb9a>
 800ba76:	3201      	adds	r2, #1
 800ba78:	701a      	strb	r2, [r3, #0]
 800ba7a:	e746      	b.n	800b90a <_dtoa_r+0x94a>
 800ba7c:	2a00      	cmp	r2, #0
 800ba7e:	dd07      	ble.n	800ba90 <_dtoa_r+0xad0>
 800ba80:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba84:	d0ed      	beq.n	800ba62 <_dtoa_r+0xaa2>
 800ba86:	f10a 0301 	add.w	r3, sl, #1
 800ba8a:	f88b 3000 	strb.w	r3, [fp]
 800ba8e:	e73c      	b.n	800b90a <_dtoa_r+0x94a>
 800ba90:	9b05      	ldr	r3, [sp, #20]
 800ba92:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba96:	4599      	cmp	r9, r3
 800ba98:	d047      	beq.n	800bb2a <_dtoa_r+0xb6a>
 800ba9a:	ee18 1a10 	vmov	r1, s16
 800ba9e:	2300      	movs	r3, #0
 800baa0:	220a      	movs	r2, #10
 800baa2:	4620      	mov	r0, r4
 800baa4:	f000 fb16 	bl	800c0d4 <__multadd>
 800baa8:	45b8      	cmp	r8, r7
 800baaa:	ee08 0a10 	vmov	s16, r0
 800baae:	f04f 0300 	mov.w	r3, #0
 800bab2:	f04f 020a 	mov.w	r2, #10
 800bab6:	4641      	mov	r1, r8
 800bab8:	4620      	mov	r0, r4
 800baba:	d106      	bne.n	800baca <_dtoa_r+0xb0a>
 800babc:	f000 fb0a 	bl	800c0d4 <__multadd>
 800bac0:	4680      	mov	r8, r0
 800bac2:	4607      	mov	r7, r0
 800bac4:	f109 0901 	add.w	r9, r9, #1
 800bac8:	e772      	b.n	800b9b0 <_dtoa_r+0x9f0>
 800baca:	f000 fb03 	bl	800c0d4 <__multadd>
 800bace:	4639      	mov	r1, r7
 800bad0:	4680      	mov	r8, r0
 800bad2:	2300      	movs	r3, #0
 800bad4:	220a      	movs	r2, #10
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 fafc 	bl	800c0d4 <__multadd>
 800badc:	4607      	mov	r7, r0
 800bade:	e7f1      	b.n	800bac4 <_dtoa_r+0xb04>
 800bae0:	9b03      	ldr	r3, [sp, #12]
 800bae2:	9302      	str	r3, [sp, #8]
 800bae4:	9d01      	ldr	r5, [sp, #4]
 800bae6:	ee18 0a10 	vmov	r0, s16
 800baea:	4631      	mov	r1, r6
 800baec:	f7ff f9da 	bl	800aea4 <quorem>
 800baf0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800baf4:	9b01      	ldr	r3, [sp, #4]
 800baf6:	f805 ab01 	strb.w	sl, [r5], #1
 800bafa:	1aea      	subs	r2, r5, r3
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	4293      	cmp	r3, r2
 800bb00:	dd09      	ble.n	800bb16 <_dtoa_r+0xb56>
 800bb02:	ee18 1a10 	vmov	r1, s16
 800bb06:	2300      	movs	r3, #0
 800bb08:	220a      	movs	r2, #10
 800bb0a:	4620      	mov	r0, r4
 800bb0c:	f000 fae2 	bl	800c0d4 <__multadd>
 800bb10:	ee08 0a10 	vmov	s16, r0
 800bb14:	e7e7      	b.n	800bae6 <_dtoa_r+0xb26>
 800bb16:	9b02      	ldr	r3, [sp, #8]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	bfc8      	it	gt
 800bb1c:	461d      	movgt	r5, r3
 800bb1e:	9b01      	ldr	r3, [sp, #4]
 800bb20:	bfd8      	it	le
 800bb22:	2501      	movle	r5, #1
 800bb24:	441d      	add	r5, r3
 800bb26:	f04f 0800 	mov.w	r8, #0
 800bb2a:	ee18 1a10 	vmov	r1, s16
 800bb2e:	2201      	movs	r2, #1
 800bb30:	4620      	mov	r0, r4
 800bb32:	f000 fc7f 	bl	800c434 <__lshift>
 800bb36:	4631      	mov	r1, r6
 800bb38:	ee08 0a10 	vmov	s16, r0
 800bb3c:	f000 fcea 	bl	800c514 <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	dc91      	bgt.n	800ba68 <_dtoa_r+0xaa8>
 800bb44:	d102      	bne.n	800bb4c <_dtoa_r+0xb8c>
 800bb46:	f01a 0f01 	tst.w	sl, #1
 800bb4a:	d18d      	bne.n	800ba68 <_dtoa_r+0xaa8>
 800bb4c:	462b      	mov	r3, r5
 800bb4e:	461d      	mov	r5, r3
 800bb50:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb54:	2a30      	cmp	r2, #48	; 0x30
 800bb56:	d0fa      	beq.n	800bb4e <_dtoa_r+0xb8e>
 800bb58:	e6d7      	b.n	800b90a <_dtoa_r+0x94a>
 800bb5a:	9a01      	ldr	r2, [sp, #4]
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d184      	bne.n	800ba6a <_dtoa_r+0xaaa>
 800bb60:	9b00      	ldr	r3, [sp, #0]
 800bb62:	3301      	adds	r3, #1
 800bb64:	9300      	str	r3, [sp, #0]
 800bb66:	2331      	movs	r3, #49	; 0x31
 800bb68:	7013      	strb	r3, [r2, #0]
 800bb6a:	e6ce      	b.n	800b90a <_dtoa_r+0x94a>
 800bb6c:	4b09      	ldr	r3, [pc, #36]	; (800bb94 <_dtoa_r+0xbd4>)
 800bb6e:	f7ff ba95 	b.w	800b09c <_dtoa_r+0xdc>
 800bb72:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	f47f aa6e 	bne.w	800b056 <_dtoa_r+0x96>
 800bb7a:	4b07      	ldr	r3, [pc, #28]	; (800bb98 <_dtoa_r+0xbd8>)
 800bb7c:	f7ff ba8e 	b.w	800b09c <_dtoa_r+0xdc>
 800bb80:	9b02      	ldr	r3, [sp, #8]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	dcae      	bgt.n	800bae4 <_dtoa_r+0xb24>
 800bb86:	9b06      	ldr	r3, [sp, #24]
 800bb88:	2b02      	cmp	r3, #2
 800bb8a:	f73f aea8 	bgt.w	800b8de <_dtoa_r+0x91e>
 800bb8e:	e7a9      	b.n	800bae4 <_dtoa_r+0xb24>
 800bb90:	0800d093 	.word	0x0800d093
 800bb94:	0800cff0 	.word	0x0800cff0
 800bb98:	0800d014 	.word	0x0800d014

0800bb9c <__sflush_r>:
 800bb9c:	898a      	ldrh	r2, [r1, #12]
 800bb9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bba2:	4605      	mov	r5, r0
 800bba4:	0710      	lsls	r0, r2, #28
 800bba6:	460c      	mov	r4, r1
 800bba8:	d458      	bmi.n	800bc5c <__sflush_r+0xc0>
 800bbaa:	684b      	ldr	r3, [r1, #4]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	dc05      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	dc02      	bgt.n	800bbbc <__sflush_r+0x20>
 800bbb6:	2000      	movs	r0, #0
 800bbb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbbe:	2e00      	cmp	r6, #0
 800bbc0:	d0f9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bbc8:	682f      	ldr	r7, [r5, #0]
 800bbca:	602b      	str	r3, [r5, #0]
 800bbcc:	d032      	beq.n	800bc34 <__sflush_r+0x98>
 800bbce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bbd0:	89a3      	ldrh	r3, [r4, #12]
 800bbd2:	075a      	lsls	r2, r3, #29
 800bbd4:	d505      	bpl.n	800bbe2 <__sflush_r+0x46>
 800bbd6:	6863      	ldr	r3, [r4, #4]
 800bbd8:	1ac0      	subs	r0, r0, r3
 800bbda:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbdc:	b10b      	cbz	r3, 800bbe2 <__sflush_r+0x46>
 800bbde:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bbe0:	1ac0      	subs	r0, r0, r3
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	4602      	mov	r2, r0
 800bbe6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bbe8:	6a21      	ldr	r1, [r4, #32]
 800bbea:	4628      	mov	r0, r5
 800bbec:	47b0      	blx	r6
 800bbee:	1c43      	adds	r3, r0, #1
 800bbf0:	89a3      	ldrh	r3, [r4, #12]
 800bbf2:	d106      	bne.n	800bc02 <__sflush_r+0x66>
 800bbf4:	6829      	ldr	r1, [r5, #0]
 800bbf6:	291d      	cmp	r1, #29
 800bbf8:	d82c      	bhi.n	800bc54 <__sflush_r+0xb8>
 800bbfa:	4a2a      	ldr	r2, [pc, #168]	; (800bca4 <__sflush_r+0x108>)
 800bbfc:	40ca      	lsrs	r2, r1
 800bbfe:	07d6      	lsls	r6, r2, #31
 800bc00:	d528      	bpl.n	800bc54 <__sflush_r+0xb8>
 800bc02:	2200      	movs	r2, #0
 800bc04:	6062      	str	r2, [r4, #4]
 800bc06:	04d9      	lsls	r1, r3, #19
 800bc08:	6922      	ldr	r2, [r4, #16]
 800bc0a:	6022      	str	r2, [r4, #0]
 800bc0c:	d504      	bpl.n	800bc18 <__sflush_r+0x7c>
 800bc0e:	1c42      	adds	r2, r0, #1
 800bc10:	d101      	bne.n	800bc16 <__sflush_r+0x7a>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	b903      	cbnz	r3, 800bc18 <__sflush_r+0x7c>
 800bc16:	6560      	str	r0, [r4, #84]	; 0x54
 800bc18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc1a:	602f      	str	r7, [r5, #0]
 800bc1c:	2900      	cmp	r1, #0
 800bc1e:	d0ca      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc24:	4299      	cmp	r1, r3
 800bc26:	d002      	beq.n	800bc2e <__sflush_r+0x92>
 800bc28:	4628      	mov	r0, r5
 800bc2a:	f000 fd8b 	bl	800c744 <_free_r>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	6360      	str	r0, [r4, #52]	; 0x34
 800bc32:	e7c1      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc34:	6a21      	ldr	r1, [r4, #32]
 800bc36:	2301      	movs	r3, #1
 800bc38:	4628      	mov	r0, r5
 800bc3a:	47b0      	blx	r6
 800bc3c:	1c41      	adds	r1, r0, #1
 800bc3e:	d1c7      	bne.n	800bbd0 <__sflush_r+0x34>
 800bc40:	682b      	ldr	r3, [r5, #0]
 800bc42:	2b00      	cmp	r3, #0
 800bc44:	d0c4      	beq.n	800bbd0 <__sflush_r+0x34>
 800bc46:	2b1d      	cmp	r3, #29
 800bc48:	d001      	beq.n	800bc4e <__sflush_r+0xb2>
 800bc4a:	2b16      	cmp	r3, #22
 800bc4c:	d101      	bne.n	800bc52 <__sflush_r+0xb6>
 800bc4e:	602f      	str	r7, [r5, #0]
 800bc50:	e7b1      	b.n	800bbb6 <__sflush_r+0x1a>
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc58:	81a3      	strh	r3, [r4, #12]
 800bc5a:	e7ad      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc5c:	690f      	ldr	r7, [r1, #16]
 800bc5e:	2f00      	cmp	r7, #0
 800bc60:	d0a9      	beq.n	800bbb6 <__sflush_r+0x1a>
 800bc62:	0793      	lsls	r3, r2, #30
 800bc64:	680e      	ldr	r6, [r1, #0]
 800bc66:	bf08      	it	eq
 800bc68:	694b      	ldreq	r3, [r1, #20]
 800bc6a:	600f      	str	r7, [r1, #0]
 800bc6c:	bf18      	it	ne
 800bc6e:	2300      	movne	r3, #0
 800bc70:	eba6 0807 	sub.w	r8, r6, r7
 800bc74:	608b      	str	r3, [r1, #8]
 800bc76:	f1b8 0f00 	cmp.w	r8, #0
 800bc7a:	dd9c      	ble.n	800bbb6 <__sflush_r+0x1a>
 800bc7c:	6a21      	ldr	r1, [r4, #32]
 800bc7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bc80:	4643      	mov	r3, r8
 800bc82:	463a      	mov	r2, r7
 800bc84:	4628      	mov	r0, r5
 800bc86:	47b0      	blx	r6
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	dc06      	bgt.n	800bc9a <__sflush_r+0xfe>
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc92:	81a3      	strh	r3, [r4, #12]
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e78e      	b.n	800bbb8 <__sflush_r+0x1c>
 800bc9a:	4407      	add	r7, r0
 800bc9c:	eba8 0800 	sub.w	r8, r8, r0
 800bca0:	e7e9      	b.n	800bc76 <__sflush_r+0xda>
 800bca2:	bf00      	nop
 800bca4:	20400001 	.word	0x20400001

0800bca8 <_fflush_r>:
 800bca8:	b538      	push	{r3, r4, r5, lr}
 800bcaa:	690b      	ldr	r3, [r1, #16]
 800bcac:	4605      	mov	r5, r0
 800bcae:	460c      	mov	r4, r1
 800bcb0:	b913      	cbnz	r3, 800bcb8 <_fflush_r+0x10>
 800bcb2:	2500      	movs	r5, #0
 800bcb4:	4628      	mov	r0, r5
 800bcb6:	bd38      	pop	{r3, r4, r5, pc}
 800bcb8:	b118      	cbz	r0, 800bcc2 <_fflush_r+0x1a>
 800bcba:	6983      	ldr	r3, [r0, #24]
 800bcbc:	b90b      	cbnz	r3, 800bcc2 <_fflush_r+0x1a>
 800bcbe:	f000 f887 	bl	800bdd0 <__sinit>
 800bcc2:	4b14      	ldr	r3, [pc, #80]	; (800bd14 <_fflush_r+0x6c>)
 800bcc4:	429c      	cmp	r4, r3
 800bcc6:	d11b      	bne.n	800bd00 <_fflush_r+0x58>
 800bcc8:	686c      	ldr	r4, [r5, #4]
 800bcca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d0ef      	beq.n	800bcb2 <_fflush_r+0xa>
 800bcd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bcd4:	07d0      	lsls	r0, r2, #31
 800bcd6:	d404      	bmi.n	800bce2 <_fflush_r+0x3a>
 800bcd8:	0599      	lsls	r1, r3, #22
 800bcda:	d402      	bmi.n	800bce2 <_fflush_r+0x3a>
 800bcdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcde:	f000 f91a 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800bce2:	4628      	mov	r0, r5
 800bce4:	4621      	mov	r1, r4
 800bce6:	f7ff ff59 	bl	800bb9c <__sflush_r>
 800bcea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bcec:	07da      	lsls	r2, r3, #31
 800bcee:	4605      	mov	r5, r0
 800bcf0:	d4e0      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	059b      	lsls	r3, r3, #22
 800bcf6:	d4dd      	bmi.n	800bcb4 <_fflush_r+0xc>
 800bcf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bcfa:	f000 f90d 	bl	800bf18 <__retarget_lock_release_recursive>
 800bcfe:	e7d9      	b.n	800bcb4 <_fflush_r+0xc>
 800bd00:	4b05      	ldr	r3, [pc, #20]	; (800bd18 <_fflush_r+0x70>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <_fflush_r+0x62>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7df      	b.n	800bcca <_fflush_r+0x22>
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <_fflush_r+0x74>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7da      	b.n	800bcca <_fflush_r+0x22>
 800bd14:	0800d0c4 	.word	0x0800d0c4
 800bd18:	0800d0e4 	.word	0x0800d0e4
 800bd1c:	0800d0a4 	.word	0x0800d0a4

0800bd20 <std>:
 800bd20:	2300      	movs	r3, #0
 800bd22:	b510      	push	{r4, lr}
 800bd24:	4604      	mov	r4, r0
 800bd26:	e9c0 3300 	strd	r3, r3, [r0]
 800bd2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bd2e:	6083      	str	r3, [r0, #8]
 800bd30:	8181      	strh	r1, [r0, #12]
 800bd32:	6643      	str	r3, [r0, #100]	; 0x64
 800bd34:	81c2      	strh	r2, [r0, #14]
 800bd36:	6183      	str	r3, [r0, #24]
 800bd38:	4619      	mov	r1, r3
 800bd3a:	2208      	movs	r2, #8
 800bd3c:	305c      	adds	r0, #92	; 0x5c
 800bd3e:	f7fe faf1 	bl	800a324 <memset>
 800bd42:	4b05      	ldr	r3, [pc, #20]	; (800bd58 <std+0x38>)
 800bd44:	6263      	str	r3, [r4, #36]	; 0x24
 800bd46:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <std+0x3c>)
 800bd48:	62a3      	str	r3, [r4, #40]	; 0x28
 800bd4a:	4b05      	ldr	r3, [pc, #20]	; (800bd60 <std+0x40>)
 800bd4c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bd4e:	4b05      	ldr	r3, [pc, #20]	; (800bd64 <std+0x44>)
 800bd50:	6224      	str	r4, [r4, #32]
 800bd52:	6323      	str	r3, [r4, #48]	; 0x30
 800bd54:	bd10      	pop	{r4, pc}
 800bd56:	bf00      	nop
 800bd58:	0800cbd9 	.word	0x0800cbd9
 800bd5c:	0800cbfb 	.word	0x0800cbfb
 800bd60:	0800cc33 	.word	0x0800cc33
 800bd64:	0800cc57 	.word	0x0800cc57

0800bd68 <_cleanup_r>:
 800bd68:	4901      	ldr	r1, [pc, #4]	; (800bd70 <_cleanup_r+0x8>)
 800bd6a:	f000 b8af 	b.w	800becc <_fwalk_reent>
 800bd6e:	bf00      	nop
 800bd70:	0800bca9 	.word	0x0800bca9

0800bd74 <__sfmoreglue>:
 800bd74:	b570      	push	{r4, r5, r6, lr}
 800bd76:	2268      	movs	r2, #104	; 0x68
 800bd78:	1e4d      	subs	r5, r1, #1
 800bd7a:	4355      	muls	r5, r2
 800bd7c:	460e      	mov	r6, r1
 800bd7e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bd82:	f000 fd4b 	bl	800c81c <_malloc_r>
 800bd86:	4604      	mov	r4, r0
 800bd88:	b140      	cbz	r0, 800bd9c <__sfmoreglue+0x28>
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	e9c0 1600 	strd	r1, r6, [r0]
 800bd90:	300c      	adds	r0, #12
 800bd92:	60a0      	str	r0, [r4, #8]
 800bd94:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bd98:	f7fe fac4 	bl	800a324 <memset>
 800bd9c:	4620      	mov	r0, r4
 800bd9e:	bd70      	pop	{r4, r5, r6, pc}

0800bda0 <__sfp_lock_acquire>:
 800bda0:	4801      	ldr	r0, [pc, #4]	; (800bda8 <__sfp_lock_acquire+0x8>)
 800bda2:	f000 b8b8 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800bda6:	bf00      	nop
 800bda8:	2000075d 	.word	0x2000075d

0800bdac <__sfp_lock_release>:
 800bdac:	4801      	ldr	r0, [pc, #4]	; (800bdb4 <__sfp_lock_release+0x8>)
 800bdae:	f000 b8b3 	b.w	800bf18 <__retarget_lock_release_recursive>
 800bdb2:	bf00      	nop
 800bdb4:	2000075d 	.word	0x2000075d

0800bdb8 <__sinit_lock_acquire>:
 800bdb8:	4801      	ldr	r0, [pc, #4]	; (800bdc0 <__sinit_lock_acquire+0x8>)
 800bdba:	f000 b8ac 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800bdbe:	bf00      	nop
 800bdc0:	2000075e 	.word	0x2000075e

0800bdc4 <__sinit_lock_release>:
 800bdc4:	4801      	ldr	r0, [pc, #4]	; (800bdcc <__sinit_lock_release+0x8>)
 800bdc6:	f000 b8a7 	b.w	800bf18 <__retarget_lock_release_recursive>
 800bdca:	bf00      	nop
 800bdcc:	2000075e 	.word	0x2000075e

0800bdd0 <__sinit>:
 800bdd0:	b510      	push	{r4, lr}
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	f7ff fff0 	bl	800bdb8 <__sinit_lock_acquire>
 800bdd8:	69a3      	ldr	r3, [r4, #24]
 800bdda:	b11b      	cbz	r3, 800bde4 <__sinit+0x14>
 800bddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bde0:	f7ff bff0 	b.w	800bdc4 <__sinit_lock_release>
 800bde4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bde8:	6523      	str	r3, [r4, #80]	; 0x50
 800bdea:	4b13      	ldr	r3, [pc, #76]	; (800be38 <__sinit+0x68>)
 800bdec:	4a13      	ldr	r2, [pc, #76]	; (800be3c <__sinit+0x6c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bdf2:	42a3      	cmp	r3, r4
 800bdf4:	bf04      	itt	eq
 800bdf6:	2301      	moveq	r3, #1
 800bdf8:	61a3      	streq	r3, [r4, #24]
 800bdfa:	4620      	mov	r0, r4
 800bdfc:	f000 f820 	bl	800be40 <__sfp>
 800be00:	6060      	str	r0, [r4, #4]
 800be02:	4620      	mov	r0, r4
 800be04:	f000 f81c 	bl	800be40 <__sfp>
 800be08:	60a0      	str	r0, [r4, #8]
 800be0a:	4620      	mov	r0, r4
 800be0c:	f000 f818 	bl	800be40 <__sfp>
 800be10:	2200      	movs	r2, #0
 800be12:	60e0      	str	r0, [r4, #12]
 800be14:	2104      	movs	r1, #4
 800be16:	6860      	ldr	r0, [r4, #4]
 800be18:	f7ff ff82 	bl	800bd20 <std>
 800be1c:	68a0      	ldr	r0, [r4, #8]
 800be1e:	2201      	movs	r2, #1
 800be20:	2109      	movs	r1, #9
 800be22:	f7ff ff7d 	bl	800bd20 <std>
 800be26:	68e0      	ldr	r0, [r4, #12]
 800be28:	2202      	movs	r2, #2
 800be2a:	2112      	movs	r1, #18
 800be2c:	f7ff ff78 	bl	800bd20 <std>
 800be30:	2301      	movs	r3, #1
 800be32:	61a3      	str	r3, [r4, #24]
 800be34:	e7d2      	b.n	800bddc <__sinit+0xc>
 800be36:	bf00      	nop
 800be38:	0800cfdc 	.word	0x0800cfdc
 800be3c:	0800bd69 	.word	0x0800bd69

0800be40 <__sfp>:
 800be40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be42:	4607      	mov	r7, r0
 800be44:	f7ff ffac 	bl	800bda0 <__sfp_lock_acquire>
 800be48:	4b1e      	ldr	r3, [pc, #120]	; (800bec4 <__sfp+0x84>)
 800be4a:	681e      	ldr	r6, [r3, #0]
 800be4c:	69b3      	ldr	r3, [r6, #24]
 800be4e:	b913      	cbnz	r3, 800be56 <__sfp+0x16>
 800be50:	4630      	mov	r0, r6
 800be52:	f7ff ffbd 	bl	800bdd0 <__sinit>
 800be56:	3648      	adds	r6, #72	; 0x48
 800be58:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800be5c:	3b01      	subs	r3, #1
 800be5e:	d503      	bpl.n	800be68 <__sfp+0x28>
 800be60:	6833      	ldr	r3, [r6, #0]
 800be62:	b30b      	cbz	r3, 800bea8 <__sfp+0x68>
 800be64:	6836      	ldr	r6, [r6, #0]
 800be66:	e7f7      	b.n	800be58 <__sfp+0x18>
 800be68:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800be6c:	b9d5      	cbnz	r5, 800bea4 <__sfp+0x64>
 800be6e:	4b16      	ldr	r3, [pc, #88]	; (800bec8 <__sfp+0x88>)
 800be70:	60e3      	str	r3, [r4, #12]
 800be72:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800be76:	6665      	str	r5, [r4, #100]	; 0x64
 800be78:	f000 f84c 	bl	800bf14 <__retarget_lock_init_recursive>
 800be7c:	f7ff ff96 	bl	800bdac <__sfp_lock_release>
 800be80:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800be84:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800be88:	6025      	str	r5, [r4, #0]
 800be8a:	61a5      	str	r5, [r4, #24]
 800be8c:	2208      	movs	r2, #8
 800be8e:	4629      	mov	r1, r5
 800be90:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800be94:	f7fe fa46 	bl	800a324 <memset>
 800be98:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800be9c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bea0:	4620      	mov	r0, r4
 800bea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bea4:	3468      	adds	r4, #104	; 0x68
 800bea6:	e7d9      	b.n	800be5c <__sfp+0x1c>
 800bea8:	2104      	movs	r1, #4
 800beaa:	4638      	mov	r0, r7
 800beac:	f7ff ff62 	bl	800bd74 <__sfmoreglue>
 800beb0:	4604      	mov	r4, r0
 800beb2:	6030      	str	r0, [r6, #0]
 800beb4:	2800      	cmp	r0, #0
 800beb6:	d1d5      	bne.n	800be64 <__sfp+0x24>
 800beb8:	f7ff ff78 	bl	800bdac <__sfp_lock_release>
 800bebc:	230c      	movs	r3, #12
 800bebe:	603b      	str	r3, [r7, #0]
 800bec0:	e7ee      	b.n	800bea0 <__sfp+0x60>
 800bec2:	bf00      	nop
 800bec4:	0800cfdc 	.word	0x0800cfdc
 800bec8:	ffff0001 	.word	0xffff0001

0800becc <_fwalk_reent>:
 800becc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bed0:	4606      	mov	r6, r0
 800bed2:	4688      	mov	r8, r1
 800bed4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bed8:	2700      	movs	r7, #0
 800beda:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bede:	f1b9 0901 	subs.w	r9, r9, #1
 800bee2:	d505      	bpl.n	800bef0 <_fwalk_reent+0x24>
 800bee4:	6824      	ldr	r4, [r4, #0]
 800bee6:	2c00      	cmp	r4, #0
 800bee8:	d1f7      	bne.n	800beda <_fwalk_reent+0xe>
 800beea:	4638      	mov	r0, r7
 800beec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bef0:	89ab      	ldrh	r3, [r5, #12]
 800bef2:	2b01      	cmp	r3, #1
 800bef4:	d907      	bls.n	800bf06 <_fwalk_reent+0x3a>
 800bef6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800befa:	3301      	adds	r3, #1
 800befc:	d003      	beq.n	800bf06 <_fwalk_reent+0x3a>
 800befe:	4629      	mov	r1, r5
 800bf00:	4630      	mov	r0, r6
 800bf02:	47c0      	blx	r8
 800bf04:	4307      	orrs	r7, r0
 800bf06:	3568      	adds	r5, #104	; 0x68
 800bf08:	e7e9      	b.n	800bede <_fwalk_reent+0x12>
	...

0800bf0c <_localeconv_r>:
 800bf0c:	4800      	ldr	r0, [pc, #0]	; (800bf10 <_localeconv_r+0x4>)
 800bf0e:	4770      	bx	lr
 800bf10:	200001c8 	.word	0x200001c8

0800bf14 <__retarget_lock_init_recursive>:
 800bf14:	4770      	bx	lr

0800bf16 <__retarget_lock_acquire_recursive>:
 800bf16:	4770      	bx	lr

0800bf18 <__retarget_lock_release_recursive>:
 800bf18:	4770      	bx	lr

0800bf1a <__swhatbuf_r>:
 800bf1a:	b570      	push	{r4, r5, r6, lr}
 800bf1c:	460e      	mov	r6, r1
 800bf1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf22:	2900      	cmp	r1, #0
 800bf24:	b096      	sub	sp, #88	; 0x58
 800bf26:	4614      	mov	r4, r2
 800bf28:	461d      	mov	r5, r3
 800bf2a:	da08      	bge.n	800bf3e <__swhatbuf_r+0x24>
 800bf2c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bf30:	2200      	movs	r2, #0
 800bf32:	602a      	str	r2, [r5, #0]
 800bf34:	061a      	lsls	r2, r3, #24
 800bf36:	d410      	bmi.n	800bf5a <__swhatbuf_r+0x40>
 800bf38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bf3c:	e00e      	b.n	800bf5c <__swhatbuf_r+0x42>
 800bf3e:	466a      	mov	r2, sp
 800bf40:	f000 fee0 	bl	800cd04 <_fstat_r>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	dbf1      	blt.n	800bf2c <__swhatbuf_r+0x12>
 800bf48:	9a01      	ldr	r2, [sp, #4]
 800bf4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bf4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bf52:	425a      	negs	r2, r3
 800bf54:	415a      	adcs	r2, r3
 800bf56:	602a      	str	r2, [r5, #0]
 800bf58:	e7ee      	b.n	800bf38 <__swhatbuf_r+0x1e>
 800bf5a:	2340      	movs	r3, #64	; 0x40
 800bf5c:	2000      	movs	r0, #0
 800bf5e:	6023      	str	r3, [r4, #0]
 800bf60:	b016      	add	sp, #88	; 0x58
 800bf62:	bd70      	pop	{r4, r5, r6, pc}

0800bf64 <__smakebuf_r>:
 800bf64:	898b      	ldrh	r3, [r1, #12]
 800bf66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bf68:	079d      	lsls	r5, r3, #30
 800bf6a:	4606      	mov	r6, r0
 800bf6c:	460c      	mov	r4, r1
 800bf6e:	d507      	bpl.n	800bf80 <__smakebuf_r+0x1c>
 800bf70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bf74:	6023      	str	r3, [r4, #0]
 800bf76:	6123      	str	r3, [r4, #16]
 800bf78:	2301      	movs	r3, #1
 800bf7a:	6163      	str	r3, [r4, #20]
 800bf7c:	b002      	add	sp, #8
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}
 800bf80:	ab01      	add	r3, sp, #4
 800bf82:	466a      	mov	r2, sp
 800bf84:	f7ff ffc9 	bl	800bf1a <__swhatbuf_r>
 800bf88:	9900      	ldr	r1, [sp, #0]
 800bf8a:	4605      	mov	r5, r0
 800bf8c:	4630      	mov	r0, r6
 800bf8e:	f000 fc45 	bl	800c81c <_malloc_r>
 800bf92:	b948      	cbnz	r0, 800bfa8 <__smakebuf_r+0x44>
 800bf94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bf98:	059a      	lsls	r2, r3, #22
 800bf9a:	d4ef      	bmi.n	800bf7c <__smakebuf_r+0x18>
 800bf9c:	f023 0303 	bic.w	r3, r3, #3
 800bfa0:	f043 0302 	orr.w	r3, r3, #2
 800bfa4:	81a3      	strh	r3, [r4, #12]
 800bfa6:	e7e3      	b.n	800bf70 <__smakebuf_r+0xc>
 800bfa8:	4b0d      	ldr	r3, [pc, #52]	; (800bfe0 <__smakebuf_r+0x7c>)
 800bfaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800bfac:	89a3      	ldrh	r3, [r4, #12]
 800bfae:	6020      	str	r0, [r4, #0]
 800bfb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfb4:	81a3      	strh	r3, [r4, #12]
 800bfb6:	9b00      	ldr	r3, [sp, #0]
 800bfb8:	6163      	str	r3, [r4, #20]
 800bfba:	9b01      	ldr	r3, [sp, #4]
 800bfbc:	6120      	str	r0, [r4, #16]
 800bfbe:	b15b      	cbz	r3, 800bfd8 <__smakebuf_r+0x74>
 800bfc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bfc4:	4630      	mov	r0, r6
 800bfc6:	f000 feaf 	bl	800cd28 <_isatty_r>
 800bfca:	b128      	cbz	r0, 800bfd8 <__smakebuf_r+0x74>
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f023 0303 	bic.w	r3, r3, #3
 800bfd2:	f043 0301 	orr.w	r3, r3, #1
 800bfd6:	81a3      	strh	r3, [r4, #12]
 800bfd8:	89a0      	ldrh	r0, [r4, #12]
 800bfda:	4305      	orrs	r5, r0
 800bfdc:	81a5      	strh	r5, [r4, #12]
 800bfde:	e7cd      	b.n	800bf7c <__smakebuf_r+0x18>
 800bfe0:	0800bd69 	.word	0x0800bd69

0800bfe4 <malloc>:
 800bfe4:	4b02      	ldr	r3, [pc, #8]	; (800bff0 <malloc+0xc>)
 800bfe6:	4601      	mov	r1, r0
 800bfe8:	6818      	ldr	r0, [r3, #0]
 800bfea:	f000 bc17 	b.w	800c81c <_malloc_r>
 800bfee:	bf00      	nop
 800bff0:	20000074 	.word	0x20000074

0800bff4 <memcpy>:
 800bff4:	440a      	add	r2, r1
 800bff6:	4291      	cmp	r1, r2
 800bff8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bffc:	d100      	bne.n	800c000 <memcpy+0xc>
 800bffe:	4770      	bx	lr
 800c000:	b510      	push	{r4, lr}
 800c002:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c006:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c00a:	4291      	cmp	r1, r2
 800c00c:	d1f9      	bne.n	800c002 <memcpy+0xe>
 800c00e:	bd10      	pop	{r4, pc}

0800c010 <_Balloc>:
 800c010:	b570      	push	{r4, r5, r6, lr}
 800c012:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c014:	4604      	mov	r4, r0
 800c016:	460d      	mov	r5, r1
 800c018:	b976      	cbnz	r6, 800c038 <_Balloc+0x28>
 800c01a:	2010      	movs	r0, #16
 800c01c:	f7ff ffe2 	bl	800bfe4 <malloc>
 800c020:	4602      	mov	r2, r0
 800c022:	6260      	str	r0, [r4, #36]	; 0x24
 800c024:	b920      	cbnz	r0, 800c030 <_Balloc+0x20>
 800c026:	4b18      	ldr	r3, [pc, #96]	; (800c088 <_Balloc+0x78>)
 800c028:	4818      	ldr	r0, [pc, #96]	; (800c08c <_Balloc+0x7c>)
 800c02a:	2166      	movs	r1, #102	; 0x66
 800c02c:	f000 fe2a 	bl	800cc84 <__assert_func>
 800c030:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c034:	6006      	str	r6, [r0, #0]
 800c036:	60c6      	str	r6, [r0, #12]
 800c038:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c03a:	68f3      	ldr	r3, [r6, #12]
 800c03c:	b183      	cbz	r3, 800c060 <_Balloc+0x50>
 800c03e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c040:	68db      	ldr	r3, [r3, #12]
 800c042:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c046:	b9b8      	cbnz	r0, 800c078 <_Balloc+0x68>
 800c048:	2101      	movs	r1, #1
 800c04a:	fa01 f605 	lsl.w	r6, r1, r5
 800c04e:	1d72      	adds	r2, r6, #5
 800c050:	0092      	lsls	r2, r2, #2
 800c052:	4620      	mov	r0, r4
 800c054:	f000 fb60 	bl	800c718 <_calloc_r>
 800c058:	b160      	cbz	r0, 800c074 <_Balloc+0x64>
 800c05a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c05e:	e00e      	b.n	800c07e <_Balloc+0x6e>
 800c060:	2221      	movs	r2, #33	; 0x21
 800c062:	2104      	movs	r1, #4
 800c064:	4620      	mov	r0, r4
 800c066:	f000 fb57 	bl	800c718 <_calloc_r>
 800c06a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c06c:	60f0      	str	r0, [r6, #12]
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	2b00      	cmp	r3, #0
 800c072:	d1e4      	bne.n	800c03e <_Balloc+0x2e>
 800c074:	2000      	movs	r0, #0
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	6802      	ldr	r2, [r0, #0]
 800c07a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c07e:	2300      	movs	r3, #0
 800c080:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c084:	e7f7      	b.n	800c076 <_Balloc+0x66>
 800c086:	bf00      	nop
 800c088:	0800d021 	.word	0x0800d021
 800c08c:	0800d104 	.word	0x0800d104

0800c090 <_Bfree>:
 800c090:	b570      	push	{r4, r5, r6, lr}
 800c092:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c094:	4605      	mov	r5, r0
 800c096:	460c      	mov	r4, r1
 800c098:	b976      	cbnz	r6, 800c0b8 <_Bfree+0x28>
 800c09a:	2010      	movs	r0, #16
 800c09c:	f7ff ffa2 	bl	800bfe4 <malloc>
 800c0a0:	4602      	mov	r2, r0
 800c0a2:	6268      	str	r0, [r5, #36]	; 0x24
 800c0a4:	b920      	cbnz	r0, 800c0b0 <_Bfree+0x20>
 800c0a6:	4b09      	ldr	r3, [pc, #36]	; (800c0cc <_Bfree+0x3c>)
 800c0a8:	4809      	ldr	r0, [pc, #36]	; (800c0d0 <_Bfree+0x40>)
 800c0aa:	218a      	movs	r1, #138	; 0x8a
 800c0ac:	f000 fdea 	bl	800cc84 <__assert_func>
 800c0b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0b4:	6006      	str	r6, [r0, #0]
 800c0b6:	60c6      	str	r6, [r0, #12]
 800c0b8:	b13c      	cbz	r4, 800c0ca <_Bfree+0x3a>
 800c0ba:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0bc:	6862      	ldr	r2, [r4, #4]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c0c4:	6021      	str	r1, [r4, #0]
 800c0c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c0ca:	bd70      	pop	{r4, r5, r6, pc}
 800c0cc:	0800d021 	.word	0x0800d021
 800c0d0:	0800d104 	.word	0x0800d104

0800c0d4 <__multadd>:
 800c0d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d8:	690d      	ldr	r5, [r1, #16]
 800c0da:	4607      	mov	r7, r0
 800c0dc:	460c      	mov	r4, r1
 800c0de:	461e      	mov	r6, r3
 800c0e0:	f101 0c14 	add.w	ip, r1, #20
 800c0e4:	2000      	movs	r0, #0
 800c0e6:	f8dc 3000 	ldr.w	r3, [ip]
 800c0ea:	b299      	uxth	r1, r3
 800c0ec:	fb02 6101 	mla	r1, r2, r1, r6
 800c0f0:	0c1e      	lsrs	r6, r3, #16
 800c0f2:	0c0b      	lsrs	r3, r1, #16
 800c0f4:	fb02 3306 	mla	r3, r2, r6, r3
 800c0f8:	b289      	uxth	r1, r1
 800c0fa:	3001      	adds	r0, #1
 800c0fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c100:	4285      	cmp	r5, r0
 800c102:	f84c 1b04 	str.w	r1, [ip], #4
 800c106:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c10a:	dcec      	bgt.n	800c0e6 <__multadd+0x12>
 800c10c:	b30e      	cbz	r6, 800c152 <__multadd+0x7e>
 800c10e:	68a3      	ldr	r3, [r4, #8]
 800c110:	42ab      	cmp	r3, r5
 800c112:	dc19      	bgt.n	800c148 <__multadd+0x74>
 800c114:	6861      	ldr	r1, [r4, #4]
 800c116:	4638      	mov	r0, r7
 800c118:	3101      	adds	r1, #1
 800c11a:	f7ff ff79 	bl	800c010 <_Balloc>
 800c11e:	4680      	mov	r8, r0
 800c120:	b928      	cbnz	r0, 800c12e <__multadd+0x5a>
 800c122:	4602      	mov	r2, r0
 800c124:	4b0c      	ldr	r3, [pc, #48]	; (800c158 <__multadd+0x84>)
 800c126:	480d      	ldr	r0, [pc, #52]	; (800c15c <__multadd+0x88>)
 800c128:	21b5      	movs	r1, #181	; 0xb5
 800c12a:	f000 fdab 	bl	800cc84 <__assert_func>
 800c12e:	6922      	ldr	r2, [r4, #16]
 800c130:	3202      	adds	r2, #2
 800c132:	f104 010c 	add.w	r1, r4, #12
 800c136:	0092      	lsls	r2, r2, #2
 800c138:	300c      	adds	r0, #12
 800c13a:	f7ff ff5b 	bl	800bff4 <memcpy>
 800c13e:	4621      	mov	r1, r4
 800c140:	4638      	mov	r0, r7
 800c142:	f7ff ffa5 	bl	800c090 <_Bfree>
 800c146:	4644      	mov	r4, r8
 800c148:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c14c:	3501      	adds	r5, #1
 800c14e:	615e      	str	r6, [r3, #20]
 800c150:	6125      	str	r5, [r4, #16]
 800c152:	4620      	mov	r0, r4
 800c154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c158:	0800d093 	.word	0x0800d093
 800c15c:	0800d104 	.word	0x0800d104

0800c160 <__hi0bits>:
 800c160:	0c03      	lsrs	r3, r0, #16
 800c162:	041b      	lsls	r3, r3, #16
 800c164:	b9d3      	cbnz	r3, 800c19c <__hi0bits+0x3c>
 800c166:	0400      	lsls	r0, r0, #16
 800c168:	2310      	movs	r3, #16
 800c16a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c16e:	bf04      	itt	eq
 800c170:	0200      	lsleq	r0, r0, #8
 800c172:	3308      	addeq	r3, #8
 800c174:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c178:	bf04      	itt	eq
 800c17a:	0100      	lsleq	r0, r0, #4
 800c17c:	3304      	addeq	r3, #4
 800c17e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c182:	bf04      	itt	eq
 800c184:	0080      	lsleq	r0, r0, #2
 800c186:	3302      	addeq	r3, #2
 800c188:	2800      	cmp	r0, #0
 800c18a:	db05      	blt.n	800c198 <__hi0bits+0x38>
 800c18c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c190:	f103 0301 	add.w	r3, r3, #1
 800c194:	bf08      	it	eq
 800c196:	2320      	moveq	r3, #32
 800c198:	4618      	mov	r0, r3
 800c19a:	4770      	bx	lr
 800c19c:	2300      	movs	r3, #0
 800c19e:	e7e4      	b.n	800c16a <__hi0bits+0xa>

0800c1a0 <__lo0bits>:
 800c1a0:	6803      	ldr	r3, [r0, #0]
 800c1a2:	f013 0207 	ands.w	r2, r3, #7
 800c1a6:	4601      	mov	r1, r0
 800c1a8:	d00b      	beq.n	800c1c2 <__lo0bits+0x22>
 800c1aa:	07da      	lsls	r2, r3, #31
 800c1ac:	d423      	bmi.n	800c1f6 <__lo0bits+0x56>
 800c1ae:	0798      	lsls	r0, r3, #30
 800c1b0:	bf49      	itett	mi
 800c1b2:	085b      	lsrmi	r3, r3, #1
 800c1b4:	089b      	lsrpl	r3, r3, #2
 800c1b6:	2001      	movmi	r0, #1
 800c1b8:	600b      	strmi	r3, [r1, #0]
 800c1ba:	bf5c      	itt	pl
 800c1bc:	600b      	strpl	r3, [r1, #0]
 800c1be:	2002      	movpl	r0, #2
 800c1c0:	4770      	bx	lr
 800c1c2:	b298      	uxth	r0, r3
 800c1c4:	b9a8      	cbnz	r0, 800c1f2 <__lo0bits+0x52>
 800c1c6:	0c1b      	lsrs	r3, r3, #16
 800c1c8:	2010      	movs	r0, #16
 800c1ca:	b2da      	uxtb	r2, r3
 800c1cc:	b90a      	cbnz	r2, 800c1d2 <__lo0bits+0x32>
 800c1ce:	3008      	adds	r0, #8
 800c1d0:	0a1b      	lsrs	r3, r3, #8
 800c1d2:	071a      	lsls	r2, r3, #28
 800c1d4:	bf04      	itt	eq
 800c1d6:	091b      	lsreq	r3, r3, #4
 800c1d8:	3004      	addeq	r0, #4
 800c1da:	079a      	lsls	r2, r3, #30
 800c1dc:	bf04      	itt	eq
 800c1de:	089b      	lsreq	r3, r3, #2
 800c1e0:	3002      	addeq	r0, #2
 800c1e2:	07da      	lsls	r2, r3, #31
 800c1e4:	d403      	bmi.n	800c1ee <__lo0bits+0x4e>
 800c1e6:	085b      	lsrs	r3, r3, #1
 800c1e8:	f100 0001 	add.w	r0, r0, #1
 800c1ec:	d005      	beq.n	800c1fa <__lo0bits+0x5a>
 800c1ee:	600b      	str	r3, [r1, #0]
 800c1f0:	4770      	bx	lr
 800c1f2:	4610      	mov	r0, r2
 800c1f4:	e7e9      	b.n	800c1ca <__lo0bits+0x2a>
 800c1f6:	2000      	movs	r0, #0
 800c1f8:	4770      	bx	lr
 800c1fa:	2020      	movs	r0, #32
 800c1fc:	4770      	bx	lr
	...

0800c200 <__i2b>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	2101      	movs	r1, #1
 800c206:	f7ff ff03 	bl	800c010 <_Balloc>
 800c20a:	4602      	mov	r2, r0
 800c20c:	b928      	cbnz	r0, 800c21a <__i2b+0x1a>
 800c20e:	4b05      	ldr	r3, [pc, #20]	; (800c224 <__i2b+0x24>)
 800c210:	4805      	ldr	r0, [pc, #20]	; (800c228 <__i2b+0x28>)
 800c212:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c216:	f000 fd35 	bl	800cc84 <__assert_func>
 800c21a:	2301      	movs	r3, #1
 800c21c:	6144      	str	r4, [r0, #20]
 800c21e:	6103      	str	r3, [r0, #16]
 800c220:	bd10      	pop	{r4, pc}
 800c222:	bf00      	nop
 800c224:	0800d093 	.word	0x0800d093
 800c228:	0800d104 	.word	0x0800d104

0800c22c <__multiply>:
 800c22c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c230:	4691      	mov	r9, r2
 800c232:	690a      	ldr	r2, [r1, #16]
 800c234:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c238:	429a      	cmp	r2, r3
 800c23a:	bfb8      	it	lt
 800c23c:	460b      	movlt	r3, r1
 800c23e:	460c      	mov	r4, r1
 800c240:	bfbc      	itt	lt
 800c242:	464c      	movlt	r4, r9
 800c244:	4699      	movlt	r9, r3
 800c246:	6927      	ldr	r7, [r4, #16]
 800c248:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c24c:	68a3      	ldr	r3, [r4, #8]
 800c24e:	6861      	ldr	r1, [r4, #4]
 800c250:	eb07 060a 	add.w	r6, r7, sl
 800c254:	42b3      	cmp	r3, r6
 800c256:	b085      	sub	sp, #20
 800c258:	bfb8      	it	lt
 800c25a:	3101      	addlt	r1, #1
 800c25c:	f7ff fed8 	bl	800c010 <_Balloc>
 800c260:	b930      	cbnz	r0, 800c270 <__multiply+0x44>
 800c262:	4602      	mov	r2, r0
 800c264:	4b44      	ldr	r3, [pc, #272]	; (800c378 <__multiply+0x14c>)
 800c266:	4845      	ldr	r0, [pc, #276]	; (800c37c <__multiply+0x150>)
 800c268:	f240 115d 	movw	r1, #349	; 0x15d
 800c26c:	f000 fd0a 	bl	800cc84 <__assert_func>
 800c270:	f100 0514 	add.w	r5, r0, #20
 800c274:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c278:	462b      	mov	r3, r5
 800c27a:	2200      	movs	r2, #0
 800c27c:	4543      	cmp	r3, r8
 800c27e:	d321      	bcc.n	800c2c4 <__multiply+0x98>
 800c280:	f104 0314 	add.w	r3, r4, #20
 800c284:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c288:	f109 0314 	add.w	r3, r9, #20
 800c28c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c290:	9202      	str	r2, [sp, #8]
 800c292:	1b3a      	subs	r2, r7, r4
 800c294:	3a15      	subs	r2, #21
 800c296:	f022 0203 	bic.w	r2, r2, #3
 800c29a:	3204      	adds	r2, #4
 800c29c:	f104 0115 	add.w	r1, r4, #21
 800c2a0:	428f      	cmp	r7, r1
 800c2a2:	bf38      	it	cc
 800c2a4:	2204      	movcc	r2, #4
 800c2a6:	9201      	str	r2, [sp, #4]
 800c2a8:	9a02      	ldr	r2, [sp, #8]
 800c2aa:	9303      	str	r3, [sp, #12]
 800c2ac:	429a      	cmp	r2, r3
 800c2ae:	d80c      	bhi.n	800c2ca <__multiply+0x9e>
 800c2b0:	2e00      	cmp	r6, #0
 800c2b2:	dd03      	ble.n	800c2bc <__multiply+0x90>
 800c2b4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d05a      	beq.n	800c372 <__multiply+0x146>
 800c2bc:	6106      	str	r6, [r0, #16]
 800c2be:	b005      	add	sp, #20
 800c2c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c2c4:	f843 2b04 	str.w	r2, [r3], #4
 800c2c8:	e7d8      	b.n	800c27c <__multiply+0x50>
 800c2ca:	f8b3 a000 	ldrh.w	sl, [r3]
 800c2ce:	f1ba 0f00 	cmp.w	sl, #0
 800c2d2:	d024      	beq.n	800c31e <__multiply+0xf2>
 800c2d4:	f104 0e14 	add.w	lr, r4, #20
 800c2d8:	46a9      	mov	r9, r5
 800c2da:	f04f 0c00 	mov.w	ip, #0
 800c2de:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c2e2:	f8d9 1000 	ldr.w	r1, [r9]
 800c2e6:	fa1f fb82 	uxth.w	fp, r2
 800c2ea:	b289      	uxth	r1, r1
 800c2ec:	fb0a 110b 	mla	r1, sl, fp, r1
 800c2f0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c2f4:	f8d9 2000 	ldr.w	r2, [r9]
 800c2f8:	4461      	add	r1, ip
 800c2fa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c2fe:	fb0a c20b 	mla	r2, sl, fp, ip
 800c302:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c306:	b289      	uxth	r1, r1
 800c308:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c30c:	4577      	cmp	r7, lr
 800c30e:	f849 1b04 	str.w	r1, [r9], #4
 800c312:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c316:	d8e2      	bhi.n	800c2de <__multiply+0xb2>
 800c318:	9a01      	ldr	r2, [sp, #4]
 800c31a:	f845 c002 	str.w	ip, [r5, r2]
 800c31e:	9a03      	ldr	r2, [sp, #12]
 800c320:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c324:	3304      	adds	r3, #4
 800c326:	f1b9 0f00 	cmp.w	r9, #0
 800c32a:	d020      	beq.n	800c36e <__multiply+0x142>
 800c32c:	6829      	ldr	r1, [r5, #0]
 800c32e:	f104 0c14 	add.w	ip, r4, #20
 800c332:	46ae      	mov	lr, r5
 800c334:	f04f 0a00 	mov.w	sl, #0
 800c338:	f8bc b000 	ldrh.w	fp, [ip]
 800c33c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c340:	fb09 220b 	mla	r2, r9, fp, r2
 800c344:	4492      	add	sl, r2
 800c346:	b289      	uxth	r1, r1
 800c348:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c34c:	f84e 1b04 	str.w	r1, [lr], #4
 800c350:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c354:	f8be 1000 	ldrh.w	r1, [lr]
 800c358:	0c12      	lsrs	r2, r2, #16
 800c35a:	fb09 1102 	mla	r1, r9, r2, r1
 800c35e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c362:	4567      	cmp	r7, ip
 800c364:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c368:	d8e6      	bhi.n	800c338 <__multiply+0x10c>
 800c36a:	9a01      	ldr	r2, [sp, #4]
 800c36c:	50a9      	str	r1, [r5, r2]
 800c36e:	3504      	adds	r5, #4
 800c370:	e79a      	b.n	800c2a8 <__multiply+0x7c>
 800c372:	3e01      	subs	r6, #1
 800c374:	e79c      	b.n	800c2b0 <__multiply+0x84>
 800c376:	bf00      	nop
 800c378:	0800d093 	.word	0x0800d093
 800c37c:	0800d104 	.word	0x0800d104

0800c380 <__pow5mult>:
 800c380:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c384:	4615      	mov	r5, r2
 800c386:	f012 0203 	ands.w	r2, r2, #3
 800c38a:	4606      	mov	r6, r0
 800c38c:	460f      	mov	r7, r1
 800c38e:	d007      	beq.n	800c3a0 <__pow5mult+0x20>
 800c390:	4c25      	ldr	r4, [pc, #148]	; (800c428 <__pow5mult+0xa8>)
 800c392:	3a01      	subs	r2, #1
 800c394:	2300      	movs	r3, #0
 800c396:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c39a:	f7ff fe9b 	bl	800c0d4 <__multadd>
 800c39e:	4607      	mov	r7, r0
 800c3a0:	10ad      	asrs	r5, r5, #2
 800c3a2:	d03d      	beq.n	800c420 <__pow5mult+0xa0>
 800c3a4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c3a6:	b97c      	cbnz	r4, 800c3c8 <__pow5mult+0x48>
 800c3a8:	2010      	movs	r0, #16
 800c3aa:	f7ff fe1b 	bl	800bfe4 <malloc>
 800c3ae:	4602      	mov	r2, r0
 800c3b0:	6270      	str	r0, [r6, #36]	; 0x24
 800c3b2:	b928      	cbnz	r0, 800c3c0 <__pow5mult+0x40>
 800c3b4:	4b1d      	ldr	r3, [pc, #116]	; (800c42c <__pow5mult+0xac>)
 800c3b6:	481e      	ldr	r0, [pc, #120]	; (800c430 <__pow5mult+0xb0>)
 800c3b8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c3bc:	f000 fc62 	bl	800cc84 <__assert_func>
 800c3c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c3c4:	6004      	str	r4, [r0, #0]
 800c3c6:	60c4      	str	r4, [r0, #12]
 800c3c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c3cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c3d0:	b94c      	cbnz	r4, 800c3e6 <__pow5mult+0x66>
 800c3d2:	f240 2171 	movw	r1, #625	; 0x271
 800c3d6:	4630      	mov	r0, r6
 800c3d8:	f7ff ff12 	bl	800c200 <__i2b>
 800c3dc:	2300      	movs	r3, #0
 800c3de:	f8c8 0008 	str.w	r0, [r8, #8]
 800c3e2:	4604      	mov	r4, r0
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	07eb      	lsls	r3, r5, #31
 800c3ec:	d50a      	bpl.n	800c404 <__pow5mult+0x84>
 800c3ee:	4639      	mov	r1, r7
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4630      	mov	r0, r6
 800c3f4:	f7ff ff1a 	bl	800c22c <__multiply>
 800c3f8:	4639      	mov	r1, r7
 800c3fa:	4680      	mov	r8, r0
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f7ff fe47 	bl	800c090 <_Bfree>
 800c402:	4647      	mov	r7, r8
 800c404:	106d      	asrs	r5, r5, #1
 800c406:	d00b      	beq.n	800c420 <__pow5mult+0xa0>
 800c408:	6820      	ldr	r0, [r4, #0]
 800c40a:	b938      	cbnz	r0, 800c41c <__pow5mult+0x9c>
 800c40c:	4622      	mov	r2, r4
 800c40e:	4621      	mov	r1, r4
 800c410:	4630      	mov	r0, r6
 800c412:	f7ff ff0b 	bl	800c22c <__multiply>
 800c416:	6020      	str	r0, [r4, #0]
 800c418:	f8c0 9000 	str.w	r9, [r0]
 800c41c:	4604      	mov	r4, r0
 800c41e:	e7e4      	b.n	800c3ea <__pow5mult+0x6a>
 800c420:	4638      	mov	r0, r7
 800c422:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c426:	bf00      	nop
 800c428:	0800d250 	.word	0x0800d250
 800c42c:	0800d021 	.word	0x0800d021
 800c430:	0800d104 	.word	0x0800d104

0800c434 <__lshift>:
 800c434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c438:	460c      	mov	r4, r1
 800c43a:	6849      	ldr	r1, [r1, #4]
 800c43c:	6923      	ldr	r3, [r4, #16]
 800c43e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c442:	68a3      	ldr	r3, [r4, #8]
 800c444:	4607      	mov	r7, r0
 800c446:	4691      	mov	r9, r2
 800c448:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c44c:	f108 0601 	add.w	r6, r8, #1
 800c450:	42b3      	cmp	r3, r6
 800c452:	db0b      	blt.n	800c46c <__lshift+0x38>
 800c454:	4638      	mov	r0, r7
 800c456:	f7ff fddb 	bl	800c010 <_Balloc>
 800c45a:	4605      	mov	r5, r0
 800c45c:	b948      	cbnz	r0, 800c472 <__lshift+0x3e>
 800c45e:	4602      	mov	r2, r0
 800c460:	4b2a      	ldr	r3, [pc, #168]	; (800c50c <__lshift+0xd8>)
 800c462:	482b      	ldr	r0, [pc, #172]	; (800c510 <__lshift+0xdc>)
 800c464:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c468:	f000 fc0c 	bl	800cc84 <__assert_func>
 800c46c:	3101      	adds	r1, #1
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	e7ee      	b.n	800c450 <__lshift+0x1c>
 800c472:	2300      	movs	r3, #0
 800c474:	f100 0114 	add.w	r1, r0, #20
 800c478:	f100 0210 	add.w	r2, r0, #16
 800c47c:	4618      	mov	r0, r3
 800c47e:	4553      	cmp	r3, sl
 800c480:	db37      	blt.n	800c4f2 <__lshift+0xbe>
 800c482:	6920      	ldr	r0, [r4, #16]
 800c484:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c488:	f104 0314 	add.w	r3, r4, #20
 800c48c:	f019 091f 	ands.w	r9, r9, #31
 800c490:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c494:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c498:	d02f      	beq.n	800c4fa <__lshift+0xc6>
 800c49a:	f1c9 0e20 	rsb	lr, r9, #32
 800c49e:	468a      	mov	sl, r1
 800c4a0:	f04f 0c00 	mov.w	ip, #0
 800c4a4:	681a      	ldr	r2, [r3, #0]
 800c4a6:	fa02 f209 	lsl.w	r2, r2, r9
 800c4aa:	ea42 020c 	orr.w	r2, r2, ip
 800c4ae:	f84a 2b04 	str.w	r2, [sl], #4
 800c4b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4b6:	4298      	cmp	r0, r3
 800c4b8:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c4bc:	d8f2      	bhi.n	800c4a4 <__lshift+0x70>
 800c4be:	1b03      	subs	r3, r0, r4
 800c4c0:	3b15      	subs	r3, #21
 800c4c2:	f023 0303 	bic.w	r3, r3, #3
 800c4c6:	3304      	adds	r3, #4
 800c4c8:	f104 0215 	add.w	r2, r4, #21
 800c4cc:	4290      	cmp	r0, r2
 800c4ce:	bf38      	it	cc
 800c4d0:	2304      	movcc	r3, #4
 800c4d2:	f841 c003 	str.w	ip, [r1, r3]
 800c4d6:	f1bc 0f00 	cmp.w	ip, #0
 800c4da:	d001      	beq.n	800c4e0 <__lshift+0xac>
 800c4dc:	f108 0602 	add.w	r6, r8, #2
 800c4e0:	3e01      	subs	r6, #1
 800c4e2:	4638      	mov	r0, r7
 800c4e4:	612e      	str	r6, [r5, #16]
 800c4e6:	4621      	mov	r1, r4
 800c4e8:	f7ff fdd2 	bl	800c090 <_Bfree>
 800c4ec:	4628      	mov	r0, r5
 800c4ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	e7c1      	b.n	800c47e <__lshift+0x4a>
 800c4fa:	3904      	subs	r1, #4
 800c4fc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c500:	f841 2f04 	str.w	r2, [r1, #4]!
 800c504:	4298      	cmp	r0, r3
 800c506:	d8f9      	bhi.n	800c4fc <__lshift+0xc8>
 800c508:	e7ea      	b.n	800c4e0 <__lshift+0xac>
 800c50a:	bf00      	nop
 800c50c:	0800d093 	.word	0x0800d093
 800c510:	0800d104 	.word	0x0800d104

0800c514 <__mcmp>:
 800c514:	b530      	push	{r4, r5, lr}
 800c516:	6902      	ldr	r2, [r0, #16]
 800c518:	690c      	ldr	r4, [r1, #16]
 800c51a:	1b12      	subs	r2, r2, r4
 800c51c:	d10e      	bne.n	800c53c <__mcmp+0x28>
 800c51e:	f100 0314 	add.w	r3, r0, #20
 800c522:	3114      	adds	r1, #20
 800c524:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c528:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c52c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c530:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c534:	42a5      	cmp	r5, r4
 800c536:	d003      	beq.n	800c540 <__mcmp+0x2c>
 800c538:	d305      	bcc.n	800c546 <__mcmp+0x32>
 800c53a:	2201      	movs	r2, #1
 800c53c:	4610      	mov	r0, r2
 800c53e:	bd30      	pop	{r4, r5, pc}
 800c540:	4283      	cmp	r3, r0
 800c542:	d3f3      	bcc.n	800c52c <__mcmp+0x18>
 800c544:	e7fa      	b.n	800c53c <__mcmp+0x28>
 800c546:	f04f 32ff 	mov.w	r2, #4294967295
 800c54a:	e7f7      	b.n	800c53c <__mcmp+0x28>

0800c54c <__mdiff>:
 800c54c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c550:	460c      	mov	r4, r1
 800c552:	4606      	mov	r6, r0
 800c554:	4611      	mov	r1, r2
 800c556:	4620      	mov	r0, r4
 800c558:	4690      	mov	r8, r2
 800c55a:	f7ff ffdb 	bl	800c514 <__mcmp>
 800c55e:	1e05      	subs	r5, r0, #0
 800c560:	d110      	bne.n	800c584 <__mdiff+0x38>
 800c562:	4629      	mov	r1, r5
 800c564:	4630      	mov	r0, r6
 800c566:	f7ff fd53 	bl	800c010 <_Balloc>
 800c56a:	b930      	cbnz	r0, 800c57a <__mdiff+0x2e>
 800c56c:	4b3a      	ldr	r3, [pc, #232]	; (800c658 <__mdiff+0x10c>)
 800c56e:	4602      	mov	r2, r0
 800c570:	f240 2132 	movw	r1, #562	; 0x232
 800c574:	4839      	ldr	r0, [pc, #228]	; (800c65c <__mdiff+0x110>)
 800c576:	f000 fb85 	bl	800cc84 <__assert_func>
 800c57a:	2301      	movs	r3, #1
 800c57c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c580:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c584:	bfa4      	itt	ge
 800c586:	4643      	movge	r3, r8
 800c588:	46a0      	movge	r8, r4
 800c58a:	4630      	mov	r0, r6
 800c58c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c590:	bfa6      	itte	ge
 800c592:	461c      	movge	r4, r3
 800c594:	2500      	movge	r5, #0
 800c596:	2501      	movlt	r5, #1
 800c598:	f7ff fd3a 	bl	800c010 <_Balloc>
 800c59c:	b920      	cbnz	r0, 800c5a8 <__mdiff+0x5c>
 800c59e:	4b2e      	ldr	r3, [pc, #184]	; (800c658 <__mdiff+0x10c>)
 800c5a0:	4602      	mov	r2, r0
 800c5a2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c5a6:	e7e5      	b.n	800c574 <__mdiff+0x28>
 800c5a8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c5ac:	6926      	ldr	r6, [r4, #16]
 800c5ae:	60c5      	str	r5, [r0, #12]
 800c5b0:	f104 0914 	add.w	r9, r4, #20
 800c5b4:	f108 0514 	add.w	r5, r8, #20
 800c5b8:	f100 0e14 	add.w	lr, r0, #20
 800c5bc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c5c0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c5c4:	f108 0210 	add.w	r2, r8, #16
 800c5c8:	46f2      	mov	sl, lr
 800c5ca:	2100      	movs	r1, #0
 800c5cc:	f859 3b04 	ldr.w	r3, [r9], #4
 800c5d0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c5d4:	fa1f f883 	uxth.w	r8, r3
 800c5d8:	fa11 f18b 	uxtah	r1, r1, fp
 800c5dc:	0c1b      	lsrs	r3, r3, #16
 800c5de:	eba1 0808 	sub.w	r8, r1, r8
 800c5e2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c5e6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c5ea:	fa1f f888 	uxth.w	r8, r8
 800c5ee:	1419      	asrs	r1, r3, #16
 800c5f0:	454e      	cmp	r6, r9
 800c5f2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c5f6:	f84a 3b04 	str.w	r3, [sl], #4
 800c5fa:	d8e7      	bhi.n	800c5cc <__mdiff+0x80>
 800c5fc:	1b33      	subs	r3, r6, r4
 800c5fe:	3b15      	subs	r3, #21
 800c600:	f023 0303 	bic.w	r3, r3, #3
 800c604:	3304      	adds	r3, #4
 800c606:	3415      	adds	r4, #21
 800c608:	42a6      	cmp	r6, r4
 800c60a:	bf38      	it	cc
 800c60c:	2304      	movcc	r3, #4
 800c60e:	441d      	add	r5, r3
 800c610:	4473      	add	r3, lr
 800c612:	469e      	mov	lr, r3
 800c614:	462e      	mov	r6, r5
 800c616:	4566      	cmp	r6, ip
 800c618:	d30e      	bcc.n	800c638 <__mdiff+0xec>
 800c61a:	f10c 0203 	add.w	r2, ip, #3
 800c61e:	1b52      	subs	r2, r2, r5
 800c620:	f022 0203 	bic.w	r2, r2, #3
 800c624:	3d03      	subs	r5, #3
 800c626:	45ac      	cmp	ip, r5
 800c628:	bf38      	it	cc
 800c62a:	2200      	movcc	r2, #0
 800c62c:	441a      	add	r2, r3
 800c62e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c632:	b17b      	cbz	r3, 800c654 <__mdiff+0x108>
 800c634:	6107      	str	r7, [r0, #16]
 800c636:	e7a3      	b.n	800c580 <__mdiff+0x34>
 800c638:	f856 8b04 	ldr.w	r8, [r6], #4
 800c63c:	fa11 f288 	uxtah	r2, r1, r8
 800c640:	1414      	asrs	r4, r2, #16
 800c642:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c646:	b292      	uxth	r2, r2
 800c648:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c64c:	f84e 2b04 	str.w	r2, [lr], #4
 800c650:	1421      	asrs	r1, r4, #16
 800c652:	e7e0      	b.n	800c616 <__mdiff+0xca>
 800c654:	3f01      	subs	r7, #1
 800c656:	e7ea      	b.n	800c62e <__mdiff+0xe2>
 800c658:	0800d093 	.word	0x0800d093
 800c65c:	0800d104 	.word	0x0800d104

0800c660 <__d2b>:
 800c660:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c664:	4689      	mov	r9, r1
 800c666:	2101      	movs	r1, #1
 800c668:	ec57 6b10 	vmov	r6, r7, d0
 800c66c:	4690      	mov	r8, r2
 800c66e:	f7ff fccf 	bl	800c010 <_Balloc>
 800c672:	4604      	mov	r4, r0
 800c674:	b930      	cbnz	r0, 800c684 <__d2b+0x24>
 800c676:	4602      	mov	r2, r0
 800c678:	4b25      	ldr	r3, [pc, #148]	; (800c710 <__d2b+0xb0>)
 800c67a:	4826      	ldr	r0, [pc, #152]	; (800c714 <__d2b+0xb4>)
 800c67c:	f240 310a 	movw	r1, #778	; 0x30a
 800c680:	f000 fb00 	bl	800cc84 <__assert_func>
 800c684:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c688:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c68c:	bb35      	cbnz	r5, 800c6dc <__d2b+0x7c>
 800c68e:	2e00      	cmp	r6, #0
 800c690:	9301      	str	r3, [sp, #4]
 800c692:	d028      	beq.n	800c6e6 <__d2b+0x86>
 800c694:	4668      	mov	r0, sp
 800c696:	9600      	str	r6, [sp, #0]
 800c698:	f7ff fd82 	bl	800c1a0 <__lo0bits>
 800c69c:	9900      	ldr	r1, [sp, #0]
 800c69e:	b300      	cbz	r0, 800c6e2 <__d2b+0x82>
 800c6a0:	9a01      	ldr	r2, [sp, #4]
 800c6a2:	f1c0 0320 	rsb	r3, r0, #32
 800c6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800c6aa:	430b      	orrs	r3, r1
 800c6ac:	40c2      	lsrs	r2, r0
 800c6ae:	6163      	str	r3, [r4, #20]
 800c6b0:	9201      	str	r2, [sp, #4]
 800c6b2:	9b01      	ldr	r3, [sp, #4]
 800c6b4:	61a3      	str	r3, [r4, #24]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	bf14      	ite	ne
 800c6ba:	2202      	movne	r2, #2
 800c6bc:	2201      	moveq	r2, #1
 800c6be:	6122      	str	r2, [r4, #16]
 800c6c0:	b1d5      	cbz	r5, 800c6f8 <__d2b+0x98>
 800c6c2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c6c6:	4405      	add	r5, r0
 800c6c8:	f8c9 5000 	str.w	r5, [r9]
 800c6cc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c6d0:	f8c8 0000 	str.w	r0, [r8]
 800c6d4:	4620      	mov	r0, r4
 800c6d6:	b003      	add	sp, #12
 800c6d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c6e0:	e7d5      	b.n	800c68e <__d2b+0x2e>
 800c6e2:	6161      	str	r1, [r4, #20]
 800c6e4:	e7e5      	b.n	800c6b2 <__d2b+0x52>
 800c6e6:	a801      	add	r0, sp, #4
 800c6e8:	f7ff fd5a 	bl	800c1a0 <__lo0bits>
 800c6ec:	9b01      	ldr	r3, [sp, #4]
 800c6ee:	6163      	str	r3, [r4, #20]
 800c6f0:	2201      	movs	r2, #1
 800c6f2:	6122      	str	r2, [r4, #16]
 800c6f4:	3020      	adds	r0, #32
 800c6f6:	e7e3      	b.n	800c6c0 <__d2b+0x60>
 800c6f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c6fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c700:	f8c9 0000 	str.w	r0, [r9]
 800c704:	6918      	ldr	r0, [r3, #16]
 800c706:	f7ff fd2b 	bl	800c160 <__hi0bits>
 800c70a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c70e:	e7df      	b.n	800c6d0 <__d2b+0x70>
 800c710:	0800d093 	.word	0x0800d093
 800c714:	0800d104 	.word	0x0800d104

0800c718 <_calloc_r>:
 800c718:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c71a:	fba1 2402 	umull	r2, r4, r1, r2
 800c71e:	b94c      	cbnz	r4, 800c734 <_calloc_r+0x1c>
 800c720:	4611      	mov	r1, r2
 800c722:	9201      	str	r2, [sp, #4]
 800c724:	f000 f87a 	bl	800c81c <_malloc_r>
 800c728:	9a01      	ldr	r2, [sp, #4]
 800c72a:	4605      	mov	r5, r0
 800c72c:	b930      	cbnz	r0, 800c73c <_calloc_r+0x24>
 800c72e:	4628      	mov	r0, r5
 800c730:	b003      	add	sp, #12
 800c732:	bd30      	pop	{r4, r5, pc}
 800c734:	220c      	movs	r2, #12
 800c736:	6002      	str	r2, [r0, #0]
 800c738:	2500      	movs	r5, #0
 800c73a:	e7f8      	b.n	800c72e <_calloc_r+0x16>
 800c73c:	4621      	mov	r1, r4
 800c73e:	f7fd fdf1 	bl	800a324 <memset>
 800c742:	e7f4      	b.n	800c72e <_calloc_r+0x16>

0800c744 <_free_r>:
 800c744:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c746:	2900      	cmp	r1, #0
 800c748:	d044      	beq.n	800c7d4 <_free_r+0x90>
 800c74a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c74e:	9001      	str	r0, [sp, #4]
 800c750:	2b00      	cmp	r3, #0
 800c752:	f1a1 0404 	sub.w	r4, r1, #4
 800c756:	bfb8      	it	lt
 800c758:	18e4      	addlt	r4, r4, r3
 800c75a:	f000 fb19 	bl	800cd90 <__malloc_lock>
 800c75e:	4a1e      	ldr	r2, [pc, #120]	; (800c7d8 <_free_r+0x94>)
 800c760:	9801      	ldr	r0, [sp, #4]
 800c762:	6813      	ldr	r3, [r2, #0]
 800c764:	b933      	cbnz	r3, 800c774 <_free_r+0x30>
 800c766:	6063      	str	r3, [r4, #4]
 800c768:	6014      	str	r4, [r2, #0]
 800c76a:	b003      	add	sp, #12
 800c76c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c770:	f000 bb14 	b.w	800cd9c <__malloc_unlock>
 800c774:	42a3      	cmp	r3, r4
 800c776:	d908      	bls.n	800c78a <_free_r+0x46>
 800c778:	6825      	ldr	r5, [r4, #0]
 800c77a:	1961      	adds	r1, r4, r5
 800c77c:	428b      	cmp	r3, r1
 800c77e:	bf01      	itttt	eq
 800c780:	6819      	ldreq	r1, [r3, #0]
 800c782:	685b      	ldreq	r3, [r3, #4]
 800c784:	1949      	addeq	r1, r1, r5
 800c786:	6021      	streq	r1, [r4, #0]
 800c788:	e7ed      	b.n	800c766 <_free_r+0x22>
 800c78a:	461a      	mov	r2, r3
 800c78c:	685b      	ldr	r3, [r3, #4]
 800c78e:	b10b      	cbz	r3, 800c794 <_free_r+0x50>
 800c790:	42a3      	cmp	r3, r4
 800c792:	d9fa      	bls.n	800c78a <_free_r+0x46>
 800c794:	6811      	ldr	r1, [r2, #0]
 800c796:	1855      	adds	r5, r2, r1
 800c798:	42a5      	cmp	r5, r4
 800c79a:	d10b      	bne.n	800c7b4 <_free_r+0x70>
 800c79c:	6824      	ldr	r4, [r4, #0]
 800c79e:	4421      	add	r1, r4
 800c7a0:	1854      	adds	r4, r2, r1
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	6011      	str	r1, [r2, #0]
 800c7a6:	d1e0      	bne.n	800c76a <_free_r+0x26>
 800c7a8:	681c      	ldr	r4, [r3, #0]
 800c7aa:	685b      	ldr	r3, [r3, #4]
 800c7ac:	6053      	str	r3, [r2, #4]
 800c7ae:	4421      	add	r1, r4
 800c7b0:	6011      	str	r1, [r2, #0]
 800c7b2:	e7da      	b.n	800c76a <_free_r+0x26>
 800c7b4:	d902      	bls.n	800c7bc <_free_r+0x78>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	6003      	str	r3, [r0, #0]
 800c7ba:	e7d6      	b.n	800c76a <_free_r+0x26>
 800c7bc:	6825      	ldr	r5, [r4, #0]
 800c7be:	1961      	adds	r1, r4, r5
 800c7c0:	428b      	cmp	r3, r1
 800c7c2:	bf04      	itt	eq
 800c7c4:	6819      	ldreq	r1, [r3, #0]
 800c7c6:	685b      	ldreq	r3, [r3, #4]
 800c7c8:	6063      	str	r3, [r4, #4]
 800c7ca:	bf04      	itt	eq
 800c7cc:	1949      	addeq	r1, r1, r5
 800c7ce:	6021      	streq	r1, [r4, #0]
 800c7d0:	6054      	str	r4, [r2, #4]
 800c7d2:	e7ca      	b.n	800c76a <_free_r+0x26>
 800c7d4:	b003      	add	sp, #12
 800c7d6:	bd30      	pop	{r4, r5, pc}
 800c7d8:	20000760 	.word	0x20000760

0800c7dc <sbrk_aligned>:
 800c7dc:	b570      	push	{r4, r5, r6, lr}
 800c7de:	4e0e      	ldr	r6, [pc, #56]	; (800c818 <sbrk_aligned+0x3c>)
 800c7e0:	460c      	mov	r4, r1
 800c7e2:	6831      	ldr	r1, [r6, #0]
 800c7e4:	4605      	mov	r5, r0
 800c7e6:	b911      	cbnz	r1, 800c7ee <sbrk_aligned+0x12>
 800c7e8:	f000 f9e6 	bl	800cbb8 <_sbrk_r>
 800c7ec:	6030      	str	r0, [r6, #0]
 800c7ee:	4621      	mov	r1, r4
 800c7f0:	4628      	mov	r0, r5
 800c7f2:	f000 f9e1 	bl	800cbb8 <_sbrk_r>
 800c7f6:	1c43      	adds	r3, r0, #1
 800c7f8:	d00a      	beq.n	800c810 <sbrk_aligned+0x34>
 800c7fa:	1cc4      	adds	r4, r0, #3
 800c7fc:	f024 0403 	bic.w	r4, r4, #3
 800c800:	42a0      	cmp	r0, r4
 800c802:	d007      	beq.n	800c814 <sbrk_aligned+0x38>
 800c804:	1a21      	subs	r1, r4, r0
 800c806:	4628      	mov	r0, r5
 800c808:	f000 f9d6 	bl	800cbb8 <_sbrk_r>
 800c80c:	3001      	adds	r0, #1
 800c80e:	d101      	bne.n	800c814 <sbrk_aligned+0x38>
 800c810:	f04f 34ff 	mov.w	r4, #4294967295
 800c814:	4620      	mov	r0, r4
 800c816:	bd70      	pop	{r4, r5, r6, pc}
 800c818:	20000764 	.word	0x20000764

0800c81c <_malloc_r>:
 800c81c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c820:	1ccd      	adds	r5, r1, #3
 800c822:	f025 0503 	bic.w	r5, r5, #3
 800c826:	3508      	adds	r5, #8
 800c828:	2d0c      	cmp	r5, #12
 800c82a:	bf38      	it	cc
 800c82c:	250c      	movcc	r5, #12
 800c82e:	2d00      	cmp	r5, #0
 800c830:	4607      	mov	r7, r0
 800c832:	db01      	blt.n	800c838 <_malloc_r+0x1c>
 800c834:	42a9      	cmp	r1, r5
 800c836:	d905      	bls.n	800c844 <_malloc_r+0x28>
 800c838:	230c      	movs	r3, #12
 800c83a:	603b      	str	r3, [r7, #0]
 800c83c:	2600      	movs	r6, #0
 800c83e:	4630      	mov	r0, r6
 800c840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c844:	4e2e      	ldr	r6, [pc, #184]	; (800c900 <_malloc_r+0xe4>)
 800c846:	f000 faa3 	bl	800cd90 <__malloc_lock>
 800c84a:	6833      	ldr	r3, [r6, #0]
 800c84c:	461c      	mov	r4, r3
 800c84e:	bb34      	cbnz	r4, 800c89e <_malloc_r+0x82>
 800c850:	4629      	mov	r1, r5
 800c852:	4638      	mov	r0, r7
 800c854:	f7ff ffc2 	bl	800c7dc <sbrk_aligned>
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	4604      	mov	r4, r0
 800c85c:	d14d      	bne.n	800c8fa <_malloc_r+0xde>
 800c85e:	6834      	ldr	r4, [r6, #0]
 800c860:	4626      	mov	r6, r4
 800c862:	2e00      	cmp	r6, #0
 800c864:	d140      	bne.n	800c8e8 <_malloc_r+0xcc>
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	4631      	mov	r1, r6
 800c86a:	4638      	mov	r0, r7
 800c86c:	eb04 0803 	add.w	r8, r4, r3
 800c870:	f000 f9a2 	bl	800cbb8 <_sbrk_r>
 800c874:	4580      	cmp	r8, r0
 800c876:	d13a      	bne.n	800c8ee <_malloc_r+0xd2>
 800c878:	6821      	ldr	r1, [r4, #0]
 800c87a:	3503      	adds	r5, #3
 800c87c:	1a6d      	subs	r5, r5, r1
 800c87e:	f025 0503 	bic.w	r5, r5, #3
 800c882:	3508      	adds	r5, #8
 800c884:	2d0c      	cmp	r5, #12
 800c886:	bf38      	it	cc
 800c888:	250c      	movcc	r5, #12
 800c88a:	4629      	mov	r1, r5
 800c88c:	4638      	mov	r0, r7
 800c88e:	f7ff ffa5 	bl	800c7dc <sbrk_aligned>
 800c892:	3001      	adds	r0, #1
 800c894:	d02b      	beq.n	800c8ee <_malloc_r+0xd2>
 800c896:	6823      	ldr	r3, [r4, #0]
 800c898:	442b      	add	r3, r5
 800c89a:	6023      	str	r3, [r4, #0]
 800c89c:	e00e      	b.n	800c8bc <_malloc_r+0xa0>
 800c89e:	6822      	ldr	r2, [r4, #0]
 800c8a0:	1b52      	subs	r2, r2, r5
 800c8a2:	d41e      	bmi.n	800c8e2 <_malloc_r+0xc6>
 800c8a4:	2a0b      	cmp	r2, #11
 800c8a6:	d916      	bls.n	800c8d6 <_malloc_r+0xba>
 800c8a8:	1961      	adds	r1, r4, r5
 800c8aa:	42a3      	cmp	r3, r4
 800c8ac:	6025      	str	r5, [r4, #0]
 800c8ae:	bf18      	it	ne
 800c8b0:	6059      	strne	r1, [r3, #4]
 800c8b2:	6863      	ldr	r3, [r4, #4]
 800c8b4:	bf08      	it	eq
 800c8b6:	6031      	streq	r1, [r6, #0]
 800c8b8:	5162      	str	r2, [r4, r5]
 800c8ba:	604b      	str	r3, [r1, #4]
 800c8bc:	4638      	mov	r0, r7
 800c8be:	f104 060b 	add.w	r6, r4, #11
 800c8c2:	f000 fa6b 	bl	800cd9c <__malloc_unlock>
 800c8c6:	f026 0607 	bic.w	r6, r6, #7
 800c8ca:	1d23      	adds	r3, r4, #4
 800c8cc:	1af2      	subs	r2, r6, r3
 800c8ce:	d0b6      	beq.n	800c83e <_malloc_r+0x22>
 800c8d0:	1b9b      	subs	r3, r3, r6
 800c8d2:	50a3      	str	r3, [r4, r2]
 800c8d4:	e7b3      	b.n	800c83e <_malloc_r+0x22>
 800c8d6:	6862      	ldr	r2, [r4, #4]
 800c8d8:	42a3      	cmp	r3, r4
 800c8da:	bf0c      	ite	eq
 800c8dc:	6032      	streq	r2, [r6, #0]
 800c8de:	605a      	strne	r2, [r3, #4]
 800c8e0:	e7ec      	b.n	800c8bc <_malloc_r+0xa0>
 800c8e2:	4623      	mov	r3, r4
 800c8e4:	6864      	ldr	r4, [r4, #4]
 800c8e6:	e7b2      	b.n	800c84e <_malloc_r+0x32>
 800c8e8:	4634      	mov	r4, r6
 800c8ea:	6876      	ldr	r6, [r6, #4]
 800c8ec:	e7b9      	b.n	800c862 <_malloc_r+0x46>
 800c8ee:	230c      	movs	r3, #12
 800c8f0:	603b      	str	r3, [r7, #0]
 800c8f2:	4638      	mov	r0, r7
 800c8f4:	f000 fa52 	bl	800cd9c <__malloc_unlock>
 800c8f8:	e7a1      	b.n	800c83e <_malloc_r+0x22>
 800c8fa:	6025      	str	r5, [r4, #0]
 800c8fc:	e7de      	b.n	800c8bc <_malloc_r+0xa0>
 800c8fe:	bf00      	nop
 800c900:	20000760 	.word	0x20000760

0800c904 <__sfputc_r>:
 800c904:	6893      	ldr	r3, [r2, #8]
 800c906:	3b01      	subs	r3, #1
 800c908:	2b00      	cmp	r3, #0
 800c90a:	b410      	push	{r4}
 800c90c:	6093      	str	r3, [r2, #8]
 800c90e:	da08      	bge.n	800c922 <__sfputc_r+0x1e>
 800c910:	6994      	ldr	r4, [r2, #24]
 800c912:	42a3      	cmp	r3, r4
 800c914:	db01      	blt.n	800c91a <__sfputc_r+0x16>
 800c916:	290a      	cmp	r1, #10
 800c918:	d103      	bne.n	800c922 <__sfputc_r+0x1e>
 800c91a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c91e:	f7fe ba01 	b.w	800ad24 <__swbuf_r>
 800c922:	6813      	ldr	r3, [r2, #0]
 800c924:	1c58      	adds	r0, r3, #1
 800c926:	6010      	str	r0, [r2, #0]
 800c928:	7019      	strb	r1, [r3, #0]
 800c92a:	4608      	mov	r0, r1
 800c92c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c930:	4770      	bx	lr

0800c932 <__sfputs_r>:
 800c932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c934:	4606      	mov	r6, r0
 800c936:	460f      	mov	r7, r1
 800c938:	4614      	mov	r4, r2
 800c93a:	18d5      	adds	r5, r2, r3
 800c93c:	42ac      	cmp	r4, r5
 800c93e:	d101      	bne.n	800c944 <__sfputs_r+0x12>
 800c940:	2000      	movs	r0, #0
 800c942:	e007      	b.n	800c954 <__sfputs_r+0x22>
 800c944:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c948:	463a      	mov	r2, r7
 800c94a:	4630      	mov	r0, r6
 800c94c:	f7ff ffda 	bl	800c904 <__sfputc_r>
 800c950:	1c43      	adds	r3, r0, #1
 800c952:	d1f3      	bne.n	800c93c <__sfputs_r+0xa>
 800c954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c958 <_vfiprintf_r>:
 800c958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c95c:	460d      	mov	r5, r1
 800c95e:	b09d      	sub	sp, #116	; 0x74
 800c960:	4614      	mov	r4, r2
 800c962:	4698      	mov	r8, r3
 800c964:	4606      	mov	r6, r0
 800c966:	b118      	cbz	r0, 800c970 <_vfiprintf_r+0x18>
 800c968:	6983      	ldr	r3, [r0, #24]
 800c96a:	b90b      	cbnz	r3, 800c970 <_vfiprintf_r+0x18>
 800c96c:	f7ff fa30 	bl	800bdd0 <__sinit>
 800c970:	4b89      	ldr	r3, [pc, #548]	; (800cb98 <_vfiprintf_r+0x240>)
 800c972:	429d      	cmp	r5, r3
 800c974:	d11b      	bne.n	800c9ae <_vfiprintf_r+0x56>
 800c976:	6875      	ldr	r5, [r6, #4]
 800c978:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c97a:	07d9      	lsls	r1, r3, #31
 800c97c:	d405      	bmi.n	800c98a <_vfiprintf_r+0x32>
 800c97e:	89ab      	ldrh	r3, [r5, #12]
 800c980:	059a      	lsls	r2, r3, #22
 800c982:	d402      	bmi.n	800c98a <_vfiprintf_r+0x32>
 800c984:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c986:	f7ff fac6 	bl	800bf16 <__retarget_lock_acquire_recursive>
 800c98a:	89ab      	ldrh	r3, [r5, #12]
 800c98c:	071b      	lsls	r3, r3, #28
 800c98e:	d501      	bpl.n	800c994 <_vfiprintf_r+0x3c>
 800c990:	692b      	ldr	r3, [r5, #16]
 800c992:	b9eb      	cbnz	r3, 800c9d0 <_vfiprintf_r+0x78>
 800c994:	4629      	mov	r1, r5
 800c996:	4630      	mov	r0, r6
 800c998:	f7fe fa16 	bl	800adc8 <__swsetup_r>
 800c99c:	b1c0      	cbz	r0, 800c9d0 <_vfiprintf_r+0x78>
 800c99e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c9a0:	07dc      	lsls	r4, r3, #31
 800c9a2:	d50e      	bpl.n	800c9c2 <_vfiprintf_r+0x6a>
 800c9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a8:	b01d      	add	sp, #116	; 0x74
 800c9aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9ae:	4b7b      	ldr	r3, [pc, #492]	; (800cb9c <_vfiprintf_r+0x244>)
 800c9b0:	429d      	cmp	r5, r3
 800c9b2:	d101      	bne.n	800c9b8 <_vfiprintf_r+0x60>
 800c9b4:	68b5      	ldr	r5, [r6, #8]
 800c9b6:	e7df      	b.n	800c978 <_vfiprintf_r+0x20>
 800c9b8:	4b79      	ldr	r3, [pc, #484]	; (800cba0 <_vfiprintf_r+0x248>)
 800c9ba:	429d      	cmp	r5, r3
 800c9bc:	bf08      	it	eq
 800c9be:	68f5      	ldreq	r5, [r6, #12]
 800c9c0:	e7da      	b.n	800c978 <_vfiprintf_r+0x20>
 800c9c2:	89ab      	ldrh	r3, [r5, #12]
 800c9c4:	0598      	lsls	r0, r3, #22
 800c9c6:	d4ed      	bmi.n	800c9a4 <_vfiprintf_r+0x4c>
 800c9c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c9ca:	f7ff faa5 	bl	800bf18 <__retarget_lock_release_recursive>
 800c9ce:	e7e9      	b.n	800c9a4 <_vfiprintf_r+0x4c>
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c9d4:	2320      	movs	r3, #32
 800c9d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c9da:	f8cd 800c 	str.w	r8, [sp, #12]
 800c9de:	2330      	movs	r3, #48	; 0x30
 800c9e0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cba4 <_vfiprintf_r+0x24c>
 800c9e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c9e8:	f04f 0901 	mov.w	r9, #1
 800c9ec:	4623      	mov	r3, r4
 800c9ee:	469a      	mov	sl, r3
 800c9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c9f4:	b10a      	cbz	r2, 800c9fa <_vfiprintf_r+0xa2>
 800c9f6:	2a25      	cmp	r2, #37	; 0x25
 800c9f8:	d1f9      	bne.n	800c9ee <_vfiprintf_r+0x96>
 800c9fa:	ebba 0b04 	subs.w	fp, sl, r4
 800c9fe:	d00b      	beq.n	800ca18 <_vfiprintf_r+0xc0>
 800ca00:	465b      	mov	r3, fp
 800ca02:	4622      	mov	r2, r4
 800ca04:	4629      	mov	r1, r5
 800ca06:	4630      	mov	r0, r6
 800ca08:	f7ff ff93 	bl	800c932 <__sfputs_r>
 800ca0c:	3001      	adds	r0, #1
 800ca0e:	f000 80aa 	beq.w	800cb66 <_vfiprintf_r+0x20e>
 800ca12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ca14:	445a      	add	r2, fp
 800ca16:	9209      	str	r2, [sp, #36]	; 0x24
 800ca18:	f89a 3000 	ldrb.w	r3, [sl]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	f000 80a2 	beq.w	800cb66 <_vfiprintf_r+0x20e>
 800ca22:	2300      	movs	r3, #0
 800ca24:	f04f 32ff 	mov.w	r2, #4294967295
 800ca28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ca2c:	f10a 0a01 	add.w	sl, sl, #1
 800ca30:	9304      	str	r3, [sp, #16]
 800ca32:	9307      	str	r3, [sp, #28]
 800ca34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ca38:	931a      	str	r3, [sp, #104]	; 0x68
 800ca3a:	4654      	mov	r4, sl
 800ca3c:	2205      	movs	r2, #5
 800ca3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca42:	4858      	ldr	r0, [pc, #352]	; (800cba4 <_vfiprintf_r+0x24c>)
 800ca44:	f7f3 fbec 	bl	8000220 <memchr>
 800ca48:	9a04      	ldr	r2, [sp, #16]
 800ca4a:	b9d8      	cbnz	r0, 800ca84 <_vfiprintf_r+0x12c>
 800ca4c:	06d1      	lsls	r1, r2, #27
 800ca4e:	bf44      	itt	mi
 800ca50:	2320      	movmi	r3, #32
 800ca52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca56:	0713      	lsls	r3, r2, #28
 800ca58:	bf44      	itt	mi
 800ca5a:	232b      	movmi	r3, #43	; 0x2b
 800ca5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ca60:	f89a 3000 	ldrb.w	r3, [sl]
 800ca64:	2b2a      	cmp	r3, #42	; 0x2a
 800ca66:	d015      	beq.n	800ca94 <_vfiprintf_r+0x13c>
 800ca68:	9a07      	ldr	r2, [sp, #28]
 800ca6a:	4654      	mov	r4, sl
 800ca6c:	2000      	movs	r0, #0
 800ca6e:	f04f 0c0a 	mov.w	ip, #10
 800ca72:	4621      	mov	r1, r4
 800ca74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ca78:	3b30      	subs	r3, #48	; 0x30
 800ca7a:	2b09      	cmp	r3, #9
 800ca7c:	d94e      	bls.n	800cb1c <_vfiprintf_r+0x1c4>
 800ca7e:	b1b0      	cbz	r0, 800caae <_vfiprintf_r+0x156>
 800ca80:	9207      	str	r2, [sp, #28]
 800ca82:	e014      	b.n	800caae <_vfiprintf_r+0x156>
 800ca84:	eba0 0308 	sub.w	r3, r0, r8
 800ca88:	fa09 f303 	lsl.w	r3, r9, r3
 800ca8c:	4313      	orrs	r3, r2
 800ca8e:	9304      	str	r3, [sp, #16]
 800ca90:	46a2      	mov	sl, r4
 800ca92:	e7d2      	b.n	800ca3a <_vfiprintf_r+0xe2>
 800ca94:	9b03      	ldr	r3, [sp, #12]
 800ca96:	1d19      	adds	r1, r3, #4
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	9103      	str	r1, [sp, #12]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	bfbb      	ittet	lt
 800caa0:	425b      	neglt	r3, r3
 800caa2:	f042 0202 	orrlt.w	r2, r2, #2
 800caa6:	9307      	strge	r3, [sp, #28]
 800caa8:	9307      	strlt	r3, [sp, #28]
 800caaa:	bfb8      	it	lt
 800caac:	9204      	strlt	r2, [sp, #16]
 800caae:	7823      	ldrb	r3, [r4, #0]
 800cab0:	2b2e      	cmp	r3, #46	; 0x2e
 800cab2:	d10c      	bne.n	800cace <_vfiprintf_r+0x176>
 800cab4:	7863      	ldrb	r3, [r4, #1]
 800cab6:	2b2a      	cmp	r3, #42	; 0x2a
 800cab8:	d135      	bne.n	800cb26 <_vfiprintf_r+0x1ce>
 800caba:	9b03      	ldr	r3, [sp, #12]
 800cabc:	1d1a      	adds	r2, r3, #4
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	9203      	str	r2, [sp, #12]
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	bfb8      	it	lt
 800cac6:	f04f 33ff 	movlt.w	r3, #4294967295
 800caca:	3402      	adds	r4, #2
 800cacc:	9305      	str	r3, [sp, #20]
 800cace:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cbb4 <_vfiprintf_r+0x25c>
 800cad2:	7821      	ldrb	r1, [r4, #0]
 800cad4:	2203      	movs	r2, #3
 800cad6:	4650      	mov	r0, sl
 800cad8:	f7f3 fba2 	bl	8000220 <memchr>
 800cadc:	b140      	cbz	r0, 800caf0 <_vfiprintf_r+0x198>
 800cade:	2340      	movs	r3, #64	; 0x40
 800cae0:	eba0 000a 	sub.w	r0, r0, sl
 800cae4:	fa03 f000 	lsl.w	r0, r3, r0
 800cae8:	9b04      	ldr	r3, [sp, #16]
 800caea:	4303      	orrs	r3, r0
 800caec:	3401      	adds	r4, #1
 800caee:	9304      	str	r3, [sp, #16]
 800caf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf4:	482c      	ldr	r0, [pc, #176]	; (800cba8 <_vfiprintf_r+0x250>)
 800caf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cafa:	2206      	movs	r2, #6
 800cafc:	f7f3 fb90 	bl	8000220 <memchr>
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d03f      	beq.n	800cb84 <_vfiprintf_r+0x22c>
 800cb04:	4b29      	ldr	r3, [pc, #164]	; (800cbac <_vfiprintf_r+0x254>)
 800cb06:	bb1b      	cbnz	r3, 800cb50 <_vfiprintf_r+0x1f8>
 800cb08:	9b03      	ldr	r3, [sp, #12]
 800cb0a:	3307      	adds	r3, #7
 800cb0c:	f023 0307 	bic.w	r3, r3, #7
 800cb10:	3308      	adds	r3, #8
 800cb12:	9303      	str	r3, [sp, #12]
 800cb14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb16:	443b      	add	r3, r7
 800cb18:	9309      	str	r3, [sp, #36]	; 0x24
 800cb1a:	e767      	b.n	800c9ec <_vfiprintf_r+0x94>
 800cb1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800cb20:	460c      	mov	r4, r1
 800cb22:	2001      	movs	r0, #1
 800cb24:	e7a5      	b.n	800ca72 <_vfiprintf_r+0x11a>
 800cb26:	2300      	movs	r3, #0
 800cb28:	3401      	adds	r4, #1
 800cb2a:	9305      	str	r3, [sp, #20]
 800cb2c:	4619      	mov	r1, r3
 800cb2e:	f04f 0c0a 	mov.w	ip, #10
 800cb32:	4620      	mov	r0, r4
 800cb34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cb38:	3a30      	subs	r2, #48	; 0x30
 800cb3a:	2a09      	cmp	r2, #9
 800cb3c:	d903      	bls.n	800cb46 <_vfiprintf_r+0x1ee>
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d0c5      	beq.n	800cace <_vfiprintf_r+0x176>
 800cb42:	9105      	str	r1, [sp, #20]
 800cb44:	e7c3      	b.n	800cace <_vfiprintf_r+0x176>
 800cb46:	fb0c 2101 	mla	r1, ip, r1, r2
 800cb4a:	4604      	mov	r4, r0
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	e7f0      	b.n	800cb32 <_vfiprintf_r+0x1da>
 800cb50:	ab03      	add	r3, sp, #12
 800cb52:	9300      	str	r3, [sp, #0]
 800cb54:	462a      	mov	r2, r5
 800cb56:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <_vfiprintf_r+0x258>)
 800cb58:	a904      	add	r1, sp, #16
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	f7fd fc8a 	bl	800a474 <_printf_float>
 800cb60:	4607      	mov	r7, r0
 800cb62:	1c78      	adds	r0, r7, #1
 800cb64:	d1d6      	bne.n	800cb14 <_vfiprintf_r+0x1bc>
 800cb66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cb68:	07d9      	lsls	r1, r3, #31
 800cb6a:	d405      	bmi.n	800cb78 <_vfiprintf_r+0x220>
 800cb6c:	89ab      	ldrh	r3, [r5, #12]
 800cb6e:	059a      	lsls	r2, r3, #22
 800cb70:	d402      	bmi.n	800cb78 <_vfiprintf_r+0x220>
 800cb72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cb74:	f7ff f9d0 	bl	800bf18 <__retarget_lock_release_recursive>
 800cb78:	89ab      	ldrh	r3, [r5, #12]
 800cb7a:	065b      	lsls	r3, r3, #25
 800cb7c:	f53f af12 	bmi.w	800c9a4 <_vfiprintf_r+0x4c>
 800cb80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cb82:	e711      	b.n	800c9a8 <_vfiprintf_r+0x50>
 800cb84:	ab03      	add	r3, sp, #12
 800cb86:	9300      	str	r3, [sp, #0]
 800cb88:	462a      	mov	r2, r5
 800cb8a:	4b09      	ldr	r3, [pc, #36]	; (800cbb0 <_vfiprintf_r+0x258>)
 800cb8c:	a904      	add	r1, sp, #16
 800cb8e:	4630      	mov	r0, r6
 800cb90:	f7fd ff14 	bl	800a9bc <_printf_i>
 800cb94:	e7e4      	b.n	800cb60 <_vfiprintf_r+0x208>
 800cb96:	bf00      	nop
 800cb98:	0800d0c4 	.word	0x0800d0c4
 800cb9c:	0800d0e4 	.word	0x0800d0e4
 800cba0:	0800d0a4 	.word	0x0800d0a4
 800cba4:	0800d25c 	.word	0x0800d25c
 800cba8:	0800d266 	.word	0x0800d266
 800cbac:	0800a475 	.word	0x0800a475
 800cbb0:	0800c933 	.word	0x0800c933
 800cbb4:	0800d262 	.word	0x0800d262

0800cbb8 <_sbrk_r>:
 800cbb8:	b538      	push	{r3, r4, r5, lr}
 800cbba:	4d06      	ldr	r5, [pc, #24]	; (800cbd4 <_sbrk_r+0x1c>)
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	4604      	mov	r4, r0
 800cbc0:	4608      	mov	r0, r1
 800cbc2:	602b      	str	r3, [r5, #0]
 800cbc4:	f7f8 faf2 	bl	80051ac <_sbrk>
 800cbc8:	1c43      	adds	r3, r0, #1
 800cbca:	d102      	bne.n	800cbd2 <_sbrk_r+0x1a>
 800cbcc:	682b      	ldr	r3, [r5, #0]
 800cbce:	b103      	cbz	r3, 800cbd2 <_sbrk_r+0x1a>
 800cbd0:	6023      	str	r3, [r4, #0]
 800cbd2:	bd38      	pop	{r3, r4, r5, pc}
 800cbd4:	20000768 	.word	0x20000768

0800cbd8 <__sread>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	460c      	mov	r4, r1
 800cbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe0:	f000 f8e2 	bl	800cda8 <_read_r>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	bfab      	itete	ge
 800cbe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cbea:	89a3      	ldrhlt	r3, [r4, #12]
 800cbec:	181b      	addge	r3, r3, r0
 800cbee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cbf2:	bfac      	ite	ge
 800cbf4:	6563      	strge	r3, [r4, #84]	; 0x54
 800cbf6:	81a3      	strhlt	r3, [r4, #12]
 800cbf8:	bd10      	pop	{r4, pc}

0800cbfa <__swrite>:
 800cbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfe:	461f      	mov	r7, r3
 800cc00:	898b      	ldrh	r3, [r1, #12]
 800cc02:	05db      	lsls	r3, r3, #23
 800cc04:	4605      	mov	r5, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4616      	mov	r6, r2
 800cc0a:	d505      	bpl.n	800cc18 <__swrite+0x1e>
 800cc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc10:	2302      	movs	r3, #2
 800cc12:	2200      	movs	r2, #0
 800cc14:	f000 f898 	bl	800cd48 <_lseek_r>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cc22:	81a3      	strh	r3, [r4, #12]
 800cc24:	4632      	mov	r2, r6
 800cc26:	463b      	mov	r3, r7
 800cc28:	4628      	mov	r0, r5
 800cc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	f000 b817 	b.w	800cc60 <_write_r>

0800cc32 <__sseek>:
 800cc32:	b510      	push	{r4, lr}
 800cc34:	460c      	mov	r4, r1
 800cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3a:	f000 f885 	bl	800cd48 <_lseek_r>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	bf15      	itete	ne
 800cc44:	6560      	strne	r0, [r4, #84]	; 0x54
 800cc46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cc4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cc4e:	81a3      	strheq	r3, [r4, #12]
 800cc50:	bf18      	it	ne
 800cc52:	81a3      	strhne	r3, [r4, #12]
 800cc54:	bd10      	pop	{r4, pc}

0800cc56 <__sclose>:
 800cc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5a:	f000 b831 	b.w	800ccc0 <_close_r>
	...

0800cc60 <_write_r>:
 800cc60:	b538      	push	{r3, r4, r5, lr}
 800cc62:	4d07      	ldr	r5, [pc, #28]	; (800cc80 <_write_r+0x20>)
 800cc64:	4604      	mov	r4, r0
 800cc66:	4608      	mov	r0, r1
 800cc68:	4611      	mov	r1, r2
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	602a      	str	r2, [r5, #0]
 800cc6e:	461a      	mov	r2, r3
 800cc70:	f7f6 fca8 	bl	80035c4 <_write>
 800cc74:	1c43      	adds	r3, r0, #1
 800cc76:	d102      	bne.n	800cc7e <_write_r+0x1e>
 800cc78:	682b      	ldr	r3, [r5, #0]
 800cc7a:	b103      	cbz	r3, 800cc7e <_write_r+0x1e>
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	bd38      	pop	{r3, r4, r5, pc}
 800cc80:	20000768 	.word	0x20000768

0800cc84 <__assert_func>:
 800cc84:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cc86:	4614      	mov	r4, r2
 800cc88:	461a      	mov	r2, r3
 800cc8a:	4b09      	ldr	r3, [pc, #36]	; (800ccb0 <__assert_func+0x2c>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	4605      	mov	r5, r0
 800cc90:	68d8      	ldr	r0, [r3, #12]
 800cc92:	b14c      	cbz	r4, 800cca8 <__assert_func+0x24>
 800cc94:	4b07      	ldr	r3, [pc, #28]	; (800ccb4 <__assert_func+0x30>)
 800cc96:	9100      	str	r1, [sp, #0]
 800cc98:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cc9c:	4906      	ldr	r1, [pc, #24]	; (800ccb8 <__assert_func+0x34>)
 800cc9e:	462b      	mov	r3, r5
 800cca0:	f000 f81e 	bl	800cce0 <fiprintf>
 800cca4:	f000 f89f 	bl	800cde6 <abort>
 800cca8:	4b04      	ldr	r3, [pc, #16]	; (800ccbc <__assert_func+0x38>)
 800ccaa:	461c      	mov	r4, r3
 800ccac:	e7f3      	b.n	800cc96 <__assert_func+0x12>
 800ccae:	bf00      	nop
 800ccb0:	20000074 	.word	0x20000074
 800ccb4:	0800d26d 	.word	0x0800d26d
 800ccb8:	0800d27a 	.word	0x0800d27a
 800ccbc:	0800d2a8 	.word	0x0800d2a8

0800ccc0 <_close_r>:
 800ccc0:	b538      	push	{r3, r4, r5, lr}
 800ccc2:	4d06      	ldr	r5, [pc, #24]	; (800ccdc <_close_r+0x1c>)
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	602b      	str	r3, [r5, #0]
 800cccc:	f7f8 fa39 	bl	8005142 <_close>
 800ccd0:	1c43      	adds	r3, r0, #1
 800ccd2:	d102      	bne.n	800ccda <_close_r+0x1a>
 800ccd4:	682b      	ldr	r3, [r5, #0]
 800ccd6:	b103      	cbz	r3, 800ccda <_close_r+0x1a>
 800ccd8:	6023      	str	r3, [r4, #0]
 800ccda:	bd38      	pop	{r3, r4, r5, pc}
 800ccdc:	20000768 	.word	0x20000768

0800cce0 <fiprintf>:
 800cce0:	b40e      	push	{r1, r2, r3}
 800cce2:	b503      	push	{r0, r1, lr}
 800cce4:	4601      	mov	r1, r0
 800cce6:	ab03      	add	r3, sp, #12
 800cce8:	4805      	ldr	r0, [pc, #20]	; (800cd00 <fiprintf+0x20>)
 800ccea:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccee:	6800      	ldr	r0, [r0, #0]
 800ccf0:	9301      	str	r3, [sp, #4]
 800ccf2:	f7ff fe31 	bl	800c958 <_vfiprintf_r>
 800ccf6:	b002      	add	sp, #8
 800ccf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ccfc:	b003      	add	sp, #12
 800ccfe:	4770      	bx	lr
 800cd00:	20000074 	.word	0x20000074

0800cd04 <_fstat_r>:
 800cd04:	b538      	push	{r3, r4, r5, lr}
 800cd06:	4d07      	ldr	r5, [pc, #28]	; (800cd24 <_fstat_r+0x20>)
 800cd08:	2300      	movs	r3, #0
 800cd0a:	4604      	mov	r4, r0
 800cd0c:	4608      	mov	r0, r1
 800cd0e:	4611      	mov	r1, r2
 800cd10:	602b      	str	r3, [r5, #0]
 800cd12:	f7f8 fa22 	bl	800515a <_fstat>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	d102      	bne.n	800cd20 <_fstat_r+0x1c>
 800cd1a:	682b      	ldr	r3, [r5, #0]
 800cd1c:	b103      	cbz	r3, 800cd20 <_fstat_r+0x1c>
 800cd1e:	6023      	str	r3, [r4, #0]
 800cd20:	bd38      	pop	{r3, r4, r5, pc}
 800cd22:	bf00      	nop
 800cd24:	20000768 	.word	0x20000768

0800cd28 <_isatty_r>:
 800cd28:	b538      	push	{r3, r4, r5, lr}
 800cd2a:	4d06      	ldr	r5, [pc, #24]	; (800cd44 <_isatty_r+0x1c>)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	4604      	mov	r4, r0
 800cd30:	4608      	mov	r0, r1
 800cd32:	602b      	str	r3, [r5, #0]
 800cd34:	f7f8 fa21 	bl	800517a <_isatty>
 800cd38:	1c43      	adds	r3, r0, #1
 800cd3a:	d102      	bne.n	800cd42 <_isatty_r+0x1a>
 800cd3c:	682b      	ldr	r3, [r5, #0]
 800cd3e:	b103      	cbz	r3, 800cd42 <_isatty_r+0x1a>
 800cd40:	6023      	str	r3, [r4, #0]
 800cd42:	bd38      	pop	{r3, r4, r5, pc}
 800cd44:	20000768 	.word	0x20000768

0800cd48 <_lseek_r>:
 800cd48:	b538      	push	{r3, r4, r5, lr}
 800cd4a:	4d07      	ldr	r5, [pc, #28]	; (800cd68 <_lseek_r+0x20>)
 800cd4c:	4604      	mov	r4, r0
 800cd4e:	4608      	mov	r0, r1
 800cd50:	4611      	mov	r1, r2
 800cd52:	2200      	movs	r2, #0
 800cd54:	602a      	str	r2, [r5, #0]
 800cd56:	461a      	mov	r2, r3
 800cd58:	f7f8 fa1a 	bl	8005190 <_lseek>
 800cd5c:	1c43      	adds	r3, r0, #1
 800cd5e:	d102      	bne.n	800cd66 <_lseek_r+0x1e>
 800cd60:	682b      	ldr	r3, [r5, #0]
 800cd62:	b103      	cbz	r3, 800cd66 <_lseek_r+0x1e>
 800cd64:	6023      	str	r3, [r4, #0]
 800cd66:	bd38      	pop	{r3, r4, r5, pc}
 800cd68:	20000768 	.word	0x20000768

0800cd6c <__ascii_mbtowc>:
 800cd6c:	b082      	sub	sp, #8
 800cd6e:	b901      	cbnz	r1, 800cd72 <__ascii_mbtowc+0x6>
 800cd70:	a901      	add	r1, sp, #4
 800cd72:	b142      	cbz	r2, 800cd86 <__ascii_mbtowc+0x1a>
 800cd74:	b14b      	cbz	r3, 800cd8a <__ascii_mbtowc+0x1e>
 800cd76:	7813      	ldrb	r3, [r2, #0]
 800cd78:	600b      	str	r3, [r1, #0]
 800cd7a:	7812      	ldrb	r2, [r2, #0]
 800cd7c:	1e10      	subs	r0, r2, #0
 800cd7e:	bf18      	it	ne
 800cd80:	2001      	movne	r0, #1
 800cd82:	b002      	add	sp, #8
 800cd84:	4770      	bx	lr
 800cd86:	4610      	mov	r0, r2
 800cd88:	e7fb      	b.n	800cd82 <__ascii_mbtowc+0x16>
 800cd8a:	f06f 0001 	mvn.w	r0, #1
 800cd8e:	e7f8      	b.n	800cd82 <__ascii_mbtowc+0x16>

0800cd90 <__malloc_lock>:
 800cd90:	4801      	ldr	r0, [pc, #4]	; (800cd98 <__malloc_lock+0x8>)
 800cd92:	f7ff b8c0 	b.w	800bf16 <__retarget_lock_acquire_recursive>
 800cd96:	bf00      	nop
 800cd98:	2000075c 	.word	0x2000075c

0800cd9c <__malloc_unlock>:
 800cd9c:	4801      	ldr	r0, [pc, #4]	; (800cda4 <__malloc_unlock+0x8>)
 800cd9e:	f7ff b8bb 	b.w	800bf18 <__retarget_lock_release_recursive>
 800cda2:	bf00      	nop
 800cda4:	2000075c 	.word	0x2000075c

0800cda8 <_read_r>:
 800cda8:	b538      	push	{r3, r4, r5, lr}
 800cdaa:	4d07      	ldr	r5, [pc, #28]	; (800cdc8 <_read_r+0x20>)
 800cdac:	4604      	mov	r4, r0
 800cdae:	4608      	mov	r0, r1
 800cdb0:	4611      	mov	r1, r2
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	602a      	str	r2, [r5, #0]
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	f7f8 f9a6 	bl	8005108 <_read>
 800cdbc:	1c43      	adds	r3, r0, #1
 800cdbe:	d102      	bne.n	800cdc6 <_read_r+0x1e>
 800cdc0:	682b      	ldr	r3, [r5, #0]
 800cdc2:	b103      	cbz	r3, 800cdc6 <_read_r+0x1e>
 800cdc4:	6023      	str	r3, [r4, #0]
 800cdc6:	bd38      	pop	{r3, r4, r5, pc}
 800cdc8:	20000768 	.word	0x20000768

0800cdcc <__ascii_wctomb>:
 800cdcc:	b149      	cbz	r1, 800cde2 <__ascii_wctomb+0x16>
 800cdce:	2aff      	cmp	r2, #255	; 0xff
 800cdd0:	bf85      	ittet	hi
 800cdd2:	238a      	movhi	r3, #138	; 0x8a
 800cdd4:	6003      	strhi	r3, [r0, #0]
 800cdd6:	700a      	strbls	r2, [r1, #0]
 800cdd8:	f04f 30ff 	movhi.w	r0, #4294967295
 800cddc:	bf98      	it	ls
 800cdde:	2001      	movls	r0, #1
 800cde0:	4770      	bx	lr
 800cde2:	4608      	mov	r0, r1
 800cde4:	4770      	bx	lr

0800cde6 <abort>:
 800cde6:	b508      	push	{r3, lr}
 800cde8:	2006      	movs	r0, #6
 800cdea:	f000 f82b 	bl	800ce44 <raise>
 800cdee:	2001      	movs	r0, #1
 800cdf0:	f7f8 f980 	bl	80050f4 <_exit>

0800cdf4 <_raise_r>:
 800cdf4:	291f      	cmp	r1, #31
 800cdf6:	b538      	push	{r3, r4, r5, lr}
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	d904      	bls.n	800ce08 <_raise_r+0x14>
 800cdfe:	2316      	movs	r3, #22
 800ce00:	6003      	str	r3, [r0, #0]
 800ce02:	f04f 30ff 	mov.w	r0, #4294967295
 800ce06:	bd38      	pop	{r3, r4, r5, pc}
 800ce08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ce0a:	b112      	cbz	r2, 800ce12 <_raise_r+0x1e>
 800ce0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce10:	b94b      	cbnz	r3, 800ce26 <_raise_r+0x32>
 800ce12:	4620      	mov	r0, r4
 800ce14:	f000 f830 	bl	800ce78 <_getpid_r>
 800ce18:	462a      	mov	r2, r5
 800ce1a:	4601      	mov	r1, r0
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce22:	f000 b817 	b.w	800ce54 <_kill_r>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d00a      	beq.n	800ce40 <_raise_r+0x4c>
 800ce2a:	1c59      	adds	r1, r3, #1
 800ce2c:	d103      	bne.n	800ce36 <_raise_r+0x42>
 800ce2e:	2316      	movs	r3, #22
 800ce30:	6003      	str	r3, [r0, #0]
 800ce32:	2001      	movs	r0, #1
 800ce34:	e7e7      	b.n	800ce06 <_raise_r+0x12>
 800ce36:	2400      	movs	r4, #0
 800ce38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ce3c:	4628      	mov	r0, r5
 800ce3e:	4798      	blx	r3
 800ce40:	2000      	movs	r0, #0
 800ce42:	e7e0      	b.n	800ce06 <_raise_r+0x12>

0800ce44 <raise>:
 800ce44:	4b02      	ldr	r3, [pc, #8]	; (800ce50 <raise+0xc>)
 800ce46:	4601      	mov	r1, r0
 800ce48:	6818      	ldr	r0, [r3, #0]
 800ce4a:	f7ff bfd3 	b.w	800cdf4 <_raise_r>
 800ce4e:	bf00      	nop
 800ce50:	20000074 	.word	0x20000074

0800ce54 <_kill_r>:
 800ce54:	b538      	push	{r3, r4, r5, lr}
 800ce56:	4d07      	ldr	r5, [pc, #28]	; (800ce74 <_kill_r+0x20>)
 800ce58:	2300      	movs	r3, #0
 800ce5a:	4604      	mov	r4, r0
 800ce5c:	4608      	mov	r0, r1
 800ce5e:	4611      	mov	r1, r2
 800ce60:	602b      	str	r3, [r5, #0]
 800ce62:	f7f8 f937 	bl	80050d4 <_kill>
 800ce66:	1c43      	adds	r3, r0, #1
 800ce68:	d102      	bne.n	800ce70 <_kill_r+0x1c>
 800ce6a:	682b      	ldr	r3, [r5, #0]
 800ce6c:	b103      	cbz	r3, 800ce70 <_kill_r+0x1c>
 800ce6e:	6023      	str	r3, [r4, #0]
 800ce70:	bd38      	pop	{r3, r4, r5, pc}
 800ce72:	bf00      	nop
 800ce74:	20000768 	.word	0x20000768

0800ce78 <_getpid_r>:
 800ce78:	f7f8 b924 	b.w	80050c4 <_getpid>

0800ce7c <_init>:
 800ce7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce7e:	bf00      	nop
 800ce80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce82:	bc08      	pop	{r3}
 800ce84:	469e      	mov	lr, r3
 800ce86:	4770      	bx	lr

0800ce88 <_fini>:
 800ce88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce8a:	bf00      	nop
 800ce8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce8e:	bc08      	pop	{r3}
 800ce90:	469e      	mov	lr, r3
 800ce92:	4770      	bx	lr
