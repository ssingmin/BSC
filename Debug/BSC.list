
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c1c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006de4  08006de4  00016de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e04  08006e04  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006e04  08006e04  00016e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006e0c  08006e0c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  2000000c  08006e20  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000278  08006e20  00020278  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013dfc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ab  00000000  00000000  00033e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fe0  00000000  00000000  000365e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ee8  00000000  00000000  000375c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263ea  00000000  00000000  000384b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000136f4  00000000  00000000  0005e89a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef9ac  00000000  00000000  00071f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016193a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043ac  00000000  00000000  0016198c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006dcc 	.word	0x08006dcc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08006dcc 	.word	0x08006dcc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_uldivmod>:
 8000a34:	b953      	cbnz	r3, 8000a4c <__aeabi_uldivmod+0x18>
 8000a36:	b94a      	cbnz	r2, 8000a4c <__aeabi_uldivmod+0x18>
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	bf08      	it	eq
 8000a3c:	2800      	cmpeq	r0, #0
 8000a3e:	bf1c      	itt	ne
 8000a40:	f04f 31ff 	movne.w	r1, #4294967295
 8000a44:	f04f 30ff 	movne.w	r0, #4294967295
 8000a48:	f000 b974 	b.w	8000d34 <__aeabi_idiv0>
 8000a4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a54:	f000 f806 	bl	8000a64 <__udivmoddi4>
 8000a58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr

08000a64 <__udivmoddi4>:
 8000a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a68:	9d08      	ldr	r5, [sp, #32]
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	468e      	mov	lr, r1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d14d      	bne.n	8000b0e <__udivmoddi4+0xaa>
 8000a72:	428a      	cmp	r2, r1
 8000a74:	4694      	mov	ip, r2
 8000a76:	d969      	bls.n	8000b4c <__udivmoddi4+0xe8>
 8000a78:	fab2 f282 	clz	r2, r2
 8000a7c:	b152      	cbz	r2, 8000a94 <__udivmoddi4+0x30>
 8000a7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a82:	f1c2 0120 	rsb	r1, r2, #32
 8000a86:	fa20 f101 	lsr.w	r1, r0, r1
 8000a8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a92:	4094      	lsls	r4, r2
 8000a94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a98:	0c21      	lsrs	r1, r4, #16
 8000a9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a9e:	fa1f f78c 	uxth.w	r7, ip
 8000aa2:	fb08 e316 	mls	r3, r8, r6, lr
 8000aa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aaa:	fb06 f107 	mul.w	r1, r6, r7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x64>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aba:	f080 811f 	bcs.w	8000cfc <__udivmoddi4+0x298>
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	f240 811c 	bls.w	8000cfc <__udivmoddi4+0x298>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	1a5b      	subs	r3, r3, r1
 8000aca:	b2a4      	uxth	r4, r4
 8000acc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad8:	fb00 f707 	mul.w	r7, r0, r7
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x92>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae8:	f080 810a 	bcs.w	8000d00 <__udivmoddi4+0x29c>
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	f240 8107 	bls.w	8000d00 <__udivmoddi4+0x29c>
 8000af2:	4464      	add	r4, ip
 8000af4:	3802      	subs	r0, #2
 8000af6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afa:	1be4      	subs	r4, r4, r7
 8000afc:	2600      	movs	r6, #0
 8000afe:	b11d      	cbz	r5, 8000b08 <__udivmoddi4+0xa4>
 8000b00:	40d4      	lsrs	r4, r2
 8000b02:	2300      	movs	r3, #0
 8000b04:	e9c5 4300 	strd	r4, r3, [r5]
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0xc2>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	f000 80ef 	beq.w	8000cf6 <__udivmoddi4+0x292>
 8000b18:	2600      	movs	r6, #0
 8000b1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1e:	4630      	mov	r0, r6
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	fab3 f683 	clz	r6, r3
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d14a      	bne.n	8000bc4 <__udivmoddi4+0x160>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d302      	bcc.n	8000b38 <__udivmoddi4+0xd4>
 8000b32:	4282      	cmp	r2, r0
 8000b34:	f200 80f9 	bhi.w	8000d2a <__udivmoddi4+0x2c6>
 8000b38:	1a84      	subs	r4, r0, r2
 8000b3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b3e:	2001      	movs	r0, #1
 8000b40:	469e      	mov	lr, r3
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d0e0      	beq.n	8000b08 <__udivmoddi4+0xa4>
 8000b46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b4a:	e7dd      	b.n	8000b08 <__udivmoddi4+0xa4>
 8000b4c:	b902      	cbnz	r2, 8000b50 <__udivmoddi4+0xec>
 8000b4e:	deff      	udf	#255	; 0xff
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	f040 8092 	bne.w	8000c7e <__udivmoddi4+0x21a>
 8000b5a:	eba1 010c 	sub.w	r1, r1, ip
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fa1f fe8c 	uxth.w	lr, ip
 8000b66:	2601      	movs	r6, #1
 8000b68:	0c20      	lsrs	r0, r4, #16
 8000b6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b76:	fb0e f003 	mul.w	r0, lr, r3
 8000b7a:	4288      	cmp	r0, r1
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x12c>
 8000b7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x12a>
 8000b88:	4288      	cmp	r0, r1
 8000b8a:	f200 80cb 	bhi.w	8000d24 <__udivmoddi4+0x2c0>
 8000b8e:	4643      	mov	r3, r8
 8000b90:	1a09      	subs	r1, r1, r0
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b98:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d908      	bls.n	8000bba <__udivmoddi4+0x156>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x154>
 8000bb2:	45a6      	cmp	lr, r4
 8000bb4:	f200 80bb 	bhi.w	8000d2e <__udivmoddi4+0x2ca>
 8000bb8:	4608      	mov	r0, r1
 8000bba:	eba4 040e 	sub.w	r4, r4, lr
 8000bbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bc2:	e79c      	b.n	8000afe <__udivmoddi4+0x9a>
 8000bc4:	f1c6 0720 	rsb	r7, r6, #32
 8000bc8:	40b3      	lsls	r3, r6
 8000bca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bd2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bda:	431c      	orrs	r4, r3
 8000bdc:	40f9      	lsrs	r1, r7
 8000bde:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be2:	fa00 f306 	lsl.w	r3, r0, r6
 8000be6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bea:	0c20      	lsrs	r0, r4, #16
 8000bec:	fa1f fe8c 	uxth.w	lr, ip
 8000bf0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	fa02 f206 	lsl.w	r2, r2, r6
 8000c02:	d90b      	bls.n	8000c1c <__udivmoddi4+0x1b8>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c0c:	f080 8088 	bcs.w	8000d20 <__udivmoddi4+0x2bc>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f240 8085 	bls.w	8000d20 <__udivmoddi4+0x2bc>
 8000c16:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1a:	4461      	add	r1, ip
 8000c1c:	1a09      	subs	r1, r1, r0
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c24:	fb09 1110 	mls	r1, r9, r0, r1
 8000c28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	458e      	cmp	lr, r1
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x1e2>
 8000c34:	eb1c 0101 	adds.w	r1, ip, r1
 8000c38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3c:	d26c      	bcs.n	8000d18 <__udivmoddi4+0x2b4>
 8000c3e:	458e      	cmp	lr, r1
 8000c40:	d96a      	bls.n	8000d18 <__udivmoddi4+0x2b4>
 8000c42:	3802      	subs	r0, #2
 8000c44:	4461      	add	r1, ip
 8000c46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c4e:	eba1 010e 	sub.w	r1, r1, lr
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	46c8      	mov	r8, r9
 8000c56:	46a6      	mov	lr, r4
 8000c58:	d356      	bcc.n	8000d08 <__udivmoddi4+0x2a4>
 8000c5a:	d053      	beq.n	8000d04 <__udivmoddi4+0x2a0>
 8000c5c:	b15d      	cbz	r5, 8000c76 <__udivmoddi4+0x212>
 8000c5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c62:	eb61 010e 	sbc.w	r1, r1, lr
 8000c66:	fa01 f707 	lsl.w	r7, r1, r7
 8000c6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c6e:	40f1      	lsrs	r1, r6
 8000c70:	431f      	orrs	r7, r3
 8000c72:	e9c5 7100 	strd	r7, r1, [r5]
 8000c76:	2600      	movs	r6, #0
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	f1c2 0320 	rsb	r3, r2, #32
 8000c82:	40d8      	lsrs	r0, r3
 8000c84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c88:	fa21 f303 	lsr.w	r3, r1, r3
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4301      	orrs	r1, r0
 8000c90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000ca0:	0c0b      	lsrs	r3, r1, #16
 8000ca2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ca6:	fb00 f60e 	mul.w	r6, r0, lr
 8000caa:	429e      	cmp	r6, r3
 8000cac:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x260>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cba:	d22f      	bcs.n	8000d1c <__udivmoddi4+0x2b8>
 8000cbc:	429e      	cmp	r6, r3
 8000cbe:	d92d      	bls.n	8000d1c <__udivmoddi4+0x2b8>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1b9b      	subs	r3, r3, r6
 8000cc6:	b289      	uxth	r1, r1
 8000cc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ccc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x28a>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ce4:	d216      	bcs.n	8000d14 <__udivmoddi4+0x2b0>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d914      	bls.n	8000d14 <__udivmoddi4+0x2b0>
 8000cea:	3e02      	subs	r6, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cf4:	e738      	b.n	8000b68 <__udivmoddi4+0x104>
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e705      	b.n	8000b08 <__udivmoddi4+0xa4>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e3      	b.n	8000ac8 <__udivmoddi4+0x64>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6f8      	b.n	8000af6 <__udivmoddi4+0x92>
 8000d04:	454b      	cmp	r3, r9
 8000d06:	d2a9      	bcs.n	8000c5c <__udivmoddi4+0x1f8>
 8000d08:	ebb9 0802 	subs.w	r8, r9, r2
 8000d0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7a3      	b.n	8000c5c <__udivmoddi4+0x1f8>
 8000d14:	4646      	mov	r6, r8
 8000d16:	e7ea      	b.n	8000cee <__udivmoddi4+0x28a>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	e794      	b.n	8000c46 <__udivmoddi4+0x1e2>
 8000d1c:	4640      	mov	r0, r8
 8000d1e:	e7d1      	b.n	8000cc4 <__udivmoddi4+0x260>
 8000d20:	46d0      	mov	r8, sl
 8000d22:	e77b      	b.n	8000c1c <__udivmoddi4+0x1b8>
 8000d24:	3b02      	subs	r3, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	e732      	b.n	8000b90 <__udivmoddi4+0x12c>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e709      	b.n	8000b42 <__udivmoddi4+0xde>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	e742      	b.n	8000bba <__udivmoddi4+0x156>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t g_uCAN_Rx_Data[8];
extern uint32_t FLAG_RxCplt;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM6)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d116      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x40>
  {
	  gTick++;
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a0d      	ldr	r2, [pc, #52]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d52:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000d56:	6819      	ldr	r1, [r3, #0]
 8000d58:	4b0c      	ldr	r3, [pc, #48]	; (8000d8c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000d5a:	fba3 2301 	umull	r2, r3, r3, r1
 8000d5e:	08da      	lsrs	r2, r3, #3
 8000d60:	4613      	mov	r3, r2
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	1aca      	subs	r2, r1, r3
 8000d6a:	2a00      	cmp	r2, #0
 8000d6c:	d104      	bne.n	8000d78 <HAL_TIM_PeriodElapsedCallback+0x40>
 8000d6e:	4b08      	ldr	r3, [pc, #32]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a06      	ldr	r2, [pc, #24]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8000d76:	6013      	str	r3, [r2, #0]
  }
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40001000 	.word	0x40001000
 8000d88:	20000028 	.word	0x20000028
 8000d8c:	cccccccd 	.word	0xcccccccd
 8000d90:	20000030 	.word	0x20000030

08000d94 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8000d9e:	88fb      	ldrh	r3, [r7, #6]
 8000da0:	2b40      	cmp	r3, #64	; 0x40
 8000da2:	d103      	bne.n	8000dac <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = gTick;
 8000da4:	4b04      	ldr	r3, [pc, #16]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x24>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a04      	ldr	r2, [pc, #16]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x28>)
 8000daa:	6013      	str	r3, [r2, #0]
    }

}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	20000028 	.word	0x20000028
 8000dbc:	2000004c 	.word	0x2000004c

08000dc0 <sendEnc>:



void sendEnc(int id)
{
 8000dc0:	b590      	push	{r4, r7, lr}
 8000dc2:	b087      	sub	sp, #28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8000dcc:	4b5f      	ldr	r3, [pc, #380]	; (8000f4c <sendEnc+0x18c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000dd4:	f04f 0200 	mov.w	r2, #0
 8000dd8:	4b5d      	ldr	r3, [pc, #372]	; (8000f50 <sendEnc+0x190>)
 8000dda:	f7ff fbd1 	bl	8000580 <__aeabi_dmul>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4610      	mov	r0, r2
 8000de4:	4619      	mov	r1, r3
 8000de6:	f7ff fddd 	bl	80009a4 <__aeabi_d2iz>
 8000dea:	4603      	mov	r3, r0
 8000dec:	b219      	sxth	r1, r3
 8000dee:	697b      	ldr	r3, [r7, #20]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	617a      	str	r2, [r7, #20]
 8000df4:	b2ca      	uxtb	r2, r1
 8000df6:	3318      	adds	r3, #24
 8000df8:	443b      	add	r3, r7
 8000dfa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8000dfe:	4b53      	ldr	r3, [pc, #332]	; (8000f4c <sendEnc+0x18c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8000e06:	f04f 0200 	mov.w	r2, #0
 8000e0a:	4b51      	ldr	r3, [pc, #324]	; (8000f50 <sendEnc+0x190>)
 8000e0c:	f7ff fbb8 	bl	8000580 <__aeabi_dmul>
 8000e10:	4602      	mov	r2, r0
 8000e12:	460b      	mov	r3, r1
 8000e14:	4610      	mov	r0, r2
 8000e16:	4619      	mov	r1, r3
 8000e18:	f7ff fdc4 	bl	80009a4 <__aeabi_d2iz>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	b21b      	sxth	r3, r3
 8000e20:	121b      	asrs	r3, r3, #8
 8000e22:	b219      	sxth	r1, r3
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	1c5a      	adds	r2, r3, #1
 8000e28:	617a      	str	r2, [r7, #20]
 8000e2a:	b2ca      	uxtb	r2, r1
 8000e2c:	3318      	adds	r3, #24
 8000e2e:	443b      	add	r3, r7
 8000e30:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 8000e34:	4b45      	ldr	r3, [pc, #276]	; (8000f4c <sendEnc+0x18c>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000e3c:	f04f 0200 	mov.w	r2, #0
 8000e40:	4b43      	ldr	r3, [pc, #268]	; (8000f50 <sendEnc+0x190>)
 8000e42:	f7ff fb9d 	bl	8000580 <__aeabi_dmul>
 8000e46:	4602      	mov	r2, r0
 8000e48:	460b      	mov	r3, r1
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f7ff fda9 	bl	80009a4 <__aeabi_d2iz>
 8000e52:	4603      	mov	r3, r0
 8000e54:	b219      	sxth	r1, r3
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	617a      	str	r2, [r7, #20]
 8000e5c:	b2ca      	uxtb	r2, r1
 8000e5e:	3318      	adds	r3, #24
 8000e60:	443b      	add	r3, r7
 8000e62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8000e66:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <sendEnc+0x18c>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8000e6e:	f04f 0200 	mov.w	r2, #0
 8000e72:	4b37      	ldr	r3, [pc, #220]	; (8000f50 <sendEnc+0x190>)
 8000e74:	f7ff fb84 	bl	8000580 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f7ff fd90 	bl	80009a4 <__aeabi_d2iz>
 8000e84:	4603      	mov	r3, r0
 8000e86:	b21b      	sxth	r3, r3
 8000e88:	121b      	asrs	r3, r3, #8
 8000e8a:	b219      	sxth	r1, r3
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	1c5a      	adds	r2, r3, #1
 8000e90:	617a      	str	r2, [r7, #20]
 8000e92:	b2ca      	uxtb	r2, r1
 8000e94:	3318      	adds	r3, #24
 8000e96:	443b      	add	r3, r7
 8000e98:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 8000e9c:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <sendEnc+0x194>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	7c1b      	ldrb	r3, [r3, #16]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	b25a      	sxtb	r2, r3
 8000ea6:	4b2b      	ldr	r3, [pc, #172]	; (8000f54 <sendEnc+0x194>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	7bdb      	ldrb	r3, [r3, #15]
 8000eac:	b25b      	sxtb	r3, r3
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	b259      	sxtb	r1, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	1c5a      	adds	r2, r3, #1
 8000eb6:	617a      	str	r2, [r7, #20]
 8000eb8:	b2ca      	uxtb	r2, r1
 8000eba:	3318      	adds	r3, #24
 8000ebc:	443b      	add	r3, r7
 8000ebe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <sendEnc+0x18c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8000eca:	f04f 0200 	mov.w	r2, #0
 8000ece:	4b20      	ldr	r3, [pc, #128]	; (8000f50 <sendEnc+0x190>)
 8000ed0:	f7ff fb56 	bl	8000580 <__aeabi_dmul>
 8000ed4:	4602      	mov	r2, r0
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	4610      	mov	r0, r2
 8000eda:	4619      	mov	r1, r3
 8000edc:	697c      	ldr	r4, [r7, #20]
 8000ede:	1c63      	adds	r3, r4, #1
 8000ee0:	617b      	str	r3, [r7, #20]
 8000ee2:	f7ff fd87 	bl	80009f4 <__aeabi_d2uiz>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	b2da      	uxtb	r2, r3
 8000eea:	f104 0318 	add.w	r3, r4, #24
 8000eee:	443b      	add	r3, r7
 8000ef0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 8000ef4:	4b15      	ldr	r3, [pc, #84]	; (8000f4c <sendEnc+0x18c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <sendEnc+0x190>)
 8000f02:	f7ff fb3d 	bl	8000580 <__aeabi_dmul>
 8000f06:	4602      	mov	r2, r0
 8000f08:	460b      	mov	r3, r1
 8000f0a:	4610      	mov	r0, r2
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	697c      	ldr	r4, [r7, #20]
 8000f10:	1c63      	adds	r3, r4, #1
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	f7ff fd6e 	bl	80009f4 <__aeabi_d2uiz>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	b2da      	uxtb	r2, r3
 8000f1c:	f104 0318 	add.w	r3, r4, #24
 8000f20:	443b      	add	r3, r7
 8000f22:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	1c5a      	adds	r2, r3, #1
 8000f2a:	617a      	str	r2, [r7, #20]
 8000f2c:	3318      	adds	r3, #24
 8000f2e:	443b      	add	r3, r7
 8000f30:	2200      	movs	r2, #0
 8000f32:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f107 010c 	add.w	r1, r7, #12
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	2208      	movs	r2, #8
 8000f40:	f000 fc86 	bl	8001850 <sendCan>
}
 8000f44:	bf00      	nop
 8000f46:	371c      	adds	r7, #28
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	20000050 	.word	0x20000050
 8000f50:	40590000 	.word	0x40590000
 8000f54:	20000054 	.word	0x20000054

08000f58 <toVW>:


int toVW(void)
{
 8000f58:	b598      	push	{r3, r4, r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	; (8001010 <toVW+0xb8>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8000f64:	4a2a      	ldr	r2, [pc, #168]	; (8001010 <toVW+0xb8>)
 8000f66:	6814      	ldr	r4, [r2, #0]
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f7ff fa9f 	bl	80004ac <__aeabi_i2d>
 8000f6e:	4602      	mov	r2, r0
 8000f70:	460b      	mov	r3, r1
 8000f72:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 8000f76:	4b26      	ldr	r3, [pc, #152]	; (8001010 <toVW+0xb8>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8000f7e:	4a24      	ldr	r2, [pc, #144]	; (8001010 <toVW+0xb8>)
 8000f80:	6814      	ldr	r4, [r2, #0]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fa92 	bl	80004ac <__aeabi_i2d>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 8000f90:	4b1f      	ldr	r3, [pc, #124]	; (8001010 <toVW+0xb8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8000f98:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <toVW+0xb8>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8000fa0:	f7ff f938 	bl	8000214 <__adddf3>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	460b      	mov	r3, r1
 8000fa8:	4610      	mov	r0, r2
 8000faa:	4619      	mov	r1, r3
 8000fac:	4b18      	ldr	r3, [pc, #96]	; (8001010 <toVW+0xb8>)
 8000fae:	681c      	ldr	r4, [r3, #0]
 8000fb0:	a313      	add	r3, pc, #76	; (adr r3, 8001000 <toVW+0xa8>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fae3 	bl	8000580 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 8000fc2:	4b13      	ldr	r3, [pc, #76]	; (8001010 <toVW+0xb8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8000fca:	4b11      	ldr	r3, [pc, #68]	; (8001010 <toVW+0xb8>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000fd2:	f7ff f91d 	bl	8000210 <__aeabi_dsub>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4610      	mov	r0, r2
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <toVW+0xb8>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	a309      	add	r3, pc, #36	; (adr r3, 8001008 <toVW+0xb0>)
 8000fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe8:	f7ff faca 	bl	8000580 <__aeabi_dmul>
 8000fec:	4602      	mov	r2, r0
 8000fee:	460b      	mov	r3, r1
 8000ff0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd98      	pop	{r3, r4, r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	f3af 8000 	nop.w
 8001000:	306c65e9 	.word	0x306c65e9
 8001004:	3f6be16e 	.word	0x3f6be16e
 8001008:	5313b470 	.word	0x5313b470
 800100c:	3f8e0b32 	.word	0x3f8e0b32
 8001010:	20000050 	.word	0x20000050

08001014 <parseEnc>:


void parseEnc(uint8_t *msg)
{
 8001014:	b590      	push	{r4, r7, lr}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2bd8      	cmp	r3, #216	; 0xd8
 8001022:	d136      	bne.n	8001092 <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3302      	adds	r3, #2
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	b219      	sxth	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3303      	adds	r3, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	021b      	lsls	r3, r3, #8
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b34      	ldr	r3, [pc, #208]	; (8001108 <parseEnc+0xf4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	b212      	sxth	r2, r2
 800103e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3305      	adds	r3, #5
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b219      	sxth	r1, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3306      	adds	r3, #6
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <parseEnc+0xf4>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	430a      	orrs	r2, r1
 800105a:	b212      	sxth	r2, r2
 800105c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <parseEnc+0xf4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8001068:	b29b      	uxth	r3, r3
 800106a:	425b      	negs	r3, r3
 800106c:	b29a      	uxth	r2, r3
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <parseEnc+0xf4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	b212      	sxth	r2, r2
 8001074:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 8001078:	4b24      	ldr	r3, [pc, #144]	; (800110c <parseEnc+0xf8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	687a      	ldr	r2, [r7, #4]
 800107e:	7852      	ldrb	r2, [r2, #1]
 8001080:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 8001082:	4b22      	ldr	r3, [pc, #136]	; (800110c <parseEnc+0xf8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	687a      	ldr	r2, [r7, #4]
 8001088:	7912      	ldrb	r2, [r2, #4]
 800108a:	741a      	strb	r2, [r3, #16]

        toVW();
 800108c:	f7ff ff64 	bl	8000f58 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 8001090:	e036      	b.n	8001100 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2bc1      	cmp	r3, #193	; 0xc1
 8001098:	d117      	bne.n	80010ca <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3304      	adds	r3, #4
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3305      	adds	r3, #5
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	021b      	lsls	r3, r3, #8
 80010aa:	4313      	orrs	r3, r2
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff f9fd 	bl	80004ac <__aeabi_i2d>
 80010b2:	4b15      	ldr	r3, [pc, #84]	; (8001108 <parseEnc+0xf4>)
 80010b4:	681c      	ldr	r4, [r3, #0]
 80010b6:	f04f 0200 	mov.w	r2, #0
 80010ba:	4b15      	ldr	r3, [pc, #84]	; (8001110 <parseEnc+0xfc>)
 80010bc:	f7ff fb8a 	bl	80007d4 <__aeabi_ddiv>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 80010c8:	e01a      	b.n	8001100 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	781b      	ldrb	r3, [r3, #0]
 80010ce:	2bc8      	cmp	r3, #200	; 0xc8
 80010d0:	d116      	bne.n	8001100 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3304      	adds	r3, #4
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	461a      	mov	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	3305      	adds	r3, #5
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	4313      	orrs	r3, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff f9e1 	bl	80004ac <__aeabi_i2d>
 80010ea:	4b07      	ldr	r3, [pc, #28]	; (8001108 <parseEnc+0xf4>)
 80010ec:	681c      	ldr	r4, [r3, #0]
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	4b07      	ldr	r3, [pc, #28]	; (8001110 <parseEnc+0xfc>)
 80010f4:	f7ff fb6e 	bl	80007d4 <__aeabi_ddiv>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bd90      	pop	{r4, r7, pc}
 8001108:	20000050 	.word	0x20000050
 800110c:	20000054 	.word	0x20000054
 8001110:	40240000 	.word	0x40240000
 8001114:	00000000 	.word	0x00000000

08001118 <spinonce>:

void spinonce(void)
{
 8001118:	b5f0      	push	{r4, r5, r6, r7, lr}
 800111a:	b095      	sub	sp, #84	; 0x54
 800111c:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 800111e:	4ab6      	ldr	r2, [pc, #728]	; (80013f8 <spinonce+0x2e0>)
 8001120:	f107 0308 	add.w	r3, r7, #8
 8001124:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001128:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	64fb      	str	r3, [r7, #76]	; 0x4c
    int tmpindex = 0;
 8001130:	2300      	movs	r3, #0
 8001132:	64bb      	str	r3, [r7, #72]	; 0x48
    int16_t temp;
    uint32_t CanId = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	647b      	str	r3, [r7, #68]	; 0x44
    uint8_t motor_sw = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	double cmd_motor_rpm_right;
    double cmd_v;
    double cmd_w;


	CanInit(0x100,0x1104);//filter id, mask
 800113e:	f241 1104 	movw	r1, #4356	; 0x1104
 8001142:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001146:	f000 fb37 	bl	80017b8 <CanInit>


	while(1)
	{
    	if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 800114a:	4bac      	ldr	r3, [pc, #688]	; (80013fc <spinonce+0x2e4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	1d5a      	adds	r2, r3, #5
 8001150:	4bab      	ldr	r3, [pc, #684]	; (8001400 <spinonce+0x2e8>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	429a      	cmp	r2, r3
 8001156:	d208      	bcs.n	800116a <spinonce+0x52>
    		toggle_seq = Tick_100ms;
 8001158:	4ba9      	ldr	r3, [pc, #676]	; (8001400 <spinonce+0x2e8>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4aa7      	ldr	r2, [pc, #668]	; (80013fc <spinonce+0x2e4>)
 800115e:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 8001160:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001164:	48a7      	ldr	r0, [pc, #668]	; (8001404 <spinonce+0x2ec>)
 8001166:	f002 fc56 	bl	8003a16 <HAL_GPIO_TogglePin>
    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 800116a:	4ba7      	ldr	r3, [pc, #668]	; (8001408 <spinonce+0x2f0>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	1d1a      	adds	r2, r3, #4
 8001170:	4ba6      	ldr	r3, [pc, #664]	; (800140c <spinonce+0x2f4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	429a      	cmp	r2, r3
 8001176:	d255      	bcs.n	8001224 <spinonce+0x10c>
    		controlmotor_seq = Tick_100ms;
 8001178:	4ba1      	ldr	r3, [pc, #644]	; (8001400 <spinonce+0x2e8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4aa2      	ldr	r2, [pc, #648]	; (8001408 <spinonce+0x2f0>)
 800117e:	6013      	str	r3, [r2, #0]

    		    if(motor_sw)
 8001180:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001184:	2b00      	cmp	r3, #0
 8001186:	d045      	beq.n	8001214 <spinonce+0xfc>
    		    {
    		        if(motor_disable_flag)
 8001188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <spinonce+0x7e>
    		        {
    		            enable();
 800118e:	f000 feaf 	bl	8001ef0 <enable>
    		            motor_disable_flag = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	63fb      	str	r3, [r7, #60]	; 0x3c
    		        }
    		        if(motor_break == 1)
 8001196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001198:	2b01      	cmp	r3, #1
 800119a:	d113      	bne.n	80011c4 <spinonce+0xac>
    		        {
    		            control((int)cmd_motor_rpm_left,(int)cmd_motor_rpm_right);
 800119c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011a0:	f7ff fc00 	bl	80009a4 <__aeabi_d2iz>
 80011a4:	4606      	mov	r6, r0
 80011a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011aa:	f7ff fbfb 	bl	80009a4 <__aeabi_d2iz>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4619      	mov	r1, r3
 80011b2:	4630      	mov	r0, r6
 80011b4:	f000 ff4b 	bl	800204e <control>
    		            motor_break = 2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	63bb      	str	r3, [r7, #56]	; 0x38
    		            count = 0;
 80011bc:	4b94      	ldr	r3, [pc, #592]	; (8001410 <spinonce+0x2f8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e02b      	b.n	800121c <spinonce+0x104>
    		        }
    		        else if(motor_break == 2)
 80011c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80011c6:	2b02      	cmp	r3, #2
 80011c8:	d119      	bne.n	80011fe <spinonce+0xe6>
    		        {
    		            count ++;
 80011ca:	4b91      	ldr	r3, [pc, #580]	; (8001410 <spinonce+0x2f8>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	3301      	adds	r3, #1
 80011d0:	4a8f      	ldr	r2, [pc, #572]	; (8001410 <spinonce+0x2f8>)
 80011d2:	6013      	str	r3, [r2, #0]
    		            control((int)cmd_motor_rpm_left,(int)cmd_motor_rpm_right);
 80011d4:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011d8:	f7ff fbe4 	bl	80009a4 <__aeabi_d2iz>
 80011dc:	4606      	mov	r6, r0
 80011de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80011e2:	f7ff fbdf 	bl	80009a4 <__aeabi_d2iz>
 80011e6:	4603      	mov	r3, r0
 80011e8:	4619      	mov	r1, r3
 80011ea:	4630      	mov	r0, r6
 80011ec:	f000 ff2f 	bl	800204e <control>
    		            if(count == 20)
 80011f0:	4b87      	ldr	r3, [pc, #540]	; (8001410 <spinonce+0x2f8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b14      	cmp	r3, #20
 80011f6:	d111      	bne.n	800121c <spinonce+0x104>
    		                motor_break = 3;
 80011f8:	2303      	movs	r3, #3
 80011fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80011fc:	e00e      	b.n	800121c <spinonce+0x104>

    		        }
    		        else if(motor_break == 3)
 80011fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001200:	2b03      	cmp	r3, #3
 8001202:	d10b      	bne.n	800121c <spinonce+0x104>
    		        {
    		            control(0,0);
 8001204:	2100      	movs	r1, #0
 8001206:	2000      	movs	r0, #0
 8001208:	f000 ff21 	bl	800204e <control>
    		            count = 0;
 800120c:	4b80      	ldr	r3, [pc, #512]	; (8001410 <spinonce+0x2f8>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	e003      	b.n	800121c <spinonce+0x104>
    		        }
    		    }
    		    else
    		    {
    		        disable();
 8001214:	f000 fecc 	bl	8001fb0 <disable>
    		        motor_disable_flag = 1;
 8001218:	2301      	movs	r3, #1
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
    		    }

            sendEnc(CANID3);
 800121c:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8001220:	f7ff fdce 	bl	8000dc0 <sendEnc>
    	}


		if((Tick_100ms>send2002)){
 8001224:	4b76      	ldr	r3, [pc, #472]	; (8001400 <spinonce+0x2e8>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b7a      	ldr	r3, [pc, #488]	; (8001414 <spinonce+0x2fc>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	429a      	cmp	r2, r3
 800122e:	f240 8090 	bls.w	8001352 <spinonce+0x23a>
			send2002 = Tick_100ms;
 8001232:	4b73      	ldr	r3, [pc, #460]	; (8001400 <spinonce+0x2e8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4a77      	ldr	r2, [pc, #476]	; (8001414 <spinonce+0x2fc>)
 8001238:	6013      	str	r3, [r2, #0]

			    buf[index++] = 0;
 800123a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001240:	3350      	adds	r3, #80	; 0x50
 8001242:	443b      	add	r3, r7
 8001244:	2200      	movs	r2, #0
 8001246:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800124a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800124c:	1c5a      	adds	r2, r3, #1
 800124e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001250:	3350      	adds	r3, #80	; 0x50
 8001252:	443b      	add	r3, r7
 8001254:	2200      	movs	r2, #0
 8001256:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800125a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800125c:	1c5a      	adds	r2, r3, #1
 800125e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001260:	3350      	adds	r3, #80	; 0x50
 8001262:	443b      	add	r3, r7
 8001264:	2200      	movs	r2, #0
 8001266:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800126a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800126c:	1c5a      	adds	r2, r3, #1
 800126e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001270:	3350      	adds	r3, #80	; 0x50
 8001272:	443b      	add	r3, r7
 8001274:	2200      	movs	r2, #0
 8001276:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800127a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800127c:	1c5a      	adds	r2, r3, #1
 800127e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001280:	3350      	adds	r3, #80	; 0x50
 8001282:	443b      	add	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800128a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800128c:	1c5a      	adds	r2, r3, #1
 800128e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001290:	3350      	adds	r3, #80	; 0x50
 8001292:	443b      	add	r3, r7
 8001294:	2200      	movs	r2, #0
 8001296:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 800129a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800129c:	1c5a      	adds	r2, r3, #1
 800129e:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012a0:	3350      	adds	r3, #80	; 0x50
 80012a2:	443b      	add	r3, r7
 80012a4:	2200      	movs	r2, #0
 80012a6:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index] = 0;
 80012aa:	463a      	mov	r2, r7
 80012ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ae:	4413      	add	r3, r2
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 80012b4:	4639      	mov	r1, r7
 80012b6:	2301      	movs	r3, #1
 80012b8:	2208      	movs	r2, #8
 80012ba:	f240 70d2 	movw	r0, #2002	; 0x7d2
 80012be:	f000 fac7 	bl	8001850 <sendCan>
			index = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	64fb      	str	r3, [r7, #76]	; 0x4c

				buf[index++] = 0;
 80012c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012c8:	1c5a      	adds	r2, r3, #1
 80012ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012cc:	3350      	adds	r3, #80	; 0x50
 80012ce:	443b      	add	r3, r7
 80012d0:	2200      	movs	r2, #0
 80012d2:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 80012d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012dc:	3350      	adds	r3, #80	; 0x50
 80012de:	443b      	add	r3, r7
 80012e0:	2200      	movs	r2, #0
 80012e2:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 80012e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012e8:	1c5a      	adds	r2, r3, #1
 80012ea:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012ec:	3350      	adds	r3, #80	; 0x50
 80012ee:	443b      	add	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 80012f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	64fa      	str	r2, [r7, #76]	; 0x4c
 80012fc:	3350      	adds	r3, #80	; 0x50
 80012fe:	443b      	add	r3, r7
 8001300:	2200      	movs	r2, #0
 8001302:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 8001306:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001308:	1c5a      	adds	r2, r3, #1
 800130a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800130c:	3350      	adds	r3, #80	; 0x50
 800130e:	443b      	add	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 8001316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001318:	1c5a      	adds	r2, r3, #1
 800131a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800131c:	3350      	adds	r3, #80	; 0x50
 800131e:	443b      	add	r3, r7
 8001320:	2200      	movs	r2, #0
 8001322:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0;
 8001326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	64fa      	str	r2, [r7, #76]	; 0x4c
 800132c:	3350      	adds	r3, #80	; 0x50
 800132e:	443b      	add	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index] = 0;
 8001336:	463a      	mov	r2, r7
 8001338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133a:	4413      	add	r3, r2
 800133c:	2200      	movs	r2, #0
 800133e:	701a      	strb	r2, [r3, #0]

			sendCan(2003, buf, 8, 1);//test
 8001340:	4639      	mov	r1, r7
 8001342:	2301      	movs	r3, #1
 8001344:	2208      	movs	r2, #8
 8001346:	f240 70d3 	movw	r0, #2003	; 0x7d3
 800134a:	f000 fa81 	bl	8001850 <sendCan>
			index = 0;
 800134e:	2300      	movs	r3, #0
 8001350:	64fb      	str	r3, [r7, #76]	; 0x4c


		}

		if((gTick>cansend_seq+3)){
 8001352:	4b31      	ldr	r3, [pc, #196]	; (8001418 <spinonce+0x300>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	1cda      	adds	r2, r3, #3
 8001358:	4b2c      	ldr	r3, [pc, #176]	; (800140c <spinonce+0x2f4>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	f080 80a5 	bcs.w	80014ac <spinonce+0x394>
			cansend_seq = gTick;
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <spinonce+0x2f4>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a2c      	ldr	r2, [pc, #176]	; (8001418 <spinonce+0x300>)
 8001368:	6013      	str	r3, [r2, #0]
			tmpindex++;
 800136a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800136c:	3301      	adds	r3, #1
 800136e:	64bb      	str	r3, [r7, #72]	; 0x48
						//reqEnc
			if((tmpindex/2)==0){
 8001370:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001372:	3301      	adds	r3, #1
 8001374:	2b02      	cmp	r3, #2
 8001376:	d851      	bhi.n	800141c <spinonce+0x304>
			    buf[index++] = 0x40;
 8001378:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800137a:	1c5a      	adds	r2, r3, #1
 800137c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800137e:	3350      	adds	r3, #80	; 0x50
 8001380:	443b      	add	r3, r7
 8001382:	2240      	movs	r2, #64	; 0x40
 8001384:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x6c;
 8001388:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800138a:	1c5a      	adds	r2, r3, #1
 800138c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800138e:	3350      	adds	r3, #80	; 0x50
 8001390:	443b      	add	r3, r7
 8001392:	226c      	movs	r2, #108	; 0x6c
 8001394:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x60;
 8001398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800139a:	1c5a      	adds	r2, r3, #1
 800139c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800139e:	3350      	adds	r3, #80	; 0x50
 80013a0:	443b      	add	r3, r7
 80013a2:	2260      	movs	r2, #96	; 0x60
 80013a4:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x03;
 80013a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013aa:	1c5a      	adds	r2, r3, #1
 80013ac:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013ae:	3350      	adds	r3, #80	; 0x50
 80013b0:	443b      	add	r3, r7
 80013b2:	2203      	movs	r2, #3
 80013b4:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 80013b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ba:	1c5a      	adds	r2, r3, #1
 80013bc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013be:	3350      	adds	r3, #80	; 0x50
 80013c0:	443b      	add	r3, r7
 80013c2:	2200      	movs	r2, #0
 80013c4:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 80013c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013ce:	3350      	adds	r3, #80	; 0x50
 80013d0:	443b      	add	r3, r7
 80013d2:	2200      	movs	r2, #0
 80013d4:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 80013d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013da:	1c5a      	adds	r2, r3, #1
 80013dc:	64fa      	str	r2, [r7, #76]	; 0x4c
 80013de:	3350      	adds	r3, #80	; 0x50
 80013e0:	443b      	add	r3, r7
 80013e2:	2200      	movs	r2, #0
 80013e4:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index] = 0x00;
 80013e8:	463a      	mov	r2, r7
 80013ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ec:	4413      	add	r3, r2
 80013ee:	2200      	movs	r2, #0
 80013f0:	701a      	strb	r2, [r3, #0]
			    index=0;
 80013f2:	2300      	movs	r3, #0
 80013f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013f6:	e052      	b.n	800149e <spinonce+0x386>
 80013f8:	08006de4 	.word	0x08006de4
 80013fc:	20000034 	.word	0x20000034
 8001400:	20000030 	.word	0x20000030
 8001404:	40020400 	.word	0x40020400
 8001408:	20000044 	.word	0x20000044
 800140c:	20000028 	.word	0x20000028
 8001410:	20000058 	.word	0x20000058
 8001414:	20000040 	.word	0x20000040
 8001418:	20000038 	.word	0x20000038
			}

			else{
				index=0;
 800141c:	2300      	movs	r3, #0
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
			    buf[index++] = 0x40;
 8001420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001422:	1c5a      	adds	r2, r3, #1
 8001424:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001426:	3350      	adds	r3, #80	; 0x50
 8001428:	443b      	add	r3, r7
 800142a:	2240      	movs	r2, #64	; 0x40
 800142c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x3f;
 8001430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001432:	1c5a      	adds	r2, r3, #1
 8001434:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001436:	3350      	adds	r3, #80	; 0x50
 8001438:	443b      	add	r3, r7
 800143a:	223f      	movs	r2, #63	; 0x3f
 800143c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x60;
 8001440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001442:	1c5a      	adds	r2, r3, #1
 8001444:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001446:	3350      	adds	r3, #80	; 0x50
 8001448:	443b      	add	r3, r7
 800144a:	2260      	movs	r2, #96	; 0x60
 800144c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 8001450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001452:	1c5a      	adds	r2, r3, #1
 8001454:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001456:	3350      	adds	r3, #80	; 0x50
 8001458:	443b      	add	r3, r7
 800145a:	2200      	movs	r2, #0
 800145c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 8001460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001466:	3350      	adds	r3, #80	; 0x50
 8001468:	443b      	add	r3, r7
 800146a:	2200      	movs	r2, #0
 800146c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 8001470:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001476:	3350      	adds	r3, #80	; 0x50
 8001478:	443b      	add	r3, r7
 800147a:	2200      	movs	r2, #0
 800147c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x00;
 8001480:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001482:	1c5a      	adds	r2, r3, #1
 8001484:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001486:	3350      	adds	r3, #80	; 0x50
 8001488:	443b      	add	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index] = 0x00;
 8001490:	463a      	mov	r2, r7
 8001492:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001494:	4413      	add	r3, r2
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
			    index=0;
 800149a:	2300      	movs	r3, #0
 800149c:	64fb      	str	r3, [r7, #76]	; 0x4c
			}
			sendCan(MOTOR114_REQ_ID, buf, 8, 1);//test
 800149e:	4639      	mov	r1, r7
 80014a0:	2301      	movs	r3, #1
 80014a2:	2208      	movs	r2, #8
 80014a4:	f240 6001 	movw	r0, #1537	; 0x601
 80014a8:	f000 f9d2 	bl	8001850 <sendCan>
		}
		if((gTick>CTLcansend_seq+4)){
 80014ac:	4ba8      	ldr	r3, [pc, #672]	; (8001750 <spinonce+0x638>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	1d1a      	adds	r2, r3, #4
 80014b2:	4ba8      	ldr	r3, [pc, #672]	; (8001754 <spinonce+0x63c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	429a      	cmp	r2, r3
 80014b8:	d266      	bcs.n	8001588 <spinonce+0x470>
			CTLcansend_seq = gTick;
 80014ba:	4ba6      	ldr	r3, [pc, #664]	; (8001754 <spinonce+0x63c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4aa4      	ldr	r2, [pc, #656]	; (8001750 <spinonce+0x638>)
 80014c0:	6013      	str	r3, [r2, #0]

				cmd_motor_rpm_left = -1*cmd_motor_rpm_left;
 80014c2:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80014c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014c6:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80014ca:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
			    buf[index++] = 0x23;
 80014ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014d0:	1c5a      	adds	r2, r3, #1
 80014d2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014d4:	3350      	adds	r3, #80	; 0x50
 80014d6:	443b      	add	r3, r7
 80014d8:	2223      	movs	r2, #35	; 0x23
 80014da:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0xff;
 80014de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014e0:	1c5a      	adds	r2, r3, #1
 80014e2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014e4:	3350      	adds	r3, #80	; 0x50
 80014e6:	443b      	add	r3, r7
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x60;
 80014ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80014f0:	1c5a      	adds	r2, r3, #1
 80014f2:	64fa      	str	r2, [r7, #76]	; 0x4c
 80014f4:	3350      	adds	r3, #80	; 0x50
 80014f6:	443b      	add	r3, r7
 80014f8:	2260      	movs	r2, #96	; 0x60
 80014fa:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = 0x03;
 80014fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001504:	3350      	adds	r3, #80	; 0x50
 8001506:	443b      	add	r3, r7
 8001508:	2203      	movs	r2, #3
 800150a:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = ((int)cmd_motor_rpm_left & 0xff);
 800150e:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001512:	f7ff fa47 	bl	80009a4 <__aeabi_d2iz>
 8001516:	4601      	mov	r1, r0
 8001518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	3350      	adds	r3, #80	; 0x50
 8001522:	443b      	add	r3, r7
 8001524:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] = ((int)cmd_motor_rpm_left>>8) & 0xff;
 8001528:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800152c:	f7ff fa3a 	bl	80009a4 <__aeabi_d2iz>
 8001530:	4603      	mov	r3, r0
 8001532:	1219      	asrs	r1, r3, #8
 8001534:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001536:	1c5a      	adds	r2, r3, #1
 8001538:	64fa      	str	r2, [r7, #76]	; 0x4c
 800153a:	b2ca      	uxtb	r2, r1
 800153c:	3350      	adds	r3, #80	; 0x50
 800153e:	443b      	add	r3, r7
 8001540:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index++] =  ((int)cmd_motor_rpm_right) & 0xff;
 8001544:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001548:	f7ff fa2c 	bl	80009a4 <__aeabi_d2iz>
 800154c:	4601      	mov	r1, r0
 800154e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001550:	1c5a      	adds	r2, r3, #1
 8001552:	64fa      	str	r2, [r7, #76]	; 0x4c
 8001554:	b2ca      	uxtb	r2, r1
 8001556:	3350      	adds	r3, #80	; 0x50
 8001558:	443b      	add	r3, r7
 800155a:	f803 2c50 	strb.w	r2, [r3, #-80]
			    buf[index] = ((int)cmd_motor_rpm_right>>8) & 0xff;
 800155e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001562:	f7ff fa1f 	bl	80009a4 <__aeabi_d2iz>
 8001566:	4603      	mov	r3, r0
 8001568:	121b      	asrs	r3, r3, #8
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	463a      	mov	r2, r7
 800156e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001570:	4413      	add	r3, r2
 8001572:	460a      	mov	r2, r1
 8001574:	701a      	strb	r2, [r3, #0]

			sendCan(MOTOR114_REQ_ID, buf, 8, 1);//test
 8001576:	4639      	mov	r1, r7
 8001578:	2301      	movs	r3, #1
 800157a:	2208      	movs	r2, #8
 800157c:	f240 6001 	movw	r0, #1537	; 0x601
 8001580:	f000 f966 	bl	8001850 <sendCan>
			index = 0;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
		}



		if(FLAG_RxCplt){
 8001588:	4b73      	ldr	r3, [pc, #460]	; (8001758 <spinonce+0x640>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	f000 80f6 	beq.w	800177e <spinonce+0x666>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001592:	2300      	movs	r3, #0
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e00c      	b.n	80015b2 <spinonce+0x49a>
 8001598:	4a70      	ldr	r2, [pc, #448]	; (800175c <spinonce+0x644>)
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	4413      	add	r3, r2
 800159e:	7819      	ldrb	r1, [r3, #0]
 80015a0:	f107 0208 	add.w	r2, r7, #8
 80015a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a6:	4413      	add	r3, r2
 80015a8:	460a      	mov	r2, r1
 80015aa:	701a      	strb	r2, [r3, #0]
 80015ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ae:	3301      	adds	r3, #1
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	2b07      	cmp	r3, #7
 80015b6:	ddef      	ble.n	8001598 <spinonce+0x480>
    		FLAG_RxCplt=0;
 80015b8:	4b67      	ldr	r3, [pc, #412]	; (8001758 <spinonce+0x640>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 80015be:	4b68      	ldr	r3, [pc, #416]	; (8001760 <spinonce+0x648>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <spinonce+0x648>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d903      	bls.n	80015d2 <spinonce+0x4ba>
 80015ca:	4b65      	ldr	r3, [pc, #404]	; (8001760 <spinonce+0x648>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	647b      	str	r3, [r7, #68]	; 0x44
 80015d0:	e002      	b.n	80015d8 <spinonce+0x4c0>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <spinonce+0x648>)
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	647b      	str	r3, [r7, #68]	; 0x44

    		switch(CanId)
 80015d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015da:	4a62      	ldr	r2, [pc, #392]	; (8001764 <spinonce+0x64c>)
 80015dc:	4293      	cmp	r3, r2
 80015de:	f000 80a3 	beq.w	8001728 <spinonce+0x610>
 80015e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015e4:	4a5f      	ldr	r2, [pc, #380]	; (8001764 <spinonce+0x64c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	f200 80c1 	bhi.w	800176e <spinonce+0x656>
 80015ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015ee:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80015f2:	4293      	cmp	r3, r2
 80015f4:	f000 809e 	beq.w	8001734 <spinonce+0x61c>
 80015f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015fa:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80015fe:	4293      	cmp	r3, r2
 8001600:	f200 80b5 	bhi.w	800176e <spinonce+0x656>
 8001604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001606:	f640 32b9 	movw	r2, #3001	; 0xbb9
 800160a:	4293      	cmp	r3, r2
 800160c:	f000 8094 	beq.w	8001738 <spinonce+0x620>
 8001610:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001612:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8001616:	4293      	cmp	r3, r2
 8001618:	f200 80a9 	bhi.w	800176e <spinonce+0x656>
 800161c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800161e:	f240 7201 	movw	r2, #1793	; 0x701
 8001622:	4293      	cmp	r3, r2
 8001624:	f000 808a 	beq.w	800173c <spinonce+0x624>
 8001628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800162a:	f240 7201 	movw	r2, #1793	; 0x701
 800162e:	4293      	cmp	r3, r2
 8001630:	f200 809d 	bhi.w	800176e <spinonce+0x656>
 8001634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001636:	f240 5281 	movw	r2, #1409	; 0x581
 800163a:	4293      	cmp	r3, r2
 800163c:	f000 8096 	beq.w	800176c <spinonce+0x654>
 8001640:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001642:	f240 5281 	movw	r2, #1409	; 0x581
 8001646:	4293      	cmp	r3, r2
 8001648:	f200 8091 	bhi.w	800176e <spinonce+0x656>
 800164c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800164e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8001652:	4293      	cmp	r3, r2
 8001654:	d004      	beq.n	8001660 <spinonce+0x548>
 8001656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001658:	f240 32ea 	movw	r2, #1002	; 0x3ea
 800165c:	4293      	cmp	r3, r2
    		    motor_sw = canbuf[4];
                break;

            case CANID2:
                //parseState(msg);
                break;
 800165e:	e086      	b.n	800176e <spinonce+0x656>
    		    temp = ((int16_t)canbuf[0]|(int16_t)canbuf[1]<<8);
 8001660:	7a3b      	ldrb	r3, [r7, #8]
 8001662:	b21a      	sxth	r2, r3
 8001664:	7a7b      	ldrb	r3, [r7, #9]
 8001666:	021b      	lsls	r3, r3, #8
 8001668:	b21b      	sxth	r3, r3
 800166a:	4313      	orrs	r3, r2
 800166c:	847b      	strh	r3, [r7, #34]	; 0x22
    		    cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 800166e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001672:	4618      	mov	r0, r3
 8001674:	f7fe ff1a 	bl	80004ac <__aeabi_i2d>
 8001678:	f04f 0200 	mov.w	r2, #0
 800167c:	4b3a      	ldr	r3, [pc, #232]	; (8001768 <spinonce+0x650>)
 800167e:	f7ff f8a9 	bl	80007d4 <__aeabi_ddiv>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	e9c7 2306 	strd	r2, r3, [r7, #24]
    		    temp = ((int16_t)canbuf[2]|(int16_t)canbuf[3]<<8);
 800168a:	7abb      	ldrb	r3, [r7, #10]
 800168c:	b21a      	sxth	r2, r3
 800168e:	7afb      	ldrb	r3, [r7, #11]
 8001690:	021b      	lsls	r3, r3, #8
 8001692:	b21b      	sxth	r3, r3
 8001694:	4313      	orrs	r3, r2
 8001696:	847b      	strh	r3, [r7, #34]	; 0x22
    		    cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 8001698:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800169c:	4618      	mov	r0, r3
 800169e:	f7fe ff05 	bl	80004ac <__aeabi_i2d>
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	4b30      	ldr	r3, [pc, #192]	; (8001768 <spinonce+0x650>)
 80016a8:	f7ff f894 	bl	80007d4 <__aeabi_ddiv>
 80016ac:	4602      	mov	r2, r0
 80016ae:	460b      	mov	r3, r1
 80016b0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    		    cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (cmd_v + (WHEEL_DISTANCE/2)*cmd_w);
 80016b4:	a322      	add	r3, pc, #136	; (adr r3, 8001740 <spinonce+0x628>)
 80016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016be:	f7fe ff5f 	bl	8000580 <__aeabi_dmul>
 80016c2:	4602      	mov	r2, r0
 80016c4:	460b      	mov	r3, r1
 80016c6:	4610      	mov	r0, r2
 80016c8:	4619      	mov	r1, r3
 80016ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ce:	f7fe fda1 	bl	8000214 <__adddf3>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	a31b      	add	r3, pc, #108	; (adr r3, 8001748 <spinonce+0x630>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe ff4e 	bl	8000580 <__aeabi_dmul>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    		    cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (cmd_v - (WHEEL_DISTANCE/2)*cmd_w);
 80016ec:	a314      	add	r3, pc, #80	; (adr r3, 8001740 <spinonce+0x628>)
 80016ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80016f6:	f7fe ff43 	bl	8000580 <__aeabi_dmul>
 80016fa:	4602      	mov	r2, r0
 80016fc:	460b      	mov	r3, r1
 80016fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001702:	f7fe fd85 	bl	8000210 <__aeabi_dsub>
 8001706:	4602      	mov	r2, r0
 8001708:	460b      	mov	r3, r1
 800170a:	4610      	mov	r0, r2
 800170c:	4619      	mov	r1, r3
 800170e:	a30e      	add	r3, pc, #56	; (adr r3, 8001748 <spinonce+0x630>)
 8001710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001714:	f7fe ff34 	bl	8000580 <__aeabi_dmul>
 8001718:	4602      	mov	r2, r0
 800171a:	460b      	mov	r3, r1
 800171c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    		    motor_sw = canbuf[4];
 8001720:	7b3b      	ldrb	r3, [r7, #12]
 8001722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
                break;
 8001726:	e022      	b.n	800176e <spinonce+0x656>
                break;
            case CANID6:
                //parsePmm(msg);
                break;
            case CANID7:
            	parseEnc(canbuf);
 8001728:	f107 0308 	add.w	r3, r7, #8
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff fc71 	bl	8001014 <parseEnc>
                break;
 8001732:	e01c      	b.n	800176e <spinonce+0x656>
                break;
 8001734:	bf00      	nop
 8001736:	e01a      	b.n	800176e <spinonce+0x656>
                break;
 8001738:	bf00      	nop
 800173a:	e018      	b.n	800176e <spinonce+0x656>
//                if(msg.data[1] == 0x3f && msg.data[2] == 0x60)
//                    parseState114(msg);
                break;
            case MOTOR114_START_ID:
                //motor114->startMotor();
                break;
 800173c:	bf00      	nop
 800173e:	e016      	b.n	800176e <spinonce+0x656>
 8001740:	0e560419 	.word	0x0e560419
 8001744:	3fcdb22d 	.word	0x3fcdb22d
 8001748:	31bcaa49 	.word	0x31bcaa49
 800174c:	40625d31 	.word	0x40625d31
 8001750:	2000003c 	.word	0x2000003c
 8001754:	20000028 	.word	0x20000028
 8001758:	2000005c 	.word	0x2000005c
 800175c:	20000060 	.word	0x20000060
 8001760:	20000068 	.word	0x20000068
 8001764:	00b8b701 	.word	0x00b8b701
 8001768:	40590000 	.word	0x40590000
                break;
 800176c:	bf00      	nop





		    g_tCan_Rx_Header.StdId=0;
 800176e:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <spinonce+0x68c>)
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8001774:	4b0b      	ldr	r3, [pc, #44]	; (80017a4 <spinonce+0x68c>)
 8001776:	2200      	movs	r2, #0
 8001778:	605a      	str	r2, [r3, #4]
			CanId = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	647b      	str	r3, [r7, #68]	; 0x44



		}
		/////////must need USS of fine Tuning/////////
		USS_start = gTick;
 800177e:	4b0a      	ldr	r3, [pc, #40]	; (80017a8 <spinonce+0x690>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <spinonce+0x694>)
 8001784:	6013      	str	r3, [r2, #0]
		HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, SET);
 8001786:	2201      	movs	r2, #1
 8001788:	2120      	movs	r1, #32
 800178a:	4809      	ldr	r0, [pc, #36]	; (80017b0 <spinonce+0x698>)
 800178c:	f002 f92a 	bl	80039e4 <HAL_GPIO_WritePin>
		pre_gTick = gTick;
 8001790:	4b05      	ldr	r3, [pc, #20]	; (80017a8 <spinonce+0x690>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <spinonce+0x69c>)
 8001796:	6013      	str	r3, [r2, #0]
		//while(gTick<(pre_gTick+50)){;}//wait 500us
		HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2120      	movs	r1, #32
 800179c:	4804      	ldr	r0, [pc, #16]	; (80017b0 <spinonce+0x698>)
 800179e:	f002 f921 	bl	80039e4 <HAL_GPIO_WritePin>
    	if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80017a2:	e4d2      	b.n	800114a <spinonce+0x32>
 80017a4:	20000068 	.word	0x20000068
 80017a8:	20000028 	.word	0x20000028
 80017ac:	20000048 	.word	0x20000048
 80017b0:	40020c00 	.word	0x40020c00
 80017b4:	2000002c 	.word	0x2000002c

080017b8 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80017c2:	4b21      	ldr	r3, [pc, #132]	; (8001848 <CanInit+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80017c8:	4b1f      	ldr	r3, [pc, #124]	; (8001848 <CanInit+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80017ce:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <CanInit+0x90>)
 80017d0:	2201      	movs	r2, #1
 80017d2:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	0c1b      	lsrs	r3, r3, #16
 80017d8:	4a1b      	ldr	r2, [pc, #108]	; (8001848 <CanInit+0x90>)
 80017da:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80017e2:	4013      	ands	r3, r2
 80017e4:	4a18      	ldr	r2, [pc, #96]	; (8001848 <CanInit+0x90>)
 80017e6:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	0c1b      	lsrs	r3, r3, #16
 80017ec:	4a16      	ldr	r2, [pc, #88]	; (8001848 <CanInit+0x90>)
 80017ee:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 80017f6:	4013      	ands	r3, r2
 80017f8:	4a13      	ldr	r2, [pc, #76]	; (8001848 <CanInit+0x90>)
 80017fa:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80017fc:	4b12      	ldr	r3, [pc, #72]	; (8001848 <CanInit+0x90>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001802:	4b11      	ldr	r3, [pc, #68]	; (8001848 <CanInit+0x90>)
 8001804:	2201      	movs	r2, #1
 8001806:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001808:	4b0f      	ldr	r3, [pc, #60]	; (8001848 <CanInit+0x90>)
 800180a:	2200      	movs	r2, #0
 800180c:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <CanInit+0x94>)
 8001810:	f001 f8dc 	bl	80029cc <HAL_CAN_Start>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <CanInit+0x66>
 800181a:	f000 fb63 	bl	8001ee4 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800181e:	2102      	movs	r1, #2
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <CanInit+0x94>)
 8001822:	f001 fb39 	bl	8002e98 <HAL_CAN_ActivateNotification>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <CanInit+0x76>
 800182c:	e7fe      	b.n	800182c <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800182e:	4906      	ldr	r1, [pc, #24]	; (8001848 <CanInit+0x90>)
 8001830:	4806      	ldr	r0, [pc, #24]	; (800184c <CanInit+0x94>)
 8001832:	f000 ffeb 	bl	800280c <HAL_CAN_ConfigFilter>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 800183c:	f000 fb52 	bl	8001ee4 <Error_Handler>
    }
}
 8001840:	bf00      	nop
 8001842:	3708      	adds	r7, #8
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	20000084 	.word	0x20000084
 800184c:	200000ac 	.word	0x200000ac

08001850 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	4611      	mov	r1, r2
 800185c:	461a      	mov	r2, r3
 800185e:	460b      	mov	r3, r1
 8001860:	71fb      	strb	r3, [r7, #7]
 8001862:	4613      	mov	r3, r2
 8001864:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 800186e:	2300      	movs	r3, #0
 8001870:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001872:	79bb      	ldrb	r3, [r7, #6]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <sendCan+0x2c>
 8001878:	2304      	movs	r3, #4
 800187a:	e000      	b.n	800187e <sendCan+0x2e>
 800187c:	2300      	movs	r3, #0
 800187e:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8001884:	2301      	movs	r3, #1
 8001886:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 800188a:	480d      	ldr	r0, [pc, #52]	; (80018c0 <sendCan+0x70>)
 800188c:	f001 f9bd 	bl	8002c0a <HAL_CAN_GetTxMailboxesFreeLevel>
 8001890:	4603      	mov	r3, r0
 8001892:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001894:	693b      	ldr	r3, [r7, #16]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00d      	beq.n	80018b6 <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 800189a:	f107 0310 	add.w	r3, r7, #16
 800189e:	f107 0114 	add.w	r1, r7, #20
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	4806      	ldr	r0, [pc, #24]	; (80018c0 <sendCan+0x70>)
 80018a6:	f001 f8d5 	bl	8002a54 <HAL_CAN_AddTxMessage>
 80018aa:	4603      	mov	r3, r0
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80018ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d000      	beq.n	80018b6 <sendCan+0x66>
 80018b4:	e7fe      	b.n	80018b4 <sendCan+0x64>
    }
}
 80018b6:	bf00      	nop
 80018b8:	3730      	adds	r7, #48	; 0x30
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	200000ac 	.word	0x200000ac

080018c4 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80018cc:	4b09      	ldr	r3, [pc, #36]	; (80018f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80018ce:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80018d4:	f001 f9ce 	bl	8002c74 <HAL_CAN_GetRxMessage>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d000      	beq.n	80018e0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 80018de:	e7fe      	b.n	80018de <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 80018e0:	4b07      	ldr	r3, [pc, #28]	; (8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	3301      	adds	r3, #1
 80018e6:	4a06      	ldr	r2, [pc, #24]	; (8001900 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80018e8:	6013      	str	r3, [r2, #0]

}
 80018ea:	bf00      	nop
 80018ec:	3708      	adds	r7, #8
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000060 	.word	0x20000060
 80018f8:	20000068 	.word	0x20000068
 80018fc:	200000ac 	.word	0x200000ac
 8001900:	2000005c 	.word	0x2000005c

08001904 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001908:	f000 fe27 	bl	800255a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800190c:	f000 f814 	bl	8001938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001910:	f000 f9c2 	bl	8001c98 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001914:	f000 f990 	bl	8001c38 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001918:	f000 f87a 	bl	8001a10 <MX_CAN1_Init>
  MX_TIM2_Init();
 800191c:	f000 f8ae 	bl	8001a7c <MX_TIM2_Init>
  MX_UART8_Init();
 8001920:	f000 f95a 	bl	8001bd8 <MX_UART8_Init>
  MX_TIM6_Init();
 8001924:	f000 f922 	bl	8001b6c <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim6);//tmp timer, 100hz
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <main+0x30>)
 800192a:	f003 fa09 	bl	8004d40 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 800192e:	f7ff fbf3 	bl	8001118 <spinonce>
 8001932:	e7fc      	b.n	800192e <main+0x2a>
 8001934:	20000120 	.word	0x20000120

08001938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b094      	sub	sp, #80	; 0x50
 800193c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800193e:	f107 0320 	add.w	r3, r7, #32
 8001942:	2230      	movs	r2, #48	; 0x30
 8001944:	2100      	movs	r1, #0
 8001946:	4618      	mov	r0, r3
 8001948:	f005 fa38 	bl	8006dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800194c:	f107 030c 	add.w	r3, r7, #12
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	60da      	str	r2, [r3, #12]
 800195a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800195c:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <SystemClock_Config+0xd0>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4a29      	ldr	r2, [pc, #164]	; (8001a08 <SystemClock_Config+0xd0>)
 8001962:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001966:	6413      	str	r3, [r2, #64]	; 0x40
 8001968:	4b27      	ldr	r3, [pc, #156]	; (8001a08 <SystemClock_Config+0xd0>)
 800196a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <SystemClock_Config+0xd4>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <SystemClock_Config+0xd4>)
 800197a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800197e:	6013      	str	r3, [r2, #0]
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <SystemClock_Config+0xd4>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001988:	607b      	str	r3, [r7, #4]
 800198a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800198c:	2301      	movs	r3, #1
 800198e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001990:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001996:	2302      	movs	r3, #2
 8001998:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800199a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800199e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019a0:	2304      	movs	r3, #4
 80019a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80019a4:	23d8      	movs	r3, #216	; 0xd8
 80019a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019a8:	2302      	movs	r3, #2
 80019aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80019ac:	2302      	movs	r3, #2
 80019ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 f8b1 	bl	8003b1c <HAL_RCC_OscConfig>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80019c0:	f000 fa90 	bl	8001ee4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80019c4:	f002 f85a 	bl	8003a7c <HAL_PWREx_EnableOverDrive>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80019ce:	f000 fa89 	bl	8001ee4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019d2:	230f      	movs	r3, #15
 80019d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019d6:	2302      	movs	r3, #2
 80019d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80019de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80019e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80019e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80019ea:	f107 030c 	add.w	r3, r7, #12
 80019ee:	2107      	movs	r1, #7
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fb37 	bl	8004064 <HAL_RCC_ClockConfig>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80019fc:	f000 fa72 	bl	8001ee4 <Error_Handler>
  }
}
 8001a00:	bf00      	nop
 8001a02:	3750      	adds	r7, #80	; 0x50
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40007000 	.word	0x40007000

08001a10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <MX_CAN1_Init+0x68>)
 8001a18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001a1a:	4b16      	ldr	r3, [pc, #88]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a1c:	221b      	movs	r2, #27
 8001a1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001a20:	4b14      	ldr	r3, [pc, #80]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001a26:	4b13      	ldr	r3, [pc, #76]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001a2c:	4b11      	ldr	r3, [pc, #68]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a32:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001a34:	4b0f      	ldr	r3, [pc, #60]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001a3a:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a42:	2201      	movs	r2, #1
 8001a44:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001a46:	4b0b      	ldr	r3, [pc, #44]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001a4c:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001a52:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001a5e:	4805      	ldr	r0, [pc, #20]	; (8001a74 <MX_CAN1_Init+0x64>)
 8001a60:	f000 fdd8 	bl	8002614 <HAL_CAN_Init>
 8001a64:	4603      	mov	r3, r0
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d001      	beq.n	8001a6e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001a6a:	f000 fa3b 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001a6e:	bf00      	nop
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	200000ac 	.word	0x200000ac
 8001a78:	40006400 	.word	0x40006400

08001a7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	; 0x38
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 031c 	add.w	r3, r7, #28
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]
 8001aaa:	615a      	str	r2, [r3, #20]
 8001aac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001ab4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001ab6:	4b2c      	ldr	r3, [pc, #176]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001abc:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 843-1;
 8001ac2:	4b29      	ldr	r3, [pc, #164]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001ac4:	f240 324a 	movw	r2, #842	; 0x34a
 8001ac8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aca:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ad0:	4b25      	ldr	r3, [pc, #148]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ad6:	4824      	ldr	r0, [pc, #144]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001ad8:	f003 f8da 	bl	8004c90 <HAL_TIM_Base_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001ae2:	f000 f9ff 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001aea:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001aec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001af0:	4619      	mov	r1, r3
 8001af2:	481d      	ldr	r0, [pc, #116]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001af4:	f003 fc30 	bl	8005358 <HAL_TIM_ConfigClockSource>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001afe:	f000 f9f1 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001b02:	4819      	ldr	r0, [pc, #100]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001b04:	f003 f994 	bl	8004e30 <HAL_TIM_PWM_Init>
 8001b08:	4603      	mov	r3, r0
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d001      	beq.n	8001b12 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b0e:	f000 f9e9 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b12:	2300      	movs	r3, #0
 8001b14:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b16:	2300      	movs	r3, #0
 8001b18:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b1a:	f107 031c 	add.w	r3, r7, #28
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4811      	ldr	r0, [pc, #68]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001b22:	f004 f8a3 	bl	8005c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b2c:	f000 f9da 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b30:	2360      	movs	r3, #96	; 0x60
 8001b32:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001b34:	f241 3387 	movw	r3, #4999	; 0x1387
 8001b38:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b42:	463b      	mov	r3, r7
 8001b44:	2200      	movs	r2, #0
 8001b46:	4619      	mov	r1, r3
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001b4a:	f003 faf1 	bl	8005130 <HAL_TIM_PWM_ConfigChannel>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001b54:	f000 f9c6 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001b58:	4803      	ldr	r0, [pc, #12]	; (8001b68 <MX_TIM2_Init+0xec>)
 8001b5a:	f000 fb83 	bl	8002264 <HAL_TIM_MspPostInit>

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	; 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200000d4 	.word	0x200000d4

08001b6c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b084      	sub	sp, #16
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b72:	1d3b      	adds	r3, r7, #4
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b7e:	4a15      	ldr	r2, [pc, #84]	; (8001bd4 <MX_TIM6_Init+0x68>)
 8001b80:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8001b82:	4b13      	ldr	r3, [pc, #76]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b84:	226b      	movs	r2, #107	; 0x6b
 8001b86:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001b8e:	4b10      	ldr	r3, [pc, #64]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b90:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b94:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001b9c:	480c      	ldr	r0, [pc, #48]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001b9e:	f003 f877 	bl	8004c90 <HAL_TIM_Base_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ba8:	f000 f99c 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4805      	ldr	r0, [pc, #20]	; (8001bd0 <MX_TIM6_Init+0x64>)
 8001bba:	f004 f857 	bl	8005c6c <HAL_TIMEx_MasterConfigSynchronization>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001bc4:	f000 f98e 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001bc8:	bf00      	nop
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	20000120 	.word	0x20000120
 8001bd4:	40001000 	.word	0x40001000

08001bd8 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <MX_UART8_Init+0x58>)
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <MX_UART8_Init+0x5c>)
 8001be0:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <MX_UART8_Init+0x58>)
 8001be4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001be8:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_UART8_Init+0x58>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_UART8_Init+0x58>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_UART8_Init+0x58>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_UART8_Init+0x58>)
 8001bfe:	220c      	movs	r2, #12
 8001c00:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_UART8_Init+0x58>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_UART8_Init+0x58>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_UART8_Init+0x58>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_UART8_Init+0x58>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_UART8_Init+0x58>)
 8001c1c:	f004 f8d2 	bl	8005dc4 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001c26:	f000 f95d 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	2000016c 	.word	0x2000016c
 8001c34:	40007c00 	.word	0x40007c00

08001c38 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c3c:	4b14      	ldr	r3, [pc, #80]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c3e:	4a15      	ldr	r2, [pc, #84]	; (8001c94 <MX_USART1_UART_Init+0x5c>)
 8001c40:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c42:	4b13      	ldr	r3, [pc, #76]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c48:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c4a:	4b11      	ldr	r3, [pc, #68]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c50:	4b0f      	ldr	r3, [pc, #60]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c56:	4b0e      	ldr	r3, [pc, #56]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c5e:	220c      	movs	r2, #12
 8001c60:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c62:	4b0b      	ldr	r3, [pc, #44]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c6e:	4b08      	ldr	r3, [pc, #32]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c7a:	4805      	ldr	r0, [pc, #20]	; (8001c90 <MX_USART1_UART_Init+0x58>)
 8001c7c:	f004 f8a2 	bl	8005dc4 <HAL_UART_Init>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001c86:	f000 f92d 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c8a:	bf00      	nop
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	200001f0 	.word	0x200001f0
 8001c94:	40011000 	.word	0x40011000

08001c98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b08c      	sub	sp, #48	; 0x30
 8001c9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c9e:	f107 031c 	add.w	r3, r7, #28
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	605a      	str	r2, [r3, #4]
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	60da      	str	r2, [r3, #12]
 8001cac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cae:	4b86      	ldr	r3, [pc, #536]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	4a85      	ldr	r2, [pc, #532]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cb4:	f043 0320 	orr.w	r3, r3, #32
 8001cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cc6:	4b80      	ldr	r3, [pc, #512]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a7f      	ldr	r2, [pc, #508]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b7d      	ldr	r3, [pc, #500]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cde:	4b7a      	ldr	r3, [pc, #488]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a79      	ldr	r2, [pc, #484]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001ce4:	f043 0301 	orr.w	r3, r3, #1
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b77      	ldr	r3, [pc, #476]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0301 	and.w	r3, r3, #1
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cf6:	4b74      	ldr	r3, [pc, #464]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	4a73      	ldr	r2, [pc, #460]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001cfc:	f043 0310 	orr.w	r3, r3, #16
 8001d00:	6313      	str	r3, [r2, #48]	; 0x30
 8001d02:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	60fb      	str	r3, [r7, #12]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0e:	4b6e      	ldr	r3, [pc, #440]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	4a6d      	ldr	r2, [pc, #436]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d14:	f043 0302 	orr.w	r3, r3, #2
 8001d18:	6313      	str	r3, [r2, #48]	; 0x30
 8001d1a:	4b6b      	ldr	r3, [pc, #428]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1e:	f003 0302 	and.w	r3, r3, #2
 8001d22:	60bb      	str	r3, [r7, #8]
 8001d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d26:	4b68      	ldr	r3, [pc, #416]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d2a:	4a67      	ldr	r2, [pc, #412]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d2c:	f043 0308 	orr.w	r3, r3, #8
 8001d30:	6313      	str	r3, [r2, #48]	; 0x30
 8001d32:	4b65      	ldr	r3, [pc, #404]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	f003 0308 	and.w	r3, r3, #8
 8001d3a:	607b      	str	r3, [r7, #4]
 8001d3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d3e:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	4a61      	ldr	r2, [pc, #388]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d44:	f043 0304 	orr.w	r3, r3, #4
 8001d48:	6313      	str	r3, [r2, #48]	; 0x30
 8001d4a:	4b5f      	ldr	r3, [pc, #380]	; (8001ec8 <MX_GPIO_Init+0x230>)
 8001d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4e:	f003 0304 	and.w	r3, r3, #4
 8001d52:	603b      	str	r3, [r7, #0]
 8001d54:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 8001d56:	2200      	movs	r2, #0
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	485c      	ldr	r0, [pc, #368]	; (8001ecc <MX_GPIO_Init+0x234>)
 8001d5c:	f001 fe42 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8001d66:	485a      	ldr	r0, [pc, #360]	; (8001ed0 <MX_GPIO_Init+0x238>)
 8001d68:	f001 fe3c 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	f44f 7190 	mov.w	r1, #288	; 0x120
 8001d72:	4858      	ldr	r0, [pc, #352]	; (8001ed4 <MX_GPIO_Init+0x23c>)
 8001d74:	f001 fe36 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8001d7e:	4856      	ldr	r0, [pc, #344]	; (8001ed8 <MX_GPIO_Init+0x240>)
 8001d80:	f001 fe30 	bl	80039e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d84:	2380      	movs	r3, #128	; 0x80
 8001d86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d94:	f107 031c 	add.w	r3, r7, #28
 8001d98:	4619      	mov	r1, r3
 8001d9a:	484c      	ldr	r0, [pc, #304]	; (8001ecc <MX_GPIO_Init+0x234>)
 8001d9c:	f001 fc76 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001da0:	231e      	movs	r3, #30
 8001da2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da4:	2303      	movs	r3, #3
 8001da6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	4619      	mov	r1, r3
 8001db2:	484a      	ldr	r0, [pc, #296]	; (8001edc <MX_GPIO_Init+0x244>)
 8001db4:	f001 fc6a 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001dc6:	f107 031c 	add.w	r3, r7, #28
 8001dca:	4619      	mov	r1, r3
 8001dcc:	4844      	ldr	r0, [pc, #272]	; (8001ee0 <MX_GPIO_Init+0x248>)
 8001dce:	f001 fc5d 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8001dd2:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8001dd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de0:	2300      	movs	r3, #0
 8001de2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de4:	f107 031c 	add.w	r3, r7, #28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4839      	ldr	r0, [pc, #228]	; (8001ed0 <MX_GPIO_Init+0x238>)
 8001dec:	f001 fc4e 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8001df0:	f44f 7390 	mov.w	r3, #288	; 0x120
 8001df4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df6:	2301      	movs	r3, #1
 8001df8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 031c 	add.w	r3, r7, #28
 8001e06:	4619      	mov	r1, r3
 8001e08:	4832      	ldr	r0, [pc, #200]	; (8001ed4 <MX_GPIO_Init+0x23c>)
 8001e0a:	f001 fc3f 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8001e0e:	f44f 7301 	mov.w	r3, #516	; 0x204
 8001e12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e14:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	482b      	ldr	r0, [pc, #172]	; (8001ed4 <MX_GPIO_Init+0x23c>)
 8001e26:	f001 fc31 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e2a:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e30:	2302      	movs	r3, #2
 8001e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e34:	2300      	movs	r3, #0
 8001e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4823      	ldr	r0, [pc, #140]	; (8001ed4 <MX_GPIO_Init+0x23c>)
 8001e48:	f001 fc20 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 8001e4c:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8001e50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e52:	2301      	movs	r3, #1
 8001e54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e56:	2300      	movs	r3, #0
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e5e:	f107 031c 	add.w	r3, r7, #28
 8001e62:	4619      	mov	r1, r3
 8001e64:	481c      	ldr	r0, [pc, #112]	; (8001ed8 <MX_GPIO_Init+0x240>)
 8001e66:	f001 fc11 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 8001e6a:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e70:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4815      	ldr	r0, [pc, #84]	; (8001ed8 <MX_GPIO_Init+0x240>)
 8001e82:	f001 fc03 	bl	800368c <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 8001e86:	2340      	movs	r3, #64	; 0x40
 8001e88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e8a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 8001e94:	f107 031c 	add.w	r3, r7, #28
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480e      	ldr	r0, [pc, #56]	; (8001ed4 <MX_GPIO_Init+0x23c>)
 8001e9c:	f001 fbf6 	bl	800368c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	2100      	movs	r1, #0
 8001ea4:	2017      	movs	r0, #23
 8001ea6:	f001 fb28 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001eaa:	2017      	movs	r0, #23
 8001eac:	f001 fb41 	bl	8003532 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	2028      	movs	r0, #40	; 0x28
 8001eb6:	f001 fb20 	bl	80034fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001eba:	2028      	movs	r0, #40	; 0x28
 8001ebc:	f001 fb39 	bl	8003532 <HAL_NVIC_EnableIRQ>

}
 8001ec0:	bf00      	nop
 8001ec2:	3730      	adds	r7, #48	; 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40023800 	.word	0x40023800
 8001ecc:	40021400 	.word	0x40021400
 8001ed0:	40020400 	.word	0x40020400
 8001ed4:	40020c00 	.word	0x40020c00
 8001ed8:	40020800 	.word	0x40020800
 8001edc:	40020000 	.word	0x40020000
 8001ee0:	40021000 	.word	0x40021000

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>
	...

08001ef0 <enable>:
    velocityMode();
    synchronousMode();
}

void enable()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 8001ef6:	4b2d      	ldr	r3, [pc, #180]	; (8001fac <enable+0xbc>)
 8001ef8:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 8001efa:	2300      	movs	r3, #0
 8001efc:	617b      	str	r3, [r7, #20]
 8001efe:	e04d      	b.n	8001f9c <enable+0xac>
    {
        int index = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	1c5a      	adds	r2, r3, #1
 8001f08:	613a      	str	r2, [r7, #16]
 8001f0a:	3318      	adds	r3, #24
 8001f0c:	443b      	add	r3, r7
 8001f0e:	222b      	movs	r2, #43	; 0x2b
 8001f10:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1c5a      	adds	r2, r3, #1
 8001f18:	613a      	str	r2, [r7, #16]
 8001f1a:	3318      	adds	r3, #24
 8001f1c:	443b      	add	r3, r7
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	1c5a      	adds	r2, r3, #1
 8001f28:	613a      	str	r2, [r7, #16]
 8001f2a:	3318      	adds	r3, #24
 8001f2c:	443b      	add	r3, r7
 8001f2e:	2260      	movs	r2, #96	; 0x60
 8001f30:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	1c5a      	adds	r2, r3, #1
 8001f38:	613a      	str	r2, [r7, #16]
 8001f3a:	3318      	adds	r3, #24
 8001f3c:	443b      	add	r3, r7
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	613a      	str	r2, [r7, #16]
 8001f4a:	1d39      	adds	r1, r7, #4
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	440a      	add	r2, r1
 8001f50:	7812      	ldrb	r2, [r2, #0]
 8001f52:	3318      	adds	r3, #24
 8001f54:	443b      	add	r3, r7
 8001f56:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	613a      	str	r2, [r7, #16]
 8001f60:	3318      	adds	r3, #24
 8001f62:	443b      	add	r3, r7
 8001f64:	2200      	movs	r2, #0
 8001f66:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1c5a      	adds	r2, r3, #1
 8001f6e:	613a      	str	r2, [r7, #16]
 8001f70:	3318      	adds	r3, #24
 8001f72:	443b      	add	r3, r7
 8001f74:	2200      	movs	r2, #0
 8001f76:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8001f7a:	f107 0208 	add.w	r2, r7, #8
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	4413      	add	r3, r2
 8001f82:	2200      	movs	r2, #0
 8001f84:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8001f86:	f107 0108 	add.w	r1, r7, #8
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2208      	movs	r2, #8
 8001f8e:	f240 6001 	movw	r0, #1537	; 0x601
 8001f92:	f7ff fc5d 	bl	8001850 <sendCan>
    for(int i =0;i<4;i++)
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3301      	adds	r3, #1
 8001f9a:	617b      	str	r3, [r7, #20]
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	2b03      	cmp	r3, #3
 8001fa0:	ddae      	ble.n	8001f00 <enable+0x10>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
    }
}
 8001fa2:	bf00      	nop
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	0f070600 	.word	0x0f070600

08001fb0 <disable>:

void disable()
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	1c5a      	adds	r2, r3, #1
 8001fbe:	60fa      	str	r2, [r7, #12]
 8001fc0:	3310      	adds	r3, #16
 8001fc2:	443b      	add	r3, r7
 8001fc4:	222b      	movs	r2, #43	; 0x2b
 8001fc6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	1c5a      	adds	r2, r3, #1
 8001fce:	60fa      	str	r2, [r7, #12]
 8001fd0:	3310      	adds	r3, #16
 8001fd2:	443b      	add	r3, r7
 8001fd4:	2240      	movs	r2, #64	; 0x40
 8001fd6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	1c5a      	adds	r2, r3, #1
 8001fde:	60fa      	str	r2, [r7, #12]
 8001fe0:	3310      	adds	r3, #16
 8001fe2:	443b      	add	r3, r7
 8001fe4:	2260      	movs	r2, #96	; 0x60
 8001fe6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	1c5a      	adds	r2, r3, #1
 8001fee:	60fa      	str	r2, [r7, #12]
 8001ff0:	3310      	adds	r3, #16
 8001ff2:	443b      	add	r3, r7
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1c5a      	adds	r2, r3, #1
 8001ffe:	60fa      	str	r2, [r7, #12]
 8002000:	3310      	adds	r3, #16
 8002002:	443b      	add	r3, r7
 8002004:	2200      	movs	r2, #0
 8002006:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60fa      	str	r2, [r7, #12]
 8002010:	3310      	adds	r3, #16
 8002012:	443b      	add	r3, r7
 8002014:	2200      	movs	r2, #0
 8002016:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	1c5a      	adds	r2, r3, #1
 800201e:	60fa      	str	r2, [r7, #12]
 8002020:	3310      	adds	r3, #16
 8002022:	443b      	add	r3, r7
 8002024:	2200      	movs	r2, #0
 8002026:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800202a:	1d3a      	adds	r2, r7, #4
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	4413      	add	r3, r2
 8002030:	2200      	movs	r2, #0
 8002032:	701a      	strb	r2, [r3, #0]
    index = 0;
 8002034:	2300      	movs	r3, #0
 8002036:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002038:	1d39      	adds	r1, r7, #4
 800203a:	2300      	movs	r3, #0
 800203c:	2208      	movs	r2, #8
 800203e:	f240 6001 	movw	r0, #1537	; 0x601
 8002042:	f7ff fc05 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <control>:
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}

void control(int16_t lrpm,int16_t rrpm)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b086      	sub	sp, #24
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	460a      	mov	r2, r1
 8002058:	80fb      	strh	r3, [r7, #6]
 800205a:	4613      	mov	r3, r2
 800205c:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	425b      	negs	r3, r3
 8002062:	b29b      	uxth	r3, r3
 8002064:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	1c5a      	adds	r2, r3, #1
 800206e:	617a      	str	r2, [r7, #20]
 8002070:	3318      	adds	r3, #24
 8002072:	443b      	add	r3, r7
 8002074:	2223      	movs	r2, #35	; 0x23
 8002076:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	1c5a      	adds	r2, r3, #1
 800207e:	617a      	str	r2, [r7, #20]
 8002080:	3318      	adds	r3, #24
 8002082:	443b      	add	r3, r7
 8002084:	22ff      	movs	r2, #255	; 0xff
 8002086:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	1c5a      	adds	r2, r3, #1
 800208e:	617a      	str	r2, [r7, #20]
 8002090:	3318      	adds	r3, #24
 8002092:	443b      	add	r3, r7
 8002094:	2260      	movs	r2, #96	; 0x60
 8002096:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	1c5a      	adds	r2, r3, #1
 800209e:	617a      	str	r2, [r7, #20]
 80020a0:	3318      	adds	r3, #24
 80020a2:	443b      	add	r3, r7
 80020a4:	2203      	movs	r2, #3
 80020a6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 80020aa:	697b      	ldr	r3, [r7, #20]
 80020ac:	1c5a      	adds	r2, r3, #1
 80020ae:	617a      	str	r2, [r7, #20]
 80020b0:	88fa      	ldrh	r2, [r7, #6]
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	3318      	adds	r3, #24
 80020b6:	443b      	add	r3, r7
 80020b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 80020bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80020c0:	121b      	asrs	r3, r3, #8
 80020c2:	b219      	sxth	r1, r3
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	617a      	str	r2, [r7, #20]
 80020ca:	b2ca      	uxtb	r2, r1
 80020cc:	3318      	adds	r3, #24
 80020ce:	443b      	add	r3, r7
 80020d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	1c5a      	adds	r2, r3, #1
 80020d8:	617a      	str	r2, [r7, #20]
 80020da:	88ba      	ldrh	r2, [r7, #4]
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	3318      	adds	r3, #24
 80020e0:	443b      	add	r3, r7
 80020e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 80020e6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80020ea:	121b      	asrs	r3, r3, #8
 80020ec:	b21b      	sxth	r3, r3
 80020ee:	b2d9      	uxtb	r1, r3
 80020f0:	f107 020c 	add.w	r2, r7, #12
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	4413      	add	r3, r2
 80020f8:	460a      	mov	r2, r1
 80020fa:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80020fc:	f107 010c 	add.w	r1, r7, #12
 8002100:	2300      	movs	r3, #0
 8002102:	2208      	movs	r2, #8
 8002104:	f240 6001 	movw	r0, #1537	; 0x601
 8002108:	f7ff fba2 	bl	8001850 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800210c:	bf00      	nop
 800210e:	3718      	adds	r7, #24
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}

08002114 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800211a:	4b0f      	ldr	r3, [pc, #60]	; (8002158 <HAL_MspInit+0x44>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211e:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <HAL_MspInit+0x44>)
 8002120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002124:	6413      	str	r3, [r2, #64]	; 0x40
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_MspInit+0x44>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_MspInit+0x44>)
 8002134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002136:	4a08      	ldr	r2, [pc, #32]	; (8002158 <HAL_MspInit+0x44>)
 8002138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800213c:	6453      	str	r3, [r2, #68]	; 0x44
 800213e:	4b06      	ldr	r3, [pc, #24]	; (8002158 <HAL_MspInit+0x44>)
 8002140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002146:	603b      	str	r3, [r7, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800214a:	bf00      	nop
 800214c:	370c      	adds	r7, #12
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	2200      	movs	r2, #0
 800216a:	601a      	str	r2, [r3, #0]
 800216c:	605a      	str	r2, [r3, #4]
 800216e:	609a      	str	r2, [r3, #8]
 8002170:	60da      	str	r2, [r3, #12]
 8002172:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_CAN_MspInit+0x8c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d12f      	bne.n	80021de <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800217e:	4b1b      	ldr	r3, [pc, #108]	; (80021ec <HAL_CAN_MspInit+0x90>)
 8002180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002182:	4a1a      	ldr	r2, [pc, #104]	; (80021ec <HAL_CAN_MspInit+0x90>)
 8002184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002188:	6413      	str	r3, [r2, #64]	; 0x40
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <HAL_CAN_MspInit+0x90>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002196:	4b15      	ldr	r3, [pc, #84]	; (80021ec <HAL_CAN_MspInit+0x90>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a14      	ldr	r2, [pc, #80]	; (80021ec <HAL_CAN_MspInit+0x90>)
 800219c:	f043 0308 	orr.w	r3, r3, #8
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b12      	ldr	r3, [pc, #72]	; (80021ec <HAL_CAN_MspInit+0x90>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0308 	and.w	r3, r3, #8
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ae:	2303      	movs	r3, #3
 80021b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b2:	2302      	movs	r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ba:	2303      	movs	r3, #3
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80021be:	2309      	movs	r3, #9
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c2:	f107 0314 	add.w	r3, r7, #20
 80021c6:	4619      	mov	r1, r3
 80021c8:	4809      	ldr	r0, [pc, #36]	; (80021f0 <HAL_CAN_MspInit+0x94>)
 80021ca:	f001 fa5f 	bl	800368c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2014      	movs	r0, #20
 80021d4:	f001 f991 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80021d8:	2014      	movs	r0, #20
 80021da:	f001 f9aa 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	; 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40006400 	.word	0x40006400
 80021ec:	40023800 	.word	0x40023800
 80021f0:	40020c00 	.word	0x40020c00

080021f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d10c      	bne.n	8002220 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002206:	4b15      	ldr	r3, [pc, #84]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	4a14      	ldr	r2, [pc, #80]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6413      	str	r3, [r2, #64]	; 0x40
 8002212:	4b12      	ldr	r3, [pc, #72]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 8002214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800221e:	e018      	b.n	8002252 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a0e      	ldr	r2, [pc, #56]	; (8002260 <HAL_TIM_Base_MspInit+0x6c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d113      	bne.n	8002252 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800222a:	4b0c      	ldr	r3, [pc, #48]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	4a0b      	ldr	r2, [pc, #44]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 8002230:	f043 0310 	orr.w	r3, r3, #16
 8002234:	6413      	str	r3, [r2, #64]	; 0x40
 8002236:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_TIM_Base_MspInit+0x68>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f003 0310 	and.w	r3, r3, #16
 800223e:	60bb      	str	r3, [r7, #8]
 8002240:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	2036      	movs	r0, #54	; 0x36
 8002248:	f001 f957 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800224c:	2036      	movs	r0, #54	; 0x36
 800224e:	f001 f970 	bl	8003532 <HAL_NVIC_EnableIRQ>
}
 8002252:	bf00      	nop
 8002254:	3710      	adds	r7, #16
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	40023800 	.word	0x40023800
 8002260:	40001000 	.word	0x40001000

08002264 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b088      	sub	sp, #32
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800226c:	f107 030c 	add.w	r3, r7, #12
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]
 8002274:	605a      	str	r2, [r3, #4]
 8002276:	609a      	str	r2, [r3, #8]
 8002278:	60da      	str	r2, [r3, #12]
 800227a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002284:	d11b      	bne.n	80022be <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <HAL_TIM_MspPostInit+0x64>)
 8002288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228a:	4a0f      	ldr	r2, [pc, #60]	; (80022c8 <HAL_TIM_MspPostInit+0x64>)
 800228c:	f043 0301 	orr.w	r3, r3, #1
 8002290:	6313      	str	r3, [r2, #48]	; 0x30
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_TIM_MspPostInit+0x64>)
 8002294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002296:	f003 0301 	and.w	r3, r3, #1
 800229a:	60bb      	str	r3, [r7, #8]
 800229c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800229e:	2320      	movs	r3, #32
 80022a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80022ae:	2301      	movs	r3, #1
 80022b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b2:	f107 030c 	add.w	r3, r7, #12
 80022b6:	4619      	mov	r1, r3
 80022b8:	4804      	ldr	r0, [pc, #16]	; (80022cc <HAL_TIM_MspPostInit+0x68>)
 80022ba:	f001 f9e7 	bl	800368c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80022be:	bf00      	nop
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023800 	.word	0x40023800
 80022cc:	40020000 	.word	0x40020000

080022d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b0ac      	sub	sp, #176	; 0xb0
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022dc:	2200      	movs	r2, #0
 80022de:	601a      	str	r2, [r3, #0]
 80022e0:	605a      	str	r2, [r3, #4]
 80022e2:	609a      	str	r2, [r3, #8]
 80022e4:	60da      	str	r2, [r3, #12]
 80022e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e8:	f107 0318 	add.w	r3, r7, #24
 80022ec:	2284      	movs	r2, #132	; 0x84
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f004 fd63 	bl	8006dbc <memset>
  if(huart->Instance==UART8)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a46      	ldr	r2, [pc, #280]	; (8002414 <HAL_UART_MspInit+0x144>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d144      	bne.n	800238a <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002300:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002304:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002306:	2300      	movs	r3, #0
 8002308:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800230a:	f107 0318 	add.w	r3, r7, #24
 800230e:	4618      	mov	r0, r3
 8002310:	f002 f8ce 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800231a:	f7ff fde3 	bl	8001ee4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 800231e:	4b3e      	ldr	r3, [pc, #248]	; (8002418 <HAL_UART_MspInit+0x148>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a3d      	ldr	r2, [pc, #244]	; (8002418 <HAL_UART_MspInit+0x148>)
 8002324:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_UART_MspInit+0x148>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002332:	617b      	str	r3, [r7, #20]
 8002334:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_UART_MspInit+0x148>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4a37      	ldr	r2, [pc, #220]	; (8002418 <HAL_UART_MspInit+0x148>)
 800233c:	f043 0310 	orr.w	r3, r3, #16
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4b35      	ldr	r3, [pc, #212]	; (8002418 <HAL_UART_MspInit+0x148>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0310 	and.w	r3, r3, #16
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800234e:	2303      	movs	r3, #3
 8002350:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002354:	2302      	movs	r3, #2
 8002356:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002360:	2303      	movs	r3, #3
 8002362:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002366:	2308      	movs	r3, #8
 8002368:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800236c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002370:	4619      	mov	r1, r3
 8002372:	482a      	ldr	r0, [pc, #168]	; (800241c <HAL_UART_MspInit+0x14c>)
 8002374:	f001 f98a 	bl	800368c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8002378:	2200      	movs	r2, #0
 800237a:	2100      	movs	r1, #0
 800237c:	2053      	movs	r0, #83	; 0x53
 800237e:	f001 f8bc 	bl	80034fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002382:	2053      	movs	r0, #83	; 0x53
 8002384:	f001 f8d5 	bl	8003532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002388:	e03f      	b.n	800240a <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a24      	ldr	r2, [pc, #144]	; (8002420 <HAL_UART_MspInit+0x150>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d13a      	bne.n	800240a <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002394:	2340      	movs	r3, #64	; 0x40
 8002396:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002398:	2300      	movs	r3, #0
 800239a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800239c:	f107 0318 	add.w	r3, r7, #24
 80023a0:	4618      	mov	r0, r3
 80023a2:	f002 f885 	bl	80044b0 <HAL_RCCEx_PeriphCLKConfig>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80023ac:	f7ff fd9a 	bl	8001ee4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	4a18      	ldr	r2, [pc, #96]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023b6:	f043 0310 	orr.w	r3, r3, #16
 80023ba:	6453      	str	r3, [r2, #68]	; 0x44
 80023bc:	4b16      	ldr	r3, [pc, #88]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	f003 0310 	and.w	r3, r3, #16
 80023c4:	60fb      	str	r3, [r7, #12]
 80023c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023ce:	f043 0302 	orr.w	r3, r3, #2
 80023d2:	6313      	str	r3, [r2, #48]	; 0x30
 80023d4:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_UART_MspInit+0x148>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	60bb      	str	r3, [r7, #8]
 80023de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023e0:	23c0      	movs	r3, #192	; 0xc0
 80023e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e6:	2302      	movs	r3, #2
 80023e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023f2:	2303      	movs	r3, #3
 80023f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023f8:	2307      	movs	r3, #7
 80023fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002402:	4619      	mov	r1, r3
 8002404:	4807      	ldr	r0, [pc, #28]	; (8002424 <HAL_UART_MspInit+0x154>)
 8002406:	f001 f941 	bl	800368c <HAL_GPIO_Init>
}
 800240a:	bf00      	nop
 800240c:	37b0      	adds	r7, #176	; 0xb0
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40007c00 	.word	0x40007c00
 8002418:	40023800 	.word	0x40023800
 800241c:	40021000 	.word	0x40021000
 8002420:	40011000 	.word	0x40011000
 8002424:	40020400 	.word	0x40020400

08002428 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800242c:	e7fe      	b.n	800242c <NMI_Handler+0x4>

0800242e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800242e:	b480      	push	{r7}
 8002430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002432:	e7fe      	b.n	8002432 <HardFault_Handler+0x4>

08002434 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002438:	e7fe      	b.n	8002438 <MemManage_Handler+0x4>

0800243a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800243e:	e7fe      	b.n	800243e <BusFault_Handler+0x4>

08002440 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002440:	b480      	push	{r7}
 8002442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002444:	e7fe      	b.n	8002444 <UsageFault_Handler+0x4>

08002446 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002446:	b480      	push	{r7}
 8002448:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800244a:	bf00      	nop
 800244c:	46bd      	mov	sp, r7
 800244e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002452:	4770      	bx	lr

08002454 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002458:	bf00      	nop
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002462:	b480      	push	{r7}
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002466:	bf00      	nop
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002474:	f000 f8ae 	bl	80025d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002478:	bf00      	nop
 800247a:	bd80      	pop	{r7, pc}

0800247c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002480:	4802      	ldr	r0, [pc, #8]	; (800248c <CAN1_RX0_IRQHandler+0x10>)
 8002482:	f000 fd2f 	bl	8002ee4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002486:	bf00      	nop
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	200000ac 	.word	0x200000ac

08002490 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8002494:	2040      	movs	r0, #64	; 0x40
 8002496:	f001 fad9 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800249a:	2080      	movs	r0, #128	; 0x80
 800249c:	f001 fad6 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80024a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80024a4:	f001 fad2 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80024b0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024b4:	f001 faca 	bl	8003a4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80024b8:	bf00      	nop
 80024ba:	bd80      	pop	{r7, pc}

080024bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80024c0:	4802      	ldr	r0, [pc, #8]	; (80024cc <TIM6_DAC_IRQHandler+0x10>)
 80024c2:	f002 fd16 	bl	8004ef2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000120 	.word	0x20000120

080024d0 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <UART8_IRQHandler+0x10>)
 80024d6:	f003 fcc3 	bl	8005e60 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	2000016c 	.word	0x2000016c

080024e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024e8:	4b06      	ldr	r3, [pc, #24]	; (8002504 <SystemInit+0x20>)
 80024ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ee:	4a05      	ldr	r2, [pc, #20]	; (8002504 <SystemInit+0x20>)
 80024f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024f8:	bf00      	nop
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	e000ed00 	.word	0xe000ed00

08002508 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002508:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002540 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800250c:	480d      	ldr	r0, [pc, #52]	; (8002544 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800250e:	490e      	ldr	r1, [pc, #56]	; (8002548 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002510:	4a0e      	ldr	r2, [pc, #56]	; (800254c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002512:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002514:	e002      	b.n	800251c <LoopCopyDataInit>

08002516 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002516:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002518:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800251a:	3304      	adds	r3, #4

0800251c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800251c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800251e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002520:	d3f9      	bcc.n	8002516 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002522:	4a0b      	ldr	r2, [pc, #44]	; (8002550 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002524:	4c0b      	ldr	r4, [pc, #44]	; (8002554 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002526:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002528:	e001      	b.n	800252e <LoopFillZerobss>

0800252a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800252a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800252c:	3204      	adds	r2, #4

0800252e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800252e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002530:	d3fb      	bcc.n	800252a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002532:	f7ff ffd7 	bl	80024e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002536:	f004 fc1d 	bl	8006d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800253a:	f7ff f9e3 	bl	8001904 <main>
  bx  lr    
 800253e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002540:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002544:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002548:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800254c:	08006e14 	.word	0x08006e14
  ldr r2, =_sbss
 8002550:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8002554:	20000278 	.word	0x20000278

08002558 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002558:	e7fe      	b.n	8002558 <ADC_IRQHandler>

0800255a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800255e:	2003      	movs	r0, #3
 8002560:	f000 ffc0 	bl	80034e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002564:	200f      	movs	r0, #15
 8002566:	f000 f805 	bl	8002574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800256a:	f7ff fdd3 	bl	8002114 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800256e:	2300      	movs	r3, #0
}
 8002570:	4618      	mov	r0, r3
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <HAL_InitTick+0x54>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b12      	ldr	r3, [pc, #72]	; (80025cc <HAL_InitTick+0x58>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800258a:	fbb3 f3f1 	udiv	r3, r3, r1
 800258e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002592:	4618      	mov	r0, r3
 8002594:	f000 ffdb 	bl	800354e <HAL_SYSTICK_Config>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e00e      	b.n	80025c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b0f      	cmp	r3, #15
 80025a6:	d80a      	bhi.n	80025be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025a8:	2200      	movs	r2, #0
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295
 80025b0:	f000 ffa3 	bl	80034fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025b4:	4a06      	ldr	r2, [pc, #24]	; (80025d0 <HAL_InitTick+0x5c>)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e000      	b.n	80025c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000008 	.word	0x20000008
 80025d0:	20000004 	.word	0x20000004

080025d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025d8:	4b06      	ldr	r3, [pc, #24]	; (80025f4 <HAL_IncTick+0x20>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	461a      	mov	r2, r3
 80025de:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <HAL_IncTick+0x24>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4413      	add	r3, r2
 80025e4:	4a04      	ldr	r2, [pc, #16]	; (80025f8 <HAL_IncTick+0x24>)
 80025e6:	6013      	str	r3, [r2, #0]
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	20000008 	.word	0x20000008
 80025f8:	20000274 	.word	0x20000274

080025fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_GetTick+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000274 	.word	0x20000274

08002614 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d101      	bne.n	8002626 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e0ed      	b.n	8002802 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 3020 	ldrb.w	r3, [r3, #32]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	d102      	bne.n	8002638 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f7ff fd92 	bl	800215c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f042 0201 	orr.w	r2, r2, #1
 8002646:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002648:	f7ff ffd8 	bl	80025fc <HAL_GetTick>
 800264c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800264e:	e012      	b.n	8002676 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002650:	f7ff ffd4 	bl	80025fc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b0a      	cmp	r3, #10
 800265c:	d90b      	bls.n	8002676 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002662:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2205      	movs	r2, #5
 800266e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e0c5      	b.n	8002802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0e5      	beq.n	8002650 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0202 	bic.w	r2, r2, #2
 8002692:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002694:	f7ff ffb2 	bl	80025fc <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800269a:	e012      	b.n	80026c2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800269c:	f7ff ffae 	bl	80025fc <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b0a      	cmp	r3, #10
 80026a8:	d90b      	bls.n	80026c2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2205      	movs	r2, #5
 80026ba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	e09f      	b.n	8002802 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d1e5      	bne.n	800269c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	7e1b      	ldrb	r3, [r3, #24]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d108      	bne.n	80026ea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026e6:	601a      	str	r2, [r3, #0]
 80026e8:	e007      	b.n	80026fa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	7e5b      	ldrb	r3, [r3, #25]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d108      	bne.n	8002714 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	e007      	b.n	8002724 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002722:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	7e9b      	ldrb	r3, [r3, #26]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d108      	bne.n	800273e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0220 	orr.w	r2, r2, #32
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	e007      	b.n	800274e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0220 	bic.w	r2, r2, #32
 800274c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	7edb      	ldrb	r3, [r3, #27]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d108      	bne.n	8002768 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f022 0210 	bic.w	r2, r2, #16
 8002764:	601a      	str	r2, [r3, #0]
 8002766:	e007      	b.n	8002778 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0210 	orr.w	r2, r2, #16
 8002776:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	7f1b      	ldrb	r3, [r3, #28]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d108      	bne.n	8002792 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0208 	orr.w	r2, r2, #8
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	e007      	b.n	80027a2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0208 	bic.w	r2, r2, #8
 80027a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	7f5b      	ldrb	r3, [r3, #29]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d108      	bne.n	80027bc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0204 	orr.w	r2, r2, #4
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e007      	b.n	80027cc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f022 0204 	bic.w	r2, r2, #4
 80027ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	689a      	ldr	r2, [r3, #8]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	695b      	ldr	r3, [r3, #20]
 80027e0:	ea42 0103 	orr.w	r1, r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	1e5a      	subs	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	430a      	orrs	r2, r1
 80027f0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2200      	movs	r2, #0
 80027f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 800280c:	b480      	push	{r7}
 800280e:	b087      	sub	sp, #28
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002822:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	2b01      	cmp	r3, #1
 8002828:	d003      	beq.n	8002832 <HAL_CAN_ConfigFilter+0x26>
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b02      	cmp	r3, #2
 800282e:	f040 80be 	bne.w	80029ae <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002832:	4b65      	ldr	r3, [pc, #404]	; (80029c8 <HAL_CAN_ConfigFilter+0x1bc>)
 8002834:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800283c:	f043 0201 	orr.w	r2, r3, #1
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800284c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	021b      	lsls	r3, r3, #8
 8002862:	431a      	orrs	r2, r3
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	695b      	ldr	r3, [r3, #20]
 800286e:	f003 031f 	and.w	r3, r3, #31
 8002872:	2201      	movs	r2, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	43db      	mvns	r3, r3
 8002884:	401a      	ands	r2, r3
 8002886:	697b      	ldr	r3, [r7, #20]
 8002888:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d123      	bne.n	80028dc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	43db      	mvns	r3, r3
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028b2:	683a      	ldr	r2, [r7, #0]
 80028b4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80028b6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	3248      	adds	r2, #72	; 0x48
 80028bc:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80028d0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80028d2:	6979      	ldr	r1, [r7, #20]
 80028d4:	3348      	adds	r3, #72	; 0x48
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	440b      	add	r3, r1
 80028da:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d122      	bne.n	800292a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	431a      	orrs	r2, r3
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002904:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	3248      	adds	r2, #72	; 0x48
 800290a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800291e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002920:	6979      	ldr	r1, [r7, #20]
 8002922:	3348      	adds	r3, #72	; 0x48
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	440b      	add	r3, r1
 8002928:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d109      	bne.n	8002946 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	43db      	mvns	r3, r3
 800293c:	401a      	ands	r2, r3
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002944:	e007      	b.n	8002956 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	431a      	orrs	r2, r3
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	43db      	mvns	r3, r3
 8002968:	401a      	ands	r2, r3
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002970:	e007      	b.n	8002982 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	431a      	orrs	r2, r3
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6a1b      	ldr	r3, [r3, #32]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	431a      	orrs	r2, r3
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80029a0:	f023 0201 	bic.w	r2, r3, #1
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80029aa:	2300      	movs	r3, #0
 80029ac:	e006      	b.n	80029bc <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
  }
}
 80029bc:	4618      	mov	r0, r3
 80029be:	371c      	adds	r7, #28
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr
 80029c8:	40006400 	.word	0x40006400

080029cc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029da:	b2db      	uxtb	r3, r3
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d12e      	bne.n	8002a3e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0201 	bic.w	r2, r2, #1
 80029f6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029f8:	f7ff fe00 	bl	80025fc <HAL_GetTick>
 80029fc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80029fe:	e012      	b.n	8002a26 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a00:	f7ff fdfc 	bl	80025fc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b0a      	cmp	r3, #10
 8002a0c:	d90b      	bls.n	8002a26 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2205      	movs	r2, #5
 8002a1e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002a22:	2301      	movs	r3, #1
 8002a24:	e012      	b.n	8002a4c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f003 0301 	and.w	r3, r3, #1
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1e5      	bne.n	8002a00 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e006      	b.n	8002a4c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
  }
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	3710      	adds	r7, #16
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}

08002a54 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b089      	sub	sp, #36	; 0x24
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
 8002a60:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a68:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a72:	7ffb      	ldrb	r3, [r7, #31]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d003      	beq.n	8002a80 <HAL_CAN_AddTxMessage+0x2c>
 8002a78:	7ffb      	ldrb	r3, [r7, #31]
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	f040 80b8 	bne.w	8002bf0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10a      	bne.n	8002aa0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d105      	bne.n	8002aa0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	f000 80a0 	beq.w	8002be0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002aa0:	69bb      	ldr	r3, [r7, #24]
 8002aa2:	0e1b      	lsrs	r3, r3, #24
 8002aa4:	f003 0303 	and.w	r3, r3, #3
 8002aa8:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d907      	bls.n	8002ac0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	e09e      	b.n	8002bfe <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10d      	bne.n	8002aee <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002adc:	68f9      	ldr	r1, [r7, #12]
 8002ade:	6809      	ldr	r1, [r1, #0]
 8002ae0:	431a      	orrs	r2, r3
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	3318      	adds	r3, #24
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	440b      	add	r3, r1
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	e00f      	b.n	8002b0e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002af8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002afe:	68f9      	ldr	r1, [r7, #12]
 8002b00:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002b02:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	3318      	adds	r3, #24
 8002b08:	011b      	lsls	r3, r3, #4
 8002b0a:	440b      	add	r3, r1
 8002b0c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	691a      	ldr	r2, [r3, #16]
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	3318      	adds	r3, #24
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	440b      	add	r3, r1
 8002b1e:	3304      	adds	r3, #4
 8002b20:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	7d1b      	ldrb	r3, [r3, #20]
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d111      	bne.n	8002b4e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	3318      	adds	r3, #24
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	4413      	add	r3, r2
 8002b36:	3304      	adds	r3, #4
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	68fa      	ldr	r2, [r7, #12]
 8002b3c:	6811      	ldr	r1, [r2, #0]
 8002b3e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	3318      	adds	r3, #24
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	440b      	add	r3, r1
 8002b4a:	3304      	adds	r3, #4
 8002b4c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	3307      	adds	r3, #7
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	061a      	lsls	r2, r3, #24
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	3306      	adds	r3, #6
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	041b      	lsls	r3, r3, #16
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	3305      	adds	r3, #5
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	021b      	lsls	r3, r3, #8
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	3204      	adds	r2, #4
 8002b6e:	7812      	ldrb	r2, [r2, #0]
 8002b70:	4610      	mov	r0, r2
 8002b72:	68fa      	ldr	r2, [r7, #12]
 8002b74:	6811      	ldr	r1, [r2, #0]
 8002b76:	ea43 0200 	orr.w	r2, r3, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	011b      	lsls	r3, r3, #4
 8002b7e:	440b      	add	r3, r1
 8002b80:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002b84:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	3303      	adds	r3, #3
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	061a      	lsls	r2, r3, #24
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	3302      	adds	r3, #2
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	041b      	lsls	r3, r3, #16
 8002b96:	431a      	orrs	r2, r3
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	021b      	lsls	r3, r3, #8
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	687a      	ldr	r2, [r7, #4]
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	6811      	ldr	r1, [r2, #0]
 8002bac:	ea43 0200 	orr.w	r2, r3, r0
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	440b      	add	r3, r1
 8002bb6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	3318      	adds	r3, #24
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	4413      	add	r3, r2
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	f043 0201 	orr.w	r2, r3, #1
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	3318      	adds	r3, #24
 8002bd6:	011b      	lsls	r3, r3, #4
 8002bd8:	440b      	add	r3, r1
 8002bda:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	e00e      	b.n	8002bfe <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002bec:	2301      	movs	r3, #1
 8002bee:	e006      	b.n	8002bfe <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
  }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3724      	adds	r7, #36	; 0x24
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c1c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002c1e:	7afb      	ldrb	r3, [r7, #11]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d002      	beq.n	8002c2a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002c24:	7afb      	ldrb	r3, [r7, #11]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d11d      	bne.n	8002c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d002      	beq.n	8002c3e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d002      	beq.n	8002c52 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d002      	beq.n	8002c66 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	3301      	adds	r3, #1
 8002c64:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002c66:	68fb      	ldr	r3, [r7, #12]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3714      	adds	r7, #20
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002c74:	b480      	push	{r7}
 8002c76:	b087      	sub	sp, #28
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	60f8      	str	r0, [r7, #12]
 8002c7c:	60b9      	str	r1, [r7, #8]
 8002c7e:	607a      	str	r2, [r7, #4]
 8002c80:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c88:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c8a:	7dfb      	ldrb	r3, [r7, #23]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d003      	beq.n	8002c98 <HAL_CAN_GetRxMessage+0x24>
 8002c90:	7dfb      	ldrb	r3, [r7, #23]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	f040 80f3 	bne.w	8002e7e <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d10e      	bne.n	8002cbc <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0303 	and.w	r3, r3, #3
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d116      	bne.n	8002cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e0e7      	b.n	8002e8c <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e0d8      	b.n	8002e8c <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	331b      	adds	r3, #27
 8002ce2:	011b      	lsls	r3, r3, #4
 8002ce4:	4413      	add	r3, r2
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0204 	and.w	r2, r3, #4
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10c      	bne.n	8002d12 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	331b      	adds	r3, #27
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	4413      	add	r3, r2
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	0d5b      	lsrs	r3, r3, #21
 8002d08:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e00b      	b.n	8002d2a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	331b      	adds	r3, #27
 8002d1a:	011b      	lsls	r3, r3, #4
 8002d1c:	4413      	add	r3, r2
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	08db      	lsrs	r3, r3, #3
 8002d22:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	331b      	adds	r3, #27
 8002d32:	011b      	lsls	r3, r3, #4
 8002d34:	4413      	add	r3, r2
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0202 	and.w	r2, r3, #2
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681a      	ldr	r2, [r3, #0]
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	331b      	adds	r3, #27
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f003 020f 	and.w	r2, r3, #15
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	331b      	adds	r3, #27
 8002d60:	011b      	lsls	r3, r3, #4
 8002d62:	4413      	add	r3, r2
 8002d64:	3304      	adds	r3, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	0a1b      	lsrs	r3, r3, #8
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	331b      	adds	r3, #27
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	4413      	add	r3, r2
 8002d7c:	3304      	adds	r3, #4
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	4413      	add	r3, r2
 8002da8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	0a1a      	lsrs	r2, r3, #8
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2d2      	uxtb	r2, r2
 8002db6:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	011b      	lsls	r3, r3, #4
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	0c1a      	lsrs	r2, r3, #16
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	3302      	adds	r3, #2
 8002dce:	b2d2      	uxtb	r2, r2
 8002dd0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	68bb      	ldr	r3, [r7, #8]
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	4413      	add	r3, r2
 8002ddc:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	0e1a      	lsrs	r2, r3, #24
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	3303      	adds	r3, #3
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	4413      	add	r3, r2
 8002df6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	3304      	adds	r3, #4
 8002e00:	b2d2      	uxtb	r2, r2
 8002e02:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	4413      	add	r3, r2
 8002e0e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	0a1a      	lsrs	r2, r3, #8
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	3305      	adds	r3, #5
 8002e1a:	b2d2      	uxtb	r2, r2
 8002e1c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	0c1a      	lsrs	r2, r3, #16
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	3306      	adds	r3, #6
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	011b      	lsls	r3, r3, #4
 8002e40:	4413      	add	r3, r2
 8002e42:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e1a      	lsrs	r2, r3, #24
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	3307      	adds	r3, #7
 8002e4e:	b2d2      	uxtb	r2, r2
 8002e50:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d108      	bne.n	8002e6a <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f042 0220 	orr.w	r2, r2, #32
 8002e66:	60da      	str	r2, [r3, #12]
 8002e68:	e007      	b.n	8002e7a <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691a      	ldr	r2, [r3, #16]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f042 0220 	orr.w	r2, r2, #32
 8002e78:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	e006      	b.n	8002e8c <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e82:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
  }
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	371c      	adds	r7, #28
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ea8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002eaa:	7bfb      	ldrb	r3, [r7, #15]
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d002      	beq.n	8002eb6 <HAL_CAN_ActivateNotification+0x1e>
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d109      	bne.n	8002eca <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	6959      	ldr	r1, [r3, #20]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	e006      	b.n	8002ed8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ece:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
  }
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3714      	adds	r7, #20
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08a      	sub	sp, #40	; 0x28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002eec:	2300      	movs	r3, #0
 8002eee:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f003 0301 	and.w	r3, r3, #1
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d07c      	beq.n	8003024 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	f003 0301 	and.w	r3, r3, #1
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d023      	beq.n	8002f7c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 f983 	bl	8003252 <HAL_CAN_TxMailbox0CompleteCallback>
 8002f4c:	e016      	b.n	8002f7c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f5a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f60:	e00c      	b.n	8002f7c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	f003 0308 	and.w	r3, r3, #8
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d004      	beq.n	8002f76 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f72:	627b      	str	r3, [r7, #36]	; 0x24
 8002f74:	e002      	b.n	8002f7c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f989 	bl	800328e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d024      	beq.n	8002fd0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f963 	bl	8003266 <HAL_CAN_TxMailbox1CompleteCallback>
 8002fa0:	e016      	b.n	8002fd0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d004      	beq.n	8002fb6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb4:	e00c      	b.n	8002fd0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d004      	beq.n	8002fca <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e002      	b.n	8002fd0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f969 	bl	80032a2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d024      	beq.n	8003024 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fe2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 f943 	bl	800327a <HAL_CAN_TxMailbox2CompleteCallback>
 8002ff4:	e016      	b.n	8003024 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d004      	beq.n	800300a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
 8003008:	e00c      	b.n	8003024 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d004      	beq.n	800301e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
 800301c:	e002      	b.n	8003024 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f949 	bl	80032b6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003024:	6a3b      	ldr	r3, [r7, #32]
 8003026:	f003 0308 	and.w	r3, r3, #8
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00c      	beq.n	8003048 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f003 0310 	and.w	r3, r3, #16
 8003034:	2b00      	cmp	r3, #0
 8003036:	d007      	beq.n	8003048 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800303e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2210      	movs	r2, #16
 8003046:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003048:	6a3b      	ldr	r3, [r7, #32]
 800304a:	f003 0304 	and.w	r3, r3, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	d00b      	beq.n	800306a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f003 0308 	and.w	r3, r3, #8
 8003058:	2b00      	cmp	r3, #0
 800305a:	d006      	beq.n	800306a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2208      	movs	r2, #8
 8003062:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f930 	bl	80032ca <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800306a:	6a3b      	ldr	r3, [r7, #32]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7fe fc1e 	bl	80018c4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003088:	6a3b      	ldr	r3, [r7, #32]
 800308a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00c      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d007      	beq.n	80030ac <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030a2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	2210      	movs	r2, #16
 80030aa:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00b      	beq.n	80030ce <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d006      	beq.n	80030ce <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2208      	movs	r2, #8
 80030c6:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f912 	bl	80032f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d009      	beq.n	80030ec <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	f003 0303 	and.w	r3, r3, #3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d002      	beq.n	80030ec <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 f8f9 	bl	80032de <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80030ec:	6a3b      	ldr	r3, [r7, #32]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00b      	beq.n	800310e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d006      	beq.n	800310e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	2210      	movs	r2, #16
 8003106:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f000 f8fc 	bl	8003306 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00b      	beq.n	8003130 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003118:	69fb      	ldr	r3, [r7, #28]
 800311a:	f003 0308 	and.w	r3, r3, #8
 800311e:	2b00      	cmp	r3, #0
 8003120:	d006      	beq.n	8003130 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2208      	movs	r2, #8
 8003128:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8f5 	bl	800331a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003130:	6a3b      	ldr	r3, [r7, #32]
 8003132:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d07b      	beq.n	8003232 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b00      	cmp	r3, #0
 8003142:	d072      	beq.n	800322a <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003144:	6a3b      	ldr	r3, [r7, #32]
 8003146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314a:	2b00      	cmp	r3, #0
 800314c:	d008      	beq.n	8003160 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003154:	2b00      	cmp	r3, #0
 8003156:	d003      	beq.n	8003160 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	f043 0301 	orr.w	r3, r3, #1
 800315e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003166:	2b00      	cmp	r3, #0
 8003168:	d008      	beq.n	800317c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003176:	f043 0302 	orr.w	r3, r3, #2
 800317a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003182:	2b00      	cmp	r3, #0
 8003184:	d008      	beq.n	8003198 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800318c:	2b00      	cmp	r3, #0
 800318e:	d003      	beq.n	8003198 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003192:	f043 0304 	orr.w	r3, r3, #4
 8003196:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8003198:	6a3b      	ldr	r3, [r7, #32]
 800319a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d043      	beq.n	800322a <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d03e      	beq.n	800322a <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b2:	2b60      	cmp	r3, #96	; 0x60
 80031b4:	d02b      	beq.n	800320e <HAL_CAN_IRQHandler+0x32a>
 80031b6:	2b60      	cmp	r3, #96	; 0x60
 80031b8:	d82e      	bhi.n	8003218 <HAL_CAN_IRQHandler+0x334>
 80031ba:	2b50      	cmp	r3, #80	; 0x50
 80031bc:	d022      	beq.n	8003204 <HAL_CAN_IRQHandler+0x320>
 80031be:	2b50      	cmp	r3, #80	; 0x50
 80031c0:	d82a      	bhi.n	8003218 <HAL_CAN_IRQHandler+0x334>
 80031c2:	2b40      	cmp	r3, #64	; 0x40
 80031c4:	d019      	beq.n	80031fa <HAL_CAN_IRQHandler+0x316>
 80031c6:	2b40      	cmp	r3, #64	; 0x40
 80031c8:	d826      	bhi.n	8003218 <HAL_CAN_IRQHandler+0x334>
 80031ca:	2b30      	cmp	r3, #48	; 0x30
 80031cc:	d010      	beq.n	80031f0 <HAL_CAN_IRQHandler+0x30c>
 80031ce:	2b30      	cmp	r3, #48	; 0x30
 80031d0:	d822      	bhi.n	8003218 <HAL_CAN_IRQHandler+0x334>
 80031d2:	2b10      	cmp	r3, #16
 80031d4:	d002      	beq.n	80031dc <HAL_CAN_IRQHandler+0x2f8>
 80031d6:	2b20      	cmp	r3, #32
 80031d8:	d005      	beq.n	80031e6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80031da:	e01d      	b.n	8003218 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80031dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031de:	f043 0308 	orr.w	r3, r3, #8
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031e4:	e019      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80031e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e8:	f043 0310 	orr.w	r3, r3, #16
 80031ec:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031ee:	e014      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80031f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031f2:	f043 0320 	orr.w	r3, r3, #32
 80031f6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80031f8:	e00f      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003200:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003202:	e00a      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800320a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800320c:	e005      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800320e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003216:	e000      	b.n	800321a <HAL_CAN_IRQHandler+0x336>
            break;
 8003218:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699a      	ldr	r2, [r3, #24]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003228:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2204      	movs	r2, #4
 8003230:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	2b00      	cmp	r3, #0
 8003236:	d008      	beq.n	800324a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800323c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f872 	bl	800332e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800324a:	bf00      	nop
 800324c:	3728      	adds	r7, #40	; 0x28
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003252:	b480      	push	{r7}
 8003254:	b083      	sub	sp, #12
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800325a:	bf00      	nop
 800325c:	370c      	adds	r7, #12
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr

08003266 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr

0800327a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800327a:	b480      	push	{r7}
 800327c:	b083      	sub	sp, #12
 800327e:	af00      	add	r7, sp, #0
 8003280:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800328e:	b480      	push	{r7}
 8003290:	b083      	sub	sp, #12
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003296:	bf00      	nop
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80032aa:	bf00      	nop
 80032ac:	370c      	adds	r7, #12
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80032be:	bf00      	nop
 80032c0:	370c      	adds	r7, #12
 80032c2:	46bd      	mov	sp, r7
 80032c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c8:	4770      	bx	lr

080032ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr

0800332e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003336:	bf00      	nop
 8003338:	370c      	adds	r7, #12
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
	...

08003344 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003354:	4b0b      	ldr	r3, [pc, #44]	; (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003360:	4013      	ands	r3, r2
 8003362:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <__NVIC_SetPriorityGrouping+0x44>)
 800336e:	4313      	orrs	r3, r2
 8003370:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003372:	4a04      	ldr	r2, [pc, #16]	; (8003384 <__NVIC_SetPriorityGrouping+0x40>)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	60d3      	str	r3, [r2, #12]
}
 8003378:	bf00      	nop
 800337a:	3714      	adds	r7, #20
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr
 8003384:	e000ed00 	.word	0xe000ed00
 8003388:	05fa0000 	.word	0x05fa0000

0800338c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800338c:	b480      	push	{r7}
 800338e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003390:	4b04      	ldr	r3, [pc, #16]	; (80033a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	0a1b      	lsrs	r3, r3, #8
 8003396:	f003 0307 	and.w	r3, r3, #7
}
 800339a:	4618      	mov	r0, r3
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	4603      	mov	r3, r0
 80033b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	db0b      	blt.n	80033d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033ba:	79fb      	ldrb	r3, [r7, #7]
 80033bc:	f003 021f 	and.w	r2, r3, #31
 80033c0:	4907      	ldr	r1, [pc, #28]	; (80033e0 <__NVIC_EnableIRQ+0x38>)
 80033c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c6:	095b      	lsrs	r3, r3, #5
 80033c8:	2001      	movs	r0, #1
 80033ca:	fa00 f202 	lsl.w	r2, r0, r2
 80033ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
 80033de:	bf00      	nop
 80033e0:	e000e100 	.word	0xe000e100

080033e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	4603      	mov	r3, r0
 80033ec:	6039      	str	r1, [r7, #0]
 80033ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	db0a      	blt.n	800340e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	490c      	ldr	r1, [pc, #48]	; (8003430 <__NVIC_SetPriority+0x4c>)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	0112      	lsls	r2, r2, #4
 8003404:	b2d2      	uxtb	r2, r2
 8003406:	440b      	add	r3, r1
 8003408:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800340c:	e00a      	b.n	8003424 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	4908      	ldr	r1, [pc, #32]	; (8003434 <__NVIC_SetPriority+0x50>)
 8003414:	79fb      	ldrb	r3, [r7, #7]
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	3b04      	subs	r3, #4
 800341c:	0112      	lsls	r2, r2, #4
 800341e:	b2d2      	uxtb	r2, r2
 8003420:	440b      	add	r3, r1
 8003422:	761a      	strb	r2, [r3, #24]
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100
 8003434:	e000ed00 	.word	0xe000ed00

08003438 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003438:	b480      	push	{r7}
 800343a:	b089      	sub	sp, #36	; 0x24
 800343c:	af00      	add	r7, sp, #0
 800343e:	60f8      	str	r0, [r7, #12]
 8003440:	60b9      	str	r1, [r7, #8]
 8003442:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	f1c3 0307 	rsb	r3, r3, #7
 8003452:	2b04      	cmp	r3, #4
 8003454:	bf28      	it	cs
 8003456:	2304      	movcs	r3, #4
 8003458:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3304      	adds	r3, #4
 800345e:	2b06      	cmp	r3, #6
 8003460:	d902      	bls.n	8003468 <NVIC_EncodePriority+0x30>
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	3b03      	subs	r3, #3
 8003466:	e000      	b.n	800346a <NVIC_EncodePriority+0x32>
 8003468:	2300      	movs	r3, #0
 800346a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800346c:	f04f 32ff 	mov.w	r2, #4294967295
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	401a      	ands	r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003480:	f04f 31ff 	mov.w	r1, #4294967295
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	fa01 f303 	lsl.w	r3, r1, r3
 800348a:	43d9      	mvns	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	4313      	orrs	r3, r2
         );
}
 8003492:	4618      	mov	r0, r3
 8003494:	3724      	adds	r7, #36	; 0x24
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	3b01      	subs	r3, #1
 80034ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034b0:	d301      	bcc.n	80034b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034b2:	2301      	movs	r3, #1
 80034b4:	e00f      	b.n	80034d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034b6:	4a0a      	ldr	r2, [pc, #40]	; (80034e0 <SysTick_Config+0x40>)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	3b01      	subs	r3, #1
 80034bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034be:	210f      	movs	r1, #15
 80034c0:	f04f 30ff 	mov.w	r0, #4294967295
 80034c4:	f7ff ff8e 	bl	80033e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c8:	4b05      	ldr	r3, [pc, #20]	; (80034e0 <SysTick_Config+0x40>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <SysTick_Config+0x40>)
 80034d0:	2207      	movs	r2, #7
 80034d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	e000e010 	.word	0xe000e010

080034e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b082      	sub	sp, #8
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff ff29 	bl	8003344 <__NVIC_SetPriorityGrouping>
}
 80034f2:	bf00      	nop
 80034f4:	3708      	adds	r7, #8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}

080034fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b086      	sub	sp, #24
 80034fe:	af00      	add	r7, sp, #0
 8003500:	4603      	mov	r3, r0
 8003502:	60b9      	str	r1, [r7, #8]
 8003504:	607a      	str	r2, [r7, #4]
 8003506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800350c:	f7ff ff3e 	bl	800338c <__NVIC_GetPriorityGrouping>
 8003510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	6978      	ldr	r0, [r7, #20]
 8003518:	f7ff ff8e 	bl	8003438 <NVIC_EncodePriority>
 800351c:	4602      	mov	r2, r0
 800351e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ff5d 	bl	80033e4 <__NVIC_SetPriority>
}
 800352a:	bf00      	nop
 800352c:	3718      	adds	r7, #24
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b082      	sub	sp, #8
 8003536:	af00      	add	r7, sp, #0
 8003538:	4603      	mov	r3, r0
 800353a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800353c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003540:	4618      	mov	r0, r3
 8003542:	f7ff ff31 	bl	80033a8 <__NVIC_EnableIRQ>
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b082      	sub	sp, #8
 8003552:	af00      	add	r7, sp, #0
 8003554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f7ff ffa2 	bl	80034a0 <SysTick_Config>
 800355c:	4603      	mov	r3, r0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}

08003566 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b084      	sub	sp, #16
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003572:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003574:	f7ff f842 	bl	80025fc <HAL_GetTick>
 8003578:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003580:	b2db      	uxtb	r3, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d008      	beq.n	8003598 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e052      	b.n	800363e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 0216 	bic.w	r2, r2, #22
 80035a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	695a      	ldr	r2, [r3, #20]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80035b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d103      	bne.n	80035c8 <HAL_DMA_Abort+0x62>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d007      	beq.n	80035d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0208 	bic.w	r2, r2, #8
 80035d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f022 0201 	bic.w	r2, r2, #1
 80035e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035e8:	e013      	b.n	8003612 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80035ea:	f7ff f807 	bl	80025fc <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d90c      	bls.n	8003612 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2203      	movs	r2, #3
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e015      	b.n	800363e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d1e4      	bne.n	80035ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	223f      	movs	r2, #63	; 0x3f
 8003626:	409a      	lsls	r2, r3
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2200      	movs	r2, #0
 8003638:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}

08003646 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003654:	b2db      	uxtb	r3, r3
 8003656:	2b02      	cmp	r3, #2
 8003658:	d004      	beq.n	8003664 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2280      	movs	r2, #128	; 0x80
 800365e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e00c      	b.n	800367e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2205      	movs	r2, #5
 8003668:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0201 	bic.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
	...

0800368c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800368c:	b480      	push	{r7}
 800368e:	b089      	sub	sp, #36	; 0x24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003696:	2300      	movs	r3, #0
 8003698:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80036a2:	2300      	movs	r3, #0
 80036a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80036a6:	2300      	movs	r3, #0
 80036a8:	61fb      	str	r3, [r7, #28]
 80036aa:	e175      	b.n	8003998 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80036ac:	2201      	movs	r2, #1
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	fa02 f303 	lsl.w	r3, r2, r3
 80036b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	4013      	ands	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80036c0:	693a      	ldr	r2, [r7, #16]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	f040 8164 	bne.w	8003992 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f003 0303 	and.w	r3, r3, #3
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d005      	beq.n	80036e2 <HAL_GPIO_Init+0x56>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	f003 0303 	and.w	r3, r3, #3
 80036de:	2b02      	cmp	r3, #2
 80036e0:	d130      	bne.n	8003744 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	689b      	ldr	r3, [r3, #8]
 80036e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80036e8:	69fb      	ldr	r3, [r7, #28]
 80036ea:	005b      	lsls	r3, r3, #1
 80036ec:	2203      	movs	r2, #3
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	43db      	mvns	r3, r3
 80036f4:	69ba      	ldr	r2, [r7, #24]
 80036f6:	4013      	ands	r3, r2
 80036f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	68da      	ldr	r2, [r3, #12]
 80036fe:	69fb      	ldr	r3, [r7, #28]
 8003700:	005b      	lsls	r3, r3, #1
 8003702:	fa02 f303 	lsl.w	r3, r2, r3
 8003706:	69ba      	ldr	r2, [r7, #24]
 8003708:	4313      	orrs	r3, r2
 800370a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003718:	2201      	movs	r2, #1
 800371a:	69fb      	ldr	r3, [r7, #28]
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	69ba      	ldr	r2, [r7, #24]
 8003724:	4013      	ands	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	091b      	lsrs	r3, r3, #4
 800372e:	f003 0201 	and.w	r2, r3, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4313      	orrs	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	69ba      	ldr	r2, [r7, #24]
 8003742:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 0303 	and.w	r3, r3, #3
 800374c:	2b03      	cmp	r3, #3
 800374e:	d017      	beq.n	8003780 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	005b      	lsls	r3, r3, #1
 800375a:	2203      	movs	r2, #3
 800375c:	fa02 f303 	lsl.w	r3, r2, r3
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	fa02 f303 	lsl.w	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	4313      	orrs	r3, r2
 8003778:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	69ba      	ldr	r2, [r7, #24]
 800377e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0303 	and.w	r3, r3, #3
 8003788:	2b02      	cmp	r3, #2
 800378a:	d123      	bne.n	80037d4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	08da      	lsrs	r2, r3, #3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	3208      	adds	r2, #8
 8003794:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	220f      	movs	r2, #15
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f003 0307 	and.w	r3, r3, #7
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	fa02 f303 	lsl.w	r3, r2, r3
 80037c0:	69ba      	ldr	r2, [r7, #24]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	08da      	lsrs	r2, r3, #3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	3208      	adds	r2, #8
 80037ce:	69b9      	ldr	r1, [r7, #24]
 80037d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	685b      	ldr	r3, [r3, #4]
 80037f0:	f003 0203 	and.w	r2, r3, #3
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	005b      	lsls	r3, r3, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	4313      	orrs	r3, r2
 8003800:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80be 	beq.w	8003992 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003816:	4b66      	ldr	r3, [pc, #408]	; (80039b0 <HAL_GPIO_Init+0x324>)
 8003818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800381a:	4a65      	ldr	r2, [pc, #404]	; (80039b0 <HAL_GPIO_Init+0x324>)
 800381c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003820:	6453      	str	r3, [r2, #68]	; 0x44
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_GPIO_Init+0x324>)
 8003824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003826:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800382a:	60fb      	str	r3, [r7, #12]
 800382c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800382e:	4a61      	ldr	r2, [pc, #388]	; (80039b4 <HAL_GPIO_Init+0x328>)
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	089b      	lsrs	r3, r3, #2
 8003834:	3302      	adds	r3, #2
 8003836:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800383a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	f003 0303 	and.w	r3, r3, #3
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	220f      	movs	r2, #15
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	43db      	mvns	r3, r3
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	4013      	ands	r3, r2
 8003850:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a58      	ldr	r2, [pc, #352]	; (80039b8 <HAL_GPIO_Init+0x32c>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d037      	beq.n	80038ca <HAL_GPIO_Init+0x23e>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a57      	ldr	r2, [pc, #348]	; (80039bc <HAL_GPIO_Init+0x330>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d031      	beq.n	80038c6 <HAL_GPIO_Init+0x23a>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	4a56      	ldr	r2, [pc, #344]	; (80039c0 <HAL_GPIO_Init+0x334>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d02b      	beq.n	80038c2 <HAL_GPIO_Init+0x236>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	4a55      	ldr	r2, [pc, #340]	; (80039c4 <HAL_GPIO_Init+0x338>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d025      	beq.n	80038be <HAL_GPIO_Init+0x232>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a54      	ldr	r2, [pc, #336]	; (80039c8 <HAL_GPIO_Init+0x33c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d01f      	beq.n	80038ba <HAL_GPIO_Init+0x22e>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	4a53      	ldr	r2, [pc, #332]	; (80039cc <HAL_GPIO_Init+0x340>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <HAL_GPIO_Init+0x22a>
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	4a52      	ldr	r2, [pc, #328]	; (80039d0 <HAL_GPIO_Init+0x344>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d013      	beq.n	80038b2 <HAL_GPIO_Init+0x226>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	4a51      	ldr	r2, [pc, #324]	; (80039d4 <HAL_GPIO_Init+0x348>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d00d      	beq.n	80038ae <HAL_GPIO_Init+0x222>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	4a50      	ldr	r2, [pc, #320]	; (80039d8 <HAL_GPIO_Init+0x34c>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d007      	beq.n	80038aa <HAL_GPIO_Init+0x21e>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	4a4f      	ldr	r2, [pc, #316]	; (80039dc <HAL_GPIO_Init+0x350>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d101      	bne.n	80038a6 <HAL_GPIO_Init+0x21a>
 80038a2:	2309      	movs	r3, #9
 80038a4:	e012      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038a6:	230a      	movs	r3, #10
 80038a8:	e010      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038aa:	2308      	movs	r3, #8
 80038ac:	e00e      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038ae:	2307      	movs	r3, #7
 80038b0:	e00c      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038b2:	2306      	movs	r3, #6
 80038b4:	e00a      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038b6:	2305      	movs	r3, #5
 80038b8:	e008      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038ba:	2304      	movs	r3, #4
 80038bc:	e006      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038be:	2303      	movs	r3, #3
 80038c0:	e004      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038c2:	2302      	movs	r3, #2
 80038c4:	e002      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <HAL_GPIO_Init+0x240>
 80038ca:	2300      	movs	r3, #0
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	f002 0203 	and.w	r2, r2, #3
 80038d2:	0092      	lsls	r2, r2, #2
 80038d4:	4093      	lsls	r3, r2
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	4313      	orrs	r3, r2
 80038da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80038dc:	4935      	ldr	r1, [pc, #212]	; (80039b4 <HAL_GPIO_Init+0x328>)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	089b      	lsrs	r3, r3, #2
 80038e2:	3302      	adds	r3, #2
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038ea:	4b3d      	ldr	r3, [pc, #244]	; (80039e0 <HAL_GPIO_Init+0x354>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	43db      	mvns	r3, r3
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	4013      	ands	r3, r2
 80038f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003906:	69ba      	ldr	r2, [r7, #24]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800390e:	4a34      	ldr	r2, [pc, #208]	; (80039e0 <HAL_GPIO_Init+0x354>)
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003914:	4b32      	ldr	r3, [pc, #200]	; (80039e0 <HAL_GPIO_Init+0x354>)
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	43db      	mvns	r3, r3
 800391e:	69ba      	ldr	r2, [r7, #24]
 8003920:	4013      	ands	r3, r2
 8003922:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003938:	4a29      	ldr	r2, [pc, #164]	; (80039e0 <HAL_GPIO_Init+0x354>)
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800393e:	4b28      	ldr	r3, [pc, #160]	; (80039e0 <HAL_GPIO_Init+0x354>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d003      	beq.n	8003962 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003962:	4a1f      	ldr	r2, [pc, #124]	; (80039e0 <HAL_GPIO_Init+0x354>)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003968:	4b1d      	ldr	r3, [pc, #116]	; (80039e0 <HAL_GPIO_Init+0x354>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	43db      	mvns	r3, r3
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4013      	ands	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003980:	2b00      	cmp	r3, #0
 8003982:	d003      	beq.n	800398c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003984:	69ba      	ldr	r2, [r7, #24]
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4313      	orrs	r3, r2
 800398a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <HAL_GPIO_Init+0x354>)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	3301      	adds	r3, #1
 8003996:	61fb      	str	r3, [r7, #28]
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	2b0f      	cmp	r3, #15
 800399c:	f67f ae86 	bls.w	80036ac <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80039a0:	bf00      	nop
 80039a2:	bf00      	nop
 80039a4:	3724      	adds	r7, #36	; 0x24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40023800 	.word	0x40023800
 80039b4:	40013800 	.word	0x40013800
 80039b8:	40020000 	.word	0x40020000
 80039bc:	40020400 	.word	0x40020400
 80039c0:	40020800 	.word	0x40020800
 80039c4:	40020c00 	.word	0x40020c00
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40021400 	.word	0x40021400
 80039d0:	40021800 	.word	0x40021800
 80039d4:	40021c00 	.word	0x40021c00
 80039d8:	40022000 	.word	0x40022000
 80039dc:	40022400 	.word	0x40022400
 80039e0:	40013c00 	.word	0x40013c00

080039e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b083      	sub	sp, #12
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	460b      	mov	r3, r1
 80039ee:	807b      	strh	r3, [r7, #2]
 80039f0:	4613      	mov	r3, r2
 80039f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039f4:	787b      	ldrb	r3, [r7, #1]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039fa:	887a      	ldrh	r2, [r7, #2]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003a00:	e003      	b.n	8003a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003a02:	887b      	ldrh	r3, [r7, #2]
 8003a04:	041a      	lsls	r2, r3, #16
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	619a      	str	r2, [r3, #24]
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003a28:	887a      	ldrh	r2, [r7, #2]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	041a      	lsls	r2, r3, #16
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	43d9      	mvns	r1, r3
 8003a34:	887b      	ldrh	r3, [r7, #2]
 8003a36:	400b      	ands	r3, r1
 8003a38:	431a      	orrs	r2, r3
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	619a      	str	r2, [r3, #24]
}
 8003a3e:	bf00      	nop
 8003a40:	3714      	adds	r7, #20
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
	...

08003a4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	4603      	mov	r3, r0
 8003a54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a56:	4b08      	ldr	r3, [pc, #32]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a58:	695a      	ldr	r2, [r3, #20]
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d006      	beq.n	8003a70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a62:	4a05      	ldr	r2, [pc, #20]	; (8003a78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a64:	88fb      	ldrh	r3, [r7, #6]
 8003a66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a68:	88fb      	ldrh	r3, [r7, #6]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fd f992 	bl	8000d94 <HAL_GPIO_EXTI_Callback>
  }
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	40013c00 	.word	0x40013c00

08003a7c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003a82:	2300      	movs	r3, #0
 8003a84:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b23      	ldr	r3, [pc, #140]	; (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8a:	4a22      	ldr	r2, [pc, #136]	; (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6413      	str	r3, [r2, #64]	; 0x40
 8003a92:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <HAL_PWREx_EnableOverDrive+0x98>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003a9e:	4b1e      	ldr	r3, [pc, #120]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a1d      	ldr	r2, [pc, #116]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003aa8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003aaa:	f7fe fda7 	bl	80025fc <HAL_GetTick>
 8003aae:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ab0:	e009      	b.n	8003ac6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ab2:	f7fe fda3 	bl	80025fc <HAL_GetTick>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003ac0:	d901      	bls.n	8003ac6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	e022      	b.n	8003b0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003ac6:	4b14      	ldr	r3, [pc, #80]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ace:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad2:	d1ee      	bne.n	8003ab2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003ad4:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0f      	ldr	r2, [pc, #60]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ade:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ae0:	f7fe fd8c 	bl	80025fc <HAL_GetTick>
 8003ae4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ae6:	e009      	b.n	8003afc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ae8:	f7fe fd88 	bl	80025fc <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003af6:	d901      	bls.n	8003afc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e007      	b.n	8003b0c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b04:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b08:	d1ee      	bne.n	8003ae8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b086      	sub	sp, #24
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003b24:	2300      	movs	r3, #0
 8003b26:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e291      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 8087 	beq.w	8003c4e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003b40:	4b96      	ldr	r3, [pc, #600]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 030c 	and.w	r3, r3, #12
 8003b48:	2b04      	cmp	r3, #4
 8003b4a:	d00c      	beq.n	8003b66 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4c:	4b93      	ldr	r3, [pc, #588]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 030c 	and.w	r3, r3, #12
 8003b54:	2b08      	cmp	r3, #8
 8003b56:	d112      	bne.n	8003b7e <HAL_RCC_OscConfig+0x62>
 8003b58:	4b90      	ldr	r3, [pc, #576]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b64:	d10b      	bne.n	8003b7e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b66:	4b8d      	ldr	r3, [pc, #564]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d06c      	beq.n	8003c4c <HAL_RCC_OscConfig+0x130>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d168      	bne.n	8003c4c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e26b      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b86:	d106      	bne.n	8003b96 <HAL_RCC_OscConfig+0x7a>
 8003b88:	4b84      	ldr	r3, [pc, #528]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a83      	ldr	r2, [pc, #524]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003b8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b92:	6013      	str	r3, [r2, #0]
 8003b94:	e02e      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x9c>
 8003b9e:	4b7f      	ldr	r3, [pc, #508]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a7e      	ldr	r2, [pc, #504]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ba4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b7c      	ldr	r3, [pc, #496]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a7b      	ldr	r2, [pc, #492]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bb0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e01d      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bc0:	d10c      	bne.n	8003bdc <HAL_RCC_OscConfig+0xc0>
 8003bc2:	4b76      	ldr	r3, [pc, #472]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a75      	ldr	r2, [pc, #468]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bc8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	4b73      	ldr	r3, [pc, #460]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a72      	ldr	r2, [pc, #456]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e00b      	b.n	8003bf4 <HAL_RCC_OscConfig+0xd8>
 8003bdc:	4b6f      	ldr	r3, [pc, #444]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a6e      	ldr	r2, [pc, #440]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	4b6c      	ldr	r3, [pc, #432]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a6b      	ldr	r2, [pc, #428]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003bee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bf2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d013      	beq.n	8003c24 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bfc:	f7fe fcfe 	bl	80025fc <HAL_GetTick>
 8003c00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c02:	e008      	b.n	8003c16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c04:	f7fe fcfa 	bl	80025fc <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	2b64      	cmp	r3, #100	; 0x64
 8003c10:	d901      	bls.n	8003c16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c12:	2303      	movs	r3, #3
 8003c14:	e21f      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c16:	4b61      	ldr	r3, [pc, #388]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d0f0      	beq.n	8003c04 <HAL_RCC_OscConfig+0xe8>
 8003c22:	e014      	b.n	8003c4e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c24:	f7fe fcea 	bl	80025fc <HAL_GetTick>
 8003c28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c2a:	e008      	b.n	8003c3e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c2c:	f7fe fce6 	bl	80025fc <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	2b64      	cmp	r3, #100	; 0x64
 8003c38:	d901      	bls.n	8003c3e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003c3a:	2303      	movs	r3, #3
 8003c3c:	e20b      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c3e:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1f0      	bne.n	8003c2c <HAL_RCC_OscConfig+0x110>
 8003c4a:	e000      	b.n	8003c4e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d069      	beq.n	8003d2e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003c5a:	4b50      	ldr	r3, [pc, #320]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00b      	beq.n	8003c7e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b4d      	ldr	r3, [pc, #308]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d11c      	bne.n	8003cac <HAL_RCC_OscConfig+0x190>
 8003c72:	4b4a      	ldr	r3, [pc, #296]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d116      	bne.n	8003cac <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c7e:	4b47      	ldr	r3, [pc, #284]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d001      	beq.n	8003c96 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e1df      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c96:	4b41      	ldr	r3, [pc, #260]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	00db      	lsls	r3, r3, #3
 8003ca4:	493d      	ldr	r1, [pc, #244]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003caa:	e040      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	68db      	ldr	r3, [r3, #12]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d023      	beq.n	8003cfc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cb4:	4b39      	ldr	r3, [pc, #228]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a38      	ldr	r2, [pc, #224]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cba:	f043 0301 	orr.w	r3, r3, #1
 8003cbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc0:	f7fe fc9c 	bl	80025fc <HAL_GetTick>
 8003cc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc6:	e008      	b.n	8003cda <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003cc8:	f7fe fc98 	bl	80025fc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d901      	bls.n	8003cda <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003cd6:	2303      	movs	r3, #3
 8003cd8:	e1bd      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cda:	4b30      	ldr	r3, [pc, #192]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f0      	beq.n	8003cc8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce6:	4b2d      	ldr	r3, [pc, #180]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	691b      	ldr	r3, [r3, #16]
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4929      	ldr	r1, [pc, #164]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]
 8003cfa:	e018      	b.n	8003d2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cfc:	4b27      	ldr	r3, [pc, #156]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a26      	ldr	r2, [pc, #152]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d02:	f023 0301 	bic.w	r3, r3, #1
 8003d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d08:	f7fe fc78 	bl	80025fc <HAL_GetTick>
 8003d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	e008      	b.n	8003d22 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d10:	f7fe fc74 	bl	80025fc <HAL_GetTick>
 8003d14:	4602      	mov	r2, r0
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	1ad3      	subs	r3, r2, r3
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d901      	bls.n	8003d22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e199      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d22:	4b1e      	ldr	r3, [pc, #120]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f0      	bne.n	8003d10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0308 	and.w	r3, r3, #8
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d038      	beq.n	8003dac <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d019      	beq.n	8003d76 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d42:	4b16      	ldr	r3, [pc, #88]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d48:	f043 0301 	orr.w	r3, r3, #1
 8003d4c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d4e:	f7fe fc55 	bl	80025fc <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d56:	f7fe fc51 	bl	80025fc <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e176      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d68:	4b0c      	ldr	r3, [pc, #48]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x23a>
 8003d74:	e01a      	b.n	8003dac <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d76:	4b09      	ldr	r3, [pc, #36]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d7a:	4a08      	ldr	r2, [pc, #32]	; (8003d9c <HAL_RCC_OscConfig+0x280>)
 8003d7c:	f023 0301 	bic.w	r3, r3, #1
 8003d80:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d82:	f7fe fc3b 	bl	80025fc <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d88:	e00a      	b.n	8003da0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fc37 	bl	80025fc <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d903      	bls.n	8003da0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e15c      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
 8003d9c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003da0:	4b91      	ldr	r3, [pc, #580]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da4:	f003 0302 	and.w	r3, r3, #2
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d1ee      	bne.n	8003d8a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0304 	and.w	r3, r3, #4
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80a4 	beq.w	8003f02 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dba:	4b8b      	ldr	r3, [pc, #556]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10d      	bne.n	8003de2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dc6:	4b88      	ldr	r3, [pc, #544]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	4a87      	ldr	r2, [pc, #540]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8003dd2:	4b85      	ldr	r3, [pc, #532]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dda:	60bb      	str	r3, [r7, #8]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dde:	2301      	movs	r3, #1
 8003de0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003de2:	4b82      	ldr	r3, [pc, #520]	; (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d118      	bne.n	8003e20 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003dee:	4b7f      	ldr	r3, [pc, #508]	; (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a7e      	ldr	r2, [pc, #504]	; (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003df8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dfa:	f7fe fbff 	bl	80025fc <HAL_GetTick>
 8003dfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e00:	e008      	b.n	8003e14 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e02:	f7fe fbfb 	bl	80025fc <HAL_GetTick>
 8003e06:	4602      	mov	r2, r0
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	1ad3      	subs	r3, r2, r3
 8003e0c:	2b64      	cmp	r3, #100	; 0x64
 8003e0e:	d901      	bls.n	8003e14 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e120      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e14:	4b75      	ldr	r3, [pc, #468]	; (8003fec <HAL_RCC_OscConfig+0x4d0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d0f0      	beq.n	8003e02 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x31a>
 8003e28:	4b6f      	ldr	r3, [pc, #444]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	4a6e      	ldr	r2, [pc, #440]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e2e:	f043 0301 	orr.w	r3, r3, #1
 8003e32:	6713      	str	r3, [r2, #112]	; 0x70
 8003e34:	e02d      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x33c>
 8003e3e:	4b6a      	ldr	r3, [pc, #424]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e42:	4a69      	ldr	r2, [pc, #420]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e44:	f023 0301 	bic.w	r3, r3, #1
 8003e48:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4a:	4b67      	ldr	r3, [pc, #412]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e4e:	4a66      	ldr	r2, [pc, #408]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e50:	f023 0304 	bic.w	r3, r3, #4
 8003e54:	6713      	str	r3, [r2, #112]	; 0x70
 8003e56:	e01c      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	d10c      	bne.n	8003e7a <HAL_RCC_OscConfig+0x35e>
 8003e60:	4b61      	ldr	r3, [pc, #388]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e64:	4a60      	ldr	r2, [pc, #384]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e66:	f043 0304 	orr.w	r3, r3, #4
 8003e6a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e6c:	4b5e      	ldr	r3, [pc, #376]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a5d      	ldr	r2, [pc, #372]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e00b      	b.n	8003e92 <HAL_RCC_OscConfig+0x376>
 8003e7a:	4b5b      	ldr	r3, [pc, #364]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	4a5a      	ldr	r2, [pc, #360]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e80:	f023 0301 	bic.w	r3, r3, #1
 8003e84:	6713      	str	r3, [r2, #112]	; 0x70
 8003e86:	4b58      	ldr	r3, [pc, #352]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e8a:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e9a:	f7fe fbaf 	bl	80025fc <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7fe fbab 	bl	80025fc <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0ce      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eb8:	4b4b      	ldr	r3, [pc, #300]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0ee      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x386>
 8003ec4:	e014      	b.n	8003ef0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ec6:	f7fe fb99 	bl	80025fc <HAL_GetTick>
 8003eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ecc:	e00a      	b.n	8003ee4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003ece:	f7fe fb95 	bl	80025fc <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e0b8      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ee4:	4b40      	ldr	r3, [pc, #256]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1ee      	bne.n	8003ece <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003ef0:	7dfb      	ldrb	r3, [r7, #23]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d105      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ef6:	4b3c      	ldr	r3, [pc, #240]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003efa:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003efc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f00:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a4 	beq.w	8004054 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003f0c:	4b36      	ldr	r3, [pc, #216]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d06b      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d149      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f20:	4b31      	ldr	r3, [pc, #196]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a30      	ldr	r2, [pc, #192]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2c:	f7fe fb66 	bl	80025fc <HAL_GetTick>
 8003f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f32:	e008      	b.n	8003f46 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f34:	f7fe fb62 	bl	80025fc <HAL_GetTick>
 8003f38:	4602      	mov	r2, r0
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	1ad3      	subs	r3, r2, r3
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d901      	bls.n	8003f46 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003f42:	2303      	movs	r3, #3
 8003f44:	e087      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f46:	4b28      	ldr	r3, [pc, #160]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d1f0      	bne.n	8003f34 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	69da      	ldr	r2, [r3, #28]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	019b      	lsls	r3, r3, #6
 8003f62:	431a      	orrs	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f68:	085b      	lsrs	r3, r3, #1
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	041b      	lsls	r3, r3, #16
 8003f6e:	431a      	orrs	r2, r3
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	061b      	lsls	r3, r3, #24
 8003f76:	4313      	orrs	r3, r2
 8003f78:	4a1b      	ldr	r2, [pc, #108]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003f7e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003f86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003f8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f8c:	f7fe fb36 	bl	80025fc <HAL_GetTick>
 8003f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f92:	e008      	b.n	8003fa6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f94:	f7fe fb32 	bl	80025fc <HAL_GetTick>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e057      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d0f0      	beq.n	8003f94 <HAL_RCC_OscConfig+0x478>
 8003fb2:	e04f      	b.n	8004054 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0b      	ldr	r2, [pc, #44]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fbe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc0:	f7fe fb1c 	bl	80025fc <HAL_GetTick>
 8003fc4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fc6:	e008      	b.n	8003fda <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc8:	f7fe fb18 	bl	80025fc <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	d901      	bls.n	8003fda <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03d      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fda:	4b03      	ldr	r3, [pc, #12]	; (8003fe8 <HAL_RCC_OscConfig+0x4cc>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d1f0      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x4ac>
 8003fe6:	e035      	b.n	8004054 <HAL_RCC_OscConfig+0x538>
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ff0:	4b1b      	ldr	r3, [pc, #108]	; (8004060 <HAL_RCC_OscConfig+0x544>)
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d028      	beq.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004008:	429a      	cmp	r2, r3
 800400a:	d121      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004016:	429a      	cmp	r2, r3
 8004018:	d11a      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004020:	4013      	ands	r3, r2
 8004022:	687a      	ldr	r2, [r7, #4]
 8004024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004026:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004028:	4293      	cmp	r3, r2
 800402a:	d111      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	085b      	lsrs	r3, r3, #1
 8004038:	3b01      	subs	r3, #1
 800403a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800403c:	429a      	cmp	r2, r3
 800403e:	d107      	bne.n	8004050 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800404c:	429a      	cmp	r2, r3
 800404e:	d001      	beq.n	8004054 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3718      	adds	r7, #24
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800406e:	2300      	movs	r3, #0
 8004070:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d101      	bne.n	800407c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e0d0      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800407c:	4b6a      	ldr	r3, [pc, #424]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	429a      	cmp	r2, r3
 8004088:	d910      	bls.n	80040ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 020f 	bic.w	r2, r3, #15
 8004092:	4965      	ldr	r1, [pc, #404]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800409a:	4b63      	ldr	r3, [pc, #396]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 030f 	and.w	r3, r3, #15
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d001      	beq.n	80040ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	e0b8      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040c4:	4b59      	ldr	r3, [pc, #356]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	4a58      	ldr	r2, [pc, #352]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040ce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0308 	and.w	r3, r3, #8
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d005      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040dc:	4b53      	ldr	r3, [pc, #332]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	4a52      	ldr	r2, [pc, #328]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040e6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040e8:	4b50      	ldr	r3, [pc, #320]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	494d      	ldr	r1, [pc, #308]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80040f6:	4313      	orrs	r3, r2
 80040f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d040      	beq.n	8004188 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	685b      	ldr	r3, [r3, #4]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d107      	bne.n	800411e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800410e:	4b47      	ldr	r3, [pc, #284]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d115      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	e07f      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	2b02      	cmp	r3, #2
 8004124:	d107      	bne.n	8004136 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004126:	4b41      	ldr	r3, [pc, #260]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800412e:	2b00      	cmp	r3, #0
 8004130:	d109      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e073      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004136:	4b3d      	ldr	r3, [pc, #244]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e06b      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004146:	4b39      	ldr	r3, [pc, #228]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f023 0203 	bic.w	r2, r3, #3
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	4936      	ldr	r1, [pc, #216]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004154:	4313      	orrs	r3, r2
 8004156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004158:	f7fe fa50 	bl	80025fc <HAL_GetTick>
 800415c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800415e:	e00a      	b.n	8004176 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004160:	f7fe fa4c 	bl	80025fc <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	f241 3288 	movw	r2, #5000	; 0x1388
 800416e:	4293      	cmp	r3, r2
 8004170:	d901      	bls.n	8004176 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e053      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	4b2d      	ldr	r3, [pc, #180]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 020c 	and.w	r2, r3, #12
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	429a      	cmp	r2, r3
 8004186:	d1eb      	bne.n	8004160 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004188:	4b27      	ldr	r3, [pc, #156]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 030f 	and.w	r3, r3, #15
 8004190:	683a      	ldr	r2, [r7, #0]
 8004192:	429a      	cmp	r2, r3
 8004194:	d210      	bcs.n	80041b8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004196:	4b24      	ldr	r3, [pc, #144]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f023 020f 	bic.w	r2, r3, #15
 800419e:	4922      	ldr	r1, [pc, #136]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <HAL_RCC_ClockConfig+0x1c4>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d001      	beq.n	80041b8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e032      	b.n	800421e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	4916      	ldr	r1, [pc, #88]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0308 	and.w	r3, r3, #8
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d009      	beq.n	80041f6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041e4:	689b      	ldr	r3, [r3, #8]
 80041e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	490e      	ldr	r1, [pc, #56]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041f2:	4313      	orrs	r3, r2
 80041f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80041f6:	f000 f821 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80041fa:	4602      	mov	r2, r0
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCC_ClockConfig+0x1c8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	490a      	ldr	r1, [pc, #40]	; (8004230 <HAL_RCC_ClockConfig+0x1cc>)
 8004208:	5ccb      	ldrb	r3, [r1, r3]
 800420a:	fa22 f303 	lsr.w	r3, r2, r3
 800420e:	4a09      	ldr	r2, [pc, #36]	; (8004234 <HAL_RCC_ClockConfig+0x1d0>)
 8004210:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004212:	4b09      	ldr	r3, [pc, #36]	; (8004238 <HAL_RCC_ClockConfig+0x1d4>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4618      	mov	r0, r3
 8004218:	f7fe f9ac 	bl	8002574 <HAL_InitTick>

  return HAL_OK;
 800421c:	2300      	movs	r3, #0
}
 800421e:	4618      	mov	r0, r3
 8004220:	3710      	adds	r7, #16
 8004222:	46bd      	mov	sp, r7
 8004224:	bd80      	pop	{r7, pc}
 8004226:	bf00      	nop
 8004228:	40023c00 	.word	0x40023c00
 800422c:	40023800 	.word	0x40023800
 8004230:	08006dec 	.word	0x08006dec
 8004234:	20000000 	.word	0x20000000
 8004238:	20000004 	.word	0x20000004

0800423c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800423c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004240:	b094      	sub	sp, #80	; 0x50
 8004242:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004244:	2300      	movs	r3, #0
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
 8004248:	2300      	movs	r3, #0
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800424c:	2300      	movs	r3, #0
 800424e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004250:	2300      	movs	r3, #0
 8004252:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004254:	4b79      	ldr	r3, [pc, #484]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f003 030c 	and.w	r3, r3, #12
 800425c:	2b08      	cmp	r3, #8
 800425e:	d00d      	beq.n	800427c <HAL_RCC_GetSysClockFreq+0x40>
 8004260:	2b08      	cmp	r3, #8
 8004262:	f200 80e1 	bhi.w	8004428 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004266:	2b00      	cmp	r3, #0
 8004268:	d002      	beq.n	8004270 <HAL_RCC_GetSysClockFreq+0x34>
 800426a:	2b04      	cmp	r3, #4
 800426c:	d003      	beq.n	8004276 <HAL_RCC_GetSysClockFreq+0x3a>
 800426e:	e0db      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004270:	4b73      	ldr	r3, [pc, #460]	; (8004440 <HAL_RCC_GetSysClockFreq+0x204>)
 8004272:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004274:	e0db      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004276:	4b73      	ldr	r3, [pc, #460]	; (8004444 <HAL_RCC_GetSysClockFreq+0x208>)
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427a:	e0d8      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800427c:	4b6f      	ldr	r3, [pc, #444]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004284:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004286:	4b6d      	ldr	r3, [pc, #436]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800428e:	2b00      	cmp	r3, #0
 8004290:	d063      	beq.n	800435a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004292:	4b6a      	ldr	r3, [pc, #424]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	2200      	movs	r2, #0
 800429a:	63bb      	str	r3, [r7, #56]	; 0x38
 800429c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800429e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a4:	633b      	str	r3, [r7, #48]	; 0x30
 80042a6:	2300      	movs	r3, #0
 80042a8:	637b      	str	r3, [r7, #52]	; 0x34
 80042aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042ae:	4622      	mov	r2, r4
 80042b0:	462b      	mov	r3, r5
 80042b2:	f04f 0000 	mov.w	r0, #0
 80042b6:	f04f 0100 	mov.w	r1, #0
 80042ba:	0159      	lsls	r1, r3, #5
 80042bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042c0:	0150      	lsls	r0, r2, #5
 80042c2:	4602      	mov	r2, r0
 80042c4:	460b      	mov	r3, r1
 80042c6:	4621      	mov	r1, r4
 80042c8:	1a51      	subs	r1, r2, r1
 80042ca:	6139      	str	r1, [r7, #16]
 80042cc:	4629      	mov	r1, r5
 80042ce:	eb63 0301 	sbc.w	r3, r3, r1
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042e0:	4659      	mov	r1, fp
 80042e2:	018b      	lsls	r3, r1, #6
 80042e4:	4651      	mov	r1, sl
 80042e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ea:	4651      	mov	r1, sl
 80042ec:	018a      	lsls	r2, r1, #6
 80042ee:	4651      	mov	r1, sl
 80042f0:	ebb2 0801 	subs.w	r8, r2, r1
 80042f4:	4659      	mov	r1, fp
 80042f6:	eb63 0901 	sbc.w	r9, r3, r1
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004306:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800430a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800430e:	4690      	mov	r8, r2
 8004310:	4699      	mov	r9, r3
 8004312:	4623      	mov	r3, r4
 8004314:	eb18 0303 	adds.w	r3, r8, r3
 8004318:	60bb      	str	r3, [r7, #8]
 800431a:	462b      	mov	r3, r5
 800431c:	eb49 0303 	adc.w	r3, r9, r3
 8004320:	60fb      	str	r3, [r7, #12]
 8004322:	f04f 0200 	mov.w	r2, #0
 8004326:	f04f 0300 	mov.w	r3, #0
 800432a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800432e:	4629      	mov	r1, r5
 8004330:	024b      	lsls	r3, r1, #9
 8004332:	4621      	mov	r1, r4
 8004334:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004338:	4621      	mov	r1, r4
 800433a:	024a      	lsls	r2, r1, #9
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004342:	2200      	movs	r2, #0
 8004344:	62bb      	str	r3, [r7, #40]	; 0x28
 8004346:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004348:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800434c:	f7fc fb72 	bl	8000a34 <__aeabi_uldivmod>
 8004350:	4602      	mov	r2, r0
 8004352:	460b      	mov	r3, r1
 8004354:	4613      	mov	r3, r2
 8004356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004358:	e058      	b.n	800440c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800435a:	4b38      	ldr	r3, [pc, #224]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	099b      	lsrs	r3, r3, #6
 8004360:	2200      	movs	r2, #0
 8004362:	4618      	mov	r0, r3
 8004364:	4611      	mov	r1, r2
 8004366:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800436a:	623b      	str	r3, [r7, #32]
 800436c:	2300      	movs	r3, #0
 800436e:	627b      	str	r3, [r7, #36]	; 0x24
 8004370:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004374:	4642      	mov	r2, r8
 8004376:	464b      	mov	r3, r9
 8004378:	f04f 0000 	mov.w	r0, #0
 800437c:	f04f 0100 	mov.w	r1, #0
 8004380:	0159      	lsls	r1, r3, #5
 8004382:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004386:	0150      	lsls	r0, r2, #5
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4641      	mov	r1, r8
 800438e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004392:	4649      	mov	r1, r9
 8004394:	eb63 0b01 	sbc.w	fp, r3, r1
 8004398:	f04f 0200 	mov.w	r2, #0
 800439c:	f04f 0300 	mov.w	r3, #0
 80043a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043ac:	ebb2 040a 	subs.w	r4, r2, sl
 80043b0:	eb63 050b 	sbc.w	r5, r3, fp
 80043b4:	f04f 0200 	mov.w	r2, #0
 80043b8:	f04f 0300 	mov.w	r3, #0
 80043bc:	00eb      	lsls	r3, r5, #3
 80043be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043c2:	00e2      	lsls	r2, r4, #3
 80043c4:	4614      	mov	r4, r2
 80043c6:	461d      	mov	r5, r3
 80043c8:	4643      	mov	r3, r8
 80043ca:	18e3      	adds	r3, r4, r3
 80043cc:	603b      	str	r3, [r7, #0]
 80043ce:	464b      	mov	r3, r9
 80043d0:	eb45 0303 	adc.w	r3, r5, r3
 80043d4:	607b      	str	r3, [r7, #4]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043e2:	4629      	mov	r1, r5
 80043e4:	028b      	lsls	r3, r1, #10
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043ec:	4621      	mov	r1, r4
 80043ee:	028a      	lsls	r2, r1, #10
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	2200      	movs	r2, #0
 80043f8:	61bb      	str	r3, [r7, #24]
 80043fa:	61fa      	str	r2, [r7, #28]
 80043fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004400:	f7fc fb18 	bl	8000a34 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800440c:	4b0b      	ldr	r3, [pc, #44]	; (800443c <HAL_RCC_GetSysClockFreq+0x200>)
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	0c1b      	lsrs	r3, r3, #16
 8004412:	f003 0303 	and.w	r3, r3, #3
 8004416:	3301      	adds	r3, #1
 8004418:	005b      	lsls	r3, r3, #1
 800441a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 800441c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800441e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004420:	fbb2 f3f3 	udiv	r3, r2, r3
 8004424:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004426:	e002      	b.n	800442e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_RCC_GetSysClockFreq+0x204>)
 800442a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800442c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004430:	4618      	mov	r0, r3
 8004432:	3750      	adds	r7, #80	; 0x50
 8004434:	46bd      	mov	sp, r7
 8004436:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	00f42400 	.word	0x00f42400
 8004444:	007a1200 	.word	0x007a1200

08004448 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004448:	b480      	push	{r7}
 800444a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800444c:	4b03      	ldr	r3, [pc, #12]	; (800445c <HAL_RCC_GetHCLKFreq+0x14>)
 800444e:	681b      	ldr	r3, [r3, #0]
}
 8004450:	4618      	mov	r0, r3
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000000 	.word	0x20000000

08004460 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004464:	f7ff fff0 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b05      	ldr	r3, [pc, #20]	; (8004480 <HAL_RCC_GetPCLK1Freq+0x20>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	0a9b      	lsrs	r3, r3, #10
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4903      	ldr	r1, [pc, #12]	; (8004484 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	08006dfc 	.word	0x08006dfc

08004488 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800448c:	f7ff ffdc 	bl	8004448 <HAL_RCC_GetHCLKFreq>
 8004490:	4602      	mov	r2, r0
 8004492:	4b05      	ldr	r3, [pc, #20]	; (80044a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	0b5b      	lsrs	r3, r3, #13
 8004498:	f003 0307 	and.w	r3, r3, #7
 800449c:	4903      	ldr	r1, [pc, #12]	; (80044ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800449e:	5ccb      	ldrb	r3, [r1, r3]
 80044a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40023800 	.word	0x40023800
 80044ac:	08006dfc 	.word	0x08006dfc

080044b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b088      	sub	sp, #32
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80044b8:	2300      	movs	r3, #0
 80044ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80044c4:	2300      	movs	r3, #0
 80044c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80044c8:	2300      	movs	r3, #0
 80044ca:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0301 	and.w	r3, r3, #1
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d012      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80044d8:	4b69      	ldr	r3, [pc, #420]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	4a68      	ldr	r2, [pc, #416]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044de:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80044e2:	6093      	str	r3, [r2, #8]
 80044e4:	4b66      	ldr	r3, [pc, #408]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e6:	689a      	ldr	r2, [r3, #8]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044ec:	4964      	ldr	r1, [pc, #400]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d101      	bne.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80044fa:	2301      	movs	r3, #1
 80044fc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d017      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800450a:	4b5d      	ldr	r3, [pc, #372]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004510:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004518:	4959      	ldr	r1, [pc, #356]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004524:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004528:	d101      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800452a:	2301      	movs	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004536:	2301      	movs	r3, #1
 8004538:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004542:	2b00      	cmp	r3, #0
 8004544:	d017      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004546:	4b4e      	ldr	r3, [pc, #312]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800454c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004554:	494a      	ldr	r1, [pc, #296]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004556:	4313      	orrs	r3, r2
 8004558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004564:	d101      	bne.n	800456a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004566:	2301      	movs	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	2b00      	cmp	r3, #0
 8004570:	d101      	bne.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004572:	2301      	movs	r3, #1
 8004574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004582:	2301      	movs	r3, #1
 8004584:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0320 	and.w	r3, r3, #32
 800458e:	2b00      	cmp	r3, #0
 8004590:	f000 808b 	beq.w	80046aa <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004594:	4b3a      	ldr	r3, [pc, #232]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004598:	4a39      	ldr	r2, [pc, #228]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6413      	str	r3, [r2, #64]	; 0x40
 80045a0:	4b37      	ldr	r3, [pc, #220]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	60bb      	str	r3, [r7, #8]
 80045aa:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80045ac:	4b35      	ldr	r3, [pc, #212]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a34      	ldr	r2, [pc, #208]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045b8:	f7fe f820 	bl	80025fc <HAL_GetTick>
 80045bc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c0:	f7fe f81c 	bl	80025fc <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e357      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80045d2:	4b2c      	ldr	r3, [pc, #176]	; (8004684 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045de:	4b28      	ldr	r3, [pc, #160]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045e6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d035      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d02e      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045fc:	4b20      	ldr	r3, [pc, #128]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004604:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004606:	4b1e      	ldr	r3, [pc, #120]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	4a1d      	ldr	r2, [pc, #116]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004610:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004612:	4b1b      	ldr	r3, [pc, #108]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a1a      	ldr	r2, [pc, #104]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004618:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800461c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800461e:	4a18      	ldr	r2, [pc, #96]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004624:	4b16      	ldr	r3, [pc, #88]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b01      	cmp	r3, #1
 800462e:	d114      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004630:	f7fd ffe4 	bl	80025fc <HAL_GetTick>
 8004634:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004636:	e00a      	b.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004638:	f7fd ffe0 	bl	80025fc <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	f241 3288 	movw	r2, #5000	; 0x1388
 8004646:	4293      	cmp	r3, r2
 8004648:	d901      	bls.n	800464e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800464a:	2303      	movs	r3, #3
 800464c:	e319      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800464e:	4b0c      	ldr	r3, [pc, #48]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004652:	f003 0302 	and.w	r3, r3, #2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d0ee      	beq.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004666:	d111      	bne.n	800468c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004674:	4b04      	ldr	r3, [pc, #16]	; (8004688 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004676:	400b      	ands	r3, r1
 8004678:	4901      	ldr	r1, [pc, #4]	; (8004680 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800467a:	4313      	orrs	r3, r2
 800467c:	608b      	str	r3, [r1, #8]
 800467e:	e00b      	b.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004680:	40023800 	.word	0x40023800
 8004684:	40007000 	.word	0x40007000
 8004688:	0ffffcff 	.word	0x0ffffcff
 800468c:	4baa      	ldr	r3, [pc, #680]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	4aa9      	ldr	r2, [pc, #676]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004692:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004696:	6093      	str	r3, [r2, #8]
 8004698:	4ba7      	ldr	r3, [pc, #668]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800469a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a4:	49a4      	ldr	r1, [pc, #656]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046a6:	4313      	orrs	r3, r2
 80046a8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 0310 	and.w	r3, r3, #16
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d010      	beq.n	80046d8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80046b6:	4ba0      	ldr	r3, [pc, #640]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046bc:	4a9e      	ldr	r2, [pc, #632]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80046c6:	4b9c      	ldr	r3, [pc, #624]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046d0:	4999      	ldr	r1, [pc, #612]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046e4:	4b94      	ldr	r3, [pc, #592]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046f2:	4991      	ldr	r1, [pc, #580]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80046f4:	4313      	orrs	r3, r2
 80046f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d00a      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004706:	4b8c      	ldr	r3, [pc, #560]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004714:	4988      	ldr	r1, [pc, #544]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004724:	2b00      	cmp	r3, #0
 8004726:	d00a      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004728:	4b83      	ldr	r3, [pc, #524]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004736:	4980      	ldr	r1, [pc, #512]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004738:	4313      	orrs	r3, r2
 800473a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004746:	2b00      	cmp	r3, #0
 8004748:	d00a      	beq.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800474a:	4b7b      	ldr	r3, [pc, #492]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004758:	4977      	ldr	r1, [pc, #476]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800475a:	4313      	orrs	r3, r2
 800475c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00a      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800476c:	4b72      	ldr	r3, [pc, #456]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f023 0203 	bic.w	r2, r3, #3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	496f      	ldr	r1, [pc, #444]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800477c:	4313      	orrs	r3, r2
 800477e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d00a      	beq.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800478e:	4b6a      	ldr	r3, [pc, #424]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f023 020c 	bic.w	r2, r3, #12
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800479c:	4966      	ldr	r1, [pc, #408]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047b0:	4b61      	ldr	r3, [pc, #388]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047be:	495e      	ldr	r1, [pc, #376]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047d2:	4b59      	ldr	r3, [pc, #356]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e0:	4955      	ldr	r1, [pc, #340]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047f4:	4b50      	ldr	r3, [pc, #320]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004802:	494d      	ldr	r1, [pc, #308]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004804:	4313      	orrs	r3, r2
 8004806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004816:	4b48      	ldr	r3, [pc, #288]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004824:	4944      	ldr	r1, [pc, #272]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004826:	4313      	orrs	r3, r2
 8004828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004838:	4b3f      	ldr	r3, [pc, #252]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800483a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800483e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004846:	493c      	ldr	r1, [pc, #240]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800485a:	4b37      	ldr	r3, [pc, #220]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800485c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004860:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004868:	4933      	ldr	r1, [pc, #204]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800486a:	4313      	orrs	r3, r2
 800486c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00a      	beq.n	8004892 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800487c:	4b2e      	ldr	r3, [pc, #184]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800487e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004882:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800488a:	492b      	ldr	r1, [pc, #172]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800488c:	4313      	orrs	r3, r2
 800488e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489a:	2b00      	cmp	r3, #0
 800489c:	d011      	beq.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800489e:	4b26      	ldr	r3, [pc, #152]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048a4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ac:	4922      	ldr	r1, [pc, #136]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ae:	4313      	orrs	r3, r2
 80048b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80048bc:	d101      	bne.n	80048c2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80048be:	2301      	movs	r3, #1
 80048c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0308 	and.w	r3, r3, #8
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80048ce:	2301      	movs	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d00a      	beq.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048de:	4b16      	ldr	r3, [pc, #88]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048e4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048ec:	4912      	ldr	r1, [pc, #72]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004900:	4b0d      	ldr	r3, [pc, #52]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004906:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004910:	4909      	ldr	r1, [pc, #36]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004912:	4313      	orrs	r3, r2
 8004914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004918:	69fb      	ldr	r3, [r7, #28]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d006      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	f000 80d9 	beq.w	8004ade <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800492c:	4b02      	ldr	r3, [pc, #8]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a01      	ldr	r2, [pc, #4]	; (8004938 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004932:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004936:	e001      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8004938:	40023800 	.word	0x40023800
 800493c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800493e:	f7fd fe5d 	bl	80025fc <HAL_GetTick>
 8004942:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004946:	f7fd fe59 	bl	80025fc <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b64      	cmp	r3, #100	; 0x64
 8004952:	d901      	bls.n	8004958 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e194      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004958:	4b6c      	ldr	r3, [pc, #432]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d1f0      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	2b00      	cmp	r3, #0
 800496e:	d021      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004974:	2b00      	cmp	r3, #0
 8004976:	d11d      	bne.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004978:	4b64      	ldr	r3, [pc, #400]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800497a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800497e:	0c1b      	lsrs	r3, r3, #16
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004986:	4b61      	ldr	r3, [pc, #388]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800498c:	0e1b      	lsrs	r3, r3, #24
 800498e:	f003 030f 	and.w	r3, r3, #15
 8004992:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	019a      	lsls	r2, r3, #6
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	041b      	lsls	r3, r3, #16
 800499e:	431a      	orrs	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	061b      	lsls	r3, r3, #24
 80049a4:	431a      	orrs	r2, r3
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	071b      	lsls	r3, r3, #28
 80049ac:	4957      	ldr	r1, [pc, #348]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d004      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049c4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c8:	d00a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d02e      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049de:	d129      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80049e0:	4b4a      	ldr	r3, [pc, #296]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e6:	0c1b      	lsrs	r3, r3, #16
 80049e8:	f003 0303 	and.w	r3, r3, #3
 80049ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80049ee:	4b47      	ldr	r3, [pc, #284]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049f4:	0f1b      	lsrs	r3, r3, #28
 80049f6:	f003 0307 	and.w	r3, r3, #7
 80049fa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	019a      	lsls	r2, r3, #6
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	041b      	lsls	r3, r3, #16
 8004a06:	431a      	orrs	r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	061b      	lsls	r3, r3, #24
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	071b      	lsls	r3, r3, #28
 8004a14:	493d      	ldr	r1, [pc, #244]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004a1c:	4b3b      	ldr	r3, [pc, #236]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a22:	f023 021f 	bic.w	r2, r3, #31
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	4937      	ldr	r1, [pc, #220]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01d      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a46:	0e1b      	lsrs	r3, r3, #24
 8004a48:	f003 030f 	and.w	r3, r3, #15
 8004a4c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004a4e:	4b2f      	ldr	r3, [pc, #188]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a50:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a54:	0f1b      	lsrs	r3, r3, #28
 8004a56:	f003 0307 	and.w	r3, r3, #7
 8004a5a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	019a      	lsls	r2, r3, #6
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	691b      	ldr	r3, [r3, #16]
 8004a66:	041b      	lsls	r3, r3, #16
 8004a68:	431a      	orrs	r2, r3
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	061b      	lsls	r3, r3, #24
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	071b      	lsls	r3, r3, #28
 8004a74:	4925      	ldr	r1, [pc, #148]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d011      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	019a      	lsls	r2, r3, #6
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	041b      	lsls	r3, r3, #16
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	061b      	lsls	r3, r3, #24
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	071b      	lsls	r3, r3, #28
 8004aa4:	4919      	ldr	r1, [pc, #100]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004aac:	4b17      	ldr	r3, [pc, #92]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a16      	ldr	r2, [pc, #88]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fda0 	bl	80025fc <HAL_GetTick>
 8004abc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004ac0:	f7fd fd9c 	bl	80025fc <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b64      	cmp	r3, #100	; 0x64
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0d7      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004ad2:	4b0e      	ldr	r3, [pc, #56]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	f040 80cd 	bne.w	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004ae6:	4b09      	ldr	r3, [pc, #36]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4a08      	ldr	r2, [pc, #32]	; (8004b0c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004aec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af2:	f7fd fd83 	bl	80025fc <HAL_GetTick>
 8004af6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004af8:	e00a      	b.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004afa:	f7fd fd7f 	bl	80025fc <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	697b      	ldr	r3, [r7, #20]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	2b64      	cmp	r3, #100	; 0x64
 8004b06:	d903      	bls.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e0ba      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8004b0c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004b10:	4b5e      	ldr	r3, [pc, #376]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004b1c:	d0ed      	beq.n	8004afa <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d02e      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d12a      	bne.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b46:	4b51      	ldr	r3, [pc, #324]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4c:	0c1b      	lsrs	r3, r3, #16
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b54:	4b4d      	ldr	r3, [pc, #308]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b5a:	0f1b      	lsrs	r3, r3, #28
 8004b5c:	f003 0307 	and.w	r3, r3, #7
 8004b60:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	019a      	lsls	r2, r3, #6
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	041b      	lsls	r3, r3, #16
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	699b      	ldr	r3, [r3, #24]
 8004b72:	061b      	lsls	r3, r3, #24
 8004b74:	431a      	orrs	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	071b      	lsls	r3, r3, #28
 8004b7a:	4944      	ldr	r1, [pc, #272]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004b82:	4b42      	ldr	r3, [pc, #264]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b88:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b90:	3b01      	subs	r3, #1
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	493d      	ldr	r1, [pc, #244]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d022      	beq.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004bac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bb0:	d11d      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bb2:	4b36      	ldr	r3, [pc, #216]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb8:	0e1b      	lsrs	r3, r3, #24
 8004bba:	f003 030f 	and.w	r3, r3, #15
 8004bbe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004bc0:	4b32      	ldr	r3, [pc, #200]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc6:	0f1b      	lsrs	r3, r3, #28
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	019a      	lsls	r2, r3, #6
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a1b      	ldr	r3, [r3, #32]
 8004bd8:	041b      	lsls	r3, r3, #16
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	061b      	lsls	r3, r3, #24
 8004be0:	431a      	orrs	r2, r3
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	071b      	lsls	r3, r3, #28
 8004be6:	4929      	ldr	r1, [pc, #164]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 0308 	and.w	r3, r3, #8
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d028      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004bfa:	4b24      	ldr	r3, [pc, #144]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 030f 	and.w	r3, r3, #15
 8004c06:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c08:	4b20      	ldr	r3, [pc, #128]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0e:	0c1b      	lsrs	r3, r3, #16
 8004c10:	f003 0303 	and.w	r3, r3, #3
 8004c14:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	695b      	ldr	r3, [r3, #20]
 8004c1a:	019a      	lsls	r2, r3, #6
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	041b      	lsls	r3, r3, #16
 8004c20:	431a      	orrs	r2, r3
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	061b      	lsls	r3, r3, #24
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	69db      	ldr	r3, [r3, #28]
 8004c2c:	071b      	lsls	r3, r3, #28
 8004c2e:	4917      	ldr	r1, [pc, #92]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004c36:	4b15      	ldr	r3, [pc, #84]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c44:	4911      	ldr	r1, [pc, #68]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c46:	4313      	orrs	r3, r2
 8004c48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004c4c:	4b0f      	ldr	r3, [pc, #60]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a0e      	ldr	r2, [pc, #56]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c58:	f7fd fcd0 	bl	80025fc <HAL_GetTick>
 8004c5c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c5e:	e008      	b.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c60:	f7fd fccc 	bl	80025fc <HAL_GetTick>
 8004c64:	4602      	mov	r2, r0
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	2b64      	cmp	r3, #100	; 0x64
 8004c6c:	d901      	bls.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c6e:	2303      	movs	r3, #3
 8004c70:	e007      	b.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c7a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c7e:	d1ef      	bne.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004c80:	2300      	movs	r3, #0
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3720      	adds	r7, #32
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40023800 	.word	0x40023800

08004c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e049      	b.n	8004d36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d106      	bne.n	8004cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7fd fa9c 	bl	80021f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2202      	movs	r2, #2
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4610      	mov	r0, r2
 8004cd0:	f000 fc34 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
	...

08004d40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d001      	beq.n	8004d58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e054      	b.n	8004e02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2202      	movs	r2, #2
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68da      	ldr	r2, [r3, #12]
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f042 0201 	orr.w	r2, r2, #1
 8004d6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d022      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d82:	d01d      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a22      	ldr	r2, [pc, #136]	; (8004e14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	d018      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a21      	ldr	r2, [pc, #132]	; (8004e18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d013      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a1f      	ldr	r2, [pc, #124]	; (8004e1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00e      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a1e      	ldr	r2, [pc, #120]	; (8004e20 <HAL_TIM_Base_Start_IT+0xe0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d009      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a1c      	ldr	r2, [pc, #112]	; (8004e24 <HAL_TIM_Base_Start_IT+0xe4>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <HAL_TIM_Base_Start_IT+0x80>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a1b      	ldr	r2, [pc, #108]	; (8004e28 <HAL_TIM_Base_Start_IT+0xe8>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d115      	bne.n	8004dec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689a      	ldr	r2, [r3, #8]
 8004dc6:	4b19      	ldr	r3, [pc, #100]	; (8004e2c <HAL_TIM_Base_Start_IT+0xec>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2b06      	cmp	r3, #6
 8004dd0:	d015      	beq.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dd8:	d011      	beq.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dea:	e008      	b.n	8004dfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f042 0201 	orr.w	r2, r2, #1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	e000      	b.n	8004e00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3714      	adds	r7, #20
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	40010000 	.word	0x40010000
 8004e14:	40000400 	.word	0x40000400
 8004e18:	40000800 	.word	0x40000800
 8004e1c:	40000c00 	.word	0x40000c00
 8004e20:	40010400 	.word	0x40010400
 8004e24:	40014000 	.word	0x40014000
 8004e28:	40001800 	.word	0x40001800
 8004e2c:	00010007 	.word	0x00010007

08004e30 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b082      	sub	sp, #8
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d101      	bne.n	8004e42 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	e049      	b.n	8004ed6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d106      	bne.n	8004e5c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2200      	movs	r2, #0
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e56:	6878      	ldr	r0, [r7, #4]
 8004e58:	f000 f841 	bl	8004ede <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2202      	movs	r2, #2
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	4610      	mov	r0, r2
 8004e70:	f000 fb64 	bl	800553c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}

08004ede <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ee6:	bf00      	nop
 8004ee8:	370c      	adds	r7, #12
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b082      	sub	sp, #8
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f003 0302 	and.w	r3, r3, #2
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d122      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b02      	cmp	r3, #2
 8004f14:	d11b      	bne.n	8004f4e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f06f 0202 	mvn.w	r2, #2
 8004f1e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	699b      	ldr	r3, [r3, #24]
 8004f2c:	f003 0303 	and.w	r3, r3, #3
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d003      	beq.n	8004f3c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 fae3 	bl	8005500 <HAL_TIM_IC_CaptureCallback>
 8004f3a:	e005      	b.n	8004f48 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 fad5 	bl	80054ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f42:	6878      	ldr	r0, [r7, #4]
 8004f44:	f000 fae6 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691b      	ldr	r3, [r3, #16]
 8004f54:	f003 0304 	and.w	r3, r3, #4
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d122      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68db      	ldr	r3, [r3, #12]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d11b      	bne.n	8004fa2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f06f 0204 	mvn.w	r2, #4
 8004f72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d003      	beq.n	8004f90 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f000 fab9 	bl	8005500 <HAL_TIM_IC_CaptureCallback>
 8004f8e:	e005      	b.n	8004f9c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f000 faab 	bl	80054ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 fabc 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	f003 0308 	and.w	r3, r3, #8
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d122      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	68db      	ldr	r3, [r3, #12]
 8004fb6:	f003 0308 	and.w	r3, r3, #8
 8004fba:	2b08      	cmp	r3, #8
 8004fbc:	d11b      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f06f 0208 	mvn.w	r2, #8
 8004fc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2204      	movs	r2, #4
 8004fcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	f003 0303 	and.w	r3, r3, #3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 fa8f 	bl	8005500 <HAL_TIM_IC_CaptureCallback>
 8004fe2:	e005      	b.n	8004ff0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fe4:	6878      	ldr	r0, [r7, #4]
 8004fe6:	f000 fa81 	bl	80054ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fea:	6878      	ldr	r0, [r7, #4]
 8004fec:	f000 fa92 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0310 	and.w	r3, r3, #16
 8005000:	2b10      	cmp	r3, #16
 8005002:	d122      	bne.n	800504a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d11b      	bne.n	800504a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f06f 0210 	mvn.w	r2, #16
 800501a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2208      	movs	r2, #8
 8005020:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69db      	ldr	r3, [r3, #28]
 8005028:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800502c:	2b00      	cmp	r3, #0
 800502e:	d003      	beq.n	8005038 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f000 fa65 	bl	8005500 <HAL_TIM_IC_CaptureCallback>
 8005036:	e005      	b.n	8005044 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f000 fa57 	bl	80054ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 fa68 	bl	8005514 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	f003 0301 	and.w	r3, r3, #1
 8005054:	2b01      	cmp	r3, #1
 8005056:	d10e      	bne.n	8005076 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b01      	cmp	r3, #1
 8005064:	d107      	bne.n	8005076 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f06f 0201 	mvn.w	r2, #1
 800506e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f7fb fe61 	bl	8000d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005080:	2b80      	cmp	r3, #128	; 0x80
 8005082:	d10e      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508e:	2b80      	cmp	r3, #128	; 0x80
 8005090:	d107      	bne.n	80050a2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800509a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 fe7d 	bl	8005d9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050b0:	d10e      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050bc:	2b80      	cmp	r3, #128	; 0x80
 80050be:	d107      	bne.n	80050d0 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80050c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fe70 	bl	8005db0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	691b      	ldr	r3, [r3, #16]
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b40      	cmp	r3, #64	; 0x40
 80050dc:	d10e      	bne.n	80050fc <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d107      	bne.n	80050fc <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 fa16 	bl	8005528 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	f003 0320 	and.w	r3, r3, #32
 8005106:	2b20      	cmp	r3, #32
 8005108:	d10e      	bne.n	8005128 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	f003 0320 	and.w	r3, r3, #32
 8005114:	2b20      	cmp	r3, #32
 8005116:	d107      	bne.n	8005128 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f06f 0220 	mvn.w	r2, #32
 8005120:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fe30 	bl	8005d88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005128:	bf00      	nop
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b086      	sub	sp, #24
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800513c:	2300      	movs	r3, #0
 800513e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005146:	2b01      	cmp	r3, #1
 8005148:	d101      	bne.n	800514e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800514a:	2302      	movs	r3, #2
 800514c:	e0ff      	b.n	800534e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2201      	movs	r2, #1
 8005152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b14      	cmp	r3, #20
 800515a:	f200 80f0 	bhi.w	800533e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	080051b9 	.word	0x080051b9
 8005168:	0800533f 	.word	0x0800533f
 800516c:	0800533f 	.word	0x0800533f
 8005170:	0800533f 	.word	0x0800533f
 8005174:	080051f9 	.word	0x080051f9
 8005178:	0800533f 	.word	0x0800533f
 800517c:	0800533f 	.word	0x0800533f
 8005180:	0800533f 	.word	0x0800533f
 8005184:	0800523b 	.word	0x0800523b
 8005188:	0800533f 	.word	0x0800533f
 800518c:	0800533f 	.word	0x0800533f
 8005190:	0800533f 	.word	0x0800533f
 8005194:	0800527b 	.word	0x0800527b
 8005198:	0800533f 	.word	0x0800533f
 800519c:	0800533f 	.word	0x0800533f
 80051a0:	0800533f 	.word	0x0800533f
 80051a4:	080052bd 	.word	0x080052bd
 80051a8:	0800533f 	.word	0x0800533f
 80051ac:	0800533f 	.word	0x0800533f
 80051b0:	0800533f 	.word	0x0800533f
 80051b4:	080052fd 	.word	0x080052fd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 fa5c 	bl	800567c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	699a      	ldr	r2, [r3, #24]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f042 0208 	orr.w	r2, r2, #8
 80051d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	699a      	ldr	r2, [r3, #24]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f022 0204 	bic.w	r2, r2, #4
 80051e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6999      	ldr	r1, [r3, #24]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	691a      	ldr	r2, [r3, #16]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	430a      	orrs	r2, r1
 80051f4:	619a      	str	r2, [r3, #24]
      break;
 80051f6:	e0a5      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68b9      	ldr	r1, [r7, #8]
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 faae 	bl	8005760 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	699a      	ldr	r2, [r3, #24]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005212:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699a      	ldr	r2, [r3, #24]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005222:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6999      	ldr	r1, [r3, #24]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	021a      	lsls	r2, r3, #8
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	430a      	orrs	r2, r1
 8005236:	619a      	str	r2, [r3, #24]
      break;
 8005238:	e084      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	68b9      	ldr	r1, [r7, #8]
 8005240:	4618      	mov	r0, r3
 8005242:	f000 fb05 	bl	8005850 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	69da      	ldr	r2, [r3, #28]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f042 0208 	orr.w	r2, r2, #8
 8005254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	69da      	ldr	r2, [r3, #28]
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f022 0204 	bic.w	r2, r2, #4
 8005264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69d9      	ldr	r1, [r3, #28]
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	691a      	ldr	r2, [r3, #16]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	61da      	str	r2, [r3, #28]
      break;
 8005278:	e064      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68b9      	ldr	r1, [r7, #8]
 8005280:	4618      	mov	r0, r3
 8005282:	f000 fb5b 	bl	800593c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005294:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	69da      	ldr	r2, [r3, #28]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	69d9      	ldr	r1, [r3, #28]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	021a      	lsls	r2, r3, #8
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	430a      	orrs	r2, r1
 80052b8:	61da      	str	r2, [r3, #28]
      break;
 80052ba:	e043      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68b9      	ldr	r1, [r7, #8]
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 fb92 	bl	80059ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f042 0208 	orr.w	r2, r2, #8
 80052d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f022 0204 	bic.w	r2, r2, #4
 80052e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691a      	ldr	r2, [r3, #16]
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	430a      	orrs	r2, r1
 80052f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80052fa:	e023      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68b9      	ldr	r1, [r7, #8]
 8005302:	4618      	mov	r0, r3
 8005304:	f000 fbc4 	bl	8005a90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005316:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005326:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	691b      	ldr	r3, [r3, #16]
 8005332:	021a      	lsls	r2, r3, #8
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	430a      	orrs	r2, r1
 800533a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800533c:	e002      	b.n	8005344 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	75fb      	strb	r3, [r7, #23]
      break;
 8005342:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2200      	movs	r2, #0
 8005348:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800534c:	7dfb      	ldrb	r3, [r7, #23]
}
 800534e:	4618      	mov	r0, r3
 8005350:	3718      	adds	r7, #24
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}
 8005356:	bf00      	nop

08005358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e0b4      	b.n	80054de <HAL_TIM_ConfigClockSource+0x186>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	4b56      	ldr	r3, [pc, #344]	; (80054e8 <HAL_TIM_ConfigClockSource+0x190>)
 8005390:	4013      	ands	r3, r2
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800539a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ac:	d03e      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xd4>
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053b2:	f200 8087 	bhi.w	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ba:	f000 8086 	beq.w	80054ca <HAL_TIM_ConfigClockSource+0x172>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c2:	d87f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b70      	cmp	r3, #112	; 0x70
 80053c6:	d01a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xa6>
 80053c8:	2b70      	cmp	r3, #112	; 0x70
 80053ca:	d87b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b60      	cmp	r3, #96	; 0x60
 80053ce:	d050      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x11a>
 80053d0:	2b60      	cmp	r3, #96	; 0x60
 80053d2:	d877      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b50      	cmp	r3, #80	; 0x50
 80053d6:	d03c      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xfa>
 80053d8:	2b50      	cmp	r3, #80	; 0x50
 80053da:	d873      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b40      	cmp	r3, #64	; 0x40
 80053de:	d058      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x13a>
 80053e0:	2b40      	cmp	r3, #64	; 0x40
 80053e2:	d86f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b30      	cmp	r3, #48	; 0x30
 80053e6:	d064      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b30      	cmp	r3, #48	; 0x30
 80053ea:	d86b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d060      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d867      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d05a      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	e062      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f000 fc0d 	bl	8005c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e04f      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f000 fbf6 	bl	8005c2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e03c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	461a      	mov	r2, r3
 8005460:	f000 fb6a 	bl	8005b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	; 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fbc3 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005470:	e02c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
 800547e:	461a      	mov	r2, r3
 8005480:	f000 fb89 	bl	8005b96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2160      	movs	r1, #96	; 0x60
 800548a:	4618      	mov	r0, r3
 800548c:	f000 fbb3 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 8005490:	e01c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 fb4a 	bl	8005b38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2140      	movs	r1, #64	; 0x40
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fba3 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80054b0:	e00c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f000 fb9a 	bl	8005bf6 <TIM_ITRx_SetConfig>
      break;
 80054c2:	e003      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	fffeff88 	.word	0xfffeff88

080054ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800553c:	b480      	push	{r7}
 800553e:	b085      	sub	sp, #20
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a40      	ldr	r2, [pc, #256]	; (8005650 <TIM_Base_SetConfig+0x114>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d013      	beq.n	800557c <TIM_Base_SetConfig+0x40>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555a:	d00f      	beq.n	800557c <TIM_Base_SetConfig+0x40>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a3d      	ldr	r2, [pc, #244]	; (8005654 <TIM_Base_SetConfig+0x118>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d00b      	beq.n	800557c <TIM_Base_SetConfig+0x40>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a3c      	ldr	r2, [pc, #240]	; (8005658 <TIM_Base_SetConfig+0x11c>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d007      	beq.n	800557c <TIM_Base_SetConfig+0x40>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a3b      	ldr	r2, [pc, #236]	; (800565c <TIM_Base_SetConfig+0x120>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0x40>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a3a      	ldr	r2, [pc, #232]	; (8005660 <TIM_Base_SetConfig+0x124>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d108      	bne.n	800558e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005582:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	4313      	orrs	r3, r2
 800558c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a2f      	ldr	r2, [pc, #188]	; (8005650 <TIM_Base_SetConfig+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d02b      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800559c:	d027      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a2c      	ldr	r2, [pc, #176]	; (8005654 <TIM_Base_SetConfig+0x118>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d023      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a2b      	ldr	r2, [pc, #172]	; (8005658 <TIM_Base_SetConfig+0x11c>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d01f      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a2a      	ldr	r2, [pc, #168]	; (800565c <TIM_Base_SetConfig+0x120>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01b      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a29      	ldr	r2, [pc, #164]	; (8005660 <TIM_Base_SetConfig+0x124>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d017      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a28      	ldr	r2, [pc, #160]	; (8005664 <TIM_Base_SetConfig+0x128>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d013      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a27      	ldr	r2, [pc, #156]	; (8005668 <TIM_Base_SetConfig+0x12c>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d00f      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a26      	ldr	r2, [pc, #152]	; (800566c <TIM_Base_SetConfig+0x130>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d00b      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a25      	ldr	r2, [pc, #148]	; (8005670 <TIM_Base_SetConfig+0x134>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d007      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	4a24      	ldr	r2, [pc, #144]	; (8005674 <TIM_Base_SetConfig+0x138>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d003      	beq.n	80055ee <TIM_Base_SetConfig+0xb2>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4a23      	ldr	r2, [pc, #140]	; (8005678 <TIM_Base_SetConfig+0x13c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d108      	bne.n	8005600 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	695b      	ldr	r3, [r3, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	68fa      	ldr	r2, [r7, #12]
 8005612:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	689a      	ldr	r2, [r3, #8]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	4a0a      	ldr	r2, [pc, #40]	; (8005650 <TIM_Base_SetConfig+0x114>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d003      	beq.n	8005634 <TIM_Base_SetConfig+0xf8>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <TIM_Base_SetConfig+0x124>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d103      	bne.n	800563c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	615a      	str	r2, [r3, #20]
}
 8005642:	bf00      	nop
 8005644:	3714      	adds	r7, #20
 8005646:	46bd      	mov	sp, r7
 8005648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564c:	4770      	bx	lr
 800564e:	bf00      	nop
 8005650:	40010000 	.word	0x40010000
 8005654:	40000400 	.word	0x40000400
 8005658:	40000800 	.word	0x40000800
 800565c:	40000c00 	.word	0x40000c00
 8005660:	40010400 	.word	0x40010400
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800
 8005670:	40001800 	.word	0x40001800
 8005674:	40001c00 	.word	0x40001c00
 8005678:	40002000 	.word	0x40002000

0800567c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800567c:	b480      	push	{r7}
 800567e:	b087      	sub	sp, #28
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
 8005684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a1b      	ldr	r3, [r3, #32]
 800568a:	f023 0201 	bic.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a1b      	ldr	r3, [r3, #32]
 8005696:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4b2b      	ldr	r3, [pc, #172]	; (8005754 <TIM_OC1_SetConfig+0xd8>)
 80056a8:	4013      	ands	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 0303 	bic.w	r3, r3, #3
 80056b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	f023 0302 	bic.w	r3, r3, #2
 80056c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	689b      	ldr	r3, [r3, #8]
 80056ca:	697a      	ldr	r2, [r7, #20]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a21      	ldr	r2, [pc, #132]	; (8005758 <TIM_OC1_SetConfig+0xdc>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d003      	beq.n	80056e0 <TIM_OC1_SetConfig+0x64>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4a20      	ldr	r2, [pc, #128]	; (800575c <TIM_OC1_SetConfig+0xe0>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d10c      	bne.n	80056fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f023 0308 	bic.w	r3, r3, #8
 80056e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	68db      	ldr	r3, [r3, #12]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	f023 0304 	bic.w	r3, r3, #4
 80056f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a16      	ldr	r2, [pc, #88]	; (8005758 <TIM_OC1_SetConfig+0xdc>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_OC1_SetConfig+0x8e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a15      	ldr	r2, [pc, #84]	; (800575c <TIM_OC1_SetConfig+0xe0>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d111      	bne.n	800572e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005710:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005718:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	693a      	ldr	r2, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	4313      	orrs	r3, r2
 800572c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	693a      	ldr	r2, [r7, #16]
 8005732:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	685a      	ldr	r2, [r3, #4]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	697a      	ldr	r2, [r7, #20]
 8005746:	621a      	str	r2, [r3, #32]
}
 8005748:	bf00      	nop
 800574a:	371c      	adds	r7, #28
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	fffeff8f 	.word	0xfffeff8f
 8005758:	40010000 	.word	0x40010000
 800575c:	40010400 	.word	0x40010400

08005760 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005760:	b480      	push	{r7}
 8005762:	b087      	sub	sp, #28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	f023 0210 	bic.w	r2, r3, #16
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	699b      	ldr	r3, [r3, #24]
 8005786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4b2e      	ldr	r3, [pc, #184]	; (8005844 <TIM_OC2_SetConfig+0xe4>)
 800578c:	4013      	ands	r3, r2
 800578e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005796:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	021b      	lsls	r3, r3, #8
 800579e:	68fa      	ldr	r2, [r7, #12]
 80057a0:	4313      	orrs	r3, r2
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f023 0320 	bic.w	r3, r3, #32
 80057aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	011b      	lsls	r3, r3, #4
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	4a23      	ldr	r2, [pc, #140]	; (8005848 <TIM_OC2_SetConfig+0xe8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d003      	beq.n	80057c8 <TIM_OC2_SetConfig+0x68>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a22      	ldr	r2, [pc, #136]	; (800584c <TIM_OC2_SetConfig+0xec>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d10d      	bne.n	80057e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057c8:	697b      	ldr	r3, [r7, #20]
 80057ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	011b      	lsls	r3, r3, #4
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4313      	orrs	r3, r2
 80057da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a18      	ldr	r2, [pc, #96]	; (8005848 <TIM_OC2_SetConfig+0xe8>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d003      	beq.n	80057f4 <TIM_OC2_SetConfig+0x94>
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4a17      	ldr	r2, [pc, #92]	; (800584c <TIM_OC2_SetConfig+0xec>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d113      	bne.n	800581c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057f4:	693b      	ldr	r3, [r7, #16]
 80057f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005802:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	693a      	ldr	r2, [r7, #16]
 800580c:	4313      	orrs	r3, r2
 800580e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	699b      	ldr	r3, [r3, #24]
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	693a      	ldr	r2, [r7, #16]
 8005818:	4313      	orrs	r3, r2
 800581a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	693a      	ldr	r2, [r7, #16]
 8005820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	697a      	ldr	r2, [r7, #20]
 8005834:	621a      	str	r2, [r3, #32]
}
 8005836:	bf00      	nop
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	feff8fff 	.word	0xfeff8fff
 8005848:	40010000 	.word	0x40010000
 800584c:	40010400 	.word	0x40010400

08005850 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6a1b      	ldr	r3, [r3, #32]
 800585e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a1b      	ldr	r3, [r3, #32]
 800586a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	69db      	ldr	r3, [r3, #28]
 8005876:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	4b2d      	ldr	r3, [pc, #180]	; (8005930 <TIM_OC3_SetConfig+0xe0>)
 800587c:	4013      	ands	r3, r2
 800587e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0303 	bic.w	r3, r3, #3
 8005886:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	68fa      	ldr	r2, [r7, #12]
 800588e:	4313      	orrs	r3, r2
 8005890:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005898:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	4a22      	ldr	r2, [pc, #136]	; (8005934 <TIM_OC3_SetConfig+0xe4>)
 80058aa:	4293      	cmp	r3, r2
 80058ac:	d003      	beq.n	80058b6 <TIM_OC3_SetConfig+0x66>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a21      	ldr	r2, [pc, #132]	; (8005938 <TIM_OC3_SetConfig+0xe8>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d10d      	bne.n	80058d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	021b      	lsls	r3, r3, #8
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a17      	ldr	r2, [pc, #92]	; (8005934 <TIM_OC3_SetConfig+0xe4>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d003      	beq.n	80058e2 <TIM_OC3_SetConfig+0x92>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a16      	ldr	r2, [pc, #88]	; (8005938 <TIM_OC3_SetConfig+0xe8>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d113      	bne.n	800590a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058ea:	693b      	ldr	r3, [r7, #16]
 80058ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	695b      	ldr	r3, [r3, #20]
 80058f6:	011b      	lsls	r3, r3, #4
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	011b      	lsls	r3, r3, #4
 8005904:	693a      	ldr	r2, [r7, #16]
 8005906:	4313      	orrs	r3, r2
 8005908:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	621a      	str	r2, [r3, #32]
}
 8005924:	bf00      	nop
 8005926:	371c      	adds	r7, #28
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	fffeff8f 	.word	0xfffeff8f
 8005934:	40010000 	.word	0x40010000
 8005938:	40010400 	.word	0x40010400

0800593c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800593c:	b480      	push	{r7}
 800593e:	b087      	sub	sp, #28
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6a1b      	ldr	r3, [r3, #32]
 8005956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	69db      	ldr	r3, [r3, #28]
 8005962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <TIM_OC4_SetConfig+0xa4>)
 8005968:	4013      	ands	r3, r2
 800596a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	021b      	lsls	r3, r3, #8
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	031b      	lsls	r3, r3, #12
 800598e:	693a      	ldr	r2, [r7, #16]
 8005990:	4313      	orrs	r3, r2
 8005992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	4a13      	ldr	r2, [pc, #76]	; (80059e4 <TIM_OC4_SetConfig+0xa8>)
 8005998:	4293      	cmp	r3, r2
 800599a:	d003      	beq.n	80059a4 <TIM_OC4_SetConfig+0x68>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <TIM_OC4_SetConfig+0xac>)
 80059a0:	4293      	cmp	r3, r2
 80059a2:	d109      	bne.n	80059b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80059aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	695b      	ldr	r3, [r3, #20]
 80059b0:	019b      	lsls	r3, r3, #6
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	697a      	ldr	r2, [r7, #20]
 80059bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	68fa      	ldr	r2, [r7, #12]
 80059c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	685a      	ldr	r2, [r3, #4]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	693a      	ldr	r2, [r7, #16]
 80059d0:	621a      	str	r2, [r3, #32]
}
 80059d2:	bf00      	nop
 80059d4:	371c      	adds	r7, #28
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	feff8fff 	.word	0xfeff8fff
 80059e4:	40010000 	.word	0x40010000
 80059e8:	40010400 	.word	0x40010400

080059ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a1b      	ldr	r3, [r3, #32]
 80059fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6a1b      	ldr	r3, [r3, #32]
 8005a06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005a14:	68fa      	ldr	r2, [r7, #12]
 8005a16:	4b1b      	ldr	r3, [pc, #108]	; (8005a84 <TIM_OC5_SetConfig+0x98>)
 8005a18:	4013      	ands	r3, r2
 8005a1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	68fa      	ldr	r2, [r7, #12]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005a2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	041b      	lsls	r3, r3, #16
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	4313      	orrs	r3, r2
 8005a38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a12      	ldr	r2, [pc, #72]	; (8005a88 <TIM_OC5_SetConfig+0x9c>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_OC5_SetConfig+0x5e>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a11      	ldr	r2, [pc, #68]	; (8005a8c <TIM_OC5_SetConfig+0xa0>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d109      	bne.n	8005a5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	68fa      	ldr	r2, [r7, #12]
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	621a      	str	r2, [r3, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	371c      	adds	r7, #28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	fffeff8f 	.word	0xfffeff8f
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	4b1c      	ldr	r3, [pc, #112]	; (8005b2c <TIM_OC6_SetConfig+0x9c>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	68fa      	ldr	r2, [r7, #12]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005ad2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	689b      	ldr	r3, [r3, #8]
 8005ad8:	051b      	lsls	r3, r3, #20
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	4a13      	ldr	r2, [pc, #76]	; (8005b30 <TIM_OC6_SetConfig+0xa0>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d003      	beq.n	8005af0 <TIM_OC6_SetConfig+0x60>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a12      	ldr	r2, [pc, #72]	; (8005b34 <TIM_OC6_SetConfig+0xa4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d109      	bne.n	8005b04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005af0:	697b      	ldr	r3, [r7, #20]
 8005af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005af6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	029b      	lsls	r3, r3, #10
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	693a      	ldr	r2, [r7, #16]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	feff8fff 	.word	0xfeff8fff
 8005b30:	40010000 	.word	0x40010000
 8005b34:	40010400 	.word	0x40010400

08005b38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6a1b      	ldr	r3, [r3, #32]
 8005b48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	6a1b      	ldr	r3, [r3, #32]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
 8005b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 030a 	bic.w	r3, r3, #10
 8005b74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	693a      	ldr	r2, [r7, #16]
 8005b82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	621a      	str	r2, [r3, #32]
}
 8005b8a:	bf00      	nop
 8005b8c:	371c      	adds	r7, #28
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b96:	b480      	push	{r7}
 8005b98:	b087      	sub	sp, #28
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	60f8      	str	r0, [r7, #12]
 8005b9e:	60b9      	str	r1, [r7, #8]
 8005ba0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	f023 0210 	bic.w	r2, r3, #16
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005bc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	031b      	lsls	r3, r3, #12
 8005bc6:	697a      	ldr	r2, [r7, #20]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005bd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	011b      	lsls	r3, r3, #4
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	697a      	ldr	r2, [r7, #20]
 8005be2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	693a      	ldr	r2, [r7, #16]
 8005be8:	621a      	str	r2, [r3, #32]
}
 8005bea:	bf00      	nop
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b085      	sub	sp, #20
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c0e:	683a      	ldr	r2, [r7, #0]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	f043 0307 	orr.w	r3, r3, #7
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68fa      	ldr	r2, [r7, #12]
 8005c1e:	609a      	str	r2, [r3, #8]
}
 8005c20:	bf00      	nop
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b087      	sub	sp, #28
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
 8005c38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	021a      	lsls	r2, r3, #8
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	431a      	orrs	r2, r3
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	697a      	ldr	r2, [r7, #20]
 8005c5e:	609a      	str	r2, [r3, #8]
}
 8005c60:	bf00      	nop
 8005c62:	371c      	adds	r7, #28
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e06d      	b.n	8005d60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a30      	ldr	r2, [pc, #192]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d004      	beq.n	8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a2f      	ldr	r2, [pc, #188]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d108      	bne.n	8005cca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005cbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	685b      	ldr	r3, [r3, #4]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	68fa      	ldr	r2, [r7, #12]
 8005ce2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a20      	ldr	r2, [pc, #128]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d022      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf6:	d01d      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a1d      	ldr	r2, [pc, #116]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a1c      	ldr	r2, [pc, #112]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a1a      	ldr	r2, [pc, #104]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a15      	ldr	r2, [pc, #84]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a16      	ldr	r2, [pc, #88]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d10c      	bne.n	8005d4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	68ba      	ldr	r2, [r7, #8]
 8005d4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40010400 	.word	0x40010400
 8005d74:	40000400 	.word	0x40000400
 8005d78:	40000800 	.word	0x40000800
 8005d7c:	40000c00 	.word	0x40000c00
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40001800 	.word	0x40001800

08005d88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d9c:	b480      	push	{r7}
 8005d9e:	b083      	sub	sp, #12
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005da4:	bf00      	nop
 8005da6:	370c      	adds	r7, #12
 8005da8:	46bd      	mov	sp, r7
 8005daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dae:	4770      	bx	lr

08005db0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e040      	b.n	8005e58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d106      	bne.n	8005dec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fc fa72 	bl	80022d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2224      	movs	r2, #36	; 0x24
 8005df0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 0201 	bic.w	r2, r2, #1
 8005e00:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fb16 	bl	8006434 <UART_SetConfig>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d101      	bne.n	8005e12 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	e022      	b.n	8005e58 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005e1a:	6878      	ldr	r0, [r7, #4]
 8005e1c:	f000 fd6e 	bl	80068fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	685a      	ldr	r2, [r3, #4]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005e2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	689a      	ldr	r2, [r3, #8]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005e3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681a      	ldr	r2, [r3, #0]
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f000 fdf5 	bl	8006a40 <UART_CheckIdleState>
 8005e56:	4603      	mov	r3, r0
}
 8005e58:	4618      	mov	r0, r3
 8005e5a:	3708      	adds	r7, #8
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b0ba      	sub	sp, #232	; 0xe8
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	689b      	ldr	r3, [r3, #8]
 8005e82:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e86:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005e8a:	f640 030f 	movw	r3, #2063	; 0x80f
 8005e8e:	4013      	ands	r3, r2
 8005e90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005e94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d115      	bne.n	8005ec8 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ea0:	f003 0320 	and.w	r3, r3, #32
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d00f      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d009      	beq.n	8005ec8 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	f000 828f 	beq.w	80063dc <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	4798      	blx	r3
      }
      return;
 8005ec6:	e289      	b.n	80063dc <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ec8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8117 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed6:	f003 0301 	and.w	r3, r3, #1
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d106      	bne.n	8005eec <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ede:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005ee2:	4b85      	ldr	r3, [pc, #532]	; (80060f8 <HAL_UART_IRQHandler+0x298>)
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	f000 810a 	beq.w	8006100 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005eec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef0:	f003 0301 	and.w	r3, r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d011      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	2201      	movs	r2, #1
 8005f0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f12:	f043 0201 	orr.w	r2, r3, #1
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f20:	f003 0302 	and.w	r3, r3, #2
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d011      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
 8005f28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f2c:	f003 0301 	and.w	r3, r3, #1
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00b      	beq.n	8005f4c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2202      	movs	r2, #2
 8005f3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f42:	f043 0204 	orr.w	r2, r3, #4
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f50:	f003 0304 	and.w	r3, r3, #4
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d011      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
 8005f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00b      	beq.n	8005f7c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2204      	movs	r2, #4
 8005f6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005f72:	f043 0202 	orr.w	r2, r3, #2
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f80:	f003 0308 	and.w	r3, r3, #8
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d017      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f8c:	f003 0320 	and.w	r3, r3, #32
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d105      	bne.n	8005fa0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f98:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00b      	beq.n	8005fb8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2208      	movs	r2, #8
 8005fa6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fae:	f043 0208 	orr.w	r2, r3, #8
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d012      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
 8005fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00c      	beq.n	8005fea <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fd8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005fe0:	f043 0220 	orr.w	r2, r3, #32
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	f000 81f5 	beq.w	80063e0 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ffa:	f003 0320 	and.w	r3, r3, #32
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d00d      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006002:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006012:	2b00      	cmp	r3, #0
 8006014:	d003      	beq.n	800601e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006024:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006032:	2b40      	cmp	r3, #64	; 0x40
 8006034:	d005      	beq.n	8006042 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800603a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800603e:	2b00      	cmp	r3, #0
 8006040:	d04f      	beq.n	80060e2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fdf3 	bl	8006c2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	689b      	ldr	r3, [r3, #8]
 800604e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006052:	2b40      	cmp	r3, #64	; 0x40
 8006054:	d141      	bne.n	80060da <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3308      	adds	r3, #8
 800605c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006060:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006064:	e853 3f00 	ldrex	r3, [r3]
 8006068:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800606c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006070:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006074:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	3308      	adds	r3, #8
 800607e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006082:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006086:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800608a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800608e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006092:	e841 2300 	strex	r3, r2, [r1]
 8006096:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800609a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1d9      	bne.n	8006056 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d013      	beq.n	80060d2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060ae:	4a13      	ldr	r2, [pc, #76]	; (80060fc <HAL_UART_IRQHandler+0x29c>)
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd fac5 	bl	8003646 <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d017      	beq.n	80060f2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d0:	e00f      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f998 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00b      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f994 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e007      	b.n	80060f2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f990 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80060f0:	e176      	b.n	80063e0 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f2:	bf00      	nop
    return;
 80060f4:	e174      	b.n	80063e0 <HAL_UART_IRQHandler+0x580>
 80060f6:	bf00      	nop
 80060f8:	04000120 	.word	0x04000120
 80060fc:	08006cf5 	.word	0x08006cf5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006104:	2b01      	cmp	r3, #1
 8006106:	f040 8144 	bne.w	8006392 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800610a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800610e:	f003 0310 	and.w	r3, r3, #16
 8006112:	2b00      	cmp	r3, #0
 8006114:	f000 813d 	beq.w	8006392 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006118:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 8136 	beq.w	8006392 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2210      	movs	r2, #16
 800612c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006138:	2b40      	cmp	r3, #64	; 0x40
 800613a:	f040 80b2 	bne.w	80062a2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685b      	ldr	r3, [r3, #4]
 8006146:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800614a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8148 	beq.w	80063e4 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800615a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800615e:	429a      	cmp	r2, r3
 8006160:	f080 8140 	bcs.w	80063e4 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006178:	f000 8085 	beq.w	8006286 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006184:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006188:	e853 3f00 	ldrex	r3, [r3]
 800618c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006190:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006198:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	461a      	mov	r2, r3
 80061a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061b6:	e841 2300 	strex	r3, r2, [r1]
 80061ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d1da      	bne.n	800617c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	3308      	adds	r3, #8
 80061cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061d0:	e853 3f00 	ldrex	r3, [r3]
 80061d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061d8:	f023 0301 	bic.w	r3, r3, #1
 80061dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	3308      	adds	r3, #8
 80061e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80061f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80061fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1e1      	bne.n	80061c6 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	3308      	adds	r3, #8
 8006208:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800620c:	e853 3f00 	ldrex	r3, [r3]
 8006210:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006212:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006218:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	3308      	adds	r3, #8
 8006222:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006226:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006228:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800622a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800622c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800622e:	e841 2300 	strex	r3, r2, [r1]
 8006232:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006234:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006236:	2b00      	cmp	r3, #0
 8006238:	d1e3      	bne.n	8006202 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2220      	movs	r2, #32
 800623e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006254:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006268:	65bb      	str	r3, [r7, #88]	; 0x58
 800626a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800626e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006276:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e4      	bne.n	8006246 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006280:	4618      	mov	r0, r3
 8006282:	f7fd f970 	bl	8003566 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006292:	b29b      	uxth	r3, r3
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	b29b      	uxth	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f8be 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a0:	e0a0      	b.n	80063e4 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062ae:	b29b      	uxth	r3, r3
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80062bc:	b29b      	uxth	r3, r3
 80062be:	2b00      	cmp	r3, #0
 80062c0:	f000 8092 	beq.w	80063e8 <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 80062c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f000 808d 	beq.w	80063e8 <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062d6:	e853 3f00 	ldrex	r3, [r3]
 80062da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	461a      	mov	r2, r3
 80062ec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80062f0:	647b      	str	r3, [r7, #68]	; 0x44
 80062f2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062f4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80062f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062f8:	e841 2300 	strex	r3, r2, [r1]
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80062fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1e4      	bne.n	80062ce <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3308      	adds	r3, #8
 800630a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800630e:	e853 3f00 	ldrex	r3, [r3]
 8006312:	623b      	str	r3, [r7, #32]
   return(result);
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	f023 0301 	bic.w	r3, r3, #1
 800631a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	3308      	adds	r3, #8
 8006324:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006328:	633a      	str	r2, [r7, #48]	; 0x30
 800632a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800632c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800632e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006330:	e841 2300 	strex	r3, r2, [r1]
 8006334:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006338:	2b00      	cmp	r3, #0
 800633a:	d1e3      	bne.n	8006304 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2220      	movs	r2, #32
 8006340:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	e853 3f00 	ldrex	r3, [r3]
 800635a:	60fb      	str	r3, [r7, #12]
   return(result);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f023 0310 	bic.w	r3, r3, #16
 8006362:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006370:	61fb      	str	r3, [r7, #28]
 8006372:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006374:	69b9      	ldr	r1, [r7, #24]
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	e841 2300 	strex	r3, r2, [r1]
 800637c:	617b      	str	r3, [r7, #20]
   return(result);
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d1e4      	bne.n	800634e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006384:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006388:	4619      	mov	r1, r3
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f846 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006390:	e02a      	b.n	80063e8 <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006396:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639a:	2b00      	cmp	r3, #0
 800639c:	d00e      	beq.n	80063bc <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800639e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d008      	beq.n	80063bc <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01c      	beq.n	80063ec <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
    }
    return;
 80063ba:	e017      	b.n	80063ec <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d012      	beq.n	80063ee <HAL_UART_IRQHandler+0x58e>
 80063c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00c      	beq.n	80063ee <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f000 fca3 	bl	8006d20 <UART_EndTransmit_IT>
    return;
 80063da:	e008      	b.n	80063ee <HAL_UART_IRQHandler+0x58e>
      return;
 80063dc:	bf00      	nop
 80063de:	e006      	b.n	80063ee <HAL_UART_IRQHandler+0x58e>
    return;
 80063e0:	bf00      	nop
 80063e2:	e004      	b.n	80063ee <HAL_UART_IRQHandler+0x58e>
      return;
 80063e4:	bf00      	nop
 80063e6:	e002      	b.n	80063ee <HAL_UART_IRQHandler+0x58e>
      return;
 80063e8:	bf00      	nop
 80063ea:	e000      	b.n	80063ee <HAL_UART_IRQHandler+0x58e>
    return;
 80063ec:	bf00      	nop
  }

}
 80063ee:	37e8      	adds	r7, #232	; 0xe8
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}

080063f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b088      	sub	sp, #32
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800643c:	2300      	movs	r3, #0
 800643e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	691b      	ldr	r3, [r3, #16]
 8006448:	431a      	orrs	r2, r3
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	431a      	orrs	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	4313      	orrs	r3, r2
 8006456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	4ba6      	ldr	r3, [pc, #664]	; (80066f8 <UART_SetConfig+0x2c4>)
 8006460:	4013      	ands	r3, r2
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	6812      	ldr	r2, [r2, #0]
 8006466:	6979      	ldr	r1, [r7, #20]
 8006468:	430b      	orrs	r3, r1
 800646a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	685b      	ldr	r3, [r3, #4]
 8006472:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a1b      	ldr	r3, [r3, #32]
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4313      	orrs	r3, r2
 8006490:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	697a      	ldr	r2, [r7, #20]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a94      	ldr	r2, [pc, #592]	; (80066fc <UART_SetConfig+0x2c8>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d120      	bne.n	80064f2 <UART_SetConfig+0xbe>
 80064b0:	4b93      	ldr	r3, [pc, #588]	; (8006700 <UART_SetConfig+0x2cc>)
 80064b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80064b6:	f003 0303 	and.w	r3, r3, #3
 80064ba:	2b03      	cmp	r3, #3
 80064bc:	d816      	bhi.n	80064ec <UART_SetConfig+0xb8>
 80064be:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x90>)
 80064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c4:	080064d5 	.word	0x080064d5
 80064c8:	080064e1 	.word	0x080064e1
 80064cc:	080064db 	.word	0x080064db
 80064d0:	080064e7 	.word	0x080064e7
 80064d4:	2301      	movs	r3, #1
 80064d6:	77fb      	strb	r3, [r7, #31]
 80064d8:	e150      	b.n	800677c <UART_SetConfig+0x348>
 80064da:	2302      	movs	r3, #2
 80064dc:	77fb      	strb	r3, [r7, #31]
 80064de:	e14d      	b.n	800677c <UART_SetConfig+0x348>
 80064e0:	2304      	movs	r3, #4
 80064e2:	77fb      	strb	r3, [r7, #31]
 80064e4:	e14a      	b.n	800677c <UART_SetConfig+0x348>
 80064e6:	2308      	movs	r3, #8
 80064e8:	77fb      	strb	r3, [r7, #31]
 80064ea:	e147      	b.n	800677c <UART_SetConfig+0x348>
 80064ec:	2310      	movs	r3, #16
 80064ee:	77fb      	strb	r3, [r7, #31]
 80064f0:	e144      	b.n	800677c <UART_SetConfig+0x348>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a83      	ldr	r2, [pc, #524]	; (8006704 <UART_SetConfig+0x2d0>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d132      	bne.n	8006562 <UART_SetConfig+0x12e>
 80064fc:	4b80      	ldr	r3, [pc, #512]	; (8006700 <UART_SetConfig+0x2cc>)
 80064fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006502:	f003 030c 	and.w	r3, r3, #12
 8006506:	2b0c      	cmp	r3, #12
 8006508:	d828      	bhi.n	800655c <UART_SetConfig+0x128>
 800650a:	a201      	add	r2, pc, #4	; (adr r2, 8006510 <UART_SetConfig+0xdc>)
 800650c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006510:	08006545 	.word	0x08006545
 8006514:	0800655d 	.word	0x0800655d
 8006518:	0800655d 	.word	0x0800655d
 800651c:	0800655d 	.word	0x0800655d
 8006520:	08006551 	.word	0x08006551
 8006524:	0800655d 	.word	0x0800655d
 8006528:	0800655d 	.word	0x0800655d
 800652c:	0800655d 	.word	0x0800655d
 8006530:	0800654b 	.word	0x0800654b
 8006534:	0800655d 	.word	0x0800655d
 8006538:	0800655d 	.word	0x0800655d
 800653c:	0800655d 	.word	0x0800655d
 8006540:	08006557 	.word	0x08006557
 8006544:	2300      	movs	r3, #0
 8006546:	77fb      	strb	r3, [r7, #31]
 8006548:	e118      	b.n	800677c <UART_SetConfig+0x348>
 800654a:	2302      	movs	r3, #2
 800654c:	77fb      	strb	r3, [r7, #31]
 800654e:	e115      	b.n	800677c <UART_SetConfig+0x348>
 8006550:	2304      	movs	r3, #4
 8006552:	77fb      	strb	r3, [r7, #31]
 8006554:	e112      	b.n	800677c <UART_SetConfig+0x348>
 8006556:	2308      	movs	r3, #8
 8006558:	77fb      	strb	r3, [r7, #31]
 800655a:	e10f      	b.n	800677c <UART_SetConfig+0x348>
 800655c:	2310      	movs	r3, #16
 800655e:	77fb      	strb	r3, [r7, #31]
 8006560:	e10c      	b.n	800677c <UART_SetConfig+0x348>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a68      	ldr	r2, [pc, #416]	; (8006708 <UART_SetConfig+0x2d4>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d120      	bne.n	80065ae <UART_SetConfig+0x17a>
 800656c:	4b64      	ldr	r3, [pc, #400]	; (8006700 <UART_SetConfig+0x2cc>)
 800656e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006572:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006576:	2b30      	cmp	r3, #48	; 0x30
 8006578:	d013      	beq.n	80065a2 <UART_SetConfig+0x16e>
 800657a:	2b30      	cmp	r3, #48	; 0x30
 800657c:	d814      	bhi.n	80065a8 <UART_SetConfig+0x174>
 800657e:	2b20      	cmp	r3, #32
 8006580:	d009      	beq.n	8006596 <UART_SetConfig+0x162>
 8006582:	2b20      	cmp	r3, #32
 8006584:	d810      	bhi.n	80065a8 <UART_SetConfig+0x174>
 8006586:	2b00      	cmp	r3, #0
 8006588:	d002      	beq.n	8006590 <UART_SetConfig+0x15c>
 800658a:	2b10      	cmp	r3, #16
 800658c:	d006      	beq.n	800659c <UART_SetConfig+0x168>
 800658e:	e00b      	b.n	80065a8 <UART_SetConfig+0x174>
 8006590:	2300      	movs	r3, #0
 8006592:	77fb      	strb	r3, [r7, #31]
 8006594:	e0f2      	b.n	800677c <UART_SetConfig+0x348>
 8006596:	2302      	movs	r3, #2
 8006598:	77fb      	strb	r3, [r7, #31]
 800659a:	e0ef      	b.n	800677c <UART_SetConfig+0x348>
 800659c:	2304      	movs	r3, #4
 800659e:	77fb      	strb	r3, [r7, #31]
 80065a0:	e0ec      	b.n	800677c <UART_SetConfig+0x348>
 80065a2:	2308      	movs	r3, #8
 80065a4:	77fb      	strb	r3, [r7, #31]
 80065a6:	e0e9      	b.n	800677c <UART_SetConfig+0x348>
 80065a8:	2310      	movs	r3, #16
 80065aa:	77fb      	strb	r3, [r7, #31]
 80065ac:	e0e6      	b.n	800677c <UART_SetConfig+0x348>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a56      	ldr	r2, [pc, #344]	; (800670c <UART_SetConfig+0x2d8>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d120      	bne.n	80065fa <UART_SetConfig+0x1c6>
 80065b8:	4b51      	ldr	r3, [pc, #324]	; (8006700 <UART_SetConfig+0x2cc>)
 80065ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80065be:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80065c2:	2bc0      	cmp	r3, #192	; 0xc0
 80065c4:	d013      	beq.n	80065ee <UART_SetConfig+0x1ba>
 80065c6:	2bc0      	cmp	r3, #192	; 0xc0
 80065c8:	d814      	bhi.n	80065f4 <UART_SetConfig+0x1c0>
 80065ca:	2b80      	cmp	r3, #128	; 0x80
 80065cc:	d009      	beq.n	80065e2 <UART_SetConfig+0x1ae>
 80065ce:	2b80      	cmp	r3, #128	; 0x80
 80065d0:	d810      	bhi.n	80065f4 <UART_SetConfig+0x1c0>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <UART_SetConfig+0x1a8>
 80065d6:	2b40      	cmp	r3, #64	; 0x40
 80065d8:	d006      	beq.n	80065e8 <UART_SetConfig+0x1b4>
 80065da:	e00b      	b.n	80065f4 <UART_SetConfig+0x1c0>
 80065dc:	2300      	movs	r3, #0
 80065de:	77fb      	strb	r3, [r7, #31]
 80065e0:	e0cc      	b.n	800677c <UART_SetConfig+0x348>
 80065e2:	2302      	movs	r3, #2
 80065e4:	77fb      	strb	r3, [r7, #31]
 80065e6:	e0c9      	b.n	800677c <UART_SetConfig+0x348>
 80065e8:	2304      	movs	r3, #4
 80065ea:	77fb      	strb	r3, [r7, #31]
 80065ec:	e0c6      	b.n	800677c <UART_SetConfig+0x348>
 80065ee:	2308      	movs	r3, #8
 80065f0:	77fb      	strb	r3, [r7, #31]
 80065f2:	e0c3      	b.n	800677c <UART_SetConfig+0x348>
 80065f4:	2310      	movs	r3, #16
 80065f6:	77fb      	strb	r3, [r7, #31]
 80065f8:	e0c0      	b.n	800677c <UART_SetConfig+0x348>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	4a44      	ldr	r2, [pc, #272]	; (8006710 <UART_SetConfig+0x2dc>)
 8006600:	4293      	cmp	r3, r2
 8006602:	d125      	bne.n	8006650 <UART_SetConfig+0x21c>
 8006604:	4b3e      	ldr	r3, [pc, #248]	; (8006700 <UART_SetConfig+0x2cc>)
 8006606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800660a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800660e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006612:	d017      	beq.n	8006644 <UART_SetConfig+0x210>
 8006614:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006618:	d817      	bhi.n	800664a <UART_SetConfig+0x216>
 800661a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800661e:	d00b      	beq.n	8006638 <UART_SetConfig+0x204>
 8006620:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006624:	d811      	bhi.n	800664a <UART_SetConfig+0x216>
 8006626:	2b00      	cmp	r3, #0
 8006628:	d003      	beq.n	8006632 <UART_SetConfig+0x1fe>
 800662a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800662e:	d006      	beq.n	800663e <UART_SetConfig+0x20a>
 8006630:	e00b      	b.n	800664a <UART_SetConfig+0x216>
 8006632:	2300      	movs	r3, #0
 8006634:	77fb      	strb	r3, [r7, #31]
 8006636:	e0a1      	b.n	800677c <UART_SetConfig+0x348>
 8006638:	2302      	movs	r3, #2
 800663a:	77fb      	strb	r3, [r7, #31]
 800663c:	e09e      	b.n	800677c <UART_SetConfig+0x348>
 800663e:	2304      	movs	r3, #4
 8006640:	77fb      	strb	r3, [r7, #31]
 8006642:	e09b      	b.n	800677c <UART_SetConfig+0x348>
 8006644:	2308      	movs	r3, #8
 8006646:	77fb      	strb	r3, [r7, #31]
 8006648:	e098      	b.n	800677c <UART_SetConfig+0x348>
 800664a:	2310      	movs	r3, #16
 800664c:	77fb      	strb	r3, [r7, #31]
 800664e:	e095      	b.n	800677c <UART_SetConfig+0x348>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a2f      	ldr	r2, [pc, #188]	; (8006714 <UART_SetConfig+0x2e0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d125      	bne.n	80066a6 <UART_SetConfig+0x272>
 800665a:	4b29      	ldr	r3, [pc, #164]	; (8006700 <UART_SetConfig+0x2cc>)
 800665c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006660:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006664:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006668:	d017      	beq.n	800669a <UART_SetConfig+0x266>
 800666a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800666e:	d817      	bhi.n	80066a0 <UART_SetConfig+0x26c>
 8006670:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006674:	d00b      	beq.n	800668e <UART_SetConfig+0x25a>
 8006676:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800667a:	d811      	bhi.n	80066a0 <UART_SetConfig+0x26c>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d003      	beq.n	8006688 <UART_SetConfig+0x254>
 8006680:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006684:	d006      	beq.n	8006694 <UART_SetConfig+0x260>
 8006686:	e00b      	b.n	80066a0 <UART_SetConfig+0x26c>
 8006688:	2301      	movs	r3, #1
 800668a:	77fb      	strb	r3, [r7, #31]
 800668c:	e076      	b.n	800677c <UART_SetConfig+0x348>
 800668e:	2302      	movs	r3, #2
 8006690:	77fb      	strb	r3, [r7, #31]
 8006692:	e073      	b.n	800677c <UART_SetConfig+0x348>
 8006694:	2304      	movs	r3, #4
 8006696:	77fb      	strb	r3, [r7, #31]
 8006698:	e070      	b.n	800677c <UART_SetConfig+0x348>
 800669a:	2308      	movs	r3, #8
 800669c:	77fb      	strb	r3, [r7, #31]
 800669e:	e06d      	b.n	800677c <UART_SetConfig+0x348>
 80066a0:	2310      	movs	r3, #16
 80066a2:	77fb      	strb	r3, [r7, #31]
 80066a4:	e06a      	b.n	800677c <UART_SetConfig+0x348>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a1b      	ldr	r2, [pc, #108]	; (8006718 <UART_SetConfig+0x2e4>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d138      	bne.n	8006722 <UART_SetConfig+0x2ee>
 80066b0:	4b13      	ldr	r3, [pc, #76]	; (8006700 <UART_SetConfig+0x2cc>)
 80066b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80066ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066be:	d017      	beq.n	80066f0 <UART_SetConfig+0x2bc>
 80066c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80066c4:	d82a      	bhi.n	800671c <UART_SetConfig+0x2e8>
 80066c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066ca:	d00b      	beq.n	80066e4 <UART_SetConfig+0x2b0>
 80066cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066d0:	d824      	bhi.n	800671c <UART_SetConfig+0x2e8>
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <UART_SetConfig+0x2aa>
 80066d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066da:	d006      	beq.n	80066ea <UART_SetConfig+0x2b6>
 80066dc:	e01e      	b.n	800671c <UART_SetConfig+0x2e8>
 80066de:	2300      	movs	r3, #0
 80066e0:	77fb      	strb	r3, [r7, #31]
 80066e2:	e04b      	b.n	800677c <UART_SetConfig+0x348>
 80066e4:	2302      	movs	r3, #2
 80066e6:	77fb      	strb	r3, [r7, #31]
 80066e8:	e048      	b.n	800677c <UART_SetConfig+0x348>
 80066ea:	2304      	movs	r3, #4
 80066ec:	77fb      	strb	r3, [r7, #31]
 80066ee:	e045      	b.n	800677c <UART_SetConfig+0x348>
 80066f0:	2308      	movs	r3, #8
 80066f2:	77fb      	strb	r3, [r7, #31]
 80066f4:	e042      	b.n	800677c <UART_SetConfig+0x348>
 80066f6:	bf00      	nop
 80066f8:	efff69f3 	.word	0xefff69f3
 80066fc:	40011000 	.word	0x40011000
 8006700:	40023800 	.word	0x40023800
 8006704:	40004400 	.word	0x40004400
 8006708:	40004800 	.word	0x40004800
 800670c:	40004c00 	.word	0x40004c00
 8006710:	40005000 	.word	0x40005000
 8006714:	40011400 	.word	0x40011400
 8006718:	40007800 	.word	0x40007800
 800671c:	2310      	movs	r3, #16
 800671e:	77fb      	strb	r3, [r7, #31]
 8006720:	e02c      	b.n	800677c <UART_SetConfig+0x348>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a72      	ldr	r2, [pc, #456]	; (80068f0 <UART_SetConfig+0x4bc>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d125      	bne.n	8006778 <UART_SetConfig+0x344>
 800672c:	4b71      	ldr	r3, [pc, #452]	; (80068f4 <UART_SetConfig+0x4c0>)
 800672e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006732:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006736:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800673a:	d017      	beq.n	800676c <UART_SetConfig+0x338>
 800673c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006740:	d817      	bhi.n	8006772 <UART_SetConfig+0x33e>
 8006742:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006746:	d00b      	beq.n	8006760 <UART_SetConfig+0x32c>
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	d811      	bhi.n	8006772 <UART_SetConfig+0x33e>
 800674e:	2b00      	cmp	r3, #0
 8006750:	d003      	beq.n	800675a <UART_SetConfig+0x326>
 8006752:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006756:	d006      	beq.n	8006766 <UART_SetConfig+0x332>
 8006758:	e00b      	b.n	8006772 <UART_SetConfig+0x33e>
 800675a:	2300      	movs	r3, #0
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e00d      	b.n	800677c <UART_SetConfig+0x348>
 8006760:	2302      	movs	r3, #2
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e00a      	b.n	800677c <UART_SetConfig+0x348>
 8006766:	2304      	movs	r3, #4
 8006768:	77fb      	strb	r3, [r7, #31]
 800676a:	e007      	b.n	800677c <UART_SetConfig+0x348>
 800676c:	2308      	movs	r3, #8
 800676e:	77fb      	strb	r3, [r7, #31]
 8006770:	e004      	b.n	800677c <UART_SetConfig+0x348>
 8006772:	2310      	movs	r3, #16
 8006774:	77fb      	strb	r3, [r7, #31]
 8006776:	e001      	b.n	800677c <UART_SetConfig+0x348>
 8006778:	2310      	movs	r3, #16
 800677a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	69db      	ldr	r3, [r3, #28]
 8006780:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006784:	d15b      	bne.n	800683e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006786:	7ffb      	ldrb	r3, [r7, #31]
 8006788:	2b08      	cmp	r3, #8
 800678a:	d828      	bhi.n	80067de <UART_SetConfig+0x3aa>
 800678c:	a201      	add	r2, pc, #4	; (adr r2, 8006794 <UART_SetConfig+0x360>)
 800678e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006792:	bf00      	nop
 8006794:	080067b9 	.word	0x080067b9
 8006798:	080067c1 	.word	0x080067c1
 800679c:	080067c9 	.word	0x080067c9
 80067a0:	080067df 	.word	0x080067df
 80067a4:	080067cf 	.word	0x080067cf
 80067a8:	080067df 	.word	0x080067df
 80067ac:	080067df 	.word	0x080067df
 80067b0:	080067df 	.word	0x080067df
 80067b4:	080067d7 	.word	0x080067d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80067b8:	f7fd fe52 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 80067bc:	61b8      	str	r0, [r7, #24]
        break;
 80067be:	e013      	b.n	80067e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80067c0:	f7fd fe62 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 80067c4:	61b8      	str	r0, [r7, #24]
        break;
 80067c6:	e00f      	b.n	80067e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80067c8:	4b4b      	ldr	r3, [pc, #300]	; (80068f8 <UART_SetConfig+0x4c4>)
 80067ca:	61bb      	str	r3, [r7, #24]
        break;
 80067cc:	e00c      	b.n	80067e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80067ce:	f7fd fd35 	bl	800423c <HAL_RCC_GetSysClockFreq>
 80067d2:	61b8      	str	r0, [r7, #24]
        break;
 80067d4:	e008      	b.n	80067e8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067da:	61bb      	str	r3, [r7, #24]
        break;
 80067dc:	e004      	b.n	80067e8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80067de:	2300      	movs	r3, #0
 80067e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	77bb      	strb	r3, [r7, #30]
        break;
 80067e6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067e8:	69bb      	ldr	r3, [r7, #24]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d074      	beq.n	80068d8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ee:	69bb      	ldr	r3, [r7, #24]
 80067f0:	005a      	lsls	r2, r3, #1
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	441a      	add	r2, r3
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d916      	bls.n	8006838 <UART_SetConfig+0x404>
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d212      	bcs.n	8006838 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f023 030f 	bic.w	r3, r3, #15
 800681a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	085b      	lsrs	r3, r3, #1
 8006820:	b29b      	uxth	r3, r3
 8006822:	f003 0307 	and.w	r3, r3, #7
 8006826:	b29a      	uxth	r2, r3
 8006828:	89fb      	ldrh	r3, [r7, #14]
 800682a:	4313      	orrs	r3, r2
 800682c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	89fa      	ldrh	r2, [r7, #14]
 8006834:	60da      	str	r2, [r3, #12]
 8006836:	e04f      	b.n	80068d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	77bb      	strb	r3, [r7, #30]
 800683c:	e04c      	b.n	80068d8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800683e:	7ffb      	ldrb	r3, [r7, #31]
 8006840:	2b08      	cmp	r3, #8
 8006842:	d828      	bhi.n	8006896 <UART_SetConfig+0x462>
 8006844:	a201      	add	r2, pc, #4	; (adr r2, 800684c <UART_SetConfig+0x418>)
 8006846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800684a:	bf00      	nop
 800684c:	08006871 	.word	0x08006871
 8006850:	08006879 	.word	0x08006879
 8006854:	08006881 	.word	0x08006881
 8006858:	08006897 	.word	0x08006897
 800685c:	08006887 	.word	0x08006887
 8006860:	08006897 	.word	0x08006897
 8006864:	08006897 	.word	0x08006897
 8006868:	08006897 	.word	0x08006897
 800686c:	0800688f 	.word	0x0800688f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006870:	f7fd fdf6 	bl	8004460 <HAL_RCC_GetPCLK1Freq>
 8006874:	61b8      	str	r0, [r7, #24]
        break;
 8006876:	e013      	b.n	80068a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006878:	f7fd fe06 	bl	8004488 <HAL_RCC_GetPCLK2Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e00f      	b.n	80068a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006880:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <UART_SetConfig+0x4c4>)
 8006882:	61bb      	str	r3, [r7, #24]
        break;
 8006884:	e00c      	b.n	80068a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006886:	f7fd fcd9 	bl	800423c <HAL_RCC_GetSysClockFreq>
 800688a:	61b8      	str	r0, [r7, #24]
        break;
 800688c:	e008      	b.n	80068a0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800688e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006892:	61bb      	str	r3, [r7, #24]
        break;
 8006894:	e004      	b.n	80068a0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800689a:	2301      	movs	r3, #1
 800689c:	77bb      	strb	r3, [r7, #30]
        break;
 800689e:	bf00      	nop
    }

    if (pclk != 0U)
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d018      	beq.n	80068d8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	085a      	lsrs	r2, r3, #1
 80068ac:	69bb      	ldr	r3, [r7, #24]
 80068ae:	441a      	add	r2, r3
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	685b      	ldr	r3, [r3, #4]
 80068b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80068b8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	2b0f      	cmp	r3, #15
 80068be:	d909      	bls.n	80068d4 <UART_SetConfig+0x4a0>
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068c6:	d205      	bcs.n	80068d4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	b29a      	uxth	r2, r3
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	60da      	str	r2, [r3, #12]
 80068d2:	e001      	b.n	80068d8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80068e4:	7fbb      	ldrb	r3, [r7, #30]
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3720      	adds	r7, #32
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40007c00 	.word	0x40007c00
 80068f4:	40023800 	.word	0x40023800
 80068f8:	00f42400 	.word	0x00f42400

080068fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006908:	f003 0301 	and.w	r3, r3, #1
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800694c:	f003 0304 	and.w	r3, r3, #4
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01a      	beq.n	8006a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069fa:	d10a      	bne.n	8006a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b086      	sub	sp, #24
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a50:	f7fb fdd4 	bl	80025fc <HAL_GetTick>
 8006a54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d10e      	bne.n	8006a82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f817 	bl	8006aa6 <UART_WaitOnFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d001      	beq.n	8006a82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e00d      	b.n	8006a9e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2200      	movs	r2, #0
 8006a92:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2200      	movs	r2, #0
 8006a98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006a9c:	2300      	movs	r3, #0
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b09c      	sub	sp, #112	; 0x70
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	60f8      	str	r0, [r7, #12]
 8006aae:	60b9      	str	r1, [r7, #8]
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	4613      	mov	r3, r2
 8006ab4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ab6:	e0a5      	b.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ab8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006abe:	f000 80a1 	beq.w	8006c04 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ac2:	f7fb fd9b 	bl	80025fc <HAL_GetTick>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	1ad3      	subs	r3, r2, r3
 8006acc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006ace:	429a      	cmp	r2, r3
 8006ad0:	d302      	bcc.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x32>
 8006ad2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d13e      	bne.n	8006b56 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ade:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ae0:	e853 3f00 	ldrex	r3, [r3]
 8006ae4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ae8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aec:	667b      	str	r3, [r7, #100]	; 0x64
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	461a      	mov	r2, r3
 8006af4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006af8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006afe:	e841 2300 	strex	r3, r2, [r1]
 8006b02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1e6      	bne.n	8006ad8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	3308      	adds	r3, #8
 8006b10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b1c:	f023 0301 	bic.w	r3, r3, #1
 8006b20:	663b      	str	r3, [r7, #96]	; 0x60
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	3308      	adds	r3, #8
 8006b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8006b2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b32:	e841 2300 	strex	r3, r2, [r1]
 8006b36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006b38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d1e5      	bne.n	8006b0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2220      	movs	r2, #32
 8006b42:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2220      	movs	r2, #32
 8006b48:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e067      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d04f      	beq.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	69db      	ldr	r3, [r3, #28]
 8006b6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b72:	d147      	bne.n	8006c04 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b7c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	e853 3f00 	ldrex	r3, [r3]
 8006b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8006b9e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006ba2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ba4:	e841 2300 	strex	r3, r2, [r1]
 8006ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d1e6      	bne.n	8006b7e <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb8:	697b      	ldr	r3, [r7, #20]
 8006bba:	e853 3f00 	ldrex	r3, [r3]
 8006bbe:	613b      	str	r3, [r7, #16]
   return(result);
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f023 0301 	bic.w	r3, r3, #1
 8006bc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3308      	adds	r3, #8
 8006bce:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006bd0:	623a      	str	r2, [r7, #32]
 8006bd2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bd4:	69f9      	ldr	r1, [r7, #28]
 8006bd6:	6a3a      	ldr	r2, [r7, #32]
 8006bd8:	e841 2300 	strex	r3, r2, [r1]
 8006bdc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bde:	69bb      	ldr	r3, [r7, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1e5      	bne.n	8006bb0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2220      	movs	r2, #32
 8006be8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2220      	movs	r2, #32
 8006bee:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	2220      	movs	r2, #32
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006c00:	2303      	movs	r3, #3
 8006c02:	e010      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	69da      	ldr	r2, [r3, #28]
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	4013      	ands	r3, r2
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	429a      	cmp	r2, r3
 8006c12:	bf0c      	ite	eq
 8006c14:	2301      	moveq	r3, #1
 8006c16:	2300      	movne	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	f43f af4a 	beq.w	8006ab8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3770      	adds	r7, #112	; 0x70
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b095      	sub	sp, #84	; 0x54
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c54:	643b      	str	r3, [r7, #64]	; 0x40
 8006c56:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006c5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006c88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006c8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d118      	bne.n	8006cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0310 	bic.w	r3, r3, #16
 8006cb8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ce8:	bf00      	nop
 8006cea:	3754      	adds	r7, #84	; 0x54
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7ff fb78 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b088      	sub	sp, #32
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d3c:	61fb      	str	r3, [r7, #28]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	461a      	mov	r2, r3
 8006d44:	69fb      	ldr	r3, [r7, #28]
 8006d46:	61bb      	str	r3, [r7, #24]
 8006d48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6979      	ldr	r1, [r7, #20]
 8006d4c:	69ba      	ldr	r2, [r7, #24]
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	613b      	str	r3, [r7, #16]
   return(result);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e6      	bne.n	8006d28 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d66:	6878      	ldr	r0, [r7, #4]
 8006d68:	f7ff fb44 	bl	80063f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6c:	bf00      	nop
 8006d6e:	3720      	adds	r7, #32
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <__libc_init_array>:
 8006d74:	b570      	push	{r4, r5, r6, lr}
 8006d76:	4d0d      	ldr	r5, [pc, #52]	; (8006dac <__libc_init_array+0x38>)
 8006d78:	4c0d      	ldr	r4, [pc, #52]	; (8006db0 <__libc_init_array+0x3c>)
 8006d7a:	1b64      	subs	r4, r4, r5
 8006d7c:	10a4      	asrs	r4, r4, #2
 8006d7e:	2600      	movs	r6, #0
 8006d80:	42a6      	cmp	r6, r4
 8006d82:	d109      	bne.n	8006d98 <__libc_init_array+0x24>
 8006d84:	4d0b      	ldr	r5, [pc, #44]	; (8006db4 <__libc_init_array+0x40>)
 8006d86:	4c0c      	ldr	r4, [pc, #48]	; (8006db8 <__libc_init_array+0x44>)
 8006d88:	f000 f820 	bl	8006dcc <_init>
 8006d8c:	1b64      	subs	r4, r4, r5
 8006d8e:	10a4      	asrs	r4, r4, #2
 8006d90:	2600      	movs	r6, #0
 8006d92:	42a6      	cmp	r6, r4
 8006d94:	d105      	bne.n	8006da2 <__libc_init_array+0x2e>
 8006d96:	bd70      	pop	{r4, r5, r6, pc}
 8006d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d9c:	4798      	blx	r3
 8006d9e:	3601      	adds	r6, #1
 8006da0:	e7ee      	b.n	8006d80 <__libc_init_array+0xc>
 8006da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006da6:	4798      	blx	r3
 8006da8:	3601      	adds	r6, #1
 8006daa:	e7f2      	b.n	8006d92 <__libc_init_array+0x1e>
 8006dac:	08006e0c 	.word	0x08006e0c
 8006db0:	08006e0c 	.word	0x08006e0c
 8006db4:	08006e0c 	.word	0x08006e0c
 8006db8:	08006e10 	.word	0x08006e10

08006dbc <memset>:
 8006dbc:	4402      	add	r2, r0
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d100      	bne.n	8006dc6 <memset+0xa>
 8006dc4:	4770      	bx	lr
 8006dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8006dca:	e7f9      	b.n	8006dc0 <memset+0x4>

08006dcc <_init>:
 8006dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dce:	bf00      	nop
 8006dd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dd2:	bc08      	pop	{r3}
 8006dd4:	469e      	mov	lr, r3
 8006dd6:	4770      	bx	lr

08006dd8 <_fini>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr
