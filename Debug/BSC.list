
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b39c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b8  0800b56c  0800b56c  0001b56c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b924  0800b924  000200d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b924  0800b924  0001b924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b92c  0800b92c  000200d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b92c  0800b92c  0001b92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b930  0800b930  0001b930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d4  20000000  0800b934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  200000d4  0800ba08  000200d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005a0  0800ba08  000205a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018e26  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000370e  00000000  00000000  00038f2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d0  00000000  00000000  0003c638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003d908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029174  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180f2  00000000  00000000  00067bfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faf1b  00000000  00000000  0007fcee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017ac09  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005720  00000000  00000000  0017ac5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d4 	.word	0x200000d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800b554 	.word	0x0800b554

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d8 	.word	0x200000d8
 800020c:	0800b554 	.word	0x0800b554

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		init_state();
 8000ef4:	f000 f85a 	bl	8000fac <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <getState>:
/**
 * Get state.
 *
 * @return Current state.
 */
State getState() {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
    LOCK();
    State s = work.state;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <getState+0x1c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000138 	.word	0x20000138

08000f1c <getData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the buffer.
 *
 * @return Data bit length.
 */
int getData(Format *format, uint8_t *buf, int bitlength) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    LOCK();

    if (bitlength < data.bitcount) {
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <getData+0x88>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	da02      	bge.n	8000f38 <getData+0x1c>
        UNLOCK();
        return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e030      	b.n	8000f9a <getData+0x7e>
    }

    const int nbits = data.bitcount;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <getData+0x88>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
    const int nbytes = data.bitcount / 8 + (((data.bitcount % 8) != 0) ? 1 : 0);
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <getData+0x88>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da00      	bge.n	8000f48 <getData+0x2c>
 8000f46:	3307      	adds	r3, #7
 8000f48:	10db      	asrs	r3, r3, #3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <getData+0x88>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]

    //*format = data.format;
    *format = NEC;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	e00b      	b.n	8000f86 <getData+0x6a>
        buf[i] = data.buffer[i];
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	490b      	ldr	r1, [pc, #44]	; (8000fa4 <getData+0x88>)
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	440a      	add	r2, r1
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	3301      	adds	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbef      	blt.n	8000f6e <getData+0x52>
    }
    printf("getData init_state()getData init_state()getData init_state()");
 8000f8e:	4806      	ldr	r0, [pc, #24]	; (8000fa8 <getData+0x8c>)
 8000f90:	f009 fadc 	bl	800a54c <iprintf>
    init_state();
 8000f94:	f000 f80a 	bl	8000fac <init_state>

    UNLOCK();
    return nbits;
 8000f98:	69bb      	ldr	r3, [r7, #24]
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200000f0 	.word	0x200000f0
 8000fa8:	0800b56c 	.word	0x0800b56c

08000fac <init_state>:

void init_state(void) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000fb2:	4b1d      	ldr	r3, [pc, #116]	; (8001028 <init_state+0x7c>)
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000fba:	4b1b      	ldr	r3, [pc, #108]	; (8001028 <init_state+0x7c>)
 8000fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc0:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000fc2:	4b19      	ldr	r3, [pc, #100]	; (8001028 <init_state+0x7c>)
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000fca:	4b17      	ldr	r3, [pc, #92]	; (8001028 <init_state+0x7c>)
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000fd2:	4b15      	ldr	r3, [pc, #84]	; (8001028 <init_state+0x7c>)
 8000fd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd8:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000fda:	4b13      	ldr	r3, [pc, #76]	; (8001028 <init_state+0x7c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <init_state+0x80>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <init_state+0x80>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);printf("HAL_TIM_Base_Stop_IT(&htim14)\n");  //timer.stop();
 8000fec:	4810      	ldr	r0, [pc, #64]	; (8001030 <init_state+0x84>)
 8000fee:	f007 fc33 	bl	8008858 <HAL_TIM_Base_Stop_IT>
 8000ff2:	4810      	ldr	r0, [pc, #64]	; (8001034 <init_state+0x88>)
 8000ff4:	f009 fb30 	bl	800a658 <puts>
    //HAL_NVIC_DisableIRQ(EXTI0_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8000ff8:	4b0f      	ldr	r3, [pc, #60]	; (8001038 <init_state+0x8c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	e008      	b.n	8001016 <init_state+0x6a>
        data.buffer[i] = 0;
 8001004:	4a09      	ldr	r2, [pc, #36]	; (800102c <init_state+0x80>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4413      	add	r3, r2
 800100a:	3308      	adds	r3, #8
 800100c:	2200      	movs	r2, #0
 800100e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3301      	adds	r3, #1
 8001014:	607b      	str	r3, [r7, #4]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	2b3f      	cmp	r3, #63	; 0x3f
 800101a:	d9f3      	bls.n	8001004 <init_state+0x58>
    }
}
 800101c:	bf00      	nop
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000138 	.word	0x20000138
 800102c:	200000f0 	.word	0x200000f0
 8001030:	20000484 	.word	0x20000484
 8001034:	0800b5ac 	.word	0x0800b5ac
 8001038:	20000174 	.word	0x20000174
 800103c:	00000000 	.word	0x00000000

08001040 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 8001046:	4b96      	ldr	r3, [pc, #600]	; (80012a0 <isr_fall+0x260>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f000 83cd 	beq.w	80017ea <isr_fall+0x7aa>
 8001050:	2b02      	cmp	r3, #2
 8001052:	f300 83cc 	bgt.w	80017ee <isr_fall+0x7ae>
 8001056:	2b00      	cmp	r3, #0
 8001058:	d003      	beq.n	8001062 <isr_fall+0x22>
 800105a:	2b01      	cmp	r3, #1
 800105c:	f000 8224 	beq.w	80014a8 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001060:	e3c5      	b.n	80017ee <isr_fall+0x7ae>
            if (work.c1 < 0) {
 8001062:	4b8f      	ldr	r3, [pc, #572]	; (80012a0 <isr_fall+0x260>)
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	da07      	bge.n	800107a <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT (&htim14)\n");  //timer.start();
 800106a:	488e      	ldr	r0, [pc, #568]	; (80012a4 <isr_fall+0x264>)
 800106c:	f007 fb7c 	bl	8008768 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8001070:	4b8d      	ldr	r3, [pc, #564]	; (80012a8 <isr_fall+0x268>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	4a8a      	ldr	r2, [pc, #552]	; (80012a0 <isr_fall+0x260>)
 8001076:	6053      	str	r3, [r2, #4]
            break;
 8001078:	e3bc      	b.n	80017f4 <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 800107a:	4b8b      	ldr	r3, [pc, #556]	; (80012a8 <isr_fall+0x268>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a88      	ldr	r2, [pc, #544]	; (80012a0 <isr_fall+0x260>)
 8001080:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 8001082:	4b87      	ldr	r3, [pc, #540]	; (80012a0 <isr_fall+0x260>)
 8001084:	689a      	ldr	r2, [r3, #8]
 8001086:	4b86      	ldr	r3, [pc, #536]	; (80012a0 <isr_fall+0x260>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	1ad3      	subs	r3, r2, r3
 800108c:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 800108e:	4b84      	ldr	r3, [pc, #528]	; (80012a0 <isr_fall+0x260>)
 8001090:	68da      	ldr	r2, [r3, #12]
 8001092:	4b83      	ldr	r3, [pc, #524]	; (80012a0 <isr_fall+0x260>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 800109a:	f240 2332 	movw	r3, #562	; 0x232
 800109e:	011b      	lsls	r3, r3, #4
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff fa57 	bl	8000554 <__aeabi_i2d>
 80010a6:	a37a      	add	r3, pc, #488	; (adr r3, 8001290 <isr_fall+0x250>)
 80010a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ac:	f7ff fabc 	bl	8000628 <__aeabi_dmul>
 80010b0:	4602      	mov	r2, r0
 80010b2:	460b      	mov	r3, r1
 80010b4:	4614      	mov	r4, r2
 80010b6:	461d      	mov	r5, r3
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fa4b 	bl	8000554 <__aeabi_i2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4620      	mov	r0, r4
 80010c4:	4629      	mov	r1, r5
 80010c6:	f7ff fd21 	bl	8000b0c <__aeabi_dcmplt>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d056      	beq.n	800117e <isr_fall+0x13e>
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff fa3f 	bl	8000554 <__aeabi_i2d>
 80010d6:	4604      	mov	r4, r0
 80010d8:	460d      	mov	r5, r1
 80010da:	f240 2332 	movw	r3, #562	; 0x232
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa37 	bl	8000554 <__aeabi_i2d>
 80010e6:	a36c      	add	r3, pc, #432	; (adr r3, 8001298 <isr_fall+0x258>)
 80010e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010ec:	f7ff fa9c 	bl	8000628 <__aeabi_dmul>
 80010f0:	4602      	mov	r2, r0
 80010f2:	460b      	mov	r3, r1
 80010f4:	4620      	mov	r0, r4
 80010f6:	4629      	mov	r1, r5
 80010f8:	f7ff fd08 	bl	8000b0c <__aeabi_dcmplt>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d03d      	beq.n	800117e <isr_fall+0x13e>
 8001102:	f240 2332 	movw	r3, #562	; 0x232
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fa23 	bl	8000554 <__aeabi_i2d>
 800110e:	a360      	add	r3, pc, #384	; (adr r3, 8001290 <isr_fall+0x250>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	f7ff fa88 	bl	8000628 <__aeabi_dmul>
 8001118:	4602      	mov	r2, r0
 800111a:	460b      	mov	r3, r1
 800111c:	4614      	mov	r4, r2
 800111e:	461d      	mov	r5, r3
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff fa17 	bl	8000554 <__aeabi_i2d>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4620      	mov	r0, r4
 800112c:	4629      	mov	r1, r5
 800112e:	f7ff fced 	bl	8000b0c <__aeabi_dcmplt>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d022      	beq.n	800117e <isr_fall+0x13e>
 8001138:	6838      	ldr	r0, [r7, #0]
 800113a:	f7ff fa0b 	bl	8000554 <__aeabi_i2d>
 800113e:	4604      	mov	r4, r0
 8001140:	460d      	mov	r5, r1
 8001142:	f240 2332 	movw	r3, #562	; 0x232
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff fa03 	bl	8000554 <__aeabi_i2d>
 800114e:	a352      	add	r3, pc, #328	; (adr r3, 8001298 <isr_fall+0x258>)
 8001150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001154:	f7ff fa68 	bl	8000628 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4620      	mov	r0, r4
 800115e:	4629      	mov	r1, r5
 8001160:	f7ff fcd4 	bl	8000b0c <__aeabi_dcmplt>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d009      	beq.n	800117e <isr_fall+0x13e>
                    data.format = NEC;
 800116a:	4b50      	ldr	r3, [pc, #320]	; (80012ac <isr_fall+0x26c>)
 800116c:	2201      	movs	r2, #1
 800116e:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001170:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <isr_fall+0x260>)
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <isr_fall+0x26c>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	e193      	b.n	80014a6 <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 800117e:	f240 2332 	movw	r3, #562	; 0x232
 8001182:	011b      	lsls	r3, r3, #4
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9e5 	bl	8000554 <__aeabi_i2d>
 800118a:	a341      	add	r3, pc, #260	; (adr r3, 8001290 <isr_fall+0x250>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fa4a 	bl	8000628 <__aeabi_dmul>
 8001194:	4602      	mov	r2, r0
 8001196:	460b      	mov	r3, r1
 8001198:	4614      	mov	r4, r2
 800119a:	461d      	mov	r5, r3
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff f9d9 	bl	8000554 <__aeabi_i2d>
 80011a2:	4602      	mov	r2, r0
 80011a4:	460b      	mov	r3, r1
 80011a6:	4620      	mov	r0, r4
 80011a8:	4629      	mov	r1, r5
 80011aa:	f7ff fcaf 	bl	8000b0c <__aeabi_dcmplt>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d07d      	beq.n	80012b0 <isr_fall+0x270>
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f9cd 	bl	8000554 <__aeabi_i2d>
 80011ba:	4604      	mov	r4, r0
 80011bc:	460d      	mov	r5, r1
 80011be:	f240 2332 	movw	r3, #562	; 0x232
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f9c5 	bl	8000554 <__aeabi_i2d>
 80011ca:	a333      	add	r3, pc, #204	; (adr r3, 8001298 <isr_fall+0x258>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa2a 	bl	8000628 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff fc96 	bl	8000b0c <__aeabi_dcmplt>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d064      	beq.n	80012b0 <isr_fall+0x270>
 80011e6:	f240 2332 	movw	r3, #562	; 0x232
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff f9b1 	bl	8000554 <__aeabi_i2d>
 80011f2:	a327      	add	r3, pc, #156	; (adr r3, 8001290 <isr_fall+0x250>)
 80011f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011f8:	f7ff fa16 	bl	8000628 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4614      	mov	r4, r2
 8001202:	461d      	mov	r5, r3
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f7ff f9a5 	bl	8000554 <__aeabi_i2d>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4620      	mov	r0, r4
 8001210:	4629      	mov	r1, r5
 8001212:	f7ff fc7b 	bl	8000b0c <__aeabi_dcmplt>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d049      	beq.n	80012b0 <isr_fall+0x270>
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff f999 	bl	8000554 <__aeabi_i2d>
 8001222:	4604      	mov	r4, r0
 8001224:	460d      	mov	r5, r1
 8001226:	f240 2332 	movw	r3, #562	; 0x232
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff f991 	bl	8000554 <__aeabi_i2d>
 8001232:	a319      	add	r3, pc, #100	; (adr r3, 8001298 <isr_fall+0x258>)
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	f7ff f9f6 	bl	8000628 <__aeabi_dmul>
 800123c:	4602      	mov	r2, r0
 800123e:	460b      	mov	r3, r1
 8001240:	4620      	mov	r0, r4
 8001242:	4629      	mov	r1, r5
 8001244:	f7ff fc62 	bl	8000b0c <__aeabi_dcmplt>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d030      	beq.n	80012b0 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <isr_fall+0x26c>)
 8001250:	2202      	movs	r2, #2
 8001252:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <isr_fall+0x260>)
 8001256:	2202      	movs	r2, #2
 8001258:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <isr_fall+0x26c>)
 800125c:	2200      	movs	r2, #0
 800125e:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <isr_fall+0x260>)
 8001262:	f04f 32ff 	mov.w	r2, #4294967295
 8001266:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <isr_fall+0x260>)
 800126a:	f04f 32ff 	mov.w	r2, #4294967295
 800126e:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001270:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <isr_fall+0x260>)
 8001272:	f04f 32ff 	mov.w	r2, #4294967295
 8001276:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <isr_fall+0x260>)
 800127a:	f04f 32ff 	mov.w	r2, #4294967295
 800127e:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001280:	4b07      	ldr	r3, [pc, #28]	; (80012a0 <isr_fall+0x260>)
 8001282:	f04f 32ff 	mov.w	r2, #4294967295
 8001286:	615a      	str	r2, [r3, #20]
 8001288:	e10d      	b.n	80014a6 <isr_fall+0x466>
 800128a:	bf00      	nop
 800128c:	f3af 8000 	nop.w
 8001290:	66666666 	.word	0x66666666
 8001294:	3fe66666 	.word	0x3fe66666
 8001298:	cccccccd 	.word	0xcccccccd
 800129c:	3ff4cccc 	.word	0x3ff4cccc
 80012a0:	20000138 	.word	0x20000138
 80012a4:	20000484 	.word	0x20000484
 80012a8:	20000174 	.word	0x20000174
 80012ac:	200000f0 	.word	0x200000f0
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 80012b0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012b4:	00db      	lsls	r3, r3, #3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f94c 	bl	8000554 <__aeabi_i2d>
 80012bc:	a3de      	add	r3, pc, #888	; (adr r3, 8001638 <isr_fall+0x5f8>)
 80012be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c2:	f7ff f9b1 	bl	8000628 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4614      	mov	r4, r2
 80012cc:	461d      	mov	r5, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f940 	bl	8000554 <__aeabi_i2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4620      	mov	r0, r4
 80012da:	4629      	mov	r1, r5
 80012dc:	f7ff fc16 	bl	8000b0c <__aeabi_dcmplt>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d056      	beq.n	8001394 <isr_fall+0x354>
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff f934 	bl	8000554 <__aeabi_i2d>
 80012ec:	4604      	mov	r4, r0
 80012ee:	460d      	mov	r5, r1
 80012f0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012f4:	00db      	lsls	r3, r3, #3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f92c 	bl	8000554 <__aeabi_i2d>
 80012fc:	a3d0      	add	r3, pc, #832	; (adr r3, 8001640 <isr_fall+0x600>)
 80012fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001302:	f7ff f991 	bl	8000628 <__aeabi_dmul>
 8001306:	4602      	mov	r2, r0
 8001308:	460b      	mov	r3, r1
 800130a:	4620      	mov	r0, r4
 800130c:	4629      	mov	r1, r5
 800130e:	f7ff fbfd 	bl	8000b0c <__aeabi_dcmplt>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d03d      	beq.n	8001394 <isr_fall+0x354>
 8001318:	f240 13a9 	movw	r3, #425	; 0x1a9
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff f918 	bl	8000554 <__aeabi_i2d>
 8001324:	a3c4      	add	r3, pc, #784	; (adr r3, 8001638 <isr_fall+0x5f8>)
 8001326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132a:	f7ff f97d 	bl	8000628 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4614      	mov	r4, r2
 8001334:	461d      	mov	r5, r3
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f7ff f90c 	bl	8000554 <__aeabi_i2d>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4620      	mov	r0, r4
 8001342:	4629      	mov	r1, r5
 8001344:	f7ff fbe2 	bl	8000b0c <__aeabi_dcmplt>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d022      	beq.n	8001394 <isr_fall+0x354>
 800134e:	6838      	ldr	r0, [r7, #0]
 8001350:	f7ff f900 	bl	8000554 <__aeabi_i2d>
 8001354:	4604      	mov	r4, r0
 8001356:	460d      	mov	r5, r1
 8001358:	f240 13a9 	movw	r3, #425	; 0x1a9
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	4618      	mov	r0, r3
 8001360:	f7ff f8f8 	bl	8000554 <__aeabi_i2d>
 8001364:	a3b6      	add	r3, pc, #728	; (adr r3, 8001640 <isr_fall+0x600>)
 8001366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136a:	f7ff f95d 	bl	8000628 <__aeabi_dmul>
 800136e:	4602      	mov	r2, r0
 8001370:	460b      	mov	r3, r1
 8001372:	4620      	mov	r0, r4
 8001374:	4629      	mov	r1, r5
 8001376:	f7ff fbc9 	bl	8000b0c <__aeabi_dcmplt>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d009      	beq.n	8001394 <isr_fall+0x354>
                    data.format = AEHA;
 8001380:	4bb1      	ldr	r3, [pc, #708]	; (8001648 <isr_fall+0x608>)
 8001382:	2203      	movs	r2, #3
 8001384:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001386:	4bb1      	ldr	r3, [pc, #708]	; (800164c <isr_fall+0x60c>)
 8001388:	2201      	movs	r2, #1
 800138a:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800138c:	4bae      	ldr	r3, [pc, #696]	; (8001648 <isr_fall+0x608>)
 800138e:	2200      	movs	r2, #0
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	e088      	b.n	80014a6 <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 8001394:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8da 	bl	8000554 <__aeabi_i2d>
 80013a0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001638 <isr_fall+0x5f8>)
 80013a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a6:	f7ff f93f 	bl	8000628 <__aeabi_dmul>
 80013aa:	4602      	mov	r2, r0
 80013ac:	460b      	mov	r3, r1
 80013ae:	4614      	mov	r4, r2
 80013b0:	461d      	mov	r5, r3
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff f8ce 	bl	8000554 <__aeabi_i2d>
 80013b8:	4602      	mov	r2, r0
 80013ba:	460b      	mov	r3, r1
 80013bc:	4620      	mov	r0, r4
 80013be:	4629      	mov	r1, r5
 80013c0:	f7ff fba4 	bl	8000b0c <__aeabi_dcmplt>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d06a      	beq.n	80014a0 <isr_fall+0x460>
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff f8c2 	bl	8000554 <__aeabi_i2d>
 80013d0:	4604      	mov	r4, r0
 80013d2:	460d      	mov	r5, r1
 80013d4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013d8:	00db      	lsls	r3, r3, #3
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f8ba 	bl	8000554 <__aeabi_i2d>
 80013e0:	a397      	add	r3, pc, #604	; (adr r3, 8001640 <isr_fall+0x600>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f91f 	bl	8000628 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4620      	mov	r0, r4
 80013f0:	4629      	mov	r1, r5
 80013f2:	f7ff fb8b 	bl	8000b0c <__aeabi_dcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d051      	beq.n	80014a0 <isr_fall+0x460>
 80013fc:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f8a6 	bl	8000554 <__aeabi_i2d>
 8001408:	a38b      	add	r3, pc, #556	; (adr r3, 8001638 <isr_fall+0x5f8>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	f7ff f90b 	bl	8000628 <__aeabi_dmul>
 8001412:	4602      	mov	r2, r0
 8001414:	460b      	mov	r3, r1
 8001416:	4614      	mov	r4, r2
 8001418:	461d      	mov	r5, r3
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f7ff f89a 	bl	8000554 <__aeabi_i2d>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7ff fb70 	bl	8000b0c <__aeabi_dcmplt>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d036      	beq.n	80014a0 <isr_fall+0x460>
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f7ff f88e 	bl	8000554 <__aeabi_i2d>
 8001438:	4604      	mov	r4, r0
 800143a:	460d      	mov	r5, r1
 800143c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff f886 	bl	8000554 <__aeabi_i2d>
 8001448:	a37d      	add	r3, pc, #500	; (adr r3, 8001640 <isr_fall+0x600>)
 800144a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144e:	f7ff f8eb 	bl	8000628 <__aeabi_dmul>
 8001452:	4602      	mov	r2, r0
 8001454:	460b      	mov	r3, r1
 8001456:	4620      	mov	r0, r4
 8001458:	4629      	mov	r1, r5
 800145a:	f7ff fb57 	bl	8000b0c <__aeabi_dcmplt>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d01d      	beq.n	80014a0 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 8001464:	4b78      	ldr	r3, [pc, #480]	; (8001648 <isr_fall+0x608>)
 8001466:	2204      	movs	r2, #4
 8001468:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 800146a:	4b78      	ldr	r3, [pc, #480]	; (800164c <isr_fall+0x60c>)
 800146c:	2202      	movs	r2, #2
 800146e:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001470:	4b75      	ldr	r3, [pc, #468]	; (8001648 <isr_fall+0x608>)
 8001472:	2200      	movs	r2, #0
 8001474:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001476:	4b75      	ldr	r3, [pc, #468]	; (800164c <isr_fall+0x60c>)
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 800147e:	4b73      	ldr	r3, [pc, #460]	; (800164c <isr_fall+0x60c>)
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001486:	4b71      	ldr	r3, [pc, #452]	; (800164c <isr_fall+0x60c>)
 8001488:	f04f 32ff 	mov.w	r2, #4294967295
 800148c:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 800148e:	4b6f      	ldr	r3, [pc, #444]	; (800164c <isr_fall+0x60c>)
 8001490:	f04f 32ff 	mov.w	r2, #4294967295
 8001494:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001496:	4b6d      	ldr	r3, [pc, #436]	; (800164c <isr_fall+0x60c>)
 8001498:	f04f 32ff 	mov.w	r2, #4294967295
 800149c:	615a      	str	r2, [r3, #20]
 800149e:	e002      	b.n	80014a6 <isr_fall+0x466>
                    init_state();//HAL_GPIO_TogglePin(Rsig_GPIO_Port, Rsig_Pin);
 80014a0:	f7ff fd84 	bl	8000fac <init_state>
            break;
 80014a4:	e1a6      	b.n	80017f4 <isr_fall+0x7b4>
 80014a6:	e1a5      	b.n	80017f4 <isr_fall+0x7b4>
            if (NEC == data.format) {
 80014a8:	4b67      	ldr	r3, [pc, #412]	; (8001648 <isr_fall+0x608>)
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	f040 80d3 	bne.w	8001658 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80014b2:	4b67      	ldr	r3, [pc, #412]	; (8001650 <isr_fall+0x610>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a65      	ldr	r2, [pc, #404]	; (800164c <isr_fall+0x60c>)
 80014b8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80014ba:	4b64      	ldr	r3, [pc, #400]	; (800164c <isr_fall+0x60c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	4b63      	ldr	r3, [pc, #396]	; (800164c <isr_fall+0x60c>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	1ad3      	subs	r3, r2, r3
 80014c4:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 80014c6:	f240 2232 	movw	r2, #562	; 0x232
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff f83f 	bl	8000554 <__aeabi_i2d>
 80014d6:	a358      	add	r3, pc, #352	; (adr r3, 8001638 <isr_fall+0x5f8>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f8a4 	bl	8000628 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4614      	mov	r4, r2
 80014e6:	461d      	mov	r5, r3
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff f833 	bl	8000554 <__aeabi_i2d>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4620      	mov	r0, r4
 80014f4:	4629      	mov	r1, r5
 80014f6:	f7ff fb09 	bl	8000b0c <__aeabi_dcmplt>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d03a      	beq.n	8001576 <isr_fall+0x536>
 8001500:	68b8      	ldr	r0, [r7, #8]
 8001502:	f7ff f827 	bl	8000554 <__aeabi_i2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	f240 2232 	movw	r2, #562	; 0x232
 800150e:	4613      	mov	r3, r2
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	4413      	add	r3, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff f81d 	bl	8000554 <__aeabi_i2d>
 800151a:	a349      	add	r3, pc, #292	; (adr r3, 8001640 <isr_fall+0x600>)
 800151c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001520:	f7ff f882 	bl	8000628 <__aeabi_dmul>
 8001524:	4602      	mov	r2, r0
 8001526:	460b      	mov	r3, r1
 8001528:	4620      	mov	r0, r4
 800152a:	4629      	mov	r1, r5
 800152c:	f7ff faee 	bl	8000b0c <__aeabi_dcmplt>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d01f      	beq.n	8001576 <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001536:	4b44      	ldr	r3, [pc, #272]	; (8001648 <isr_fall+0x608>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	da00      	bge.n	8001540 <isr_fall+0x500>
 800153e:	3307      	adds	r3, #7
 8001540:	10db      	asrs	r3, r3, #3
 8001542:	461a      	mov	r2, r3
 8001544:	4b40      	ldr	r3, [pc, #256]	; (8001648 <isr_fall+0x608>)
 8001546:	4413      	add	r3, r2
 8001548:	7a1b      	ldrb	r3, [r3, #8]
 800154a:	b259      	sxtb	r1, r3
 800154c:	4b3e      	ldr	r3, [pc, #248]	; (8001648 <isr_fall+0x608>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	4258      	negs	r0, r3
 8001552:	f003 0307 	and.w	r3, r3, #7
 8001556:	f000 0007 	and.w	r0, r0, #7
 800155a:	bf58      	it	pl
 800155c:	4243      	negpl	r3, r0
 800155e:	2001      	movs	r0, #1
 8001560:	fa00 f303 	lsl.w	r3, r0, r3
 8001564:	b25b      	sxtb	r3, r3
 8001566:	430b      	orrs	r3, r1
 8001568:	b25b      	sxtb	r3, r3
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	4b36      	ldr	r3, [pc, #216]	; (8001648 <isr_fall+0x608>)
 800156e:	4413      	add	r3, r2
 8001570:	460a      	mov	r2, r1
 8001572:	721a      	strb	r2, [r3, #8]
 8001574:	e052      	b.n	800161c <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 8001576:	f240 2332 	movw	r3, #562	; 0x232
 800157a:	4618      	mov	r0, r3
 800157c:	f7fe ffea 	bl	8000554 <__aeabi_i2d>
 8001580:	a32d      	add	r3, pc, #180	; (adr r3, 8001638 <isr_fall+0x5f8>)
 8001582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001586:	f7ff f84f 	bl	8000628 <__aeabi_dmul>
 800158a:	4602      	mov	r2, r0
 800158c:	460b      	mov	r3, r1
 800158e:	4614      	mov	r4, r2
 8001590:	461d      	mov	r5, r3
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7fe ffde 	bl	8000554 <__aeabi_i2d>
 8001598:	4602      	mov	r2, r0
 800159a:	460b      	mov	r3, r1
 800159c:	4620      	mov	r0, r4
 800159e:	4629      	mov	r1, r5
 80015a0:	f7ff fab4 	bl	8000b0c <__aeabi_dcmplt>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d038      	beq.n	800161c <isr_fall+0x5dc>
 80015aa:	68b8      	ldr	r0, [r7, #8]
 80015ac:	f7fe ffd2 	bl	8000554 <__aeabi_i2d>
 80015b0:	4604      	mov	r4, r0
 80015b2:	460d      	mov	r5, r1
 80015b4:	f240 2332 	movw	r3, #562	; 0x232
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7fe ffcb 	bl	8000554 <__aeabi_i2d>
 80015be:	a320      	add	r3, pc, #128	; (adr r3, 8001640 <isr_fall+0x600>)
 80015c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c4:	f7ff f830 	bl	8000628 <__aeabi_dmul>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4620      	mov	r0, r4
 80015ce:	4629      	mov	r1, r5
 80015d0:	f7ff fa9c 	bl	8000b0c <__aeabi_dcmplt>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d020      	beq.n	800161c <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80015da:	4b1b      	ldr	r3, [pc, #108]	; (8001648 <isr_fall+0x608>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	da00      	bge.n	80015e4 <isr_fall+0x5a4>
 80015e2:	3307      	adds	r3, #7
 80015e4:	10db      	asrs	r3, r3, #3
 80015e6:	461a      	mov	r2, r3
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <isr_fall+0x608>)
 80015ea:	4413      	add	r3, r2
 80015ec:	7a1b      	ldrb	r3, [r3, #8]
 80015ee:	b259      	sxtb	r1, r3
 80015f0:	4b15      	ldr	r3, [pc, #84]	; (8001648 <isr_fall+0x608>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	4258      	negs	r0, r3
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	f000 0007 	and.w	r0, r0, #7
 80015fe:	bf58      	it	pl
 8001600:	4243      	negpl	r3, r0
 8001602:	2001      	movs	r0, #1
 8001604:	fa00 f303 	lsl.w	r3, r0, r3
 8001608:	b25b      	sxtb	r3, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	b25b      	sxtb	r3, r3
 800160e:	400b      	ands	r3, r1
 8001610:	b25b      	sxtb	r3, r3
 8001612:	b2d9      	uxtb	r1, r3
 8001614:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <isr_fall+0x608>)
 8001616:	4413      	add	r3, r2
 8001618:	460a      	mov	r2, r1
 800161a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800161c:	4b0a      	ldr	r3, [pc, #40]	; (8001648 <isr_fall+0x608>)
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	3301      	adds	r3, #1
 8001622:	4a09      	ldr	r2, [pc, #36]	; (8001648 <isr_fall+0x608>)
 8001624:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 8001626:	4b08      	ldr	r3, [pc, #32]	; (8001648 <isr_fall+0x608>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b1e      	cmp	r3, #30
 800162c:	f340 80e1 	ble.w	80017f2 <isr_fall+0x7b2>
 8001630:	4b08      	ldr	r3, [pc, #32]	; (8001654 <isr_fall+0x614>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
            break;
 8001636:	e0dc      	b.n	80017f2 <isr_fall+0x7b2>
 8001638:	66666666 	.word	0x66666666
 800163c:	3fe66666 	.word	0x3fe66666
 8001640:	cccccccd 	.word	0xcccccccd
 8001644:	3ff4cccc 	.word	0x3ff4cccc
 8001648:	200000f0 	.word	0x200000f0
 800164c:	20000138 	.word	0x20000138
 8001650:	20000174 	.word	0x20000174
 8001654:	20000179 	.word	0x20000179
            } else if (AEHA == data.format) {
 8001658:	4b6d      	ldr	r3, [pc, #436]	; (8001810 <isr_fall+0x7d0>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b03      	cmp	r3, #3
 800165e:	f040 80bb 	bne.w	80017d8 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <isr_fall+0x7d4>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a6c      	ldr	r2, [pc, #432]	; (8001818 <isr_fall+0x7d8>)
 8001668:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 800166a:	4b6b      	ldr	r3, [pc, #428]	; (8001818 <isr_fall+0x7d8>)
 800166c:	695a      	ldr	r2, [r3, #20]
 800166e:	4b6a      	ldr	r3, [pc, #424]	; (8001818 <isr_fall+0x7d8>)
 8001670:	691b      	ldr	r3, [r3, #16]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 8001676:	f240 12a9 	movw	r2, #425	; 0x1a9
 800167a:	4613      	mov	r3, r2
 800167c:	005b      	lsls	r3, r3, #1
 800167e:	4413      	add	r3, r2
 8001680:	4618      	mov	r0, r3
 8001682:	f7fe ff67 	bl	8000554 <__aeabi_i2d>
 8001686:	a35e      	add	r3, pc, #376	; (adr r3, 8001800 <isr_fall+0x7c0>)
 8001688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800168c:	f7fe ffcc 	bl	8000628 <__aeabi_dmul>
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4614      	mov	r4, r2
 8001696:	461d      	mov	r5, r3
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7fe ff5b 	bl	8000554 <__aeabi_i2d>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	4620      	mov	r0, r4
 80016a4:	4629      	mov	r1, r5
 80016a6:	f7ff fa31 	bl	8000b0c <__aeabi_dcmplt>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d03a      	beq.n	8001726 <isr_fall+0x6e6>
 80016b0:	68f8      	ldr	r0, [r7, #12]
 80016b2:	f7fe ff4f 	bl	8000554 <__aeabi_i2d>
 80016b6:	4604      	mov	r4, r0
 80016b8:	460d      	mov	r5, r1
 80016ba:	f240 12a9 	movw	r2, #425	; 0x1a9
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7fe ff45 	bl	8000554 <__aeabi_i2d>
 80016ca:	a34f      	add	r3, pc, #316	; (adr r3, 8001808 <isr_fall+0x7c8>)
 80016cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d0:	f7fe ffaa 	bl	8000628 <__aeabi_dmul>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	4620      	mov	r0, r4
 80016da:	4629      	mov	r1, r5
 80016dc:	f7ff fa16 	bl	8000b0c <__aeabi_dcmplt>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d01f      	beq.n	8001726 <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80016e6:	4b4a      	ldr	r3, [pc, #296]	; (8001810 <isr_fall+0x7d0>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	da00      	bge.n	80016f0 <isr_fall+0x6b0>
 80016ee:	3307      	adds	r3, #7
 80016f0:	10db      	asrs	r3, r3, #3
 80016f2:	461a      	mov	r2, r3
 80016f4:	4b46      	ldr	r3, [pc, #280]	; (8001810 <isr_fall+0x7d0>)
 80016f6:	4413      	add	r3, r2
 80016f8:	7a1b      	ldrb	r3, [r3, #8]
 80016fa:	b259      	sxtb	r1, r3
 80016fc:	4b44      	ldr	r3, [pc, #272]	; (8001810 <isr_fall+0x7d0>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	4258      	negs	r0, r3
 8001702:	f003 0307 	and.w	r3, r3, #7
 8001706:	f000 0007 	and.w	r0, r0, #7
 800170a:	bf58      	it	pl
 800170c:	4243      	negpl	r3, r0
 800170e:	2001      	movs	r0, #1
 8001710:	fa00 f303 	lsl.w	r3, r0, r3
 8001714:	b25b      	sxtb	r3, r3
 8001716:	430b      	orrs	r3, r1
 8001718:	b25b      	sxtb	r3, r3
 800171a:	b2d9      	uxtb	r1, r3
 800171c:	4b3c      	ldr	r3, [pc, #240]	; (8001810 <isr_fall+0x7d0>)
 800171e:	4413      	add	r3, r2
 8001720:	460a      	mov	r2, r1
 8001722:	721a      	strb	r2, [r3, #8]
 8001724:	e052      	b.n	80017cc <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 8001726:	f240 13a9 	movw	r3, #425	; 0x1a9
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff12 	bl	8000554 <__aeabi_i2d>
 8001730:	a333      	add	r3, pc, #204	; (adr r3, 8001800 <isr_fall+0x7c0>)
 8001732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001736:	f7fe ff77 	bl	8000628 <__aeabi_dmul>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4614      	mov	r4, r2
 8001740:	461d      	mov	r5, r3
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe ff06 	bl	8000554 <__aeabi_i2d>
 8001748:	4602      	mov	r2, r0
 800174a:	460b      	mov	r3, r1
 800174c:	4620      	mov	r0, r4
 800174e:	4629      	mov	r1, r5
 8001750:	f7ff f9dc 	bl	8000b0c <__aeabi_dcmplt>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d038      	beq.n	80017cc <isr_fall+0x78c>
 800175a:	68f8      	ldr	r0, [r7, #12]
 800175c:	f7fe fefa 	bl	8000554 <__aeabi_i2d>
 8001760:	4604      	mov	r4, r0
 8001762:	460d      	mov	r5, r1
 8001764:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe fef3 	bl	8000554 <__aeabi_i2d>
 800176e:	a326      	add	r3, pc, #152	; (adr r3, 8001808 <isr_fall+0x7c8>)
 8001770:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001774:	f7fe ff58 	bl	8000628 <__aeabi_dmul>
 8001778:	4602      	mov	r2, r0
 800177a:	460b      	mov	r3, r1
 800177c:	4620      	mov	r0, r4
 800177e:	4629      	mov	r1, r5
 8001780:	f7ff f9c4 	bl	8000b0c <__aeabi_dcmplt>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d020      	beq.n	80017cc <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <isr_fall+0x7d0>)
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b00      	cmp	r3, #0
 8001790:	da00      	bge.n	8001794 <isr_fall+0x754>
 8001792:	3307      	adds	r3, #7
 8001794:	10db      	asrs	r3, r3, #3
 8001796:	461a      	mov	r2, r3
 8001798:	4b1d      	ldr	r3, [pc, #116]	; (8001810 <isr_fall+0x7d0>)
 800179a:	4413      	add	r3, r2
 800179c:	7a1b      	ldrb	r3, [r3, #8]
 800179e:	b259      	sxtb	r1, r3
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <isr_fall+0x7d0>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	4258      	negs	r0, r3
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	f000 0007 	and.w	r0, r0, #7
 80017ae:	bf58      	it	pl
 80017b0:	4243      	negpl	r3, r0
 80017b2:	2001      	movs	r0, #1
 80017b4:	fa00 f303 	lsl.w	r3, r0, r3
 80017b8:	b25b      	sxtb	r3, r3
 80017ba:	43db      	mvns	r3, r3
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	400b      	ands	r3, r1
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	b2d9      	uxtb	r1, r3
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <isr_fall+0x7d0>)
 80017c6:	4413      	add	r3, r2
 80017c8:	460a      	mov	r2, r1
 80017ca:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80017cc:	4b10      	ldr	r3, [pc, #64]	; (8001810 <isr_fall+0x7d0>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	3301      	adds	r3, #1
 80017d2:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <isr_fall+0x7d0>)
 80017d4:	6053      	str	r3, [r2, #4]
            break;
 80017d6:	e00c      	b.n	80017f2 <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 80017d8:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <isr_fall+0x7d0>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b05      	cmp	r3, #5
 80017de:	d108      	bne.n	80017f2 <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <isr_fall+0x7d4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <isr_fall+0x7d8>)
 80017e6:	6113      	str	r3, [r2, #16]
            break;
 80017e8:	e003      	b.n	80017f2 <isr_fall+0x7b2>
            break;
 80017ea:	bf00      	nop
 80017ec:	e002      	b.n	80017f4 <isr_fall+0x7b4>
            break;
 80017ee:	bf00      	nop
 80017f0:	e000      	b.n	80017f4 <isr_fall+0x7b4>
            break;
 80017f2:	bf00      	nop
    }
    UNLOCK();
}
 80017f4:	bf00      	nop
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bdb0      	pop	{r4, r5, r7, pc}
 80017fc:	f3af 8000 	nop.w
 8001800:	66666666 	.word	0x66666666
 8001804:	3fe66666 	.word	0x3fe66666
 8001808:	cccccccd 	.word	0xcccccccd
 800180c:	3ff4cccc 	.word	0x3ff4cccc
 8001810:	200000f0 	.word	0x200000f0
 8001814:	20000174 	.word	0x20000174
 8001818:	20000138 	.word	0x20000138
 800181c:	00000000 	.word	0x00000000

08001820 <isr_rise>:

void isr_rise(void) {
 8001820:	b5b0      	push	{r4, r5, r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001826:	4ba4      	ldr	r3, [pc, #656]	; (8001ab8 <isr_rise+0x298>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	2b02      	cmp	r3, #2
 800182c:	f000 812e 	beq.w	8001a8c <isr_rise+0x26c>
 8001830:	2b02      	cmp	r3, #2
 8001832:	f300 812d 	bgt.w	8001a90 <isr_rise+0x270>
 8001836:	2b00      	cmp	r3, #0
 8001838:	d002      	beq.n	8001840 <isr_rise+0x20>
 800183a:	2b01      	cmp	r3, #1
 800183c:	d058      	beq.n	80018f0 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 800183e:	e127      	b.n	8001a90 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001840:	4b9d      	ldr	r3, [pc, #628]	; (8001ab8 <isr_rise+0x298>)
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	2b00      	cmp	r3, #0
 8001846:	db50      	blt.n	80018ea <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001848:	4b9c      	ldr	r3, [pc, #624]	; (8001abc <isr_rise+0x29c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a9a      	ldr	r2, [pc, #616]	; (8001ab8 <isr_rise+0x298>)
 800184e:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001850:	4b99      	ldr	r3, [pc, #612]	; (8001ab8 <isr_rise+0x298>)
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	4b98      	ldr	r3, [pc, #608]	; (8001ab8 <isr_rise+0x298>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 800185c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001860:	009b      	lsls	r3, r3, #2
 8001862:	4618      	mov	r0, r3
 8001864:	f7fe fe76 	bl	8000554 <__aeabi_i2d>
 8001868:	a38f      	add	r3, pc, #572	; (adr r3, 8001aa8 <isr_rise+0x288>)
 800186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186e:	f7fe fedb 	bl	8000628 <__aeabi_dmul>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	6838      	ldr	r0, [r7, #0]
 800187c:	f7fe fe6a 	bl	8000554 <__aeabi_i2d>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7ff f940 	bl	8000b0c <__aeabi_dcmplt>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d022      	beq.n	80018d8 <isr_rise+0xb8>
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f7fe fe5e 	bl	8000554 <__aeabi_i2d>
 8001898:	4604      	mov	r4, r0
 800189a:	460d      	mov	r5, r1
 800189c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018a0:	009b      	lsls	r3, r3, #2
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe56 	bl	8000554 <__aeabi_i2d>
 80018a8:	a381      	add	r3, pc, #516	; (adr r3, 8001ab0 <isr_rise+0x290>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe febb 	bl	8000628 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7ff f927 	bl	8000b0c <__aeabi_dcmplt>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <isr_rise+0xb8>
                    data.format = SONY;
 80018c4:	4b7e      	ldr	r3, [pc, #504]	; (8001ac0 <isr_rise+0x2a0>)
 80018c6:	2205      	movs	r2, #5
 80018c8:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80018ca:	4b7b      	ldr	r3, [pc, #492]	; (8001ab8 <isr_rise+0x298>)
 80018cc:	2201      	movs	r2, #1
 80018ce:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80018d0:	4b7b      	ldr	r3, [pc, #492]	; (8001ac0 <isr_rise+0x2a0>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	605a      	str	r2, [r3, #4]
            break;
 80018d6:	e0dd      	b.n	8001a94 <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 80018d8:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <isr_rise+0x2a4>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	429a      	cmp	r2, r3
 80018e0:	f280 80d8 	bge.w	8001a94 <isr_rise+0x274>
                        init_state();//HAL_GPIO_TogglePin(Gsig_GPIO_Port, Gsig_Pin);
 80018e4:	f7ff fb62 	bl	8000fac <init_state>
            break;
 80018e8:	e0d4      	b.n	8001a94 <isr_rise+0x274>
                init_state();//HAL_GPIO_TogglePin(Bsig_GPIO_Port, Bsig_Pin);
 80018ea:	f7ff fb5f 	bl	8000fac <init_state>
            break;
 80018ee:	e0d1      	b.n	8001a94 <isr_rise+0x274>
            if (NEC == data.format) {
 80018f0:	4b73      	ldr	r3, [pc, #460]	; (8001ac0 <isr_rise+0x2a0>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d104      	bne.n	8001902 <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80018f8:	4b70      	ldr	r3, [pc, #448]	; (8001abc <isr_rise+0x29c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a6e      	ldr	r2, [pc, #440]	; (8001ab8 <isr_rise+0x298>)
 80018fe:	6113      	str	r3, [r2, #16]
            break;
 8001900:	e0ca      	b.n	8001a98 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 8001902:	4b6f      	ldr	r3, [pc, #444]	; (8001ac0 <isr_rise+0x2a0>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b03      	cmp	r3, #3
 8001908:	d104      	bne.n	8001914 <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 800190a:	4b6c      	ldr	r3, [pc, #432]	; (8001abc <isr_rise+0x29c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a6a      	ldr	r2, [pc, #424]	; (8001ab8 <isr_rise+0x298>)
 8001910:	6113      	str	r3, [r2, #16]
            break;
 8001912:	e0c1      	b.n	8001a98 <isr_rise+0x278>
            } else if (SONY == data.format) {
 8001914:	4b6a      	ldr	r3, [pc, #424]	; (8001ac0 <isr_rise+0x2a0>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b05      	cmp	r3, #5
 800191a:	f040 80bd 	bne.w	8001a98 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800191e:	4b67      	ldr	r3, [pc, #412]	; (8001abc <isr_rise+0x29c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a65      	ldr	r2, [pc, #404]	; (8001ab8 <isr_rise+0x298>)
 8001924:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 8001926:	4b64      	ldr	r3, [pc, #400]	; (8001ab8 <isr_rise+0x298>)
 8001928:	695a      	ldr	r2, [r3, #20]
 800192a:	4b63      	ldr	r3, [pc, #396]	; (8001ab8 <isr_rise+0x298>)
 800192c:	691b      	ldr	r3, [r3, #16]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 8001932:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe0b 	bl	8000554 <__aeabi_i2d>
 800193e:	a35a      	add	r3, pc, #360	; (adr r3, 8001aa8 <isr_rise+0x288>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe fe70 	bl	8000628 <__aeabi_dmul>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4614      	mov	r4, r2
 800194e:	461d      	mov	r5, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe fdff 	bl	8000554 <__aeabi_i2d>
 8001956:	4602      	mov	r2, r0
 8001958:	460b      	mov	r3, r1
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7ff f8d5 	bl	8000b0c <__aeabi_dcmplt>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d038      	beq.n	80019da <isr_rise+0x1ba>
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7fe fdf3 	bl	8000554 <__aeabi_i2d>
 800196e:	4604      	mov	r4, r0
 8001970:	460d      	mov	r5, r1
 8001972:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fdeb 	bl	8000554 <__aeabi_i2d>
 800197e:	a34c      	add	r3, pc, #304	; (adr r3, 8001ab0 <isr_rise+0x290>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	f7fe fe50 	bl	8000628 <__aeabi_dmul>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4620      	mov	r0, r4
 800198e:	4629      	mov	r1, r5
 8001990:	f7ff f8bc 	bl	8000b0c <__aeabi_dcmplt>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d01f      	beq.n	80019da <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800199a:	4b49      	ldr	r3, [pc, #292]	; (8001ac0 <isr_rise+0x2a0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	da00      	bge.n	80019a4 <isr_rise+0x184>
 80019a2:	3307      	adds	r3, #7
 80019a4:	10db      	asrs	r3, r3, #3
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b45      	ldr	r3, [pc, #276]	; (8001ac0 <isr_rise+0x2a0>)
 80019aa:	4413      	add	r3, r2
 80019ac:	7a1b      	ldrb	r3, [r3, #8]
 80019ae:	b259      	sxtb	r1, r3
 80019b0:	4b43      	ldr	r3, [pc, #268]	; (8001ac0 <isr_rise+0x2a0>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4258      	negs	r0, r3
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	f000 0007 	and.w	r0, r0, #7
 80019be:	bf58      	it	pl
 80019c0:	4243      	negpl	r3, r0
 80019c2:	2001      	movs	r0, #1
 80019c4:	fa00 f303 	lsl.w	r3, r0, r3
 80019c8:	b25b      	sxtb	r3, r3
 80019ca:	430b      	orrs	r3, r1
 80019cc:	b25b      	sxtb	r3, r3
 80019ce:	b2d9      	uxtb	r1, r3
 80019d0:	4b3b      	ldr	r3, [pc, #236]	; (8001ac0 <isr_rise+0x2a0>)
 80019d2:	4413      	add	r3, r2
 80019d4:	460a      	mov	r2, r1
 80019d6:	721a      	strb	r2, [r3, #8]
 80019d8:	e052      	b.n	8001a80 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 80019da:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019de:	4618      	mov	r0, r3
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	a330      	add	r3, pc, #192	; (adr r3, 8001aa8 <isr_rise+0x288>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe fe1d 	bl	8000628 <__aeabi_dmul>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4614      	mov	r4, r2
 80019f4:	461d      	mov	r5, r3
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fdac 	bl	8000554 <__aeabi_i2d>
 80019fc:	4602      	mov	r2, r0
 80019fe:	460b      	mov	r3, r1
 8001a00:	4620      	mov	r0, r4
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7ff f882 	bl	8000b0c <__aeabi_dcmplt>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d038      	beq.n	8001a80 <isr_rise+0x260>
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7fe fda0 	bl	8000554 <__aeabi_i2d>
 8001a14:	4604      	mov	r4, r0
 8001a16:	460d      	mov	r5, r1
 8001a18:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd99 	bl	8000554 <__aeabi_i2d>
 8001a22:	a323      	add	r3, pc, #140	; (adr r3, 8001ab0 <isr_rise+0x290>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe fdfe 	bl	8000628 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4620      	mov	r0, r4
 8001a32:	4629      	mov	r1, r5
 8001a34:	f7ff f86a 	bl	8000b0c <__aeabi_dcmplt>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d020      	beq.n	8001a80 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <isr_rise+0x2a0>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	da00      	bge.n	8001a48 <isr_rise+0x228>
 8001a46:	3307      	adds	r3, #7
 8001a48:	10db      	asrs	r3, r3, #3
 8001a4a:	461a      	mov	r2, r3
 8001a4c:	4b1c      	ldr	r3, [pc, #112]	; (8001ac0 <isr_rise+0x2a0>)
 8001a4e:	4413      	add	r3, r2
 8001a50:	7a1b      	ldrb	r3, [r3, #8]
 8001a52:	b259      	sxtb	r1, r3
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <isr_rise+0x2a0>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	4258      	negs	r0, r3
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	f000 0007 	and.w	r0, r0, #7
 8001a62:	bf58      	it	pl
 8001a64:	4243      	negpl	r3, r0
 8001a66:	2001      	movs	r0, #1
 8001a68:	fa00 f303 	lsl.w	r3, r0, r3
 8001a6c:	b25b      	sxtb	r3, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	400b      	ands	r3, r1
 8001a74:	b25b      	sxtb	r3, r3
 8001a76:	b2d9      	uxtb	r1, r3
 8001a78:	4b11      	ldr	r3, [pc, #68]	; (8001ac0 <isr_rise+0x2a0>)
 8001a7a:	4413      	add	r3, r2
 8001a7c:	460a      	mov	r2, r1
 8001a7e:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001a80:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <isr_rise+0x2a0>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a0e      	ldr	r2, [pc, #56]	; (8001ac0 <isr_rise+0x2a0>)
 8001a88:	6053      	str	r3, [r2, #4]
            break;
 8001a8a:	e005      	b.n	8001a98 <isr_rise+0x278>
            break;
 8001a8c:	bf00      	nop
 8001a8e:	e004      	b.n	8001a9a <isr_rise+0x27a>
            break;
 8001a90:	bf00      	nop
 8001a92:	e002      	b.n	8001a9a <isr_rise+0x27a>
            break;
 8001a94:	bf00      	nop
 8001a96:	e000      	b.n	8001a9a <isr_rise+0x27a>
            break;
 8001a98:	bf00      	nop
    }
    UNLOCK();
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	f3af 8000 	nop.w
 8001aa8:	66666666 	.word	0x66666666
 8001aac:	3fe66666 	.word	0x3fe66666
 8001ab0:	cccccccd 	.word	0xcccccccd
 8001ab4:	3ff4cccc 	.word	0x3ff4cccc
 8001ab8:	20000138 	.word	0x20000138
 8001abc:	20000174 	.word	0x20000174
 8001ac0:	200000f0 	.word	0x200000f0
 8001ac4:	0800b840 	.word	0x0800b840

08001ac8 <isr_timeout>:

void isr_timeout(void) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001acc:	4b12      	ldr	r3, [pc, #72]	; (8001b18 <isr_timeout+0x50>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d11f      	bne.n	8001b14 <isr_timeout+0x4c>
        work.state = Received;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <isr_timeout+0x50>)
 8001ad6:	2202      	movs	r2, #2
 8001ad8:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI0_IRQn); //input interrupt stop
 8001ada:	2006      	movs	r0, #6
 8001adc:	f005 fab7 	bl	800704e <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 8001ae0:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <isr_timeout+0x54>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <isr_timeout+0x58>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <isr_timeout+0x50>)
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001af4:	4b08      	ldr	r3, [pc, #32]	; (8001b18 <isr_timeout+0x50>)
 8001af6:	f04f 32ff 	mov.w	r2, #4294967295
 8001afa:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001afc:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <isr_timeout+0x50>)
 8001afe:	f04f 32ff 	mov.w	r2, #4294967295
 8001b02:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001b04:	4b04      	ldr	r3, [pc, #16]	; (8001b18 <isr_timeout+0x50>)
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001b0c:	4b02      	ldr	r3, [pc, #8]	; (8001b18 <isr_timeout+0x50>)
 8001b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b12:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	20000138 	.word	0x20000138
 8001b1c:	20000179 	.word	0x20000179
 8001b20:	20000178 	.word	0x20000178

08001b24 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b28:	f3bf 8f4f 	dsb	sy
}
 8001b2c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b2e:	4b06      	ldr	r3, [pc, #24]	; (8001b48 <__NVIC_SystemReset+0x24>)
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b36:	4904      	ldr	r1, [pc, #16]	; (8001b48 <__NVIC_SystemReset+0x24>)
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <__NVIC_SystemReset+0x28>)
 8001b3a:	4313      	orrs	r3, r2
 8001b3c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b3e:	f3bf 8f4f 	dsb	sy
}
 8001b42:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b44:	bf00      	nop
 8001b46:	e7fd      	b.n	8001b44 <__NVIC_SystemReset+0x20>
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	05fa0004 	.word	0x05fa0004

08001b50 <HAL_TIM_PeriodElapsedCallback>:

uint8_t inhome=0;
int ir_count_idle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)//uss timer, 100khz
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d104      	bne.n	8001b6c <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8001b62:	4b3b      	ldr	r3, [pc, #236]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	3301      	adds	r3, #1
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001b6a:	6013      	str	r3, [r2, #0]
//	  if(us_Tick>0xffff0000){us_Tick=0;}

  }

  if(htim->Instance == TIM6)//system timer, 100hz
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a38      	ldr	r2, [pc, #224]	; (8001c54 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d127      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x76>
  {
	  gTick++;
 8001b76:	4b38      	ldr	r3, [pc, #224]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	4a36      	ldr	r2, [pc, #216]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b7e:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001b80:	4b35      	ldr	r3, [pc, #212]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001b82:	6819      	ldr	r1, [r3, #0]
 8001b84:	4b35      	ldr	r3, [pc, #212]	; (8001c5c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001b86:	fba3 2301 	umull	r2, r3, r3, r1
 8001b8a:	08da      	lsrs	r2, r3, #3
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	1aca      	subs	r2, r1, r3
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d104      	bne.n	8001ba4 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001b9a:	4b31      	ldr	r3, [pc, #196]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	; (8001c60 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ba2:	6013      	str	r3, [r2, #0]
	  if((gTick%50) == 0){Tick_500ms++;}
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	4b2e      	ldr	r3, [pc, #184]	; (8001c64 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001baa:	fba3 1302 	umull	r1, r3, r3, r2
 8001bae:	091b      	lsrs	r3, r3, #4
 8001bb0:	2132      	movs	r1, #50	; 0x32
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d104      	bne.n	8001bc6 <HAL_TIM_PeriodElapsedCallback+0x76>
 8001bbc:	4b2a      	ldr	r3, [pc, #168]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	4a29      	ldr	r2, [pc, #164]	; (8001c68 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001bc4:	6013      	str	r3, [r2, #0]

  }

  if(htim->Instance == TIM7)//uss timer, 1khz
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a28      	ldr	r2, [pc, #160]	; (8001c6c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d10c      	bne.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
	  USS_tick++;
 8001bd0:	4b27      	ldr	r3, [pc, #156]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001bd8:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8001bda:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001be2:	d902      	bls.n	8001bea <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001be4:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)//uss timer, 1779hz
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a21      	ldr	r2, [pc, #132]	; (8001c74 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d118      	bne.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0xd6>
  {
	  if(TIR_setData_flag){tick();}
 8001bf4:	4b20      	ldr	r3, [pc, #128]	; (8001c78 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001bfc:	f001 f9ac 	bl	8002f58 <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 8001c00:	4b1e      	ldr	r3, [pc, #120]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d005      	beq.n	8001c14 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	b2da      	uxtb	r2, r3
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c12:	701a      	strb	r2, [r3, #0]

	  if(isr_timeout_counter>1)//횟수 수정할 것
 8001c14:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d904      	bls.n	8001c26 <HAL_TIM_PeriodElapsedCallback+0xd6>
	  {
		  isr_timeout_counter = 0;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 8001c22:	f7ff ff51 	bl	8001ac8 <isr_timeout>
	  }
  }

  if(htim->Instance == TIM14)//IR NEC timer, 1Mhz
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4a16      	ldr	r2, [pc, #88]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001c2c:	4293      	cmp	r3, r2
 8001c2e:	d109      	bne.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0xf4>
  {
	  IR_NEC_Tick+=4;
 8001c30:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	3304      	adds	r3, #4
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c38:	6013      	str	r3, [r2, #0]
	  HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 8001c3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001c3e:	4813      	ldr	r0, [pc, #76]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c40:	f005 fbfd 	bl	800743e <HAL_GPIO_TogglePin>
  }
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40000c00 	.word	0x40000c00
 8001c50:	20000150 	.word	0x20000150
 8001c54:	40001000 	.word	0x40001000
 8001c58:	20000154 	.word	0x20000154
 8001c5c:	cccccccd 	.word	0xcccccccd
 8001c60:	2000015c 	.word	0x2000015c
 8001c64:	51eb851f 	.word	0x51eb851f
 8001c68:	20000160 	.word	0x20000160
 8001c6c:	40001400 	.word	0x40001400
 8001c70:	20000588 	.word	0x20000588
 8001c74:	40014000 	.word	0x40014000
 8001c78:	20000170 	.word	0x20000170
 8001c7c:	20000179 	.word	0x20000179
 8001c80:	20000178 	.word	0x20000178
 8001c84:	40002000 	.word	0x40002000
 8001c88:	20000174 	.word	0x20000174
 8001c8c:	40020400 	.word	0x40020400

08001c90 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001c9a:	88fb      	ldrh	r3, [r7, #6]
 8001c9c:	2b40      	cmp	r3, #64	; 0x40
 8001c9e:	d10a      	bne.n	8001cb6 <HAL_GPIO_EXTI_Callback+0x26>
    	USS_end[0] = us_Tick;
 8001ca0:	4b31      	ldr	r3, [pc, #196]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001ca8:	601a      	str	r2, [r3, #0]
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001caa:	4831      	ldr	r0, [pc, #196]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cac:	f008 fcd4 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001cb0:	4830      	ldr	r0, [pc, #192]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001cb2:	f006 fdd1 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data2_Pin) {
 8001cb6:	88fb      	ldrh	r3, [r7, #6]
 8001cb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001cbc:	d10a      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x44>
    	USS_end[1] = us_Tick;
 8001cbe:	4b2a      	ldr	r3, [pc, #168]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	4b29      	ldr	r3, [pc, #164]	; (8001d6c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cc6:	605a      	str	r2, [r3, #4]
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001cc8:	4829      	ldr	r0, [pc, #164]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cca:	f008 fcc5 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001cce:	4829      	ldr	r0, [pc, #164]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001cd0:	f006 fdc2 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data3_Pin) {
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001cda:	d105      	bne.n	8001ce8 <HAL_GPIO_EXTI_Callback+0x58>
    	//USS_end[2] = us_Tick;
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001cdc:	4824      	ldr	r0, [pc, #144]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cde:	f008 fcbb 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001ce2:	4824      	ldr	r0, [pc, #144]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001ce4:	f006 fdb8 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data4_Pin) {
 8001ce8:	88fb      	ldrh	r3, [r7, #6]
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d10a      	bne.n	8001d04 <HAL_GPIO_EXTI_Callback+0x74>
    	USS_end[3] = us_Tick;
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	4b1d      	ldr	r3, [pc, #116]	; (8001d6c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001cf6:	60da      	str	r2, [r3, #12]
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001cf8:	481d      	ldr	r0, [pc, #116]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001cfa:	f008 fcad 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001cfe:	481d      	ldr	r0, [pc, #116]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d00:	f006 fdaa 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data5_Pin) {
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	2b80      	cmp	r3, #128	; 0x80
 8001d08:	d10a      	bne.n	8001d20 <HAL_GPIO_EXTI_Callback+0x90>
    	USS_end[4] = us_Tick;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <HAL_GPIO_EXTI_Callback+0xd8>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	461a      	mov	r2, r3
 8001d10:	4b16      	ldr	r3, [pc, #88]	; (8001d6c <HAL_GPIO_EXTI_Callback+0xdc>)
 8001d12:	611a      	str	r2, [r3, #16]
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001d14:	4816      	ldr	r0, [pc, #88]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001d16:	f008 fc9f 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001d1a:	4816      	ldr	r0, [pc, #88]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d1c:	f006 fd9c 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data6_Pin) {
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d26:	d105      	bne.n	8001d34 <HAL_GPIO_EXTI_Callback+0xa4>
    	//USS_end[5] = us_Tick;
    	printf("HAL_TIM_Base_Stop_IT (&htim5)\n");
 8001d28:	4811      	ldr	r0, [pc, #68]	; (8001d70 <HAL_GPIO_EXTI_Callback+0xe0>)
 8001d2a:	f008 fc95 	bl	800a658 <puts>
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001d2e:	4811      	ldr	r0, [pc, #68]	; (8001d74 <HAL_GPIO_EXTI_Callback+0xe4>)
 8001d30:	f006 fd92 	bl	8008858 <HAL_TIM_Base_Stop_IT>
    }



    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001d34:	88fb      	ldrh	r3, [r7, #6]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d111      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0xce>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){	isr_rise(); }//high edge
 8001d3a:	2101      	movs	r1, #1
 8001d3c:	480e      	ldr	r0, [pc, #56]	; (8001d78 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d3e:	f005 fb4d 	bl	80073dc <HAL_GPIO_ReadPin>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <HAL_GPIO_EXTI_Callback+0xbc>
 8001d48:	f7ff fd6a 	bl	8001820 <isr_rise>
             if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ isr_fall();}//low edge
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	480a      	ldr	r0, [pc, #40]	; (8001d78 <HAL_GPIO_EXTI_Callback+0xe8>)
 8001d50:	f005 fb44 	bl	80073dc <HAL_GPIO_ReadPin>
 8001d54:	4603      	mov	r3, r0
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d101      	bne.n	8001d5e <HAL_GPIO_EXTI_Callback+0xce>
 8001d5a:	f7ff f971 	bl	8001040 <isr_fall>
        }
}
 8001d5e:	bf00      	nop
 8001d60:	3708      	adds	r7, #8
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000150 	.word	0x20000150
 8001d6c:	20000570 	.word	0x20000570
 8001d70:	0800b5cc 	.word	0x0800b5cc
 8001d74:	20000354 	.word	0x20000354
 8001d78:	40021000 	.word	0x40021000

08001d7c <startTTS>:


void startTTS()
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	3310      	adds	r3, #16
 8001d8e:	443b      	add	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	443b      	add	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	3310      	adds	r3, #16
 8001dae:	443b      	add	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	443b      	add	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	3310      	adds	r3, #16
 8001dce:	443b      	add	r3, r7
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60fa      	str	r2, [r7, #12]
 8001ddc:	3310      	adds	r3, #16
 8001dde:	443b      	add	r3, r7
 8001de0:	2200      	movs	r2, #0
 8001de2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	60fa      	str	r2, [r7, #12]
 8001dec:	3310      	adds	r3, #16
 8001dee:	443b      	add	r3, r7
 8001df0:	2201      	movs	r2, #1
 8001df2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	1c5a      	adds	r2, r3, #1
 8001dfa:	60fa      	str	r2, [r7, #12]
 8001dfc:	3310      	adds	r3, #16
 8001dfe:	443b      	add	r3, r7
 8001e00:	2200      	movs	r2, #0
 8001e02:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001e06:	1d39      	adds	r1, r7, #4
 8001e08:	2301      	movs	r3, #1
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	f241 3089 	movw	r0, #5001	; 0x1389
 8001e10:	f001 fb46 	bl	80034a0 <sendCan>
}
 8001e14:	bf00      	nop
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <endTTS>:

void endTTS()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001e22:	2300      	movs	r3, #0
 8001e24:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	1c5a      	adds	r2, r3, #1
 8001e2a:	60fa      	str	r2, [r7, #12]
 8001e2c:	3310      	adds	r3, #16
 8001e2e:	443b      	add	r3, r7
 8001e30:	2200      	movs	r2, #0
 8001e32:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	1c5a      	adds	r2, r3, #1
 8001e3a:	60fa      	str	r2, [r7, #12]
 8001e3c:	3310      	adds	r3, #16
 8001e3e:	443b      	add	r3, r7
 8001e40:	2200      	movs	r2, #0
 8001e42:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	60fa      	str	r2, [r7, #12]
 8001e4c:	3310      	adds	r3, #16
 8001e4e:	443b      	add	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	60fa      	str	r2, [r7, #12]
 8001e5c:	3310      	adds	r3, #16
 8001e5e:	443b      	add	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	1c5a      	adds	r2, r3, #1
 8001e6a:	60fa      	str	r2, [r7, #12]
 8001e6c:	3310      	adds	r3, #16
 8001e6e:	443b      	add	r3, r7
 8001e70:	2200      	movs	r2, #0
 8001e72:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	1c5a      	adds	r2, r3, #1
 8001e7a:	60fa      	str	r2, [r7, #12]
 8001e7c:	3310      	adds	r3, #16
 8001e7e:	443b      	add	r3, r7
 8001e80:	2200      	movs	r2, #0
 8001e82:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 9;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1c5a      	adds	r2, r3, #1
 8001e8a:	60fa      	str	r2, [r7, #12]
 8001e8c:	3310      	adds	r3, #16
 8001e8e:	443b      	add	r3, r7
 8001e90:	2209      	movs	r2, #9
 8001e92:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	1c5a      	adds	r2, r3, #1
 8001e9a:	60fa      	str	r2, [r7, #12]
 8001e9c:	3310      	adds	r3, #16
 8001e9e:	443b      	add	r3, r7
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001ea6:	1d39      	adds	r1, r7, #4
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	2208      	movs	r2, #8
 8001eac:	f241 3089 	movw	r0, #5001	; 0x1389
 8001eb0:	f001 faf6 	bl	80034a0 <sendCan>
}
 8001eb4:	bf00      	nop
 8001eb6:	3710      	adds	r7, #16
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <parsePmm>:

void parsePmm(uint8_t *msg)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3307      	adds	r3, #7
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <parsePmm+0x5c>)
 8001ece:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3306      	adds	r3, #6
 8001ed4:	781a      	ldrb	r2, [r3, #0]
 8001ed6:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <parsePmm+0x60>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	09d2      	lsrs	r2, r2, #7
 8001edc:	b2d2      	uxtb	r2, r2
 8001ede:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3306      	adds	r3, #6
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	119b      	asrs	r3, r3, #6
 8001ee8:	b2da      	uxtb	r2, r3
 8001eea:	4b0c      	ldr	r3, [pc, #48]	; (8001f1c <parsePmm+0x60>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f002 0201 	and.w	r2, r2, #1
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3306      	adds	r3, #6
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	115b      	asrs	r3, r3, #5
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	4b06      	ldr	r3, [pc, #24]	; (8001f1c <parsePmm+0x60>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f002 0201 	and.w	r2, r2, #1
 8001f08:	b2d2      	uxtb	r2, r2
 8001f0a:	745a      	strb	r2, [r3, #17]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr
 8001f18:	200001a8 	.word	0x200001a8
 8001f1c:	200001a4 	.word	0x200001a4

08001f20 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e012      	b.n	8001f54 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3307      	adds	r3, #7
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	461a      	mov	r2, r3
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	fa42 f303 	asr.w	r3, r2, r3
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	f003 0301 	and.w	r3, r3, #1
 8001f42:	b2d9      	uxtb	r1, r3
 8001f44:	4a0a      	ldr	r2, [pc, #40]	; (8001f70 <parseTop+0x50>)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	4413      	add	r3, r2
 8001f4a:	460a      	mov	r2, r1
 8001f4c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	3301      	adds	r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	dde9      	ble.n	8001f2e <parseTop+0xe>
    touch = msg[6];
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	799a      	ldrb	r2, [r3, #6]
 8001f5e:	4b05      	ldr	r3, [pc, #20]	; (8001f74 <parseTop+0x54>)
 8001f60:	701a      	strb	r2, [r3, #0]
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	2000019c 	.word	0x2000019c
 8001f74:	20000199 	.word	0x20000199

08001f78 <parseState>:


void parseState(uint8_t *msg)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3307      	adds	r3, #7
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	461a      	mov	r2, r3
 8001f88:	4b19      	ldr	r3, [pc, #100]	; (8001ff0 <parseState+0x78>)
 8001f8a:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3305      	adds	r3, #5
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	09db      	lsrs	r3, r3, #7
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b17      	ldr	r3, [pc, #92]	; (8001ff4 <parseState+0x7c>)
 8001f98:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3305      	adds	r3, #5
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	119b      	asrs	r3, r3, #6
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	b2da      	uxtb	r2, r3
 8001faa:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <parseState+0x80>)
 8001fac:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	09db      	lsrs	r3, r3, #7
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <parseState+0x84>)
 8001fba:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	119b      	asrs	r3, r3, #6
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	4b0c      	ldr	r3, [pc, #48]	; (8002000 <parseState+0x88>)
 8001fce:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3304      	adds	r3, #4
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	115b      	asrs	r3, r3, #5
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <parseState+0x8c>)
 8001fe2:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	20000190 	.word	0x20000190
 8001ff4:	20000194 	.word	0x20000194
 8001ff8:	20000195 	.word	0x20000195
 8001ffc:	20000196 	.word	0x20000196
 8002000:	20000197 	.word	0x20000197
 8002004:	20000198 	.word	0x20000198

08002008 <controlMotor>:

void controlMotor()
{
 8002008:	b598      	push	{r3, r4, r7, lr}
 800200a:	af00      	add	r7, sp, #0
    static int count = 0;
    printf("motor_sw=%d, motor_break=%d\n", motor_sw, motor_break);
 800200c:	4b41      	ldr	r3, [pc, #260]	; (8002114 <controlMotor+0x10c>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	4b41      	ldr	r3, [pc, #260]	; (8002118 <controlMotor+0x110>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	461a      	mov	r2, r3
 8002018:	4840      	ldr	r0, [pc, #256]	; (800211c <controlMotor+0x114>)
 800201a:	f008 fa97 	bl	800a54c <iprintf>
    if(motor_sw)
 800201e:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <controlMotor+0x10c>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d06c      	beq.n	8002100 <controlMotor+0xf8>
    {
        if(motor_disable_flag)
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <controlMotor+0x118>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d007      	beq.n	800203e <controlMotor+0x36>
        {printf("enable\n");
 800202e:	483d      	ldr	r0, [pc, #244]	; (8002124 <controlMotor+0x11c>)
 8002030:	f008 fb12 	bl	800a658 <puts>
            enable();
 8002034:	f002 fba4 	bl	8004780 <enable>
            motor_disable_flag = 0;
 8002038:	4b39      	ldr	r3, [pc, #228]	; (8002120 <controlMotor+0x118>)
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 800203e:	4b36      	ldr	r3, [pc, #216]	; (8002118 <controlMotor+0x110>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b01      	cmp	r3, #1
 8002044:	d121      	bne.n	800208a <controlMotor+0x82>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8002046:	4b38      	ldr	r3, [pc, #224]	; (8002128 <controlMotor+0x120>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fd83 	bl	8000b5c <__aeabi_d2iz>
 8002056:	4603      	mov	r3, r0
 8002058:	b21c      	sxth	r4, r3
 800205a:	4b33      	ldr	r3, [pc, #204]	; (8002128 <controlMotor+0x120>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002062:	4610      	mov	r0, r2
 8002064:	4619      	mov	r1, r3
 8002066:	f7fe fd79 	bl	8000b5c <__aeabi_d2iz>
 800206a:	4603      	mov	r3, r0
 800206c:	b21b      	sxth	r3, r3
 800206e:	4619      	mov	r1, r3
 8002070:	4620      	mov	r0, r4
 8002072:	f002 fd25 	bl	8004ac0 <control>
            motor_break = 2;
 8002076:	4b28      	ldr	r3, [pc, #160]	; (8002118 <controlMotor+0x110>)
 8002078:	2202      	movs	r2, #2
 800207a:	601a      	str	r2, [r3, #0]
            count = 0;
 800207c:	4b2b      	ldr	r3, [pc, #172]	; (800212c <controlMotor+0x124>)
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
            printf("motor_break==1\n");
 8002082:	482b      	ldr	r0, [pc, #172]	; (8002130 <controlMotor+0x128>)
 8002084:	f008 fae8 	bl	800a658 <puts>
    {
        disable();
        motor_disable_flag = 1;
        printf("disable==1\n");
    }
}
 8002088:	e042      	b.n	8002110 <controlMotor+0x108>
        else if(motor_break == 2)
 800208a:	4b23      	ldr	r3, [pc, #140]	; (8002118 <controlMotor+0x110>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d127      	bne.n	80020e2 <controlMotor+0xda>
            count++;
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <controlMotor+0x124>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	3301      	adds	r3, #1
 8002098:	4a24      	ldr	r2, [pc, #144]	; (800212c <controlMotor+0x124>)
 800209a:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 800209c:	4b22      	ldr	r3, [pc, #136]	; (8002128 <controlMotor+0x120>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fd58 	bl	8000b5c <__aeabi_d2iz>
 80020ac:	4603      	mov	r3, r0
 80020ae:	b21c      	sxth	r4, r3
 80020b0:	4b1d      	ldr	r3, [pc, #116]	; (8002128 <controlMotor+0x120>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80020b8:	4610      	mov	r0, r2
 80020ba:	4619      	mov	r1, r3
 80020bc:	f7fe fd4e 	bl	8000b5c <__aeabi_d2iz>
 80020c0:	4603      	mov	r3, r0
 80020c2:	b21b      	sxth	r3, r3
 80020c4:	4619      	mov	r1, r3
 80020c6:	4620      	mov	r0, r4
 80020c8:	f002 fcfa 	bl	8004ac0 <control>
            if(count == 20)
 80020cc:	4b17      	ldr	r3, [pc, #92]	; (800212c <controlMotor+0x124>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b14      	cmp	r3, #20
 80020d2:	d102      	bne.n	80020da <controlMotor+0xd2>
                motor_break = 3;
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <controlMotor+0x110>)
 80020d6:	2203      	movs	r2, #3
 80020d8:	601a      	str	r2, [r3, #0]
            printf("motor_break==2\n");
 80020da:	4816      	ldr	r0, [pc, #88]	; (8002134 <controlMotor+0x12c>)
 80020dc:	f008 fabc 	bl	800a658 <puts>
}
 80020e0:	e016      	b.n	8002110 <controlMotor+0x108>
        else if(motor_break == 3)
 80020e2:	4b0d      	ldr	r3, [pc, #52]	; (8002118 <controlMotor+0x110>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d112      	bne.n	8002110 <controlMotor+0x108>
        	printf("motor_break==3\n");
 80020ea:	4813      	ldr	r0, [pc, #76]	; (8002138 <controlMotor+0x130>)
 80020ec:	f008 fab4 	bl	800a658 <puts>
            control(0,0);
 80020f0:	2100      	movs	r1, #0
 80020f2:	2000      	movs	r0, #0
 80020f4:	f002 fce4 	bl	8004ac0 <control>
            count = 0;
 80020f8:	4b0c      	ldr	r3, [pc, #48]	; (800212c <controlMotor+0x124>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
}
 80020fe:	e007      	b.n	8002110 <controlMotor+0x108>
        disable();
 8002100:	f002 fba2 	bl	8004848 <disable>
        motor_disable_flag = 1;
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <controlMotor+0x118>)
 8002106:	2201      	movs	r2, #1
 8002108:	601a      	str	r2, [r3, #0]
        printf("disable==1\n");
 800210a:	480c      	ldr	r0, [pc, #48]	; (800213c <controlMotor+0x134>)
 800210c:	f008 faa4 	bl	800a658 <puts>
}
 8002110:	bf00      	nop
 8002112:	bd98      	pop	{r3, r4, r7, pc}
 8002114:	20000000 	.word	0x20000000
 8002118:	20000188 	.word	0x20000188
 800211c:	0800b5ec 	.word	0x0800b5ec
 8002120:	2000018c 	.word	0x2000018c
 8002124:	0800b60c 	.word	0x0800b60c
 8002128:	200001b4 	.word	0x200001b4
 800212c:	200001c8 	.word	0x200001c8
 8002130:	0800b614 	.word	0x0800b614
 8002134:	0800b624 	.word	0x0800b624
 8002138:	0800b634 	.word	0x0800b634
 800213c:	0800b644 	.word	0x0800b644

08002140 <toRPM>:


int toRPM()
{
 8002140:	b5b0      	push	{r4, r5, r7, lr}
 8002142:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 8002144:	4b28      	ldr	r3, [pc, #160]	; (80021e8 <toRPM+0xa8>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800214c:	4b26      	ldr	r3, [pc, #152]	; (80021e8 <toRPM+0xa8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002154:	a320      	add	r3, pc, #128	; (adr r3, 80021d8 <toRPM+0x98>)
 8002156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800215a:	f7fe fa65 	bl	8000628 <__aeabi_dmul>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	4620      	mov	r0, r4
 8002164:	4629      	mov	r1, r5
 8002166:	f7fe f8a9 	bl	80002bc <__adddf3>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <toRPM+0xa8>)
 8002174:	681c      	ldr	r4, [r3, #0]
 8002176:	a31a      	add	r3, pc, #104	; (adr r3, 80021e0 <toRPM+0xa0>)
 8002178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217c:	f7fe fa54 	bl	8000628 <__aeabi_dmul>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8002188:	4b17      	ldr	r3, [pc, #92]	; (80021e8 <toRPM+0xa8>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002190:	4b15      	ldr	r3, [pc, #84]	; (80021e8 <toRPM+0xa8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002198:	a30f      	add	r3, pc, #60	; (adr r3, 80021d8 <toRPM+0x98>)
 800219a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800219e:	f7fe fa43 	bl	8000628 <__aeabi_dmul>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4620      	mov	r0, r4
 80021a8:	4629      	mov	r1, r5
 80021aa:	f7fe f885 	bl	80002b8 <__aeabi_dsub>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <toRPM+0xa8>)
 80021b8:	681c      	ldr	r4, [r3, #0]
 80021ba:	a309      	add	r3, pc, #36	; (adr r3, 80021e0 <toRPM+0xa0>)
 80021bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021c0:	f7fe fa32 	bl	8000628 <__aeabi_dmul>
 80021c4:	4602      	mov	r2, r0
 80021c6:	460b      	mov	r3, r1
 80021c8:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 80021cc:	2300      	movs	r3, #0
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	bdb0      	pop	{r4, r5, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	f3af 8000 	nop.w
 80021d8:	0e560419 	.word	0x0e560419
 80021dc:	3fcdb22d 	.word	0x3fcdb22d
 80021e0:	31bcaa49 	.word	0x31bcaa49
 80021e4:	40625d31 	.word	0x40625d31
 80021e8:	200001b4 	.word	0x200001b4

080021ec <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 80021ec:	b590      	push	{r4, r7, lr}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	b21a      	sxth	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3301      	adds	r3, #1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	b21b      	sxth	r3, r3
 8002204:	4313      	orrs	r3, r2
 8002206:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8002208:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800220c:	4618      	mov	r0, r3
 800220e:	f7fe f9a1 	bl	8000554 <__aeabi_i2d>
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <parseCmdvel+0x8c>)
 8002214:	681c      	ldr	r4, [r3, #0]
 8002216:	f04f 0200 	mov.w	r2, #0
 800221a:	4b18      	ldr	r3, [pc, #96]	; (800227c <parseCmdvel+0x90>)
 800221c:	f7fe fb2e 	bl	800087c <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3302      	adds	r3, #2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	b21a      	sxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3303      	adds	r3, #3
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21b      	sxth	r3, r3
 800223a:	4313      	orrs	r3, r2
 800223c:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 800223e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002242:	4618      	mov	r0, r3
 8002244:	f7fe f986 	bl	8000554 <__aeabi_i2d>
 8002248:	4b0b      	ldr	r3, [pc, #44]	; (8002278 <parseCmdvel+0x8c>)
 800224a:	681c      	ldr	r4, [r3, #0]
 800224c:	f04f 0200 	mov.w	r2, #0
 8002250:	4b0a      	ldr	r3, [pc, #40]	; (800227c <parseCmdvel+0x90>)
 8002252:	f7fe fb13 	bl	800087c <__aeabi_ddiv>
 8002256:	4602      	mov	r2, r0
 8002258:	460b      	mov	r3, r1
 800225a:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	791a      	ldrb	r2, [r3, #4]
 8002262:	4b07      	ldr	r3, [pc, #28]	; (8002280 <parseCmdvel+0x94>)
 8002264:	701a      	strb	r2, [r3, #0]
    toRPM();
 8002266:	f7ff ff6b 	bl	8002140 <toRPM>
    motor_break = 1;
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <parseCmdvel+0x98>)
 800226c:	2201      	movs	r2, #1
 800226e:	601a      	str	r2, [r3, #0]
}
 8002270:	bf00      	nop
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}
 8002278:	200001b4 	.word	0x200001b4
 800227c:	40590000 	.word	0x40590000
 8002280:	20000000 	.word	0x20000000
 8002284:	20000188 	.word	0x20000188

08002288 <sendEnc>:



void sendEnc(int id)
{
 8002288:	b590      	push	{r4, r7, lr}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8002294:	4b5f      	ldr	r3, [pc, #380]	; (8002414 <sendEnc+0x18c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800229c:	f04f 0200 	mov.w	r2, #0
 80022a0:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <sendEnc+0x190>)
 80022a2:	f7fe f9c1 	bl	8000628 <__aeabi_dmul>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4610      	mov	r0, r2
 80022ac:	4619      	mov	r1, r3
 80022ae:	f7fe fc55 	bl	8000b5c <__aeabi_d2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	b219      	sxth	r1, r3
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	617a      	str	r2, [r7, #20]
 80022bc:	b2ca      	uxtb	r2, r1
 80022be:	3318      	adds	r3, #24
 80022c0:	443b      	add	r3, r7
 80022c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80022c6:	4b53      	ldr	r3, [pc, #332]	; (8002414 <sendEnc+0x18c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80022ce:	f04f 0200 	mov.w	r2, #0
 80022d2:	4b51      	ldr	r3, [pc, #324]	; (8002418 <sendEnc+0x190>)
 80022d4:	f7fe f9a8 	bl	8000628 <__aeabi_dmul>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	f7fe fc3c 	bl	8000b5c <__aeabi_d2iz>
 80022e4:	4603      	mov	r3, r0
 80022e6:	b21b      	sxth	r3, r3
 80022e8:	121b      	asrs	r3, r3, #8
 80022ea:	b219      	sxth	r1, r3
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	617a      	str	r2, [r7, #20]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	3318      	adds	r3, #24
 80022f6:	443b      	add	r3, r7
 80022f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 80022fc:	4b45      	ldr	r3, [pc, #276]	; (8002414 <sendEnc+0x18c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <sendEnc+0x190>)
 800230a:	f7fe f98d 	bl	8000628 <__aeabi_dmul>
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4610      	mov	r0, r2
 8002314:	4619      	mov	r1, r3
 8002316:	f7fe fc21 	bl	8000b5c <__aeabi_d2iz>
 800231a:	4603      	mov	r3, r0
 800231c:	b219      	sxth	r1, r3
 800231e:	697b      	ldr	r3, [r7, #20]
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	617a      	str	r2, [r7, #20]
 8002324:	b2ca      	uxtb	r2, r1
 8002326:	3318      	adds	r3, #24
 8002328:	443b      	add	r3, r7
 800232a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800232e:	4b39      	ldr	r3, [pc, #228]	; (8002414 <sendEnc+0x18c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8002336:	f04f 0200 	mov.w	r2, #0
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <sendEnc+0x190>)
 800233c:	f7fe f974 	bl	8000628 <__aeabi_dmul>
 8002340:	4602      	mov	r2, r0
 8002342:	460b      	mov	r3, r1
 8002344:	4610      	mov	r0, r2
 8002346:	4619      	mov	r1, r3
 8002348:	f7fe fc08 	bl	8000b5c <__aeabi_d2iz>
 800234c:	4603      	mov	r3, r0
 800234e:	b21b      	sxth	r3, r3
 8002350:	121b      	asrs	r3, r3, #8
 8002352:	b219      	sxth	r1, r3
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	1c5a      	adds	r2, r3, #1
 8002358:	617a      	str	r2, [r7, #20]
 800235a:	b2ca      	uxtb	r2, r1
 800235c:	3318      	adds	r3, #24
 800235e:	443b      	add	r3, r7
 8002360:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 8002364:	4b2d      	ldr	r3, [pc, #180]	; (800241c <sendEnc+0x194>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	7c1b      	ldrb	r3, [r3, #16]
 800236a:	005b      	lsls	r3, r3, #1
 800236c:	b25a      	sxtb	r2, r3
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <sendEnc+0x194>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	7bdb      	ldrb	r3, [r3, #15]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	4313      	orrs	r3, r2
 8002378:	b259      	sxtb	r1, r3
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	1c5a      	adds	r2, r3, #1
 800237e:	617a      	str	r2, [r7, #20]
 8002380:	b2ca      	uxtb	r2, r1
 8002382:	3318      	adds	r3, #24
 8002384:	443b      	add	r3, r7
 8002386:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <sendEnc+0x18c>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <sendEnc+0x190>)
 8002398:	f7fe f946 	bl	8000628 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4610      	mov	r0, r2
 80023a2:	4619      	mov	r1, r3
 80023a4:	697c      	ldr	r4, [r7, #20]
 80023a6:	1c63      	adds	r3, r4, #1
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	f7fe fbff 	bl	8000bac <__aeabi_d2uiz>
 80023ae:	4603      	mov	r3, r0
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	f104 0318 	add.w	r3, r4, #24
 80023b6:	443b      	add	r3, r7
 80023b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 80023bc:	4b15      	ldr	r3, [pc, #84]	; (8002414 <sendEnc+0x18c>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80023c4:	f04f 0200 	mov.w	r2, #0
 80023c8:	4b13      	ldr	r3, [pc, #76]	; (8002418 <sendEnc+0x190>)
 80023ca:	f7fe f92d 	bl	8000628 <__aeabi_dmul>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	697c      	ldr	r4, [r7, #20]
 80023d8:	1c63      	adds	r3, r4, #1
 80023da:	617b      	str	r3, [r7, #20]
 80023dc:	f7fe fbe6 	bl	8000bac <__aeabi_d2uiz>
 80023e0:	4603      	mov	r3, r0
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	f104 0318 	add.w	r3, r4, #24
 80023e8:	443b      	add	r3, r7
 80023ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	617a      	str	r2, [r7, #20]
 80023f4:	3318      	adds	r3, #24
 80023f6:	443b      	add	r3, r7
 80023f8:	2200      	movs	r2, #0
 80023fa:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f107 010c 	add.w	r1, r7, #12
 8002404:	2301      	movs	r3, #1
 8002406:	2208      	movs	r2, #8
 8002408:	f001 f84a 	bl	80034a0 <sendCan>
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bd90      	pop	{r4, r7, pc}
 8002414:	200001b4 	.word	0x200001b4
 8002418:	40590000 	.word	0x40590000
 800241c:	200001a4 	.word	0x200001a4

08002420 <toVW>:


int toVW(void)
{
 8002420:	b598      	push	{r3, r4, r7, lr}
 8002422:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 8002424:	4b2c      	ldr	r3, [pc, #176]	; (80024d8 <toVW+0xb8>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 800242c:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <toVW+0xb8>)
 800242e:	6814      	ldr	r4, [r2, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7fe f88f 	bl	8000554 <__aeabi_i2d>
 8002436:	4602      	mov	r2, r0
 8002438:	460b      	mov	r3, r1
 800243a:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 800243e:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <toVW+0xb8>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8002446:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <toVW+0xb8>)
 8002448:	6814      	ldr	r4, [r2, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe f882 	bl	8000554 <__aeabi_i2d>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 8002458:	4b1f      	ldr	r3, [pc, #124]	; (80024d8 <toVW+0xb8>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <toVW+0xb8>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002468:	f7fd ff28 	bl	80002bc <__adddf3>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <toVW+0xb8>)
 8002476:	681c      	ldr	r4, [r3, #0]
 8002478:	a313      	add	r3, pc, #76	; (adr r3, 80024c8 <toVW+0xa8>)
 800247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800247e:	f7fe f8d3 	bl	8000628 <__aeabi_dmul>
 8002482:	4602      	mov	r2, r0
 8002484:	460b      	mov	r3, r1
 8002486:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 800248a:	4b13      	ldr	r3, [pc, #76]	; (80024d8 <toVW+0xb8>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002492:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <toVW+0xb8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800249a:	f7fd ff0d 	bl	80002b8 <__aeabi_dsub>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <toVW+0xb8>)
 80024a8:	681c      	ldr	r4, [r3, #0]
 80024aa:	a309      	add	r3, pc, #36	; (adr r3, 80024d0 <toVW+0xb0>)
 80024ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b0:	f7fe f8ba 	bl	8000628 <__aeabi_dmul>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	bd98      	pop	{r3, r4, r7, pc}
 80024c2:	bf00      	nop
 80024c4:	f3af 8000 	nop.w
 80024c8:	306c65e9 	.word	0x306c65e9
 80024cc:	3f6be16e 	.word	0x3f6be16e
 80024d0:	5313b470 	.word	0x5313b470
 80024d4:	3f8e0b32 	.word	0x3f8e0b32
 80024d8:	200001b4 	.word	0x200001b4

080024dc <parseEnc>:


void parseEnc(uint8_t *msg)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2bd8      	cmp	r3, #216	; 0xd8
 80024ea:	d136      	bne.n	800255a <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3302      	adds	r3, #2
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	b219      	sxth	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3303      	adds	r3, #3
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	021b      	lsls	r3, r3, #8
 80024fc:	b21a      	sxth	r2, r3
 80024fe:	4b34      	ldr	r3, [pc, #208]	; (80025d0 <parseEnc+0xf4>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	b212      	sxth	r2, r2
 8002506:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	3305      	adds	r3, #5
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	b219      	sxth	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	3306      	adds	r3, #6
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	b21a      	sxth	r2, r3
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <parseEnc+0xf4>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	b212      	sxth	r2, r2
 8002524:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <parseEnc+0xf4>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002530:	b29b      	uxth	r3, r3
 8002532:	425b      	negs	r3, r3
 8002534:	b29a      	uxth	r2, r3
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <parseEnc+0xf4>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	b212      	sxth	r2, r2
 800253c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 8002540:	4b24      	ldr	r3, [pc, #144]	; (80025d4 <parseEnc+0xf8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	7852      	ldrb	r2, [r2, #1]
 8002548:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <parseEnc+0xf8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	7912      	ldrb	r2, [r2, #4]
 8002552:	741a      	strb	r2, [r3, #16]

        toVW();
 8002554:	f7ff ff64 	bl	8002420 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 8002558:	e036      	b.n	80025c8 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2bc1      	cmp	r3, #193	; 0xc1
 8002560:	d117      	bne.n	8002592 <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	3304      	adds	r3, #4
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3305      	adds	r3, #5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	021b      	lsls	r3, r3, #8
 8002572:	4313      	orrs	r3, r2
 8002574:	4618      	mov	r0, r3
 8002576:	f7fd ffed 	bl	8000554 <__aeabi_i2d>
 800257a:	4b15      	ldr	r3, [pc, #84]	; (80025d0 <parseEnc+0xf4>)
 800257c:	681c      	ldr	r4, [r3, #0]
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	4b15      	ldr	r3, [pc, #84]	; (80025d8 <parseEnc+0xfc>)
 8002584:	f7fe f97a 	bl	800087c <__aeabi_ddiv>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8002590:	e01a      	b.n	80025c8 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	2bc8      	cmp	r3, #200	; 0xc8
 8002598:	d116      	bne.n	80025c8 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	3304      	adds	r3, #4
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	3305      	adds	r3, #5
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	4313      	orrs	r3, r2
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7fd ffd1 	bl	8000554 <__aeabi_i2d>
 80025b2:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <parseEnc+0xf4>)
 80025b4:	681c      	ldr	r4, [r3, #0]
 80025b6:	f04f 0200 	mov.w	r2, #0
 80025ba:	4b07      	ldr	r3, [pc, #28]	; (80025d8 <parseEnc+0xfc>)
 80025bc:	f7fe f95e 	bl	800087c <__aeabi_ddiv>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd90      	pop	{r4, r7, pc}
 80025d0:	200001b4 	.word	0x200001b4
 80025d4:	200001a4 	.word	0x200001a4
 80025d8:	40240000 	.word	0x40240000

080025dc <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 80025dc:	b590      	push	{r4, r7, lr}
 80025de:	b085      	sub	sp, #20
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	3304      	adds	r3, #4
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	b21a      	sxth	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	3305      	adds	r3, #5
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	021b      	lsls	r3, r3, #8
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	4313      	orrs	r3, r2
 80025f8:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3306      	adds	r3, #6
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	b21a      	sxth	r2, r3
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3307      	adds	r3, #7
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	021b      	lsls	r3, r3, #8
 800260a:	b21b      	sxth	r3, r3
 800260c:	4313      	orrs	r3, r2
 800260e:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 8002610:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002614:	425b      	negs	r3, r3
 8002616:	4618      	mov	r0, r3
 8002618:	f7fd ff9c 	bl	8000554 <__aeabi_i2d>
 800261c:	f04f 0200 	mov.w	r2, #0
 8002620:	4b15      	ldr	r3, [pc, #84]	; (8002678 <parseEnc114+0x9c>)
 8002622:	f7fe f92b 	bl	800087c <__aeabi_ddiv>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4914      	ldr	r1, [pc, #80]	; (800267c <parseEnc114+0xa0>)
 800262c:	680c      	ldr	r4, [r1, #0]
 800262e:	4610      	mov	r0, r2
 8002630:	4619      	mov	r1, r3
 8002632:	f7fe fa93 	bl	8000b5c <__aeabi_d2iz>
 8002636:	4603      	mov	r3, r0
 8002638:	b21b      	sxth	r3, r3
 800263a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 800263e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff86 	bl	8000554 <__aeabi_i2d>
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b0a      	ldr	r3, [pc, #40]	; (8002678 <parseEnc114+0x9c>)
 800264e:	f7fe f915 	bl	800087c <__aeabi_ddiv>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4909      	ldr	r1, [pc, #36]	; (800267c <parseEnc114+0xa0>)
 8002658:	680c      	ldr	r4, [r1, #0]
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	f7fe fa7d 	bl	8000b5c <__aeabi_d2iz>
 8002662:	4603      	mov	r3, r0
 8002664:	b21b      	sxth	r3, r3
 8002666:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 800266a:	f7ff fed9 	bl	8002420 <toVW>
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	bd90      	pop	{r4, r7, pc}
 8002676:	bf00      	nop
 8002678:	40240000 	.word	0x40240000
 800267c:	200001b4 	.word	0x200001b4

08002680 <parseState114>:

void parseState114(uint8_t *msg)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b082      	sub	sp, #8
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	b25a      	sxtb	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3305      	adds	r3, #5
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	b25b      	sxtb	r3, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	b25a      	sxtb	r2, r3
 800269e:	4b12      	ldr	r3, [pc, #72]	; (80026e8 <parseState114+0x68>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	3306      	adds	r3, #6
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	b25a      	sxtb	r2, r3
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3307      	adds	r3, #7
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	021b      	lsls	r3, r3, #8
 80026b6:	b25b      	sxtb	r3, r3
 80026b8:	4313      	orrs	r3, r2
 80026ba:	b25a      	sxtb	r2, r3
 80026bc:	4b0a      	ldr	r3, [pc, #40]	; (80026e8 <parseState114+0x68>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 80026c4:	4b08      	ldr	r3, [pc, #32]	; (80026e8 <parseState114+0x68>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	7bdb      	ldrb	r3, [r3, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d104      	bne.n	80026d8 <parseState114+0x58>
 80026ce:	4b06      	ldr	r3, [pc, #24]	; (80026e8 <parseState114+0x68>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	7c1b      	ldrb	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <parseState114+0x60>
    {
        reset();
 80026d8:	f002 f908 	bl	80048ec <reset>
        startMotor();
 80026dc:	f002 f846 	bl	800476c <startMotor>
    }
}
 80026e0:	bf00      	nop
 80026e2:	3708      	adds	r7, #8
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200001a4 	.word	0x200001a4

080026ec <stateReady>:


int stateReady()//이거 전에 ir통신을 받아야 겠는데?
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 80026f0:	4b29      	ldr	r3, [pc, #164]	; (8002798 <stateReady+0xac>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	601a      	str	r2, [r3, #0]
 80026f6:	e041      	b.n	800277c <stateReady+0x90>
	{
		    //check_msg = charging->checkIRdata();
		if(check_msg == 1)
 80026f8:	4b28      	ldr	r3, [pc, #160]	; (800279c <stateReady+0xb0>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d102      	bne.n	8002706 <stateReady+0x1a>
		{
			start_docking_flag = 1;
 8002700:	4b27      	ldr	r3, [pc, #156]	; (80027a0 <stateReady+0xb4>)
 8002702:	2201      	movs	r2, #1
 8002704:	701a      	strb	r2, [r3, #0]
		}

		if(ir_count++ >= 2)
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <stateReady+0xb8>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1c5a      	adds	r2, r3, #1
 800270c:	4925      	ldr	r1, [pc, #148]	; (80027a4 <stateReady+0xb8>)
 800270e:	600a      	str	r2, [r1, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	dd08      	ble.n	8002726 <stateReady+0x3a>
		{
			sendIRdata(robot_standby);
 8002714:	4824      	ldr	r0, [pc, #144]	; (80027a8 <stateReady+0xbc>)
 8002716:	f000 ff49 	bl	80035ac <sendIRdata>
			ir_count = 0;
 800271a:	4b22      	ldr	r3, [pc, #136]	; (80027a4 <stateReady+0xb8>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
			HAL_NVIC_EnableIRQ(EXTI0_IRQn);//이걸로 수신시작할 것
 8002720:	2006      	movs	r0, #6
 8002722:	f004 fc86 	bl	8007032 <HAL_NVIC_EnableIRQ>
		}

		if(start_docking_flag)
 8002726:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <stateReady+0xb4>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d014      	beq.n	8002758 <stateReady+0x6c>
		{
		   startTTS();
 800272e:	f7ff fb25 	bl	8001d7c <startTTS>
		   //State_set(IDLE);
		   ready_flag = 1;
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <stateReady+0xc0>)
 8002734:	2201      	movs	r2, #1
 8002736:	701a      	strb	r2, [r3, #0]
		   start_docking_flag = 0;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <stateReady+0xb4>)
 800273a:	2200      	movs	r2, #0
 800273c:	701a      	strb	r2, [r3, #0]
		   //mutex.lock();
		   check_msg = 0;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <stateReady+0xb0>)
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
		   printf("init_state()\n");
 8002744:	481a      	ldr	r0, [pc, #104]	; (80027b0 <stateReady+0xc4>)
 8002746:	f007 ff87 	bl	800a658 <puts>
           init_state();
 800274a:	f7fe fc2f 	bl	8000fac <init_state>
           HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 800274e:	2006      	movs	r0, #6
 8002750:	f004 fc7d 	bl	800704e <HAL_NVIC_DisableIRQ>
		   return 1;
 8002754:	2301      	movs	r3, #1
 8002756:	e01c      	b.n	8002792 <stateReady+0xa6>
//			inhome_check_cnt = 0;
//			endTTS();
//			//ThisThread::sleep_for(50);
//			NVIC_SystemReset();
//		}
		HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 8002758:	f44f 7180 	mov.w	r1, #256	; 0x100
 800275c:	4815      	ldr	r0, [pc, #84]	; (80027b4 <stateReady+0xc8>)
 800275e:	f004 fe6e 	bl	800743e <HAL_GPIO_TogglePin>
		check_msg = checkIRdata();
 8002762:	f000 ff39 	bl	80035d8 <checkIRdata>
 8002766:	4603      	mov	r3, r0
 8002768:	4a0c      	ldr	r2, [pc, #48]	; (800279c <stateReady+0xb0>)
 800276a:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 800276c:	2064      	movs	r0, #100	; 0x64
 800276e:	f003 f85b 	bl	8005828 <HAL_Delay>
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 8002772:	4b09      	ldr	r3, [pc, #36]	; (8002798 <stateReady+0xac>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	3301      	adds	r3, #1
 8002778:	4a07      	ldr	r2, [pc, #28]	; (8002798 <stateReady+0xac>)
 800277a:	6013      	str	r3, [r2, #0]
 800277c:	4b06      	ldr	r3, [pc, #24]	; (8002798 <stateReady+0xac>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b48      	cmp	r3, #72	; 0x48
 8002782:	ddb9      	ble.n	80026f8 <stateReady+0xc>
	}
	endTTS();
 8002784:	f7ff fb4a 	bl	8001e1c <endTTS>
	HAL_Delay(100);
 8002788:	2064      	movs	r0, #100	; 0x64
 800278a:	f003 f84d 	bl	8005828 <HAL_Delay>
	//ThisThread::sleep_for(50);
	NVIC_SystemReset();
 800278e:	f7ff f9c9 	bl	8001b24 <__NVIC_SystemReset>
    //inhome_check_cnt++;
}
 8002792:	4618      	mov	r0, r3
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	200001bc 	.word	0x200001bc
 800279c:	200001b0 	.word	0x200001b0
 80027a0:	200001ad 	.word	0x200001ad
 80027a4:	200001b8 	.word	0x200001b8
 80027a8:	20000004 	.word	0x20000004
 80027ac:	200001ac 	.word	0x200001ac
 80027b0:	0800b650 	.word	0x0800b650
 80027b4:	40020400 	.word	0x40020400

080027b8 <stateThread>:

void stateThread()
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0

	printf("stateThread, robot_state: %d\n", robot_state);
 80027bc:	4b48      	ldr	r3, [pc, #288]	; (80028e0 <stateThread+0x128>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4619      	mov	r1, r3
 80027c2:	4848      	ldr	r0, [pc, #288]	; (80028e4 <stateThread+0x12c>)
 80027c4:	f007 fec2 	bl	800a54c <iprintf>
        switch(robot_state)
 80027c8:	4b45      	ldr	r3, [pc, #276]	; (80028e0 <stateThread+0x128>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2b0c      	cmp	r3, #12
 80027ce:	f200 8085 	bhi.w	80028dc <stateThread+0x124>
 80027d2:	a201      	add	r2, pc, #4	; (adr r2, 80027d8 <stateThread+0x20>)
 80027d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d8:	0800280d 	.word	0x0800280d
 80027dc:	08002813 	.word	0x08002813
 80027e0:	08002825 	.word	0x08002825
 80027e4:	08002845 	.word	0x08002845
 80027e8:	08002857 	.word	0x08002857
 80027ec:	08002869 	.word	0x08002869
 80027f0:	08002875 	.word	0x08002875
 80027f4:	08002887 	.word	0x08002887
 80027f8:	080028ad 	.word	0x080028ad
 80027fc:	080028dd 	.word	0x080028dd
 8002800:	080028b9 	.word	0x080028b9
 8002804:	080028c5 	.word	0x080028c5
 8002808:	080028d1 	.word	0x080028d1
        {
            case INIT:
                turnOff();
 800280c:	f000 ffa0 	bl	8003750 <turnOff>
                break;
 8002810:	e064      	b.n	80028dc <stateThread+0x124>

            case DOCKING:
                turnOn(white);
 8002812:	4b35      	ldr	r3, [pc, #212]	; (80028e8 <stateThread+0x130>)
 8002814:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002818:	f000 ff5e 	bl	80036d8 <turnOn>
                inhome = 0;
 800281c:	4b33      	ldr	r3, [pc, #204]	; (80028ec <stateThread+0x134>)
 800281e:	2200      	movs	r2, #0
 8002820:	701a      	strb	r2, [r3, #0]
                break;
 8002822:	e05b      	b.n	80028dc <stateThread+0x124>

            case CHARGING:
                if(battery>95)
 8002824:	4b32      	ldr	r3, [pc, #200]	; (80028f0 <stateThread+0x138>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b5f      	cmp	r3, #95	; 0x5f
 800282a:	dd05      	ble.n	8002838 <stateThread+0x80>
                {
                    turnOn(green);
 800282c:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <stateThread+0x13c>)
 800282e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002832:	f000 ff51 	bl	80036d8 <turnOn>
                }
                else
                {
                    turnOn(yellow);
                }
                break;
 8002836:	e051      	b.n	80028dc <stateThread+0x124>
                    turnOn(yellow);
 8002838:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <stateThread+0x140>)
 800283a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800283e:	f000 ff4b 	bl	80036d8 <turnOn>
                break;
 8002842:	e04b      	b.n	80028dc <stateThread+0x124>

            case WORKING:
                turnOn(white);
 8002844:	4b28      	ldr	r3, [pc, #160]	; (80028e8 <stateThread+0x130>)
 8002846:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800284a:	f000 ff45 	bl	80036d8 <turnOn>
                inhome = 0;
 800284e:	4b27      	ldr	r3, [pc, #156]	; (80028ec <stateThread+0x134>)
 8002850:	2200      	movs	r2, #0
 8002852:	701a      	strb	r2, [r3, #0]
                break;
 8002854:	e042      	b.n	80028dc <stateThread+0x124>

            case STOP:
                turnOn(purple);
 8002856:	4b29      	ldr	r3, [pc, #164]	; (80028fc <stateThread+0x144>)
 8002858:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800285c:	f000 ff3c 	bl	80036d8 <turnOn>
                inhome = 0;
 8002860:	4b22      	ldr	r3, [pc, #136]	; (80028ec <stateThread+0x134>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
                break;
 8002866:	e039      	b.n	80028dc <stateThread+0x124>

            case W_STOP:
                turnOn(purple);
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <stateThread+0x144>)
 800286a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800286e:	f000 ff33 	bl	80036d8 <turnOn>
                break;
 8002872:	e033      	b.n	80028dc <stateThread+0x124>

            case EMERGENCY:
                turnOn(red);
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <stateThread+0x148>)
 8002876:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800287a:	f000 ff2d 	bl	80036d8 <turnOn>
                inhome = 0;
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <stateThread+0x134>)
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
                break;
 8002884:	e02a      	b.n	80028dc <stateThread+0x124>

            case MANUAL:
                if(touch)
 8002886:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <stateThread+0x14c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d005      	beq.n	800289a <stateThread+0xe2>
                    turnOn(blue);
 800288e:	4b1e      	ldr	r3, [pc, #120]	; (8002908 <stateThread+0x150>)
 8002890:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002894:	f000 ff20 	bl	80036d8 <turnOn>
 8002898:	e004      	b.n	80028a4 <stateThread+0xec>
                else
                    turnOn(skyblue);
 800289a:	4b1c      	ldr	r3, [pc, #112]	; (800290c <stateThread+0x154>)
 800289c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028a0:	f000 ff1a 	bl	80036d8 <turnOn>
                inhome = 0;
 80028a4:	4b11      	ldr	r3, [pc, #68]	; (80028ec <stateThread+0x134>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
                break;
 80028aa:	e017      	b.n	80028dc <stateThread+0x124>

            case WALL_FOLLOWING:
                turnOn(white);
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <stateThread+0x130>)
 80028ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028b2:	f000 ff11 	bl	80036d8 <turnOn>
                break;
 80028b6:	e011      	b.n	80028dc <stateThread+0x124>
            case 10: //debug
                turnOn(blue);
 80028b8:	4b13      	ldr	r3, [pc, #76]	; (8002908 <stateThread+0x150>)
 80028ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028be:	f000 ff0b 	bl	80036d8 <turnOn>
                break;
 80028c2:	e00b      	b.n	80028dc <stateThread+0x124>

			case 11: //for operation test
				turnOn(red);
 80028c4:	4b0e      	ldr	r3, [pc, #56]	; (8002900 <stateThread+0x148>)
 80028c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028ca:	f000 ff05 	bl	80036d8 <turnOn>
				break;
 80028ce:	e005      	b.n	80028dc <stateThread+0x124>

			case 12: //for operation test
				turnOn(green);
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <stateThread+0x13c>)
 80028d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80028d6:	f000 feff 	bl	80036d8 <turnOn>
				break;
 80028da:	bf00      	nop
//        mutex.lock();
//        check_msg = charging->checkIRdata();
//        mutex.unlock();
//        ThisThread::sleep_for(131);

}
 80028dc:	bf00      	nop
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	20000190 	.word	0x20000190
 80028e4:	0800b660 	.word	0x0800b660
 80028e8:	2000004c 	.word	0x2000004c
 80028ec:	200001c0 	.word	0x200001c0
 80028f0:	200001a8 	.word	0x200001a8
 80028f4:	20000010 	.word	0x20000010
 80028f8:	20000028 	.word	0x20000028
 80028fc:	20000040 	.word	0x20000040
 8002900:	20000034 	.word	0x20000034
 8002904:	20000199 	.word	0x20000199
 8002908:	20000058 	.word	0x20000058
 800290c:	2000001c 	.word	0x2000001c

08002910 <stateIdle>:


void stateIdle()
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
    //int check_msg = 0;
    //check_msg = charging->checkIRdata();

    if(robot_state == CHARGING)
 8002914:	4b10      	ldr	r3, [pc, #64]	; (8002958 <stateIdle+0x48>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b02      	cmp	r3, #2
 800291a:	d10d      	bne.n	8002938 <stateIdle+0x28>
    {
        if(ir_count_idle++ >= 2)
 800291c:	4b0f      	ldr	r3, [pc, #60]	; (800295c <stateIdle+0x4c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	490e      	ldr	r1, [pc, #56]	; (800295c <stateIdle+0x4c>)
 8002924:	600a      	str	r2, [r1, #0]
 8002926:	2b01      	cmp	r3, #1
 8002928:	dd09      	ble.n	800293e <stateIdle+0x2e>
        {
            if(charger_sw == 1)
 800292a:	4b0d      	ldr	r3, [pc, #52]	; (8002960 <stateIdle+0x50>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1

            if(battery>=95)
            {
                //sendIRdata(battery_full);
            }
            ir_count_idle = 0;
 8002930:	4b0a      	ldr	r3, [pc, #40]	; (800295c <stateIdle+0x4c>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e002      	b.n	800293e <stateIdle+0x2e>
        }
    }
    else
    {
        check_msg = 0;
 8002938:	4b0a      	ldr	r3, [pc, #40]	; (8002964 <stateIdle+0x54>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
    }

    if(check_msg == 2)
 800293e:	4b09      	ldr	r3, [pc, #36]	; (8002964 <stateIdle+0x54>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2b02      	cmp	r3, #2
 8002944:	d102      	bne.n	800294c <stateIdle+0x3c>
    {
        inhome = 1;
 8002946:	4b08      	ldr	r3, [pc, #32]	; (8002968 <stateIdle+0x58>)
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]

    }

}
 800294c:	bf00      	nop
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	20000190 	.word	0x20000190
 800295c:	200001c4 	.word	0x200001c4
 8002960:	20000197 	.word	0x20000197
 8002964:	200001b0 	.word	0x200001b0
 8002968:	200001c0 	.word	0x200001c0

0800296c <spinonce>:


void spinonce(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08e      	sub	sp, #56	; 0x38
 8002970:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 8002972:	4aa4      	ldr	r2, [pc, #656]	; (8002c04 <spinonce+0x298>)
 8002974:	f107 0310 	add.w	r3, r7, #16
 8002978:	e892 0003 	ldmia.w	r2, {r0, r1}
 800297c:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t CanId = 0;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t FDval[4]={0,};
 8002988:	463b      	mov	r3, r7
 800298a:	2200      	movs	r2, #0
 800298c:	601a      	str	r2, [r3, #0]
 800298e:	605a      	str	r2, [r3, #4]
	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 8002990:	2100      	movs	r1, #0
 8002992:	2000      	movs	r0, #0
 8002994:	f000 fd38 	bl	8003408 <CanInit>


    HAL_Delay(4000);//must set more 4s
 8002998:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 800299c:	f002 ff44 	bl	8005828 <HAL_Delay>

    //ready_flag = 1;
    start_docking_flag = 0;
 80029a0:	4b99      	ldr	r3, [pc, #612]	; (8002c08 <spinonce+0x29c>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 80029a6:	4b99      	ldr	r3, [pc, #612]	; (8002c0c <spinonce+0x2a0>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 80029ac:	2301      	movs	r3, #1
 80029ae:	76fb      	strb	r3, [r7, #27]

    settingMotor();
 80029b0:	f002 f9ba 	bl	8004d28 <settingMotor>
    startMotor();
 80029b4:	f001 feda 	bl	800476c <startMotor>

	TransmitterIR_init();
 80029b8:	f000 fa32 	bl	8002e20 <TransmitterIR_init>
    ReceiverIR_init();
 80029bc:	f7fe fa98 	bl	8000ef0 <ReceiverIR_init>

    //check_msg = 1;///must remove only debugging

#if debugging
    stateReady();
 80029c0:	f7ff fe94 	bl	80026ec <stateReady>
    HAL_Delay(10000);
 80029c4:	f242 7010 	movw	r0, #10000	; 0x2710
 80029c8:	f002 ff2e 	bl	8005828 <HAL_Delay>

	while(1)
	{


		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 80029cc:	4b90      	ldr	r3, [pc, #576]	; (8002c10 <spinonce+0x2a4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f103 020a 	add.w	r2, r3, #10
 80029d4:	4b8f      	ldr	r3, [pc, #572]	; (8002c14 <spinonce+0x2a8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d227      	bcs.n	8002a2c <spinonce+0xc0>
			FDsen_seq = Tick_100ms;
 80029dc:	4b8d      	ldr	r3, [pc, #564]	; (8002c14 <spinonce+0x2a8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a8b      	ldr	r2, [pc, #556]	; (8002c10 <spinonce+0x2a4>)
 80029e2:	6013      	str	r3, [r2, #0]
			printf("flag8\n");
 80029e4:	488c      	ldr	r0, [pc, #560]	; (8002c18 <spinonce+0x2ac>)
 80029e6:	f007 fe37 	bl	800a658 <puts>
		    for(int i=0;i<4;i++){
 80029ea:	2300      	movs	r3, #0
 80029ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029ee:	e014      	b.n	8002a1a <spinonce+0xae>
		    	HAL_ADC_Start(&hadc1);
 80029f0:	488a      	ldr	r0, [pc, #552]	; (8002c1c <spinonce+0x2b0>)
 80029f2:	f002 ff81 	bl	80058f8 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100);
 80029f6:	2164      	movs	r1, #100	; 0x64
 80029f8:	4888      	ldr	r0, [pc, #544]	; (8002c1c <spinonce+0x2b0>)
 80029fa:	f003 f87f 	bl	8005afc <HAL_ADC_PollForConversion>
				FDval[i] = HAL_ADC_GetValue(&hadc1);
 80029fe:	4887      	ldr	r0, [pc, #540]	; (8002c1c <spinonce+0x2b0>)
 8002a00:	f003 f907 	bl	8005c12 <HAL_ADC_GetValue>
 8002a04:	4603      	mov	r3, r0
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	3338      	adds	r3, #56	; 0x38
 8002a0e:	443b      	add	r3, r7
 8002a10:	f823 2c38 	strh.w	r2, [r3, #-56]
		    for(int i=0;i<4;i++){
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	3301      	adds	r3, #1
 8002a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	dde7      	ble.n	80029f0 <spinonce+0x84>
		    }
		    HAL_ADC_Stop(&hadc1);
 8002a20:	487e      	ldr	r0, [pc, #504]	; (8002c1c <spinonce+0x2b0>)
 8002a22:	f003 f837 	bl	8005a94 <HAL_ADC_Stop>
		    printf("flag9\n");
 8002a26:	487e      	ldr	r0, [pc, #504]	; (8002c20 <spinonce+0x2b4>)
 8002a28:	f007 fe16 	bl	800a658 <puts>
		  //HAL_Delay(100);


			}

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 8002a2c:	4b7d      	ldr	r3, [pc, #500]	; (8002c24 <spinonce+0x2b8>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	1d5a      	adds	r2, r3, #5
 8002a32:	4b78      	ldr	r3, [pc, #480]	; (8002c14 <spinonce+0x2a8>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d20b      	bcs.n	8002a52 <spinonce+0xe6>
    		toggle_seq = Tick_100ms;
 8002a3a:	4b76      	ldr	r3, [pc, #472]	; (8002c14 <spinonce+0x2a8>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a79      	ldr	r2, [pc, #484]	; (8002c24 <spinonce+0x2b8>)
 8002a40:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 8002a42:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a46:	4878      	ldr	r0, [pc, #480]	; (8002c28 <spinonce+0x2bc>)
 8002a48:	f004 fcf9 	bl	800743e <HAL_GPIO_TogglePin>

    		printf("redtest\n");
 8002a4c:	4877      	ldr	r0, [pc, #476]	; (8002c2c <spinonce+0x2c0>)
 8002a4e:	f007 fe03 	bl	800a658 <puts>
    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 8002a52:	4b77      	ldr	r3, [pc, #476]	; (8002c30 <spinonce+0x2c4>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	1d1a      	adds	r2, r3, #4
 8002a58:	4b76      	ldr	r3, [pc, #472]	; (8002c34 <spinonce+0x2c8>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d20f      	bcs.n	8002a80 <spinonce+0x114>
    		controlmotor_seq = gTick;
 8002a60:	4b74      	ldr	r3, [pc, #464]	; (8002c34 <spinonce+0x2c8>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a72      	ldr	r2, [pc, #456]	; (8002c30 <spinonce+0x2c4>)
 8002a66:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 8002a68:	f7ff face 	bl	8002008 <controlMotor>
            sendEnc(CANID3);
 8002a6c:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8002a70:	f7ff fc0a 	bl	8002288 <sendEnc>
            printf("controlmotor_seq%d\n", gTick);
 8002a74:	4b6f      	ldr	r3, [pc, #444]	; (8002c34 <spinonce+0x2c8>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	486f      	ldr	r0, [pc, #444]	; (8002c38 <spinonce+0x2cc>)
 8002a7c:	f007 fd66 	bl	800a54c <iprintf>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 8002a80:	4b6e      	ldr	r3, [pc, #440]	; (8002c3c <spinonce+0x2d0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	1cda      	adds	r2, r3, #3
 8002a86:	4b6b      	ldr	r3, [pc, #428]	; (8002c34 <spinonce+0x2c8>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d20e      	bcs.n	8002aac <spinonce+0x140>
    		reqmotor_seq = gTick;
 8002a8e:	4b69      	ldr	r3, [pc, #420]	; (8002c34 <spinonce+0x2c8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a6a      	ldr	r2, [pc, #424]	; (8002c3c <spinonce+0x2d0>)
 8002a94:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 8002a96:	4b69      	ldr	r3, [pc, #420]	; (8002c3c <spinonce+0x2d0>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d102      	bne.n	8002aa8 <spinonce+0x13c>
 8002aa2:	f001 ff73 	bl	800498c <reqEnc>
 8002aa6:	e001      	b.n	8002aac <spinonce+0x140>
    		else{reqState();}
 8002aa8:	f001 ffbd 	bl	8004a26 <reqState>
    	}
		if(Tick_100ms>state_seq+9) {
 8002aac:	4b64      	ldr	r3, [pc, #400]	; (8002c40 <spinonce+0x2d4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f103 0209 	add.w	r2, r3, #9
 8002ab4:	4b57      	ldr	r3, [pc, #348]	; (8002c14 <spinonce+0x2a8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d207      	bcs.n	8002acc <spinonce+0x160>
			state_seq = Tick_100ms;
 8002abc:	4b55      	ldr	r3, [pc, #340]	; (8002c14 <spinonce+0x2a8>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a5f      	ldr	r2, [pc, #380]	; (8002c40 <spinonce+0x2d4>)
 8002ac2:	6013      	str	r3, [r2, #0]
        	stateIdle();
 8002ac4:	f7ff ff24 	bl	8002910 <stateIdle>
        	//turnOn(white);
    		stateThread();
 8002ac8:	f7ff fe76 	bl	80027b8 <stateThread>

    	}


		if((Tick_100ms>sendsensor_seq+5)){
 8002acc:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <spinonce+0x2d8>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1d5a      	adds	r2, r3, #5
 8002ad2:	4b50      	ldr	r3, [pc, #320]	; (8002c14 <spinonce+0x2a8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f080 8089 	bcs.w	8002bee <spinonce+0x282>
			sendsensor_seq = Tick_100ms;
 8002adc:	4b4d      	ldr	r3, [pc, #308]	; (8002c14 <spinonce+0x2a8>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <spinonce+0x2d8>)
 8002ae2:	6013      	str	r3, [r2, #0]
			printf("flag1\n");
 8002ae4:	4858      	ldr	r0, [pc, #352]	; (8002c48 <spinonce+0x2dc>)
 8002ae6:	f007 fdb7 	bl	800a658 <puts>
//			pre_usTick = us_Tick;
//			while(us_Tick < pre_usTick+30){;}//wait 150us
//			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);

			//////////////////////////////////////////////
			if(sendsensor_seq%2==1){
 8002aea:	4b56      	ldr	r3, [pc, #344]	; (8002c44 <spinonce+0x2d8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d017      	beq.n	8002b26 <spinonce+0x1ba>
				for(int i=1;i<7;i+=2){
 8002af6:	2301      	movs	r3, #1
 8002af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002afa:	e010      	b.n	8002b1e <spinonce+0x1b2>
				buf[i-1] = USSn_DataRead(i);
 8002afc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002afe:	f002 fd1f 	bl	8005540 <USSn_DataRead>
 8002b02:	4602      	mov	r2, r0
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	3b01      	subs	r3, #1
 8002b08:	b2d2      	uxtb	r2, r2
 8002b0a:	3338      	adds	r3, #56	; 0x38
 8002b0c:	443b      	add	r3, r7
 8002b0e:	f803 2c30 	strb.w	r2, [r3, #-48]
				printf("flag111\n");
 8002b12:	484e      	ldr	r0, [pc, #312]	; (8002c4c <spinonce+0x2e0>)
 8002b14:	f007 fda0 	bl	800a658 <puts>
				for(int i=1;i<7;i+=2){
 8002b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b1a:	3302      	adds	r3, #2
 8002b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b20:	2b06      	cmp	r3, #6
 8002b22:	ddeb      	ble.n	8002afc <spinonce+0x190>
 8002b24:	e016      	b.n	8002b54 <spinonce+0x1e8>
				}
			}
			else {for(int i=2;i<7;i+=2){
 8002b26:	2302      	movs	r3, #2
 8002b28:	627b      	str	r3, [r7, #36]	; 0x24
 8002b2a:	e010      	b.n	8002b4e <spinonce+0x1e2>
				buf[i-1] = USSn_DataRead(i);printf("flag211\n");
 8002b2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002b2e:	f002 fd07 	bl	8005540 <USSn_DataRead>
 8002b32:	4602      	mov	r2, r0
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3b01      	subs	r3, #1
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	3338      	adds	r3, #56	; 0x38
 8002b3c:	443b      	add	r3, r7
 8002b3e:	f803 2c30 	strb.w	r2, [r3, #-48]
 8002b42:	4843      	ldr	r0, [pc, #268]	; (8002c50 <spinonce+0x2e4>)
 8002b44:	f007 fd88 	bl	800a658 <puts>
			else {for(int i=2;i<7;i+=2){
 8002b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4a:	3302      	adds	r3, #2
 8002b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	2b06      	cmp	r3, #6
 8002b52:	ddeb      	ble.n	8002b2c <spinonce+0x1c0>
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
			buf[6] = inhome << 1;
 8002b54:	4b3f      	ldr	r3, [pc, #252]	; (8002c54 <spinonce+0x2e8>)
 8002b56:	781b      	ldrb	r3, [r3, #0]
 8002b58:	005b      	lsls	r3, r3, #1
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	73bb      	strb	r3, [r7, #14]
			printf("flag11\n");
 8002b5e:	483e      	ldr	r0, [pc, #248]	; (8002c58 <spinonce+0x2ec>)
 8002b60:	f007 fd7a 	bl	800a658 <puts>
			for(int i=0; i<4;i++){
 8002b64:	2300      	movs	r3, #0
 8002b66:	623b      	str	r3, [r7, #32]
 8002b68:	e02b      	b.n	8002bc2 <spinonce+0x256>
				if(FDval[i]>50){buf[index] |= 1<<i+4;}
 8002b6a:	6a3b      	ldr	r3, [r7, #32]
 8002b6c:	005b      	lsls	r3, r3, #1
 8002b6e:	3338      	adds	r3, #56	; 0x38
 8002b70:	443b      	add	r3, r7
 8002b72:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002b76:	2b32      	cmp	r3, #50	; 0x32
 8002b78:	d915      	bls.n	8002ba6 <spinonce+0x23a>
 8002b7a:	f107 0208 	add.w	r2, r7, #8
 8002b7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b80:	4413      	add	r3, r2
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	b25a      	sxtb	r2, r3
 8002b86:	6a3b      	ldr	r3, [r7, #32]
 8002b88:	3304      	adds	r3, #4
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	b2d9      	uxtb	r1, r3
 8002b98:	f107 0208 	add.w	r2, r7, #8
 8002b9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b9e:	4413      	add	r3, r2
 8002ba0:	460a      	mov	r2, r1
 8002ba2:	701a      	strb	r2, [r3, #0]
 8002ba4:	e00a      	b.n	8002bbc <spinonce+0x250>
				else {buf[index] |= 0<<i+4;}
 8002ba6:	f107 0208 	add.w	r2, r7, #8
 8002baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bac:	4413      	add	r3, r2
 8002bae:	7819      	ldrb	r1, [r3, #0]
 8002bb0:	f107 0208 	add.w	r2, r7, #8
 8002bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bb6:	4413      	add	r3, r2
 8002bb8:	460a      	mov	r2, r1
 8002bba:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<4;i++){
 8002bbc:	6a3b      	ldr	r3, [r7, #32]
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	623b      	str	r3, [r7, #32]
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	2b03      	cmp	r3, #3
 8002bc6:	ddd0      	ble.n	8002b6a <spinonce+0x1fe>
			}
			//buf[index] = 0;
			printf("flag12\n");
 8002bc8:	4824      	ldr	r0, [pc, #144]	; (8002c5c <spinonce+0x2f0>)
 8002bca:	f007 fd45 	bl	800a658 <puts>
			sendCan(CANID4, buf, 8, 1);//test
 8002bce:	f107 0108 	add.w	r1, r7, #8
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	2208      	movs	r2, #8
 8002bd6:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8002bda:	f000 fc61 	bl	80034a0 <sendCan>
			printf("flag13\n");
 8002bde:	4820      	ldr	r0, [pc, #128]	; (8002c60 <spinonce+0x2f4>)
 8002be0:	f007 fd3a 	bl	800a658 <puts>
			index = 0;
 8002be4:	2300      	movs	r3, #0
 8002be6:	637b      	str	r3, [r7, #52]	; 0x34
			printf("flag2\n");
 8002be8:	481e      	ldr	r0, [pc, #120]	; (8002c64 <spinonce+0x2f8>)
 8002bea:	f007 fd35 	bl	800a658 <puts>
		}

		if(FLAG_RxCplt>0){
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <spinonce+0x2fc>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	f43f aeea 	beq.w	80029cc <spinonce+0x60>
			printf("flag3\n");
 8002bf8:	481c      	ldr	r0, [pc, #112]	; (8002c6c <spinonce+0x300>)
 8002bfa:	f007 fd2d 	bl	800a658 <puts>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	e042      	b.n	8002c8a <spinonce+0x31e>
 8002c04:	0800b740 	.word	0x0800b740
 8002c08:	200001ad 	.word	0x200001ad
 8002c0c:	200001b0 	.word	0x200001b0
 8002c10:	2000016c 	.word	0x2000016c
 8002c14:	2000015c 	.word	0x2000015c
 8002c18:	0800b680 	.word	0x0800b680
 8002c1c:	20000298 	.word	0x20000298
 8002c20:	0800b688 	.word	0x0800b688
 8002c24:	20000164 	.word	0x20000164
 8002c28:	40020400 	.word	0x40020400
 8002c2c:	0800b690 	.word	0x0800b690
 8002c30:	20000180 	.word	0x20000180
 8002c34:	20000154 	.word	0x20000154
 8002c38:	0800b698 	.word	0x0800b698
 8002c3c:	20000184 	.word	0x20000184
 8002c40:	20000168 	.word	0x20000168
 8002c44:	2000017c 	.word	0x2000017c
 8002c48:	0800b6ac 	.word	0x0800b6ac
 8002c4c:	0800b6b4 	.word	0x0800b6b4
 8002c50:	0800b6bc 	.word	0x0800b6bc
 8002c54:	200001c0 	.word	0x200001c0
 8002c58:	0800b6c4 	.word	0x0800b6c4
 8002c5c:	0800b6cc 	.word	0x0800b6cc
 8002c60:	0800b6d4 	.word	0x0800b6d4
 8002c64:	0800b6dc 	.word	0x0800b6dc
 8002c68:	20000228 	.word	0x20000228
 8002c6c:	0800b6e4 	.word	0x0800b6e4
 8002c70:	4a60      	ldr	r2, [pc, #384]	; (8002df4 <spinonce+0x488>)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	4413      	add	r3, r2
 8002c76:	7819      	ldrb	r1, [r3, #0]
 8002c78:	f107 0210 	add.w	r2, r7, #16
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	460a      	mov	r2, r1
 8002c82:	701a      	strb	r2, [r3, #0]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	3301      	adds	r3, #1
 8002c88:	61fb      	str	r3, [r7, #28]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	2b07      	cmp	r3, #7
 8002c8e:	ddef      	ble.n	8002c70 <spinonce+0x304>
    		FLAG_RxCplt--;
 8002c90:	4b59      	ldr	r3, [pc, #356]	; (8002df8 <spinonce+0x48c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	4a58      	ldr	r2, [pc, #352]	; (8002df8 <spinonce+0x48c>)
 8002c98:	6013      	str	r3, [r2, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8002c9a:	4b58      	ldr	r3, [pc, #352]	; (8002dfc <spinonce+0x490>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <spinonce+0x490>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d903      	bls.n	8002cae <spinonce+0x342>
 8002ca6:	4b55      	ldr	r3, [pc, #340]	; (8002dfc <spinonce+0x490>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	633b      	str	r3, [r7, #48]	; 0x30
 8002cac:	e002      	b.n	8002cb4 <spinonce+0x348>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8002cae:	4b53      	ldr	r3, [pc, #332]	; (8002dfc <spinonce+0x490>)
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
			if(CanId==1001){printf("canid1001 ready: %d\n", ready_flag);}
 8002cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cb6:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d105      	bne.n	8002cca <spinonce+0x35e>
 8002cbe:	4b50      	ldr	r3, [pc, #320]	; (8002e00 <spinonce+0x494>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	484f      	ldr	r0, [pc, #316]	; (8002e04 <spinonce+0x498>)
 8002cc6:	f007 fc41 	bl	800a54c <iprintf>
			printf("canid ready: %d\n", ready_flag);
 8002cca:	4b4d      	ldr	r3, [pc, #308]	; (8002e00 <spinonce+0x494>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	484d      	ldr	r0, [pc, #308]	; (8002e08 <spinonce+0x49c>)
 8002cd2:	f007 fc3b 	bl	800a54c <iprintf>
			if(ready_flag)
 8002cd6:	4b4a      	ldr	r3, [pc, #296]	; (8002e00 <spinonce+0x494>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d07b      	beq.n	8002dd6 <spinonce+0x46a>
			{
				printf("flag4\n");
 8002cde:	484b      	ldr	r0, [pc, #300]	; (8002e0c <spinonce+0x4a0>)
 8002ce0:	f007 fcba 	bl	800a658 <puts>
				switch(CanId)
 8002ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce6:	4a4a      	ldr	r2, [pc, #296]	; (8002e10 <spinonce+0x4a4>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d054      	beq.n	8002d96 <spinonce+0x42a>
 8002cec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cee:	4a48      	ldr	r2, [pc, #288]	; (8002e10 <spinonce+0x4a4>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d873      	bhi.n	8002ddc <spinonce+0x470>
 8002cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf6:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d045      	beq.n	8002d8a <spinonce+0x41e>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d869      	bhi.n	8002ddc <spinonce+0x470>
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d035      	beq.n	8002d7e <spinonce+0x412>
 8002d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d14:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d85f      	bhi.n	8002ddc <spinonce+0x470>
 8002d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d1e:	f240 7201 	movw	r2, #1793	; 0x701
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d054      	beq.n	8002dd0 <spinonce+0x464>
 8002d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d28:	f240 7201 	movw	r2, #1793	; 0x701
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d855      	bhi.n	8002ddc <spinonce+0x470>
 8002d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d32:	f240 5281 	movw	r2, #1409	; 0x581
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d033      	beq.n	8002da2 <spinonce+0x436>
 8002d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3c:	f240 5281 	movw	r2, #1409	; 0x581
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d84b      	bhi.n	8002ddc <spinonce+0x470>
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d005      	beq.n	8002d5a <spinonce+0x3ee>
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	f240 32ea 	movw	r2, #1002	; 0x3ea
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d009      	beq.n	8002d6c <spinonce+0x400>
 8002d58:	e040      	b.n	8002ddc <spinonce+0x470>
				{
				printf("flag5\n");
				case CANID1:
					parseCmdvel(canbuf);
 8002d5a:	f107 0310 	add.w	r3, r7, #16
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff fa44 	bl	80021ec <parseCmdvel>
					printf("parseCmdvel\n");
 8002d64:	482b      	ldr	r0, [pc, #172]	; (8002e14 <spinonce+0x4a8>)
 8002d66:	f007 fc77 	bl	800a658 <puts>
					break;
 8002d6a:	e037      	b.n	8002ddc <spinonce+0x470>

				case CANID2:
					parseState(canbuf);
 8002d6c:	f107 0310 	add.w	r3, r7, #16
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff f901 	bl	8001f78 <parseState>
					printf("parseState\n");
 8002d76:	4828      	ldr	r0, [pc, #160]	; (8002e18 <spinonce+0x4ac>)
 8002d78:	f007 fc6e 	bl	800a658 <puts>
					break;
 8002d7c:	e02e      	b.n	8002ddc <spinonce+0x470>

				case CANID5:
					parseTop(canbuf);
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f8cc 	bl	8001f20 <parseTop>
					break;
 8002d88:	e028      	b.n	8002ddc <spinonce+0x470>

				case CANID6:
					parsePmm(canbuf);
 8002d8a:	f107 0310 	add.w	r3, r7, #16
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f894 	bl	8001ebc <parsePmm>
					break;
 8002d94:	e022      	b.n	8002ddc <spinonce+0x470>

				case CANID7:
					parseEnc(canbuf);
 8002d96:	f107 0310 	add.w	r3, r7, #16
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f7ff fb9e 	bl	80024dc <parseEnc>
					break;
 8002da0:	e01c      	b.n	8002ddc <spinonce+0x470>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8002da2:	7c7b      	ldrb	r3, [r7, #17]
 8002da4:	2b6c      	cmp	r3, #108	; 0x6c
 8002da6:	d107      	bne.n	8002db8 <spinonce+0x44c>
 8002da8:	7cbb      	ldrb	r3, [r7, #18]
 8002daa:	2b60      	cmp	r3, #96	; 0x60
 8002dac:	d104      	bne.n	8002db8 <spinonce+0x44c>
						parseEnc114(canbuf);
 8002dae:	f107 0310 	add.w	r3, r7, #16
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7ff fc12 	bl	80025dc <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 8002db8:	7c7b      	ldrb	r3, [r7, #17]
 8002dba:	2b3f      	cmp	r3, #63	; 0x3f
 8002dbc:	d10d      	bne.n	8002dda <spinonce+0x46e>
 8002dbe:	7cbb      	ldrb	r3, [r7, #18]
 8002dc0:	2b60      	cmp	r3, #96	; 0x60
 8002dc2:	d10a      	bne.n	8002dda <spinonce+0x46e>
						parseState114(canbuf);
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f7ff fc59 	bl	8002680 <parseState114>
					break;
 8002dce:	e004      	b.n	8002dda <spinonce+0x46e>

				case MOTOR114_START_ID:
					startMotor();
 8002dd0:	f001 fccc 	bl	800476c <startMotor>
					break;
 8002dd4:	e002      	b.n	8002ddc <spinonce+0x470>
					printf("flag6\n");
				}

			}
 8002dd6:	bf00      	nop
 8002dd8:	e000      	b.n	8002ddc <spinonce+0x470>
					break;
 8002dda:	bf00      	nop

			printf("flag7\n");
 8002ddc:	480f      	ldr	r0, [pc, #60]	; (8002e1c <spinonce+0x4b0>)
 8002dde:	f007 fc3b 	bl	800a658 <puts>
			g_tCan_Rx_Header.StdId=0;
 8002de2:	4b06      	ldr	r3, [pc, #24]	; (8002dfc <spinonce+0x490>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <spinonce+0x490>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	605a      	str	r2, [r3, #4]
			CanId = 0;
 8002dee:	2300      	movs	r3, #0
 8002df0:	633b      	str	r3, [r7, #48]	; 0x30
		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 8002df2:	e5eb      	b.n	80029cc <spinonce+0x60>
 8002df4:	2000022c 	.word	0x2000022c
 8002df8:	20000228 	.word	0x20000228
 8002dfc:	20000234 	.word	0x20000234
 8002e00:	200001ac 	.word	0x200001ac
 8002e04:	0800b6ec 	.word	0x0800b6ec
 8002e08:	0800b704 	.word	0x0800b704
 8002e0c:	0800b718 	.word	0x0800b718
 8002e10:	00b8b701 	.word	0x00b8b701
 8002e14:	0800b720 	.word	0x0800b720
 8002e18:	0800b72c 	.word	0x0800b72c
 8002e1c:	0800b738 	.word	0x0800b738

08002e20 <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 8002e20:	b480      	push	{r7}
 8002e22:	af00      	add	r7, sp, #0




	IRDUTY0;
 8002e24:	4b0e      	ldr	r3, [pc, #56]	; (8002e60 <TransmitterIR_init+0x40>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 8002e2c:	4b0d      	ldr	r3, [pc, #52]	; (8002e64 <TransmitterIR_init+0x44>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 8002e32:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <TransmitterIR_init+0x44>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <TransmitterIR_init+0x44>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <TransmitterIR_init+0x44>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 8002e44:	4b07      	ldr	r3, [pc, #28]	; (8002e64 <TransmitterIR_init+0x44>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 8002e4a:	4b07      	ldr	r3, [pc, #28]	; (8002e68 <TransmitterIR_init+0x48>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <TransmitterIR_init+0x48>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	605a      	str	r2, [r3, #4]




}
 8002e56:	bf00      	nop
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	20000308 	.word	0x20000308
 8002e64:	20000214 	.word	0x20000214
 8002e68:	200001cc 	.word	0x200001cc

08002e6c <TIR_getState>:

TIR_State TIR_getState(void) {
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
    LOCK();
    TIR_State s = TIR_work.state;
 8002e72:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <TIR_getState+0x1c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8002e78:	79fb      	ldrb	r3, [r7, #7]
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	370c      	adds	r7, #12
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	20000214 	.word	0x20000214

08002e8c <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b086      	sub	sp, #24
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	4603      	mov	r3, r0
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (TIR_work.state != TIR_Idle) {
 8002e9a:	4b2b      	ldr	r3, [pc, #172]	; (8002f48 <setData+0xbc>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d002      	beq.n	8002ea8 <setData+0x1c>
        UNLOCK();
        return -1;
 8002ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ea6:	e04a      	b.n	8002f3e <setData+0xb2>
    }

    TIR_work.state = Leader;
 8002ea8:	4b27      	ldr	r3, [pc, #156]	; (8002f48 <setData+0xbc>)
 8002eaa:	2201      	movs	r2, #1
 8002eac:	701a      	strb	r2, [r3, #0]
    TIR_work.bitcount = 0;
 8002eae:	4b26      	ldr	r3, [pc, #152]	; (8002f48 <setData+0xbc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	605a      	str	r2, [r3, #4]
    TIR_work.leader = 0;
 8002eb4:	4b24      	ldr	r3, [pc, #144]	; (8002f48 <setData+0xbc>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	609a      	str	r2, [r3, #8]
    TIR_work.data = 0;
 8002eba:	4b23      	ldr	r3, [pc, #140]	; (8002f48 <setData+0xbc>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
    TIR_work.trailer = 0;
 8002ec0:	4b21      	ldr	r3, [pc, #132]	; (8002f48 <setData+0xbc>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	611a      	str	r2, [r3, #16]

    TIR_data.format = format;
 8002ec6:	4a21      	ldr	r2, [pc, #132]	; (8002f4c <setData+0xc0>)
 8002ec8:	7bfb      	ldrb	r3, [r7, #15]
 8002eca:	7013      	strb	r3, [r2, #0]
    TIR_data.bitlength = bitlength;
 8002ecc:	4a1f      	ldr	r2, [pc, #124]	; (8002f4c <setData+0xc0>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da00      	bge.n	8002eda <setData+0x4e>
 8002ed8:	3307      	adds	r3, #7
 8002eda:	10db      	asrs	r3, r3, #3
 8002edc:	461a      	mov	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	bf14      	ite	ne
 8002ee8:	2301      	movne	r3, #1
 8002eea:	2300      	moveq	r3, #0
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4413      	add	r3, r2
 8002ef0:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	e00c      	b.n	8002f12 <setData+0x86>
        TIR_data.buffer[i] = buf[i];
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	68ba      	ldr	r2, [r7, #8]
 8002efc:	4413      	add	r3, r2
 8002efe:	7819      	ldrb	r1, [r3, #0]
 8002f00:	4a12      	ldr	r2, [pc, #72]	; (8002f4c <setData+0xc0>)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	4413      	add	r3, r2
 8002f06:	3308      	adds	r3, #8
 8002f08:	460a      	mov	r2, r1
 8002f0a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	3301      	adds	r3, #1
 8002f10:	617b      	str	r3, [r7, #20]
 8002f12:	697a      	ldr	r2, [r7, #20]
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	dbee      	blt.n	8002ef8 <setData+0x6c>
    }

    switch (format) {
 8002f1a:	7bfb      	ldrb	r3, [r7, #15]
 8002f1c:	2b05      	cmp	r3, #5
 8002f1e:	d00c      	beq.n	8002f3a <setData+0xae>
 8002f20:	2b05      	cmp	r3, #5
 8002f22:	dc0b      	bgt.n	8002f3c <setData+0xb0>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d001      	beq.n	8002f2c <setData+0xa0>
 8002f28:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 8002f2a:	e007      	b.n	8002f3c <setData+0xb0>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8002f2c:	4808      	ldr	r0, [pc, #32]	; (8002f50 <setData+0xc4>)
 8002f2e:	f005 fc1b 	bl	8008768 <HAL_TIM_Base_Start_IT>
        		TIR_setData_flag = 1;
 8002f32:	4b08      	ldr	r3, [pc, #32]	; (8002f54 <setData+0xc8>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	701a      	strb	r2, [r3, #0]
            break;
 8002f38:	e000      	b.n	8002f3c <setData+0xb0>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 8002f3a:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 8002f3c:	687b      	ldr	r3, [r7, #4]
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3718      	adds	r7, #24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	20000214 	.word	0x20000214
 8002f4c:	200001cc 	.word	0x200001cc
 8002f50:	20000438 	.word	0x20000438
 8002f54:	20000170 	.word	0x20000170

08002f58 <tick>:

void tick(void) {
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 8002f5c:	4b80      	ldr	r3, [pc, #512]	; (8003160 <tick+0x208>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b03      	cmp	r3, #3
 8002f62:	f200 8247 	bhi.w	80033f4 <tick+0x49c>
 8002f66:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <tick+0x14>)
 8002f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6c:	08002f7d 	.word	0x08002f7d
 8002f70:	08002f97 	.word	0x08002f97
 8002f74:	0800307d 	.word	0x0800307d
 8002f78:	080032e3 	.word	0x080032e3
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8002f7c:	4b78      	ldr	r3, [pc, #480]	; (8003160 <tick+0x208>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8002f82:	4b77      	ldr	r3, [pc, #476]	; (8003160 <tick+0x208>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8002f88:	4b75      	ldr	r3, [pc, #468]	; (8003160 <tick+0x208>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8002f8e:	4b74      	ldr	r3, [pc, #464]	; (8003160 <tick+0x208>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	611a      	str	r2, [r3, #16]
            break;
 8002f94:	e235      	b.n	8003402 <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8002f96:	4b73      	ldr	r3, [pc, #460]	; (8003164 <tick+0x20c>)
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d121      	bne.n	8002fe2 <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002f9e:	4b70      	ldr	r3, [pc, #448]	; (8003160 <tick+0x208>)
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	4b71      	ldr	r3, [pc, #452]	; (8003168 <tick+0x210>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	da04      	bge.n	8002fb4 <tick+0x5c>
                    IRDUTY50;
 8002faa:	4b70      	ldr	r3, [pc, #448]	; (800316c <tick+0x214>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2234      	movs	r2, #52	; 0x34
 8002fb0:	635a      	str	r2, [r3, #52]	; 0x34
 8002fb2:	e003      	b.n	8002fbc <tick+0x64>
                } else {
                    IRDUTY0;
 8002fb4:	4b6d      	ldr	r3, [pc, #436]	; (800316c <tick+0x214>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002fbc:	4b68      	ldr	r3, [pc, #416]	; (8003160 <tick+0x208>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	4a67      	ldr	r2, [pc, #412]	; (8003160 <tick+0x208>)
 8002fc4:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002fc6:	4b68      	ldr	r3, [pc, #416]	; (8003168 <tick+0x210>)
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	4b69      	ldr	r3, [pc, #420]	; (8003170 <tick+0x218>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	441a      	add	r2, r3
 8002fd0:	4b63      	ldr	r3, [pc, #396]	; (8003160 <tick+0x208>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	f300 820f 	bgt.w	80033f8 <tick+0x4a0>
                    TIR_work.state = Data;
 8002fda:	4b61      	ldr	r3, [pc, #388]	; (8003160 <tick+0x208>)
 8002fdc:	2202      	movs	r2, #2
 8002fde:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002fe0:	e20a      	b.n	80033f8 <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8002fe2:	4b60      	ldr	r3, [pc, #384]	; (8003164 <tick+0x20c>)
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b03      	cmp	r3, #3
 8002fe8:	d121      	bne.n	800302e <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002fea:	4b5d      	ldr	r3, [pc, #372]	; (8003160 <tick+0x208>)
 8002fec:	689a      	ldr	r2, [r3, #8]
 8002fee:	4b61      	ldr	r3, [pc, #388]	; (8003174 <tick+0x21c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	da04      	bge.n	8003000 <tick+0xa8>
                    IRDUTY50;
 8002ff6:	4b5d      	ldr	r3, [pc, #372]	; (800316c <tick+0x214>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2234      	movs	r2, #52	; 0x34
 8002ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ffe:	e003      	b.n	8003008 <tick+0xb0>
                    IRDUTY0;
 8003000:	4b5a      	ldr	r3, [pc, #360]	; (800316c <tick+0x214>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2200      	movs	r2, #0
 8003006:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <tick+0x208>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	3301      	adds	r3, #1
 800300e:	4a54      	ldr	r2, [pc, #336]	; (8003160 <tick+0x208>)
 8003010:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8003012:	4b58      	ldr	r3, [pc, #352]	; (8003174 <tick+0x21c>)
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	4b58      	ldr	r3, [pc, #352]	; (8003178 <tick+0x220>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	441a      	add	r2, r3
 800301c:	4b50      	ldr	r3, [pc, #320]	; (8003160 <tick+0x208>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	429a      	cmp	r2, r3
 8003022:	f300 81e9 	bgt.w	80033f8 <tick+0x4a0>
                    TIR_work.state = Data;
 8003026:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <tick+0x208>)
 8003028:	2202      	movs	r2, #2
 800302a:	701a      	strb	r2, [r3, #0]
            break;
 800302c:	e1e4      	b.n	80033f8 <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 800302e:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <tick+0x20c>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	2b05      	cmp	r3, #5
 8003034:	f040 81e0 	bne.w	80033f8 <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8003038:	4b49      	ldr	r3, [pc, #292]	; (8003160 <tick+0x208>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4b4f      	ldr	r3, [pc, #316]	; (800317c <tick+0x224>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	429a      	cmp	r2, r3
 8003042:	da04      	bge.n	800304e <tick+0xf6>
                    IRDUTY50;
 8003044:	4b49      	ldr	r3, [pc, #292]	; (800316c <tick+0x214>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2234      	movs	r2, #52	; 0x34
 800304a:	635a      	str	r2, [r3, #52]	; 0x34
 800304c:	e003      	b.n	8003056 <tick+0xfe>
                    IRDUTY0;
 800304e:	4b47      	ldr	r3, [pc, #284]	; (800316c <tick+0x214>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2200      	movs	r2, #0
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8003056:	4b42      	ldr	r3, [pc, #264]	; (8003160 <tick+0x208>)
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	3301      	adds	r3, #1
 800305c:	4a40      	ldr	r2, [pc, #256]	; (8003160 <tick+0x208>)
 800305e:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8003060:	4b46      	ldr	r3, [pc, #280]	; (800317c <tick+0x224>)
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	4b46      	ldr	r3, [pc, #280]	; (8003180 <tick+0x228>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	441a      	add	r2, r3
 800306a:	4b3d      	ldr	r3, [pc, #244]	; (8003160 <tick+0x208>)
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	429a      	cmp	r2, r3
 8003070:	f300 81c2 	bgt.w	80033f8 <tick+0x4a0>
                    TIR_work.state = Data;
 8003074:	4b3a      	ldr	r3, [pc, #232]	; (8003160 <tick+0x208>)
 8003076:	2202      	movs	r2, #2
 8003078:	701a      	strb	r2, [r3, #0]
            break;
 800307a:	e1bd      	b.n	80033f8 <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 800307c:	4b39      	ldr	r3, [pc, #228]	; (8003164 <tick+0x20c>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	2b01      	cmp	r3, #1
 8003082:	d15b      	bne.n	800313c <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8003084:	4b36      	ldr	r3, [pc, #216]	; (8003160 <tick+0x208>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d109      	bne.n	80030a0 <tick+0x148>
                    IRDUTY50;
 800308c:	4b37      	ldr	r3, [pc, #220]	; (800316c <tick+0x214>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2234      	movs	r2, #52	; 0x34
 8003092:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8003094:	4b32      	ldr	r3, [pc, #200]	; (8003160 <tick+0x208>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	3301      	adds	r3, #1
 800309a:	4a31      	ldr	r2, [pc, #196]	; (8003160 <tick+0x208>)
 800309c:	60d3      	str	r3, [r2, #12]
 800309e:	e042      	b.n	8003126 <tick+0x1ce>
                } else {
                    IRDUTY0;
 80030a0:	4b32      	ldr	r3, [pc, #200]	; (800316c <tick+0x214>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2200      	movs	r2, #0
 80030a6:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 80030a8:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <tick+0x208>)
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <tick+0x15a>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b2b      	ldr	r3, [pc, #172]	; (8003164 <tick+0x20c>)
 80030b8:	4413      	add	r3, r2
 80030ba:	7a1b      	ldrb	r3, [r3, #8]
 80030bc:	4619      	mov	r1, r3
 80030be:	4b28      	ldr	r3, [pc, #160]	; (8003160 <tick+0x208>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	425a      	negs	r2, r3
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	f002 0207 	and.w	r2, r2, #7
 80030cc:	bf58      	it	pl
 80030ce:	4253      	negpl	r3, r2
 80030d0:	fa41 f303 	asr.w	r3, r1, r3
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d012      	beq.n	8003102 <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 80030dc:	4b20      	ldr	r3, [pc, #128]	; (8003160 <tick+0x208>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	dd08      	ble.n	80030f6 <tick+0x19e>
                            TIR_work.bitcount++;
 80030e4:	4b1e      	ldr	r3, [pc, #120]	; (8003160 <tick+0x208>)
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	3301      	adds	r3, #1
 80030ea:	4a1d      	ldr	r2, [pc, #116]	; (8003160 <tick+0x208>)
 80030ec:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 80030ee:	4b1c      	ldr	r3, [pc, #112]	; (8003160 <tick+0x208>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	e017      	b.n	8003126 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 80030f6:	4b1a      	ldr	r3, [pc, #104]	; (8003160 <tick+0x208>)
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	4a18      	ldr	r2, [pc, #96]	; (8003160 <tick+0x208>)
 80030fe:	60d3      	str	r3, [r2, #12]
 8003100:	e011      	b.n	8003126 <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <tick+0x208>)
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	dd08      	ble.n	800311c <tick+0x1c4>
                            TIR_work.bitcount++;
 800310a:	4b15      	ldr	r3, [pc, #84]	; (8003160 <tick+0x208>)
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	3301      	adds	r3, #1
 8003110:	4a13      	ldr	r2, [pc, #76]	; (8003160 <tick+0x208>)
 8003112:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8003114:	4b12      	ldr	r3, [pc, #72]	; (8003160 <tick+0x208>)
 8003116:	2200      	movs	r2, #0
 8003118:	60da      	str	r2, [r3, #12]
 800311a:	e004      	b.n	8003126 <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 800311c:	4b10      	ldr	r3, [pc, #64]	; (8003160 <tick+0x208>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	3301      	adds	r3, #1
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <tick+0x208>)
 8003124:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8003126:	4b0f      	ldr	r3, [pc, #60]	; (8003164 <tick+0x20c>)
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <tick+0x208>)
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	429a      	cmp	r2, r3
 8003130:	f300 8164 	bgt.w	80033fc <tick+0x4a4>
                    TIR_work.state = Trailer;
 8003134:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <tick+0x208>)
 8003136:	2203      	movs	r2, #3
 8003138:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 800313a:	e15f      	b.n	80033fc <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <tick+0x20c>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b03      	cmp	r3, #3
 8003142:	d16d      	bne.n	8003220 <tick+0x2c8>
                if (TIR_work.data == 0) {
 8003144:	4b06      	ldr	r3, [pc, #24]	; (8003160 <tick+0x208>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d11b      	bne.n	8003184 <tick+0x22c>
                    IRDUTY50;
 800314c:	4b07      	ldr	r3, [pc, #28]	; (800316c <tick+0x214>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	2234      	movs	r2, #52	; 0x34
 8003152:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8003154:	4b02      	ldr	r3, [pc, #8]	; (8003160 <tick+0x208>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	3301      	adds	r3, #1
 800315a:	4a01      	ldr	r2, [pc, #4]	; (8003160 <tick+0x208>)
 800315c:	60d3      	str	r3, [r2, #12]
 800315e:	e054      	b.n	800320a <tick+0x2b2>
 8003160:	20000214 	.word	0x20000214
 8003164:	200001cc 	.word	0x200001cc
 8003168:	0800b844 	.word	0x0800b844
 800316c:	20000308 	.word	0x20000308
 8003170:	0800b848 	.word	0x0800b848
 8003174:	0800b84c 	.word	0x0800b84c
 8003178:	0800b850 	.word	0x0800b850
 800317c:	0800b854 	.word	0x0800b854
 8003180:	0800b858 	.word	0x0800b858
                    IRDUTY0;
 8003184:	4b91      	ldr	r3, [pc, #580]	; (80033cc <tick+0x474>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2200      	movs	r2, #0
 800318a:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 800318c:	4b90      	ldr	r3, [pc, #576]	; (80033d0 <tick+0x478>)
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	2b00      	cmp	r3, #0
 8003192:	da00      	bge.n	8003196 <tick+0x23e>
 8003194:	3307      	adds	r3, #7
 8003196:	10db      	asrs	r3, r3, #3
 8003198:	461a      	mov	r2, r3
 800319a:	4b8e      	ldr	r3, [pc, #568]	; (80033d4 <tick+0x47c>)
 800319c:	4413      	add	r3, r2
 800319e:	7a1b      	ldrb	r3, [r3, #8]
 80031a0:	4619      	mov	r1, r3
 80031a2:	4b8b      	ldr	r3, [pc, #556]	; (80033d0 <tick+0x478>)
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	425a      	negs	r2, r3
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	f002 0207 	and.w	r2, r2, #7
 80031b0:	bf58      	it	pl
 80031b2:	4253      	negpl	r3, r2
 80031b4:	fa41 f303 	asr.w	r3, r1, r3
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d012      	beq.n	80031e6 <tick+0x28e>
                        if (3 <= TIR_work.data) {
 80031c0:	4b83      	ldr	r3, [pc, #524]	; (80033d0 <tick+0x478>)
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	dd08      	ble.n	80031da <tick+0x282>
                            TIR_work.bitcount++;
 80031c8:	4b81      	ldr	r3, [pc, #516]	; (80033d0 <tick+0x478>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	3301      	adds	r3, #1
 80031ce:	4a80      	ldr	r2, [pc, #512]	; (80033d0 <tick+0x478>)
 80031d0:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 80031d2:	4b7f      	ldr	r3, [pc, #508]	; (80033d0 <tick+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	60da      	str	r2, [r3, #12]
 80031d8:	e017      	b.n	800320a <tick+0x2b2>
                            TIR_work.data++;
 80031da:	4b7d      	ldr	r3, [pc, #500]	; (80033d0 <tick+0x478>)
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	4a7b      	ldr	r2, [pc, #492]	; (80033d0 <tick+0x478>)
 80031e2:	60d3      	str	r3, [r2, #12]
 80031e4:	e011      	b.n	800320a <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 80031e6:	4b7a      	ldr	r3, [pc, #488]	; (80033d0 <tick+0x478>)
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	dd08      	ble.n	8003200 <tick+0x2a8>
                            TIR_work.bitcount++;
 80031ee:	4b78      	ldr	r3, [pc, #480]	; (80033d0 <tick+0x478>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	3301      	adds	r3, #1
 80031f4:	4a76      	ldr	r2, [pc, #472]	; (80033d0 <tick+0x478>)
 80031f6:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 80031f8:	4b75      	ldr	r3, [pc, #468]	; (80033d0 <tick+0x478>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
 80031fe:	e004      	b.n	800320a <tick+0x2b2>
                            TIR_work.data++;
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <tick+0x478>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	3301      	adds	r3, #1
 8003206:	4a72      	ldr	r2, [pc, #456]	; (80033d0 <tick+0x478>)
 8003208:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 800320a:	4b72      	ldr	r3, [pc, #456]	; (80033d4 <tick+0x47c>)
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	4b70      	ldr	r3, [pc, #448]	; (80033d0 <tick+0x478>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	429a      	cmp	r2, r3
 8003214:	f300 80f2 	bgt.w	80033fc <tick+0x4a4>
                    TIR_work.state = Trailer;
 8003218:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <tick+0x478>)
 800321a:	2203      	movs	r2, #3
 800321c:	701a      	strb	r2, [r3, #0]
            break;
 800321e:	e0ed      	b.n	80033fc <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 8003220:	4b6c      	ldr	r3, [pc, #432]	; (80033d4 <tick+0x47c>)
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b05      	cmp	r3, #5
 8003226:	f040 80e9 	bne.w	80033fc <tick+0x4a4>
                if (TIR_work.data == 0) {
 800322a:	4b69      	ldr	r3, [pc, #420]	; (80033d0 <tick+0x478>)
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <tick+0x2ee>
                    IRDUTY0;
 8003232:	4b66      	ldr	r3, [pc, #408]	; (80033cc <tick+0x474>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 800323a:	4b65      	ldr	r3, [pc, #404]	; (80033d0 <tick+0x478>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	3301      	adds	r3, #1
 8003240:	4a63      	ldr	r2, [pc, #396]	; (80033d0 <tick+0x478>)
 8003242:	60d3      	str	r3, [r2, #12]
 8003244:	e042      	b.n	80032cc <tick+0x374>
                    IRDUTY50;
 8003246:	4b61      	ldr	r3, [pc, #388]	; (80033cc <tick+0x474>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	2234      	movs	r2, #52	; 0x34
 800324c:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 800324e:	4b60      	ldr	r3, [pc, #384]	; (80033d0 <tick+0x478>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	2b00      	cmp	r3, #0
 8003254:	da00      	bge.n	8003258 <tick+0x300>
 8003256:	3307      	adds	r3, #7
 8003258:	10db      	asrs	r3, r3, #3
 800325a:	461a      	mov	r2, r3
 800325c:	4b5d      	ldr	r3, [pc, #372]	; (80033d4 <tick+0x47c>)
 800325e:	4413      	add	r3, r2
 8003260:	7a1b      	ldrb	r3, [r3, #8]
 8003262:	4619      	mov	r1, r3
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <tick+0x478>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	425a      	negs	r2, r3
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	f002 0207 	and.w	r2, r2, #7
 8003272:	bf58      	it	pl
 8003274:	4253      	negpl	r3, r2
 8003276:	fa41 f303 	asr.w	r3, r1, r3
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d012      	beq.n	80032a8 <tick+0x350>
                        if (2 <= TIR_work.data) {
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <tick+0x478>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	2b01      	cmp	r3, #1
 8003288:	dd08      	ble.n	800329c <tick+0x344>
                            TIR_work.bitcount++;
 800328a:	4b51      	ldr	r3, [pc, #324]	; (80033d0 <tick+0x478>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	3301      	adds	r3, #1
 8003290:	4a4f      	ldr	r2, [pc, #316]	; (80033d0 <tick+0x478>)
 8003292:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8003294:	4b4e      	ldr	r3, [pc, #312]	; (80033d0 <tick+0x478>)
 8003296:	2200      	movs	r2, #0
 8003298:	60da      	str	r2, [r3, #12]
 800329a:	e017      	b.n	80032cc <tick+0x374>
                            TIR_work.data++;
 800329c:	4b4c      	ldr	r3, [pc, #304]	; (80033d0 <tick+0x478>)
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	4a4b      	ldr	r2, [pc, #300]	; (80033d0 <tick+0x478>)
 80032a4:	60d3      	str	r3, [r2, #12]
 80032a6:	e011      	b.n	80032cc <tick+0x374>
                        if (1 <= TIR_work.data) {
 80032a8:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <tick+0x478>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	dd08      	ble.n	80032c2 <tick+0x36a>
                            TIR_work.bitcount++;
 80032b0:	4b47      	ldr	r3, [pc, #284]	; (80033d0 <tick+0x478>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	3301      	adds	r3, #1
 80032b6:	4a46      	ldr	r2, [pc, #280]	; (80033d0 <tick+0x478>)
 80032b8:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 80032ba:	4b45      	ldr	r3, [pc, #276]	; (80033d0 <tick+0x478>)
 80032bc:	2200      	movs	r2, #0
 80032be:	60da      	str	r2, [r3, #12]
 80032c0:	e004      	b.n	80032cc <tick+0x374>
                            TIR_work.data++;
 80032c2:	4b43      	ldr	r3, [pc, #268]	; (80033d0 <tick+0x478>)
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	3301      	adds	r3, #1
 80032c8:	4a41      	ldr	r2, [pc, #260]	; (80033d0 <tick+0x478>)
 80032ca:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 80032cc:	4b41      	ldr	r3, [pc, #260]	; (80033d4 <tick+0x47c>)
 80032ce:	685a      	ldr	r2, [r3, #4]
 80032d0:	4b3f      	ldr	r3, [pc, #252]	; (80033d0 <tick+0x478>)
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	f300 8091 	bgt.w	80033fc <tick+0x4a4>
                    TIR_work.state = Trailer;
 80032da:	4b3d      	ldr	r3, [pc, #244]	; (80033d0 <tick+0x478>)
 80032dc:	2203      	movs	r2, #3
 80032de:	701a      	strb	r2, [r3, #0]
            break;
 80032e0:	e08c      	b.n	80033fc <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 80032e2:	4b3c      	ldr	r3, [pc, #240]	; (80033d4 <tick+0x47c>)
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d126      	bne.n	8003338 <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <tick+0x478>)
 80032ec:	691a      	ldr	r2, [r3, #16]
 80032ee:	4b3a      	ldr	r3, [pc, #232]	; (80033d8 <tick+0x480>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	da04      	bge.n	8003300 <tick+0x3a8>
                    IRDUTY50;
 80032f6:	4b35      	ldr	r3, [pc, #212]	; (80033cc <tick+0x474>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2234      	movs	r2, #52	; 0x34
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34
 80032fe:	e003      	b.n	8003308 <tick+0x3b0>
                } else {
                    IRDUTY0;
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <tick+0x474>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2200      	movs	r2, #0
 8003306:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8003308:	4b31      	ldr	r3, [pc, #196]	; (80033d0 <tick+0x478>)
 800330a:	691b      	ldr	r3, [r3, #16]
 800330c:	3301      	adds	r3, #1
 800330e:	4a30      	ldr	r2, [pc, #192]	; (80033d0 <tick+0x478>)
 8003310:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8003312:	4b31      	ldr	r3, [pc, #196]	; (80033d8 <tick+0x480>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	4b31      	ldr	r3, [pc, #196]	; (80033dc <tick+0x484>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	441a      	add	r2, r3
 800331c:	4b2c      	ldr	r3, [pc, #176]	; (80033d0 <tick+0x478>)
 800331e:	691b      	ldr	r3, [r3, #16]
 8003320:	429a      	cmp	r2, r3
 8003322:	dc6d      	bgt.n	8003400 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8003324:	4b2a      	ldr	r3, [pc, #168]	; (80033d0 <tick+0x478>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 800332a:	482d      	ldr	r0, [pc, #180]	; (80033e0 <tick+0x488>)
 800332c:	f005 fa94 	bl	8008858 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI0_IRQn);//이걸로 수신시작할 것
 8003330:	2006      	movs	r0, #6
 8003332:	f003 fe7e 	bl	8007032 <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8003336:	e063      	b.n	8003400 <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 8003338:	4b26      	ldr	r3, [pc, #152]	; (80033d4 <tick+0x47c>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b03      	cmp	r3, #3
 800333e:	d120      	bne.n	8003382 <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8003340:	4b23      	ldr	r3, [pc, #140]	; (80033d0 <tick+0x478>)
 8003342:	691a      	ldr	r2, [r3, #16]
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <tick+0x48c>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	da04      	bge.n	8003356 <tick+0x3fe>
                    IRDUTY50;
 800334c:	4b1f      	ldr	r3, [pc, #124]	; (80033cc <tick+0x474>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2234      	movs	r2, #52	; 0x34
 8003352:	635a      	str	r2, [r3, #52]	; 0x34
 8003354:	e003      	b.n	800335e <tick+0x406>
                    IRDUTY0;
 8003356:	4b1d      	ldr	r3, [pc, #116]	; (80033cc <tick+0x474>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2200      	movs	r2, #0
 800335c:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 800335e:	4b1c      	ldr	r3, [pc, #112]	; (80033d0 <tick+0x478>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	3301      	adds	r3, #1
 8003364:	4a1a      	ldr	r2, [pc, #104]	; (80033d0 <tick+0x478>)
 8003366:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8003368:	4b1e      	ldr	r3, [pc, #120]	; (80033e4 <tick+0x48c>)
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <tick+0x490>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	441a      	add	r2, r3
 8003372:	4b17      	ldr	r3, [pc, #92]	; (80033d0 <tick+0x478>)
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	429a      	cmp	r2, r3
 8003378:	dc42      	bgt.n	8003400 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <tick+0x478>)
 800337c:	2200      	movs	r2, #0
 800337e:	701a      	strb	r2, [r3, #0]
            break;
 8003380:	e03e      	b.n	8003400 <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <tick+0x47c>)
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	2b05      	cmp	r3, #5
 8003388:	d13a      	bne.n	8003400 <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 800338a:	4b11      	ldr	r3, [pc, #68]	; (80033d0 <tick+0x478>)
 800338c:	691a      	ldr	r2, [r3, #16]
 800338e:	4b17      	ldr	r3, [pc, #92]	; (80033ec <tick+0x494>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	da04      	bge.n	80033a0 <tick+0x448>
                    IRDUTY50;
 8003396:	4b0d      	ldr	r3, [pc, #52]	; (80033cc <tick+0x474>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2234      	movs	r2, #52	; 0x34
 800339c:	635a      	str	r2, [r3, #52]	; 0x34
 800339e:	e003      	b.n	80033a8 <tick+0x450>
                    IRDUTY0;
 80033a0:	4b0a      	ldr	r3, [pc, #40]	; (80033cc <tick+0x474>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2200      	movs	r2, #0
 80033a6:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 80033a8:	4b09      	ldr	r3, [pc, #36]	; (80033d0 <tick+0x478>)
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	3301      	adds	r3, #1
 80033ae:	4a08      	ldr	r2, [pc, #32]	; (80033d0 <tick+0x478>)
 80033b0:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 80033b2:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <tick+0x494>)
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	4b0e      	ldr	r3, [pc, #56]	; (80033f0 <tick+0x498>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	441a      	add	r2, r3
 80033bc:	4b04      	ldr	r3, [pc, #16]	; (80033d0 <tick+0x478>)
 80033be:	691b      	ldr	r3, [r3, #16]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	dc1d      	bgt.n	8003400 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 80033c4:	4b02      	ldr	r3, [pc, #8]	; (80033d0 <tick+0x478>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	701a      	strb	r2, [r3, #0]
            break;
 80033ca:	e019      	b.n	8003400 <tick+0x4a8>
 80033cc:	20000308 	.word	0x20000308
 80033d0:	20000214 	.word	0x20000214
 80033d4:	200001cc 	.word	0x200001cc
 80033d8:	0800b85c 	.word	0x0800b85c
 80033dc:	0800b860 	.word	0x0800b860
 80033e0:	20000438 	.word	0x20000438
 80033e4:	0800b864 	.word	0x0800b864
 80033e8:	0800b868 	.word	0x0800b868
 80033ec:	0800b86c 	.word	0x0800b86c
 80033f0:	0800b870 	.word	0x0800b870
        default:
            break;
 80033f4:	bf00      	nop
 80033f6:	e004      	b.n	8003402 <tick+0x4aa>
            break;
 80033f8:	bf00      	nop
 80033fa:	e002      	b.n	8003402 <tick+0x4aa>
            break;
 80033fc:	bf00      	nop
 80033fe:	e000      	b.n	8003402 <tick+0x4aa>
            break;
 8003400:	bf00      	nop
    }
    UNLOCK();
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop

08003408 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8003412:	4b21      	ldr	r3, [pc, #132]	; (8003498 <CanInit+0x90>)
 8003414:	2200      	movs	r2, #0
 8003416:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8003418:	4b1f      	ldr	r3, [pc, #124]	; (8003498 <CanInit+0x90>)
 800341a:	2200      	movs	r2, #0
 800341c:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800341e:	4b1e      	ldr	r3, [pc, #120]	; (8003498 <CanInit+0x90>)
 8003420:	2201      	movs	r2, #1
 8003422:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	4a1b      	ldr	r2, [pc, #108]	; (8003498 <CanInit+0x90>)
 800342a:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003432:	4013      	ands	r3, r2
 8003434:	4a18      	ldr	r2, [pc, #96]	; (8003498 <CanInit+0x90>)
 8003436:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	0c1b      	lsrs	r3, r3, #16
 800343c:	4a16      	ldr	r2, [pc, #88]	; (8003498 <CanInit+0x90>)
 800343e:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8003446:	4013      	ands	r3, r2
 8003448:	4a13      	ldr	r2, [pc, #76]	; (8003498 <CanInit+0x90>)
 800344a:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <CanInit+0x90>)
 800344e:	2200      	movs	r2, #0
 8003450:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8003452:	4b11      	ldr	r3, [pc, #68]	; (8003498 <CanInit+0x90>)
 8003454:	2201      	movs	r2, #1
 8003456:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8003458:	4b0f      	ldr	r3, [pc, #60]	; (8003498 <CanInit+0x90>)
 800345a:	2200      	movs	r2, #0
 800345c:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 800345e:	480f      	ldr	r0, [pc, #60]	; (800349c <CanInit+0x94>)
 8003460:	f003 f810 	bl	8006484 <HAL_CAN_Start>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <CanInit+0x66>
 800346a:	f000 fdc5 	bl	8003ff8 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 800346e:	2102      	movs	r1, #2
 8003470:	480a      	ldr	r0, [pc, #40]	; (800349c <CanInit+0x94>)
 8003472:	f003 fa6d 	bl	8006950 <HAL_CAN_ActivateNotification>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d000      	beq.n	800347e <CanInit+0x76>
 800347c:	e7fe      	b.n	800347c <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 800347e:	4906      	ldr	r1, [pc, #24]	; (8003498 <CanInit+0x90>)
 8003480:	4806      	ldr	r0, [pc, #24]	; (800349c <CanInit+0x94>)
 8003482:	f002 ff1f 	bl	80062c4 <HAL_CAN_ConfigFilter>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d001      	beq.n	8003490 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 800348c:	f000 fdb4 	bl	8003ff8 <Error_Handler>
    }
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20000250 	.word	0x20000250
 800349c:	200002e0 	.word	0x200002e0

080034a0 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 80034a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034a2:	b093      	sub	sp, #76	; 0x4c
 80034a4:	af06      	add	r7, sp, #24
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	4611      	mov	r1, r2
 80034ac:	461a      	mov	r2, r3
 80034ae:	460b      	mov	r3, r1
 80034b0:	71fb      	strb	r3, [r7, #7]
 80034b2:	4613      	mov	r3, r2
 80034b4:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 80034be:	2300      	movs	r3, #0
 80034c0:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 80034c2:	79bb      	ldrb	r3, [r7, #6]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d001      	beq.n	80034cc <sendCan+0x2c>
 80034c8:	2304      	movs	r3, #4
 80034ca:	e000      	b.n	80034ce <sendCan+0x2e>
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 80034d0:	79fb      	ldrb	r3, [r7, #7]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 80034d4:	2301      	movs	r3, #1
 80034d6:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 80034da:	4822      	ldr	r0, [pc, #136]	; (8003564 <sendCan+0xc4>)
 80034dc:	f003 f8f1 	bl	80066c2 <HAL_CAN_GetTxMailboxesFreeLevel>
 80034e0:	4603      	mov	r3, r0
 80034e2:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d037      	beq.n	800355a <sendCan+0xba>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80034ea:	f107 0310 	add.w	r3, r7, #16
 80034ee:	f107 0114 	add.w	r1, r7, #20
 80034f2:	68ba      	ldr	r2, [r7, #8]
 80034f4:	481b      	ldr	r0, [pc, #108]	; (8003564 <sendCan+0xc4>)
 80034f6:	f003 f809 	bl	800650c <HAL_CAN_AddTxMessage>
 80034fa:	4603      	mov	r3, r0
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80034fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003500:	2b00      	cmp	r3, #0
 8003502:	d000      	beq.n	8003506 <sendCan+0x66>
 8003504:	e7fe      	b.n	8003504 <sendCan+0x64>
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 800350a:	461e      	mov	r6, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	3301      	adds	r3, #1
 8003510:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 8003512:	469c      	mov	ip, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	3302      	adds	r3, #2
 8003518:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 800351a:	461a      	mov	r2, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	3303      	adds	r3, #3
 8003520:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 8003522:	4619      	mov	r1, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3304      	adds	r3, #4
 8003528:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 800352a:	4618      	mov	r0, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	3305      	adds	r3, #5
 8003530:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 8003532:	461c      	mov	r4, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	3306      	adds	r3, #6
 8003538:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 800353a:	461d      	mov	r5, r3
        		ID , buf[0], buf[1], buf[2], buf[3], buf[4], buf[5], buf[6], buf[7]);
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	3307      	adds	r3, #7
 8003540:	781b      	ldrb	r3, [r3, #0]
        printf("canid:%u  buf:%d %d %d %d %d %d %d %d \n",
 8003542:	9305      	str	r3, [sp, #20]
 8003544:	9504      	str	r5, [sp, #16]
 8003546:	9403      	str	r4, [sp, #12]
 8003548:	9002      	str	r0, [sp, #8]
 800354a:	9101      	str	r1, [sp, #4]
 800354c:	9200      	str	r2, [sp, #0]
 800354e:	4663      	mov	r3, ip
 8003550:	4632      	mov	r2, r6
 8003552:	68f9      	ldr	r1, [r7, #12]
 8003554:	4804      	ldr	r0, [pc, #16]	; (8003568 <sendCan+0xc8>)
 8003556:	f006 fff9 	bl	800a54c <iprintf>
    }
}
 800355a:	bf00      	nop
 800355c:	3734      	adds	r7, #52	; 0x34
 800355e:	46bd      	mov	sp, r7
 8003560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003562:	bf00      	nop
 8003564:	200002e0 	.word	0x200002e0
 8003568:	0800b748 	.word	0x0800b748

0800356c <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b082      	sub	sp, #8
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8003574:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8003576:	4a0a      	ldr	r2, [pc, #40]	; (80035a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003578:	2100      	movs	r1, #0
 800357a:	480a      	ldr	r0, [pc, #40]	; (80035a4 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 800357c:	f003 f8d6 	bl	800672c <HAL_CAN_GetRxMessage>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d000      	beq.n	8003588 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8003586:	e7fe      	b.n	8003586 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8003588:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	3301      	adds	r3, #1
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8003590:	6013      	str	r3, [r2, #0]

}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000022c 	.word	0x2000022c
 80035a0:	20000234 	.word	0x20000234
 80035a4:	200002e0 	.word	0x200002e0
 80035a8:	20000228 	.word	0x20000228

080035ac <sendIRdata>:
    uint8_t charger_on[4] = {0xCA, 0x35, 0x9E, 0x61};//
    uint8_t charger_off[4] = {0xCA, 0x35, 0x9F, 0x60};//
    uint8_t battery_full[4] = {0xCA, 0x35, 0xAA, 0x55};

void sendIRdata(uint8_t send_data[])
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b082      	sub	sp, #8
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
    if(TIR_getState() == Idle)
 80035b4:	f7ff fc5a 	bl	8002e6c <TIR_getState>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d107      	bne.n	80035ce <sendIRdata+0x22>
    {
        //ir_rx->evt.disable_irq();
    	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80035be:	2006      	movs	r0, #6
 80035c0:	f003 fd45 	bl	800704e <HAL_NVIC_DisableIRQ>
        setData(NEC, send_data, 32);
 80035c4:	2220      	movs	r2, #32
 80035c6:	6879      	ldr	r1, [r7, #4]
 80035c8:	2001      	movs	r0, #1
 80035ca:	f7ff fc5f 	bl	8002e8c <setData>
        //ir_rx->evt.enable_irq();
    }
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}
	...

080035d8 <checkIRdata>:

int checkIRdata()
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
    int bitcount = 0;
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
    int check_count = 0;
 80035e2:	2300      	movs	r3, #0
 80035e4:	603b      	str	r3, [r7, #0]
    int start_docking_count = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
    int finish_docking_count = 0;
 80035ea:	2300      	movs	r3, #0
 80035ec:	613b      	str	r3, [r7, #16]

    if(getState() == Received)
 80035ee:	f7fd fc85 	bl	8000efc <getState>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d115      	bne.n	8003624 <checkIRdata+0x4c>
    {
        for(int i = 0; i < 32; i++)
 80035f8:	2300      	movs	r3, #0
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	e007      	b.n	800360e <checkIRdata+0x36>
        {
            recv_buf[i] = '0';
 80035fe:	4a30      	ldr	r2, [pc, #192]	; (80036c0 <checkIRdata+0xe8>)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	4413      	add	r3, r2
 8003604:	2230      	movs	r2, #48	; 0x30
 8003606:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 32; i++)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	3301      	adds	r3, #1
 800360c:	60fb      	str	r3, [r7, #12]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2b1f      	cmp	r3, #31
 8003612:	ddf4      	ble.n	80035fe <checkIRdata+0x26>
        }
        bitcount = getData(NEC, recv_buf, sizeof(recv_buf)*8);
 8003614:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003618:	4929      	ldr	r1, [pc, #164]	; (80036c0 <checkIRdata+0xe8>)
 800361a:	2001      	movs	r0, #1
 800361c:	f7fd fc7e 	bl	8000f1c <getData>
 8003620:	6078      	str	r0, [r7, #4]
 8003622:	e009      	b.n	8003638 <checkIRdata+0x60>
    }
    else if(getState() != Received)
 8003624:	f7fd fc6a 	bl	8000efc <getState>
 8003628:	4603      	mov	r3, r0
 800362a:	2b02      	cmp	r3, #2
 800362c:	d004      	beq.n	8003638 <checkIRdata+0x60>
    {
    	printf("getState() != Received\n");
 800362e:	4825      	ldr	r0, [pc, #148]	; (80036c4 <checkIRdata+0xec>)
 8003630:	f007 f812 	bl	800a658 <puts>
        return 0;
 8003634:	2300      	movs	r3, #0
 8003636:	e03e      	b.n	80036b6 <checkIRdata+0xde>
    }

    for(int i = 0; i<4; i++)
 8003638:	2300      	movs	r3, #0
 800363a:	60bb      	str	r3, [r7, #8]
 800363c:	e02d      	b.n	800369a <checkIRdata+0xc2>
    {
        if(recv_buf[i] == start_docking[i]) {start_docking_count++;}
 800363e:	4a20      	ldr	r2, [pc, #128]	; (80036c0 <checkIRdata+0xe8>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	4413      	add	r3, r2
 8003644:	781a      	ldrb	r2, [r3, #0]
 8003646:	4920      	ldr	r1, [pc, #128]	; (80036c8 <checkIRdata+0xf0>)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	440b      	add	r3, r1
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	429a      	cmp	r2, r3
 8003650:	d102      	bne.n	8003658 <checkIRdata+0x80>
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	3301      	adds	r3, #1
 8003656:	617b      	str	r3, [r7, #20]
        if(recv_buf[i] == finish_docking[i]) {finish_docking_count++;}
 8003658:	4a19      	ldr	r2, [pc, #100]	; (80036c0 <checkIRdata+0xe8>)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4413      	add	r3, r2
 800365e:	781a      	ldrb	r2, [r3, #0]
 8003660:	491a      	ldr	r1, [pc, #104]	; (80036cc <checkIRdata+0xf4>)
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	440b      	add	r3, r1
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d102      	bne.n	8003672 <checkIRdata+0x9a>
 800366c:	693b      	ldr	r3, [r7, #16]
 800366e:	3301      	adds	r3, #1
 8003670:	613b      	str	r3, [r7, #16]
        printf("%x : %x    ", recv_buf[i], start_docking[i]);
 8003672:	4a13      	ldr	r2, [pc, #76]	; (80036c0 <checkIRdata+0xe8>)
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	4413      	add	r3, r2
 8003678:	781b      	ldrb	r3, [r3, #0]
 800367a:	4619      	mov	r1, r3
 800367c:	4a12      	ldr	r2, [pc, #72]	; (80036c8 <checkIRdata+0xf0>)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	4413      	add	r3, r2
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	461a      	mov	r2, r3
 8003686:	4812      	ldr	r0, [pc, #72]	; (80036d0 <checkIRdata+0xf8>)
 8003688:	f006 ff60 	bl	800a54c <iprintf>
        printf("!!start_docking_count: %d\n", start_docking_count);
 800368c:	6979      	ldr	r1, [r7, #20]
 800368e:	4811      	ldr	r0, [pc, #68]	; (80036d4 <checkIRdata+0xfc>)
 8003690:	f006 ff5c 	bl	800a54c <iprintf>
    for(int i = 0; i<4; i++)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	3301      	adds	r3, #1
 8003698:	60bb      	str	r3, [r7, #8]
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b03      	cmp	r3, #3
 800369e:	ddce      	ble.n	800363e <checkIRdata+0x66>
    }


    if(start_docking_count == 4)
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2b04      	cmp	r3, #4
 80036a4:	d101      	bne.n	80036aa <checkIRdata+0xd2>
    {
        return 1;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e005      	b.n	80036b6 <checkIRdata+0xde>
    }
    else if(finish_docking_count == 4)
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d101      	bne.n	80036b4 <checkIRdata+0xdc>
    {
        return 2;
 80036b0:	2302      	movs	r3, #2
 80036b2:	e000      	b.n	80036b6 <checkIRdata+0xde>
    }

        return 0;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000278 	.word	0x20000278
 80036c4:	0800b770 	.word	0x0800b770
 80036c8:	20000008 	.word	0x20000008
 80036cc:	2000000c 	.word	0x2000000c
 80036d0:	0800b788 	.word	0x0800b788
 80036d4:	0800b794 	.word	0x0800b794

080036d8 <turnOn>:
RGB purple = {1.0,0.0,1.0};    //for DOCKING 1
RGB white = {1.0,1.0,1.0};      //for manual 7
RGB blue = {0.0,0.0,1.0};

void turnOn(RGB rgb)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	1d3b      	adds	r3, r7, #4
 80036e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(rgb.red == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, SET);}
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d106      	bne.n	80036f8 <turnOn+0x20>
 80036ea:	2201      	movs	r2, #1
 80036ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036f0:	4816      	ldr	r0, [pc, #88]	; (800374c <turnOn+0x74>)
 80036f2:	f003 fe8b 	bl	800740c <HAL_GPIO_WritePin>
 80036f6:	e005      	b.n	8003704 <turnOn+0x2c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);}
 80036f8:	2200      	movs	r2, #0
 80036fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036fe:	4813      	ldr	r0, [pc, #76]	; (800374c <turnOn+0x74>)
 8003700:	f003 fe84 	bl	800740c <HAL_GPIO_WritePin>
    if(rgb.green == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, SET);}
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <turnOn+0x40>
 800370a:	2201      	movs	r2, #1
 800370c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003710:	480e      	ldr	r0, [pc, #56]	; (800374c <turnOn+0x74>)
 8003712:	f003 fe7b 	bl	800740c <HAL_GPIO_WritePin>
 8003716:	e005      	b.n	8003724 <turnOn+0x4c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, RESET);}
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800371e:	480b      	ldr	r0, [pc, #44]	; (800374c <turnOn+0x74>)
 8003720:	f003 fe74 	bl	800740c <HAL_GPIO_WritePin>
    if(rgb.blue == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, SET);}
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b01      	cmp	r3, #1
 8003728:	d106      	bne.n	8003738 <turnOn+0x60>
 800372a:	2201      	movs	r2, #1
 800372c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003730:	4806      	ldr	r0, [pc, #24]	; (800374c <turnOn+0x74>)
 8003732:	f003 fe6b 	bl	800740c <HAL_GPIO_WritePin>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);}
}
 8003736:	e005      	b.n	8003744 <turnOn+0x6c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);}
 8003738:	2200      	movs	r2, #0
 800373a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800373e:	4803      	ldr	r0, [pc, #12]	; (800374c <turnOn+0x74>)
 8003740:	f003 fe64 	bl	800740c <HAL_GPIO_WritePin>
}
 8003744:	bf00      	nop
 8003746:	3710      	adds	r7, #16
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}
 800374c:	40020c00 	.word	0x40020c00

08003750 <turnOff>:

void turnOff()
{
 8003750:	b580      	push	{r7, lr}
 8003752:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);
 8003754:	2200      	movs	r2, #0
 8003756:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800375a:	4808      	ldr	r0, [pc, #32]	; (800377c <turnOff+0x2c>)
 800375c:	f003 fe56 	bl	800740c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, RESET);
 8003760:	2200      	movs	r2, #0
 8003762:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003766:	4805      	ldr	r0, [pc, #20]	; (800377c <turnOff+0x2c>)
 8003768:	f003 fe50 	bl	800740c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);
 800376c:	2200      	movs	r2, #0
 800376e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003772:	4802      	ldr	r0, [pc, #8]	; (800377c <turnOff+0x2c>)
 8003774:	f003 fe4a 	bl	800740c <HAL_GPIO_WritePin>
}
 8003778:	bf00      	nop
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40020c00 	.word	0x40020c00

08003780 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
///for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b084      	sub	sp, #16
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	b29a      	uxth	r2, r3
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	68b9      	ldr	r1, [r7, #8]
 8003794:	4803      	ldr	r0, [pc, #12]	; (80037a4 <_write+0x24>)
 8003796:	f006 fa15 	bl	8009bc4 <HAL_UART_Transmit>
	return (len);
 800379a:	687b      	ldr	r3, [r7, #4]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	200004d0 	.word	0x200004d0

080037a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80037ac:	f001 ffdf 	bl	800576e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80037b0:	f000 f83c 	bl	800382c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80037b4:	f000 fb18 	bl	8003de8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80037b8:	f000 fae6 	bl	8003d88 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80037bc:	f000 f922 	bl	8003a04 <MX_CAN1_Init>
  MX_TIM2_Init();
 80037c0:	f000 f956 	bl	8003a70 <MX_TIM2_Init>
  MX_TIM6_Init();
 80037c4:	f000 fa18 	bl	8003bf8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80037c8:	f000 fa4c 	bl	8003c64 <MX_TIM7_Init>
  MX_TIM5_Init();
 80037cc:	f000 f9c6 	bl	8003b5c <MX_TIM5_Init>
  MX_TIM14_Init();
 80037d0:	f000 fab8 	bl	8003d44 <MX_TIM14_Init>
  MX_TIM9_Init();
 80037d4:	f000 fa7c 	bl	8003cd0 <MX_TIM9_Init>
  MX_ADC1_Init();
 80037d8:	f000 f894 	bl	8003904 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);//direct set
 80037dc:	2200      	movs	r2, #0
 80037de:	2100      	movs	r1, #0
 80037e0:	2008      	movs	r0, #8
 80037e2:	f003 fc0a 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//direct set
 80037e6:	2008      	movs	r0, #8
 80037e8:	f003 fc23 	bl	8007032 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);//direct set
 80037ec:	2200      	movs	r2, #0
 80037ee:	2100      	movs	r1, #0
 80037f0:	2006      	movs	r0, #6
 80037f2:	f003 fc02 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);//direct set
 80037f6:	2006      	movs	r0, #6
 80037f8:	f003 fc1b 	bl	8007032 <HAL_NVIC_EnableIRQ>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 80037fc:	2100      	movs	r1, #0
 80037fe:	4808      	ldr	r0, [pc, #32]	; (8003820 <main+0x78>)
 8003800:	f005 f8ba 	bl	8008978 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <main+0x78>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2234      	movs	r2, #52	; 0x34
 800380a:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  //HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 800380c:	4805      	ldr	r0, [pc, #20]	; (8003824 <main+0x7c>)
 800380e:	f004 ffab 	bl	8008768 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8003812:	4805      	ldr	r0, [pc, #20]	; (8003828 <main+0x80>)
 8003814:	f004 ffa8 	bl	8008768 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
	  //printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 8003818:	f7ff f8a8 	bl	800296c <spinonce>
 800381c:	e7fc      	b.n	8003818 <main+0x70>
 800381e:	bf00      	nop
 8003820:	20000308 	.word	0x20000308
 8003824:	200003a0 	.word	0x200003a0
 8003828:	20000438 	.word	0x20000438

0800382c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b094      	sub	sp, #80	; 0x50
 8003830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003832:	f107 0320 	add.w	r3, r7, #32
 8003836:	2230      	movs	r2, #48	; 0x30
 8003838:	2100      	movs	r1, #0
 800383a:	4618      	mov	r0, r3
 800383c:	f006 fe7e 	bl	800a53c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003840:	f107 030c 	add.w	r3, r7, #12
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	605a      	str	r2, [r3, #4]
 800384a:	609a      	str	r2, [r3, #8]
 800384c:	60da      	str	r2, [r3, #12]
 800384e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	4b2a      	ldr	r3, [pc, #168]	; (80038fc <SystemClock_Config+0xd0>)
 8003852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003854:	4a29      	ldr	r2, [pc, #164]	; (80038fc <SystemClock_Config+0xd0>)
 8003856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385a:	6413      	str	r3, [r2, #64]	; 0x40
 800385c:	4b27      	ldr	r3, [pc, #156]	; (80038fc <SystemClock_Config+0xd0>)
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003864:	60bb      	str	r3, [r7, #8]
 8003866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <SystemClock_Config+0xd4>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a24      	ldr	r2, [pc, #144]	; (8003900 <SystemClock_Config+0xd4>)
 800386e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003872:	6013      	str	r3, [r2, #0]
 8003874:	4b22      	ldr	r3, [pc, #136]	; (8003900 <SystemClock_Config+0xd4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800387c:	607b      	str	r3, [r7, #4]
 800387e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003880:	2301      	movs	r3, #1
 8003882:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003884:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003888:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800388a:	2302      	movs	r3, #2
 800388c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800388e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003892:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003894:	2304      	movs	r3, #4
 8003896:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003898:	23d8      	movs	r3, #216	; 0xd8
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800389c:	2302      	movs	r3, #2
 800389e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80038a0:	2302      	movs	r3, #2
 80038a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038a4:	f107 0320 	add.w	r3, r7, #32
 80038a8:	4618      	mov	r0, r3
 80038aa:	f003 fe4b 	bl	8007544 <HAL_RCC_OscConfig>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80038b4:	f000 fba0 	bl	8003ff8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80038b8:	f003 fdf4 	bl	80074a4 <HAL_PWREx_EnableOverDrive>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80038c2:	f000 fb99 	bl	8003ff8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038c6:	230f      	movs	r3, #15
 80038c8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038ca:	2302      	movs	r3, #2
 80038cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038d6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80038de:	f107 030c 	add.w	r3, r7, #12
 80038e2:	2107      	movs	r1, #7
 80038e4:	4618      	mov	r0, r3
 80038e6:	f004 f8d1 	bl	8007a8c <HAL_RCC_ClockConfig>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80038f0:	f000 fb82 	bl	8003ff8 <Error_Handler>
  }
}
 80038f4:	bf00      	nop
 80038f6:	3750      	adds	r7, #80	; 0x50
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40023800 	.word	0x40023800
 8003900:	40007000 	.word	0x40007000

08003904 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b084      	sub	sp, #16
 8003908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800390a:	463b      	mov	r3, r7
 800390c:	2200      	movs	r2, #0
 800390e:	601a      	str	r2, [r3, #0]
 8003910:	605a      	str	r2, [r3, #4]
 8003912:	609a      	str	r2, [r3, #8]
 8003914:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003916:	4b38      	ldr	r3, [pc, #224]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003918:	4a38      	ldr	r2, [pc, #224]	; (80039fc <MX_ADC1_Init+0xf8>)
 800391a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800391e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003922:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003926:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800392a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800392c:	4b32      	ldr	r3, [pc, #200]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800392e:	2201      	movs	r2, #1
 8003930:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003932:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003934:	2200      	movs	r2, #0
 8003936:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003938:	4b2f      	ldr	r3, [pc, #188]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003942:	2201      	movs	r2, #1
 8003944:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003946:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003948:	2200      	movs	r2, #0
 800394a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800394c:	4b2a      	ldr	r3, [pc, #168]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800394e:	4a2c      	ldr	r2, [pc, #176]	; (8003a00 <MX_ADC1_Init+0xfc>)
 8003950:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003952:	4b29      	ldr	r3, [pc, #164]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003954:	2200      	movs	r2, #0
 8003956:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003958:	4b27      	ldr	r3, [pc, #156]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800395a:	2204      	movs	r2, #4
 800395c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800395e:	4b26      	ldr	r3, [pc, #152]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003960:	2200      	movs	r2, #0
 8003962:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003966:	4b24      	ldr	r3, [pc, #144]	; (80039f8 <MX_ADC1_Init+0xf4>)
 8003968:	2201      	movs	r2, #1
 800396a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800396c:	4822      	ldr	r0, [pc, #136]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800396e:	f001 ff7f 	bl	8005870 <HAL_ADC_Init>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 8003978:	f000 fb3e 	bl	8003ff8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800397c:	2301      	movs	r3, #1
 800397e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003980:	2301      	movs	r3, #1
 8003982:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8003984:	2301      	movs	r3, #1
 8003986:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003988:	463b      	mov	r3, r7
 800398a:	4619      	mov	r1, r3
 800398c:	481a      	ldr	r0, [pc, #104]	; (80039f8 <MX_ADC1_Init+0xf4>)
 800398e:	f002 f94d 	bl	8005c2c <HAL_ADC_ConfigChannel>
 8003992:	4603      	mov	r3, r0
 8003994:	2b00      	cmp	r3, #0
 8003996:	d001      	beq.n	800399c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003998:	f000 fb2e 	bl	8003ff8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800399c:	2302      	movs	r3, #2
 800399e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80039a0:	2302      	movs	r3, #2
 80039a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039a4:	463b      	mov	r3, r7
 80039a6:	4619      	mov	r1, r3
 80039a8:	4813      	ldr	r0, [pc, #76]	; (80039f8 <MX_ADC1_Init+0xf4>)
 80039aa:	f002 f93f 	bl	8005c2c <HAL_ADC_ConfigChannel>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80039b4:	f000 fb20 	bl	8003ff8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80039b8:	2303      	movs	r3, #3
 80039ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80039bc:	2303      	movs	r3, #3
 80039be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039c0:	463b      	mov	r3, r7
 80039c2:	4619      	mov	r1, r3
 80039c4:	480c      	ldr	r0, [pc, #48]	; (80039f8 <MX_ADC1_Init+0xf4>)
 80039c6:	f002 f931 	bl	8005c2c <HAL_ADC_ConfigChannel>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80039d0:	f000 fb12 	bl	8003ff8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80039d4:	2304      	movs	r3, #4
 80039d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80039d8:	2304      	movs	r3, #4
 80039da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80039dc:	463b      	mov	r3, r7
 80039de:	4619      	mov	r1, r3
 80039e0:	4805      	ldr	r0, [pc, #20]	; (80039f8 <MX_ADC1_Init+0xf4>)
 80039e2:	f002 f923 	bl	8005c2c <HAL_ADC_ConfigChannel>
 80039e6:	4603      	mov	r3, r0
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d001      	beq.n	80039f0 <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 80039ec:	f000 fb04 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80039f0:	bf00      	nop
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000298 	.word	0x20000298
 80039fc:	40012000 	.word	0x40012000
 8003a00:	0f000001 	.word	0x0f000001

08003a04 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a08:	4b17      	ldr	r3, [pc, #92]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a0a:	4a18      	ldr	r2, [pc, #96]	; (8003a6c <MX_CAN1_Init+0x68>)
 8003a0c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8003a0e:	4b16      	ldr	r3, [pc, #88]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a10:	221b      	movs	r2, #27
 8003a12:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003a14:	4b14      	ldr	r3, [pc, #80]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a1a:	4b13      	ldr	r3, [pc, #76]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8003a20:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003a26:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_CAN1_Init+0x64>)
 8003a54:	f002 fb3a 	bl	80060cc <HAL_CAN_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8003a5e:	f000 facb 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	200002e0 	.word	0x200002e0
 8003a6c:	40006400 	.word	0x40006400

08003a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08e      	sub	sp, #56	; 0x38
 8003a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]
 8003a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a84:	f107 031c 	add.w	r3, r7, #28
 8003a88:	2200      	movs	r2, #0
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	605a      	str	r2, [r3, #4]
 8003a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a90:	463b      	mov	r3, r7
 8003a92:	2200      	movs	r2, #0
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	605a      	str	r2, [r3, #4]
 8003a98:	609a      	str	r2, [r3, #8]
 8003a9a:	60da      	str	r2, [r3, #12]
 8003a9c:	611a      	str	r2, [r3, #16]
 8003a9e:	615a      	str	r2, [r3, #20]
 8003aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003aa2:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 8003aaa:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003aac:	221a      	movs	r2, #26
 8003aae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ab0:	4b29      	ldr	r3, [pc, #164]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 8003ab6:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003ab8:	2268      	movs	r2, #104	; 0x68
 8003aba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003abc:	4b26      	ldr	r3, [pc, #152]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ac2:	4b25      	ldr	r3, [pc, #148]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003ac8:	4823      	ldr	r0, [pc, #140]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003aca:	f004 fdf5 	bl	80086b8 <HAL_TIM_Base_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003ad4:	f000 fa90 	bl	8003ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ad8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003ade:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ae2:	4619      	mov	r1, r3
 8003ae4:	481c      	ldr	r0, [pc, #112]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003ae6:	f005 fac3 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d001      	beq.n	8003af4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8003af0:	f000 fa82 	bl	8003ff8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003af4:	4818      	ldr	r0, [pc, #96]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003af6:	f004 fede 	bl	80088b6 <HAL_TIM_PWM_Init>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d001      	beq.n	8003b04 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8003b00:	f000 fa7a 	bl	8003ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b04:	2300      	movs	r3, #0
 8003b06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003b0c:	f107 031c 	add.w	r3, r7, #28
 8003b10:	4619      	mov	r1, r3
 8003b12:	4811      	ldr	r0, [pc, #68]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003b14:	f005 ff5c 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d001      	beq.n	8003b22 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8003b1e:	f000 fa6b 	bl	8003ff8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003b22:	2360      	movs	r3, #96	; 0x60
 8003b24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 8003b26:	2333      	movs	r3, #51	; 0x33
 8003b28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003b32:	463b      	mov	r3, r7
 8003b34:	2200      	movs	r2, #0
 8003b36:	4619      	mov	r1, r3
 8003b38:	4807      	ldr	r0, [pc, #28]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003b3a:	f005 f985 	bl	8008e48 <HAL_TIM_PWM_ConfigChannel>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d001      	beq.n	8003b48 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003b44:	f000 fa58 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003b48:	4803      	ldr	r0, [pc, #12]	; (8003b58 <MX_TIM2_Init+0xe8>)
 8003b4a:	f001 fa75 	bl	8005038 <HAL_TIM_MspPostInit>

}
 8003b4e:	bf00      	nop
 8003b50:	3738      	adds	r7, #56	; 0x38
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000308 	.word	0x20000308

08003b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003b62:	f107 0310 	add.w	r3, r7, #16
 8003b66:	2200      	movs	r2, #0
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	605a      	str	r2, [r3, #4]
 8003b6c:	609a      	str	r2, [r3, #8]
 8003b6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003b70:	1d3b      	adds	r3, r7, #4
 8003b72:	2200      	movs	r2, #0
 8003b74:	601a      	str	r2, [r3, #0]
 8003b76:	605a      	str	r2, [r3, #4]
 8003b78:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003b7a:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <MX_TIM5_Init+0x98>)
 8003b7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b82:	2208      	movs	r2, #8
 8003b84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b86:	4b1a      	ldr	r3, [pc, #104]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60-1;
 8003b8c:	4b18      	ldr	r3, [pc, #96]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b8e:	223b      	movs	r2, #59	; 0x3b
 8003b90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b92:	4b17      	ldr	r3, [pc, #92]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b98:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003b9e:	4814      	ldr	r0, [pc, #80]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003ba0:	f004 fd8a 	bl	80086b8 <HAL_TIM_Base_Init>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8003baa:	f000 fa25 	bl	8003ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003bae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003bb2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003bb4:	f107 0310 	add.w	r3, r7, #16
 8003bb8:	4619      	mov	r1, r3
 8003bba:	480d      	ldr	r0, [pc, #52]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003bbc:	f005 fa58 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d001      	beq.n	8003bca <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8003bc6:	f000 fa17 	bl	8003ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003bd2:	1d3b      	adds	r3, r7, #4
 8003bd4:	4619      	mov	r1, r3
 8003bd6:	4806      	ldr	r0, [pc, #24]	; (8003bf0 <MX_TIM5_Init+0x94>)
 8003bd8:	f005 fefa 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d001      	beq.n	8003be6 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8003be2:	f000 fa09 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003be6:	bf00      	nop
 8003be8:	3720      	adds	r7, #32
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}
 8003bee:	bf00      	nop
 8003bf0:	20000354 	.word	0x20000354
 8003bf4:	40000c00 	.word	0x40000c00

08003bf8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b084      	sub	sp, #16
 8003bfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003bfe:	1d3b      	adds	r3, r7, #4
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]
 8003c04:	605a      	str	r2, [r3, #4]
 8003c06:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003c08:	4b14      	ldr	r3, [pc, #80]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c0a:	4a15      	ldr	r2, [pc, #84]	; (8003c60 <MX_TIM6_Init+0x68>)
 8003c0c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8003c0e:	4b13      	ldr	r3, [pc, #76]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c10:	226b      	movs	r2, #107	; 0x6b
 8003c12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c14:	4b11      	ldr	r3, [pc, #68]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c16:	2200      	movs	r2, #0
 8003c18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c1c:	f242 720f 	movw	r2, #9999	; 0x270f
 8003c20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c22:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003c28:	480c      	ldr	r0, [pc, #48]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c2a:	f004 fd45 	bl	80086b8 <HAL_TIM_Base_Init>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d001      	beq.n	8003c38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003c34:	f000 f9e0 	bl	8003ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003c40:	1d3b      	adds	r3, r7, #4
 8003c42:	4619      	mov	r1, r3
 8003c44:	4805      	ldr	r0, [pc, #20]	; (8003c5c <MX_TIM6_Init+0x64>)
 8003c46:	f005 fec3 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d001      	beq.n	8003c54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003c50:	f000 f9d2 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003c54:	bf00      	nop
 8003c56:	3710      	adds	r7, #16
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bd80      	pop	{r7, pc}
 8003c5c:	200003a0 	.word	0x200003a0
 8003c60:	40001000 	.word	0x40001000

08003c64 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b084      	sub	sp, #16
 8003c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c6a:	1d3b      	adds	r3, r7, #4
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	605a      	str	r2, [r3, #4]
 8003c72:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003c74:	4b14      	ldr	r3, [pc, #80]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c76:	4a15      	ldr	r2, [pc, #84]	; (8003ccc <MX_TIM7_Init+0x68>)
 8003c78:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8003c7a:	4b13      	ldr	r3, [pc, #76]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c7c:	226b      	movs	r2, #107	; 0x6b
 8003c7e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c80:	4b11      	ldr	r3, [pc, #68]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c88:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003c8c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c8e:	4b0e      	ldr	r3, [pc, #56]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003c94:	480c      	ldr	r0, [pc, #48]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003c96:	f004 fd0f 	bl	80086b8 <HAL_TIM_Base_Init>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003ca0:	f000 f9aa 	bl	8003ff8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003cac:	1d3b      	adds	r3, r7, #4
 8003cae:	4619      	mov	r1, r3
 8003cb0:	4805      	ldr	r0, [pc, #20]	; (8003cc8 <MX_TIM7_Init+0x64>)
 8003cb2:	f005 fe8d 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d001      	beq.n	8003cc0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003cbc:	f000 f99c 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003cc0:	bf00      	nop
 8003cc2:	3710      	adds	r7, #16
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	200003ec 	.word	0x200003ec
 8003ccc:	40001400 	.word	0x40001400

08003cd0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003cd6:	463b      	mov	r3, r7
 8003cd8:	2200      	movs	r2, #0
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	605a      	str	r2, [r3, #4]
 8003cde:	609a      	str	r2, [r3, #8]
 8003ce0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8003ce2:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003ce4:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <MX_TIM9_Init+0x70>)
 8003ce6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 8003ce8:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003cea:	22d7      	movs	r2, #215	; 0xd7
 8003cec:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cee:	4b13      	ldr	r3, [pc, #76]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 8003cf4:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003cf6:	f240 2231 	movw	r2, #561	; 0x231
 8003cfa:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003cfc:	4b0f      	ldr	r3, [pc, #60]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003d08:	480c      	ldr	r0, [pc, #48]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003d0a:	f004 fcd5 	bl	80086b8 <HAL_TIM_Base_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d001      	beq.n	8003d18 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003d14:	f000 f970 	bl	8003ff8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003d18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d1c:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8003d1e:	463b      	mov	r3, r7
 8003d20:	4619      	mov	r1, r3
 8003d22:	4806      	ldr	r0, [pc, #24]	; (8003d3c <MX_TIM9_Init+0x6c>)
 8003d24:	f005 f9a4 	bl	8009070 <HAL_TIM_ConfigClockSource>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8003d2e:	f000 f963 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8003d32:	bf00      	nop
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	20000438 	.word	0x20000438
 8003d40:	40014000 	.word	0x40014000

08003d44 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003d48:	4b0d      	ldr	r3, [pc, #52]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d4a:	4a0e      	ldr	r2, [pc, #56]	; (8003d84 <MX_TIM14_Init+0x40>)
 8003d4c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 8003d4e:	4b0c      	ldr	r3, [pc, #48]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d50:	226b      	movs	r2, #107	; 0x6b
 8003d52:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8003d5a:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d5c:	2203      	movs	r2, #3
 8003d5e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d60:	4b07      	ldr	r3, [pc, #28]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d66:	4b06      	ldr	r3, [pc, #24]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003d6c:	4804      	ldr	r0, [pc, #16]	; (8003d80 <MX_TIM14_Init+0x3c>)
 8003d6e:	f004 fca3 	bl	80086b8 <HAL_TIM_Base_Init>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003d78:	f000 f93e 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003d7c:	bf00      	nop
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000484 	.word	0x20000484
 8003d84:	40002000 	.word	0x40002000

08003d88 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d8c:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003d8e:	4a15      	ldr	r2, [pc, #84]	; (8003de4 <MX_USART1_UART_Init+0x5c>)
 8003d90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003d94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003da6:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003dac:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003dae:	220c      	movs	r2, #12
 8003db0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003db2:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003db8:	4b09      	ldr	r3, [pc, #36]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003dbe:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003dc4:	4b06      	ldr	r3, [pc, #24]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003dca:	4805      	ldr	r0, [pc, #20]	; (8003de0 <MX_USART1_UART_Init+0x58>)
 8003dcc:	f005 feac 	bl	8009b28 <HAL_UART_Init>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d001      	beq.n	8003dda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003dd6:	f000 f90f 	bl	8003ff8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dda:	bf00      	nop
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	200004d0 	.word	0x200004d0
 8003de4:	40011000 	.word	0x40011000

08003de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dee:	f107 031c 	add.w	r3, r7, #28
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
 8003df6:	605a      	str	r2, [r3, #4]
 8003df8:	609a      	str	r2, [r3, #8]
 8003dfa:	60da      	str	r2, [r3, #12]
 8003dfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dfe:	4b78      	ldr	r3, [pc, #480]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e02:	4a77      	ldr	r2, [pc, #476]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e04:	f043 0320 	orr.w	r3, r3, #32
 8003e08:	6313      	str	r3, [r2, #48]	; 0x30
 8003e0a:	4b75      	ldr	r3, [pc, #468]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0e:	f003 0320 	and.w	r3, r3, #32
 8003e12:	61bb      	str	r3, [r7, #24]
 8003e14:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e16:	4b72      	ldr	r3, [pc, #456]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e1a:	4a71      	ldr	r2, [pc, #452]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e20:	6313      	str	r3, [r2, #48]	; 0x30
 8003e22:	4b6f      	ldr	r3, [pc, #444]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e2e:	4b6c      	ldr	r3, [pc, #432]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a6b      	ldr	r2, [pc, #428]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e34:	f043 0301 	orr.w	r3, r3, #1
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b69      	ldr	r3, [pc, #420]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0301 	and.w	r3, r3, #1
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	4b66      	ldr	r3, [pc, #408]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4a:	4a65      	ldr	r2, [pc, #404]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e4c:	f043 0302 	orr.w	r3, r3, #2
 8003e50:	6313      	str	r3, [r2, #48]	; 0x30
 8003e52:	4b63      	ldr	r3, [pc, #396]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	60fb      	str	r3, [r7, #12]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e5e:	4b60      	ldr	r3, [pc, #384]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	4a5f      	ldr	r2, [pc, #380]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e64:	f043 0308 	orr.w	r3, r3, #8
 8003e68:	6313      	str	r3, [r2, #48]	; 0x30
 8003e6a:	4b5d      	ldr	r3, [pc, #372]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	60bb      	str	r3, [r7, #8]
 8003e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e76:	4b5a      	ldr	r3, [pc, #360]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e7a:	4a59      	ldr	r2, [pc, #356]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e7c:	f043 0304 	orr.w	r3, r3, #4
 8003e80:	6313      	str	r3, [r2, #48]	; 0x30
 8003e82:	4b57      	ldr	r3, [pc, #348]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e86:	f003 0304 	and.w	r3, r3, #4
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e8e:	4b54      	ldr	r3, [pc, #336]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	4a53      	ldr	r2, [pc, #332]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e94:	f043 0310 	orr.w	r3, r3, #16
 8003e98:	6313      	str	r3, [r2, #48]	; 0x30
 8003e9a:	4b51      	ldr	r3, [pc, #324]	; (8003fe0 <MX_GPIO_Init+0x1f8>)
 8003e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	603b      	str	r3, [r7, #0]
 8003ea4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_Trigger6_GPIO_Port, USS_Trigger6_Pin, GPIO_PIN_RESET);
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	2180      	movs	r1, #128	; 0x80
 8003eaa:	484e      	ldr	r0, [pc, #312]	; (8003fe4 <MX_GPIO_Init+0x1fc>)
 8003eac:	f003 faae 	bl	800740c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 8003eb6:	484c      	ldr	r0, [pc, #304]	; (8003fe8 <MX_GPIO_Init+0x200>)
 8003eb8:	f003 faa8 	bl	800740c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f247 1120 	movw	r1, #28960	; 0x7120
 8003ec2:	484a      	ldr	r0, [pc, #296]	; (8003fec <MX_GPIO_Init+0x204>)
 8003ec4:	f003 faa2 	bl	800740c <HAL_GPIO_WritePin>
                          |USS_Trigger1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin, GPIO_PIN_RESET);
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 8003ece:	4848      	ldr	r0, [pc, #288]	; (8003ff0 <MX_GPIO_Init+0x208>)
 8003ed0:	f003 fa9c 	bl	800740c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USS_Trigger6_Pin */
  GPIO_InitStruct.Pin = USS_Trigger6_Pin;
 8003ed4:	2380      	movs	r3, #128	; 0x80
 8003ed6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USS_Trigger6_GPIO_Port, &GPIO_InitStruct);
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	4619      	mov	r1, r3
 8003eea:	483e      	ldr	r0, [pc, #248]	; (8003fe4 <MX_GPIO_Init+0x1fc>)
 8003eec:	f003 f8ca 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data6_Pin */
  GPIO_InitStruct.Pin = USS_Data6_Pin;
 8003ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ef4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ef6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003efa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003efc:	2301      	movs	r3, #1
 8003efe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data6_GPIO_Port, &GPIO_InitStruct);
 8003f00:	f107 031c 	add.w	r3, r7, #28
 8003f04:	4619      	mov	r1, r3
 8003f06:	4838      	ldr	r0, [pc, #224]	; (8003fe8 <MX_GPIO_Init+0x200>)
 8003f08:	f003 f8bc 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8003f0c:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003f10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f12:	2301      	movs	r3, #1
 8003f14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f16:	2300      	movs	r3, #0
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f1e:	f107 031c 	add.w	r3, r7, #28
 8003f22:	4619      	mov	r1, r3
 8003f24:	4830      	ldr	r0, [pc, #192]	; (8003fe8 <MX_GPIO_Init+0x200>)
 8003f26:	f003 f8ad 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger2_Pin Rsig_Pin Gsig_Pin Bsig_Pin
                           USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8003f2a:	f247 1320 	movw	r3, #28960	; 0x7120
 8003f2e:	61fb      	str	r3, [r7, #28]
                          |USS_Trigger1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f30:	2301      	movs	r3, #1
 8003f32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f3c:	f107 031c 	add.w	r3, r7, #28
 8003f40:	4619      	mov	r1, r3
 8003f42:	482a      	ldr	r0, [pc, #168]	; (8003fec <MX_GPIO_Init+0x204>)
 8003f44:	f003 f89e 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data2_Pin USS_Data4_Pin USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data2_Pin|USS_Data4_Pin|USS_Data1_Pin;
 8003f48:	f44f 7311 	mov.w	r3, #580	; 0x244
 8003f4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f4e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f54:	2301      	movs	r3, #1
 8003f56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f58:	f107 031c 	add.w	r3, r7, #28
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4823      	ldr	r0, [pc, #140]	; (8003fec <MX_GPIO_Init+0x204>)
 8003f60:	f003 f890 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger5_Pin USS_Trigger3_Pin USS_Trigger4_Pin */
  GPIO_InitStruct.Pin = USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin;
 8003f64:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8003f68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f72:	2300      	movs	r3, #0
 8003f74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f76:	f107 031c 	add.w	r3, r7, #28
 8003f7a:	4619      	mov	r1, r3
 8003f7c:	481c      	ldr	r0, [pc, #112]	; (8003ff0 <MX_GPIO_Init+0x208>)
 8003f7e:	f003 f881 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data5_Pin USS_Data3_Pin */
  GPIO_InitStruct.Pin = USS_Data5_Pin|USS_Data3_Pin;
 8003f82:	f44f 6308 	mov.w	r3, #2176	; 0x880
 8003f86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f88:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f92:	f107 031c 	add.w	r3, r7, #28
 8003f96:	4619      	mov	r1, r3
 8003f98:	4815      	ldr	r0, [pc, #84]	; (8003ff0 <MX_GPIO_Init+0x208>)
 8003f9a:	f003 f873 	bl	8007084 <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8003fa2:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003fa6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 8003fac:	f107 031c 	add.w	r3, r7, #28
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	4810      	ldr	r0, [pc, #64]	; (8003ff4 <MX_GPIO_Init+0x20c>)
 8003fb4:	f003 f866 	bl	8007084 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003fb8:	2200      	movs	r2, #0
 8003fba:	2100      	movs	r1, #0
 8003fbc:	2017      	movs	r0, #23
 8003fbe:	f003 f81c 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003fc2:	2017      	movs	r0, #23
 8003fc4:	f003 f835 	bl	8007032 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2100      	movs	r1, #0
 8003fcc:	2028      	movs	r0, #40	; 0x28
 8003fce:	f003 f814 	bl	8006ffa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003fd2:	2028      	movs	r0, #40	; 0x28
 8003fd4:	f003 f82d 	bl	8007032 <HAL_NVIC_EnableIRQ>

}
 8003fd8:	bf00      	nop
 8003fda:	3730      	adds	r7, #48	; 0x30
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	40023800 	.word	0x40023800
 8003fe4:	40021400 	.word	0x40021400
 8003fe8:	40020400 	.word	0x40020400
 8003fec:	40020c00 	.word	0x40020c00
 8003ff0:	40020800 	.word	0x40020800
 8003ff4:	40021000 	.word	0x40021000

08003ff8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ffc:	b672      	cpsid	i
}
 8003ffe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004000:	e7fe      	b.n	8004000 <Error_Handler+0x8>

08004002 <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8004002:	b580      	push	{r7, lr}
 8004004:	b084      	sub	sp, #16
 8004006:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004008:	2300      	movs	r3, #0
 800400a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	60fa      	str	r2, [r7, #12]
 8004012:	3310      	adds	r3, #16
 8004014:	443b      	add	r3, r7
 8004016:	222f      	movs	r2, #47	; 0x2f
 8004018:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	1c5a      	adds	r2, r3, #1
 8004020:	60fa      	str	r2, [r7, #12]
 8004022:	3310      	adds	r3, #16
 8004024:	443b      	add	r3, r7
 8004026:	2260      	movs	r2, #96	; 0x60
 8004028:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	1c5a      	adds	r2, r3, #1
 8004030:	60fa      	str	r2, [r7, #12]
 8004032:	3310      	adds	r3, #16
 8004034:	443b      	add	r3, r7
 8004036:	2260      	movs	r2, #96	; 0x60
 8004038:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	60fa      	str	r2, [r7, #12]
 8004042:	3310      	adds	r3, #16
 8004044:	443b      	add	r3, r7
 8004046:	2200      	movs	r2, #0
 8004048:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	60fa      	str	r2, [r7, #12]
 8004052:	3310      	adds	r3, #16
 8004054:	443b      	add	r3, r7
 8004056:	2203      	movs	r2, #3
 8004058:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	60fa      	str	r2, [r7, #12]
 8004062:	3310      	adds	r3, #16
 8004064:	443b      	add	r3, r7
 8004066:	2200      	movs	r2, #0
 8004068:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	60fa      	str	r2, [r7, #12]
 8004072:	3310      	adds	r3, #16
 8004074:	443b      	add	r3, r7
 8004076:	2200      	movs	r2, #0
 8004078:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800407c:	1d3a      	adds	r2, r7, #4
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	2200      	movs	r2, #0
 8004084:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004086:	1d39      	adds	r1, r7, #4
 8004088:	2300      	movs	r3, #0
 800408a:	2208      	movs	r2, #8
 800408c:	f240 6001 	movw	r0, #1537	; 0x601
 8004090:	f7ff fa06 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8004094:	2064      	movs	r0, #100	; 0x64
 8004096:	f001 fbc7 	bl	8005828 <HAL_Delay>
}
 800409a:	bf00      	nop
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <synchronousMode>:

void synchronousMode()
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b084      	sub	sp, #16
 80040a6:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	60fa      	str	r2, [r7, #12]
 80040b2:	3310      	adds	r3, #16
 80040b4:	443b      	add	r3, r7
 80040b6:	222b      	movs	r2, #43	; 0x2b
 80040b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	60fa      	str	r2, [r7, #12]
 80040c2:	3310      	adds	r3, #16
 80040c4:	443b      	add	r3, r7
 80040c6:	220f      	movs	r2, #15
 80040c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	1c5a      	adds	r2, r3, #1
 80040d0:	60fa      	str	r2, [r7, #12]
 80040d2:	3310      	adds	r3, #16
 80040d4:	443b      	add	r3, r7
 80040d6:	2220      	movs	r2, #32
 80040d8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	60fa      	str	r2, [r7, #12]
 80040e2:	3310      	adds	r3, #16
 80040e4:	443b      	add	r3, r7
 80040e6:	2200      	movs	r2, #0
 80040e8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	60fa      	str	r2, [r7, #12]
 80040f2:	3310      	adds	r3, #16
 80040f4:	443b      	add	r3, r7
 80040f6:	2201      	movs	r2, #1
 80040f8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1c5a      	adds	r2, r3, #1
 8004100:	60fa      	str	r2, [r7, #12]
 8004102:	3310      	adds	r3, #16
 8004104:	443b      	add	r3, r7
 8004106:	2200      	movs	r2, #0
 8004108:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	1c5a      	adds	r2, r3, #1
 8004110:	60fa      	str	r2, [r7, #12]
 8004112:	3310      	adds	r3, #16
 8004114:	443b      	add	r3, r7
 8004116:	2200      	movs	r2, #0
 8004118:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800411c:	1d3a      	adds	r2, r7, #4
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	4413      	add	r3, r2
 8004122:	2200      	movs	r2, #0
 8004124:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004126:	1d39      	adds	r1, r7, #4
 8004128:	2300      	movs	r3, #0
 800412a:	2208      	movs	r2, #8
 800412c:	f240 6001 	movw	r0, #1537	; 0x601
 8004130:	f7ff f9b6 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8004134:	2064      	movs	r0, #100	; 0x64
 8004136:	f001 fb77 	bl	8005828 <HAL_Delay>
}
 800413a:	bf00      	nop
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}

08004142 <settingEnc>:

void settingEnc(int16_t enc)
{
 8004142:	b580      	push	{r7, lr}
 8004144:	b086      	sub	sp, #24
 8004146:	af00      	add	r7, sp, #0
 8004148:	4603      	mov	r3, r0
 800414a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
 8004150:	e055      	b.n	80041fe <settingEnc+0xbc>
    {
        int index = 0;
 8004152:	2300      	movs	r3, #0
 8004154:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	1c5a      	adds	r2, r3, #1
 800415a:	613a      	str	r2, [r7, #16]
 800415c:	3318      	adds	r3, #24
 800415e:	443b      	add	r3, r7
 8004160:	222b      	movs	r2, #43	; 0x2b
 8004162:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1c5a      	adds	r2, r3, #1
 800416a:	613a      	str	r2, [r7, #16]
 800416c:	3318      	adds	r3, #24
 800416e:	443b      	add	r3, r7
 8004170:	220e      	movs	r2, #14
 8004172:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	1c5a      	adds	r2, r3, #1
 800417a:	613a      	str	r2, [r7, #16]
 800417c:	3318      	adds	r3, #24
 800417e:	443b      	add	r3, r7
 8004180:	2220      	movs	r2, #32
 8004182:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1c59      	adds	r1, r3, #1
 800418e:	6139      	str	r1, [r7, #16]
 8004190:	3201      	adds	r2, #1
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	3318      	adds	r3, #24
 8004196:	443b      	add	r3, r7
 8004198:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	1c5a      	adds	r2, r3, #1
 80041a0:	613a      	str	r2, [r7, #16]
 80041a2:	88fa      	ldrh	r2, [r7, #6]
 80041a4:	b2d2      	uxtb	r2, r2
 80041a6:	3318      	adds	r3, #24
 80041a8:	443b      	add	r3, r7
 80041aa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 80041ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041b2:	121b      	asrs	r3, r3, #8
 80041b4:	b219      	sxth	r1, r3
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1c5a      	adds	r2, r3, #1
 80041ba:	613a      	str	r2, [r7, #16]
 80041bc:	b2ca      	uxtb	r2, r1
 80041be:	3318      	adds	r3, #24
 80041c0:	443b      	add	r3, r7
 80041c2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1c5a      	adds	r2, r3, #1
 80041ca:	613a      	str	r2, [r7, #16]
 80041cc:	3318      	adds	r3, #24
 80041ce:	443b      	add	r3, r7
 80041d0:	2200      	movs	r2, #0
 80041d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80041d6:	f107 0208 	add.w	r2, r7, #8
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	4413      	add	r3, r2
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80041e2:	f107 0108 	add.w	r1, r7, #8
 80041e6:	2300      	movs	r3, #0
 80041e8:	2208      	movs	r2, #8
 80041ea:	f240 6001 	movw	r0, #1537	; 0x601
 80041ee:	f7ff f957 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80041f2:	2064      	movs	r0, #100	; 0x64
 80041f4:	f001 fb18 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	3301      	adds	r3, #1
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	2b01      	cmp	r3, #1
 8004202:	dda6      	ble.n	8004152 <settingEnc+0x10>
    }
}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <settingPole>:

void settingPole(int16_t pole)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b086      	sub	sp, #24
 8004212:	af00      	add	r7, sp, #0
 8004214:	4603      	mov	r3, r0
 8004216:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004218:	2300      	movs	r3, #0
 800421a:	617b      	str	r3, [r7, #20]
 800421c:	e055      	b.n	80042ca <settingPole+0xbc>
    {
        int index = 0;
 800421e:	2300      	movs	r3, #0
 8004220:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	613a      	str	r2, [r7, #16]
 8004228:	3318      	adds	r3, #24
 800422a:	443b      	add	r3, r7
 800422c:	222b      	movs	r2, #43	; 0x2b
 800422e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1c5a      	adds	r2, r3, #1
 8004236:	613a      	str	r2, [r7, #16]
 8004238:	3318      	adds	r3, #24
 800423a:	443b      	add	r3, r7
 800423c:	220c      	movs	r2, #12
 800423e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	613a      	str	r2, [r7, #16]
 8004248:	3318      	adds	r3, #24
 800424a:	443b      	add	r3, r7
 800424c:	2220      	movs	r2, #32
 800424e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	b2da      	uxtb	r2, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1c59      	adds	r1, r3, #1
 800425a:	6139      	str	r1, [r7, #16]
 800425c:	3201      	adds	r2, #1
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	3318      	adds	r3, #24
 8004262:	443b      	add	r3, r7
 8004264:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	1c5a      	adds	r2, r3, #1
 800426c:	613a      	str	r2, [r7, #16]
 800426e:	88fa      	ldrh	r2, [r7, #6]
 8004270:	b2d2      	uxtb	r2, r2
 8004272:	3318      	adds	r3, #24
 8004274:	443b      	add	r3, r7
 8004276:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 800427a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800427e:	121b      	asrs	r3, r3, #8
 8004280:	b219      	sxth	r1, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1c5a      	adds	r2, r3, #1
 8004286:	613a      	str	r2, [r7, #16]
 8004288:	b2ca      	uxtb	r2, r1
 800428a:	3318      	adds	r3, #24
 800428c:	443b      	add	r3, r7
 800428e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	613a      	str	r2, [r7, #16]
 8004298:	3318      	adds	r3, #24
 800429a:	443b      	add	r3, r7
 800429c:	2200      	movs	r2, #0
 800429e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80042a2:	f107 0208 	add.w	r2, r7, #8
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	4413      	add	r3, r2
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80042ae:	f107 0108 	add.w	r1, r7, #8
 80042b2:	2300      	movs	r3, #0
 80042b4:	2208      	movs	r2, #8
 80042b6:	f240 6001 	movw	r0, #1537	; 0x601
 80042ba:	f7ff f8f1 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80042be:	2064      	movs	r0, #100	; 0x64
 80042c0:	f001 fab2 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	3301      	adds	r3, #1
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	dda6      	ble.n	800421e <settingPole+0x10>
    }
}
 80042d0:	bf00      	nop
 80042d2:	bf00      	nop
 80042d4:	3718      	adds	r7, #24
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <settingBreak>:

void settingBreak(uint8_t enable)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	1c5a      	adds	r2, r3, #1
 80042ec:	617a      	str	r2, [r7, #20]
 80042ee:	3318      	adds	r3, #24
 80042f0:	443b      	add	r3, r7
 80042f2:	222b      	movs	r2, #43	; 0x2b
 80042f4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	617a      	str	r2, [r7, #20]
 80042fe:	3318      	adds	r3, #24
 8004300:	443b      	add	r3, r7
 8004302:	2207      	movs	r2, #7
 8004304:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	617a      	str	r2, [r7, #20]
 800430e:	3318      	adds	r3, #24
 8004310:	443b      	add	r3, r7
 8004312:	2220      	movs	r2, #32
 8004314:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	617a      	str	r2, [r7, #20]
 800431e:	3318      	adds	r3, #24
 8004320:	443b      	add	r3, r7
 8004322:	2200      	movs	r2, #0
 8004324:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	617a      	str	r2, [r7, #20]
 800432e:	3318      	adds	r3, #24
 8004330:	443b      	add	r3, r7
 8004332:	79fa      	ldrb	r2, [r7, #7]
 8004334:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	617a      	str	r2, [r7, #20]
 800433e:	3318      	adds	r3, #24
 8004340:	443b      	add	r3, r7
 8004342:	2200      	movs	r2, #0
 8004344:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	617a      	str	r2, [r7, #20]
 800434e:	3318      	adds	r3, #24
 8004350:	443b      	add	r3, r7
 8004352:	2200      	movs	r2, #0
 8004354:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004358:	f107 020c 	add.w	r2, r7, #12
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	4413      	add	r3, r2
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004364:	f107 010c 	add.w	r1, r7, #12
 8004368:	2300      	movs	r3, #0
 800436a:	2208      	movs	r2, #8
 800436c:	f240 6001 	movw	r0, #1537	; 0x601
 8004370:	f7ff f896 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8004374:	2064      	movs	r0, #100	; 0x64
 8004376:	f001 fa57 	bl	8005828 <HAL_Delay>
}
 800437a:	bf00      	nop
 800437c:	3718      	adds	r7, #24
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8004382:	b580      	push	{r7, lr}
 8004384:	b086      	sub	sp, #24
 8004386:	af00      	add	r7, sp, #0
 8004388:	4603      	mov	r3, r0
 800438a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	1c5a      	adds	r2, r3, #1
 8004394:	617a      	str	r2, [r7, #20]
 8004396:	3318      	adds	r3, #24
 8004398:	443b      	add	r3, r7
 800439a:	222b      	movs	r2, #43	; 0x2b
 800439c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	1c5a      	adds	r2, r3, #1
 80043a4:	617a      	str	r2, [r7, #20]
 80043a6:	3318      	adds	r3, #24
 80043a8:	443b      	add	r3, r7
 80043aa:	2208      	movs	r2, #8
 80043ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	1c5a      	adds	r2, r3, #1
 80043b4:	617a      	str	r2, [r7, #20]
 80043b6:	3318      	adds	r3, #24
 80043b8:	443b      	add	r3, r7
 80043ba:	2220      	movs	r2, #32
 80043bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	617a      	str	r2, [r7, #20]
 80043c6:	3318      	adds	r3, #24
 80043c8:	443b      	add	r3, r7
 80043ca:	2200      	movs	r2, #0
 80043cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	1c5a      	adds	r2, r3, #1
 80043d4:	617a      	str	r2, [r7, #20]
 80043d6:	88fa      	ldrh	r2, [r7, #6]
 80043d8:	b2d2      	uxtb	r2, r2
 80043da:	3318      	adds	r3, #24
 80043dc:	443b      	add	r3, r7
 80043de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 80043e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043e6:	121b      	asrs	r3, r3, #8
 80043e8:	b219      	sxth	r1, r3
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	1c5a      	adds	r2, r3, #1
 80043ee:	617a      	str	r2, [r7, #20]
 80043f0:	b2ca      	uxtb	r2, r1
 80043f2:	3318      	adds	r3, #24
 80043f4:	443b      	add	r3, r7
 80043f6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	1c5a      	adds	r2, r3, #1
 80043fe:	617a      	str	r2, [r7, #20]
 8004400:	3318      	adds	r3, #24
 8004402:	443b      	add	r3, r7
 8004404:	2200      	movs	r2, #0
 8004406:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800440a:	f107 020c 	add.w	r2, r7, #12
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	4413      	add	r3, r2
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004416:	f107 010c 	add.w	r1, r7, #12
 800441a:	2300      	movs	r3, #0
 800441c:	2208      	movs	r2, #8
 800441e:	f240 6001 	movw	r0, #1537	; 0x601
 8004422:	f7ff f83d 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8004426:	2064      	movs	r0, #100	; 0x64
 8004428:	f001 f9fe 	bl	8005828 <HAL_Delay>
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 800443e:	2300      	movs	r3, #0
 8004440:	617b      	str	r3, [r7, #20]
 8004442:	e05e      	b.n	8004502 <settingRatedCurrent+0xce>
    {
        int index = 0;
 8004444:	2300      	movs	r3, #0
 8004446:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1c5a      	adds	r2, r3, #1
 800444c:	613a      	str	r2, [r7, #16]
 800444e:	3318      	adds	r3, #24
 8004450:	443b      	add	r3, r7
 8004452:	222b      	movs	r2, #43	; 0x2b
 8004454:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1c5a      	adds	r2, r3, #1
 800445c:	613a      	str	r2, [r7, #16]
 800445e:	3318      	adds	r3, #24
 8004460:	443b      	add	r3, r7
 8004462:	2214      	movs	r2, #20
 8004464:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	1c5a      	adds	r2, r3, #1
 800446c:	613a      	str	r2, [r7, #16]
 800446e:	3318      	adds	r3, #24
 8004470:	443b      	add	r3, r7
 8004472:	2220      	movs	r2, #32
 8004474:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	b2da      	uxtb	r2, r3
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	1c59      	adds	r1, r3, #1
 8004480:	6139      	str	r1, [r7, #16]
 8004482:	3201      	adds	r2, #1
 8004484:	b2d2      	uxtb	r2, r2
 8004486:	3318      	adds	r3, #24
 8004488:	443b      	add	r3, r7
 800448a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 800448e:	f04f 0200 	mov.w	r2, #0
 8004492:	4b20      	ldr	r3, [pc, #128]	; (8004514 <settingRatedCurrent+0xe0>)
 8004494:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004498:	f7fc f8c6 	bl	8000628 <__aeabi_dmul>
 800449c:	4602      	mov	r2, r0
 800449e:	460b      	mov	r3, r1
 80044a0:	4610      	mov	r0, r2
 80044a2:	4619      	mov	r1, r3
 80044a4:	f7fc fb5a 	bl	8000b5c <__aeabi_d2iz>
 80044a8:	4601      	mov	r1, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1c5a      	adds	r2, r3, #1
 80044ae:	613a      	str	r2, [r7, #16]
 80044b0:	b2ca      	uxtb	r2, r1
 80044b2:	3318      	adds	r3, #24
 80044b4:	443b      	add	r3, r7
 80044b6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	1c5a      	adds	r2, r3, #1
 80044be:	613a      	str	r2, [r7, #16]
 80044c0:	3318      	adds	r3, #24
 80044c2:	443b      	add	r3, r7
 80044c4:	2200      	movs	r2, #0
 80044c6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	613a      	str	r2, [r7, #16]
 80044d0:	3318      	adds	r3, #24
 80044d2:	443b      	add	r3, r7
 80044d4:	2200      	movs	r2, #0
 80044d6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80044da:	f107 0208 	add.w	r2, r7, #8
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	4413      	add	r3, r2
 80044e2:	2200      	movs	r2, #0
 80044e4:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80044e6:	f107 0108 	add.w	r1, r7, #8
 80044ea:	2300      	movs	r3, #0
 80044ec:	2208      	movs	r2, #8
 80044ee:	f240 6001 	movw	r0, #1537	; 0x601
 80044f2:	f7fe ffd5 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80044f6:	2064      	movs	r0, #100	; 0x64
 80044f8:	f001 f996 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	3301      	adds	r3, #1
 8004500:	617b      	str	r3, [r7, #20]
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	2b01      	cmp	r3, #1
 8004506:	dd9d      	ble.n	8004444 <settingRatedCurrent+0x10>
    }
}
 8004508:	bf00      	nop
 800450a:	bf00      	nop
 800450c:	3718      	adds	r7, #24
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	40240000 	.word	0x40240000

08004518 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	b086      	sub	sp, #24
 800451c:	af00      	add	r7, sp, #0
 800451e:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8004522:	2300      	movs	r3, #0
 8004524:	617b      	str	r3, [r7, #20]
 8004526:	e05e      	b.n	80045e6 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8004528:	2300      	movs	r3, #0
 800452a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	613a      	str	r2, [r7, #16]
 8004532:	3318      	adds	r3, #24
 8004534:	443b      	add	r3, r7
 8004536:	222b      	movs	r2, #43	; 0x2b
 8004538:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	613a      	str	r2, [r7, #16]
 8004542:	3318      	adds	r3, #24
 8004544:	443b      	add	r3, r7
 8004546:	2215      	movs	r2, #21
 8004548:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	613a      	str	r2, [r7, #16]
 8004552:	3318      	adds	r3, #24
 8004554:	443b      	add	r3, r7
 8004556:	2220      	movs	r2, #32
 8004558:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	b2da      	uxtb	r2, r3
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	1c59      	adds	r1, r3, #1
 8004564:	6139      	str	r1, [r7, #16]
 8004566:	3201      	adds	r2, #1
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	3318      	adds	r3, #24
 800456c:	443b      	add	r3, r7
 800456e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8004572:	f04f 0200 	mov.w	r2, #0
 8004576:	4b20      	ldr	r3, [pc, #128]	; (80045f8 <settingMaxCurrent+0xe0>)
 8004578:	e9d7 0100 	ldrd	r0, r1, [r7]
 800457c:	f7fc f854 	bl	8000628 <__aeabi_dmul>
 8004580:	4602      	mov	r2, r0
 8004582:	460b      	mov	r3, r1
 8004584:	4610      	mov	r0, r2
 8004586:	4619      	mov	r1, r3
 8004588:	f7fc fae8 	bl	8000b5c <__aeabi_d2iz>
 800458c:	4601      	mov	r1, r0
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	1c5a      	adds	r2, r3, #1
 8004592:	613a      	str	r2, [r7, #16]
 8004594:	b2ca      	uxtb	r2, r1
 8004596:	3318      	adds	r3, #24
 8004598:	443b      	add	r3, r7
 800459a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	1c5a      	adds	r2, r3, #1
 80045a2:	613a      	str	r2, [r7, #16]
 80045a4:	3318      	adds	r3, #24
 80045a6:	443b      	add	r3, r7
 80045a8:	2200      	movs	r2, #0
 80045aa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	613a      	str	r2, [r7, #16]
 80045b4:	3318      	adds	r3, #24
 80045b6:	443b      	add	r3, r7
 80045b8:	2200      	movs	r2, #0
 80045ba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80045be:	f107 0208 	add.w	r2, r7, #8
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80045ca:	f107 0108 	add.w	r1, r7, #8
 80045ce:	2300      	movs	r3, #0
 80045d0:	2208      	movs	r2, #8
 80045d2:	f240 6001 	movw	r0, #1537	; 0x601
 80045d6:	f7fe ff63 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80045da:	2064      	movs	r0, #100	; 0x64
 80045dc:	f001 f924 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	dd9d      	ble.n	8004528 <settingMaxCurrent+0x10>
    }
}
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	bf00      	nop
 80045f8:	40240000 	.word	0x40240000

080045fc <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	4603      	mov	r3, r0
 8004604:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]
 800460a:	e055      	b.n	80046b8 <settingHallOffset+0xbc>
    {
        int index = 0;
 800460c:	2300      	movs	r3, #0
 800460e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	1c5a      	adds	r2, r3, #1
 8004614:	613a      	str	r2, [r7, #16]
 8004616:	3318      	adds	r3, #24
 8004618:	443b      	add	r3, r7
 800461a:	222b      	movs	r2, #43	; 0x2b
 800461c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1c5a      	adds	r2, r3, #1
 8004624:	613a      	str	r2, [r7, #16]
 8004626:	3318      	adds	r3, #24
 8004628:	443b      	add	r3, r7
 800462a:	2211      	movs	r2, #17
 800462c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	613a      	str	r2, [r7, #16]
 8004636:	3318      	adds	r3, #24
 8004638:	443b      	add	r3, r7
 800463a:	2220      	movs	r2, #32
 800463c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	b2da      	uxtb	r2, r3
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1c59      	adds	r1, r3, #1
 8004648:	6139      	str	r1, [r7, #16]
 800464a:	3201      	adds	r2, #1
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	3318      	adds	r3, #24
 8004650:	443b      	add	r3, r7
 8004652:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	613a      	str	r2, [r7, #16]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	b2d2      	uxtb	r2, r2
 8004660:	3318      	adds	r3, #24
 8004662:	443b      	add	r3, r7
 8004664:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 8004668:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800466c:	121b      	asrs	r3, r3, #8
 800466e:	b219      	sxth	r1, r3
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	613a      	str	r2, [r7, #16]
 8004676:	b2ca      	uxtb	r2, r1
 8004678:	3318      	adds	r3, #24
 800467a:	443b      	add	r3, r7
 800467c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1c5a      	adds	r2, r3, #1
 8004684:	613a      	str	r2, [r7, #16]
 8004686:	3318      	adds	r3, #24
 8004688:	443b      	add	r3, r7
 800468a:	2200      	movs	r2, #0
 800468c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004690:	f107 0208 	add.w	r2, r7, #8
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	4413      	add	r3, r2
 8004698:	2200      	movs	r2, #0
 800469a:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800469c:	f107 0108 	add.w	r1, r7, #8
 80046a0:	2300      	movs	r3, #0
 80046a2:	2208      	movs	r2, #8
 80046a4:	f240 6001 	movw	r0, #1537	; 0x601
 80046a8:	f7fe fefa 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80046ac:	2064      	movs	r0, #100	; 0x64
 80046ae:	f001 f8bb 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	3301      	adds	r3, #1
 80046b6:	617b      	str	r3, [r7, #20]
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	dda6      	ble.n	800460c <settingHallOffset+0x10>
    }
}
 80046be:	bf00      	nop
 80046c0:	bf00      	nop
 80046c2:	3718      	adds	r7, #24
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <save>:

void save()
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	1c5a      	adds	r2, r3, #1
 80046d6:	60fa      	str	r2, [r7, #12]
 80046d8:	3310      	adds	r3, #16
 80046da:	443b      	add	r3, r7
 80046dc:	222b      	movs	r2, #43	; 0x2b
 80046de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	60fa      	str	r2, [r7, #12]
 80046e8:	3310      	adds	r3, #16
 80046ea:	443b      	add	r3, r7
 80046ec:	2210      	movs	r2, #16
 80046ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	60fa      	str	r2, [r7, #12]
 80046f8:	3310      	adds	r3, #16
 80046fa:	443b      	add	r3, r7
 80046fc:	2220      	movs	r2, #32
 80046fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	1c5a      	adds	r2, r3, #1
 8004706:	60fa      	str	r2, [r7, #12]
 8004708:	3310      	adds	r3, #16
 800470a:	443b      	add	r3, r7
 800470c:	2200      	movs	r2, #0
 800470e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	1c5a      	adds	r2, r3, #1
 8004716:	60fa      	str	r2, [r7, #12]
 8004718:	3310      	adds	r3, #16
 800471a:	443b      	add	r3, r7
 800471c:	2201      	movs	r2, #1
 800471e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	1c5a      	adds	r2, r3, #1
 8004726:	60fa      	str	r2, [r7, #12]
 8004728:	3310      	adds	r3, #16
 800472a:	443b      	add	r3, r7
 800472c:	2200      	movs	r2, #0
 800472e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1c5a      	adds	r2, r3, #1
 8004736:	60fa      	str	r2, [r7, #12]
 8004738:	3310      	adds	r3, #16
 800473a:	443b      	add	r3, r7
 800473c:	2200      	movs	r2, #0
 800473e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004742:	1d3a      	adds	r2, r7, #4
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	4413      	add	r3, r2
 8004748:	2200      	movs	r2, #0
 800474a:	701a      	strb	r2, [r3, #0]
    index = 0;
 800474c:	2300      	movs	r3, #0
 800474e:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004750:	1d39      	adds	r1, r7, #4
 8004752:	2300      	movs	r3, #0
 8004754:	2208      	movs	r2, #8
 8004756:	f240 6001 	movw	r0, #1537	; 0x601
 800475a:	f7fe fea1 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800475e:	2064      	movs	r0, #100	; 0x64
 8004760:	f001 f862 	bl	8005828 <HAL_Delay>
}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <startMotor>:



void startMotor()
{
 800476c:	b580      	push	{r7, lr}
 800476e:	af00      	add	r7, sp, #0
    enable();
 8004770:	f000 f806 	bl	8004780 <enable>
    velocityMode();
 8004774:	f7ff fc45 	bl	8004002 <velocityMode>
    synchronousMode();
 8004778:	f7ff fc93 	bl	80040a2 <synchronousMode>
}
 800477c:	bf00      	nop
 800477e:	bd80      	pop	{r7, pc}

08004780 <enable>:

void enable()
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 8004786:	4b2f      	ldr	r3, [pc, #188]	; (8004844 <enable+0xc4>)
 8004788:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
 800478e:	e050      	b.n	8004832 <enable+0xb2>
    {
        int index = 0;
 8004790:	2300      	movs	r3, #0
 8004792:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1c5a      	adds	r2, r3, #1
 8004798:	613a      	str	r2, [r7, #16]
 800479a:	3318      	adds	r3, #24
 800479c:	443b      	add	r3, r7
 800479e:	222b      	movs	r2, #43	; 0x2b
 80047a0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	613a      	str	r2, [r7, #16]
 80047aa:	3318      	adds	r3, #24
 80047ac:	443b      	add	r3, r7
 80047ae:	2240      	movs	r2, #64	; 0x40
 80047b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 80047b4:	693b      	ldr	r3, [r7, #16]
 80047b6:	1c5a      	adds	r2, r3, #1
 80047b8:	613a      	str	r2, [r7, #16]
 80047ba:	3318      	adds	r3, #24
 80047bc:	443b      	add	r3, r7
 80047be:	2260      	movs	r2, #96	; 0x60
 80047c0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	1c5a      	adds	r2, r3, #1
 80047c8:	613a      	str	r2, [r7, #16]
 80047ca:	3318      	adds	r3, #24
 80047cc:	443b      	add	r3, r7
 80047ce:	2200      	movs	r2, #0
 80047d0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	1c5a      	adds	r2, r3, #1
 80047d8:	613a      	str	r2, [r7, #16]
 80047da:	1d39      	adds	r1, r7, #4
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	440a      	add	r2, r1
 80047e0:	7812      	ldrb	r2, [r2, #0]
 80047e2:	3318      	adds	r3, #24
 80047e4:	443b      	add	r3, r7
 80047e6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	1c5a      	adds	r2, r3, #1
 80047ee:	613a      	str	r2, [r7, #16]
 80047f0:	3318      	adds	r3, #24
 80047f2:	443b      	add	r3, r7
 80047f4:	2200      	movs	r2, #0
 80047f6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	613a      	str	r2, [r7, #16]
 8004800:	3318      	adds	r3, #24
 8004802:	443b      	add	r3, r7
 8004804:	2200      	movs	r2, #0
 8004806:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800480a:	f107 0208 	add.w	r2, r7, #8
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	2200      	movs	r2, #0
 8004814:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004816:	f107 0108 	add.w	r1, r7, #8
 800481a:	2300      	movs	r3, #0
 800481c:	2208      	movs	r2, #8
 800481e:	f240 6001 	movw	r0, #1537	; 0x601
 8004822:	f7fe fe3d 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004826:	2064      	movs	r0, #100	; 0x64
 8004828:	f000 fffe 	bl	8005828 <HAL_Delay>
    for(int i =0;i<4;i++)
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	3301      	adds	r3, #1
 8004830:	617b      	str	r3, [r7, #20]
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b03      	cmp	r3, #3
 8004836:	ddab      	ble.n	8004790 <enable+0x10>
    }
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop
 800483c:	3718      	adds	r7, #24
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	0f070600 	.word	0x0f070600

08004848 <disable>:

void disable()
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1c5a      	adds	r2, r3, #1
 8004856:	60fa      	str	r2, [r7, #12]
 8004858:	3310      	adds	r3, #16
 800485a:	443b      	add	r3, r7
 800485c:	222b      	movs	r2, #43	; 0x2b
 800485e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1c5a      	adds	r2, r3, #1
 8004866:	60fa      	str	r2, [r7, #12]
 8004868:	3310      	adds	r3, #16
 800486a:	443b      	add	r3, r7
 800486c:	2240      	movs	r2, #64	; 0x40
 800486e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	60fa      	str	r2, [r7, #12]
 8004878:	3310      	adds	r3, #16
 800487a:	443b      	add	r3, r7
 800487c:	2260      	movs	r2, #96	; 0x60
 800487e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	60fa      	str	r2, [r7, #12]
 8004888:	3310      	adds	r3, #16
 800488a:	443b      	add	r3, r7
 800488c:	2200      	movs	r2, #0
 800488e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	60fa      	str	r2, [r7, #12]
 8004898:	3310      	adds	r3, #16
 800489a:	443b      	add	r3, r7
 800489c:	2200      	movs	r2, #0
 800489e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	1c5a      	adds	r2, r3, #1
 80048a6:	60fa      	str	r2, [r7, #12]
 80048a8:	3310      	adds	r3, #16
 80048aa:	443b      	add	r3, r7
 80048ac:	2200      	movs	r2, #0
 80048ae:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1c5a      	adds	r2, r3, #1
 80048b6:	60fa      	str	r2, [r7, #12]
 80048b8:	3310      	adds	r3, #16
 80048ba:	443b      	add	r3, r7
 80048bc:	2200      	movs	r2, #0
 80048be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80048c2:	1d3a      	adds	r2, r7, #4
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	4413      	add	r3, r2
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]
    index = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80048d0:	1d39      	adds	r1, r7, #4
 80048d2:	2300      	movs	r3, #0
 80048d4:	2208      	movs	r2, #8
 80048d6:	f240 6001 	movw	r0, #1537	; 0x601
 80048da:	f7fe fde1 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80048de:	2064      	movs	r0, #100	; 0x64
 80048e0:	f000 ffa2 	bl	8005828 <HAL_Delay>
}
 80048e4:	bf00      	nop
 80048e6:	3710      	adds	r7, #16
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <reset>:

void reset()
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80048f2:	2300      	movs	r3, #0
 80048f4:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	1c5a      	adds	r2, r3, #1
 80048fa:	60fa      	str	r2, [r7, #12]
 80048fc:	3310      	adds	r3, #16
 80048fe:	443b      	add	r3, r7
 8004900:	222b      	movs	r2, #43	; 0x2b
 8004902:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	1c5a      	adds	r2, r3, #1
 800490a:	60fa      	str	r2, [r7, #12]
 800490c:	3310      	adds	r3, #16
 800490e:	443b      	add	r3, r7
 8004910:	2240      	movs	r2, #64	; 0x40
 8004912:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1c5a      	adds	r2, r3, #1
 800491a:	60fa      	str	r2, [r7, #12]
 800491c:	3310      	adds	r3, #16
 800491e:	443b      	add	r3, r7
 8004920:	2260      	movs	r2, #96	; 0x60
 8004922:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	60fa      	str	r2, [r7, #12]
 800492c:	3310      	adds	r3, #16
 800492e:	443b      	add	r3, r7
 8004930:	2200      	movs	r2, #0
 8004932:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	1c5a      	adds	r2, r3, #1
 800493a:	60fa      	str	r2, [r7, #12]
 800493c:	3310      	adds	r3, #16
 800493e:	443b      	add	r3, r7
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	1c5a      	adds	r2, r3, #1
 800494a:	60fa      	str	r2, [r7, #12]
 800494c:	3310      	adds	r3, #16
 800494e:	443b      	add	r3, r7
 8004950:	2200      	movs	r2, #0
 8004952:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	3310      	adds	r3, #16
 800495e:	443b      	add	r3, r7
 8004960:	2200      	movs	r2, #0
 8004962:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004966:	1d3a      	adds	r2, r7, #4
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	4413      	add	r3, r2
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004970:	1d39      	adds	r1, r7, #4
 8004972:	2300      	movs	r3, #0
 8004974:	2208      	movs	r2, #8
 8004976:	f240 6001 	movw	r0, #1537	; 0x601
 800497a:	f7fe fd91 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800497e:	2064      	movs	r0, #100	; 0x64
 8004980:	f000 ff52 	bl	8005828 <HAL_Delay>
}
 8004984:	bf00      	nop
 8004986:	3710      	adds	r7, #16
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <reqEnc>:

void reqEnc()
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004992:	2300      	movs	r3, #0
 8004994:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	1c5a      	adds	r2, r3, #1
 800499a:	60fa      	str	r2, [r7, #12]
 800499c:	3310      	adds	r3, #16
 800499e:	443b      	add	r3, r7
 80049a0:	2240      	movs	r2, #64	; 0x40
 80049a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	60fa      	str	r2, [r7, #12]
 80049ac:	3310      	adds	r3, #16
 80049ae:	443b      	add	r3, r7
 80049b0:	226c      	movs	r2, #108	; 0x6c
 80049b2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	1c5a      	adds	r2, r3, #1
 80049ba:	60fa      	str	r2, [r7, #12]
 80049bc:	3310      	adds	r3, #16
 80049be:	443b      	add	r3, r7
 80049c0:	2260      	movs	r2, #96	; 0x60
 80049c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	1c5a      	adds	r2, r3, #1
 80049ca:	60fa      	str	r2, [r7, #12]
 80049cc:	3310      	adds	r3, #16
 80049ce:	443b      	add	r3, r7
 80049d0:	2203      	movs	r2, #3
 80049d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	1c5a      	adds	r2, r3, #1
 80049da:	60fa      	str	r2, [r7, #12]
 80049dc:	3310      	adds	r3, #16
 80049de:	443b      	add	r3, r7
 80049e0:	2200      	movs	r2, #0
 80049e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	60fa      	str	r2, [r7, #12]
 80049ec:	3310      	adds	r3, #16
 80049ee:	443b      	add	r3, r7
 80049f0:	2200      	movs	r2, #0
 80049f2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	60fa      	str	r2, [r7, #12]
 80049fc:	3310      	adds	r3, #16
 80049fe:	443b      	add	r3, r7
 8004a00:	2200      	movs	r2, #0
 8004a02:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004a06:	1d3a      	adds	r2, r7, #4
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004a10:	1d39      	adds	r1, r7, #4
 8004a12:	2300      	movs	r3, #0
 8004a14:	2208      	movs	r2, #8
 8004a16:	f240 6001 	movw	r0, #1537	; 0x601
 8004a1a:	f7fe fd41 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004a1e:	bf00      	nop
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <reqState>:

void reqState()
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	60fa      	str	r2, [r7, #12]
 8004a36:	3310      	adds	r3, #16
 8004a38:	443b      	add	r3, r7
 8004a3a:	2240      	movs	r2, #64	; 0x40
 8004a3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	1c5a      	adds	r2, r3, #1
 8004a44:	60fa      	str	r2, [r7, #12]
 8004a46:	3310      	adds	r3, #16
 8004a48:	443b      	add	r3, r7
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	60fa      	str	r2, [r7, #12]
 8004a56:	3310      	adds	r3, #16
 8004a58:	443b      	add	r3, r7
 8004a5a:	2260      	movs	r2, #96	; 0x60
 8004a5c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	60fa      	str	r2, [r7, #12]
 8004a66:	3310      	adds	r3, #16
 8004a68:	443b      	add	r3, r7
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1c5a      	adds	r2, r3, #1
 8004a74:	60fa      	str	r2, [r7, #12]
 8004a76:	3310      	adds	r3, #16
 8004a78:	443b      	add	r3, r7
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1c5a      	adds	r2, r3, #1
 8004a84:	60fa      	str	r2, [r7, #12]
 8004a86:	3310      	adds	r3, #16
 8004a88:	443b      	add	r3, r7
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	1c5a      	adds	r2, r3, #1
 8004a94:	60fa      	str	r2, [r7, #12]
 8004a96:	3310      	adds	r3, #16
 8004a98:	443b      	add	r3, r7
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004aa0:	1d3a      	adds	r2, r7, #4
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	4413      	add	r3, r2
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004aaa:	1d39      	adds	r1, r7, #4
 8004aac:	2300      	movs	r3, #0
 8004aae:	2208      	movs	r2, #8
 8004ab0:	f240 6001 	movw	r0, #1537	; 0x601
 8004ab4:	f7fe fcf4 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	460a      	mov	r2, r1
 8004aca:	80fb      	strh	r3, [r7, #6]
 8004acc:	4613      	mov	r3, r2
 8004ace:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 8004ad0:	88fb      	ldrh	r3, [r7, #6]
 8004ad2:	425b      	negs	r3, r3
 8004ad4:	b29b      	uxth	r3, r3
 8004ad6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	1c5a      	adds	r2, r3, #1
 8004ae0:	617a      	str	r2, [r7, #20]
 8004ae2:	3318      	adds	r3, #24
 8004ae4:	443b      	add	r3, r7
 8004ae6:	2223      	movs	r2, #35	; 0x23
 8004ae8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	617a      	str	r2, [r7, #20]
 8004af2:	3318      	adds	r3, #24
 8004af4:	443b      	add	r3, r7
 8004af6:	22ff      	movs	r2, #255	; 0xff
 8004af8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	1c5a      	adds	r2, r3, #1
 8004b00:	617a      	str	r2, [r7, #20]
 8004b02:	3318      	adds	r3, #24
 8004b04:	443b      	add	r3, r7
 8004b06:	2260      	movs	r2, #96	; 0x60
 8004b08:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	1c5a      	adds	r2, r3, #1
 8004b10:	617a      	str	r2, [r7, #20]
 8004b12:	3318      	adds	r3, #24
 8004b14:	443b      	add	r3, r7
 8004b16:	2203      	movs	r2, #3
 8004b18:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	617a      	str	r2, [r7, #20]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	b2d2      	uxtb	r2, r2
 8004b26:	3318      	adds	r3, #24
 8004b28:	443b      	add	r3, r7
 8004b2a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 8004b2e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b32:	121b      	asrs	r3, r3, #8
 8004b34:	b219      	sxth	r1, r3
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	1c5a      	adds	r2, r3, #1
 8004b3a:	617a      	str	r2, [r7, #20]
 8004b3c:	b2ca      	uxtb	r2, r1
 8004b3e:	3318      	adds	r3, #24
 8004b40:	443b      	add	r3, r7
 8004b42:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8004b46:	697b      	ldr	r3, [r7, #20]
 8004b48:	1c5a      	adds	r2, r3, #1
 8004b4a:	617a      	str	r2, [r7, #20]
 8004b4c:	88ba      	ldrh	r2, [r7, #4]
 8004b4e:	b2d2      	uxtb	r2, r2
 8004b50:	3318      	adds	r3, #24
 8004b52:	443b      	add	r3, r7
 8004b54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 8004b58:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004b5c:	121b      	asrs	r3, r3, #8
 8004b5e:	b21b      	sxth	r3, r3
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	f107 020c 	add.w	r2, r7, #12
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	4413      	add	r3, r2
 8004b6a:	460a      	mov	r2, r1
 8004b6c:	701a      	strb	r2, [r3, #0]
    printf("hihi swv\n");
 8004b6e:	4807      	ldr	r0, [pc, #28]	; (8004b8c <control+0xcc>)
 8004b70:	f005 fd72 	bl	800a658 <puts>
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004b74:	f107 010c 	add.w	r1, r7, #12
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2208      	movs	r2, #8
 8004b7c:	f240 6001 	movw	r0, #1537	; 0x601
 8004b80:	f7fe fc8e 	bl	80034a0 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004b84:	bf00      	nop
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	0800b7b0 	.word	0x0800b7b0

08004b90 <settingKP>:

void settingKP(int16_t kp)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b086      	sub	sp, #24
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	4603      	mov	r3, r0
 8004b98:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e055      	b.n	8004c4c <settingKP+0xbc>
    {
        int index = 0;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	1c5a      	adds	r2, r3, #1
 8004ba8:	613a      	str	r2, [r7, #16]
 8004baa:	3318      	adds	r3, #24
 8004bac:	443b      	add	r3, r7
 8004bae:	221d      	movs	r2, #29
 8004bb0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	1c5a      	adds	r2, r3, #1
 8004bb8:	613a      	str	r2, [r7, #16]
 8004bba:	3318      	adds	r3, #24
 8004bbc:	443b      	add	r3, r7
 8004bbe:	2220      	movs	r2, #32
 8004bc0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1c5a      	adds	r2, r3, #1
 8004bc8:	613a      	str	r2, [r7, #16]
 8004bca:	3318      	adds	r3, #24
 8004bcc:	443b      	add	r3, r7
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	6139      	str	r1, [r7, #16]
 8004bde:	3201      	adds	r2, #1
 8004be0:	b2d2      	uxtb	r2, r2
 8004be2:	3318      	adds	r3, #24
 8004be4:	443b      	add	r3, r7
 8004be6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1c5a      	adds	r2, r3, #1
 8004bee:	613a      	str	r2, [r7, #16]
 8004bf0:	88fa      	ldrh	r2, [r7, #6]
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	443b      	add	r3, r7
 8004bf8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 8004bfc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c00:	121b      	asrs	r3, r3, #8
 8004c02:	b219      	sxth	r1, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	1c5a      	adds	r2, r3, #1
 8004c08:	613a      	str	r2, [r7, #16]
 8004c0a:	b2ca      	uxtb	r2, r1
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	443b      	add	r3, r7
 8004c10:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	613a      	str	r2, [r7, #16]
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	443b      	add	r3, r7
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004c24:	f107 0208 	add.w	r2, r7, #8
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	4413      	add	r3, r2
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004c30:	f107 0108 	add.w	r1, r7, #8
 8004c34:	2300      	movs	r3, #0
 8004c36:	2208      	movs	r2, #8
 8004c38:	f240 6001 	movw	r0, #1537	; 0x601
 8004c3c:	f7fe fc30 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8004c40:	2064      	movs	r0, #100	; 0x64
 8004c42:	f000 fdf1 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	617b      	str	r3, [r7, #20]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	dda6      	ble.n	8004ba0 <settingKP+0x10>
    }
}
 8004c52:	bf00      	nop
 8004c54:	bf00      	nop
 8004c56:	3718      	adds	r7, #24
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <settingKI>:

void settingKI(int16_t ki)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	4603      	mov	r3, r0
 8004c64:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004c66:	2300      	movs	r3, #0
 8004c68:	617b      	str	r3, [r7, #20]
 8004c6a:	e055      	b.n	8004d18 <settingKI+0xbc>
    {
        int index = 0;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	1c5a      	adds	r2, r3, #1
 8004c74:	613a      	str	r2, [r7, #16]
 8004c76:	3318      	adds	r3, #24
 8004c78:	443b      	add	r3, r7
 8004c7a:	221e      	movs	r2, #30
 8004c7c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	1c5a      	adds	r2, r3, #1
 8004c84:	613a      	str	r2, [r7, #16]
 8004c86:	3318      	adds	r3, #24
 8004c88:	443b      	add	r3, r7
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	613a      	str	r2, [r7, #16]
 8004c96:	3318      	adds	r3, #24
 8004c98:	443b      	add	r3, r7
 8004c9a:	2220      	movs	r2, #32
 8004c9c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	1c59      	adds	r1, r3, #1
 8004ca8:	6139      	str	r1, [r7, #16]
 8004caa:	3201      	adds	r2, #1
 8004cac:	b2d2      	uxtb	r2, r2
 8004cae:	3318      	adds	r3, #24
 8004cb0:	443b      	add	r3, r7
 8004cb2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	613a      	str	r2, [r7, #16]
 8004cbc:	88fa      	ldrh	r2, [r7, #6]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	3318      	adds	r3, #24
 8004cc2:	443b      	add	r3, r7
 8004cc4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 8004cc8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ccc:	121b      	asrs	r3, r3, #8
 8004cce:	b219      	sxth	r1, r3
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1c5a      	adds	r2, r3, #1
 8004cd4:	613a      	str	r2, [r7, #16]
 8004cd6:	b2ca      	uxtb	r2, r1
 8004cd8:	3318      	adds	r3, #24
 8004cda:	443b      	add	r3, r7
 8004cdc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1c5a      	adds	r2, r3, #1
 8004ce4:	613a      	str	r2, [r7, #16]
 8004ce6:	3318      	adds	r3, #24
 8004ce8:	443b      	add	r3, r7
 8004cea:	2200      	movs	r2, #0
 8004cec:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004cf0:	f107 0208 	add.w	r2, r7, #8
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004cfc:	f107 0108 	add.w	r1, r7, #8
 8004d00:	2300      	movs	r3, #0
 8004d02:	2208      	movs	r2, #8
 8004d04:	f240 6001 	movw	r0, #1537	; 0x601
 8004d08:	f7fe fbca 	bl	80034a0 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004d0c:	2064      	movs	r0, #100	; 0x64
 8004d0e:	f000 fd8b 	bl	8005828 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	3301      	adds	r3, #1
 8004d16:	617b      	str	r3, [r7, #20]
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	dda6      	ble.n	8004c6c <settingKI+0x10>
    }
}
 8004d1e:	bf00      	nop
 8004d20:	bf00      	nop
 8004d22:	3718      	adds	r7, #24
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <settingMotor>:
void settingMotor()
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8004d2c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004d30:	f7ff fa07 	bl	8004142 <settingEnc>
    settingPole(POLE_PAIR);
 8004d34:	200a      	movs	r0, #10
 8004d36:	f7ff fa6a 	bl	800420e <settingPole>
    settingBreak(BREAK_OPTION);
 8004d3a:	2001      	movs	r0, #1
 8004d3c:	f7ff facd 	bl	80042da <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004d40:	20c8      	movs	r0, #200	; 0xc8
 8004d42:	f7ff fb1e 	bl	8004382 <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 8004d46:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004d78 <settingMotor+0x50>
 8004d4a:	f7ff fb73 	bl	8004434 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 8004d4e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8004d80 <settingMotor+0x58>
 8004d52:	f7ff fbe1 	bl	8004518 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 8004d56:	20f0      	movs	r0, #240	; 0xf0
 8004d58:	f7ff fc50 	bl	80045fc <settingHallOffset>
    settingKP(KP_GAIN);
 8004d5c:	f240 2026 	movw	r0, #550	; 0x226
 8004d60:	f7ff ff16 	bl	8004b90 <settingKP>
    settingKI(KI_GAIN);
 8004d64:	206e      	movs	r0, #110	; 0x6e
 8004d66:	f7ff ff79 	bl	8004c5c <settingKI>
    save();
 8004d6a:	f7ff fcad 	bl	80046c8 <save>
}
 8004d6e:	bf00      	nop
 8004d70:	bd80      	pop	{r7, pc}
 8004d72:	bf00      	nop
 8004d74:	f3af 8000 	nop.w
 8004d78:	00000000 	.word	0x00000000
 8004d7c:	40200000 	.word	0x40200000
 8004d80:	00000000 	.word	0x00000000
 8004d84:	40300000 	.word	0x40300000

08004d88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b083      	sub	sp, #12
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	4b0f      	ldr	r3, [pc, #60]	; (8004dcc <HAL_MspInit+0x44>)
 8004d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d92:	4a0e      	ldr	r2, [pc, #56]	; (8004dcc <HAL_MspInit+0x44>)
 8004d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d98:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9a:	4b0c      	ldr	r3, [pc, #48]	; (8004dcc <HAL_MspInit+0x44>)
 8004d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da2:	607b      	str	r3, [r7, #4]
 8004da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da6:	4b09      	ldr	r3, [pc, #36]	; (8004dcc <HAL_MspInit+0x44>)
 8004da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004daa:	4a08      	ldr	r2, [pc, #32]	; (8004dcc <HAL_MspInit+0x44>)
 8004dac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004db0:	6453      	str	r3, [r2, #68]	; 0x44
 8004db2:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <HAL_MspInit+0x44>)
 8004db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004db6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004dbe:	bf00      	nop
 8004dc0:	370c      	adds	r7, #12
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	40023800 	.word	0x40023800

08004dd0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08a      	sub	sp, #40	; 0x28
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd8:	f107 0314 	add.w	r3, r7, #20
 8004ddc:	2200      	movs	r2, #0
 8004dde:	601a      	str	r2, [r3, #0]
 8004de0:	605a      	str	r2, [r3, #4]
 8004de2:	609a      	str	r2, [r3, #8]
 8004de4:	60da      	str	r2, [r3, #12]
 8004de6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a15      	ldr	r2, [pc, #84]	; (8004e44 <HAL_ADC_MspInit+0x74>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d123      	bne.n	8004e3a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004e10:	f043 0301 	orr.w	r3, r3, #1
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_ADC_MspInit+0x78>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0301 	and.w	r3, r3, #1
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004e22:	231e      	movs	r3, #30
 8004e24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e26:	2303      	movs	r3, #3
 8004e28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e2e:	f107 0314 	add.w	r3, r7, #20
 8004e32:	4619      	mov	r1, r3
 8004e34:	4805      	ldr	r0, [pc, #20]	; (8004e4c <HAL_ADC_MspInit+0x7c>)
 8004e36:	f002 f925 	bl	8007084 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e3a:	bf00      	nop
 8004e3c:	3728      	adds	r7, #40	; 0x28
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	40012000 	.word	0x40012000
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40020000 	.word	0x40020000

08004e50 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	; 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a1b      	ldr	r2, [pc, #108]	; (8004edc <HAL_CAN_MspInit+0x8c>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d12f      	bne.n	8004ed2 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004e72:	4b1b      	ldr	r3, [pc, #108]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e76:	4a1a      	ldr	r2, [pc, #104]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e78:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004e7e:	4b18      	ldr	r3, [pc, #96]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e86:	613b      	str	r3, [r7, #16]
 8004e88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004e8a:	4b15      	ldr	r3, [pc, #84]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e8e:	4a14      	ldr	r2, [pc, #80]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e90:	f043 0308 	orr.w	r3, r3, #8
 8004e94:	6313      	str	r3, [r2, #48]	; 0x30
 8004e96:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_CAN_MspInit+0x90>)
 8004e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e9a:	f003 0308 	and.w	r3, r3, #8
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ea6:	2302      	movs	r3, #2
 8004ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004eb2:	2309      	movs	r3, #9
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4809      	ldr	r0, [pc, #36]	; (8004ee4 <HAL_CAN_MspInit+0x94>)
 8004ebe:	f002 f8e1 	bl	8007084 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2014      	movs	r0, #20
 8004ec8:	f002 f897 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004ecc:	2014      	movs	r0, #20
 8004ece:	f002 f8b0 	bl	8007032 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40006400 	.word	0x40006400
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020c00 	.word	0x40020c00

08004ee8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef8:	d10c      	bne.n	8004f14 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004efa:	4b49      	ldr	r3, [pc, #292]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	4a48      	ldr	r2, [pc, #288]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	6413      	str	r3, [r2, #64]	; 0x40
 8004f06:	4b46      	ldr	r3, [pc, #280]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0a:	f003 0301 	and.w	r3, r3, #1
 8004f0e:	61fb      	str	r3, [r7, #28]
 8004f10:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004f12:	e080      	b.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a42      	ldr	r2, [pc, #264]	; (8005024 <HAL_TIM_Base_MspInit+0x13c>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d114      	bne.n	8004f48 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004f1e:	4b40      	ldr	r3, [pc, #256]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	4a3f      	ldr	r2, [pc, #252]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f24:	f043 0308 	orr.w	r3, r3, #8
 8004f28:	6413      	str	r3, [r2, #64]	; 0x40
 8004f2a:	4b3d      	ldr	r3, [pc, #244]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004f36:	2200      	movs	r2, #0
 8004f38:	2100      	movs	r1, #0
 8004f3a:	2032      	movs	r0, #50	; 0x32
 8004f3c:	f002 f85d 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004f40:	2032      	movs	r0, #50	; 0x32
 8004f42:	f002 f876 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 8004f46:	e066      	b.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a36      	ldr	r2, [pc, #216]	; (8005028 <HAL_TIM_Base_MspInit+0x140>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d114      	bne.n	8004f7c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004f52:	4b33      	ldr	r3, [pc, #204]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f56:	4a32      	ldr	r2, [pc, #200]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f58:	f043 0310 	orr.w	r3, r3, #16
 8004f5c:	6413      	str	r3, [r2, #64]	; 0x40
 8004f5e:	4b30      	ldr	r3, [pc, #192]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f62:	f003 0310 	and.w	r3, r3, #16
 8004f66:	617b      	str	r3, [r7, #20]
 8004f68:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	2036      	movs	r0, #54	; 0x36
 8004f70:	f002 f843 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004f74:	2036      	movs	r0, #54	; 0x36
 8004f76:	f002 f85c 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 8004f7a:	e04c      	b.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a2a      	ldr	r2, [pc, #168]	; (800502c <HAL_TIM_Base_MspInit+0x144>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d114      	bne.n	8004fb0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004f86:	4b26      	ldr	r3, [pc, #152]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8a:	4a25      	ldr	r2, [pc, #148]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f8c:	f043 0320 	orr.w	r3, r3, #32
 8004f90:	6413      	str	r3, [r2, #64]	; 0x40
 8004f92:	4b23      	ldr	r3, [pc, #140]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f003 0320 	and.w	r3, r3, #32
 8004f9a:	613b      	str	r3, [r7, #16]
 8004f9c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	2037      	movs	r0, #55	; 0x37
 8004fa4:	f002 f829 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004fa8:	2037      	movs	r0, #55	; 0x37
 8004faa:	f002 f842 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 8004fae:	e032      	b.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a1e      	ldr	r2, [pc, #120]	; (8005030 <HAL_TIM_Base_MspInit+0x148>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d114      	bne.n	8004fe4 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004fba:	4b19      	ldr	r3, [pc, #100]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a18      	ldr	r2, [pc, #96]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b16      	ldr	r3, [pc, #88]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	2018      	movs	r0, #24
 8004fd8:	f002 f80f 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004fdc:	2018      	movs	r0, #24
 8004fde:	f002 f828 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 8004fe2:	e018      	b.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a12      	ldr	r2, [pc, #72]	; (8005034 <HAL_TIM_Base_MspInit+0x14c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d113      	bne.n	8005016 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004fee:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a0b      	ldr	r2, [pc, #44]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_TIM_Base_MspInit+0x138>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005002:	60bb      	str	r3, [r7, #8]
 8005004:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8005006:	2200      	movs	r2, #0
 8005008:	2100      	movs	r1, #0
 800500a:	202d      	movs	r0, #45	; 0x2d
 800500c:	f001 fff5 	bl	8006ffa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8005010:	202d      	movs	r0, #45	; 0x2d
 8005012:	f002 f80e 	bl	8007032 <HAL_NVIC_EnableIRQ>
}
 8005016:	bf00      	nop
 8005018:	3720      	adds	r7, #32
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}
 800501e:	bf00      	nop
 8005020:	40023800 	.word	0x40023800
 8005024:	40000c00 	.word	0x40000c00
 8005028:	40001000 	.word	0x40001000
 800502c:	40001400 	.word	0x40001400
 8005030:	40014000 	.word	0x40014000
 8005034:	40002000 	.word	0x40002000

08005038 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b088      	sub	sp, #32
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005040:	f107 030c 	add.w	r3, r7, #12
 8005044:	2200      	movs	r2, #0
 8005046:	601a      	str	r2, [r3, #0]
 8005048:	605a      	str	r2, [r3, #4]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	60da      	str	r2, [r3, #12]
 800504e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005058:	d11b      	bne.n	8005092 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800505a:	4b10      	ldr	r3, [pc, #64]	; (800509c <HAL_TIM_MspPostInit+0x64>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a0f      	ldr	r2, [pc, #60]	; (800509c <HAL_TIM_MspPostInit+0x64>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b0d      	ldr	r3, [pc, #52]	; (800509c <HAL_TIM_MspPostInit+0x64>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	60bb      	str	r3, [r7, #8]
 8005070:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8005072:	2320      	movs	r3, #32
 8005074:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005076:	2302      	movs	r3, #2
 8005078:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507a:	2300      	movs	r3, #0
 800507c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800507e:	2300      	movs	r3, #0
 8005080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005082:	2301      	movs	r3, #1
 8005084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005086:	f107 030c 	add.w	r3, r7, #12
 800508a:	4619      	mov	r1, r3
 800508c:	4804      	ldr	r0, [pc, #16]	; (80050a0 <HAL_TIM_MspPostInit+0x68>)
 800508e:	f001 fff9 	bl	8007084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8005092:	bf00      	nop
 8005094:	3720      	adds	r7, #32
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	40020000 	.word	0x40020000

080050a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80050a4:	b580      	push	{r7, lr}
 80050a6:	b0aa      	sub	sp, #168	; 0xa8
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80050b0:	2200      	movs	r2, #0
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	605a      	str	r2, [r3, #4]
 80050b6:	609a      	str	r2, [r3, #8]
 80050b8:	60da      	str	r2, [r3, #12]
 80050ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050bc:	f107 0310 	add.w	r3, r7, #16
 80050c0:	2284      	movs	r2, #132	; 0x84
 80050c2:	2100      	movs	r1, #0
 80050c4:	4618      	mov	r0, r3
 80050c6:	f005 fa39 	bl	800a53c <memset>
  if(huart->Instance==USART1)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a21      	ldr	r2, [pc, #132]	; (8005154 <HAL_UART_MspInit+0xb0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d13a      	bne.n	800514a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80050d4:	2340      	movs	r3, #64	; 0x40
 80050d6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80050d8:	2300      	movs	r3, #0
 80050da:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80050dc:	f107 0310 	add.w	r3, r7, #16
 80050e0:	4618      	mov	r0, r3
 80050e2:	f002 fef9 	bl	8007ed8 <HAL_RCCEx_PeriphCLKConfig>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d001      	beq.n	80050f0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80050ec:	f7fe ff84 	bl	8003ff8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80050f0:	4b19      	ldr	r3, [pc, #100]	; (8005158 <HAL_UART_MspInit+0xb4>)
 80050f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050f4:	4a18      	ldr	r2, [pc, #96]	; (8005158 <HAL_UART_MspInit+0xb4>)
 80050f6:	f043 0310 	orr.w	r3, r3, #16
 80050fa:	6453      	str	r3, [r2, #68]	; 0x44
 80050fc:	4b16      	ldr	r3, [pc, #88]	; (8005158 <HAL_UART_MspInit+0xb4>)
 80050fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005100:	f003 0310 	and.w	r3, r3, #16
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005108:	4b13      	ldr	r3, [pc, #76]	; (8005158 <HAL_UART_MspInit+0xb4>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4a12      	ldr	r2, [pc, #72]	; (8005158 <HAL_UART_MspInit+0xb4>)
 800510e:	f043 0302 	orr.w	r3, r3, #2
 8005112:	6313      	str	r3, [r2, #48]	; 0x30
 8005114:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_UART_MspInit+0xb4>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005120:	23c0      	movs	r3, #192	; 0xc0
 8005122:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005126:	2302      	movs	r3, #2
 8005128:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005132:	2303      	movs	r3, #3
 8005134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005138:	2307      	movs	r3, #7
 800513a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800513e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8005142:	4619      	mov	r1, r3
 8005144:	4805      	ldr	r0, [pc, #20]	; (800515c <HAL_UART_MspInit+0xb8>)
 8005146:	f001 ff9d 	bl	8007084 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800514a:	bf00      	nop
 800514c:	37a8      	adds	r7, #168	; 0xa8
 800514e:	46bd      	mov	sp, r7
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	40011000 	.word	0x40011000
 8005158:	40023800 	.word	0x40023800
 800515c:	40020400 	.word	0x40020400

08005160 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005160:	b480      	push	{r7}
 8005162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005164:	e7fe      	b.n	8005164 <NMI_Handler+0x4>

08005166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005166:	b480      	push	{r7}
 8005168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800516a:	e7fe      	b.n	800516a <HardFault_Handler+0x4>

0800516c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800516c:	b480      	push	{r7}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005170:	e7fe      	b.n	8005170 <MemManage_Handler+0x4>

08005172 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005172:	b480      	push	{r7}
 8005174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005176:	e7fe      	b.n	8005176 <BusFault_Handler+0x4>

08005178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800517c:	e7fe      	b.n	800517c <UsageFault_Handler+0x4>

0800517e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800517e:	b480      	push	{r7}
 8005180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005182:	bf00      	nop
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800518c:	b480      	push	{r7}
 800518e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005190:	bf00      	nop
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr

0800519a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800519a:	b480      	push	{r7}
 800519c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800519e:	bf00      	nop
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr

080051a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80051ac:	f000 fb1c 	bl	80057e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80051b0:	bf00      	nop
 80051b2:	bd80      	pop	{r7, pc}

080051b4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80051b8:	4802      	ldr	r0, [pc, #8]	; (80051c4 <CAN1_RX0_IRQHandler+0x10>)
 80051ba:	f001 fbef 	bl	800699c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80051be:	bf00      	nop
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	200002e0 	.word	0x200002e0

080051c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 80051cc:	2040      	movs	r0, #64	; 0x40
 80051ce:	f002 f951 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data5_Pin);
 80051d2:	2080      	movs	r0, #128	; 0x80
 80051d4:	f002 f94e 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data2_Pin);
 80051d8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80051dc:	f002 f94a 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80051e8:	4802      	ldr	r0, [pc, #8]	; (80051f4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80051ea:	f003 fd0d 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80051ee:	bf00      	nop
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	20000438 	.word	0x20000438

080051f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data3_Pin);
 80051fc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005200:	f002 f938 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data6_Pin);
 8005204:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005208:	f002 f934 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}

08005210 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8005214:	4802      	ldr	r0, [pc, #8]	; (8005220 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8005216:	f003 fcf7 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}
 800521e:	bf00      	nop
 8005220:	20000484 	.word	0x20000484

08005224 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8005228:	4802      	ldr	r0, [pc, #8]	; (8005234 <TIM5_IRQHandler+0x10>)
 800522a:	f003 fced 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800522e:	bf00      	nop
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	20000354 	.word	0x20000354

08005238 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800523c:	4802      	ldr	r0, [pc, #8]	; (8005248 <TIM6_DAC_IRQHandler+0x10>)
 800523e:	f003 fce3 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8005242:	bf00      	nop
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	200003a0 	.word	0x200003a0

0800524c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005250:	4802      	ldr	r0, [pc, #8]	; (800525c <TIM7_IRQHandler+0x10>)
 8005252:	f003 fcd9 	bl	8008c08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005256:	bf00      	nop
 8005258:	bd80      	pop	{r7, pc}
 800525a:	bf00      	nop
 800525c:	200003ec 	.word	0x200003ec

08005260 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USS_Data4_Pin);
 8005264:	2004      	movs	r0, #4
 8005266:	f002 f905 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
}
 800526a:	bf00      	nop
 800526c:	bd80      	pop	{r7, pc}

0800526e <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 800526e:	b580      	push	{r7, lr}
 8005270:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8005272:	2001      	movs	r0, #1
 8005274:	f002 f8fe 	bl	8007474 <HAL_GPIO_EXTI_IRQHandler>
}
 8005278:	bf00      	nop
 800527a:	bd80      	pop	{r7, pc}

0800527c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005288:	2300      	movs	r3, #0
 800528a:	617b      	str	r3, [r7, #20]
 800528c:	e00a      	b.n	80052a4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800528e:	f3af 8000 	nop.w
 8005292:	4601      	mov	r1, r0
 8005294:	68bb      	ldr	r3, [r7, #8]
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	60ba      	str	r2, [r7, #8]
 800529a:	b2ca      	uxtb	r2, r1
 800529c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	3301      	adds	r3, #1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	697a      	ldr	r2, [r7, #20]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	429a      	cmp	r2, r3
 80052aa:	dbf0      	blt.n	800528e <_read+0x12>
	}

return len;
 80052ac:	687b      	ldr	r3, [r7, #4]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}

080052b6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80052b6:	b480      	push	{r7}
 80052b8:	b083      	sub	sp, #12
 80052ba:	af00      	add	r7, sp, #0
 80052bc:	6078      	str	r0, [r7, #4]
	return -1;
 80052be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	370c      	adds	r7, #12
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr

080052ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80052ce:	b480      	push	{r7}
 80052d0:	b083      	sub	sp, #12
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80052de:	605a      	str	r2, [r3, #4]
	return 0;
 80052e0:	2300      	movs	r3, #0
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	370c      	adds	r7, #12
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr

080052ee <_isatty>:

int _isatty(int file)
{
 80052ee:	b480      	push	{r7}
 80052f0:	b083      	sub	sp, #12
 80052f2:	af00      	add	r7, sp, #0
 80052f4:	6078      	str	r0, [r7, #4]
	return 1;
 80052f6:	2301      	movs	r3, #1
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005304:	b480      	push	{r7}
 8005306:	b085      	sub	sp, #20
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
	return 0;
 8005310:	2300      	movs	r3, #0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3714      	adds	r7, #20
 8005316:	46bd      	mov	sp, r7
 8005318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531c:	4770      	bx	lr
	...

08005320 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b086      	sub	sp, #24
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005328:	4a14      	ldr	r2, [pc, #80]	; (800537c <_sbrk+0x5c>)
 800532a:	4b15      	ldr	r3, [pc, #84]	; (8005380 <_sbrk+0x60>)
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005334:	4b13      	ldr	r3, [pc, #76]	; (8005384 <_sbrk+0x64>)
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d102      	bne.n	8005342 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800533c:	4b11      	ldr	r3, [pc, #68]	; (8005384 <_sbrk+0x64>)
 800533e:	4a12      	ldr	r2, [pc, #72]	; (8005388 <_sbrk+0x68>)
 8005340:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005342:	4b10      	ldr	r3, [pc, #64]	; (8005384 <_sbrk+0x64>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4413      	add	r3, r2
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	429a      	cmp	r2, r3
 800534e:	d207      	bcs.n	8005360 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005350:	f005 f8ca 	bl	800a4e8 <__errno>
 8005354:	4603      	mov	r3, r0
 8005356:	220c      	movs	r2, #12
 8005358:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800535a:	f04f 33ff 	mov.w	r3, #4294967295
 800535e:	e009      	b.n	8005374 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005360:	4b08      	ldr	r3, [pc, #32]	; (8005384 <_sbrk+0x64>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005366:	4b07      	ldr	r3, [pc, #28]	; (8005384 <_sbrk+0x64>)
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4413      	add	r3, r2
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <_sbrk+0x64>)
 8005370:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3718      	adds	r7, #24
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}
 800537c:	20050000 	.word	0x20050000
 8005380:	00000400 	.word	0x00000400
 8005384:	20000554 	.word	0x20000554
 8005388:	200005a0 	.word	0x200005a0

0800538c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800538c:	b480      	push	{r7}
 800538e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005390:	4b06      	ldr	r3, [pc, #24]	; (80053ac <SystemInit+0x20>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <SystemInit+0x20>)
 8005398:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800539c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053a0:	bf00      	nop
 80053a2:	46bd      	mov	sp, r7
 80053a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a8:	4770      	bx	lr
 80053aa:	bf00      	nop
 80053ac:	e000ed00 	.word	0xe000ed00

080053b0 <USSn_Trigger>:
extern uint32_t pre_usTick;



void USSn_Trigger(int USSn)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	uint32_t tmp = 0;
 80053b8:	2300      	movs	r3, #0
 80053ba:	60bb      	str	r3, [r7, #8]
	printf("flag11121\n");
 80053bc:	4852      	ldr	r0, [pc, #328]	; (8005508 <USSn_Trigger+0x158>)
 80053be:	f005 f94b 	bl	800a658 <puts>
	printf("HAL_TIM_Base_Start_IT (&htim5)\n");
 80053c2:	4852      	ldr	r0, [pc, #328]	; (800550c <USSn_Trigger+0x15c>)
 80053c4:	f005 f948 	bl	800a658 <puts>
	tmp=HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
 80053c8:	4851      	ldr	r0, [pc, #324]	; (8005510 <USSn_Trigger+0x160>)
 80053ca:	f003 f9cd 	bl	8008768 <HAL_TIM_Base_Start_IT>
 80053ce:	4603      	mov	r3, r0
 80053d0:	60bb      	str	r3, [r7, #8]

	printf("flag11122: %u\n", tmp);
 80053d2:	68b9      	ldr	r1, [r7, #8]
 80053d4:	484f      	ldr	r0, [pc, #316]	; (8005514 <USSn_Trigger+0x164>)
 80053d6:	f005 f8b9 	bl	800a54c <iprintf>
	switch(USSn){
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	3b01      	subs	r3, #1
 80053de:	2b05      	cmp	r3, #5
 80053e0:	d835      	bhi.n	800544e <USSn_Trigger+0x9e>
 80053e2:	a201      	add	r2, pc, #4	; (adr r2, 80053e8 <USSn_Trigger+0x38>)
 80053e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053e8:	08005401 	.word	0x08005401
 80053ec:	0800540d 	.word	0x0800540d
 80053f0:	0800541b 	.word	0x0800541b
 80053f4:	08005429 	.word	0x08005429
 80053f8:	08005437 	.word	0x08005437
 80053fc:	08005443 	.word	0x08005443
		case 1: USS1_Trigger_Set; break;
 8005400:	2201      	movs	r2, #1
 8005402:	2120      	movs	r1, #32
 8005404:	4844      	ldr	r0, [pc, #272]	; (8005518 <USSn_Trigger+0x168>)
 8005406:	f002 f801 	bl	800740c <HAL_GPIO_WritePin>
 800540a:	e020      	b.n	800544e <USSn_Trigger+0x9e>
		case 2: USS2_Trigger_Set; break;
 800540c:	2201      	movs	r2, #1
 800540e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005412:	4841      	ldr	r0, [pc, #260]	; (8005518 <USSn_Trigger+0x168>)
 8005414:	f001 fffa 	bl	800740c <HAL_GPIO_WritePin>
 8005418:	e019      	b.n	800544e <USSn_Trigger+0x9e>
		case 3: USS3_Trigger_Set; break;
 800541a:	2201      	movs	r2, #1
 800541c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005420:	483e      	ldr	r0, [pc, #248]	; (800551c <USSn_Trigger+0x16c>)
 8005422:	f001 fff3 	bl	800740c <HAL_GPIO_WritePin>
 8005426:	e012      	b.n	800544e <USSn_Trigger+0x9e>
		case 4: USS4_Trigger_Set; break;
 8005428:	2201      	movs	r2, #1
 800542a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800542e:	483b      	ldr	r0, [pc, #236]	; (800551c <USSn_Trigger+0x16c>)
 8005430:	f001 ffec 	bl	800740c <HAL_GPIO_WritePin>
 8005434:	e00b      	b.n	800544e <USSn_Trigger+0x9e>
		case 5: USS5_Trigger_Set; break;
 8005436:	2201      	movs	r2, #1
 8005438:	2140      	movs	r1, #64	; 0x40
 800543a:	4838      	ldr	r0, [pc, #224]	; (800551c <USSn_Trigger+0x16c>)
 800543c:	f001 ffe6 	bl	800740c <HAL_GPIO_WritePin>
 8005440:	e005      	b.n	800544e <USSn_Trigger+0x9e>
		case 6: USS6_Trigger_Set; break;
 8005442:	2201      	movs	r2, #1
 8005444:	2180      	movs	r1, #128	; 0x80
 8005446:	4836      	ldr	r0, [pc, #216]	; (8005520 <USSn_Trigger+0x170>)
 8005448:	f001 ffe0 	bl	800740c <HAL_GPIO_WritePin>
 800544c:	bf00      	nop
	}
	USS_start[USSn-1] = us_Tick;//start uss trigger
 800544e:	4b35      	ldr	r3, [pc, #212]	; (8005524 <USSn_Trigger+0x174>)
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	3b01      	subs	r3, #1
 8005456:	4611      	mov	r1, r2
 8005458:	4a33      	ldr	r2, [pc, #204]	; (8005528 <USSn_Trigger+0x178>)
 800545a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	pre_usTick = us_Tick;
 800545e:	4b31      	ldr	r3, [pc, #196]	; (8005524 <USSn_Trigger+0x174>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a32      	ldr	r2, [pc, #200]	; (800552c <USSn_Trigger+0x17c>)
 8005464:	6013      	str	r3, [r2, #0]
	printf("flag11123\n");
 8005466:	4832      	ldr	r0, [pc, #200]	; (8005530 <USSn_Trigger+0x180>)
 8005468:	f005 f8f6 	bl	800a658 <puts>
	for(int i=0;i<1000;i++){;}//wait about 200us
 800546c:	2300      	movs	r3, #0
 800546e:	60fb      	str	r3, [r7, #12]
 8005470:	e002      	b.n	8005478 <USSn_Trigger+0xc8>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800547e:	dbf8      	blt.n	8005472 <USSn_Trigger+0xc2>
	printf("flag11124\n");
 8005480:	482c      	ldr	r0, [pc, #176]	; (8005534 <USSn_Trigger+0x184>)
 8005482:	f005 f8e9 	bl	800a658 <puts>
	switch(USSn){
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	3b01      	subs	r3, #1
 800548a:	2b05      	cmp	r3, #5
 800548c:	d835      	bhi.n	80054fa <USSn_Trigger+0x14a>
 800548e:	a201      	add	r2, pc, #4	; (adr r2, 8005494 <USSn_Trigger+0xe4>)
 8005490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005494:	080054ad 	.word	0x080054ad
 8005498:	080054b9 	.word	0x080054b9
 800549c:	080054c7 	.word	0x080054c7
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054e3 	.word	0x080054e3
 80054a8:	080054ef 	.word	0x080054ef
		case 1: USS1_Trigger_ReSet; break;
 80054ac:	2200      	movs	r2, #0
 80054ae:	2120      	movs	r1, #32
 80054b0:	4819      	ldr	r0, [pc, #100]	; (8005518 <USSn_Trigger+0x168>)
 80054b2:	f001 ffab 	bl	800740c <HAL_GPIO_WritePin>
 80054b6:	e020      	b.n	80054fa <USSn_Trigger+0x14a>
		case 2: USS2_Trigger_ReSet; break;
 80054b8:	2200      	movs	r2, #0
 80054ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054be:	4816      	ldr	r0, [pc, #88]	; (8005518 <USSn_Trigger+0x168>)
 80054c0:	f001 ffa4 	bl	800740c <HAL_GPIO_WritePin>
 80054c4:	e019      	b.n	80054fa <USSn_Trigger+0x14a>
		case 3: USS3_Trigger_ReSet; break;
 80054c6:	2200      	movs	r2, #0
 80054c8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80054cc:	4813      	ldr	r0, [pc, #76]	; (800551c <USSn_Trigger+0x16c>)
 80054ce:	f001 ff9d 	bl	800740c <HAL_GPIO_WritePin>
 80054d2:	e012      	b.n	80054fa <USSn_Trigger+0x14a>
		case 4: USS4_Trigger_ReSet; break;
 80054d4:	2200      	movs	r2, #0
 80054d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80054da:	4810      	ldr	r0, [pc, #64]	; (800551c <USSn_Trigger+0x16c>)
 80054dc:	f001 ff96 	bl	800740c <HAL_GPIO_WritePin>
 80054e0:	e00b      	b.n	80054fa <USSn_Trigger+0x14a>
		case 5: USS5_Trigger_ReSet; break;
 80054e2:	2200      	movs	r2, #0
 80054e4:	2140      	movs	r1, #64	; 0x40
 80054e6:	480d      	ldr	r0, [pc, #52]	; (800551c <USSn_Trigger+0x16c>)
 80054e8:	f001 ff90 	bl	800740c <HAL_GPIO_WritePin>
 80054ec:	e005      	b.n	80054fa <USSn_Trigger+0x14a>
		case 6: USS6_Trigger_ReSet; break;
 80054ee:	2200      	movs	r2, #0
 80054f0:	2180      	movs	r1, #128	; 0x80
 80054f2:	480b      	ldr	r0, [pc, #44]	; (8005520 <USSn_Trigger+0x170>)
 80054f4:	f001 ff8a 	bl	800740c <HAL_GPIO_WritePin>
 80054f8:	bf00      	nop
	}
	printf("flag11125\n");
 80054fa:	480f      	ldr	r0, [pc, #60]	; (8005538 <USSn_Trigger+0x188>)
 80054fc:	f005 f8ac 	bl	800a658 <puts>
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	0800b7bc 	.word	0x0800b7bc
 800550c:	0800b7c8 	.word	0x0800b7c8
 8005510:	20000354 	.word	0x20000354
 8005514:	0800b7e8 	.word	0x0800b7e8
 8005518:	40020c00 	.word	0x40020c00
 800551c:	40020800 	.word	0x40020800
 8005520:	40021400 	.word	0x40021400
 8005524:	20000150 	.word	0x20000150
 8005528:	20000558 	.word	0x20000558
 800552c:	20000158 	.word	0x20000158
 8005530:	0800b7f8 	.word	0x0800b7f8
 8005534:	0800b804 	.word	0x0800b804
 8005538:	0800b810 	.word	0x0800b810
 800553c:	00000000 	.word	0x00000000

08005540 <USSn_DataRead>:

uint8_t USSn_DataRead(int USSn)
{
 8005540:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
	int32_t USS_tmp = 0;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
	int32_t USS_calc = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
	printf("flag1111\n");
 8005552:	486d      	ldr	r0, [pc, #436]	; (8005708 <USSn_DataRead+0x1c8>)
 8005554:	f005 f880 	bl	800a658 <puts>
	USS_tmp = USS_end[USSn-1]-USS_start[USSn-1];
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	3b01      	subs	r3, #1
 800555c:	4a6b      	ldr	r2, [pc, #428]	; (800570c <USSn_DataRead+0x1cc>)
 800555e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	3b01      	subs	r3, #1
 8005566:	496a      	ldr	r1, [pc, #424]	; (8005710 <USSn_DataRead+0x1d0>)
 8005568:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800556c:	1ad3      	subs	r3, r2, r3
 800556e:	60fb      	str	r3, [r7, #12]
	USS_calc = (0.0361*(float)USS_tmp)*(0.001*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^3, (0.0361*10^-6)*x^3
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	ee07 3a90 	vmov	s15, r3
 8005576:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800557a:	ee17 0a90 	vmov	r0, s15
 800557e:	f7fa fffb 	bl	8000578 <__aeabi_f2d>
 8005582:	a359      	add	r3, pc, #356	; (adr r3, 80056e8 <USSn_DataRead+0x1a8>)
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	f7fb f84e 	bl	8000628 <__aeabi_dmul>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4614      	mov	r4, r2
 8005592:	461d      	mov	r5, r3
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	ee07 3a90 	vmov	s15, r3
 800559a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800559e:	ee17 0a90 	vmov	r0, s15
 80055a2:	f7fa ffe9 	bl	8000578 <__aeabi_f2d>
 80055a6:	a352      	add	r3, pc, #328	; (adr r3, 80056f0 <USSn_DataRead+0x1b0>)
 80055a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ac:	f7fb f83c 	bl	8000628 <__aeabi_dmul>
 80055b0:	4602      	mov	r2, r0
 80055b2:	460b      	mov	r3, r1
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fb f836 	bl	8000628 <__aeabi_dmul>
 80055bc:	4602      	mov	r2, r0
 80055be:	460b      	mov	r3, r1
 80055c0:	4614      	mov	r4, r2
 80055c2:	461d      	mov	r5, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	ee07 3a90 	vmov	s15, r3
 80055ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055ce:	ee17 0a90 	vmov	r0, s15
 80055d2:	f7fa ffd1 	bl	8000578 <__aeabi_f2d>
 80055d6:	a346      	add	r3, pc, #280	; (adr r3, 80056f0 <USSn_DataRead+0x1b0>)
 80055d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055dc:	f7fb f824 	bl	8000628 <__aeabi_dmul>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4620      	mov	r0, r4
 80055e6:	4629      	mov	r1, r5
 80055e8:	f7fb f81e 	bl	8000628 <__aeabi_dmul>
 80055ec:	4602      	mov	r2, r0
 80055ee:	460b      	mov	r3, r1
 80055f0:	4610      	mov	r0, r2
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fb fab2 	bl	8000b5c <__aeabi_d2iz>
 80055f8:	4603      	mov	r3, r0
 80055fa:	60bb      	str	r3, [r7, #8]
	//printf("x3[0]: %d \n", USS_calc[0]);
	USS_calc -= (0.108*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^2, (0.108*10^-3)*x^2
 80055fc:	68b8      	ldr	r0, [r7, #8]
 80055fe:	f7fa ffa9 	bl	8000554 <__aeabi_i2d>
 8005602:	4604      	mov	r4, r0
 8005604:	460d      	mov	r5, r1
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	ee07 3a90 	vmov	s15, r3
 800560c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005610:	ee17 0a90 	vmov	r0, s15
 8005614:	f7fa ffb0 	bl	8000578 <__aeabi_f2d>
 8005618:	a337      	add	r3, pc, #220	; (adr r3, 80056f8 <USSn_DataRead+0x1b8>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fb f803 	bl	8000628 <__aeabi_dmul>
 8005622:	4602      	mov	r2, r0
 8005624:	460b      	mov	r3, r1
 8005626:	4690      	mov	r8, r2
 8005628:	4699      	mov	r9, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	ee07 3a90 	vmov	s15, r3
 8005630:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005634:	ee17 0a90 	vmov	r0, s15
 8005638:	f7fa ff9e 	bl	8000578 <__aeabi_f2d>
 800563c:	a32c      	add	r3, pc, #176	; (adr r3, 80056f0 <USSn_DataRead+0x1b0>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fff1 	bl	8000628 <__aeabi_dmul>
 8005646:	4602      	mov	r2, r0
 8005648:	460b      	mov	r3, r1
 800564a:	4640      	mov	r0, r8
 800564c:	4649      	mov	r1, r9
 800564e:	f7fa ffeb 	bl	8000628 <__aeabi_dmul>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	4620      	mov	r0, r4
 8005658:	4629      	mov	r1, r5
 800565a:	f7fa fe2d 	bl	80002b8 <__aeabi_dsub>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4610      	mov	r0, r2
 8005664:	4619      	mov	r1, r3
 8005666:	f7fb fa79 	bl	8000b5c <__aeabi_d2iz>
 800566a:	4603      	mov	r3, r0
 800566c:	60bb      	str	r3, [r7, #8]
	//printf("x2[0]: %d \n", USS_calc[0]);
	USS_calc += (0.933*(float)USS_tmp);//x^1, (0.933)*x^1
 800566e:	68b8      	ldr	r0, [r7, #8]
 8005670:	f7fa ff70 	bl	8000554 <__aeabi_i2d>
 8005674:	4604      	mov	r4, r0
 8005676:	460d      	mov	r5, r1
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	ee07 3a90 	vmov	s15, r3
 800567e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005682:	ee17 0a90 	vmov	r0, s15
 8005686:	f7fa ff77 	bl	8000578 <__aeabi_f2d>
 800568a:	a31d      	add	r3, pc, #116	; (adr r3, 8005700 <USSn_DataRead+0x1c0>)
 800568c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005690:	f7fa ffca 	bl	8000628 <__aeabi_dmul>
 8005694:	4602      	mov	r2, r0
 8005696:	460b      	mov	r3, r1
 8005698:	4620      	mov	r0, r4
 800569a:	4629      	mov	r1, r5
 800569c:	f7fa fe0e 	bl	80002bc <__adddf3>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4610      	mov	r0, r2
 80056a6:	4619      	mov	r1, r3
 80056a8:	f7fb fa58 	bl	8000b5c <__aeabi_d2iz>
 80056ac:	4603      	mov	r3, r0
 80056ae:	60bb      	str	r3, [r7, #8]
	//printf("x1[0]: %d \n", USS_calc[0]);
	USS_calc -= 41;//x^0, constant
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	3b29      	subs	r3, #41	; 0x29
 80056b4:	60bb      	str	r3, [r7, #8]
	//USS_calc[0]=(USS_end[0]-USS_start[0]);
	//printf("USS_calc[0]: %d \n", USS_calc);
	//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start[0], USS_end[0], (USS_end[0]-USS_start[0]));
	printf("flag1112\n");
 80056b6:	4817      	ldr	r0, [pc, #92]	; (8005714 <USSn_DataRead+0x1d4>)
 80056b8:	f004 ffce 	bl	800a658 <puts>
	USSn_Trigger(USSn);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f7ff fe77 	bl	80053b0 <USSn_Trigger>
	printf("flag1113\n");
 80056c2:	4815      	ldr	r0, [pc, #84]	; (8005718 <USSn_DataRead+0x1d8>)
 80056c4:	f004 ffc8 	bl	800a658 <puts>
	if((USS_calc<=19) || (USS_calc>250)) {return 0;}
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	2b13      	cmp	r3, #19
 80056cc:	dd02      	ble.n	80056d4 <USSn_DataRead+0x194>
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	2bfa      	cmp	r3, #250	; 0xfa
 80056d2:	dd01      	ble.n	80056d8 <USSn_DataRead+0x198>
 80056d4:	2300      	movs	r3, #0
 80056d6:	e001      	b.n	80056dc <USSn_DataRead+0x19c>

	return USS_calc;
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	b2db      	uxtb	r3, r3
}
 80056dc:	4618      	mov	r0, r3
 80056de:	3710      	adds	r7, #16
 80056e0:	46bd      	mov	sp, r7
 80056e2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80056e6:	bf00      	nop
 80056e8:	fec56d5d 	.word	0xfec56d5d
 80056ec:	3fa27bb2 	.word	0x3fa27bb2
 80056f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80056f4:	3f50624d 	.word	0x3f50624d
 80056f8:	53f7ced9 	.word	0x53f7ced9
 80056fc:	3fbba5e3 	.word	0x3fbba5e3
 8005700:	d0e56042 	.word	0xd0e56042
 8005704:	3feddb22 	.word	0x3feddb22
 8005708:	0800b81c 	.word	0x0800b81c
 800570c:	20000570 	.word	0x20000570
 8005710:	20000558 	.word	0x20000558
 8005714:	0800b828 	.word	0x0800b828
 8005718:	0800b834 	.word	0x0800b834

0800571c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800571c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005720:	480d      	ldr	r0, [pc, #52]	; (8005758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005722:	490e      	ldr	r1, [pc, #56]	; (800575c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005724:	4a0e      	ldr	r2, [pc, #56]	; (8005760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005728:	e002      	b.n	8005730 <LoopCopyDataInit>

0800572a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800572a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800572c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800572e:	3304      	adds	r3, #4

08005730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005734:	d3f9      	bcc.n	800572a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005736:	4a0b      	ldr	r2, [pc, #44]	; (8005764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005738:	4c0b      	ldr	r4, [pc, #44]	; (8005768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800573a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800573c:	e001      	b.n	8005742 <LoopFillZerobss>

0800573e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800573e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005740:	3204      	adds	r2, #4

08005742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005744:	d3fb      	bcc.n	800573e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005746:	f7ff fe21 	bl	800538c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800574a:	f004 fed3 	bl	800a4f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800574e:	f7fe f82b 	bl	80037a8 <main>
  bx  lr    
 8005752:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005754:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800575c:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8005760:	0800b934 	.word	0x0800b934
  ldr r2, =_sbss
 8005764:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8005768:	200005a0 	.word	0x200005a0

0800576c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800576c:	e7fe      	b.n	800576c <ADC_IRQHandler>

0800576e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005772:	2003      	movs	r0, #3
 8005774:	f001 fc36 	bl	8006fe4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005778:	200f      	movs	r0, #15
 800577a:	f000 f805 	bl	8005788 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800577e:	f7ff fb03 	bl	8004d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	bd80      	pop	{r7, pc}

08005788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005790:	4b12      	ldr	r3, [pc, #72]	; (80057dc <HAL_InitTick+0x54>)
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	4b12      	ldr	r3, [pc, #72]	; (80057e0 <HAL_InitTick+0x58>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800579e:	fbb3 f3f1 	udiv	r3, r3, r1
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fc5f 	bl	800706a <HAL_SYSTICK_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e00e      	b.n	80057d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2b0f      	cmp	r3, #15
 80057ba:	d80a      	bhi.n	80057d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057bc:	2200      	movs	r2, #0
 80057be:	6879      	ldr	r1, [r7, #4]
 80057c0:	f04f 30ff 	mov.w	r0, #4294967295
 80057c4:	f001 fc19 	bl	8006ffa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80057c8:	4a06      	ldr	r2, [pc, #24]	; (80057e4 <HAL_InitTick+0x5c>)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80057ce:	2300      	movs	r3, #0
 80057d0:	e000      	b.n	80057d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000064 	.word	0x20000064
 80057e0:	2000006c 	.word	0x2000006c
 80057e4:	20000068 	.word	0x20000068

080057e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057e8:	b480      	push	{r7}
 80057ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057ec:	4b06      	ldr	r3, [pc, #24]	; (8005808 <HAL_IncTick+0x20>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	461a      	mov	r2, r3
 80057f2:	4b06      	ldr	r3, [pc, #24]	; (800580c <HAL_IncTick+0x24>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4413      	add	r3, r2
 80057f8:	4a04      	ldr	r2, [pc, #16]	; (800580c <HAL_IncTick+0x24>)
 80057fa:	6013      	str	r3, [r2, #0]
}
 80057fc:	bf00      	nop
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	2000006c 	.word	0x2000006c
 800580c:	2000058c 	.word	0x2000058c

08005810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return uwTick;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <HAL_GetTick+0x14>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	2000058c 	.word	0x2000058c

08005828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005830:	f7ff ffee 	bl	8005810 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005840:	d005      	beq.n	800584e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005842:	4b0a      	ldr	r3, [pc, #40]	; (800586c <HAL_Delay+0x44>)
 8005844:	781b      	ldrb	r3, [r3, #0]
 8005846:	461a      	mov	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	4413      	add	r3, r2
 800584c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800584e:	bf00      	nop
 8005850:	f7ff ffde 	bl	8005810 <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	429a      	cmp	r2, r3
 800585e:	d8f7      	bhi.n	8005850 <HAL_Delay+0x28>
  {
  }
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	3710      	adds	r7, #16
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	2000006c 	.word	0x2000006c

08005870 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005878:	2300      	movs	r3, #0
 800587a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d101      	bne.n	8005886 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e031      	b.n	80058ea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d109      	bne.n	80058a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f7ff fa9e 	bl	8004dd0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2200      	movs	r2, #0
 8005898:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	f003 0310 	and.w	r3, r3, #16
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d116      	bne.n	80058dc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b2:	4b10      	ldr	r3, [pc, #64]	; (80058f4 <HAL_ADC_Init+0x84>)
 80058b4:	4013      	ands	r3, r2
 80058b6:	f043 0202 	orr.w	r2, r3, #2
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f000 fb0a 	bl	8005ed8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ce:	f023 0303 	bic.w	r3, r3, #3
 80058d2:	f043 0201 	orr.w	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	641a      	str	r2, [r3, #64]	; 0x40
 80058da:	e001      	b.n	80058e0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2200      	movs	r2, #0
 80058e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	ffffeefd 	.word	0xffffeefd

080058f8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005900:	2300      	movs	r3, #0
 8005902:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800590a:	2b01      	cmp	r3, #1
 800590c:	d101      	bne.n	8005912 <HAL_ADC_Start+0x1a>
 800590e:	2302      	movs	r3, #2
 8005910:	e0ad      	b.n	8005a6e <HAL_ADC_Start+0x176>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f003 0301 	and.w	r3, r3, #1
 8005924:	2b01      	cmp	r3, #1
 8005926:	d018      	beq.n	800595a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f042 0201 	orr.w	r2, r2, #1
 8005936:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005938:	4b50      	ldr	r3, [pc, #320]	; (8005a7c <HAL_ADC_Start+0x184>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a50      	ldr	r2, [pc, #320]	; (8005a80 <HAL_ADC_Start+0x188>)
 800593e:	fba2 2303 	umull	r2, r3, r2, r3
 8005942:	0c9a      	lsrs	r2, r3, #18
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800594c:	e002      	b.n	8005954 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3b01      	subs	r3, #1
 8005952:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d1f9      	bne.n	800594e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d175      	bne.n	8005a54 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800596c:	4b45      	ldr	r3, [pc, #276]	; (8005a84 <HAL_ADC_Start+0x18c>)
 800596e:	4013      	ands	r3, r2
 8005970:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005982:	2b00      	cmp	r3, #0
 8005984:	d007      	beq.n	8005996 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800598e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800599a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800599e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059a2:	d106      	bne.n	80059b2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	f023 0206 	bic.w	r2, r3, #6
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
 80059b0:	e002      	b.n	80059b8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80059c8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80059ca:	4b2f      	ldr	r3, [pc, #188]	; (8005a88 <HAL_ADC_Start+0x190>)
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f003 031f 	and.w	r3, r3, #31
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10f      	bne.n	80059f6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d143      	bne.n	8005a6c <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80059f2:	609a      	str	r2, [r3, #8]
 80059f4:	e03a      	b.n	8005a6c <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a24      	ldr	r2, [pc, #144]	; (8005a8c <HAL_ADC_Start+0x194>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10e      	bne.n	8005a1e <HAL_ADC_Start+0x126>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d107      	bne.n	8005a1e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	689a      	ldr	r2, [r3, #8]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a1c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005a1e:	4b1a      	ldr	r3, [pc, #104]	; (8005a88 <HAL_ADC_Start+0x190>)
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	f003 0310 	and.w	r3, r3, #16
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d120      	bne.n	8005a6c <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a18      	ldr	r2, [pc, #96]	; (8005a90 <HAL_ADC_Start+0x198>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d11b      	bne.n	8005a6c <HAL_ADC_Start+0x174>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d114      	bne.n	8005a6c <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689a      	ldr	r2, [r3, #8]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005a50:	609a      	str	r2, [r3, #8]
 8005a52:	e00b      	b.n	8005a6c <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	f043 0210 	orr.w	r2, r3, #16
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a64:	f043 0201 	orr.w	r2, r3, #1
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3714      	adds	r7, #20
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	20000064 	.word	0x20000064
 8005a80:	431bde83 	.word	0x431bde83
 8005a84:	fffff8fe 	.word	0xfffff8fe
 8005a88:	40012300 	.word	0x40012300
 8005a8c:	40012000 	.word	0x40012000
 8005a90:	40012200 	.word	0x40012200

08005a94 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b083      	sub	sp, #12
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aa2:	2b01      	cmp	r3, #1
 8005aa4:	d101      	bne.n	8005aaa <HAL_ADC_Stop+0x16>
 8005aa6:	2302      	movs	r3, #2
 8005aa8:	e01f      	b.n	8005aea <HAL_ADC_Stop+0x56>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	689a      	ldr	r2, [r3, #8]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f022 0201 	bic.w	r2, r2, #1
 8005ac0:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d107      	bne.n	8005ae0 <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ad4:	4b08      	ldr	r3, [pc, #32]	; (8005af8 <HAL_ADC_Stop+0x64>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	f043 0201 	orr.w	r2, r3, #1
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	ffffeefe 	.word	0xffffeefe

08005afc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005b06:	2300      	movs	r3, #0
 8005b08:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b18:	d113      	bne.n	8005b42 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005b24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b28:	d10b      	bne.n	8005b42 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	f043 0220 	orr.w	r2, r3, #32
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e063      	b.n	8005c0a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005b42:	f7ff fe65 	bl	8005810 <HAL_GetTick>
 8005b46:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b48:	e021      	b.n	8005b8e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b50:	d01d      	beq.n	8005b8e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d007      	beq.n	8005b68 <HAL_ADC_PollForConversion+0x6c>
 8005b58:	f7ff fe5a 	bl	8005810 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d212      	bcs.n	8005b8e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 0302 	and.w	r3, r3, #2
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d00b      	beq.n	8005b8e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7a:	f043 0204 	orr.w	r2, r3, #4
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e03d      	b.n	8005c0a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d1d6      	bne.n	8005b4a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0212 	mvn.w	r2, #18
 8005ba4:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005baa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d123      	bne.n	8005c08 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d11f      	bne.n	8005c08 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d006      	beq.n	8005be4 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d111      	bne.n	8005c08 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d105      	bne.n	8005c08 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c00:	f043 0201 	orr.w	r2, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d101      	bne.n	8005c48 <HAL_ADC_ConfigChannel+0x1c>
 8005c44:	2302      	movs	r3, #2
 8005c46:	e136      	b.n	8005eb6 <HAL_ADC_ConfigChannel+0x28a>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b09      	cmp	r3, #9
 8005c56:	d93a      	bls.n	8005cce <HAL_ADC_ConfigChannel+0xa2>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c60:	d035      	beq.n	8005cce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68d9      	ldr	r1, [r3, #12]
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4613      	mov	r3, r2
 8005c72:	005b      	lsls	r3, r3, #1
 8005c74:	4413      	add	r3, r2
 8005c76:	3b1e      	subs	r3, #30
 8005c78:	2207      	movs	r2, #7
 8005c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c7e:	43da      	mvns	r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	400a      	ands	r2, r1
 8005c86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4a8d      	ldr	r2, [pc, #564]	; (8005ec4 <HAL_ADC_ConfigChannel+0x298>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d10a      	bne.n	8005ca8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68d9      	ldr	r1, [r3, #12]
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	061a      	lsls	r2, r3, #24
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	430a      	orrs	r2, r1
 8005ca4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ca6:	e035      	b.n	8005d14 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68d9      	ldr	r1, [r3, #12]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	689a      	ldr	r2, [r3, #8]
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	4618      	mov	r0, r3
 8005cba:	4603      	mov	r3, r0
 8005cbc:	005b      	lsls	r3, r3, #1
 8005cbe:	4403      	add	r3, r0
 8005cc0:	3b1e      	subs	r3, #30
 8005cc2:	409a      	lsls	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ccc:	e022      	b.n	8005d14 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6919      	ldr	r1, [r3, #16]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4613      	mov	r3, r2
 8005cde:	005b      	lsls	r3, r3, #1
 8005ce0:	4413      	add	r3, r2
 8005ce2:	2207      	movs	r2, #7
 8005ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ce8:	43da      	mvns	r2, r3
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	400a      	ands	r2, r1
 8005cf0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	6919      	ldr	r1, [r3, #16]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	689a      	ldr	r2, [r3, #8]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	4618      	mov	r0, r3
 8005d04:	4603      	mov	r3, r0
 8005d06:	005b      	lsls	r3, r3, #1
 8005d08:	4403      	add	r3, r0
 8005d0a:	409a      	lsls	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	430a      	orrs	r2, r1
 8005d12:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	685b      	ldr	r3, [r3, #4]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d824      	bhi.n	8005d66 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	685a      	ldr	r2, [r3, #4]
 8005d26:	4613      	mov	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	4413      	add	r3, r2
 8005d2c:	3b05      	subs	r3, #5
 8005d2e:	221f      	movs	r2, #31
 8005d30:	fa02 f303 	lsl.w	r3, r2, r3
 8005d34:	43da      	mvns	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	400a      	ands	r2, r1
 8005d3c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	685a      	ldr	r2, [r3, #4]
 8005d50:	4613      	mov	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	4413      	add	r3, r2
 8005d56:	3b05      	subs	r3, #5
 8005d58:	fa00 f203 	lsl.w	r2, r0, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	430a      	orrs	r2, r1
 8005d62:	635a      	str	r2, [r3, #52]	; 0x34
 8005d64:	e04c      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	2b0c      	cmp	r3, #12
 8005d6c:	d824      	bhi.n	8005db8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	3b23      	subs	r3, #35	; 0x23
 8005d80:	221f      	movs	r2, #31
 8005d82:	fa02 f303 	lsl.w	r3, r2, r3
 8005d86:	43da      	mvns	r2, r3
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	400a      	ands	r2, r1
 8005d8e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	4613      	mov	r3, r2
 8005da4:	009b      	lsls	r3, r3, #2
 8005da6:	4413      	add	r3, r2
 8005da8:	3b23      	subs	r3, #35	; 0x23
 8005daa:	fa00 f203 	lsl.w	r2, r0, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	430a      	orrs	r2, r1
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30
 8005db6:	e023      	b.n	8005e00 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	3b41      	subs	r3, #65	; 0x41
 8005dca:	221f      	movs	r2, #31
 8005dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd0:	43da      	mvns	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	400a      	ands	r2, r1
 8005dd8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	4618      	mov	r0, r3
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	685a      	ldr	r2, [r3, #4]
 8005dec:	4613      	mov	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4413      	add	r3, r2
 8005df2:	3b41      	subs	r3, #65	; 0x41
 8005df4:	fa00 f203 	lsl.w	r2, r0, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	430a      	orrs	r2, r1
 8005dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a30      	ldr	r2, [pc, #192]	; (8005ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d10a      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x1f4>
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e12:	d105      	bne.n	8005e20 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005e14:	4b2d      	ldr	r3, [pc, #180]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4a2c      	ldr	r2, [pc, #176]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e1a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005e1e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a28      	ldr	r2, [pc, #160]	; (8005ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d10f      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x21e>
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b12      	cmp	r3, #18
 8005e30:	d10b      	bne.n	8005e4a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8005e32:	4b26      	ldr	r3, [pc, #152]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	4a25      	ldr	r2, [pc, #148]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e38:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005e3c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005e3e:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e40:	685b      	ldr	r3, [r3, #4]
 8005e42:	4a22      	ldr	r2, [pc, #136]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e44:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005e48:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ec8 <HAL_ADC_ConfigChannel+0x29c>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d12b      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x280>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1a      	ldr	r2, [pc, #104]	; (8005ec4 <HAL_ADC_ConfigChannel+0x298>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d003      	beq.n	8005e66 <HAL_ADC_ConfigChannel+0x23a>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2b11      	cmp	r3, #17
 8005e64:	d122      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005e66:	4b19      	ldr	r3, [pc, #100]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e6c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8005e70:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005e72:	4b16      	ldr	r3, [pc, #88]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	4a15      	ldr	r2, [pc, #84]	; (8005ecc <HAL_ADC_ConfigChannel+0x2a0>)
 8005e78:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005e7c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a10      	ldr	r2, [pc, #64]	; (8005ec4 <HAL_ADC_ConfigChannel+0x298>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d111      	bne.n	8005eac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005e88:	4b11      	ldr	r3, [pc, #68]	; (8005ed0 <HAL_ADC_ConfigChannel+0x2a4>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	4a11      	ldr	r2, [pc, #68]	; (8005ed4 <HAL_ADC_ConfigChannel+0x2a8>)
 8005e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e92:	0c9a      	lsrs	r2, r3, #18
 8005e94:	4613      	mov	r3, r2
 8005e96:	009b      	lsls	r3, r3, #2
 8005e98:	4413      	add	r3, r2
 8005e9a:	005b      	lsls	r3, r3, #1
 8005e9c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005e9e:	e002      	b.n	8005ea6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3b01      	subs	r3, #1
 8005ea4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d1f9      	bne.n	8005ea0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005eb4:	2300      	movs	r3, #0
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3714      	adds	r7, #20
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	10000012 	.word	0x10000012
 8005ec8:	40012000 	.word	0x40012000
 8005ecc:	40012300 	.word	0x40012300
 8005ed0:	20000064 	.word	0x20000064
 8005ed4:	431bde83 	.word	0x431bde83

08005ed8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005ee0:	4b78      	ldr	r3, [pc, #480]	; (80060c4 <ADC_Init+0x1ec>)
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	4a77      	ldr	r2, [pc, #476]	; (80060c4 <ADC_Init+0x1ec>)
 8005ee6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005eea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005eec:	4b75      	ldr	r3, [pc, #468]	; (80060c4 <ADC_Init+0x1ec>)
 8005eee:	685a      	ldr	r2, [r3, #4]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	4973      	ldr	r1, [pc, #460]	; (80060c4 <ADC_Init+0x1ec>)
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005f08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6859      	ldr	r1, [r3, #4]
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	021a      	lsls	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	685a      	ldr	r2, [r3, #4]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005f2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	6859      	ldr	r1, [r3, #4]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	689a      	ldr	r2, [r3, #8]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	430a      	orrs	r2, r1
 8005f3e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689a      	ldr	r2, [r3, #8]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	6899      	ldr	r1, [r3, #8]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	68da      	ldr	r2, [r3, #12]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	430a      	orrs	r2, r1
 8005f60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	4a58      	ldr	r2, [pc, #352]	; (80060c8 <ADC_Init+0x1f0>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d022      	beq.n	8005fb2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	689a      	ldr	r2, [r3, #8]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	6899      	ldr	r1, [r3, #8]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	430a      	orrs	r2, r1
 8005f8c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	689a      	ldr	r2, [r3, #8]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	6899      	ldr	r1, [r3, #8]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	430a      	orrs	r2, r1
 8005fae:	609a      	str	r2, [r3, #8]
 8005fb0:	e00f      	b.n	8005fd2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	689a      	ldr	r2, [r3, #8]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005fc0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	689a      	ldr	r2, [r3, #8]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005fd0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f022 0202 	bic.w	r2, r2, #2
 8005fe0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6899      	ldr	r1, [r3, #8]
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	699b      	ldr	r3, [r3, #24]
 8005fec:	005a      	lsls	r2, r3, #1
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	430a      	orrs	r2, r1
 8005ff4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d01b      	beq.n	8006038 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800600e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	685a      	ldr	r2, [r3, #4]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800601e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	6859      	ldr	r1, [r3, #4]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602a:	3b01      	subs	r3, #1
 800602c:	035a      	lsls	r2, r3, #13
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
 8006036:	e007      	b.n	8006048 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	685a      	ldr	r2, [r3, #4]
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006046:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8006056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	69db      	ldr	r3, [r3, #28]
 8006062:	3b01      	subs	r3, #1
 8006064:	051a      	lsls	r2, r3, #20
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	430a      	orrs	r2, r1
 800606c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689a      	ldr	r2, [r3, #8]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800607c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	6899      	ldr	r1, [r3, #8]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800608a:	025a      	lsls	r2, r3, #9
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	689a      	ldr	r2, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	6899      	ldr	r1, [r3, #8]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	695b      	ldr	r3, [r3, #20]
 80060ae:	029a      	lsls	r2, r3, #10
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	430a      	orrs	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
}
 80060b8:	bf00      	nop
 80060ba:	370c      	adds	r7, #12
 80060bc:	46bd      	mov	sp, r7
 80060be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c2:	4770      	bx	lr
 80060c4:	40012300 	.word	0x40012300
 80060c8:	0f000001 	.word	0x0f000001

080060cc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d101      	bne.n	80060de <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	e0ed      	b.n	80062ba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d102      	bne.n	80060f0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f7fe feb0 	bl	8004e50 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f042 0201 	orr.w	r2, r2, #1
 80060fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006100:	f7ff fb86 	bl	8005810 <HAL_GetTick>
 8006104:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006106:	e012      	b.n	800612e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006108:	f7ff fb82 	bl	8005810 <HAL_GetTick>
 800610c:	4602      	mov	r2, r0
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	1ad3      	subs	r3, r2, r3
 8006112:	2b0a      	cmp	r3, #10
 8006114:	d90b      	bls.n	800612e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800611a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2205      	movs	r2, #5
 8006126:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800612a:	2301      	movs	r3, #1
 800612c:	e0c5      	b.n	80062ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	f003 0301 	and.w	r3, r3, #1
 8006138:	2b00      	cmp	r3, #0
 800613a:	d0e5      	beq.n	8006108 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f022 0202 	bic.w	r2, r2, #2
 800614a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800614c:	f7ff fb60 	bl	8005810 <HAL_GetTick>
 8006150:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006152:	e012      	b.n	800617a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006154:	f7ff fb5c 	bl	8005810 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	2b0a      	cmp	r3, #10
 8006160:	d90b      	bls.n	800617a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006166:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2205      	movs	r2, #5
 8006172:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e09f      	b.n	80062ba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	f003 0302 	and.w	r3, r3, #2
 8006184:	2b00      	cmp	r3, #0
 8006186:	d1e5      	bne.n	8006154 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	7e1b      	ldrb	r3, [r3, #24]
 800618c:	2b01      	cmp	r3, #1
 800618e:	d108      	bne.n	80061a2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800619e:	601a      	str	r2, [r3, #0]
 80061a0:	e007      	b.n	80061b2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	7e5b      	ldrb	r3, [r3, #25]
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d108      	bne.n	80061cc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e007      	b.n	80061dc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061da:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	7e9b      	ldrb	r3, [r3, #26]
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d108      	bne.n	80061f6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0220 	orr.w	r2, r2, #32
 80061f2:	601a      	str	r2, [r3, #0]
 80061f4:	e007      	b.n	8006206 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0220 	bic.w	r2, r2, #32
 8006204:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	7edb      	ldrb	r3, [r3, #27]
 800620a:	2b01      	cmp	r3, #1
 800620c:	d108      	bne.n	8006220 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f022 0210 	bic.w	r2, r2, #16
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e007      	b.n	8006230 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0210 	orr.w	r2, r2, #16
 800622e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	7f1b      	ldrb	r3, [r3, #28]
 8006234:	2b01      	cmp	r3, #1
 8006236:	d108      	bne.n	800624a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f042 0208 	orr.w	r2, r2, #8
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	e007      	b.n	800625a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0208 	bic.w	r2, r2, #8
 8006258:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7f5b      	ldrb	r3, [r3, #29]
 800625e:	2b01      	cmp	r3, #1
 8006260:	d108      	bne.n	8006274 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	681a      	ldr	r2, [r3, #0]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f042 0204 	orr.w	r2, r2, #4
 8006270:	601a      	str	r2, [r3, #0]
 8006272:	e007      	b.n	8006284 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 0204 	bic.w	r2, r2, #4
 8006282:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	689a      	ldr	r2, [r3, #8]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68db      	ldr	r3, [r3, #12]
 800628c:	431a      	orrs	r2, r3
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	691b      	ldr	r3, [r3, #16]
 8006292:	431a      	orrs	r2, r3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	ea42 0103 	orr.w	r1, r2, r3
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	1e5a      	subs	r2, r3, #1
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2200      	movs	r2, #0
 80062ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b087      	sub	sp, #28
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062da:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d003      	beq.n	80062ea <HAL_CAN_ConfigFilter+0x26>
 80062e2:	7cfb      	ldrb	r3, [r7, #19]
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	f040 80be 	bne.w	8006466 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80062ea:	4b65      	ldr	r3, [pc, #404]	; (8006480 <HAL_CAN_ConfigFilter+0x1bc>)
 80062ec:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80062f4:	f043 0201 	orr.w	r2, r3, #1
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006304:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	431a      	orrs	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	f003 031f 	and.w	r3, r3, #31
 800632a:	2201      	movs	r2, #1
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	43db      	mvns	r3, r3
 800633c:	401a      	ands	r2, r3
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d123      	bne.n	8006394 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	43db      	mvns	r3, r3
 8006356:	401a      	ands	r2, r3
 8006358:	697b      	ldr	r3, [r7, #20]
 800635a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800636a:	683a      	ldr	r2, [r7, #0]
 800636c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800636e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	3248      	adds	r2, #72	; 0x48
 8006374:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006388:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800638a:	6979      	ldr	r1, [r7, #20]
 800638c:	3348      	adds	r3, #72	; 0x48
 800638e:	00db      	lsls	r3, r3, #3
 8006390:	440b      	add	r3, r1
 8006392:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	69db      	ldr	r3, [r3, #28]
 8006398:	2b01      	cmp	r3, #1
 800639a:	d122      	bne.n	80063e2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	431a      	orrs	r2, r3
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80063b2:	683b      	ldr	r3, [r7, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063b8:	683a      	ldr	r2, [r7, #0]
 80063ba:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80063bc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	3248      	adds	r2, #72	; 0x48
 80063c2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80063d6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80063d8:	6979      	ldr	r1, [r7, #20]
 80063da:	3348      	adds	r3, #72	; 0x48
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	440b      	add	r3, r1
 80063e0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	699b      	ldr	r3, [r3, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d109      	bne.n	80063fe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	43db      	mvns	r3, r3
 80063f4:	401a      	ands	r2, r3
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80063fc:	e007      	b.n	800640e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	431a      	orrs	r2, r3
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d109      	bne.n	800642a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	43db      	mvns	r3, r3
 8006420:	401a      	ands	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8006428:	e007      	b.n	800643a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	431a      	orrs	r2, r3
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d107      	bne.n	8006452 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	431a      	orrs	r2, r3
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006458:	f023 0201 	bic.w	r2, r3, #1
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006462:	2300      	movs	r3, #0
 8006464:	e006      	b.n	8006474 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800646a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
  }
}
 8006474:	4618      	mov	r0, r3
 8006476:	371c      	adds	r7, #28
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	40006400 	.word	0x40006400

08006484 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	2b01      	cmp	r3, #1
 8006496:	d12e      	bne.n	80064f6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	681a      	ldr	r2, [r3, #0]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f022 0201 	bic.w	r2, r2, #1
 80064ae:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80064b0:	f7ff f9ae 	bl	8005810 <HAL_GetTick>
 80064b4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80064b6:	e012      	b.n	80064de <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80064b8:	f7ff f9aa 	bl	8005810 <HAL_GetTick>
 80064bc:	4602      	mov	r2, r0
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	1ad3      	subs	r3, r2, r3
 80064c2:	2b0a      	cmp	r3, #10
 80064c4:	d90b      	bls.n	80064de <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2205      	movs	r2, #5
 80064d6:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	e012      	b.n	8006504 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685b      	ldr	r3, [r3, #4]
 80064e4:	f003 0301 	and.w	r3, r3, #1
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80064f2:	2300      	movs	r3, #0
 80064f4:	e006      	b.n	8006504 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fa:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006502:	2301      	movs	r3, #1
  }
}
 8006504:	4618      	mov	r0, r3
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800650c:	b480      	push	{r7}
 800650e:	b089      	sub	sp, #36	; 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	60f8      	str	r0, [r7, #12]
 8006514:	60b9      	str	r1, [r7, #8]
 8006516:	607a      	str	r2, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006520:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800652a:	7ffb      	ldrb	r3, [r7, #31]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d003      	beq.n	8006538 <HAL_CAN_AddTxMessage+0x2c>
 8006530:	7ffb      	ldrb	r3, [r7, #31]
 8006532:	2b02      	cmp	r3, #2
 8006534:	f040 80b8 	bne.w	80066a8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800653e:	2b00      	cmp	r3, #0
 8006540:	d10a      	bne.n	8006558 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006548:	2b00      	cmp	r3, #0
 800654a:	d105      	bne.n	8006558 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800654c:	69bb      	ldr	r3, [r7, #24]
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 80a0 	beq.w	8006698 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	0e1b      	lsrs	r3, r3, #24
 800655c:	f003 0303 	and.w	r3, r3, #3
 8006560:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d907      	bls.n	8006578 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	e09e      	b.n	80066b6 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006578:	2201      	movs	r2, #1
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	409a      	lsls	r2, r3
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10d      	bne.n	80065a6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006594:	68f9      	ldr	r1, [r7, #12]
 8006596:	6809      	ldr	r1, [r1, #0]
 8006598:	431a      	orrs	r2, r3
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	3318      	adds	r3, #24
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	440b      	add	r3, r1
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	e00f      	b.n	80065c6 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065b0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80065ba:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	3318      	adds	r3, #24
 80065c0:	011b      	lsls	r3, r3, #4
 80065c2:	440b      	add	r3, r1
 80065c4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	6819      	ldr	r1, [r3, #0]
 80065ca:	68bb      	ldr	r3, [r7, #8]
 80065cc:	691a      	ldr	r2, [r3, #16]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	3318      	adds	r3, #24
 80065d2:	011b      	lsls	r3, r3, #4
 80065d4:	440b      	add	r3, r1
 80065d6:	3304      	adds	r3, #4
 80065d8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	7d1b      	ldrb	r3, [r3, #20]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d111      	bne.n	8006606 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681a      	ldr	r2, [r3, #0]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	3318      	adds	r3, #24
 80065ea:	011b      	lsls	r3, r3, #4
 80065ec:	4413      	add	r3, r2
 80065ee:	3304      	adds	r3, #4
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68fa      	ldr	r2, [r7, #12]
 80065f4:	6811      	ldr	r1, [r2, #0]
 80065f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	3318      	adds	r3, #24
 80065fe:	011b      	lsls	r3, r3, #4
 8006600:	440b      	add	r3, r1
 8006602:	3304      	adds	r3, #4
 8006604:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3307      	adds	r3, #7
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	061a      	lsls	r2, r3, #24
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	3306      	adds	r3, #6
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	041b      	lsls	r3, r3, #16
 8006616:	431a      	orrs	r2, r3
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3305      	adds	r3, #5
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	4313      	orrs	r3, r2
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	3204      	adds	r2, #4
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	4610      	mov	r0, r2
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	6811      	ldr	r1, [r2, #0]
 800662e:	ea43 0200 	orr.w	r2, r3, r0
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	440b      	add	r3, r1
 8006638:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800663c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	3303      	adds	r3, #3
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	061a      	lsls	r2, r3, #24
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	3302      	adds	r3, #2
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	041b      	lsls	r3, r3, #16
 800664e:	431a      	orrs	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	3301      	adds	r3, #1
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	021b      	lsls	r3, r3, #8
 8006658:	4313      	orrs	r3, r2
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	7812      	ldrb	r2, [r2, #0]
 800665e:	4610      	mov	r0, r2
 8006660:	68fa      	ldr	r2, [r7, #12]
 8006662:	6811      	ldr	r1, [r2, #0]
 8006664:	ea43 0200 	orr.w	r2, r3, r0
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	011b      	lsls	r3, r3, #4
 800666c:	440b      	add	r3, r1
 800666e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006672:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681a      	ldr	r2, [r3, #0]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	3318      	adds	r3, #24
 800667c:	011b      	lsls	r3, r3, #4
 800667e:	4413      	add	r3, r2
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	6811      	ldr	r1, [r2, #0]
 8006686:	f043 0201 	orr.w	r2, r3, #1
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	3318      	adds	r3, #24
 800668e:	011b      	lsls	r3, r3, #4
 8006690:	440b      	add	r3, r1
 8006692:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006694:	2300      	movs	r3, #0
 8006696:	e00e      	b.n	80066b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e006      	b.n	80066b6 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ac:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066b4:	2301      	movs	r3, #1
  }
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	3724      	adds	r7, #36	; 0x24
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80066c2:	b480      	push	{r7}
 80066c4:	b085      	sub	sp, #20
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066d4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80066d6:	7afb      	ldrb	r3, [r7, #11]
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d002      	beq.n	80066e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80066dc:	7afb      	ldrb	r3, [r7, #11]
 80066de:	2b02      	cmp	r3, #2
 80066e0:	d11d      	bne.n	800671e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	689b      	ldr	r3, [r3, #8]
 80066e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d002      	beq.n	80066f6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	3301      	adds	r3, #1
 80066f4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	689b      	ldr	r3, [r3, #8]
 80066fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006700:	2b00      	cmp	r3, #0
 8006702:	d002      	beq.n	800670a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	3301      	adds	r3, #1
 8006708:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006714:	2b00      	cmp	r3, #0
 8006716:	d002      	beq.n	800671e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3301      	adds	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800671e:	68fb      	ldr	r3, [r7, #12]
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006740:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	2b01      	cmp	r3, #1
 8006746:	d003      	beq.n	8006750 <HAL_CAN_GetRxMessage+0x24>
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b02      	cmp	r3, #2
 800674c:	f040 80f3 	bne.w	8006936 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d10e      	bne.n	8006774 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	68db      	ldr	r3, [r3, #12]
 800675c:	f003 0303 	and.w	r3, r3, #3
 8006760:	2b00      	cmp	r3, #0
 8006762:	d116      	bne.n	8006792 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006768:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e0e7      	b.n	8006944 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	691b      	ldr	r3, [r3, #16]
 800677a:	f003 0303 	and.w	r3, r3, #3
 800677e:	2b00      	cmp	r3, #0
 8006780:	d107      	bne.n	8006792 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006786:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e0d8      	b.n	8006944 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681a      	ldr	r2, [r3, #0]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	331b      	adds	r3, #27
 800679a:	011b      	lsls	r3, r3, #4
 800679c:	4413      	add	r3, r2
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0204 	and.w	r2, r3, #4
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d10c      	bne.n	80067ca <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681a      	ldr	r2, [r3, #0]
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	331b      	adds	r3, #27
 80067b8:	011b      	lsls	r3, r3, #4
 80067ba:	4413      	add	r3, r2
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	0d5b      	lsrs	r3, r3, #21
 80067c0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	601a      	str	r2, [r3, #0]
 80067c8:	e00b      	b.n	80067e2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	331b      	adds	r3, #27
 80067d2:	011b      	lsls	r3, r3, #4
 80067d4:	4413      	add	r3, r2
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	08db      	lsrs	r3, r3, #3
 80067da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	331b      	adds	r3, #27
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	4413      	add	r3, r2
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0202 	and.w	r2, r3, #2
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	331b      	adds	r3, #27
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	4413      	add	r3, r2
 8006804:	3304      	adds	r3, #4
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 020f 	and.w	r2, r3, #15
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68bb      	ldr	r3, [r7, #8]
 8006816:	331b      	adds	r3, #27
 8006818:	011b      	lsls	r3, r3, #4
 800681a:	4413      	add	r3, r2
 800681c:	3304      	adds	r3, #4
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	b2da      	uxtb	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681a      	ldr	r2, [r3, #0]
 800682c:	68bb      	ldr	r3, [r7, #8]
 800682e:	331b      	adds	r3, #27
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	4413      	add	r3, r2
 8006834:	3304      	adds	r3, #4
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	0c1b      	lsrs	r3, r3, #16
 800683a:	b29a      	uxth	r2, r3
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	011b      	lsls	r3, r3, #4
 8006848:	4413      	add	r3, r2
 800684a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	b2da      	uxtb	r2, r3
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681a      	ldr	r2, [r3, #0]
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	011b      	lsls	r3, r3, #4
 800685e:	4413      	add	r3, r2
 8006860:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	0a1a      	lsrs	r2, r3, #8
 8006868:	683b      	ldr	r3, [r7, #0]
 800686a:	3301      	adds	r3, #1
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	4413      	add	r3, r2
 800687a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	0c1a      	lsrs	r2, r3, #16
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	3302      	adds	r3, #2
 8006886:	b2d2      	uxtb	r2, r2
 8006888:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	011b      	lsls	r3, r3, #4
 8006892:	4413      	add	r3, r2
 8006894:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	0e1a      	lsrs	r2, r3, #24
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	3303      	adds	r3, #3
 80068a0:	b2d2      	uxtb	r2, r2
 80068a2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	011b      	lsls	r3, r3, #4
 80068ac:	4413      	add	r3, r2
 80068ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	3304      	adds	r3, #4
 80068b8:	b2d2      	uxtb	r2, r2
 80068ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	011b      	lsls	r3, r3, #4
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	0a1a      	lsrs	r2, r3, #8
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	3305      	adds	r3, #5
 80068d2:	b2d2      	uxtb	r2, r2
 80068d4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	681a      	ldr	r2, [r3, #0]
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	011b      	lsls	r3, r3, #4
 80068de:	4413      	add	r3, r2
 80068e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	0c1a      	lsrs	r2, r3, #16
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	3306      	adds	r3, #6
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681a      	ldr	r2, [r3, #0]
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	0e1a      	lsrs	r2, r3, #24
 8006902:	683b      	ldr	r3, [r7, #0]
 8006904:	3307      	adds	r3, #7
 8006906:	b2d2      	uxtb	r2, r2
 8006908:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d108      	bne.n	8006922 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68da      	ldr	r2, [r3, #12]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f042 0220 	orr.w	r2, r2, #32
 800691e:	60da      	str	r2, [r3, #12]
 8006920:	e007      	b.n	8006932 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f042 0220 	orr.w	r2, r2, #32
 8006930:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006932:	2300      	movs	r3, #0
 8006934:	e006      	b.n	8006944 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800693a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006942:	2301      	movs	r3, #1
  }
}
 8006944:	4618      	mov	r0, r3
 8006946:	371c      	adds	r7, #28
 8006948:	46bd      	mov	sp, r7
 800694a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694e:	4770      	bx	lr

08006950 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006950:	b480      	push	{r7}
 8006952:	b085      	sub	sp, #20
 8006954:	af00      	add	r7, sp, #0
 8006956:	6078      	str	r0, [r7, #4]
 8006958:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006960:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006962:	7bfb      	ldrb	r3, [r7, #15]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d002      	beq.n	800696e <HAL_CAN_ActivateNotification+0x1e>
 8006968:	7bfb      	ldrb	r3, [r7, #15]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d109      	bne.n	8006982 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6959      	ldr	r1, [r3, #20]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	430a      	orrs	r2, r1
 800697c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	e006      	b.n	8006990 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006986:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800698e:	2301      	movs	r3, #1
  }
}
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b08a      	sub	sp, #40	; 0x28
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80069a4:	2300      	movs	r3, #0
 80069a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	699b      	ldr	r3, [r3, #24]
 80069d6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80069d8:	6a3b      	ldr	r3, [r7, #32]
 80069da:	f003 0301 	and.w	r3, r3, #1
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d07c      	beq.n	8006adc <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	f003 0301 	and.w	r3, r3, #1
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d023      	beq.n	8006a34 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2201      	movs	r2, #1
 80069f2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f003 0302 	and.w	r3, r3, #2
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d003      	beq.n	8006a06 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f983 	bl	8006d0a <HAL_CAN_TxMailbox0CompleteCallback>
 8006a04:	e016      	b.n	8006a34 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	f003 0304 	and.w	r3, r3, #4
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d004      	beq.n	8006a1a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006a16:	627b      	str	r3, [r7, #36]	; 0x24
 8006a18:	e00c      	b.n	8006a34 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	f003 0308 	and.w	r3, r3, #8
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d004      	beq.n	8006a2e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2c:	e002      	b.n	8006a34 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f989 	bl	8006d46 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d024      	beq.n	8006a88 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a46:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d003      	beq.n	8006a5a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 f963 	bl	8006d1e <HAL_CAN_TxMailbox1CompleteCallback>
 8006a58:	e016      	b.n	8006a88 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006a5a:	69bb      	ldr	r3, [r7, #24]
 8006a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d004      	beq.n	8006a6e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a66:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6c:	e00c      	b.n	8006a88 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d004      	beq.n	8006a82 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a80:	e002      	b.n	8006a88 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 f969 	bl	8006d5a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006a88:	69bb      	ldr	r3, [r7, #24]
 8006a8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d024      	beq.n	8006adc <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006a9a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d003      	beq.n	8006aae <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f000 f943 	bl	8006d32 <HAL_CAN_TxMailbox2CompleteCallback>
 8006aac:	e016      	b.n	8006adc <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d004      	beq.n	8006ac2 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac0:	e00c      	b.n	8006adc <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d004      	beq.n	8006ad6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006acc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad4:	e002      	b.n	8006adc <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 f949 	bl	8006d6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	f003 0308 	and.w	r3, r3, #8
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d00c      	beq.n	8006b00 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f003 0310 	and.w	r3, r3, #16
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d007      	beq.n	8006b00 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2210      	movs	r2, #16
 8006afe:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	f003 0304 	and.w	r3, r3, #4
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00b      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f003 0308 	and.w	r3, r3, #8
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2208      	movs	r2, #8
 8006b1a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f930 	bl	8006d82 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006b22:	6a3b      	ldr	r3, [r7, #32]
 8006b24:	f003 0302 	and.w	r3, r3, #2
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d009      	beq.n	8006b40 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	68db      	ldr	r3, [r3, #12]
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d002      	beq.n	8006b40 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f7fc fd16 	bl	800356c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006b40:	6a3b      	ldr	r3, [r7, #32]
 8006b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00c      	beq.n	8006b64 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	f003 0310 	and.w	r3, r3, #16
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d007      	beq.n	8006b64 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b5a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	2210      	movs	r2, #16
 8006b62:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	f003 0320 	and.w	r3, r3, #32
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f003 0308 	and.w	r3, r3, #8
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d006      	beq.n	8006b86 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2208      	movs	r2, #8
 8006b7e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 f912 	bl	8006daa <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006b86:	6a3b      	ldr	r3, [r7, #32]
 8006b88:	f003 0310 	and.w	r3, r3, #16
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d009      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f8f9 	bl	8006d96 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006ba4:	6a3b      	ldr	r3, [r7, #32]
 8006ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d00b      	beq.n	8006bc6 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	f003 0310 	and.w	r3, r3, #16
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d006      	beq.n	8006bc6 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2210      	movs	r2, #16
 8006bbe:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 f8fc 	bl	8006dbe <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d00b      	beq.n	8006be8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006bd0:	69fb      	ldr	r3, [r7, #28]
 8006bd2:	f003 0308 	and.w	r3, r3, #8
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d006      	beq.n	8006be8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2208      	movs	r2, #8
 8006be0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 f8f5 	bl	8006dd2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006be8:	6a3b      	ldr	r3, [r7, #32]
 8006bea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d07b      	beq.n	8006cea <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	f003 0304 	and.w	r3, r3, #4
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d072      	beq.n	8006ce2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006bfc:	6a3b      	ldr	r3, [r7, #32]
 8006bfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d008      	beq.n	8006c18 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c12:	f043 0301 	orr.w	r3, r3, #1
 8006c16:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c18:	6a3b      	ldr	r3, [r7, #32]
 8006c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d008      	beq.n	8006c34 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d003      	beq.n	8006c34 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2e:	f043 0302 	orr.w	r3, r3, #2
 8006c32:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d008      	beq.n	8006c50 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	f043 0304 	orr.w	r3, r3, #4
 8006c4e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c50:	6a3b      	ldr	r3, [r7, #32]
 8006c52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d043      	beq.n	8006ce2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d03e      	beq.n	8006ce2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006c6a:	2b60      	cmp	r3, #96	; 0x60
 8006c6c:	d02b      	beq.n	8006cc6 <HAL_CAN_IRQHandler+0x32a>
 8006c6e:	2b60      	cmp	r3, #96	; 0x60
 8006c70:	d82e      	bhi.n	8006cd0 <HAL_CAN_IRQHandler+0x334>
 8006c72:	2b50      	cmp	r3, #80	; 0x50
 8006c74:	d022      	beq.n	8006cbc <HAL_CAN_IRQHandler+0x320>
 8006c76:	2b50      	cmp	r3, #80	; 0x50
 8006c78:	d82a      	bhi.n	8006cd0 <HAL_CAN_IRQHandler+0x334>
 8006c7a:	2b40      	cmp	r3, #64	; 0x40
 8006c7c:	d019      	beq.n	8006cb2 <HAL_CAN_IRQHandler+0x316>
 8006c7e:	2b40      	cmp	r3, #64	; 0x40
 8006c80:	d826      	bhi.n	8006cd0 <HAL_CAN_IRQHandler+0x334>
 8006c82:	2b30      	cmp	r3, #48	; 0x30
 8006c84:	d010      	beq.n	8006ca8 <HAL_CAN_IRQHandler+0x30c>
 8006c86:	2b30      	cmp	r3, #48	; 0x30
 8006c88:	d822      	bhi.n	8006cd0 <HAL_CAN_IRQHandler+0x334>
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d002      	beq.n	8006c94 <HAL_CAN_IRQHandler+0x2f8>
 8006c8e:	2b20      	cmp	r3, #32
 8006c90:	d005      	beq.n	8006c9e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006c92:	e01d      	b.n	8006cd0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c96:	f043 0308 	orr.w	r3, r3, #8
 8006c9a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c9c:	e019      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	f043 0310 	orr.w	r3, r3, #16
 8006ca4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ca6:	e014      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006caa:	f043 0320 	orr.w	r3, r3, #32
 8006cae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cb0:	e00f      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cba:	e00a      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cc2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cc4:	e005      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ccc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006cce:	e000      	b.n	8006cd2 <HAL_CAN_IRQHandler+0x336>
            break;
 8006cd0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	699a      	ldr	r2, [r3, #24]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ce0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	2204      	movs	r2, #4
 8006ce8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d008      	beq.n	8006d02 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	431a      	orrs	r2, r3
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 f872 	bl	8006de6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006d02:	bf00      	nop
 8006d04:	3728      	adds	r7, #40	; 0x28
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d0a:	b480      	push	{r7}
 8006d0c:	b083      	sub	sp, #12
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8006d12:	bf00      	nop
 8006d14:	370c      	adds	r7, #12
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr

08006d1e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d1e:	b480      	push	{r7}
 8006d20:	b083      	sub	sp, #12
 8006d22:	af00      	add	r7, sp, #0
 8006d24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8006d26:	bf00      	nop
 8006d28:	370c      	adds	r7, #12
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr

08006d32 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006d32:	b480      	push	{r7}
 8006d34:	b083      	sub	sp, #12
 8006d36:	af00      	add	r7, sp, #0
 8006d38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006d3a:	bf00      	nop
 8006d3c:	370c      	adds	r7, #12
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b083      	sub	sp, #12
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006d4e:	bf00      	nop
 8006d50:	370c      	adds	r7, #12
 8006d52:	46bd      	mov	sp, r7
 8006d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d58:	4770      	bx	lr

08006d5a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d5a:	b480      	push	{r7}
 8006d5c:	b083      	sub	sp, #12
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006d62:	bf00      	nop
 8006d64:	370c      	adds	r7, #12
 8006d66:	46bd      	mov	sp, r7
 8006d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6c:	4770      	bx	lr

08006d6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006d6e:	b480      	push	{r7}
 8006d70:	b083      	sub	sp, #12
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006d76:	bf00      	nop
 8006d78:	370c      	adds	r7, #12
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d80:	4770      	bx	lr

08006d82 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006d82:	b480      	push	{r7}
 8006d84:	b083      	sub	sp, #12
 8006d86:	af00      	add	r7, sp, #0
 8006d88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006d8a:	bf00      	nop
 8006d8c:	370c      	adds	r7, #12
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d94:	4770      	bx	lr

08006d96 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006d96:	b480      	push	{r7}
 8006d98:	b083      	sub	sp, #12
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006d9e:	bf00      	nop
 8006da0:	370c      	adds	r7, #12
 8006da2:	46bd      	mov	sp, r7
 8006da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006daa:	b480      	push	{r7}
 8006dac:	b083      	sub	sp, #12
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006db2:	bf00      	nop
 8006db4:	370c      	adds	r7, #12
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr

08006dbe <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006dbe:	b480      	push	{r7}
 8006dc0:	b083      	sub	sp, #12
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006dc6:	bf00      	nop
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
	...

08006dfc <__NVIC_SetPriorityGrouping>:
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b085      	sub	sp, #20
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006e0c:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <__NVIC_SetPriorityGrouping+0x40>)
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006e20:	68bb      	ldr	r3, [r7, #8]
 8006e22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006e24:	4b06      	ldr	r3, [pc, #24]	; (8006e40 <__NVIC_SetPriorityGrouping+0x44>)
 8006e26:	4313      	orrs	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006e2a:	4a04      	ldr	r2, [pc, #16]	; (8006e3c <__NVIC_SetPriorityGrouping+0x40>)
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	60d3      	str	r3, [r2, #12]
}
 8006e30:	bf00      	nop
 8006e32:	3714      	adds	r7, #20
 8006e34:	46bd      	mov	sp, r7
 8006e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3a:	4770      	bx	lr
 8006e3c:	e000ed00 	.word	0xe000ed00
 8006e40:	05fa0000 	.word	0x05fa0000

08006e44 <__NVIC_GetPriorityGrouping>:
{
 8006e44:	b480      	push	{r7}
 8006e46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006e48:	4b04      	ldr	r3, [pc, #16]	; (8006e5c <__NVIC_GetPriorityGrouping+0x18>)
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	0a1b      	lsrs	r3, r3, #8
 8006e4e:	f003 0307 	and.w	r3, r3, #7
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr
 8006e5c:	e000ed00 	.word	0xe000ed00

08006e60 <__NVIC_EnableIRQ>:
{
 8006e60:	b480      	push	{r7}
 8006e62:	b083      	sub	sp, #12
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	4603      	mov	r3, r0
 8006e68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	db0b      	blt.n	8006e8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e72:	79fb      	ldrb	r3, [r7, #7]
 8006e74:	f003 021f 	and.w	r2, r3, #31
 8006e78:	4907      	ldr	r1, [pc, #28]	; (8006e98 <__NVIC_EnableIRQ+0x38>)
 8006e7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006e7e:	095b      	lsrs	r3, r3, #5
 8006e80:	2001      	movs	r0, #1
 8006e82:	fa00 f202 	lsl.w	r2, r0, r2
 8006e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006e8a:	bf00      	nop
 8006e8c:	370c      	adds	r7, #12
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	e000e100 	.word	0xe000e100

08006e9c <__NVIC_DisableIRQ>:
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b083      	sub	sp, #12
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	db12      	blt.n	8006ed4 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006eae:	79fb      	ldrb	r3, [r7, #7]
 8006eb0:	f003 021f 	and.w	r2, r3, #31
 8006eb4:	490a      	ldr	r1, [pc, #40]	; (8006ee0 <__NVIC_DisableIRQ+0x44>)
 8006eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2001      	movs	r0, #1
 8006ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8006ec2:	3320      	adds	r3, #32
 8006ec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006ec8:	f3bf 8f4f 	dsb	sy
}
 8006ecc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8006ece:	f3bf 8f6f 	isb	sy
}
 8006ed2:	bf00      	nop
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	e000e100 	.word	0xe000e100

08006ee4 <__NVIC_SetPriority>:
{
 8006ee4:	b480      	push	{r7}
 8006ee6:	b083      	sub	sp, #12
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	4603      	mov	r3, r0
 8006eec:	6039      	str	r1, [r7, #0]
 8006eee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	db0a      	blt.n	8006f0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	490c      	ldr	r1, [pc, #48]	; (8006f30 <__NVIC_SetPriority+0x4c>)
 8006efe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f02:	0112      	lsls	r2, r2, #4
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	440b      	add	r3, r1
 8006f08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f0c:	e00a      	b.n	8006f24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	b2da      	uxtb	r2, r3
 8006f12:	4908      	ldr	r1, [pc, #32]	; (8006f34 <__NVIC_SetPriority+0x50>)
 8006f14:	79fb      	ldrb	r3, [r7, #7]
 8006f16:	f003 030f 	and.w	r3, r3, #15
 8006f1a:	3b04      	subs	r3, #4
 8006f1c:	0112      	lsls	r2, r2, #4
 8006f1e:	b2d2      	uxtb	r2, r2
 8006f20:	440b      	add	r3, r1
 8006f22:	761a      	strb	r2, [r3, #24]
}
 8006f24:	bf00      	nop
 8006f26:	370c      	adds	r7, #12
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	e000e100 	.word	0xe000e100
 8006f34:	e000ed00 	.word	0xe000ed00

08006f38 <NVIC_EncodePriority>:
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b089      	sub	sp, #36	; 0x24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	60f8      	str	r0, [r7, #12]
 8006f40:	60b9      	str	r1, [r7, #8]
 8006f42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	f1c3 0307 	rsb	r3, r3, #7
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	bf28      	it	cs
 8006f56:	2304      	movcs	r3, #4
 8006f58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	2b06      	cmp	r3, #6
 8006f60:	d902      	bls.n	8006f68 <NVIC_EncodePriority+0x30>
 8006f62:	69fb      	ldr	r3, [r7, #28]
 8006f64:	3b03      	subs	r3, #3
 8006f66:	e000      	b.n	8006f6a <NVIC_EncodePriority+0x32>
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	fa02 f303 	lsl.w	r3, r2, r3
 8006f76:	43da      	mvns	r2, r3
 8006f78:	68bb      	ldr	r3, [r7, #8]
 8006f7a:	401a      	ands	r2, r3
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006f80:	f04f 31ff 	mov.w	r1, #4294967295
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8a:	43d9      	mvns	r1, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006f90:	4313      	orrs	r3, r2
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3724      	adds	r7, #36	; 0x24
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr
	...

08006fa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3b01      	subs	r3, #1
 8006fac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fb0:	d301      	bcc.n	8006fb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e00f      	b.n	8006fd6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006fb6:	4a0a      	ldr	r2, [pc, #40]	; (8006fe0 <SysTick_Config+0x40>)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	3b01      	subs	r3, #1
 8006fbc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006fbe:	210f      	movs	r1, #15
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	f7ff ff8e 	bl	8006ee4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006fc8:	4b05      	ldr	r3, [pc, #20]	; (8006fe0 <SysTick_Config+0x40>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006fce:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <SysTick_Config+0x40>)
 8006fd0:	2207      	movs	r2, #7
 8006fd2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	e000e010 	.word	0xe000e010

08006fe4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b082      	sub	sp, #8
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	f7ff ff05 	bl	8006dfc <__NVIC_SetPriorityGrouping>
}
 8006ff2:	bf00      	nop
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	4603      	mov	r3, r0
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007008:	2300      	movs	r3, #0
 800700a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800700c:	f7ff ff1a 	bl	8006e44 <__NVIC_GetPriorityGrouping>
 8007010:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	68b9      	ldr	r1, [r7, #8]
 8007016:	6978      	ldr	r0, [r7, #20]
 8007018:	f7ff ff8e 	bl	8006f38 <NVIC_EncodePriority>
 800701c:	4602      	mov	r2, r0
 800701e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007022:	4611      	mov	r1, r2
 8007024:	4618      	mov	r0, r3
 8007026:	f7ff ff5d 	bl	8006ee4 <__NVIC_SetPriority>
}
 800702a:	bf00      	nop
 800702c:	3718      	adds	r7, #24
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b082      	sub	sp, #8
 8007036:	af00      	add	r7, sp, #0
 8007038:	4603      	mov	r3, r0
 800703a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800703c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007040:	4618      	mov	r0, r3
 8007042:	f7ff ff0d 	bl	8006e60 <__NVIC_EnableIRQ>
}
 8007046:	bf00      	nop
 8007048:	3708      	adds	r7, #8
 800704a:	46bd      	mov	sp, r7
 800704c:	bd80      	pop	{r7, pc}

0800704e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800704e:	b580      	push	{r7, lr}
 8007050:	b082      	sub	sp, #8
 8007052:	af00      	add	r7, sp, #0
 8007054:	4603      	mov	r3, r0
 8007056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8007058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800705c:	4618      	mov	r0, r3
 800705e:	f7ff ff1d 	bl	8006e9c <__NVIC_DisableIRQ>
}
 8007062:	bf00      	nop
 8007064:	3708      	adds	r7, #8
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b082      	sub	sp, #8
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7ff ff94 	bl	8006fa0 <SysTick_Config>
 8007078:	4603      	mov	r3, r0
}
 800707a:	4618      	mov	r0, r3
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}
	...

08007084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007084:	b480      	push	{r7}
 8007086:	b089      	sub	sp, #36	; 0x24
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800708e:	2300      	movs	r3, #0
 8007090:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8007092:	2300      	movs	r3, #0
 8007094:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8007096:	2300      	movs	r3, #0
 8007098:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800709a:	2300      	movs	r3, #0
 800709c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800709e:	2300      	movs	r3, #0
 80070a0:	61fb      	str	r3, [r7, #28]
 80070a2:	e175      	b.n	8007390 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80070a4:	2201      	movs	r2, #1
 80070a6:	69fb      	ldr	r3, [r7, #28]
 80070a8:	fa02 f303 	lsl.w	r3, r2, r3
 80070ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	4013      	ands	r3, r2
 80070b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80070b8:	693a      	ldr	r2, [r7, #16]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	429a      	cmp	r2, r3
 80070be:	f040 8164 	bne.w	800738a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	f003 0303 	and.w	r3, r3, #3
 80070ca:	2b01      	cmp	r3, #1
 80070cc:	d005      	beq.n	80070da <HAL_GPIO_Init+0x56>
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	f003 0303 	and.w	r3, r3, #3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d130      	bne.n	800713c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689b      	ldr	r3, [r3, #8]
 80070de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	005b      	lsls	r3, r3, #1
 80070e4:	2203      	movs	r2, #3
 80070e6:	fa02 f303 	lsl.w	r3, r2, r3
 80070ea:	43db      	mvns	r3, r3
 80070ec:	69ba      	ldr	r2, [r7, #24]
 80070ee:	4013      	ands	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	68da      	ldr	r2, [r3, #12]
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	005b      	lsls	r3, r3, #1
 80070fa:	fa02 f303 	lsl.w	r3, r2, r3
 80070fe:	69ba      	ldr	r2, [r7, #24]
 8007100:	4313      	orrs	r3, r2
 8007102:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	69ba      	ldr	r2, [r7, #24]
 8007108:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007110:	2201      	movs	r2, #1
 8007112:	69fb      	ldr	r3, [r7, #28]
 8007114:	fa02 f303 	lsl.w	r3, r2, r3
 8007118:	43db      	mvns	r3, r3
 800711a:	69ba      	ldr	r2, [r7, #24]
 800711c:	4013      	ands	r3, r2
 800711e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	091b      	lsrs	r3, r3, #4
 8007126:	f003 0201 	and.w	r2, r3, #1
 800712a:	69fb      	ldr	r3, [r7, #28]
 800712c:	fa02 f303 	lsl.w	r3, r2, r3
 8007130:	69ba      	ldr	r2, [r7, #24]
 8007132:	4313      	orrs	r3, r2
 8007134:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	f003 0303 	and.w	r3, r3, #3
 8007144:	2b03      	cmp	r3, #3
 8007146:	d017      	beq.n	8007178 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	68db      	ldr	r3, [r3, #12]
 800714c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	005b      	lsls	r3, r3, #1
 8007152:	2203      	movs	r2, #3
 8007154:	fa02 f303 	lsl.w	r3, r2, r3
 8007158:	43db      	mvns	r3, r3
 800715a:	69ba      	ldr	r2, [r7, #24]
 800715c:	4013      	ands	r3, r2
 800715e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	689a      	ldr	r2, [r3, #8]
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	005b      	lsls	r3, r3, #1
 8007168:	fa02 f303 	lsl.w	r3, r2, r3
 800716c:	69ba      	ldr	r2, [r7, #24]
 800716e:	4313      	orrs	r3, r2
 8007170:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0303 	and.w	r3, r3, #3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d123      	bne.n	80071cc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8007184:	69fb      	ldr	r3, [r7, #28]
 8007186:	08da      	lsrs	r2, r3, #3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3208      	adds	r2, #8
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	009b      	lsls	r3, r3, #2
 800719a:	220f      	movs	r2, #15
 800719c:	fa02 f303 	lsl.w	r3, r2, r3
 80071a0:	43db      	mvns	r3, r3
 80071a2:	69ba      	ldr	r2, [r7, #24]
 80071a4:	4013      	ands	r3, r2
 80071a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	691a      	ldr	r2, [r3, #16]
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	f003 0307 	and.w	r3, r3, #7
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	fa02 f303 	lsl.w	r3, r2, r3
 80071b8:	69ba      	ldr	r2, [r7, #24]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80071be:	69fb      	ldr	r3, [r7, #28]
 80071c0:	08da      	lsrs	r2, r3, #3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	3208      	adds	r2, #8
 80071c6:	69b9      	ldr	r1, [r7, #24]
 80071c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80071d2:	69fb      	ldr	r3, [r7, #28]
 80071d4:	005b      	lsls	r3, r3, #1
 80071d6:	2203      	movs	r2, #3
 80071d8:	fa02 f303 	lsl.w	r3, r2, r3
 80071dc:	43db      	mvns	r3, r3
 80071de:	69ba      	ldr	r2, [r7, #24]
 80071e0:	4013      	ands	r3, r2
 80071e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	f003 0203 	and.w	r2, r3, #3
 80071ec:	69fb      	ldr	r3, [r7, #28]
 80071ee:	005b      	lsls	r3, r3, #1
 80071f0:	fa02 f303 	lsl.w	r3, r2, r3
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	4313      	orrs	r3, r2
 80071f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	69ba      	ldr	r2, [r7, #24]
 80071fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007208:	2b00      	cmp	r3, #0
 800720a:	f000 80be 	beq.w	800738a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800720e:	4b66      	ldr	r3, [pc, #408]	; (80073a8 <HAL_GPIO_Init+0x324>)
 8007210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007212:	4a65      	ldr	r2, [pc, #404]	; (80073a8 <HAL_GPIO_Init+0x324>)
 8007214:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007218:	6453      	str	r3, [r2, #68]	; 0x44
 800721a:	4b63      	ldr	r3, [pc, #396]	; (80073a8 <HAL_GPIO_Init+0x324>)
 800721c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800721e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007222:	60fb      	str	r3, [r7, #12]
 8007224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8007226:	4a61      	ldr	r2, [pc, #388]	; (80073ac <HAL_GPIO_Init+0x328>)
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	089b      	lsrs	r3, r3, #2
 800722c:	3302      	adds	r3, #2
 800722e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007232:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	f003 0303 	and.w	r3, r3, #3
 800723a:	009b      	lsls	r3, r3, #2
 800723c:	220f      	movs	r2, #15
 800723e:	fa02 f303 	lsl.w	r3, r2, r3
 8007242:	43db      	mvns	r3, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4013      	ands	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	4a58      	ldr	r2, [pc, #352]	; (80073b0 <HAL_GPIO_Init+0x32c>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d037      	beq.n	80072c2 <HAL_GPIO_Init+0x23e>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	4a57      	ldr	r2, [pc, #348]	; (80073b4 <HAL_GPIO_Init+0x330>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d031      	beq.n	80072be <HAL_GPIO_Init+0x23a>
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	4a56      	ldr	r2, [pc, #344]	; (80073b8 <HAL_GPIO_Init+0x334>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d02b      	beq.n	80072ba <HAL_GPIO_Init+0x236>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a55      	ldr	r2, [pc, #340]	; (80073bc <HAL_GPIO_Init+0x338>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d025      	beq.n	80072b6 <HAL_GPIO_Init+0x232>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	4a54      	ldr	r2, [pc, #336]	; (80073c0 <HAL_GPIO_Init+0x33c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d01f      	beq.n	80072b2 <HAL_GPIO_Init+0x22e>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	4a53      	ldr	r2, [pc, #332]	; (80073c4 <HAL_GPIO_Init+0x340>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d019      	beq.n	80072ae <HAL_GPIO_Init+0x22a>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a52      	ldr	r2, [pc, #328]	; (80073c8 <HAL_GPIO_Init+0x344>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d013      	beq.n	80072aa <HAL_GPIO_Init+0x226>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	4a51      	ldr	r2, [pc, #324]	; (80073cc <HAL_GPIO_Init+0x348>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d00d      	beq.n	80072a6 <HAL_GPIO_Init+0x222>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	4a50      	ldr	r2, [pc, #320]	; (80073d0 <HAL_GPIO_Init+0x34c>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d007      	beq.n	80072a2 <HAL_GPIO_Init+0x21e>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4a4f      	ldr	r2, [pc, #316]	; (80073d4 <HAL_GPIO_Init+0x350>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d101      	bne.n	800729e <HAL_GPIO_Init+0x21a>
 800729a:	2309      	movs	r3, #9
 800729c:	e012      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 800729e:	230a      	movs	r3, #10
 80072a0:	e010      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072a2:	2308      	movs	r3, #8
 80072a4:	e00e      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072a6:	2307      	movs	r3, #7
 80072a8:	e00c      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072aa:	2306      	movs	r3, #6
 80072ac:	e00a      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072ae:	2305      	movs	r3, #5
 80072b0:	e008      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072b2:	2304      	movs	r3, #4
 80072b4:	e006      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072b6:	2303      	movs	r3, #3
 80072b8:	e004      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072ba:	2302      	movs	r3, #2
 80072bc:	e002      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072be:	2301      	movs	r3, #1
 80072c0:	e000      	b.n	80072c4 <HAL_GPIO_Init+0x240>
 80072c2:	2300      	movs	r3, #0
 80072c4:	69fa      	ldr	r2, [r7, #28]
 80072c6:	f002 0203 	and.w	r2, r2, #3
 80072ca:	0092      	lsls	r2, r2, #2
 80072cc:	4093      	lsls	r3, r2
 80072ce:	69ba      	ldr	r2, [r7, #24]
 80072d0:	4313      	orrs	r3, r2
 80072d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80072d4:	4935      	ldr	r1, [pc, #212]	; (80073ac <HAL_GPIO_Init+0x328>)
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	089b      	lsrs	r3, r3, #2
 80072da:	3302      	adds	r3, #2
 80072dc:	69ba      	ldr	r2, [r7, #24]
 80072de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80072e2:	4b3d      	ldr	r3, [pc, #244]	; (80073d8 <HAL_GPIO_Init+0x354>)
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	43db      	mvns	r3, r3
 80072ec:	69ba      	ldr	r2, [r7, #24]
 80072ee:	4013      	ands	r3, r2
 80072f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	685b      	ldr	r3, [r3, #4]
 80072f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d003      	beq.n	8007306 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80072fe:	69ba      	ldr	r2, [r7, #24]
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007306:	4a34      	ldr	r2, [pc, #208]	; (80073d8 <HAL_GPIO_Init+0x354>)
 8007308:	69bb      	ldr	r3, [r7, #24]
 800730a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800730c:	4b32      	ldr	r3, [pc, #200]	; (80073d8 <HAL_GPIO_Init+0x354>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	43db      	mvns	r3, r3
 8007316:	69ba      	ldr	r2, [r7, #24]
 8007318:	4013      	ands	r3, r2
 800731a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d003      	beq.n	8007330 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	693b      	ldr	r3, [r7, #16]
 800732c:	4313      	orrs	r3, r2
 800732e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007330:	4a29      	ldr	r2, [pc, #164]	; (80073d8 <HAL_GPIO_Init+0x354>)
 8007332:	69bb      	ldr	r3, [r7, #24]
 8007334:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007336:	4b28      	ldr	r3, [pc, #160]	; (80073d8 <HAL_GPIO_Init+0x354>)
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	43db      	mvns	r3, r3
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	4013      	ands	r3, r2
 8007344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800734e:	2b00      	cmp	r3, #0
 8007350:	d003      	beq.n	800735a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	4313      	orrs	r3, r2
 8007358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800735a:	4a1f      	ldr	r2, [pc, #124]	; (80073d8 <HAL_GPIO_Init+0x354>)
 800735c:	69bb      	ldr	r3, [r7, #24]
 800735e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007360:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <HAL_GPIO_Init+0x354>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	43db      	mvns	r3, r3
 800736a:	69ba      	ldr	r2, [r7, #24]
 800736c:	4013      	ands	r3, r2
 800736e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d003      	beq.n	8007384 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	693b      	ldr	r3, [r7, #16]
 8007380:	4313      	orrs	r3, r2
 8007382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8007384:	4a14      	ldr	r2, [pc, #80]	; (80073d8 <HAL_GPIO_Init+0x354>)
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800738a:	69fb      	ldr	r3, [r7, #28]
 800738c:	3301      	adds	r3, #1
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	2b0f      	cmp	r3, #15
 8007394:	f67f ae86 	bls.w	80070a4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007398:	bf00      	nop
 800739a:	bf00      	nop
 800739c:	3724      	adds	r7, #36	; 0x24
 800739e:	46bd      	mov	sp, r7
 80073a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop
 80073a8:	40023800 	.word	0x40023800
 80073ac:	40013800 	.word	0x40013800
 80073b0:	40020000 	.word	0x40020000
 80073b4:	40020400 	.word	0x40020400
 80073b8:	40020800 	.word	0x40020800
 80073bc:	40020c00 	.word	0x40020c00
 80073c0:	40021000 	.word	0x40021000
 80073c4:	40021400 	.word	0x40021400
 80073c8:	40021800 	.word	0x40021800
 80073cc:	40021c00 	.word	0x40021c00
 80073d0:	40022000 	.word	0x40022000
 80073d4:	40022400 	.word	0x40022400
 80073d8:	40013c00 	.word	0x40013c00

080073dc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	460b      	mov	r3, r1
 80073e6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	691a      	ldr	r2, [r3, #16]
 80073ec:	887b      	ldrh	r3, [r7, #2]
 80073ee:	4013      	ands	r3, r2
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d002      	beq.n	80073fa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073f4:	2301      	movs	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
 80073f8:	e001      	b.n	80073fe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073fa:	2300      	movs	r3, #0
 80073fc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3714      	adds	r7, #20
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
 8007414:	460b      	mov	r3, r1
 8007416:	807b      	strh	r3, [r7, #2]
 8007418:	4613      	mov	r3, r2
 800741a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800741c:	787b      	ldrb	r3, [r7, #1]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d003      	beq.n	800742a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007422:	887a      	ldrh	r2, [r7, #2]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007428:	e003      	b.n	8007432 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800742a:	887b      	ldrh	r3, [r7, #2]
 800742c:	041a      	lsls	r2, r3, #16
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	619a      	str	r2, [r3, #24]
}
 8007432:	bf00      	nop
 8007434:	370c      	adds	r7, #12
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	460b      	mov	r3, r1
 8007448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	695b      	ldr	r3, [r3, #20]
 800744e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007450:	887a      	ldrh	r2, [r7, #2]
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4013      	ands	r3, r2
 8007456:	041a      	lsls	r2, r3, #16
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	43d9      	mvns	r1, r3
 800745c:	887b      	ldrh	r3, [r7, #2]
 800745e:	400b      	ands	r3, r1
 8007460:	431a      	orrs	r2, r3
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	619a      	str	r2, [r3, #24]
}
 8007466:	bf00      	nop
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	4603      	mov	r3, r0
 800747c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800747e:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007480:	695a      	ldr	r2, [r3, #20]
 8007482:	88fb      	ldrh	r3, [r7, #6]
 8007484:	4013      	ands	r3, r2
 8007486:	2b00      	cmp	r3, #0
 8007488:	d006      	beq.n	8007498 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800748a:	4a05      	ldr	r2, [pc, #20]	; (80074a0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800748c:	88fb      	ldrh	r3, [r7, #6]
 800748e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007490:	88fb      	ldrh	r3, [r7, #6]
 8007492:	4618      	mov	r0, r3
 8007494:	f7fa fbfc 	bl	8001c90 <HAL_GPIO_EXTI_Callback>
  }
}
 8007498:	bf00      	nop
 800749a:	3708      	adds	r7, #8
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40013c00 	.word	0x40013c00

080074a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80074a4:	b580      	push	{r7, lr}
 80074a6:	b082      	sub	sp, #8
 80074a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80074ae:	4b23      	ldr	r3, [pc, #140]	; (800753c <HAL_PWREx_EnableOverDrive+0x98>)
 80074b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b2:	4a22      	ldr	r2, [pc, #136]	; (800753c <HAL_PWREx_EnableOverDrive+0x98>)
 80074b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80074b8:	6413      	str	r3, [r2, #64]	; 0x40
 80074ba:	4b20      	ldr	r3, [pc, #128]	; (800753c <HAL_PWREx_EnableOverDrive+0x98>)
 80074bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80074c6:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a1d      	ldr	r2, [pc, #116]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80074d2:	f7fe f99d 	bl	8005810 <HAL_GetTick>
 80074d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074d8:	e009      	b.n	80074ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80074da:	f7fe f999 	bl	8005810 <HAL_GetTick>
 80074de:	4602      	mov	r2, r0
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	1ad3      	subs	r3, r2, r3
 80074e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074e8:	d901      	bls.n	80074ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80074ea:	2303      	movs	r3, #3
 80074ec:	e022      	b.n	8007534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80074ee:	4b14      	ldr	r3, [pc, #80]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074fa:	d1ee      	bne.n	80074da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a0f      	ldr	r2, [pc, #60]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007502:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007506:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007508:	f7fe f982 	bl	8005810 <HAL_GetTick>
 800750c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800750e:	e009      	b.n	8007524 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007510:	f7fe f97e 	bl	8005810 <HAL_GetTick>
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	1ad3      	subs	r3, r2, r3
 800751a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800751e:	d901      	bls.n	8007524 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e007      	b.n	8007534 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800752c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007530:	d1ee      	bne.n	8007510 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3708      	adds	r7, #8
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40023800 	.word	0x40023800
 8007540:	40007000 	.word	0x40007000

08007544 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800754c:	2300      	movs	r3, #0
 800754e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	e291      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8087 	beq.w	8007676 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007568:	4b96      	ldr	r3, [pc, #600]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800756a:	689b      	ldr	r3, [r3, #8]
 800756c:	f003 030c 	and.w	r3, r3, #12
 8007570:	2b04      	cmp	r3, #4
 8007572:	d00c      	beq.n	800758e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007574:	4b93      	ldr	r3, [pc, #588]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007576:	689b      	ldr	r3, [r3, #8]
 8007578:	f003 030c 	and.w	r3, r3, #12
 800757c:	2b08      	cmp	r3, #8
 800757e:	d112      	bne.n	80075a6 <HAL_RCC_OscConfig+0x62>
 8007580:	4b90      	ldr	r3, [pc, #576]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007588:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800758c:	d10b      	bne.n	80075a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800758e:	4b8d      	ldr	r3, [pc, #564]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007596:	2b00      	cmp	r3, #0
 8007598:	d06c      	beq.n	8007674 <HAL_RCC_OscConfig+0x130>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d168      	bne.n	8007674 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e26b      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ae:	d106      	bne.n	80075be <HAL_RCC_OscConfig+0x7a>
 80075b0:	4b84      	ldr	r3, [pc, #528]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a83      	ldr	r2, [pc, #524]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075ba:	6013      	str	r3, [r2, #0]
 80075bc:	e02e      	b.n	800761c <HAL_RCC_OscConfig+0xd8>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d10c      	bne.n	80075e0 <HAL_RCC_OscConfig+0x9c>
 80075c6:	4b7f      	ldr	r3, [pc, #508]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a7e      	ldr	r2, [pc, #504]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80075d0:	6013      	str	r3, [r2, #0]
 80075d2:	4b7c      	ldr	r3, [pc, #496]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a7b      	ldr	r2, [pc, #492]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80075dc:	6013      	str	r3, [r2, #0]
 80075de:	e01d      	b.n	800761c <HAL_RCC_OscConfig+0xd8>
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80075e8:	d10c      	bne.n	8007604 <HAL_RCC_OscConfig+0xc0>
 80075ea:	4b76      	ldr	r3, [pc, #472]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	4a75      	ldr	r2, [pc, #468]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80075f4:	6013      	str	r3, [r2, #0]
 80075f6:	4b73      	ldr	r3, [pc, #460]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4a72      	ldr	r2, [pc, #456]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80075fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	e00b      	b.n	800761c <HAL_RCC_OscConfig+0xd8>
 8007604:	4b6f      	ldr	r3, [pc, #444]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a6e      	ldr	r2, [pc, #440]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800760a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800760e:	6013      	str	r3, [r2, #0]
 8007610:	4b6c      	ldr	r3, [pc, #432]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4a6b      	ldr	r2, [pc, #428]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800761a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d013      	beq.n	800764c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007624:	f7fe f8f4 	bl	8005810 <HAL_GetTick>
 8007628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800762a:	e008      	b.n	800763e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800762c:	f7fe f8f0 	bl	8005810 <HAL_GetTick>
 8007630:	4602      	mov	r2, r0
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	1ad3      	subs	r3, r2, r3
 8007636:	2b64      	cmp	r3, #100	; 0x64
 8007638:	d901      	bls.n	800763e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800763a:	2303      	movs	r3, #3
 800763c:	e21f      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800763e:	4b61      	ldr	r3, [pc, #388]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f0      	beq.n	800762c <HAL_RCC_OscConfig+0xe8>
 800764a:	e014      	b.n	8007676 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800764c:	f7fe f8e0 	bl	8005810 <HAL_GetTick>
 8007650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007652:	e008      	b.n	8007666 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007654:	f7fe f8dc 	bl	8005810 <HAL_GetTick>
 8007658:	4602      	mov	r2, r0
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	1ad3      	subs	r3, r2, r3
 800765e:	2b64      	cmp	r3, #100	; 0x64
 8007660:	d901      	bls.n	8007666 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007662:	2303      	movs	r3, #3
 8007664:	e20b      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007666:	4b57      	ldr	r3, [pc, #348]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1f0      	bne.n	8007654 <HAL_RCC_OscConfig+0x110>
 8007672:	e000      	b.n	8007676 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007674:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 0302 	and.w	r3, r3, #2
 800767e:	2b00      	cmp	r3, #0
 8007680:	d069      	beq.n	8007756 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007682:	4b50      	ldr	r3, [pc, #320]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f003 030c 	and.w	r3, r3, #12
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00b      	beq.n	80076a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800768e:	4b4d      	ldr	r3, [pc, #308]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	f003 030c 	and.w	r3, r3, #12
 8007696:	2b08      	cmp	r3, #8
 8007698:	d11c      	bne.n	80076d4 <HAL_RCC_OscConfig+0x190>
 800769a:	4b4a      	ldr	r3, [pc, #296]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d116      	bne.n	80076d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076a6:	4b47      	ldr	r3, [pc, #284]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	f003 0302 	and.w	r3, r3, #2
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d005      	beq.n	80076be <HAL_RCC_OscConfig+0x17a>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d001      	beq.n	80076be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80076ba:	2301      	movs	r3, #1
 80076bc:	e1df      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076be:	4b41      	ldr	r3, [pc, #260]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	691b      	ldr	r3, [r3, #16]
 80076ca:	00db      	lsls	r3, r3, #3
 80076cc:	493d      	ldr	r1, [pc, #244]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80076d2:	e040      	b.n	8007756 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	68db      	ldr	r3, [r3, #12]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d023      	beq.n	8007724 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80076dc:	4b39      	ldr	r3, [pc, #228]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a38      	ldr	r2, [pc, #224]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80076e2:	f043 0301 	orr.w	r3, r3, #1
 80076e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076e8:	f7fe f892 	bl	8005810 <HAL_GetTick>
 80076ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80076ee:	e008      	b.n	8007702 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80076f0:	f7fe f88e 	bl	8005810 <HAL_GetTick>
 80076f4:	4602      	mov	r2, r0
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	1ad3      	subs	r3, r2, r3
 80076fa:	2b02      	cmp	r3, #2
 80076fc:	d901      	bls.n	8007702 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e1bd      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007702:	4b30      	ldr	r3, [pc, #192]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	f003 0302 	and.w	r3, r3, #2
 800770a:	2b00      	cmp	r3, #0
 800770c:	d0f0      	beq.n	80076f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800770e:	4b2d      	ldr	r3, [pc, #180]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	00db      	lsls	r3, r3, #3
 800771c:	4929      	ldr	r1, [pc, #164]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800771e:	4313      	orrs	r3, r2
 8007720:	600b      	str	r3, [r1, #0]
 8007722:	e018      	b.n	8007756 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007724:	4b27      	ldr	r3, [pc, #156]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	4a26      	ldr	r2, [pc, #152]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800772a:	f023 0301 	bic.w	r3, r3, #1
 800772e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007730:	f7fe f86e 	bl	8005810 <HAL_GetTick>
 8007734:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007736:	e008      	b.n	800774a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007738:	f7fe f86a 	bl	8005810 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b02      	cmp	r3, #2
 8007744:	d901      	bls.n	800774a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e199      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 0302 	and.w	r3, r3, #2
 8007752:	2b00      	cmp	r3, #0
 8007754:	d1f0      	bne.n	8007738 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f003 0308 	and.w	r3, r3, #8
 800775e:	2b00      	cmp	r3, #0
 8007760:	d038      	beq.n	80077d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	695b      	ldr	r3, [r3, #20]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d019      	beq.n	800779e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800776a:	4b16      	ldr	r3, [pc, #88]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 800776c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800776e:	4a15      	ldr	r2, [pc, #84]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007770:	f043 0301 	orr.w	r3, r3, #1
 8007774:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007776:	f7fe f84b 	bl	8005810 <HAL_GetTick>
 800777a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800777c:	e008      	b.n	8007790 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800777e:	f7fe f847 	bl	8005810 <HAL_GetTick>
 8007782:	4602      	mov	r2, r0
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	1ad3      	subs	r3, r2, r3
 8007788:	2b02      	cmp	r3, #2
 800778a:	d901      	bls.n	8007790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800778c:	2303      	movs	r3, #3
 800778e:	e176      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007790:	4b0c      	ldr	r3, [pc, #48]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 8007792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007794:	f003 0302 	and.w	r3, r3, #2
 8007798:	2b00      	cmp	r3, #0
 800779a:	d0f0      	beq.n	800777e <HAL_RCC_OscConfig+0x23a>
 800779c:	e01a      	b.n	80077d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800779e:	4b09      	ldr	r3, [pc, #36]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80077a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077a2:	4a08      	ldr	r2, [pc, #32]	; (80077c4 <HAL_RCC_OscConfig+0x280>)
 80077a4:	f023 0301 	bic.w	r3, r3, #1
 80077a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077aa:	f7fe f831 	bl	8005810 <HAL_GetTick>
 80077ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077b0:	e00a      	b.n	80077c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80077b2:	f7fe f82d 	bl	8005810 <HAL_GetTick>
 80077b6:	4602      	mov	r2, r0
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	1ad3      	subs	r3, r2, r3
 80077bc:	2b02      	cmp	r3, #2
 80077be:	d903      	bls.n	80077c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80077c0:	2303      	movs	r3, #3
 80077c2:	e15c      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
 80077c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80077c8:	4b91      	ldr	r3, [pc, #580]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80077ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077cc:	f003 0302 	and.w	r3, r3, #2
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d1ee      	bne.n	80077b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	f000 80a4 	beq.w	800792a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80077e2:	4b8b      	ldr	r3, [pc, #556]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80077e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d10d      	bne.n	800780a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80077ee:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80077f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f2:	4a87      	ldr	r2, [pc, #540]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80077f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077f8:	6413      	str	r3, [r2, #64]	; 0x40
 80077fa:	4b85      	ldr	r3, [pc, #532]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007802:	60bb      	str	r3, [r7, #8]
 8007804:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007806:	2301      	movs	r3, #1
 8007808:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800780a:	4b82      	ldr	r3, [pc, #520]	; (8007a14 <HAL_RCC_OscConfig+0x4d0>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007812:	2b00      	cmp	r3, #0
 8007814:	d118      	bne.n	8007848 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007816:	4b7f      	ldr	r3, [pc, #508]	; (8007a14 <HAL_RCC_OscConfig+0x4d0>)
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a7e      	ldr	r2, [pc, #504]	; (8007a14 <HAL_RCC_OscConfig+0x4d0>)
 800781c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007820:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007822:	f7fd fff5 	bl	8005810 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800782a:	f7fd fff1 	bl	8005810 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b64      	cmp	r3, #100	; 0x64
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e120      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800783c:	4b75      	ldr	r3, [pc, #468]	; (8007a14 <HAL_RCC_OscConfig+0x4d0>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0f0      	beq.n	800782a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	689b      	ldr	r3, [r3, #8]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d106      	bne.n	800785e <HAL_RCC_OscConfig+0x31a>
 8007850:	4b6f      	ldr	r3, [pc, #444]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007854:	4a6e      	ldr	r2, [pc, #440]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007856:	f043 0301 	orr.w	r3, r3, #1
 800785a:	6713      	str	r3, [r2, #112]	; 0x70
 800785c:	e02d      	b.n	80078ba <HAL_RCC_OscConfig+0x376>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10c      	bne.n	8007880 <HAL_RCC_OscConfig+0x33c>
 8007866:	4b6a      	ldr	r3, [pc, #424]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800786a:	4a69      	ldr	r2, [pc, #420]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800786c:	f023 0301 	bic.w	r3, r3, #1
 8007870:	6713      	str	r3, [r2, #112]	; 0x70
 8007872:	4b67      	ldr	r3, [pc, #412]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007876:	4a66      	ldr	r2, [pc, #408]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007878:	f023 0304 	bic.w	r3, r3, #4
 800787c:	6713      	str	r3, [r2, #112]	; 0x70
 800787e:	e01c      	b.n	80078ba <HAL_RCC_OscConfig+0x376>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	689b      	ldr	r3, [r3, #8]
 8007884:	2b05      	cmp	r3, #5
 8007886:	d10c      	bne.n	80078a2 <HAL_RCC_OscConfig+0x35e>
 8007888:	4b61      	ldr	r3, [pc, #388]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800788a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800788c:	4a60      	ldr	r2, [pc, #384]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800788e:	f043 0304 	orr.w	r3, r3, #4
 8007892:	6713      	str	r3, [r2, #112]	; 0x70
 8007894:	4b5e      	ldr	r3, [pc, #376]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007898:	4a5d      	ldr	r2, [pc, #372]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800789a:	f043 0301 	orr.w	r3, r3, #1
 800789e:	6713      	str	r3, [r2, #112]	; 0x70
 80078a0:	e00b      	b.n	80078ba <HAL_RCC_OscConfig+0x376>
 80078a2:	4b5b      	ldr	r3, [pc, #364]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80078a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078a6:	4a5a      	ldr	r2, [pc, #360]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80078a8:	f023 0301 	bic.w	r3, r3, #1
 80078ac:	6713      	str	r3, [r2, #112]	; 0x70
 80078ae:	4b58      	ldr	r3, [pc, #352]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80078b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078b2:	4a57      	ldr	r2, [pc, #348]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80078b4:	f023 0304 	bic.w	r3, r3, #4
 80078b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	689b      	ldr	r3, [r3, #8]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d015      	beq.n	80078ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078c2:	f7fd ffa5 	bl	8005810 <HAL_GetTick>
 80078c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078c8:	e00a      	b.n	80078e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078ca:	f7fd ffa1 	bl	8005810 <HAL_GetTick>
 80078ce:	4602      	mov	r2, r0
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	1ad3      	subs	r3, r2, r3
 80078d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d8:	4293      	cmp	r3, r2
 80078da:	d901      	bls.n	80078e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80078dc:	2303      	movs	r3, #3
 80078de:	e0ce      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80078e0:	4b4b      	ldr	r3, [pc, #300]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80078e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e4:	f003 0302 	and.w	r3, r3, #2
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d0ee      	beq.n	80078ca <HAL_RCC_OscConfig+0x386>
 80078ec:	e014      	b.n	8007918 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078ee:	f7fd ff8f 	bl	8005810 <HAL_GetTick>
 80078f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80078f4:	e00a      	b.n	800790c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80078f6:	f7fd ff8b 	bl	8005810 <HAL_GetTick>
 80078fa:	4602      	mov	r2, r0
 80078fc:	693b      	ldr	r3, [r7, #16]
 80078fe:	1ad3      	subs	r3, r2, r3
 8007900:	f241 3288 	movw	r2, #5000	; 0x1388
 8007904:	4293      	cmp	r3, r2
 8007906:	d901      	bls.n	800790c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	e0b8      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800790c:	4b40      	ldr	r3, [pc, #256]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800790e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1ee      	bne.n	80078f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007918:	7dfb      	ldrb	r3, [r7, #23]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d105      	bne.n	800792a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800791e:	4b3c      	ldr	r3, [pc, #240]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007922:	4a3b      	ldr	r2, [pc, #236]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007924:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007928:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	2b00      	cmp	r3, #0
 8007930:	f000 80a4 	beq.w	8007a7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007934:	4b36      	ldr	r3, [pc, #216]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	f003 030c 	and.w	r3, r3, #12
 800793c:	2b08      	cmp	r3, #8
 800793e:	d06b      	beq.n	8007a18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	699b      	ldr	r3, [r3, #24]
 8007944:	2b02      	cmp	r3, #2
 8007946:	d149      	bne.n	80079dc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007948:	4b31      	ldr	r3, [pc, #196]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	4a30      	ldr	r2, [pc, #192]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 800794e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007952:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fd ff5c 	bl	8005810 <HAL_GetTick>
 8007958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800795a:	e008      	b.n	800796e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800795c:	f7fd ff58 	bl	8005810 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d901      	bls.n	800796e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800796a:	2303      	movs	r3, #3
 800796c:	e087      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800796e:	4b28      	ldr	r3, [pc, #160]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1f0      	bne.n	800795c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	69da      	ldr	r2, [r3, #28]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a1b      	ldr	r3, [r3, #32]
 8007982:	431a      	orrs	r2, r3
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	019b      	lsls	r3, r3, #6
 800798a:	431a      	orrs	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007990:	085b      	lsrs	r3, r3, #1
 8007992:	3b01      	subs	r3, #1
 8007994:	041b      	lsls	r3, r3, #16
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	4313      	orrs	r3, r2
 80079a0:	4a1b      	ldr	r2, [pc, #108]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079a6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079a8:	4b19      	ldr	r3, [pc, #100]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	4a18      	ldr	r2, [pc, #96]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80079b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b4:	f7fd ff2c 	bl	8005810 <HAL_GetTick>
 80079b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ba:	e008      	b.n	80079ce <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079bc:	f7fd ff28 	bl	8005810 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	2b02      	cmp	r3, #2
 80079c8:	d901      	bls.n	80079ce <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	e057      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079ce:	4b10      	ldr	r3, [pc, #64]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d0f0      	beq.n	80079bc <HAL_RCC_OscConfig+0x478>
 80079da:	e04f      	b.n	8007a7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079dc:	4b0c      	ldr	r3, [pc, #48]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0b      	ldr	r2, [pc, #44]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80079e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079e8:	f7fd ff12 	bl	8005810 <HAL_GetTick>
 80079ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079ee:	e008      	b.n	8007a02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079f0:	f7fd ff0e 	bl	8005810 <HAL_GetTick>
 80079f4:	4602      	mov	r2, r0
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	1ad3      	subs	r3, r2, r3
 80079fa:	2b02      	cmp	r3, #2
 80079fc:	d901      	bls.n	8007a02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80079fe:	2303      	movs	r3, #3
 8007a00:	e03d      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a02:	4b03      	ldr	r3, [pc, #12]	; (8007a10 <HAL_RCC_OscConfig+0x4cc>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1f0      	bne.n	80079f0 <HAL_RCC_OscConfig+0x4ac>
 8007a0e:	e035      	b.n	8007a7c <HAL_RCC_OscConfig+0x538>
 8007a10:	40023800 	.word	0x40023800
 8007a14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007a18:	4b1b      	ldr	r3, [pc, #108]	; (8007a88 <HAL_RCC_OscConfig+0x544>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	2b01      	cmp	r3, #1
 8007a24:	d028      	beq.n	8007a78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a30:	429a      	cmp	r2, r3
 8007a32:	d121      	bne.n	8007a78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d11a      	bne.n	8007a78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a48:	4013      	ands	r3, r2
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007a50:	4293      	cmp	r3, r2
 8007a52:	d111      	bne.n	8007a78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a5e:	085b      	lsrs	r3, r3, #1
 8007a60:	3b01      	subs	r3, #1
 8007a62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a64:	429a      	cmp	r2, r3
 8007a66:	d107      	bne.n	8007a78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d001      	beq.n	8007a7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e000      	b.n	8007a7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	40023800 	.word	0x40023800

08007a8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007a96:	2300      	movs	r3, #0
 8007a98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d101      	bne.n	8007aa4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007aa0:	2301      	movs	r3, #1
 8007aa2:	e0d0      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007aa4:	4b6a      	ldr	r3, [pc, #424]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f003 030f 	and.w	r3, r3, #15
 8007aac:	683a      	ldr	r2, [r7, #0]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	d910      	bls.n	8007ad4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ab2:	4b67      	ldr	r3, [pc, #412]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	f023 020f 	bic.w	r2, r3, #15
 8007aba:	4965      	ldr	r1, [pc, #404]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ac2:	4b63      	ldr	r3, [pc, #396]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 030f 	and.w	r3, r3, #15
 8007aca:	683a      	ldr	r2, [r7, #0]
 8007acc:	429a      	cmp	r2, r3
 8007ace:	d001      	beq.n	8007ad4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	e0b8      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f003 0302 	and.w	r3, r3, #2
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d020      	beq.n	8007b22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d005      	beq.n	8007af8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007aec:	4b59      	ldr	r3, [pc, #356]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	4a58      	ldr	r2, [pc, #352]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007af2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007af6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0308 	and.w	r3, r3, #8
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b04:	4b53      	ldr	r3, [pc, #332]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b06:	689b      	ldr	r3, [r3, #8]
 8007b08:	4a52      	ldr	r2, [pc, #328]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b10:	4b50      	ldr	r3, [pc, #320]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b12:	689b      	ldr	r3, [r3, #8]
 8007b14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	494d      	ldr	r1, [pc, #308]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b1e:	4313      	orrs	r3, r2
 8007b20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0301 	and.w	r3, r3, #1
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d040      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d107      	bne.n	8007b46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b36:	4b47      	ldr	r3, [pc, #284]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d115      	bne.n	8007b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b42:	2301      	movs	r3, #1
 8007b44:	e07f      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d107      	bne.n	8007b5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b4e:	4b41      	ldr	r3, [pc, #260]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d109      	bne.n	8007b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e073      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b5e:	4b3d      	ldr	r3, [pc, #244]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0302 	and.w	r3, r3, #2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d101      	bne.n	8007b6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e06b      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007b6e:	4b39      	ldr	r3, [pc, #228]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f023 0203 	bic.w	r2, r3, #3
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	4936      	ldr	r1, [pc, #216]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007b7c:	4313      	orrs	r3, r2
 8007b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b80:	f7fd fe46 	bl	8005810 <HAL_GetTick>
 8007b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b86:	e00a      	b.n	8007b9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007b88:	f7fd fe42 	bl	8005810 <HAL_GetTick>
 8007b8c:	4602      	mov	r2, r0
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	1ad3      	subs	r3, r2, r3
 8007b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e053      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007b9e:	4b2d      	ldr	r3, [pc, #180]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 020c 	and.w	r2, r3, #12
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d1eb      	bne.n	8007b88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007bb0:	4b27      	ldr	r3, [pc, #156]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f003 030f 	and.w	r3, r3, #15
 8007bb8:	683a      	ldr	r2, [r7, #0]
 8007bba:	429a      	cmp	r2, r3
 8007bbc:	d210      	bcs.n	8007be0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bbe:	4b24      	ldr	r3, [pc, #144]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f023 020f 	bic.w	r2, r3, #15
 8007bc6:	4922      	ldr	r1, [pc, #136]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bce:	4b20      	ldr	r3, [pc, #128]	; (8007c50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f003 030f 	and.w	r3, r3, #15
 8007bd6:	683a      	ldr	r2, [r7, #0]
 8007bd8:	429a      	cmp	r2, r3
 8007bda:	d001      	beq.n	8007be0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007bdc:	2301      	movs	r3, #1
 8007bde:	e032      	b.n	8007c46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d008      	beq.n	8007bfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bec:	4b19      	ldr	r3, [pc, #100]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	68db      	ldr	r3, [r3, #12]
 8007bf8:	4916      	ldr	r1, [pc, #88]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f003 0308 	and.w	r3, r3, #8
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d009      	beq.n	8007c1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007c0a:	4b12      	ldr	r3, [pc, #72]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	00db      	lsls	r3, r3, #3
 8007c18:	490e      	ldr	r1, [pc, #56]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007c1e:	f000 f821 	bl	8007c64 <HAL_RCC_GetSysClockFreq>
 8007c22:	4602      	mov	r2, r0
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	091b      	lsrs	r3, r3, #4
 8007c2a:	f003 030f 	and.w	r3, r3, #15
 8007c2e:	490a      	ldr	r1, [pc, #40]	; (8007c58 <HAL_RCC_ClockConfig+0x1cc>)
 8007c30:	5ccb      	ldrb	r3, [r1, r3]
 8007c32:	fa22 f303 	lsr.w	r3, r2, r3
 8007c36:	4a09      	ldr	r2, [pc, #36]	; (8007c5c <HAL_RCC_ClockConfig+0x1d0>)
 8007c38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_RCC_ClockConfig+0x1d4>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4618      	mov	r0, r3
 8007c40:	f7fd fda2 	bl	8005788 <HAL_InitTick>

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3710      	adds	r7, #16
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	40023c00 	.word	0x40023c00
 8007c54:	40023800 	.word	0x40023800
 8007c58:	0800b874 	.word	0x0800b874
 8007c5c:	20000064 	.word	0x20000064
 8007c60:	20000068 	.word	0x20000068

08007c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007c64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c68:	b094      	sub	sp, #80	; 0x50
 8007c6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007c70:	2300      	movs	r3, #0
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c74:	2300      	movs	r3, #0
 8007c76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c7c:	4b79      	ldr	r3, [pc, #484]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007c7e:	689b      	ldr	r3, [r3, #8]
 8007c80:	f003 030c 	and.w	r3, r3, #12
 8007c84:	2b08      	cmp	r3, #8
 8007c86:	d00d      	beq.n	8007ca4 <HAL_RCC_GetSysClockFreq+0x40>
 8007c88:	2b08      	cmp	r3, #8
 8007c8a:	f200 80e1 	bhi.w	8007e50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d002      	beq.n	8007c98 <HAL_RCC_GetSysClockFreq+0x34>
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d003      	beq.n	8007c9e <HAL_RCC_GetSysClockFreq+0x3a>
 8007c96:	e0db      	b.n	8007e50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007c98:	4b73      	ldr	r3, [pc, #460]	; (8007e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8007c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007c9c:	e0db      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007c9e:	4b73      	ldr	r3, [pc, #460]	; (8007e6c <HAL_RCC_GetSysClockFreq+0x208>)
 8007ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ca2:	e0d8      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ca4:	4b6f      	ldr	r3, [pc, #444]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ca6:	685b      	ldr	r3, [r3, #4]
 8007ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007cac:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007cae:	4b6d      	ldr	r3, [pc, #436]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d063      	beq.n	8007d82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cba:	4b6a      	ldr	r3, [pc, #424]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	099b      	lsrs	r3, r3, #6
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8007cc4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ccc:	633b      	str	r3, [r7, #48]	; 0x30
 8007cce:	2300      	movs	r3, #0
 8007cd0:	637b      	str	r3, [r7, #52]	; 0x34
 8007cd2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007cd6:	4622      	mov	r2, r4
 8007cd8:	462b      	mov	r3, r5
 8007cda:	f04f 0000 	mov.w	r0, #0
 8007cde:	f04f 0100 	mov.w	r1, #0
 8007ce2:	0159      	lsls	r1, r3, #5
 8007ce4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ce8:	0150      	lsls	r0, r2, #5
 8007cea:	4602      	mov	r2, r0
 8007cec:	460b      	mov	r3, r1
 8007cee:	4621      	mov	r1, r4
 8007cf0:	1a51      	subs	r1, r2, r1
 8007cf2:	6139      	str	r1, [r7, #16]
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	eb63 0301 	sbc.w	r3, r3, r1
 8007cfa:	617b      	str	r3, [r7, #20]
 8007cfc:	f04f 0200 	mov.w	r2, #0
 8007d00:	f04f 0300 	mov.w	r3, #0
 8007d04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d08:	4659      	mov	r1, fp
 8007d0a:	018b      	lsls	r3, r1, #6
 8007d0c:	4651      	mov	r1, sl
 8007d0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d12:	4651      	mov	r1, sl
 8007d14:	018a      	lsls	r2, r1, #6
 8007d16:	4651      	mov	r1, sl
 8007d18:	ebb2 0801 	subs.w	r8, r2, r1
 8007d1c:	4659      	mov	r1, fp
 8007d1e:	eb63 0901 	sbc.w	r9, r3, r1
 8007d22:	f04f 0200 	mov.w	r2, #0
 8007d26:	f04f 0300 	mov.w	r3, #0
 8007d2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d36:	4690      	mov	r8, r2
 8007d38:	4699      	mov	r9, r3
 8007d3a:	4623      	mov	r3, r4
 8007d3c:	eb18 0303 	adds.w	r3, r8, r3
 8007d40:	60bb      	str	r3, [r7, #8]
 8007d42:	462b      	mov	r3, r5
 8007d44:	eb49 0303 	adc.w	r3, r9, r3
 8007d48:	60fb      	str	r3, [r7, #12]
 8007d4a:	f04f 0200 	mov.w	r2, #0
 8007d4e:	f04f 0300 	mov.w	r3, #0
 8007d52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d56:	4629      	mov	r1, r5
 8007d58:	024b      	lsls	r3, r1, #9
 8007d5a:	4621      	mov	r1, r4
 8007d5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d60:	4621      	mov	r1, r4
 8007d62:	024a      	lsls	r2, r1, #9
 8007d64:	4610      	mov	r0, r2
 8007d66:	4619      	mov	r1, r3
 8007d68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d74:	f7f8 ff3a 	bl	8000bec <__aeabi_uldivmod>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4613      	mov	r3, r2
 8007d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d80:	e058      	b.n	8007e34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d82:	4b38      	ldr	r3, [pc, #224]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d84:	685b      	ldr	r3, [r3, #4]
 8007d86:	099b      	lsrs	r3, r3, #6
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	4611      	mov	r1, r2
 8007d8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007d92:	623b      	str	r3, [r7, #32]
 8007d94:	2300      	movs	r3, #0
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
 8007d98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007d9c:	4642      	mov	r2, r8
 8007d9e:	464b      	mov	r3, r9
 8007da0:	f04f 0000 	mov.w	r0, #0
 8007da4:	f04f 0100 	mov.w	r1, #0
 8007da8:	0159      	lsls	r1, r3, #5
 8007daa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dae:	0150      	lsls	r0, r2, #5
 8007db0:	4602      	mov	r2, r0
 8007db2:	460b      	mov	r3, r1
 8007db4:	4641      	mov	r1, r8
 8007db6:	ebb2 0a01 	subs.w	sl, r2, r1
 8007dba:	4649      	mov	r1, r9
 8007dbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8007dc0:	f04f 0200 	mov.w	r2, #0
 8007dc4:	f04f 0300 	mov.w	r3, #0
 8007dc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007dcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007dd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007dd4:	ebb2 040a 	subs.w	r4, r2, sl
 8007dd8:	eb63 050b 	sbc.w	r5, r3, fp
 8007ddc:	f04f 0200 	mov.w	r2, #0
 8007de0:	f04f 0300 	mov.w	r3, #0
 8007de4:	00eb      	lsls	r3, r5, #3
 8007de6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007dea:	00e2      	lsls	r2, r4, #3
 8007dec:	4614      	mov	r4, r2
 8007dee:	461d      	mov	r5, r3
 8007df0:	4643      	mov	r3, r8
 8007df2:	18e3      	adds	r3, r4, r3
 8007df4:	603b      	str	r3, [r7, #0]
 8007df6:	464b      	mov	r3, r9
 8007df8:	eb45 0303 	adc.w	r3, r5, r3
 8007dfc:	607b      	str	r3, [r7, #4]
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e0a:	4629      	mov	r1, r5
 8007e0c:	028b      	lsls	r3, r1, #10
 8007e0e:	4621      	mov	r1, r4
 8007e10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e14:	4621      	mov	r1, r4
 8007e16:	028a      	lsls	r2, r1, #10
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e1e:	2200      	movs	r2, #0
 8007e20:	61bb      	str	r3, [r7, #24]
 8007e22:	61fa      	str	r2, [r7, #28]
 8007e24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e28:	f7f8 fee0 	bl	8000bec <__aeabi_uldivmod>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	460b      	mov	r3, r1
 8007e30:	4613      	mov	r3, r2
 8007e32:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e34:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e36:	685b      	ldr	r3, [r3, #4]
 8007e38:	0c1b      	lsrs	r3, r3, #16
 8007e3a:	f003 0303 	and.w	r3, r3, #3
 8007e3e:	3301      	adds	r3, #1
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007e44:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e4c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e4e:	e002      	b.n	8007e56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e50:	4b05      	ldr	r3, [pc, #20]	; (8007e68 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e52:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3750      	adds	r7, #80	; 0x50
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e62:	bf00      	nop
 8007e64:	40023800 	.word	0x40023800
 8007e68:	00f42400 	.word	0x00f42400
 8007e6c:	007a1200 	.word	0x007a1200

08007e70 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007e70:	b480      	push	{r7}
 8007e72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007e74:	4b03      	ldr	r3, [pc, #12]	; (8007e84 <HAL_RCC_GetHCLKFreq+0x14>)
 8007e76:	681b      	ldr	r3, [r3, #0]
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	20000064 	.word	0x20000064

08007e88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007e88:	b580      	push	{r7, lr}
 8007e8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007e8c:	f7ff fff0 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007e90:	4602      	mov	r2, r0
 8007e92:	4b05      	ldr	r3, [pc, #20]	; (8007ea8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	0a9b      	lsrs	r3, r3, #10
 8007e98:	f003 0307 	and.w	r3, r3, #7
 8007e9c:	4903      	ldr	r1, [pc, #12]	; (8007eac <HAL_RCC_GetPCLK1Freq+0x24>)
 8007e9e:	5ccb      	ldrb	r3, [r1, r3]
 8007ea0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	bd80      	pop	{r7, pc}
 8007ea8:	40023800 	.word	0x40023800
 8007eac:	0800b884 	.word	0x0800b884

08007eb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007eb4:	f7ff ffdc 	bl	8007e70 <HAL_RCC_GetHCLKFreq>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	0b5b      	lsrs	r3, r3, #13
 8007ec0:	f003 0307 	and.w	r3, r3, #7
 8007ec4:	4903      	ldr	r1, [pc, #12]	; (8007ed4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ec6:	5ccb      	ldrb	r3, [r1, r3]
 8007ec8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ecc:	4618      	mov	r0, r3
 8007ece:	bd80      	pop	{r7, pc}
 8007ed0:	40023800 	.word	0x40023800
 8007ed4:	0800b884 	.word	0x0800b884

08007ed8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b088      	sub	sp, #32
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007eec:	2300      	movs	r3, #0
 8007eee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d012      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f00:	4b69      	ldr	r3, [pc, #420]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	4a68      	ldr	r2, [pc, #416]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f06:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007f0a:	6093      	str	r3, [r2, #8]
 8007f0c:	4b66      	ldr	r3, [pc, #408]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f0e:	689a      	ldr	r2, [r3, #8]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f14:	4964      	ldr	r1, [pc, #400]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d101      	bne.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007f22:	2301      	movs	r3, #1
 8007f24:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d017      	beq.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f32:	4b5d      	ldr	r3, [pc, #372]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f40:	4959      	ldr	r1, [pc, #356]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f42:	4313      	orrs	r3, r2
 8007f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f50:	d101      	bne.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007f52:	2301      	movs	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d017      	beq.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007f6e:	4b4e      	ldr	r3, [pc, #312]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f74:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7c:	494a      	ldr	r1, [pc, #296]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f8c:	d101      	bne.n	8007f92 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007faa:	2301      	movs	r3, #1
 8007fac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 0320 	and.w	r3, r3, #32
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 808b 	beq.w	80080d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007fbc:	4b3a      	ldr	r3, [pc, #232]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc0:	4a39      	ldr	r2, [pc, #228]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fc6:	6413      	str	r3, [r2, #64]	; 0x40
 8007fc8:	4b37      	ldr	r3, [pc, #220]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007fd0:	60bb      	str	r3, [r7, #8]
 8007fd2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007fd4:	4b35      	ldr	r3, [pc, #212]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a34      	ldr	r2, [pc, #208]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007fda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007fde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fe0:	f7fd fc16 	bl	8005810 <HAL_GetTick>
 8007fe4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007fe8:	f7fd fc12 	bl	8005810 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b64      	cmp	r3, #100	; 0x64
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e357      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007ffa:	4b2c      	ldr	r3, [pc, #176]	; (80080ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008006:	4b28      	ldr	r3, [pc, #160]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800800a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800800e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d035      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800801a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800801e:	693a      	ldr	r2, [r7, #16]
 8008020:	429a      	cmp	r2, r3
 8008022:	d02e      	beq.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008024:	4b20      	ldr	r3, [pc, #128]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800802c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800802e:	4b1e      	ldr	r3, [pc, #120]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008032:	4a1d      	ldr	r2, [pc, #116]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008038:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800803a:	4b1b      	ldr	r3, [pc, #108]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800803c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800803e:	4a1a      	ldr	r2, [pc, #104]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008044:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008046:	4a18      	ldr	r2, [pc, #96]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800804c:	4b16      	ldr	r3, [pc, #88]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800804e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	2b01      	cmp	r3, #1
 8008056:	d114      	bne.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008058:	f7fd fbda 	bl	8005810 <HAL_GetTick>
 800805c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800805e:	e00a      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008060:	f7fd fbd6 	bl	8005810 <HAL_GetTick>
 8008064:	4602      	mov	r2, r0
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	1ad3      	subs	r3, r2, r3
 800806a:	f241 3288 	movw	r2, #5000	; 0x1388
 800806e:	4293      	cmp	r3, r2
 8008070:	d901      	bls.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008072:	2303      	movs	r3, #3
 8008074:	e319      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008076:	4b0c      	ldr	r3, [pc, #48]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008078:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b00      	cmp	r3, #0
 8008080:	d0ee      	beq.n	8008060 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008086:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800808a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800808e:	d111      	bne.n	80080b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008090:	4b05      	ldr	r3, [pc, #20]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800809c:	4b04      	ldr	r3, [pc, #16]	; (80080b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800809e:	400b      	ands	r3, r1
 80080a0:	4901      	ldr	r1, [pc, #4]	; (80080a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	608b      	str	r3, [r1, #8]
 80080a6:	e00b      	b.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80080a8:	40023800 	.word	0x40023800
 80080ac:	40007000 	.word	0x40007000
 80080b0:	0ffffcff 	.word	0x0ffffcff
 80080b4:	4baa      	ldr	r3, [pc, #680]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	4aa9      	ldr	r2, [pc, #676]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80080be:	6093      	str	r3, [r2, #8]
 80080c0:	4ba7      	ldr	r3, [pc, #668]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80080cc:	49a4      	ldr	r1, [pc, #656]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0310 	and.w	r3, r3, #16
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d010      	beq.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80080de:	4ba0      	ldr	r3, [pc, #640]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e4:	4a9e      	ldr	r2, [pc, #632]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80080ee:	4b9c      	ldr	r3, [pc, #624]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f8:	4999      	ldr	r1, [pc, #612]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80080fa:	4313      	orrs	r3, r2
 80080fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00a      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800810c:	4b94      	ldr	r3, [pc, #592]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800810e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008112:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800811a:	4991      	ldr	r1, [pc, #580]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800812a:	2b00      	cmp	r3, #0
 800812c:	d00a      	beq.n	8008144 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800812e:	4b8c      	ldr	r3, [pc, #560]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008130:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008134:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800813c:	4988      	ldr	r1, [pc, #544]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800813e:	4313      	orrs	r3, r2
 8008140:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800814c:	2b00      	cmp	r3, #0
 800814e:	d00a      	beq.n	8008166 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008150:	4b83      	ldr	r3, [pc, #524]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008156:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800815e:	4980      	ldr	r1, [pc, #512]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008160:	4313      	orrs	r3, r2
 8008162:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800816e:	2b00      	cmp	r3, #0
 8008170:	d00a      	beq.n	8008188 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008172:	4b7b      	ldr	r3, [pc, #492]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008178:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008180:	4977      	ldr	r1, [pc, #476]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008182:	4313      	orrs	r3, r2
 8008184:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008190:	2b00      	cmp	r3, #0
 8008192:	d00a      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008194:	4b72      	ldr	r3, [pc, #456]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800819a:	f023 0203 	bic.w	r2, r3, #3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a2:	496f      	ldr	r1, [pc, #444]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081a4:	4313      	orrs	r3, r2
 80081a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d00a      	beq.n	80081cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80081b6:	4b6a      	ldr	r3, [pc, #424]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081bc:	f023 020c 	bic.w	r2, r3, #12
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081c4:	4966      	ldr	r1, [pc, #408]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d00a      	beq.n	80081ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80081d8:	4b61      	ldr	r3, [pc, #388]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e6:	495e      	ldr	r1, [pc, #376]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d00a      	beq.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80081fa:	4b59      	ldr	r3, [pc, #356]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80081fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008200:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008208:	4955      	ldr	r1, [pc, #340]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800820a:	4313      	orrs	r3, r2
 800820c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008218:	2b00      	cmp	r3, #0
 800821a:	d00a      	beq.n	8008232 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800821c:	4b50      	ldr	r3, [pc, #320]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800821e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822a:	494d      	ldr	r1, [pc, #308]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800822c:	4313      	orrs	r3, r2
 800822e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800823a:	2b00      	cmp	r3, #0
 800823c:	d00a      	beq.n	8008254 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800823e:	4b48      	ldr	r3, [pc, #288]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008244:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	4944      	ldr	r1, [pc, #272]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800824e:	4313      	orrs	r3, r2
 8008250:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800825c:	2b00      	cmp	r3, #0
 800825e:	d00a      	beq.n	8008276 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008260:	4b3f      	ldr	r3, [pc, #252]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008262:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008266:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800826e:	493c      	ldr	r1, [pc, #240]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008270:	4313      	orrs	r3, r2
 8008272:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800827e:	2b00      	cmp	r3, #0
 8008280:	d00a      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008282:	4b37      	ldr	r3, [pc, #220]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008288:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008290:	4933      	ldr	r1, [pc, #204]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008292:	4313      	orrs	r3, r2
 8008294:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00a      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80082a4:	4b2e      	ldr	r3, [pc, #184]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80082b2:	492b      	ldr	r1, [pc, #172]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082b4:	4313      	orrs	r3, r2
 80082b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d011      	beq.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80082c6:	4b26      	ldr	r3, [pc, #152]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082d4:	4922      	ldr	r1, [pc, #136]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80082d6:	4313      	orrs	r3, r2
 80082d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80082e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80082e4:	d101      	bne.n	80082ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80082e6:	2301      	movs	r3, #1
 80082e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f003 0308 	and.w	r3, r3, #8
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d001      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80082f6:	2301      	movs	r3, #1
 80082f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d00a      	beq.n	800831c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008306:	4b16      	ldr	r3, [pc, #88]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008308:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800830c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008316:	4313      	orrs	r3, r2
 8008318:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008324:	2b00      	cmp	r3, #0
 8008326:	d00b      	beq.n	8008340 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800832a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008338:	4909      	ldr	r1, [pc, #36]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800833a:	4313      	orrs	r3, r2
 800833c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	2b01      	cmp	r3, #1
 8008344:	d006      	beq.n	8008354 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800834e:	2b00      	cmp	r3, #0
 8008350:	f000 80d9 	beq.w	8008506 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008354:	4b02      	ldr	r3, [pc, #8]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a01      	ldr	r2, [pc, #4]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800835a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800835e:	e001      	b.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8008360:	40023800 	.word	0x40023800
 8008364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008366:	f7fd fa53 	bl	8005810 <HAL_GetTick>
 800836a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800836c:	e008      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800836e:	f7fd fa4f 	bl	8005810 <HAL_GetTick>
 8008372:	4602      	mov	r2, r0
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	1ad3      	subs	r3, r2, r3
 8008378:	2b64      	cmp	r3, #100	; 0x64
 800837a:	d901      	bls.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	e194      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008380:	4b6c      	ldr	r3, [pc, #432]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008388:	2b00      	cmp	r3, #0
 800838a:	d1f0      	bne.n	800836e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0301 	and.w	r3, r3, #1
 8008394:	2b00      	cmp	r3, #0
 8008396:	d021      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800839c:	2b00      	cmp	r3, #0
 800839e:	d11d      	bne.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80083a0:	4b64      	ldr	r3, [pc, #400]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083a6:	0c1b      	lsrs	r3, r3, #16
 80083a8:	f003 0303 	and.w	r3, r3, #3
 80083ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80083ae:	4b61      	ldr	r3, [pc, #388]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083b4:	0e1b      	lsrs	r3, r3, #24
 80083b6:	f003 030f 	and.w	r3, r3, #15
 80083ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	019a      	lsls	r2, r3, #6
 80083c2:	693b      	ldr	r3, [r7, #16]
 80083c4:	041b      	lsls	r3, r3, #16
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	061b      	lsls	r3, r3, #24
 80083cc:	431a      	orrs	r2, r3
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	689b      	ldr	r3, [r3, #8]
 80083d2:	071b      	lsls	r3, r3, #28
 80083d4:	4957      	ldr	r1, [pc, #348]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80083d6:	4313      	orrs	r3, r2
 80083d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d004      	beq.n	80083f2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f0:	d00a      	beq.n	8008408 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d02e      	beq.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008406:	d129      	bne.n	800845c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008408:	4b4a      	ldr	r3, [pc, #296]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	0c1b      	lsrs	r3, r3, #16
 8008410:	f003 0303 	and.w	r3, r3, #3
 8008414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008416:	4b47      	ldr	r3, [pc, #284]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800841c:	0f1b      	lsrs	r3, r3, #28
 800841e:	f003 0307 	and.w	r3, r3, #7
 8008422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	019a      	lsls	r2, r3, #6
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	041b      	lsls	r3, r3, #16
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	061b      	lsls	r3, r3, #24
 8008436:	431a      	orrs	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	071b      	lsls	r3, r3, #28
 800843c:	493d      	ldr	r1, [pc, #244]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800843e:	4313      	orrs	r3, r2
 8008440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008444:	4b3b      	ldr	r3, [pc, #236]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800844a:	f023 021f 	bic.w	r2, r3, #31
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008452:	3b01      	subs	r3, #1
 8008454:	4937      	ldr	r1, [pc, #220]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008456:	4313      	orrs	r3, r2
 8008458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008464:	2b00      	cmp	r3, #0
 8008466:	d01d      	beq.n	80084a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008468:	4b32      	ldr	r3, [pc, #200]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800846a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800846e:	0e1b      	lsrs	r3, r3, #24
 8008470:	f003 030f 	and.w	r3, r3, #15
 8008474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800847c:	0f1b      	lsrs	r3, r3, #28
 800847e:	f003 0307 	and.w	r3, r3, #7
 8008482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	685b      	ldr	r3, [r3, #4]
 8008488:	019a      	lsls	r2, r3, #6
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	691b      	ldr	r3, [r3, #16]
 800848e:	041b      	lsls	r3, r3, #16
 8008490:	431a      	orrs	r2, r3
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	061b      	lsls	r3, r3, #24
 8008496:	431a      	orrs	r2, r3
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	071b      	lsls	r3, r3, #28
 800849c:	4925      	ldr	r1, [pc, #148]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800849e:	4313      	orrs	r3, r2
 80084a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d011      	beq.n	80084d4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	685b      	ldr	r3, [r3, #4]
 80084b4:	019a      	lsls	r2, r3, #6
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	691b      	ldr	r3, [r3, #16]
 80084ba:	041b      	lsls	r3, r3, #16
 80084bc:	431a      	orrs	r2, r3
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	68db      	ldr	r3, [r3, #12]
 80084c2:	061b      	lsls	r3, r3, #24
 80084c4:	431a      	orrs	r2, r3
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	689b      	ldr	r3, [r3, #8]
 80084ca:	071b      	lsls	r3, r3, #28
 80084cc:	4919      	ldr	r1, [pc, #100]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084ce:	4313      	orrs	r3, r2
 80084d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80084d4:	4b17      	ldr	r3, [pc, #92]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a16      	ldr	r2, [pc, #88]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80084de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80084e0:	f7fd f996 	bl	8005810 <HAL_GetTick>
 80084e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084e6:	e008      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084e8:	f7fd f992 	bl	8005810 <HAL_GetTick>
 80084ec:	4602      	mov	r2, r0
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	1ad3      	subs	r3, r2, r3
 80084f2:	2b64      	cmp	r3, #100	; 0x64
 80084f4:	d901      	bls.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084f6:	2303      	movs	r3, #3
 80084f8:	e0d7      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80084fa:	4b0e      	ldr	r3, [pc, #56]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008502:	2b00      	cmp	r3, #0
 8008504:	d0f0      	beq.n	80084e8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008506:	69bb      	ldr	r3, [r7, #24]
 8008508:	2b01      	cmp	r3, #1
 800850a:	f040 80cd 	bne.w	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800850e:	4b09      	ldr	r3, [pc, #36]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a08      	ldr	r2, [pc, #32]	; (8008534 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8008514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800851a:	f7fd f979 	bl	8005810 <HAL_GetTick>
 800851e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008520:	e00a      	b.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008522:	f7fd f975 	bl	8005810 <HAL_GetTick>
 8008526:	4602      	mov	r2, r0
 8008528:	697b      	ldr	r3, [r7, #20]
 800852a:	1ad3      	subs	r3, r2, r3
 800852c:	2b64      	cmp	r3, #100	; 0x64
 800852e:	d903      	bls.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008530:	2303      	movs	r3, #3
 8008532:	e0ba      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8008534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008538:	4b5e      	ldr	r3, [pc, #376]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008544:	d0ed      	beq.n	8008522 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008556:	2b00      	cmp	r3, #0
 8008558:	d009      	beq.n	800856e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008562:	2b00      	cmp	r3, #0
 8008564:	d02e      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800856a:	2b00      	cmp	r3, #0
 800856c:	d12a      	bne.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800856e:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	0c1b      	lsrs	r3, r3, #16
 8008576:	f003 0303 	and.w	r3, r3, #3
 800857a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800857c:	4b4d      	ldr	r3, [pc, #308]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800857e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008582:	0f1b      	lsrs	r3, r3, #28
 8008584:	f003 0307 	and.w	r3, r3, #7
 8008588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	695b      	ldr	r3, [r3, #20]
 800858e:	019a      	lsls	r2, r3, #6
 8008590:	693b      	ldr	r3, [r7, #16]
 8008592:	041b      	lsls	r3, r3, #16
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	699b      	ldr	r3, [r3, #24]
 800859a:	061b      	lsls	r3, r3, #24
 800859c:	431a      	orrs	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	071b      	lsls	r3, r3, #28
 80085a2:	4944      	ldr	r1, [pc, #272]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085a4:	4313      	orrs	r3, r2
 80085a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80085aa:	4b42      	ldr	r3, [pc, #264]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085b8:	3b01      	subs	r3, #1
 80085ba:	021b      	lsls	r3, r3, #8
 80085bc:	493d      	ldr	r1, [pc, #244]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085be:	4313      	orrs	r3, r2
 80085c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d022      	beq.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085d8:	d11d      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80085da:	4b36      	ldr	r3, [pc, #216]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085e0:	0e1b      	lsrs	r3, r3, #24
 80085e2:	f003 030f 	and.w	r3, r3, #15
 80085e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80085e8:	4b32      	ldr	r3, [pc, #200]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80085ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ee:	0f1b      	lsrs	r3, r3, #28
 80085f0:	f003 0307 	and.w	r3, r3, #7
 80085f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	695b      	ldr	r3, [r3, #20]
 80085fa:	019a      	lsls	r2, r3, #6
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	041b      	lsls	r3, r3, #16
 8008602:	431a      	orrs	r2, r3
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	061b      	lsls	r3, r3, #24
 8008608:	431a      	orrs	r2, r3
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	071b      	lsls	r3, r3, #28
 800860e:	4929      	ldr	r1, [pc, #164]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008610:	4313      	orrs	r3, r2
 8008612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	f003 0308 	and.w	r3, r3, #8
 800861e:	2b00      	cmp	r3, #0
 8008620:	d028      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008622:	4b24      	ldr	r3, [pc, #144]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008628:	0e1b      	lsrs	r3, r3, #24
 800862a:	f003 030f 	and.w	r3, r3, #15
 800862e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008630:	4b20      	ldr	r3, [pc, #128]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008636:	0c1b      	lsrs	r3, r3, #16
 8008638:	f003 0303 	and.w	r3, r3, #3
 800863c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	695b      	ldr	r3, [r3, #20]
 8008642:	019a      	lsls	r2, r3, #6
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	041b      	lsls	r3, r3, #16
 8008648:	431a      	orrs	r2, r3
 800864a:	693b      	ldr	r3, [r7, #16]
 800864c:	061b      	lsls	r3, r3, #24
 800864e:	431a      	orrs	r2, r3
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	69db      	ldr	r3, [r3, #28]
 8008654:	071b      	lsls	r3, r3, #28
 8008656:	4917      	ldr	r1, [pc, #92]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008658:	4313      	orrs	r3, r2
 800865a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866c:	4911      	ldr	r1, [pc, #68]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008674:	4b0f      	ldr	r3, [pc, #60]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a0e      	ldr	r2, [pc, #56]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800867a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800867e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008680:	f7fd f8c6 	bl	8005810 <HAL_GetTick>
 8008684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008686:	e008      	b.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008688:	f7fd f8c2 	bl	8005810 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b64      	cmp	r3, #100	; 0x64
 8008694:	d901      	bls.n	800869a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e007      	b.n	80086aa <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800869a:	4b06      	ldr	r3, [pc, #24]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80086a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80086a6:	d1ef      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3720      	adds	r7, #32
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40023800 	.word	0x40023800

080086b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	e049      	b.n	800875e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d106      	bne.n	80086e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2200      	movs	r2, #0
 80086da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7fc fc02 	bl	8004ee8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2202      	movs	r2, #2
 80086e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	3304      	adds	r3, #4
 80086f4:	4619      	mov	r1, r3
 80086f6:	4610      	mov	r0, r2
 80086f8:	f000 fdac 	bl	8009254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2201      	movs	r2, #1
 8008700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	2201      	movs	r2, #1
 8008708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2201      	movs	r2, #1
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2201      	movs	r2, #1
 8008718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2201      	movs	r2, #1
 8008720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2201      	movs	r2, #1
 8008728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2201      	movs	r2, #1
 8008730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2201      	movs	r2, #1
 8008750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2201      	movs	r2, #1
 8008758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800875c:	2300      	movs	r3, #0
}
 800875e:	4618      	mov	r0, r3
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}
	...

08008768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  //printf("assert_param1: %d\n",htim->Instance);
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  //printf("assert_param2: %d\n",htim->Instance);
  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008776:	b2db      	uxtb	r3, r3
 8008778:	2b01      	cmp	r3, #1
 800877a:	d001      	beq.n	8008780 <HAL_TIM_Base_Start_IT+0x18>
  {
	  //printf("HAL_ERROR: %d\n",htim->Instance);
    return HAL_ERROR;
 800877c:	2301      	movs	r3, #1
 800877e:	e054      	b.n	800882a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2202      	movs	r2, #2
 8008784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a26      	ldr	r2, [pc, #152]	; (8008838 <HAL_TIM_Base_Start_IT+0xd0>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d022      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087aa:	d01d      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a22      	ldr	r2, [pc, #136]	; (800883c <HAL_TIM_Base_Start_IT+0xd4>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d018      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a21      	ldr	r2, [pc, #132]	; (8008840 <HAL_TIM_Base_Start_IT+0xd8>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d013      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a1f      	ldr	r2, [pc, #124]	; (8008844 <HAL_TIM_Base_Start_IT+0xdc>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d00e      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a1e      	ldr	r2, [pc, #120]	; (8008848 <HAL_TIM_Base_Start_IT+0xe0>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d009      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a1c      	ldr	r2, [pc, #112]	; (800884c <HAL_TIM_Base_Start_IT+0xe4>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d004      	beq.n	80087e8 <HAL_TIM_Base_Start_IT+0x80>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a1b      	ldr	r2, [pc, #108]	; (8008850 <HAL_TIM_Base_Start_IT+0xe8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d115      	bne.n	8008814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	689a      	ldr	r2, [r3, #8]
 80087ee:	4b19      	ldr	r3, [pc, #100]	; (8008854 <HAL_TIM_Base_Start_IT+0xec>)
 80087f0:	4013      	ands	r3, r2
 80087f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b06      	cmp	r3, #6
 80087f8:	d015      	beq.n	8008826 <HAL_TIM_Base_Start_IT+0xbe>
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008800:	d011      	beq.n	8008826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f042 0201 	orr.w	r2, r2, #1
 8008810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008812:	e008      	b.n	8008826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f042 0201 	orr.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]
 8008824:	e000      	b.n	8008828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008826:	bf00      	nop
  }

  /* Return function status */
  //printf("HAL_OK: %d\n", htim->Instance);
  return HAL_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3714      	adds	r7, #20
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop
 8008838:	40010000 	.word	0x40010000
 800883c:	40000400 	.word	0x40000400
 8008840:	40000800 	.word	0x40000800
 8008844:	40000c00 	.word	0x40000c00
 8008848:	40010400 	.word	0x40010400
 800884c:	40014000 	.word	0x40014000
 8008850:	40001800 	.word	0x40001800
 8008854:	00010007 	.word	0x00010007

08008858 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008858:	b480      	push	{r7}
 800885a:	b083      	sub	sp, #12
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68da      	ldr	r2, [r3, #12]
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f022 0201 	bic.w	r2, r2, #1
 800886e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	6a1a      	ldr	r2, [r3, #32]
 8008876:	f241 1311 	movw	r3, #4369	; 0x1111
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d10f      	bne.n	80088a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	6a1a      	ldr	r2, [r3, #32]
 8008886:	f240 4344 	movw	r3, #1092	; 0x444
 800888a:	4013      	ands	r3, r2
 800888c:	2b00      	cmp	r3, #0
 800888e:	d107      	bne.n	80088a0 <HAL_TIM_Base_Stop_IT+0x48>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	681a      	ldr	r2, [r3, #0]
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0201 	bic.w	r2, r2, #1
 800889e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80088a8:	2300      	movs	r3, #0
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	370c      	adds	r7, #12
 80088ae:	46bd      	mov	sp, r7
 80088b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b4:	4770      	bx	lr

080088b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b082      	sub	sp, #8
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80088c4:	2301      	movs	r3, #1
 80088c6:	e049      	b.n	800895c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	2200      	movs	r2, #0
 80088d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80088dc:	6878      	ldr	r0, [r7, #4]
 80088de:	f000 f841 	bl	8008964 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2202      	movs	r2, #2
 80088e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681a      	ldr	r2, [r3, #0]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	3304      	adds	r3, #4
 80088f2:	4619      	mov	r1, r3
 80088f4:	4610      	mov	r0, r2
 80088f6:	f000 fcad 	bl	8009254 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	2201      	movs	r2, #1
 80088fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	2201      	movs	r2, #1
 8008906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	2201      	movs	r2, #1
 8008916:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2201      	movs	r2, #1
 800891e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2201      	movs	r2, #1
 8008926:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	2201      	movs	r2, #1
 800892e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2201      	movs	r2, #1
 8008936:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	2201      	movs	r2, #1
 800893e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	2201      	movs	r2, #1
 800894e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2201      	movs	r2, #1
 8008956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}

08008964 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800896c:	bf00      	nop
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008982:	2300      	movs	r3, #0
 8008984:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d109      	bne.n	80089a0 <HAL_TIM_PWM_Start_IT+0x28>
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b01      	cmp	r3, #1
 8008996:	bf14      	ite	ne
 8008998:	2301      	movne	r3, #1
 800899a:	2300      	moveq	r3, #0
 800899c:	b2db      	uxtb	r3, r3
 800899e:	e03c      	b.n	8008a1a <HAL_TIM_PWM_Start_IT+0xa2>
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b04      	cmp	r3, #4
 80089a4:	d109      	bne.n	80089ba <HAL_TIM_PWM_Start_IT+0x42>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	bf14      	ite	ne
 80089b2:	2301      	movne	r3, #1
 80089b4:	2300      	moveq	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	e02f      	b.n	8008a1a <HAL_TIM_PWM_Start_IT+0xa2>
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b08      	cmp	r3, #8
 80089be:	d109      	bne.n	80089d4 <HAL_TIM_PWM_Start_IT+0x5c>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	bf14      	ite	ne
 80089cc:	2301      	movne	r3, #1
 80089ce:	2300      	moveq	r3, #0
 80089d0:	b2db      	uxtb	r3, r3
 80089d2:	e022      	b.n	8008a1a <HAL_TIM_PWM_Start_IT+0xa2>
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b0c      	cmp	r3, #12
 80089d8:	d109      	bne.n	80089ee <HAL_TIM_PWM_Start_IT+0x76>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80089e0:	b2db      	uxtb	r3, r3
 80089e2:	2b01      	cmp	r3, #1
 80089e4:	bf14      	ite	ne
 80089e6:	2301      	movne	r3, #1
 80089e8:	2300      	moveq	r3, #0
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	e015      	b.n	8008a1a <HAL_TIM_PWM_Start_IT+0xa2>
 80089ee:	683b      	ldr	r3, [r7, #0]
 80089f0:	2b10      	cmp	r3, #16
 80089f2:	d109      	bne.n	8008a08 <HAL_TIM_PWM_Start_IT+0x90>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	2b01      	cmp	r3, #1
 80089fe:	bf14      	ite	ne
 8008a00:	2301      	movne	r3, #1
 8008a02:	2300      	moveq	r3, #0
 8008a04:	b2db      	uxtb	r3, r3
 8008a06:	e008      	b.n	8008a1a <HAL_TIM_PWM_Start_IT+0xa2>
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	bf14      	ite	ne
 8008a14:	2301      	movne	r3, #1
 8008a16:	2300      	moveq	r3, #0
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d001      	beq.n	8008a22 <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	e0dd      	b.n	8008bde <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d104      	bne.n	8008a32 <HAL_TIM_PWM_Start_IT+0xba>
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2202      	movs	r2, #2
 8008a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008a30:	e023      	b.n	8008a7a <HAL_TIM_PWM_Start_IT+0x102>
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	2b04      	cmp	r3, #4
 8008a36:	d104      	bne.n	8008a42 <HAL_TIM_PWM_Start_IT+0xca>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008a40:	e01b      	b.n	8008a7a <HAL_TIM_PWM_Start_IT+0x102>
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	2b08      	cmp	r3, #8
 8008a46:	d104      	bne.n	8008a52 <HAL_TIM_PWM_Start_IT+0xda>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2202      	movs	r2, #2
 8008a4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008a50:	e013      	b.n	8008a7a <HAL_TIM_PWM_Start_IT+0x102>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b0c      	cmp	r3, #12
 8008a56:	d104      	bne.n	8008a62 <HAL_TIM_PWM_Start_IT+0xea>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2202      	movs	r2, #2
 8008a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008a60:	e00b      	b.n	8008a7a <HAL_TIM_PWM_Start_IT+0x102>
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	2b10      	cmp	r3, #16
 8008a66:	d104      	bne.n	8008a72 <HAL_TIM_PWM_Start_IT+0xfa>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2202      	movs	r2, #2
 8008a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008a70:	e003      	b.n	8008a7a <HAL_TIM_PWM_Start_IT+0x102>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2202      	movs	r2, #2
 8008a76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008a7a:	683b      	ldr	r3, [r7, #0]
 8008a7c:	2b0c      	cmp	r3, #12
 8008a7e:	d841      	bhi.n	8008b04 <HAL_TIM_PWM_Start_IT+0x18c>
 8008a80:	a201      	add	r2, pc, #4	; (adr r2, 8008a88 <HAL_TIM_PWM_Start_IT+0x110>)
 8008a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a86:	bf00      	nop
 8008a88:	08008abd 	.word	0x08008abd
 8008a8c:	08008b05 	.word	0x08008b05
 8008a90:	08008b05 	.word	0x08008b05
 8008a94:	08008b05 	.word	0x08008b05
 8008a98:	08008acf 	.word	0x08008acf
 8008a9c:	08008b05 	.word	0x08008b05
 8008aa0:	08008b05 	.word	0x08008b05
 8008aa4:	08008b05 	.word	0x08008b05
 8008aa8:	08008ae1 	.word	0x08008ae1
 8008aac:	08008b05 	.word	0x08008b05
 8008ab0:	08008b05 	.word	0x08008b05
 8008ab4:	08008b05 	.word	0x08008b05
 8008ab8:	08008af3 	.word	0x08008af3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	68da      	ldr	r2, [r3, #12]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0202 	orr.w	r2, r2, #2
 8008aca:	60da      	str	r2, [r3, #12]
      break;
 8008acc:	e01d      	b.n	8008b0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	68da      	ldr	r2, [r3, #12]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f042 0204 	orr.w	r2, r2, #4
 8008adc:	60da      	str	r2, [r3, #12]
      break;
 8008ade:	e014      	b.n	8008b0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	68da      	ldr	r2, [r3, #12]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f042 0208 	orr.w	r2, r2, #8
 8008aee:	60da      	str	r2, [r3, #12]
      break;
 8008af0:	e00b      	b.n	8008b0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	f042 0210 	orr.w	r2, r2, #16
 8008b00:	60da      	str	r2, [r3, #12]
      break;
 8008b02:	e002      	b.n	8008b0a <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8008b04:	2301      	movs	r3, #1
 8008b06:	73fb      	strb	r3, [r7, #15]
      break;
 8008b08:	bf00      	nop
  }

  if (status == HAL_OK)
 8008b0a:	7bfb      	ldrb	r3, [r7, #15]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d165      	bne.n	8008bdc <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	2201      	movs	r2, #1
 8008b16:	6839      	ldr	r1, [r7, #0]
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f000 ff33 	bl	8009984 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a31      	ldr	r2, [pc, #196]	; (8008be8 <HAL_TIM_PWM_Start_IT+0x270>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d004      	beq.n	8008b32 <HAL_TIM_PWM_Start_IT+0x1ba>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	4a2f      	ldr	r2, [pc, #188]	; (8008bec <HAL_TIM_PWM_Start_IT+0x274>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d101      	bne.n	8008b36 <HAL_TIM_PWM_Start_IT+0x1be>
 8008b32:	2301      	movs	r3, #1
 8008b34:	e000      	b.n	8008b38 <HAL_TIM_PWM_Start_IT+0x1c0>
 8008b36:	2300      	movs	r3, #0
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d007      	beq.n	8008b4c <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008b4a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a25      	ldr	r2, [pc, #148]	; (8008be8 <HAL_TIM_PWM_Start_IT+0x270>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d022      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b5e:	d01d      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a22      	ldr	r2, [pc, #136]	; (8008bf0 <HAL_TIM_PWM_Start_IT+0x278>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d018      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a21      	ldr	r2, [pc, #132]	; (8008bf4 <HAL_TIM_PWM_Start_IT+0x27c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d013      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1f      	ldr	r2, [pc, #124]	; (8008bf8 <HAL_TIM_PWM_Start_IT+0x280>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d00e      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1a      	ldr	r2, [pc, #104]	; (8008bec <HAL_TIM_PWM_Start_IT+0x274>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d009      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a1b      	ldr	r2, [pc, #108]	; (8008bfc <HAL_TIM_PWM_Start_IT+0x284>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d004      	beq.n	8008b9c <HAL_TIM_PWM_Start_IT+0x224>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	4a1a      	ldr	r2, [pc, #104]	; (8008c00 <HAL_TIM_PWM_Start_IT+0x288>)
 8008b98:	4293      	cmp	r3, r2
 8008b9a:	d115      	bne.n	8008bc8 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	689a      	ldr	r2, [r3, #8]
 8008ba2:	4b18      	ldr	r3, [pc, #96]	; (8008c04 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008ba4:	4013      	ands	r3, r2
 8008ba6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	2b06      	cmp	r3, #6
 8008bac:	d015      	beq.n	8008bda <HAL_TIM_PWM_Start_IT+0x262>
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bb4:	d011      	beq.n	8008bda <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	681a      	ldr	r2, [r3, #0]
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f042 0201 	orr.w	r2, r2, #1
 8008bc4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bc6:	e008      	b.n	8008bda <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
 8008bd8:	e000      	b.n	8008bdc <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bda:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8008bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40010000 	.word	0x40010000
 8008bec:	40010400 	.word	0x40010400
 8008bf0:	40000400 	.word	0x40000400
 8008bf4:	40000800 	.word	0x40000800
 8008bf8:	40000c00 	.word	0x40000c00
 8008bfc:	40014000 	.word	0x40014000
 8008c00:	40001800 	.word	0x40001800
 8008c04:	00010007 	.word	0x00010007

08008c08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	691b      	ldr	r3, [r3, #16]
 8008c16:	f003 0302 	and.w	r3, r3, #2
 8008c1a:	2b02      	cmp	r3, #2
 8008c1c:	d122      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b02      	cmp	r3, #2
 8008c2a:	d11b      	bne.n	8008c64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f06f 0202 	mvn.w	r2, #2
 8008c34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2201      	movs	r2, #1
 8008c3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	699b      	ldr	r3, [r3, #24]
 8008c42:	f003 0303 	and.w	r3, r3, #3
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d003      	beq.n	8008c52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 fae4 	bl	8009218 <HAL_TIM_IC_CaptureCallback>
 8008c50:	e005      	b.n	8008c5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 fad6 	bl	8009204 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008c58:	6878      	ldr	r0, [r7, #4]
 8008c5a:	f000 fae7 	bl	800922c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2200      	movs	r2, #0
 8008c62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	691b      	ldr	r3, [r3, #16]
 8008c6a:	f003 0304 	and.w	r3, r3, #4
 8008c6e:	2b04      	cmp	r3, #4
 8008c70:	d122      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	68db      	ldr	r3, [r3, #12]
 8008c78:	f003 0304 	and.w	r3, r3, #4
 8008c7c:	2b04      	cmp	r3, #4
 8008c7e:	d11b      	bne.n	8008cb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f06f 0204 	mvn.w	r2, #4
 8008c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2202      	movs	r2, #2
 8008c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d003      	beq.n	8008ca6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f000 faba 	bl	8009218 <HAL_TIM_IC_CaptureCallback>
 8008ca4:	e005      	b.n	8008cb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 faac 	bl	8009204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	f000 fabd 	bl	800922c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f003 0308 	and.w	r3, r3, #8
 8008cc2:	2b08      	cmp	r3, #8
 8008cc4:	d122      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f003 0308 	and.w	r3, r3, #8
 8008cd0:	2b08      	cmp	r3, #8
 8008cd2:	d11b      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f06f 0208 	mvn.w	r2, #8
 8008cdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2204      	movs	r2, #4
 8008ce2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 fa90 	bl	8009218 <HAL_TIM_IC_CaptureCallback>
 8008cf8:	e005      	b.n	8008d06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 fa82 	bl	8009204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 fa93 	bl	800922c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0310 	and.w	r3, r3, #16
 8008d16:	2b10      	cmp	r3, #16
 8008d18:	d122      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f003 0310 	and.w	r3, r3, #16
 8008d24:	2b10      	cmp	r3, #16
 8008d26:	d11b      	bne.n	8008d60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0210 	mvn.w	r2, #16
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2208      	movs	r2, #8
 8008d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	69db      	ldr	r3, [r3, #28]
 8008d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 fa66 	bl	8009218 <HAL_TIM_IC_CaptureCallback>
 8008d4c:	e005      	b.n	8008d5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 fa58 	bl	8009204 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fa69 	bl	800922c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0301 	and.w	r3, r3, #1
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d10e      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0301 	and.w	r3, r3, #1
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d107      	bne.n	8008d8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0201 	mvn.w	r2, #1
 8008d84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f7f8 fee2 	bl	8001b50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d96:	2b80      	cmp	r3, #128	; 0x80
 8008d98:	d10e      	bne.n	8008db8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008da4:	2b80      	cmp	r3, #128	; 0x80
 8008da6:	d107      	bne.n	8008db8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008db0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f000 fea4 	bl	8009b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	691b      	ldr	r3, [r3, #16]
 8008dbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dc6:	d10e      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dd2:	2b80      	cmp	r3, #128	; 0x80
 8008dd4:	d107      	bne.n	8008de6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008dde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f000 fe97 	bl	8009b14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	691b      	ldr	r3, [r3, #16]
 8008dec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008df0:	2b40      	cmp	r3, #64	; 0x40
 8008df2:	d10e      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	68db      	ldr	r3, [r3, #12]
 8008dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d107      	bne.n	8008e12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fa17 	bl	8009240 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	f003 0320 	and.w	r3, r3, #32
 8008e1c:	2b20      	cmp	r3, #32
 8008e1e:	d10e      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68db      	ldr	r3, [r3, #12]
 8008e26:	f003 0320 	and.w	r3, r3, #32
 8008e2a:	2b20      	cmp	r3, #32
 8008e2c:	d107      	bne.n	8008e3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f06f 0220 	mvn.w	r2, #32
 8008e36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e38:	6878      	ldr	r0, [r7, #4]
 8008e3a:	f000 fe57 	bl	8009aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e3e:	bf00      	nop
 8008e40:	3708      	adds	r7, #8
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
	...

08008e48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e48:	b580      	push	{r7, lr}
 8008e4a:	b086      	sub	sp, #24
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e54:	2300      	movs	r3, #0
 8008e56:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e0ff      	b.n	8009066 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2b14      	cmp	r3, #20
 8008e72:	f200 80f0 	bhi.w	8009056 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008e76:	a201      	add	r2, pc, #4	; (adr r2, 8008e7c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e7c:	08008ed1 	.word	0x08008ed1
 8008e80:	08009057 	.word	0x08009057
 8008e84:	08009057 	.word	0x08009057
 8008e88:	08009057 	.word	0x08009057
 8008e8c:	08008f11 	.word	0x08008f11
 8008e90:	08009057 	.word	0x08009057
 8008e94:	08009057 	.word	0x08009057
 8008e98:	08009057 	.word	0x08009057
 8008e9c:	08008f53 	.word	0x08008f53
 8008ea0:	08009057 	.word	0x08009057
 8008ea4:	08009057 	.word	0x08009057
 8008ea8:	08009057 	.word	0x08009057
 8008eac:	08008f93 	.word	0x08008f93
 8008eb0:	08009057 	.word	0x08009057
 8008eb4:	08009057 	.word	0x08009057
 8008eb8:	08009057 	.word	0x08009057
 8008ebc:	08008fd5 	.word	0x08008fd5
 8008ec0:	08009057 	.word	0x08009057
 8008ec4:	08009057 	.word	0x08009057
 8008ec8:	08009057 	.word	0x08009057
 8008ecc:	08009015 	.word	0x08009015
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	68b9      	ldr	r1, [r7, #8]
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f000 fa5c 	bl	8009394 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	699a      	ldr	r2, [r3, #24]
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0208 	orr.w	r2, r2, #8
 8008eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	699a      	ldr	r2, [r3, #24]
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0204 	bic.w	r2, r2, #4
 8008efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	6999      	ldr	r1, [r3, #24]
 8008f02:	68bb      	ldr	r3, [r7, #8]
 8008f04:	691a      	ldr	r2, [r3, #16]
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	619a      	str	r2, [r3, #24]
      break;
 8008f0e:	e0a5      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	68b9      	ldr	r1, [r7, #8]
 8008f16:	4618      	mov	r0, r3
 8008f18:	f000 faae 	bl	8009478 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	699a      	ldr	r2, [r3, #24]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	699a      	ldr	r2, [r3, #24]
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	6999      	ldr	r1, [r3, #24]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	021a      	lsls	r2, r3, #8
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	430a      	orrs	r2, r1
 8008f4e:	619a      	str	r2, [r3, #24]
      break;
 8008f50:	e084      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fb05 	bl	8009568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	69da      	ldr	r2, [r3, #28]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	f042 0208 	orr.w	r2, r2, #8
 8008f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	69da      	ldr	r2, [r3, #28]
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0204 	bic.w	r2, r2, #4
 8008f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	69d9      	ldr	r1, [r3, #28]
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	691a      	ldr	r2, [r3, #16]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	430a      	orrs	r2, r1
 8008f8e:	61da      	str	r2, [r3, #28]
      break;
 8008f90:	e064      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	68b9      	ldr	r1, [r7, #8]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 fb5b 	bl	8009654 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	69da      	ldr	r2, [r3, #28]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69da      	ldr	r2, [r3, #28]
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	69d9      	ldr	r1, [r3, #28]
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	691b      	ldr	r3, [r3, #16]
 8008fc8:	021a      	lsls	r2, r3, #8
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	430a      	orrs	r2, r1
 8008fd0:	61da      	str	r2, [r3, #28]
      break;
 8008fd2:	e043      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68b9      	ldr	r1, [r7, #8]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f000 fb92 	bl	8009704 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f042 0208 	orr.w	r2, r2, #8
 8008fee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	f022 0204 	bic.w	r2, r2, #4
 8008ffe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	691a      	ldr	r2, [r3, #16]
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	430a      	orrs	r2, r1
 8009010:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009012:	e023      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	68b9      	ldr	r1, [r7, #8]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 fbc4 	bl	80097a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800902e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800903e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	691b      	ldr	r3, [r3, #16]
 800904a:	021a      	lsls	r2, r3, #8
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	430a      	orrs	r2, r1
 8009052:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009054:	e002      	b.n	800905c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8009056:	2301      	movs	r3, #1
 8009058:	75fb      	strb	r3, [r7, #23]
      break;
 800905a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2200      	movs	r2, #0
 8009060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009064:	7dfb      	ldrb	r3, [r7, #23]
}
 8009066:	4618      	mov	r0, r3
 8009068:	3718      	adds	r7, #24
 800906a:	46bd      	mov	sp, r7
 800906c:	bd80      	pop	{r7, pc}
 800906e:	bf00      	nop

08009070 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
 8009078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800907a:	2300      	movs	r3, #0
 800907c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009084:	2b01      	cmp	r3, #1
 8009086:	d101      	bne.n	800908c <HAL_TIM_ConfigClockSource+0x1c>
 8009088:	2302      	movs	r3, #2
 800908a:	e0b4      	b.n	80091f6 <HAL_TIM_ConfigClockSource+0x186>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2201      	movs	r2, #1
 8009090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2202      	movs	r2, #2
 8009098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80090a4:	68ba      	ldr	r2, [r7, #8]
 80090a6:	4b56      	ldr	r3, [pc, #344]	; (8009200 <HAL_TIM_ConfigClockSource+0x190>)
 80090a8:	4013      	ands	r3, r2
 80090aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090ac:	68bb      	ldr	r3, [r7, #8]
 80090ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	68ba      	ldr	r2, [r7, #8]
 80090ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090c4:	d03e      	beq.n	8009144 <HAL_TIM_ConfigClockSource+0xd4>
 80090c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ca:	f200 8087 	bhi.w	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090d2:	f000 8086 	beq.w	80091e2 <HAL_TIM_ConfigClockSource+0x172>
 80090d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090da:	d87f      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090dc:	2b70      	cmp	r3, #112	; 0x70
 80090de:	d01a      	beq.n	8009116 <HAL_TIM_ConfigClockSource+0xa6>
 80090e0:	2b70      	cmp	r3, #112	; 0x70
 80090e2:	d87b      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090e4:	2b60      	cmp	r3, #96	; 0x60
 80090e6:	d050      	beq.n	800918a <HAL_TIM_ConfigClockSource+0x11a>
 80090e8:	2b60      	cmp	r3, #96	; 0x60
 80090ea:	d877      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090ec:	2b50      	cmp	r3, #80	; 0x50
 80090ee:	d03c      	beq.n	800916a <HAL_TIM_ConfigClockSource+0xfa>
 80090f0:	2b50      	cmp	r3, #80	; 0x50
 80090f2:	d873      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090f4:	2b40      	cmp	r3, #64	; 0x40
 80090f6:	d058      	beq.n	80091aa <HAL_TIM_ConfigClockSource+0x13a>
 80090f8:	2b40      	cmp	r3, #64	; 0x40
 80090fa:	d86f      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 80090fc:	2b30      	cmp	r3, #48	; 0x30
 80090fe:	d064      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009100:	2b30      	cmp	r3, #48	; 0x30
 8009102:	d86b      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 8009104:	2b20      	cmp	r3, #32
 8009106:	d060      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009108:	2b20      	cmp	r3, #32
 800910a:	d867      	bhi.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
 800910c:	2b00      	cmp	r3, #0
 800910e:	d05c      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009110:	2b10      	cmp	r3, #16
 8009112:	d05a      	beq.n	80091ca <HAL_TIM_ConfigClockSource+0x15a>
 8009114:	e062      	b.n	80091dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6818      	ldr	r0, [r3, #0]
 800911a:	683b      	ldr	r3, [r7, #0]
 800911c:	6899      	ldr	r1, [r3, #8]
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685a      	ldr	r2, [r3, #4]
 8009122:	683b      	ldr	r3, [r7, #0]
 8009124:	68db      	ldr	r3, [r3, #12]
 8009126:	f000 fc0d 	bl	8009944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	689b      	ldr	r3, [r3, #8]
 8009130:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009138:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	68ba      	ldr	r2, [r7, #8]
 8009140:	609a      	str	r2, [r3, #8]
      break;
 8009142:	e04f      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6818      	ldr	r0, [r3, #0]
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	6899      	ldr	r1, [r3, #8]
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	685a      	ldr	r2, [r3, #4]
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f000 fbf6 	bl	8009944 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	689a      	ldr	r2, [r3, #8]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009166:	609a      	str	r2, [r3, #8]
      break;
 8009168:	e03c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6818      	ldr	r0, [r3, #0]
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	6859      	ldr	r1, [r3, #4]
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	461a      	mov	r2, r3
 8009178:	f000 fb6a 	bl	8009850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	2150      	movs	r1, #80	; 0x50
 8009182:	4618      	mov	r0, r3
 8009184:	f000 fbc3 	bl	800990e <TIM_ITRx_SetConfig>
      break;
 8009188:	e02c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6818      	ldr	r0, [r3, #0]
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	6859      	ldr	r1, [r3, #4]
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	461a      	mov	r2, r3
 8009198:	f000 fb89 	bl	80098ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2160      	movs	r1, #96	; 0x60
 80091a2:	4618      	mov	r0, r3
 80091a4:	f000 fbb3 	bl	800990e <TIM_ITRx_SetConfig>
      break;
 80091a8:	e01c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6818      	ldr	r0, [r3, #0]
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	6859      	ldr	r1, [r3, #4]
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	68db      	ldr	r3, [r3, #12]
 80091b6:	461a      	mov	r2, r3
 80091b8:	f000 fb4a 	bl	8009850 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	2140      	movs	r1, #64	; 0x40
 80091c2:	4618      	mov	r0, r3
 80091c4:	f000 fba3 	bl	800990e <TIM_ITRx_SetConfig>
      break;
 80091c8:	e00c      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681a      	ldr	r2, [r3, #0]
 80091ce:	683b      	ldr	r3, [r7, #0]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4619      	mov	r1, r3
 80091d4:	4610      	mov	r0, r2
 80091d6:	f000 fb9a 	bl	800990e <TIM_ITRx_SetConfig>
      break;
 80091da:	e003      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80091dc:	2301      	movs	r3, #1
 80091de:	73fb      	strb	r3, [r7, #15]
      break;
 80091e0:	e000      	b.n	80091e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80091e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80091f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f6:	4618      	mov	r0, r3
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	fffeff88 	.word	0xfffeff88

08009204 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800920c:	bf00      	nop
 800920e:	370c      	adds	r7, #12
 8009210:	46bd      	mov	sp, r7
 8009212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009216:	4770      	bx	lr

08009218 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009218:	b480      	push	{r7}
 800921a:	b083      	sub	sp, #12
 800921c:	af00      	add	r7, sp, #0
 800921e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009220:	bf00      	nop
 8009222:	370c      	adds	r7, #12
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009234:	bf00      	nop
 8009236:	370c      	adds	r7, #12
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr

08009240 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009240:	b480      	push	{r7}
 8009242:	b083      	sub	sp, #12
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009254:	b480      	push	{r7}
 8009256:	b085      	sub	sp, #20
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	4a40      	ldr	r2, [pc, #256]	; (8009368 <TIM_Base_SetConfig+0x114>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d013      	beq.n	8009294 <TIM_Base_SetConfig+0x40>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009272:	d00f      	beq.n	8009294 <TIM_Base_SetConfig+0x40>
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	4a3d      	ldr	r2, [pc, #244]	; (800936c <TIM_Base_SetConfig+0x118>)
 8009278:	4293      	cmp	r3, r2
 800927a:	d00b      	beq.n	8009294 <TIM_Base_SetConfig+0x40>
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4a3c      	ldr	r2, [pc, #240]	; (8009370 <TIM_Base_SetConfig+0x11c>)
 8009280:	4293      	cmp	r3, r2
 8009282:	d007      	beq.n	8009294 <TIM_Base_SetConfig+0x40>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4a3b      	ldr	r2, [pc, #236]	; (8009374 <TIM_Base_SetConfig+0x120>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d003      	beq.n	8009294 <TIM_Base_SetConfig+0x40>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	4a3a      	ldr	r2, [pc, #232]	; (8009378 <TIM_Base_SetConfig+0x124>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d108      	bne.n	80092a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800929a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	68fa      	ldr	r2, [r7, #12]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	4a2f      	ldr	r2, [pc, #188]	; (8009368 <TIM_Base_SetConfig+0x114>)
 80092aa:	4293      	cmp	r3, r2
 80092ac:	d02b      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80092b4:	d027      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	4a2c      	ldr	r2, [pc, #176]	; (800936c <TIM_Base_SetConfig+0x118>)
 80092ba:	4293      	cmp	r3, r2
 80092bc:	d023      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	4a2b      	ldr	r2, [pc, #172]	; (8009370 <TIM_Base_SetConfig+0x11c>)
 80092c2:	4293      	cmp	r3, r2
 80092c4:	d01f      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	4a2a      	ldr	r2, [pc, #168]	; (8009374 <TIM_Base_SetConfig+0x120>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d01b      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	4a29      	ldr	r2, [pc, #164]	; (8009378 <TIM_Base_SetConfig+0x124>)
 80092d2:	4293      	cmp	r3, r2
 80092d4:	d017      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	4a28      	ldr	r2, [pc, #160]	; (800937c <TIM_Base_SetConfig+0x128>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d013      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	4a27      	ldr	r2, [pc, #156]	; (8009380 <TIM_Base_SetConfig+0x12c>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d00f      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a26      	ldr	r2, [pc, #152]	; (8009384 <TIM_Base_SetConfig+0x130>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d00b      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a25      	ldr	r2, [pc, #148]	; (8009388 <TIM_Base_SetConfig+0x134>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d007      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	4a24      	ldr	r2, [pc, #144]	; (800938c <TIM_Base_SetConfig+0x138>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d003      	beq.n	8009306 <TIM_Base_SetConfig+0xb2>
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	4a23      	ldr	r2, [pc, #140]	; (8009390 <TIM_Base_SetConfig+0x13c>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d108      	bne.n	8009318 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800930c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	68db      	ldr	r3, [r3, #12]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	4313      	orrs	r3, r2
 8009316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	695b      	ldr	r3, [r3, #20]
 8009322:	4313      	orrs	r3, r2
 8009324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	689a      	ldr	r2, [r3, #8]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009334:	683b      	ldr	r3, [r7, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	4a0a      	ldr	r2, [pc, #40]	; (8009368 <TIM_Base_SetConfig+0x114>)
 8009340:	4293      	cmp	r3, r2
 8009342:	d003      	beq.n	800934c <TIM_Base_SetConfig+0xf8>
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	4a0c      	ldr	r2, [pc, #48]	; (8009378 <TIM_Base_SetConfig+0x124>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d103      	bne.n	8009354 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	691a      	ldr	r2, [r3, #16]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2201      	movs	r2, #1
 8009358:	615a      	str	r2, [r3, #20]
}
 800935a:	bf00      	nop
 800935c:	3714      	adds	r7, #20
 800935e:	46bd      	mov	sp, r7
 8009360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	40010000 	.word	0x40010000
 800936c:	40000400 	.word	0x40000400
 8009370:	40000800 	.word	0x40000800
 8009374:	40000c00 	.word	0x40000c00
 8009378:	40010400 	.word	0x40010400
 800937c:	40014000 	.word	0x40014000
 8009380:	40014400 	.word	0x40014400
 8009384:	40014800 	.word	0x40014800
 8009388:	40001800 	.word	0x40001800
 800938c:	40001c00 	.word	0x40001c00
 8009390:	40002000 	.word	0x40002000

08009394 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009394:	b480      	push	{r7}
 8009396:	b087      	sub	sp, #28
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0201 	bic.w	r2, r3, #1
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	685b      	ldr	r3, [r3, #4]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	699b      	ldr	r3, [r3, #24]
 80093ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4b2b      	ldr	r3, [pc, #172]	; (800946c <TIM_OC1_SetConfig+0xd8>)
 80093c0:	4013      	ands	r3, r2
 80093c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 0303 	bic.w	r3, r3, #3
 80093ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68fa      	ldr	r2, [r7, #12]
 80093d2:	4313      	orrs	r3, r2
 80093d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093d6:	697b      	ldr	r3, [r7, #20]
 80093d8:	f023 0302 	bic.w	r3, r3, #2
 80093dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	697a      	ldr	r2, [r7, #20]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	4a21      	ldr	r2, [pc, #132]	; (8009470 <TIM_OC1_SetConfig+0xdc>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d003      	beq.n	80093f8 <TIM_OC1_SetConfig+0x64>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	4a20      	ldr	r2, [pc, #128]	; (8009474 <TIM_OC1_SetConfig+0xe0>)
 80093f4:	4293      	cmp	r3, r2
 80093f6:	d10c      	bne.n	8009412 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	f023 0308 	bic.w	r3, r3, #8
 80093fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	697a      	ldr	r2, [r7, #20]
 8009406:	4313      	orrs	r3, r2
 8009408:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	f023 0304 	bic.w	r3, r3, #4
 8009410:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	4a16      	ldr	r2, [pc, #88]	; (8009470 <TIM_OC1_SetConfig+0xdc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d003      	beq.n	8009422 <TIM_OC1_SetConfig+0x8e>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4a15      	ldr	r2, [pc, #84]	; (8009474 <TIM_OC1_SetConfig+0xe0>)
 800941e:	4293      	cmp	r3, r2
 8009420:	d111      	bne.n	8009446 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800942a:	693b      	ldr	r3, [r7, #16]
 800942c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009432:	683b      	ldr	r3, [r7, #0]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	693a      	ldr	r2, [r7, #16]
 8009438:	4313      	orrs	r3, r2
 800943a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	699b      	ldr	r3, [r3, #24]
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	693a      	ldr	r2, [r7, #16]
 800944a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	685a      	ldr	r2, [r3, #4]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	697a      	ldr	r2, [r7, #20]
 800945e:	621a      	str	r2, [r3, #32]
}
 8009460:	bf00      	nop
 8009462:	371c      	adds	r7, #28
 8009464:	46bd      	mov	sp, r7
 8009466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946a:	4770      	bx	lr
 800946c:	fffeff8f 	.word	0xfffeff8f
 8009470:	40010000 	.word	0x40010000
 8009474:	40010400 	.word	0x40010400

08009478 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009478:	b480      	push	{r7}
 800947a:	b087      	sub	sp, #28
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6a1b      	ldr	r3, [r3, #32]
 8009486:	f023 0210 	bic.w	r2, r3, #16
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	6a1b      	ldr	r3, [r3, #32]
 8009492:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	699b      	ldr	r3, [r3, #24]
 800949e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	4b2e      	ldr	r3, [pc, #184]	; (800955c <TIM_OC2_SetConfig+0xe4>)
 80094a4:	4013      	ands	r3, r2
 80094a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80094ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80094b0:	683b      	ldr	r3, [r7, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	021b      	lsls	r3, r3, #8
 80094b6:	68fa      	ldr	r2, [r7, #12]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	f023 0320 	bic.w	r3, r3, #32
 80094c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80094c4:	683b      	ldr	r3, [r7, #0]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	011b      	lsls	r3, r3, #4
 80094ca:	697a      	ldr	r2, [r7, #20]
 80094cc:	4313      	orrs	r3, r2
 80094ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	4a23      	ldr	r2, [pc, #140]	; (8009560 <TIM_OC2_SetConfig+0xe8>)
 80094d4:	4293      	cmp	r3, r2
 80094d6:	d003      	beq.n	80094e0 <TIM_OC2_SetConfig+0x68>
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	4a22      	ldr	r2, [pc, #136]	; (8009564 <TIM_OC2_SetConfig+0xec>)
 80094dc:	4293      	cmp	r3, r2
 80094de:	d10d      	bne.n	80094fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	68db      	ldr	r3, [r3, #12]
 80094ec:	011b      	lsls	r3, r3, #4
 80094ee:	697a      	ldr	r2, [r7, #20]
 80094f0:	4313      	orrs	r3, r2
 80094f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094f4:	697b      	ldr	r3, [r7, #20]
 80094f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	4a18      	ldr	r2, [pc, #96]	; (8009560 <TIM_OC2_SetConfig+0xe8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d003      	beq.n	800950c <TIM_OC2_SetConfig+0x94>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4a17      	ldr	r2, [pc, #92]	; (8009564 <TIM_OC2_SetConfig+0xec>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d113      	bne.n	8009534 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009512:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009514:	693b      	ldr	r3, [r7, #16]
 8009516:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800951a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	009b      	lsls	r3, r3, #2
 8009522:	693a      	ldr	r2, [r7, #16]
 8009524:	4313      	orrs	r3, r2
 8009526:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	699b      	ldr	r3, [r3, #24]
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	693a      	ldr	r2, [r7, #16]
 8009530:	4313      	orrs	r3, r2
 8009532:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	693a      	ldr	r2, [r7, #16]
 8009538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009540:	683b      	ldr	r3, [r7, #0]
 8009542:	685a      	ldr	r2, [r3, #4]
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	697a      	ldr	r2, [r7, #20]
 800954c:	621a      	str	r2, [r3, #32]
}
 800954e:	bf00      	nop
 8009550:	371c      	adds	r7, #28
 8009552:	46bd      	mov	sp, r7
 8009554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009558:	4770      	bx	lr
 800955a:	bf00      	nop
 800955c:	feff8fff 	.word	0xfeff8fff
 8009560:	40010000 	.word	0x40010000
 8009564:	40010400 	.word	0x40010400

08009568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009568:	b480      	push	{r7}
 800956a:	b087      	sub	sp, #28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6a1b      	ldr	r3, [r3, #32]
 8009576:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6a1b      	ldr	r3, [r3, #32]
 8009582:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	685b      	ldr	r3, [r3, #4]
 8009588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009590:	68fa      	ldr	r2, [r7, #12]
 8009592:	4b2d      	ldr	r3, [pc, #180]	; (8009648 <TIM_OC3_SetConfig+0xe0>)
 8009594:	4013      	ands	r3, r2
 8009596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f023 0303 	bic.w	r3, r3, #3
 800959e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80095a0:	683b      	ldr	r3, [r7, #0]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	68fa      	ldr	r2, [r7, #12]
 80095a6:	4313      	orrs	r3, r2
 80095a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80095aa:	697b      	ldr	r3, [r7, #20]
 80095ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80095b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	021b      	lsls	r3, r3, #8
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4313      	orrs	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a22      	ldr	r2, [pc, #136]	; (800964c <TIM_OC3_SetConfig+0xe4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d003      	beq.n	80095ce <TIM_OC3_SetConfig+0x66>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	4a21      	ldr	r2, [pc, #132]	; (8009650 <TIM_OC3_SetConfig+0xe8>)
 80095ca:	4293      	cmp	r3, r2
 80095cc:	d10d      	bne.n	80095ea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	021b      	lsls	r3, r3, #8
 80095dc:	697a      	ldr	r2, [r7, #20]
 80095de:	4313      	orrs	r3, r2
 80095e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a17      	ldr	r2, [pc, #92]	; (800964c <TIM_OC3_SetConfig+0xe4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d003      	beq.n	80095fa <TIM_OC3_SetConfig+0x92>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a16      	ldr	r2, [pc, #88]	; (8009650 <TIM_OC3_SetConfig+0xe8>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d113      	bne.n	8009622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095fa:	693b      	ldr	r3, [r7, #16]
 80095fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800960a:	683b      	ldr	r3, [r7, #0]
 800960c:	695b      	ldr	r3, [r3, #20]
 800960e:	011b      	lsls	r3, r3, #4
 8009610:	693a      	ldr	r2, [r7, #16]
 8009612:	4313      	orrs	r3, r2
 8009614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	693a      	ldr	r2, [r7, #16]
 800961e:	4313      	orrs	r3, r2
 8009620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	693a      	ldr	r2, [r7, #16]
 8009626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800962e:	683b      	ldr	r3, [r7, #0]
 8009630:	685a      	ldr	r2, [r3, #4]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	697a      	ldr	r2, [r7, #20]
 800963a:	621a      	str	r2, [r3, #32]
}
 800963c:	bf00      	nop
 800963e:	371c      	adds	r7, #28
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr
 8009648:	fffeff8f 	.word	0xfffeff8f
 800964c:	40010000 	.word	0x40010000
 8009650:	40010400 	.word	0x40010400

08009654 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009654:	b480      	push	{r7}
 8009656:	b087      	sub	sp, #28
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
 800965c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6a1b      	ldr	r3, [r3, #32]
 8009662:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6a1b      	ldr	r3, [r3, #32]
 800966e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	685b      	ldr	r3, [r3, #4]
 8009674:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	4b1e      	ldr	r3, [pc, #120]	; (80096f8 <TIM_OC4_SetConfig+0xa4>)
 8009680:	4013      	ands	r3, r2
 8009682:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800968a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	021b      	lsls	r3, r3, #8
 8009692:	68fa      	ldr	r2, [r7, #12]
 8009694:	4313      	orrs	r3, r2
 8009696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800969e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	031b      	lsls	r3, r3, #12
 80096a6:	693a      	ldr	r2, [r7, #16]
 80096a8:	4313      	orrs	r3, r2
 80096aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	4a13      	ldr	r2, [pc, #76]	; (80096fc <TIM_OC4_SetConfig+0xa8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d003      	beq.n	80096bc <TIM_OC4_SetConfig+0x68>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	4a12      	ldr	r2, [pc, #72]	; (8009700 <TIM_OC4_SetConfig+0xac>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d109      	bne.n	80096d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80096bc:	697b      	ldr	r3, [r7, #20]
 80096be:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80096c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	019b      	lsls	r3, r3, #6
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	4313      	orrs	r3, r2
 80096ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	697a      	ldr	r2, [r7, #20]
 80096d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	621a      	str	r2, [r3, #32]
}
 80096ea:	bf00      	nop
 80096ec:	371c      	adds	r7, #28
 80096ee:	46bd      	mov	sp, r7
 80096f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f4:	4770      	bx	lr
 80096f6:	bf00      	nop
 80096f8:	feff8fff 	.word	0xfeff8fff
 80096fc:	40010000 	.word	0x40010000
 8009700:	40010400 	.word	0x40010400

08009704 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009704:	b480      	push	{r7}
 8009706:	b087      	sub	sp, #28
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
 800970c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a1b      	ldr	r3, [r3, #32]
 8009712:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a1b      	ldr	r3, [r3, #32]
 800971e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800972c:	68fa      	ldr	r2, [r7, #12]
 800972e:	4b1b      	ldr	r3, [pc, #108]	; (800979c <TIM_OC5_SetConfig+0x98>)
 8009730:	4013      	ands	r3, r2
 8009732:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009734:	683b      	ldr	r3, [r7, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	68fa      	ldr	r2, [r7, #12]
 800973a:	4313      	orrs	r3, r2
 800973c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009744:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	041b      	lsls	r3, r3, #16
 800974c:	693a      	ldr	r2, [r7, #16]
 800974e:	4313      	orrs	r3, r2
 8009750:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	4a12      	ldr	r2, [pc, #72]	; (80097a0 <TIM_OC5_SetConfig+0x9c>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d003      	beq.n	8009762 <TIM_OC5_SetConfig+0x5e>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	4a11      	ldr	r2, [pc, #68]	; (80097a4 <TIM_OC5_SetConfig+0xa0>)
 800975e:	4293      	cmp	r3, r2
 8009760:	d109      	bne.n	8009776 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	695b      	ldr	r3, [r3, #20]
 800976e:	021b      	lsls	r3, r3, #8
 8009770:	697a      	ldr	r2, [r7, #20]
 8009772:	4313      	orrs	r3, r2
 8009774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	697a      	ldr	r2, [r7, #20]
 800977a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	68fa      	ldr	r2, [r7, #12]
 8009780:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	685a      	ldr	r2, [r3, #4]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	693a      	ldr	r2, [r7, #16]
 800978e:	621a      	str	r2, [r3, #32]
}
 8009790:	bf00      	nop
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	fffeff8f 	.word	0xfffeff8f
 80097a0:	40010000 	.word	0x40010000
 80097a4:	40010400 	.word	0x40010400

080097a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6a1b      	ldr	r3, [r3, #32]
 80097b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	685b      	ldr	r3, [r3, #4]
 80097c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4b1c      	ldr	r3, [pc, #112]	; (8009844 <TIM_OC6_SetConfig+0x9c>)
 80097d4:	4013      	ands	r3, r2
 80097d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	021b      	lsls	r3, r3, #8
 80097de:	68fa      	ldr	r2, [r7, #12]
 80097e0:	4313      	orrs	r3, r2
 80097e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80097ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	689b      	ldr	r3, [r3, #8]
 80097f0:	051b      	lsls	r3, r3, #20
 80097f2:	693a      	ldr	r2, [r7, #16]
 80097f4:	4313      	orrs	r3, r2
 80097f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a13      	ldr	r2, [pc, #76]	; (8009848 <TIM_OC6_SetConfig+0xa0>)
 80097fc:	4293      	cmp	r3, r2
 80097fe:	d003      	beq.n	8009808 <TIM_OC6_SetConfig+0x60>
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	4a12      	ldr	r2, [pc, #72]	; (800984c <TIM_OC6_SetConfig+0xa4>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d109      	bne.n	800981c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800980e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	029b      	lsls	r3, r3, #10
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4313      	orrs	r3, r2
 800981a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	685a      	ldr	r2, [r3, #4]
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	693a      	ldr	r2, [r7, #16]
 8009834:	621a      	str	r2, [r3, #32]
}
 8009836:	bf00      	nop
 8009838:	371c      	adds	r7, #28
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	feff8fff 	.word	0xfeff8fff
 8009848:	40010000 	.word	0x40010000
 800984c:	40010400 	.word	0x40010400

08009850 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009850:	b480      	push	{r7}
 8009852:	b087      	sub	sp, #28
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	6a1b      	ldr	r3, [r3, #32]
 8009860:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a1b      	ldr	r3, [r3, #32]
 8009866:	f023 0201 	bic.w	r2, r3, #1
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	699b      	ldr	r3, [r3, #24]
 8009872:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800987a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	4313      	orrs	r3, r2
 8009884:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	f023 030a 	bic.w	r3, r3, #10
 800988c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800988e:	697a      	ldr	r2, [r7, #20]
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4313      	orrs	r3, r2
 8009894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	697a      	ldr	r2, [r7, #20]
 80098a0:	621a      	str	r2, [r3, #32]
}
 80098a2:	bf00      	nop
 80098a4:	371c      	adds	r7, #28
 80098a6:	46bd      	mov	sp, r7
 80098a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ac:	4770      	bx	lr

080098ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098ae:	b480      	push	{r7}
 80098b0:	b087      	sub	sp, #28
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	6a1b      	ldr	r3, [r3, #32]
 80098be:	f023 0210 	bic.w	r2, r3, #16
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	699b      	ldr	r3, [r3, #24]
 80098ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6a1b      	ldr	r3, [r3, #32]
 80098d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	031b      	lsls	r3, r3, #12
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	011b      	lsls	r3, r3, #4
 80098f0:	693a      	ldr	r2, [r7, #16]
 80098f2:	4313      	orrs	r3, r2
 80098f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	697a      	ldr	r2, [r7, #20]
 80098fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	621a      	str	r2, [r3, #32]
}
 8009902:	bf00      	nop
 8009904:	371c      	adds	r7, #28
 8009906:	46bd      	mov	sp, r7
 8009908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990c:	4770      	bx	lr

0800990e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800990e:	b480      	push	{r7}
 8009910:	b085      	sub	sp, #20
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
 8009916:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009924:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	f043 0307 	orr.w	r3, r3, #7
 8009930:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	68fa      	ldr	r2, [r7, #12]
 8009936:	609a      	str	r2, [r3, #8]
}
 8009938:	bf00      	nop
 800993a:	3714      	adds	r7, #20
 800993c:	46bd      	mov	sp, r7
 800993e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009942:	4770      	bx	lr

08009944 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009944:	b480      	push	{r7}
 8009946:	b087      	sub	sp, #28
 8009948:	af00      	add	r7, sp, #0
 800994a:	60f8      	str	r0, [r7, #12]
 800994c:	60b9      	str	r1, [r7, #8]
 800994e:	607a      	str	r2, [r7, #4]
 8009950:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800995e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009960:	683b      	ldr	r3, [r7, #0]
 8009962:	021a      	lsls	r2, r3, #8
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	431a      	orrs	r2, r3
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	4313      	orrs	r3, r2
 800996c:	697a      	ldr	r2, [r7, #20]
 800996e:	4313      	orrs	r3, r2
 8009970:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	697a      	ldr	r2, [r7, #20]
 8009976:	609a      	str	r2, [r3, #8]
}
 8009978:	bf00      	nop
 800997a:	371c      	adds	r7, #28
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr

08009984 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009984:	b480      	push	{r7}
 8009986:	b087      	sub	sp, #28
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	f003 031f 	and.w	r3, r3, #31
 8009996:	2201      	movs	r2, #1
 8009998:	fa02 f303 	lsl.w	r3, r2, r3
 800999c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	6a1a      	ldr	r2, [r3, #32]
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	43db      	mvns	r3, r3
 80099a6:	401a      	ands	r2, r3
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	6a1a      	ldr	r2, [r3, #32]
 80099b0:	68bb      	ldr	r3, [r7, #8]
 80099b2:	f003 031f 	and.w	r3, r3, #31
 80099b6:	6879      	ldr	r1, [r7, #4]
 80099b8:	fa01 f303 	lsl.w	r3, r1, r3
 80099bc:	431a      	orrs	r2, r3
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	621a      	str	r2, [r3, #32]
}
 80099c2:	bf00      	nop
 80099c4:	371c      	adds	r7, #28
 80099c6:	46bd      	mov	sp, r7
 80099c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099cc:	4770      	bx	lr
	...

080099d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e06d      	b.n	8009ac4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a30      	ldr	r2, [pc, #192]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a2f      	ldr	r2, [pc, #188]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d108      	bne.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a20      	ldr	r2, [pc, #128]	; (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d022      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a5a:	d01d      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1d      	ldr	r2, [pc, #116]	; (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d018      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1c      	ldr	r2, [pc, #112]	; (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d013      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a1a      	ldr	r2, [pc, #104]	; (8009ae0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d00e      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a15      	ldr	r2, [pc, #84]	; (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d009      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a16      	ldr	r2, [pc, #88]	; (8009ae4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d004      	beq.n	8009a98 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a15      	ldr	r2, [pc, #84]	; (8009ae8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d10c      	bne.n	8009ab2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a98:	68bb      	ldr	r3, [r7, #8]
 8009a9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009a9e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	689b      	ldr	r3, [r3, #8]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	4313      	orrs	r3, r2
 8009aa8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	68ba      	ldr	r2, [r7, #8]
 8009ab0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2201      	movs	r2, #1
 8009ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3714      	adds	r7, #20
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr
 8009ad0:	40010000 	.word	0x40010000
 8009ad4:	40010400 	.word	0x40010400
 8009ad8:	40000400 	.word	0x40000400
 8009adc:	40000800 	.word	0x40000800
 8009ae0:	40000c00 	.word	0x40000c00
 8009ae4:	40014000 	.word	0x40014000
 8009ae8:	40001800 	.word	0x40001800

08009aec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009aec:	b480      	push	{r7}
 8009aee:	b083      	sub	sp, #12
 8009af0:	af00      	add	r7, sp, #0
 8009af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009af4:	bf00      	nop
 8009af6:	370c      	adds	r7, #12
 8009af8:	46bd      	mov	sp, r7
 8009afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afe:	4770      	bx	lr

08009b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b00:	b480      	push	{r7}
 8009b02:	b083      	sub	sp, #12
 8009b04:	af00      	add	r7, sp, #0
 8009b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b08:	bf00      	nop
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b083      	sub	sp, #12
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b1c:	bf00      	nop
 8009b1e:	370c      	adds	r7, #12
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d101      	bne.n	8009b3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b36:	2301      	movs	r3, #1
 8009b38:	e040      	b.n	8009bbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d106      	bne.n	8009b50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2200      	movs	r2, #0
 8009b46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7fb faaa 	bl	80050a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2224      	movs	r2, #36	; 0x24
 8009b54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	681a      	ldr	r2, [r3, #0]
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f022 0201 	bic.w	r2, r2, #1
 8009b64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 f8c0 	bl	8009cec <UART_SetConfig>
 8009b6c:	4603      	mov	r3, r0
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d101      	bne.n	8009b76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009b72:	2301      	movs	r3, #1
 8009b74:	e022      	b.n	8009bbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d002      	beq.n	8009b84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009b7e:	6878      	ldr	r0, [r7, #4]
 8009b80:	f000 fb18 	bl	800a1b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	685a      	ldr	r2, [r3, #4]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009b92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	689a      	ldr	r2, [r3, #8]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ba2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f042 0201 	orr.w	r2, r2, #1
 8009bb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fb9f 	bl	800a2f8 <UART_CheckIdleState>
 8009bba:	4603      	mov	r3, r0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}

08009bc4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b08a      	sub	sp, #40	; 0x28
 8009bc8:	af02      	add	r7, sp, #8
 8009bca:	60f8      	str	r0, [r7, #12]
 8009bcc:	60b9      	str	r1, [r7, #8]
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	4613      	mov	r3, r2
 8009bd2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009bd8:	2b20      	cmp	r3, #32
 8009bda:	f040 8081 	bne.w	8009ce0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d002      	beq.n	8009bea <HAL_UART_Transmit+0x26>
 8009be4:	88fb      	ldrh	r3, [r7, #6]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d101      	bne.n	8009bee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009bea:	2301      	movs	r3, #1
 8009bec:	e079      	b.n	8009ce2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009bf4:	2b01      	cmp	r3, #1
 8009bf6:	d101      	bne.n	8009bfc <HAL_UART_Transmit+0x38>
 8009bf8:	2302      	movs	r3, #2
 8009bfa:	e072      	b.n	8009ce2 <HAL_UART_Transmit+0x11e>
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2201      	movs	r2, #1
 8009c00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	2200      	movs	r2, #0
 8009c08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2221      	movs	r2, #33	; 0x21
 8009c10:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c12:	f7fb fdfd 	bl	8005810 <HAL_GetTick>
 8009c16:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	88fa      	ldrh	r2, [r7, #6]
 8009c1c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	88fa      	ldrh	r2, [r7, #6]
 8009c24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c30:	d108      	bne.n	8009c44 <HAL_UART_Transmit+0x80>
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	691b      	ldr	r3, [r3, #16]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d104      	bne.n	8009c44 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	61bb      	str	r3, [r7, #24]
 8009c42:	e003      	b.n	8009c4c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8009c54:	e02c      	b.n	8009cb0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	697b      	ldr	r3, [r7, #20]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	2180      	movs	r1, #128	; 0x80
 8009c60:	68f8      	ldr	r0, [r7, #12]
 8009c62:	f000 fb7c 	bl	800a35e <UART_WaitOnFlagUntilTimeout>
 8009c66:	4603      	mov	r3, r0
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d001      	beq.n	8009c70 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e038      	b.n	8009ce2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009c70:	69fb      	ldr	r3, [r7, #28]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d10b      	bne.n	8009c8e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009c76:	69bb      	ldr	r3, [r7, #24]
 8009c78:	881b      	ldrh	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c84:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009c86:	69bb      	ldr	r3, [r7, #24]
 8009c88:	3302      	adds	r3, #2
 8009c8a:	61bb      	str	r3, [r7, #24]
 8009c8c:	e007      	b.n	8009c9e <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	781a      	ldrb	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009c98:	69fb      	ldr	r3, [r7, #28]
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009ca4:	b29b      	uxth	r3, r3
 8009ca6:	3b01      	subs	r3, #1
 8009ca8:	b29a      	uxth	r2, r3
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009cb6:	b29b      	uxth	r3, r3
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1cc      	bne.n	8009c56 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	9300      	str	r3, [sp, #0]
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	2140      	movs	r1, #64	; 0x40
 8009cc6:	68f8      	ldr	r0, [r7, #12]
 8009cc8:	f000 fb49 	bl	800a35e <UART_WaitOnFlagUntilTimeout>
 8009ccc:	4603      	mov	r3, r0
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e005      	b.n	8009ce2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	2220      	movs	r2, #32
 8009cda:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	e000      	b.n	8009ce2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009ce0:	2302      	movs	r3, #2
  }
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3720      	adds	r7, #32
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b088      	sub	sp, #32
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cf4:	2300      	movs	r3, #0
 8009cf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	689a      	ldr	r2, [r3, #8]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	431a      	orrs	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	69db      	ldr	r3, [r3, #28]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4ba6      	ldr	r3, [pc, #664]	; (8009fb0 <UART_SetConfig+0x2c4>)
 8009d18:	4013      	ands	r3, r2
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	6812      	ldr	r2, [r2, #0]
 8009d1e:	6979      	ldr	r1, [r7, #20]
 8009d20:	430b      	orrs	r3, r1
 8009d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	685b      	ldr	r3, [r3, #4]
 8009d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	430a      	orrs	r2, r1
 8009d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	699b      	ldr	r3, [r3, #24]
 8009d3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	6a1b      	ldr	r3, [r3, #32]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	4313      	orrs	r3, r2
 8009d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	697a      	ldr	r2, [r7, #20]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4a94      	ldr	r2, [pc, #592]	; (8009fb4 <UART_SetConfig+0x2c8>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d120      	bne.n	8009daa <UART_SetConfig+0xbe>
 8009d68:	4b93      	ldr	r3, [pc, #588]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009d6e:	f003 0303 	and.w	r3, r3, #3
 8009d72:	2b03      	cmp	r3, #3
 8009d74:	d816      	bhi.n	8009da4 <UART_SetConfig+0xb8>
 8009d76:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0x90>)
 8009d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7c:	08009d8d 	.word	0x08009d8d
 8009d80:	08009d99 	.word	0x08009d99
 8009d84:	08009d93 	.word	0x08009d93
 8009d88:	08009d9f 	.word	0x08009d9f
 8009d8c:	2301      	movs	r3, #1
 8009d8e:	77fb      	strb	r3, [r7, #31]
 8009d90:	e150      	b.n	800a034 <UART_SetConfig+0x348>
 8009d92:	2302      	movs	r3, #2
 8009d94:	77fb      	strb	r3, [r7, #31]
 8009d96:	e14d      	b.n	800a034 <UART_SetConfig+0x348>
 8009d98:	2304      	movs	r3, #4
 8009d9a:	77fb      	strb	r3, [r7, #31]
 8009d9c:	e14a      	b.n	800a034 <UART_SetConfig+0x348>
 8009d9e:	2308      	movs	r3, #8
 8009da0:	77fb      	strb	r3, [r7, #31]
 8009da2:	e147      	b.n	800a034 <UART_SetConfig+0x348>
 8009da4:	2310      	movs	r3, #16
 8009da6:	77fb      	strb	r3, [r7, #31]
 8009da8:	e144      	b.n	800a034 <UART_SetConfig+0x348>
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a83      	ldr	r2, [pc, #524]	; (8009fbc <UART_SetConfig+0x2d0>)
 8009db0:	4293      	cmp	r3, r2
 8009db2:	d132      	bne.n	8009e1a <UART_SetConfig+0x12e>
 8009db4:	4b80      	ldr	r3, [pc, #512]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009dba:	f003 030c 	and.w	r3, r3, #12
 8009dbe:	2b0c      	cmp	r3, #12
 8009dc0:	d828      	bhi.n	8009e14 <UART_SetConfig+0x128>
 8009dc2:	a201      	add	r2, pc, #4	; (adr r2, 8009dc8 <UART_SetConfig+0xdc>)
 8009dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc8:	08009dfd 	.word	0x08009dfd
 8009dcc:	08009e15 	.word	0x08009e15
 8009dd0:	08009e15 	.word	0x08009e15
 8009dd4:	08009e15 	.word	0x08009e15
 8009dd8:	08009e09 	.word	0x08009e09
 8009ddc:	08009e15 	.word	0x08009e15
 8009de0:	08009e15 	.word	0x08009e15
 8009de4:	08009e15 	.word	0x08009e15
 8009de8:	08009e03 	.word	0x08009e03
 8009dec:	08009e15 	.word	0x08009e15
 8009df0:	08009e15 	.word	0x08009e15
 8009df4:	08009e15 	.word	0x08009e15
 8009df8:	08009e0f 	.word	0x08009e0f
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	77fb      	strb	r3, [r7, #31]
 8009e00:	e118      	b.n	800a034 <UART_SetConfig+0x348>
 8009e02:	2302      	movs	r3, #2
 8009e04:	77fb      	strb	r3, [r7, #31]
 8009e06:	e115      	b.n	800a034 <UART_SetConfig+0x348>
 8009e08:	2304      	movs	r3, #4
 8009e0a:	77fb      	strb	r3, [r7, #31]
 8009e0c:	e112      	b.n	800a034 <UART_SetConfig+0x348>
 8009e0e:	2308      	movs	r3, #8
 8009e10:	77fb      	strb	r3, [r7, #31]
 8009e12:	e10f      	b.n	800a034 <UART_SetConfig+0x348>
 8009e14:	2310      	movs	r3, #16
 8009e16:	77fb      	strb	r3, [r7, #31]
 8009e18:	e10c      	b.n	800a034 <UART_SetConfig+0x348>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a68      	ldr	r2, [pc, #416]	; (8009fc0 <UART_SetConfig+0x2d4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d120      	bne.n	8009e66 <UART_SetConfig+0x17a>
 8009e24:	4b64      	ldr	r3, [pc, #400]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	d013      	beq.n	8009e5a <UART_SetConfig+0x16e>
 8009e32:	2b30      	cmp	r3, #48	; 0x30
 8009e34:	d814      	bhi.n	8009e60 <UART_SetConfig+0x174>
 8009e36:	2b20      	cmp	r3, #32
 8009e38:	d009      	beq.n	8009e4e <UART_SetConfig+0x162>
 8009e3a:	2b20      	cmp	r3, #32
 8009e3c:	d810      	bhi.n	8009e60 <UART_SetConfig+0x174>
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d002      	beq.n	8009e48 <UART_SetConfig+0x15c>
 8009e42:	2b10      	cmp	r3, #16
 8009e44:	d006      	beq.n	8009e54 <UART_SetConfig+0x168>
 8009e46:	e00b      	b.n	8009e60 <UART_SetConfig+0x174>
 8009e48:	2300      	movs	r3, #0
 8009e4a:	77fb      	strb	r3, [r7, #31]
 8009e4c:	e0f2      	b.n	800a034 <UART_SetConfig+0x348>
 8009e4e:	2302      	movs	r3, #2
 8009e50:	77fb      	strb	r3, [r7, #31]
 8009e52:	e0ef      	b.n	800a034 <UART_SetConfig+0x348>
 8009e54:	2304      	movs	r3, #4
 8009e56:	77fb      	strb	r3, [r7, #31]
 8009e58:	e0ec      	b.n	800a034 <UART_SetConfig+0x348>
 8009e5a:	2308      	movs	r3, #8
 8009e5c:	77fb      	strb	r3, [r7, #31]
 8009e5e:	e0e9      	b.n	800a034 <UART_SetConfig+0x348>
 8009e60:	2310      	movs	r3, #16
 8009e62:	77fb      	strb	r3, [r7, #31]
 8009e64:	e0e6      	b.n	800a034 <UART_SetConfig+0x348>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a56      	ldr	r2, [pc, #344]	; (8009fc4 <UART_SetConfig+0x2d8>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d120      	bne.n	8009eb2 <UART_SetConfig+0x1c6>
 8009e70:	4b51      	ldr	r3, [pc, #324]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8009e7c:	d013      	beq.n	8009ea6 <UART_SetConfig+0x1ba>
 8009e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8009e80:	d814      	bhi.n	8009eac <UART_SetConfig+0x1c0>
 8009e82:	2b80      	cmp	r3, #128	; 0x80
 8009e84:	d009      	beq.n	8009e9a <UART_SetConfig+0x1ae>
 8009e86:	2b80      	cmp	r3, #128	; 0x80
 8009e88:	d810      	bhi.n	8009eac <UART_SetConfig+0x1c0>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d002      	beq.n	8009e94 <UART_SetConfig+0x1a8>
 8009e8e:	2b40      	cmp	r3, #64	; 0x40
 8009e90:	d006      	beq.n	8009ea0 <UART_SetConfig+0x1b4>
 8009e92:	e00b      	b.n	8009eac <UART_SetConfig+0x1c0>
 8009e94:	2300      	movs	r3, #0
 8009e96:	77fb      	strb	r3, [r7, #31]
 8009e98:	e0cc      	b.n	800a034 <UART_SetConfig+0x348>
 8009e9a:	2302      	movs	r3, #2
 8009e9c:	77fb      	strb	r3, [r7, #31]
 8009e9e:	e0c9      	b.n	800a034 <UART_SetConfig+0x348>
 8009ea0:	2304      	movs	r3, #4
 8009ea2:	77fb      	strb	r3, [r7, #31]
 8009ea4:	e0c6      	b.n	800a034 <UART_SetConfig+0x348>
 8009ea6:	2308      	movs	r3, #8
 8009ea8:	77fb      	strb	r3, [r7, #31]
 8009eaa:	e0c3      	b.n	800a034 <UART_SetConfig+0x348>
 8009eac:	2310      	movs	r3, #16
 8009eae:	77fb      	strb	r3, [r7, #31]
 8009eb0:	e0c0      	b.n	800a034 <UART_SetConfig+0x348>
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	4a44      	ldr	r2, [pc, #272]	; (8009fc8 <UART_SetConfig+0x2dc>)
 8009eb8:	4293      	cmp	r3, r2
 8009eba:	d125      	bne.n	8009f08 <UART_SetConfig+0x21c>
 8009ebc:	4b3e      	ldr	r3, [pc, #248]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009eca:	d017      	beq.n	8009efc <UART_SetConfig+0x210>
 8009ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ed0:	d817      	bhi.n	8009f02 <UART_SetConfig+0x216>
 8009ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009ed6:	d00b      	beq.n	8009ef0 <UART_SetConfig+0x204>
 8009ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009edc:	d811      	bhi.n	8009f02 <UART_SetConfig+0x216>
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <UART_SetConfig+0x1fe>
 8009ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ee6:	d006      	beq.n	8009ef6 <UART_SetConfig+0x20a>
 8009ee8:	e00b      	b.n	8009f02 <UART_SetConfig+0x216>
 8009eea:	2300      	movs	r3, #0
 8009eec:	77fb      	strb	r3, [r7, #31]
 8009eee:	e0a1      	b.n	800a034 <UART_SetConfig+0x348>
 8009ef0:	2302      	movs	r3, #2
 8009ef2:	77fb      	strb	r3, [r7, #31]
 8009ef4:	e09e      	b.n	800a034 <UART_SetConfig+0x348>
 8009ef6:	2304      	movs	r3, #4
 8009ef8:	77fb      	strb	r3, [r7, #31]
 8009efa:	e09b      	b.n	800a034 <UART_SetConfig+0x348>
 8009efc:	2308      	movs	r3, #8
 8009efe:	77fb      	strb	r3, [r7, #31]
 8009f00:	e098      	b.n	800a034 <UART_SetConfig+0x348>
 8009f02:	2310      	movs	r3, #16
 8009f04:	77fb      	strb	r3, [r7, #31]
 8009f06:	e095      	b.n	800a034 <UART_SetConfig+0x348>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a2f      	ldr	r2, [pc, #188]	; (8009fcc <UART_SetConfig+0x2e0>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d125      	bne.n	8009f5e <UART_SetConfig+0x272>
 8009f12:	4b29      	ldr	r3, [pc, #164]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f20:	d017      	beq.n	8009f52 <UART_SetConfig+0x266>
 8009f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009f26:	d817      	bhi.n	8009f58 <UART_SetConfig+0x26c>
 8009f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f2c:	d00b      	beq.n	8009f46 <UART_SetConfig+0x25a>
 8009f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f32:	d811      	bhi.n	8009f58 <UART_SetConfig+0x26c>
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d003      	beq.n	8009f40 <UART_SetConfig+0x254>
 8009f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f3c:	d006      	beq.n	8009f4c <UART_SetConfig+0x260>
 8009f3e:	e00b      	b.n	8009f58 <UART_SetConfig+0x26c>
 8009f40:	2301      	movs	r3, #1
 8009f42:	77fb      	strb	r3, [r7, #31]
 8009f44:	e076      	b.n	800a034 <UART_SetConfig+0x348>
 8009f46:	2302      	movs	r3, #2
 8009f48:	77fb      	strb	r3, [r7, #31]
 8009f4a:	e073      	b.n	800a034 <UART_SetConfig+0x348>
 8009f4c:	2304      	movs	r3, #4
 8009f4e:	77fb      	strb	r3, [r7, #31]
 8009f50:	e070      	b.n	800a034 <UART_SetConfig+0x348>
 8009f52:	2308      	movs	r3, #8
 8009f54:	77fb      	strb	r3, [r7, #31]
 8009f56:	e06d      	b.n	800a034 <UART_SetConfig+0x348>
 8009f58:	2310      	movs	r3, #16
 8009f5a:	77fb      	strb	r3, [r7, #31]
 8009f5c:	e06a      	b.n	800a034 <UART_SetConfig+0x348>
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	4a1b      	ldr	r2, [pc, #108]	; (8009fd0 <UART_SetConfig+0x2e4>)
 8009f64:	4293      	cmp	r3, r2
 8009f66:	d138      	bne.n	8009fda <UART_SetConfig+0x2ee>
 8009f68:	4b13      	ldr	r3, [pc, #76]	; (8009fb8 <UART_SetConfig+0x2cc>)
 8009f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f76:	d017      	beq.n	8009fa8 <UART_SetConfig+0x2bc>
 8009f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009f7c:	d82a      	bhi.n	8009fd4 <UART_SetConfig+0x2e8>
 8009f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f82:	d00b      	beq.n	8009f9c <UART_SetConfig+0x2b0>
 8009f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f88:	d824      	bhi.n	8009fd4 <UART_SetConfig+0x2e8>
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d003      	beq.n	8009f96 <UART_SetConfig+0x2aa>
 8009f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f92:	d006      	beq.n	8009fa2 <UART_SetConfig+0x2b6>
 8009f94:	e01e      	b.n	8009fd4 <UART_SetConfig+0x2e8>
 8009f96:	2300      	movs	r3, #0
 8009f98:	77fb      	strb	r3, [r7, #31]
 8009f9a:	e04b      	b.n	800a034 <UART_SetConfig+0x348>
 8009f9c:	2302      	movs	r3, #2
 8009f9e:	77fb      	strb	r3, [r7, #31]
 8009fa0:	e048      	b.n	800a034 <UART_SetConfig+0x348>
 8009fa2:	2304      	movs	r3, #4
 8009fa4:	77fb      	strb	r3, [r7, #31]
 8009fa6:	e045      	b.n	800a034 <UART_SetConfig+0x348>
 8009fa8:	2308      	movs	r3, #8
 8009faa:	77fb      	strb	r3, [r7, #31]
 8009fac:	e042      	b.n	800a034 <UART_SetConfig+0x348>
 8009fae:	bf00      	nop
 8009fb0:	efff69f3 	.word	0xefff69f3
 8009fb4:	40011000 	.word	0x40011000
 8009fb8:	40023800 	.word	0x40023800
 8009fbc:	40004400 	.word	0x40004400
 8009fc0:	40004800 	.word	0x40004800
 8009fc4:	40004c00 	.word	0x40004c00
 8009fc8:	40005000 	.word	0x40005000
 8009fcc:	40011400 	.word	0x40011400
 8009fd0:	40007800 	.word	0x40007800
 8009fd4:	2310      	movs	r3, #16
 8009fd6:	77fb      	strb	r3, [r7, #31]
 8009fd8:	e02c      	b.n	800a034 <UART_SetConfig+0x348>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	4a72      	ldr	r2, [pc, #456]	; (800a1a8 <UART_SetConfig+0x4bc>)
 8009fe0:	4293      	cmp	r3, r2
 8009fe2:	d125      	bne.n	800a030 <UART_SetConfig+0x344>
 8009fe4:	4b71      	ldr	r3, [pc, #452]	; (800a1ac <UART_SetConfig+0x4c0>)
 8009fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009fee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ff2:	d017      	beq.n	800a024 <UART_SetConfig+0x338>
 8009ff4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009ff8:	d817      	bhi.n	800a02a <UART_SetConfig+0x33e>
 8009ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ffe:	d00b      	beq.n	800a018 <UART_SetConfig+0x32c>
 800a000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a004:	d811      	bhi.n	800a02a <UART_SetConfig+0x33e>
 800a006:	2b00      	cmp	r3, #0
 800a008:	d003      	beq.n	800a012 <UART_SetConfig+0x326>
 800a00a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a00e:	d006      	beq.n	800a01e <UART_SetConfig+0x332>
 800a010:	e00b      	b.n	800a02a <UART_SetConfig+0x33e>
 800a012:	2300      	movs	r3, #0
 800a014:	77fb      	strb	r3, [r7, #31]
 800a016:	e00d      	b.n	800a034 <UART_SetConfig+0x348>
 800a018:	2302      	movs	r3, #2
 800a01a:	77fb      	strb	r3, [r7, #31]
 800a01c:	e00a      	b.n	800a034 <UART_SetConfig+0x348>
 800a01e:	2304      	movs	r3, #4
 800a020:	77fb      	strb	r3, [r7, #31]
 800a022:	e007      	b.n	800a034 <UART_SetConfig+0x348>
 800a024:	2308      	movs	r3, #8
 800a026:	77fb      	strb	r3, [r7, #31]
 800a028:	e004      	b.n	800a034 <UART_SetConfig+0x348>
 800a02a:	2310      	movs	r3, #16
 800a02c:	77fb      	strb	r3, [r7, #31]
 800a02e:	e001      	b.n	800a034 <UART_SetConfig+0x348>
 800a030:	2310      	movs	r3, #16
 800a032:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	69db      	ldr	r3, [r3, #28]
 800a038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a03c:	d15b      	bne.n	800a0f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a03e:	7ffb      	ldrb	r3, [r7, #31]
 800a040:	2b08      	cmp	r3, #8
 800a042:	d828      	bhi.n	800a096 <UART_SetConfig+0x3aa>
 800a044:	a201      	add	r2, pc, #4	; (adr r2, 800a04c <UART_SetConfig+0x360>)
 800a046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a04a:	bf00      	nop
 800a04c:	0800a071 	.word	0x0800a071
 800a050:	0800a079 	.word	0x0800a079
 800a054:	0800a081 	.word	0x0800a081
 800a058:	0800a097 	.word	0x0800a097
 800a05c:	0800a087 	.word	0x0800a087
 800a060:	0800a097 	.word	0x0800a097
 800a064:	0800a097 	.word	0x0800a097
 800a068:	0800a097 	.word	0x0800a097
 800a06c:	0800a08f 	.word	0x0800a08f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a070:	f7fd ff0a 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800a074:	61b8      	str	r0, [r7, #24]
        break;
 800a076:	e013      	b.n	800a0a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a078:	f7fd ff1a 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 800a07c:	61b8      	str	r0, [r7, #24]
        break;
 800a07e:	e00f      	b.n	800a0a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a080:	4b4b      	ldr	r3, [pc, #300]	; (800a1b0 <UART_SetConfig+0x4c4>)
 800a082:	61bb      	str	r3, [r7, #24]
        break;
 800a084:	e00c      	b.n	800a0a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a086:	f7fd fded 	bl	8007c64 <HAL_RCC_GetSysClockFreq>
 800a08a:	61b8      	str	r0, [r7, #24]
        break;
 800a08c:	e008      	b.n	800a0a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a08e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a092:	61bb      	str	r3, [r7, #24]
        break;
 800a094:	e004      	b.n	800a0a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a096:	2300      	movs	r3, #0
 800a098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a09a:	2301      	movs	r3, #1
 800a09c:	77bb      	strb	r3, [r7, #30]
        break;
 800a09e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d074      	beq.n	800a190 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	005a      	lsls	r2, r3, #1
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	685b      	ldr	r3, [r3, #4]
 800a0ae:	085b      	lsrs	r3, r3, #1
 800a0b0:	441a      	add	r2, r3
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	685b      	ldr	r3, [r3, #4]
 800a0b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2b0f      	cmp	r3, #15
 800a0c0:	d916      	bls.n	800a0f0 <UART_SetConfig+0x404>
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0c8:	d212      	bcs.n	800a0f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	b29b      	uxth	r3, r3
 800a0ce:	f023 030f 	bic.w	r3, r3, #15
 800a0d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	085b      	lsrs	r3, r3, #1
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	f003 0307 	and.w	r3, r3, #7
 800a0de:	b29a      	uxth	r2, r3
 800a0e0:	89fb      	ldrh	r3, [r7, #14]
 800a0e2:	4313      	orrs	r3, r2
 800a0e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	89fa      	ldrh	r2, [r7, #14]
 800a0ec:	60da      	str	r2, [r3, #12]
 800a0ee:	e04f      	b.n	800a190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	77bb      	strb	r3, [r7, #30]
 800a0f4:	e04c      	b.n	800a190 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0f6:	7ffb      	ldrb	r3, [r7, #31]
 800a0f8:	2b08      	cmp	r3, #8
 800a0fa:	d828      	bhi.n	800a14e <UART_SetConfig+0x462>
 800a0fc:	a201      	add	r2, pc, #4	; (adr r2, 800a104 <UART_SetConfig+0x418>)
 800a0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a102:	bf00      	nop
 800a104:	0800a129 	.word	0x0800a129
 800a108:	0800a131 	.word	0x0800a131
 800a10c:	0800a139 	.word	0x0800a139
 800a110:	0800a14f 	.word	0x0800a14f
 800a114:	0800a13f 	.word	0x0800a13f
 800a118:	0800a14f 	.word	0x0800a14f
 800a11c:	0800a14f 	.word	0x0800a14f
 800a120:	0800a14f 	.word	0x0800a14f
 800a124:	0800a147 	.word	0x0800a147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a128:	f7fd feae 	bl	8007e88 <HAL_RCC_GetPCLK1Freq>
 800a12c:	61b8      	str	r0, [r7, #24]
        break;
 800a12e:	e013      	b.n	800a158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a130:	f7fd febe 	bl	8007eb0 <HAL_RCC_GetPCLK2Freq>
 800a134:	61b8      	str	r0, [r7, #24]
        break;
 800a136:	e00f      	b.n	800a158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a138:	4b1d      	ldr	r3, [pc, #116]	; (800a1b0 <UART_SetConfig+0x4c4>)
 800a13a:	61bb      	str	r3, [r7, #24]
        break;
 800a13c:	e00c      	b.n	800a158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a13e:	f7fd fd91 	bl	8007c64 <HAL_RCC_GetSysClockFreq>
 800a142:	61b8      	str	r0, [r7, #24]
        break;
 800a144:	e008      	b.n	800a158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a14a:	61bb      	str	r3, [r7, #24]
        break;
 800a14c:	e004      	b.n	800a158 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a14e:	2300      	movs	r3, #0
 800a150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	77bb      	strb	r3, [r7, #30]
        break;
 800a156:	bf00      	nop
    }

    if (pclk != 0U)
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d018      	beq.n	800a190 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	085a      	lsrs	r2, r3, #1
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	441a      	add	r2, r3
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	2b0f      	cmp	r3, #15
 800a176:	d909      	bls.n	800a18c <UART_SetConfig+0x4a0>
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a17e:	d205      	bcs.n	800a18c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	b29a      	uxth	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	60da      	str	r2, [r3, #12]
 800a18a:	e001      	b.n	800a190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2200      	movs	r2, #0
 800a19a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a19c:	7fbb      	ldrb	r3, [r7, #30]
}
 800a19e:	4618      	mov	r0, r3
 800a1a0:	3720      	adds	r7, #32
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	40007c00 	.word	0x40007c00
 800a1ac:	40023800 	.word	0x40023800
 800a1b0:	00f42400 	.word	0x00f42400

0800a1b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c0:	f003 0301 	and.w	r3, r3, #1
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00a      	beq.n	800a1de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	685b      	ldr	r3, [r3, #4]
 800a1ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	430a      	orrs	r2, r1
 800a1dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e2:	f003 0302 	and.w	r3, r3, #2
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	430a      	orrs	r2, r1
 800a1fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a204:	f003 0304 	and.w	r3, r3, #4
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d00a      	beq.n	800a222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	685b      	ldr	r3, [r3, #4]
 800a212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	430a      	orrs	r2, r1
 800a220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a226:	f003 0308 	and.w	r3, r3, #8
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d00a      	beq.n	800a244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	430a      	orrs	r2, r1
 800a242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d00a      	beq.n	800a266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	430a      	orrs	r2, r1
 800a264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a28c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a290:	2b00      	cmp	r3, #0
 800a292:	d01a      	beq.n	800a2ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	685b      	ldr	r3, [r3, #4]
 800a29a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a2b2:	d10a      	bne.n	800a2ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	685b      	ldr	r3, [r3, #4]
 800a2ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	430a      	orrs	r2, r1
 800a2c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d00a      	beq.n	800a2ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	605a      	str	r2, [r3, #4]
  }
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b086      	sub	sp, #24
 800a2fc:	af02      	add	r7, sp, #8
 800a2fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a308:	f7fb fa82 	bl	8005810 <HAL_GetTick>
 800a30c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f003 0308 	and.w	r3, r3, #8
 800a318:	2b08      	cmp	r3, #8
 800a31a:	d10e      	bne.n	800a33a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a31c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a320:	9300      	str	r3, [sp, #0]
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	2200      	movs	r2, #0
 800a326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a32a:	6878      	ldr	r0, [r7, #4]
 800a32c:	f000 f817 	bl	800a35e <UART_WaitOnFlagUntilTimeout>
 800a330:	4603      	mov	r3, r0
 800a332:	2b00      	cmp	r3, #0
 800a334:	d001      	beq.n	800a33a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e00d      	b.n	800a356 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	2220      	movs	r2, #32
 800a33e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2220      	movs	r2, #32
 800a344:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	2200      	movs	r2, #0
 800a34a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	2200      	movs	r2, #0
 800a350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a354:	2300      	movs	r3, #0
}
 800a356:	4618      	mov	r0, r3
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b09c      	sub	sp, #112	; 0x70
 800a362:	af00      	add	r7, sp, #0
 800a364:	60f8      	str	r0, [r7, #12]
 800a366:	60b9      	str	r1, [r7, #8]
 800a368:	603b      	str	r3, [r7, #0]
 800a36a:	4613      	mov	r3, r2
 800a36c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a36e:	e0a5      	b.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a370:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a372:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a376:	f000 80a1 	beq.w	800a4bc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a37a:	f7fb fa49 	bl	8005810 <HAL_GetTick>
 800a37e:	4602      	mov	r2, r0
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	1ad3      	subs	r3, r2, r3
 800a384:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a386:	429a      	cmp	r2, r3
 800a388:	d302      	bcc.n	800a390 <UART_WaitOnFlagUntilTimeout+0x32>
 800a38a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d13e      	bne.n	800a40e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a398:	e853 3f00 	ldrex	r3, [r3]
 800a39c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a39e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a3a0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a3a4:	667b      	str	r3, [r7, #100]	; 0x64
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a3ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a3b0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a3b4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3b6:	e841 2300 	strex	r3, r2, [r1]
 800a3ba:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a3bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1e6      	bne.n	800a390 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	3308      	adds	r3, #8
 800a3c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a3ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3cc:	e853 3f00 	ldrex	r3, [r3]
 800a3d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a3d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3d4:	f023 0301 	bic.w	r3, r3, #1
 800a3d8:	663b      	str	r3, [r7, #96]	; 0x60
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	3308      	adds	r3, #8
 800a3e0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a3e2:	64ba      	str	r2, [r7, #72]	; 0x48
 800a3e4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3e6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a3e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a3ea:	e841 2300 	strex	r3, r2, [r1]
 800a3ee:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a3f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1e5      	bne.n	800a3c2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2220      	movs	r2, #32
 800a3fa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	2220      	movs	r2, #32
 800a400:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	2200      	movs	r2, #0
 800a406:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a40a:	2303      	movs	r3, #3
 800a40c:	e067      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0304 	and.w	r3, r3, #4
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d04f      	beq.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	69db      	ldr	r3, [r3, #28]
 800a422:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a426:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a42a:	d147      	bne.n	800a4bc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a434:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	e853 3f00 	ldrex	r3, [r3]
 800a442:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a446:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a44a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	461a      	mov	r2, r3
 800a452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a454:	637b      	str	r3, [r7, #52]	; 0x34
 800a456:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a458:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a45a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a45c:	e841 2300 	strex	r3, r2, [r1]
 800a460:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a464:	2b00      	cmp	r3, #0
 800a466:	d1e6      	bne.n	800a436 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	3308      	adds	r3, #8
 800a46e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	e853 3f00 	ldrex	r3, [r3]
 800a476:	613b      	str	r3, [r7, #16]
   return(result);
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	f023 0301 	bic.w	r3, r3, #1
 800a47e:	66bb      	str	r3, [r7, #104]	; 0x68
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	3308      	adds	r3, #8
 800a486:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a488:	623a      	str	r2, [r7, #32]
 800a48a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a48c:	69f9      	ldr	r1, [r7, #28]
 800a48e:	6a3a      	ldr	r2, [r7, #32]
 800a490:	e841 2300 	strex	r3, r2, [r1]
 800a494:	61bb      	str	r3, [r7, #24]
   return(result);
 800a496:	69bb      	ldr	r3, [r7, #24]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d1e5      	bne.n	800a468 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	2220      	movs	r2, #32
 800a4a0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	2220      	movs	r2, #32
 800a4a6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2220      	movs	r2, #32
 800a4ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	2200      	movs	r2, #0
 800a4b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	e010      	b.n	800a4de <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	69da      	ldr	r2, [r3, #28]
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	bf0c      	ite	eq
 800a4cc:	2301      	moveq	r3, #1
 800a4ce:	2300      	movne	r3, #0
 800a4d0:	b2db      	uxtb	r3, r3
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	79fb      	ldrb	r3, [r7, #7]
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	f43f af4a 	beq.w	800a370 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3770      	adds	r7, #112	; 0x70
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
	...

0800a4e8 <__errno>:
 800a4e8:	4b01      	ldr	r3, [pc, #4]	; (800a4f0 <__errno+0x8>)
 800a4ea:	6818      	ldr	r0, [r3, #0]
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	20000070 	.word	0x20000070

0800a4f4 <__libc_init_array>:
 800a4f4:	b570      	push	{r4, r5, r6, lr}
 800a4f6:	4d0d      	ldr	r5, [pc, #52]	; (800a52c <__libc_init_array+0x38>)
 800a4f8:	4c0d      	ldr	r4, [pc, #52]	; (800a530 <__libc_init_array+0x3c>)
 800a4fa:	1b64      	subs	r4, r4, r5
 800a4fc:	10a4      	asrs	r4, r4, #2
 800a4fe:	2600      	movs	r6, #0
 800a500:	42a6      	cmp	r6, r4
 800a502:	d109      	bne.n	800a518 <__libc_init_array+0x24>
 800a504:	4d0b      	ldr	r5, [pc, #44]	; (800a534 <__libc_init_array+0x40>)
 800a506:	4c0c      	ldr	r4, [pc, #48]	; (800a538 <__libc_init_array+0x44>)
 800a508:	f001 f824 	bl	800b554 <_init>
 800a50c:	1b64      	subs	r4, r4, r5
 800a50e:	10a4      	asrs	r4, r4, #2
 800a510:	2600      	movs	r6, #0
 800a512:	42a6      	cmp	r6, r4
 800a514:	d105      	bne.n	800a522 <__libc_init_array+0x2e>
 800a516:	bd70      	pop	{r4, r5, r6, pc}
 800a518:	f855 3b04 	ldr.w	r3, [r5], #4
 800a51c:	4798      	blx	r3
 800a51e:	3601      	adds	r6, #1
 800a520:	e7ee      	b.n	800a500 <__libc_init_array+0xc>
 800a522:	f855 3b04 	ldr.w	r3, [r5], #4
 800a526:	4798      	blx	r3
 800a528:	3601      	adds	r6, #1
 800a52a:	e7f2      	b.n	800a512 <__libc_init_array+0x1e>
 800a52c:	0800b92c 	.word	0x0800b92c
 800a530:	0800b92c 	.word	0x0800b92c
 800a534:	0800b92c 	.word	0x0800b92c
 800a538:	0800b930 	.word	0x0800b930

0800a53c <memset>:
 800a53c:	4402      	add	r2, r0
 800a53e:	4603      	mov	r3, r0
 800a540:	4293      	cmp	r3, r2
 800a542:	d100      	bne.n	800a546 <memset+0xa>
 800a544:	4770      	bx	lr
 800a546:	f803 1b01 	strb.w	r1, [r3], #1
 800a54a:	e7f9      	b.n	800a540 <memset+0x4>

0800a54c <iprintf>:
 800a54c:	b40f      	push	{r0, r1, r2, r3}
 800a54e:	4b0a      	ldr	r3, [pc, #40]	; (800a578 <iprintf+0x2c>)
 800a550:	b513      	push	{r0, r1, r4, lr}
 800a552:	681c      	ldr	r4, [r3, #0]
 800a554:	b124      	cbz	r4, 800a560 <iprintf+0x14>
 800a556:	69a3      	ldr	r3, [r4, #24]
 800a558:	b913      	cbnz	r3, 800a560 <iprintf+0x14>
 800a55a:	4620      	mov	r0, r4
 800a55c:	f000 fa5e 	bl	800aa1c <__sinit>
 800a560:	ab05      	add	r3, sp, #20
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	68a1      	ldr	r1, [r4, #8]
 800a566:	9301      	str	r3, [sp, #4]
 800a568:	4620      	mov	r0, r4
 800a56a:	f000 fc67 	bl	800ae3c <_vfiprintf_r>
 800a56e:	b002      	add	sp, #8
 800a570:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a574:	b004      	add	sp, #16
 800a576:	4770      	bx	lr
 800a578:	20000070 	.word	0x20000070

0800a57c <_puts_r>:
 800a57c:	b570      	push	{r4, r5, r6, lr}
 800a57e:	460e      	mov	r6, r1
 800a580:	4605      	mov	r5, r0
 800a582:	b118      	cbz	r0, 800a58c <_puts_r+0x10>
 800a584:	6983      	ldr	r3, [r0, #24]
 800a586:	b90b      	cbnz	r3, 800a58c <_puts_r+0x10>
 800a588:	f000 fa48 	bl	800aa1c <__sinit>
 800a58c:	69ab      	ldr	r3, [r5, #24]
 800a58e:	68ac      	ldr	r4, [r5, #8]
 800a590:	b913      	cbnz	r3, 800a598 <_puts_r+0x1c>
 800a592:	4628      	mov	r0, r5
 800a594:	f000 fa42 	bl	800aa1c <__sinit>
 800a598:	4b2c      	ldr	r3, [pc, #176]	; (800a64c <_puts_r+0xd0>)
 800a59a:	429c      	cmp	r4, r3
 800a59c:	d120      	bne.n	800a5e0 <_puts_r+0x64>
 800a59e:	686c      	ldr	r4, [r5, #4]
 800a5a0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5a2:	07db      	lsls	r3, r3, #31
 800a5a4:	d405      	bmi.n	800a5b2 <_puts_r+0x36>
 800a5a6:	89a3      	ldrh	r3, [r4, #12]
 800a5a8:	0598      	lsls	r0, r3, #22
 800a5aa:	d402      	bmi.n	800a5b2 <_puts_r+0x36>
 800a5ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ae:	f000 fad3 	bl	800ab58 <__retarget_lock_acquire_recursive>
 800a5b2:	89a3      	ldrh	r3, [r4, #12]
 800a5b4:	0719      	lsls	r1, r3, #28
 800a5b6:	d51d      	bpl.n	800a5f4 <_puts_r+0x78>
 800a5b8:	6923      	ldr	r3, [r4, #16]
 800a5ba:	b1db      	cbz	r3, 800a5f4 <_puts_r+0x78>
 800a5bc:	3e01      	subs	r6, #1
 800a5be:	68a3      	ldr	r3, [r4, #8]
 800a5c0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a5c4:	3b01      	subs	r3, #1
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	bb39      	cbnz	r1, 800a61a <_puts_r+0x9e>
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	da38      	bge.n	800a640 <_puts_r+0xc4>
 800a5ce:	4622      	mov	r2, r4
 800a5d0:	210a      	movs	r1, #10
 800a5d2:	4628      	mov	r0, r5
 800a5d4:	f000 f848 	bl	800a668 <__swbuf_r>
 800a5d8:	3001      	adds	r0, #1
 800a5da:	d011      	beq.n	800a600 <_puts_r+0x84>
 800a5dc:	250a      	movs	r5, #10
 800a5de:	e011      	b.n	800a604 <_puts_r+0x88>
 800a5e0:	4b1b      	ldr	r3, [pc, #108]	; (800a650 <_puts_r+0xd4>)
 800a5e2:	429c      	cmp	r4, r3
 800a5e4:	d101      	bne.n	800a5ea <_puts_r+0x6e>
 800a5e6:	68ac      	ldr	r4, [r5, #8]
 800a5e8:	e7da      	b.n	800a5a0 <_puts_r+0x24>
 800a5ea:	4b1a      	ldr	r3, [pc, #104]	; (800a654 <_puts_r+0xd8>)
 800a5ec:	429c      	cmp	r4, r3
 800a5ee:	bf08      	it	eq
 800a5f0:	68ec      	ldreq	r4, [r5, #12]
 800a5f2:	e7d5      	b.n	800a5a0 <_puts_r+0x24>
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	4628      	mov	r0, r5
 800a5f8:	f000 f888 	bl	800a70c <__swsetup_r>
 800a5fc:	2800      	cmp	r0, #0
 800a5fe:	d0dd      	beq.n	800a5bc <_puts_r+0x40>
 800a600:	f04f 35ff 	mov.w	r5, #4294967295
 800a604:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a606:	07da      	lsls	r2, r3, #31
 800a608:	d405      	bmi.n	800a616 <_puts_r+0x9a>
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	059b      	lsls	r3, r3, #22
 800a60e:	d402      	bmi.n	800a616 <_puts_r+0x9a>
 800a610:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a612:	f000 faa2 	bl	800ab5a <__retarget_lock_release_recursive>
 800a616:	4628      	mov	r0, r5
 800a618:	bd70      	pop	{r4, r5, r6, pc}
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	da04      	bge.n	800a628 <_puts_r+0xac>
 800a61e:	69a2      	ldr	r2, [r4, #24]
 800a620:	429a      	cmp	r2, r3
 800a622:	dc06      	bgt.n	800a632 <_puts_r+0xb6>
 800a624:	290a      	cmp	r1, #10
 800a626:	d004      	beq.n	800a632 <_puts_r+0xb6>
 800a628:	6823      	ldr	r3, [r4, #0]
 800a62a:	1c5a      	adds	r2, r3, #1
 800a62c:	6022      	str	r2, [r4, #0]
 800a62e:	7019      	strb	r1, [r3, #0]
 800a630:	e7c5      	b.n	800a5be <_puts_r+0x42>
 800a632:	4622      	mov	r2, r4
 800a634:	4628      	mov	r0, r5
 800a636:	f000 f817 	bl	800a668 <__swbuf_r>
 800a63a:	3001      	adds	r0, #1
 800a63c:	d1bf      	bne.n	800a5be <_puts_r+0x42>
 800a63e:	e7df      	b.n	800a600 <_puts_r+0x84>
 800a640:	6823      	ldr	r3, [r4, #0]
 800a642:	250a      	movs	r5, #10
 800a644:	1c5a      	adds	r2, r3, #1
 800a646:	6022      	str	r2, [r4, #0]
 800a648:	701d      	strb	r5, [r3, #0]
 800a64a:	e7db      	b.n	800a604 <_puts_r+0x88>
 800a64c:	0800b8b0 	.word	0x0800b8b0
 800a650:	0800b8d0 	.word	0x0800b8d0
 800a654:	0800b890 	.word	0x0800b890

0800a658 <puts>:
 800a658:	4b02      	ldr	r3, [pc, #8]	; (800a664 <puts+0xc>)
 800a65a:	4601      	mov	r1, r0
 800a65c:	6818      	ldr	r0, [r3, #0]
 800a65e:	f7ff bf8d 	b.w	800a57c <_puts_r>
 800a662:	bf00      	nop
 800a664:	20000070 	.word	0x20000070

0800a668 <__swbuf_r>:
 800a668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a66a:	460e      	mov	r6, r1
 800a66c:	4614      	mov	r4, r2
 800a66e:	4605      	mov	r5, r0
 800a670:	b118      	cbz	r0, 800a67a <__swbuf_r+0x12>
 800a672:	6983      	ldr	r3, [r0, #24]
 800a674:	b90b      	cbnz	r3, 800a67a <__swbuf_r+0x12>
 800a676:	f000 f9d1 	bl	800aa1c <__sinit>
 800a67a:	4b21      	ldr	r3, [pc, #132]	; (800a700 <__swbuf_r+0x98>)
 800a67c:	429c      	cmp	r4, r3
 800a67e:	d12b      	bne.n	800a6d8 <__swbuf_r+0x70>
 800a680:	686c      	ldr	r4, [r5, #4]
 800a682:	69a3      	ldr	r3, [r4, #24]
 800a684:	60a3      	str	r3, [r4, #8]
 800a686:	89a3      	ldrh	r3, [r4, #12]
 800a688:	071a      	lsls	r2, r3, #28
 800a68a:	d52f      	bpl.n	800a6ec <__swbuf_r+0x84>
 800a68c:	6923      	ldr	r3, [r4, #16]
 800a68e:	b36b      	cbz	r3, 800a6ec <__swbuf_r+0x84>
 800a690:	6923      	ldr	r3, [r4, #16]
 800a692:	6820      	ldr	r0, [r4, #0]
 800a694:	1ac0      	subs	r0, r0, r3
 800a696:	6963      	ldr	r3, [r4, #20]
 800a698:	b2f6      	uxtb	r6, r6
 800a69a:	4283      	cmp	r3, r0
 800a69c:	4637      	mov	r7, r6
 800a69e:	dc04      	bgt.n	800a6aa <__swbuf_r+0x42>
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f926 	bl	800a8f4 <_fflush_r>
 800a6a8:	bb30      	cbnz	r0, 800a6f8 <__swbuf_r+0x90>
 800a6aa:	68a3      	ldr	r3, [r4, #8]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	60a3      	str	r3, [r4, #8]
 800a6b0:	6823      	ldr	r3, [r4, #0]
 800a6b2:	1c5a      	adds	r2, r3, #1
 800a6b4:	6022      	str	r2, [r4, #0]
 800a6b6:	701e      	strb	r6, [r3, #0]
 800a6b8:	6963      	ldr	r3, [r4, #20]
 800a6ba:	3001      	adds	r0, #1
 800a6bc:	4283      	cmp	r3, r0
 800a6be:	d004      	beq.n	800a6ca <__swbuf_r+0x62>
 800a6c0:	89a3      	ldrh	r3, [r4, #12]
 800a6c2:	07db      	lsls	r3, r3, #31
 800a6c4:	d506      	bpl.n	800a6d4 <__swbuf_r+0x6c>
 800a6c6:	2e0a      	cmp	r6, #10
 800a6c8:	d104      	bne.n	800a6d4 <__swbuf_r+0x6c>
 800a6ca:	4621      	mov	r1, r4
 800a6cc:	4628      	mov	r0, r5
 800a6ce:	f000 f911 	bl	800a8f4 <_fflush_r>
 800a6d2:	b988      	cbnz	r0, 800a6f8 <__swbuf_r+0x90>
 800a6d4:	4638      	mov	r0, r7
 800a6d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6d8:	4b0a      	ldr	r3, [pc, #40]	; (800a704 <__swbuf_r+0x9c>)
 800a6da:	429c      	cmp	r4, r3
 800a6dc:	d101      	bne.n	800a6e2 <__swbuf_r+0x7a>
 800a6de:	68ac      	ldr	r4, [r5, #8]
 800a6e0:	e7cf      	b.n	800a682 <__swbuf_r+0x1a>
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <__swbuf_r+0xa0>)
 800a6e4:	429c      	cmp	r4, r3
 800a6e6:	bf08      	it	eq
 800a6e8:	68ec      	ldreq	r4, [r5, #12]
 800a6ea:	e7ca      	b.n	800a682 <__swbuf_r+0x1a>
 800a6ec:	4621      	mov	r1, r4
 800a6ee:	4628      	mov	r0, r5
 800a6f0:	f000 f80c 	bl	800a70c <__swsetup_r>
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d0cb      	beq.n	800a690 <__swbuf_r+0x28>
 800a6f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a6fc:	e7ea      	b.n	800a6d4 <__swbuf_r+0x6c>
 800a6fe:	bf00      	nop
 800a700:	0800b8b0 	.word	0x0800b8b0
 800a704:	0800b8d0 	.word	0x0800b8d0
 800a708:	0800b890 	.word	0x0800b890

0800a70c <__swsetup_r>:
 800a70c:	4b32      	ldr	r3, [pc, #200]	; (800a7d8 <__swsetup_r+0xcc>)
 800a70e:	b570      	push	{r4, r5, r6, lr}
 800a710:	681d      	ldr	r5, [r3, #0]
 800a712:	4606      	mov	r6, r0
 800a714:	460c      	mov	r4, r1
 800a716:	b125      	cbz	r5, 800a722 <__swsetup_r+0x16>
 800a718:	69ab      	ldr	r3, [r5, #24]
 800a71a:	b913      	cbnz	r3, 800a722 <__swsetup_r+0x16>
 800a71c:	4628      	mov	r0, r5
 800a71e:	f000 f97d 	bl	800aa1c <__sinit>
 800a722:	4b2e      	ldr	r3, [pc, #184]	; (800a7dc <__swsetup_r+0xd0>)
 800a724:	429c      	cmp	r4, r3
 800a726:	d10f      	bne.n	800a748 <__swsetup_r+0x3c>
 800a728:	686c      	ldr	r4, [r5, #4]
 800a72a:	89a3      	ldrh	r3, [r4, #12]
 800a72c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a730:	0719      	lsls	r1, r3, #28
 800a732:	d42c      	bmi.n	800a78e <__swsetup_r+0x82>
 800a734:	06dd      	lsls	r5, r3, #27
 800a736:	d411      	bmi.n	800a75c <__swsetup_r+0x50>
 800a738:	2309      	movs	r3, #9
 800a73a:	6033      	str	r3, [r6, #0]
 800a73c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a740:	81a3      	strh	r3, [r4, #12]
 800a742:	f04f 30ff 	mov.w	r0, #4294967295
 800a746:	e03e      	b.n	800a7c6 <__swsetup_r+0xba>
 800a748:	4b25      	ldr	r3, [pc, #148]	; (800a7e0 <__swsetup_r+0xd4>)
 800a74a:	429c      	cmp	r4, r3
 800a74c:	d101      	bne.n	800a752 <__swsetup_r+0x46>
 800a74e:	68ac      	ldr	r4, [r5, #8]
 800a750:	e7eb      	b.n	800a72a <__swsetup_r+0x1e>
 800a752:	4b24      	ldr	r3, [pc, #144]	; (800a7e4 <__swsetup_r+0xd8>)
 800a754:	429c      	cmp	r4, r3
 800a756:	bf08      	it	eq
 800a758:	68ec      	ldreq	r4, [r5, #12]
 800a75a:	e7e6      	b.n	800a72a <__swsetup_r+0x1e>
 800a75c:	0758      	lsls	r0, r3, #29
 800a75e:	d512      	bpl.n	800a786 <__swsetup_r+0x7a>
 800a760:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a762:	b141      	cbz	r1, 800a776 <__swsetup_r+0x6a>
 800a764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a768:	4299      	cmp	r1, r3
 800a76a:	d002      	beq.n	800a772 <__swsetup_r+0x66>
 800a76c:	4630      	mov	r0, r6
 800a76e:	f000 fa5b 	bl	800ac28 <_free_r>
 800a772:	2300      	movs	r3, #0
 800a774:	6363      	str	r3, [r4, #52]	; 0x34
 800a776:	89a3      	ldrh	r3, [r4, #12]
 800a778:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a77c:	81a3      	strh	r3, [r4, #12]
 800a77e:	2300      	movs	r3, #0
 800a780:	6063      	str	r3, [r4, #4]
 800a782:	6923      	ldr	r3, [r4, #16]
 800a784:	6023      	str	r3, [r4, #0]
 800a786:	89a3      	ldrh	r3, [r4, #12]
 800a788:	f043 0308 	orr.w	r3, r3, #8
 800a78c:	81a3      	strh	r3, [r4, #12]
 800a78e:	6923      	ldr	r3, [r4, #16]
 800a790:	b94b      	cbnz	r3, 800a7a6 <__swsetup_r+0x9a>
 800a792:	89a3      	ldrh	r3, [r4, #12]
 800a794:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a79c:	d003      	beq.n	800a7a6 <__swsetup_r+0x9a>
 800a79e:	4621      	mov	r1, r4
 800a7a0:	4630      	mov	r0, r6
 800a7a2:	f000 fa01 	bl	800aba8 <__smakebuf_r>
 800a7a6:	89a0      	ldrh	r0, [r4, #12]
 800a7a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7ac:	f010 0301 	ands.w	r3, r0, #1
 800a7b0:	d00a      	beq.n	800a7c8 <__swsetup_r+0xbc>
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	60a3      	str	r3, [r4, #8]
 800a7b6:	6963      	ldr	r3, [r4, #20]
 800a7b8:	425b      	negs	r3, r3
 800a7ba:	61a3      	str	r3, [r4, #24]
 800a7bc:	6923      	ldr	r3, [r4, #16]
 800a7be:	b943      	cbnz	r3, 800a7d2 <__swsetup_r+0xc6>
 800a7c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7c4:	d1ba      	bne.n	800a73c <__swsetup_r+0x30>
 800a7c6:	bd70      	pop	{r4, r5, r6, pc}
 800a7c8:	0781      	lsls	r1, r0, #30
 800a7ca:	bf58      	it	pl
 800a7cc:	6963      	ldrpl	r3, [r4, #20]
 800a7ce:	60a3      	str	r3, [r4, #8]
 800a7d0:	e7f4      	b.n	800a7bc <__swsetup_r+0xb0>
 800a7d2:	2000      	movs	r0, #0
 800a7d4:	e7f7      	b.n	800a7c6 <__swsetup_r+0xba>
 800a7d6:	bf00      	nop
 800a7d8:	20000070 	.word	0x20000070
 800a7dc:	0800b8b0 	.word	0x0800b8b0
 800a7e0:	0800b8d0 	.word	0x0800b8d0
 800a7e4:	0800b890 	.word	0x0800b890

0800a7e8 <__sflush_r>:
 800a7e8:	898a      	ldrh	r2, [r1, #12]
 800a7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7ee:	4605      	mov	r5, r0
 800a7f0:	0710      	lsls	r0, r2, #28
 800a7f2:	460c      	mov	r4, r1
 800a7f4:	d458      	bmi.n	800a8a8 <__sflush_r+0xc0>
 800a7f6:	684b      	ldr	r3, [r1, #4]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dc05      	bgt.n	800a808 <__sflush_r+0x20>
 800a7fc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	dc02      	bgt.n	800a808 <__sflush_r+0x20>
 800a802:	2000      	movs	r0, #0
 800a804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a808:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a80a:	2e00      	cmp	r6, #0
 800a80c:	d0f9      	beq.n	800a802 <__sflush_r+0x1a>
 800a80e:	2300      	movs	r3, #0
 800a810:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a814:	682f      	ldr	r7, [r5, #0]
 800a816:	602b      	str	r3, [r5, #0]
 800a818:	d032      	beq.n	800a880 <__sflush_r+0x98>
 800a81a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a81c:	89a3      	ldrh	r3, [r4, #12]
 800a81e:	075a      	lsls	r2, r3, #29
 800a820:	d505      	bpl.n	800a82e <__sflush_r+0x46>
 800a822:	6863      	ldr	r3, [r4, #4]
 800a824:	1ac0      	subs	r0, r0, r3
 800a826:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a828:	b10b      	cbz	r3, 800a82e <__sflush_r+0x46>
 800a82a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a82c:	1ac0      	subs	r0, r0, r3
 800a82e:	2300      	movs	r3, #0
 800a830:	4602      	mov	r2, r0
 800a832:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a834:	6a21      	ldr	r1, [r4, #32]
 800a836:	4628      	mov	r0, r5
 800a838:	47b0      	blx	r6
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	89a3      	ldrh	r3, [r4, #12]
 800a83e:	d106      	bne.n	800a84e <__sflush_r+0x66>
 800a840:	6829      	ldr	r1, [r5, #0]
 800a842:	291d      	cmp	r1, #29
 800a844:	d82c      	bhi.n	800a8a0 <__sflush_r+0xb8>
 800a846:	4a2a      	ldr	r2, [pc, #168]	; (800a8f0 <__sflush_r+0x108>)
 800a848:	40ca      	lsrs	r2, r1
 800a84a:	07d6      	lsls	r6, r2, #31
 800a84c:	d528      	bpl.n	800a8a0 <__sflush_r+0xb8>
 800a84e:	2200      	movs	r2, #0
 800a850:	6062      	str	r2, [r4, #4]
 800a852:	04d9      	lsls	r1, r3, #19
 800a854:	6922      	ldr	r2, [r4, #16]
 800a856:	6022      	str	r2, [r4, #0]
 800a858:	d504      	bpl.n	800a864 <__sflush_r+0x7c>
 800a85a:	1c42      	adds	r2, r0, #1
 800a85c:	d101      	bne.n	800a862 <__sflush_r+0x7a>
 800a85e:	682b      	ldr	r3, [r5, #0]
 800a860:	b903      	cbnz	r3, 800a864 <__sflush_r+0x7c>
 800a862:	6560      	str	r0, [r4, #84]	; 0x54
 800a864:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a866:	602f      	str	r7, [r5, #0]
 800a868:	2900      	cmp	r1, #0
 800a86a:	d0ca      	beq.n	800a802 <__sflush_r+0x1a>
 800a86c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a870:	4299      	cmp	r1, r3
 800a872:	d002      	beq.n	800a87a <__sflush_r+0x92>
 800a874:	4628      	mov	r0, r5
 800a876:	f000 f9d7 	bl	800ac28 <_free_r>
 800a87a:	2000      	movs	r0, #0
 800a87c:	6360      	str	r0, [r4, #52]	; 0x34
 800a87e:	e7c1      	b.n	800a804 <__sflush_r+0x1c>
 800a880:	6a21      	ldr	r1, [r4, #32]
 800a882:	2301      	movs	r3, #1
 800a884:	4628      	mov	r0, r5
 800a886:	47b0      	blx	r6
 800a888:	1c41      	adds	r1, r0, #1
 800a88a:	d1c7      	bne.n	800a81c <__sflush_r+0x34>
 800a88c:	682b      	ldr	r3, [r5, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d0c4      	beq.n	800a81c <__sflush_r+0x34>
 800a892:	2b1d      	cmp	r3, #29
 800a894:	d001      	beq.n	800a89a <__sflush_r+0xb2>
 800a896:	2b16      	cmp	r3, #22
 800a898:	d101      	bne.n	800a89e <__sflush_r+0xb6>
 800a89a:	602f      	str	r7, [r5, #0]
 800a89c:	e7b1      	b.n	800a802 <__sflush_r+0x1a>
 800a89e:	89a3      	ldrh	r3, [r4, #12]
 800a8a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8a4:	81a3      	strh	r3, [r4, #12]
 800a8a6:	e7ad      	b.n	800a804 <__sflush_r+0x1c>
 800a8a8:	690f      	ldr	r7, [r1, #16]
 800a8aa:	2f00      	cmp	r7, #0
 800a8ac:	d0a9      	beq.n	800a802 <__sflush_r+0x1a>
 800a8ae:	0793      	lsls	r3, r2, #30
 800a8b0:	680e      	ldr	r6, [r1, #0]
 800a8b2:	bf08      	it	eq
 800a8b4:	694b      	ldreq	r3, [r1, #20]
 800a8b6:	600f      	str	r7, [r1, #0]
 800a8b8:	bf18      	it	ne
 800a8ba:	2300      	movne	r3, #0
 800a8bc:	eba6 0807 	sub.w	r8, r6, r7
 800a8c0:	608b      	str	r3, [r1, #8]
 800a8c2:	f1b8 0f00 	cmp.w	r8, #0
 800a8c6:	dd9c      	ble.n	800a802 <__sflush_r+0x1a>
 800a8c8:	6a21      	ldr	r1, [r4, #32]
 800a8ca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a8cc:	4643      	mov	r3, r8
 800a8ce:	463a      	mov	r2, r7
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b0      	blx	r6
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	dc06      	bgt.n	800a8e6 <__sflush_r+0xfe>
 800a8d8:	89a3      	ldrh	r3, [r4, #12]
 800a8da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8de:	81a3      	strh	r3, [r4, #12]
 800a8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e4:	e78e      	b.n	800a804 <__sflush_r+0x1c>
 800a8e6:	4407      	add	r7, r0
 800a8e8:	eba8 0800 	sub.w	r8, r8, r0
 800a8ec:	e7e9      	b.n	800a8c2 <__sflush_r+0xda>
 800a8ee:	bf00      	nop
 800a8f0:	20400001 	.word	0x20400001

0800a8f4 <_fflush_r>:
 800a8f4:	b538      	push	{r3, r4, r5, lr}
 800a8f6:	690b      	ldr	r3, [r1, #16]
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	460c      	mov	r4, r1
 800a8fc:	b913      	cbnz	r3, 800a904 <_fflush_r+0x10>
 800a8fe:	2500      	movs	r5, #0
 800a900:	4628      	mov	r0, r5
 800a902:	bd38      	pop	{r3, r4, r5, pc}
 800a904:	b118      	cbz	r0, 800a90e <_fflush_r+0x1a>
 800a906:	6983      	ldr	r3, [r0, #24]
 800a908:	b90b      	cbnz	r3, 800a90e <_fflush_r+0x1a>
 800a90a:	f000 f887 	bl	800aa1c <__sinit>
 800a90e:	4b14      	ldr	r3, [pc, #80]	; (800a960 <_fflush_r+0x6c>)
 800a910:	429c      	cmp	r4, r3
 800a912:	d11b      	bne.n	800a94c <_fflush_r+0x58>
 800a914:	686c      	ldr	r4, [r5, #4]
 800a916:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d0ef      	beq.n	800a8fe <_fflush_r+0xa>
 800a91e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a920:	07d0      	lsls	r0, r2, #31
 800a922:	d404      	bmi.n	800a92e <_fflush_r+0x3a>
 800a924:	0599      	lsls	r1, r3, #22
 800a926:	d402      	bmi.n	800a92e <_fflush_r+0x3a>
 800a928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a92a:	f000 f915 	bl	800ab58 <__retarget_lock_acquire_recursive>
 800a92e:	4628      	mov	r0, r5
 800a930:	4621      	mov	r1, r4
 800a932:	f7ff ff59 	bl	800a7e8 <__sflush_r>
 800a936:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a938:	07da      	lsls	r2, r3, #31
 800a93a:	4605      	mov	r5, r0
 800a93c:	d4e0      	bmi.n	800a900 <_fflush_r+0xc>
 800a93e:	89a3      	ldrh	r3, [r4, #12]
 800a940:	059b      	lsls	r3, r3, #22
 800a942:	d4dd      	bmi.n	800a900 <_fflush_r+0xc>
 800a944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a946:	f000 f908 	bl	800ab5a <__retarget_lock_release_recursive>
 800a94a:	e7d9      	b.n	800a900 <_fflush_r+0xc>
 800a94c:	4b05      	ldr	r3, [pc, #20]	; (800a964 <_fflush_r+0x70>)
 800a94e:	429c      	cmp	r4, r3
 800a950:	d101      	bne.n	800a956 <_fflush_r+0x62>
 800a952:	68ac      	ldr	r4, [r5, #8]
 800a954:	e7df      	b.n	800a916 <_fflush_r+0x22>
 800a956:	4b04      	ldr	r3, [pc, #16]	; (800a968 <_fflush_r+0x74>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	bf08      	it	eq
 800a95c:	68ec      	ldreq	r4, [r5, #12]
 800a95e:	e7da      	b.n	800a916 <_fflush_r+0x22>
 800a960:	0800b8b0 	.word	0x0800b8b0
 800a964:	0800b8d0 	.word	0x0800b8d0
 800a968:	0800b890 	.word	0x0800b890

0800a96c <std>:
 800a96c:	2300      	movs	r3, #0
 800a96e:	b510      	push	{r4, lr}
 800a970:	4604      	mov	r4, r0
 800a972:	e9c0 3300 	strd	r3, r3, [r0]
 800a976:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a97a:	6083      	str	r3, [r0, #8]
 800a97c:	8181      	strh	r1, [r0, #12]
 800a97e:	6643      	str	r3, [r0, #100]	; 0x64
 800a980:	81c2      	strh	r2, [r0, #14]
 800a982:	6183      	str	r3, [r0, #24]
 800a984:	4619      	mov	r1, r3
 800a986:	2208      	movs	r2, #8
 800a988:	305c      	adds	r0, #92	; 0x5c
 800a98a:	f7ff fdd7 	bl	800a53c <memset>
 800a98e:	4b05      	ldr	r3, [pc, #20]	; (800a9a4 <std+0x38>)
 800a990:	6263      	str	r3, [r4, #36]	; 0x24
 800a992:	4b05      	ldr	r3, [pc, #20]	; (800a9a8 <std+0x3c>)
 800a994:	62a3      	str	r3, [r4, #40]	; 0x28
 800a996:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <std+0x40>)
 800a998:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a99a:	4b05      	ldr	r3, [pc, #20]	; (800a9b0 <std+0x44>)
 800a99c:	6224      	str	r4, [r4, #32]
 800a99e:	6323      	str	r3, [r4, #48]	; 0x30
 800a9a0:	bd10      	pop	{r4, pc}
 800a9a2:	bf00      	nop
 800a9a4:	0800b3e5 	.word	0x0800b3e5
 800a9a8:	0800b407 	.word	0x0800b407
 800a9ac:	0800b43f 	.word	0x0800b43f
 800a9b0:	0800b463 	.word	0x0800b463

0800a9b4 <_cleanup_r>:
 800a9b4:	4901      	ldr	r1, [pc, #4]	; (800a9bc <_cleanup_r+0x8>)
 800a9b6:	f000 b8af 	b.w	800ab18 <_fwalk_reent>
 800a9ba:	bf00      	nop
 800a9bc:	0800a8f5 	.word	0x0800a8f5

0800a9c0 <__sfmoreglue>:
 800a9c0:	b570      	push	{r4, r5, r6, lr}
 800a9c2:	2268      	movs	r2, #104	; 0x68
 800a9c4:	1e4d      	subs	r5, r1, #1
 800a9c6:	4355      	muls	r5, r2
 800a9c8:	460e      	mov	r6, r1
 800a9ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a9ce:	f000 f997 	bl	800ad00 <_malloc_r>
 800a9d2:	4604      	mov	r4, r0
 800a9d4:	b140      	cbz	r0, 800a9e8 <__sfmoreglue+0x28>
 800a9d6:	2100      	movs	r1, #0
 800a9d8:	e9c0 1600 	strd	r1, r6, [r0]
 800a9dc:	300c      	adds	r0, #12
 800a9de:	60a0      	str	r0, [r4, #8]
 800a9e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a9e4:	f7ff fdaa 	bl	800a53c <memset>
 800a9e8:	4620      	mov	r0, r4
 800a9ea:	bd70      	pop	{r4, r5, r6, pc}

0800a9ec <__sfp_lock_acquire>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	; (800a9f4 <__sfp_lock_acquire+0x8>)
 800a9ee:	f000 b8b3 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20000591 	.word	0x20000591

0800a9f8 <__sfp_lock_release>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	; (800aa00 <__sfp_lock_release+0x8>)
 800a9fa:	f000 b8ae 	b.w	800ab5a <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20000591 	.word	0x20000591

0800aa04 <__sinit_lock_acquire>:
 800aa04:	4801      	ldr	r0, [pc, #4]	; (800aa0c <__sinit_lock_acquire+0x8>)
 800aa06:	f000 b8a7 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800aa0a:	bf00      	nop
 800aa0c:	20000592 	.word	0x20000592

0800aa10 <__sinit_lock_release>:
 800aa10:	4801      	ldr	r0, [pc, #4]	; (800aa18 <__sinit_lock_release+0x8>)
 800aa12:	f000 b8a2 	b.w	800ab5a <__retarget_lock_release_recursive>
 800aa16:	bf00      	nop
 800aa18:	20000592 	.word	0x20000592

0800aa1c <__sinit>:
 800aa1c:	b510      	push	{r4, lr}
 800aa1e:	4604      	mov	r4, r0
 800aa20:	f7ff fff0 	bl	800aa04 <__sinit_lock_acquire>
 800aa24:	69a3      	ldr	r3, [r4, #24]
 800aa26:	b11b      	cbz	r3, 800aa30 <__sinit+0x14>
 800aa28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800aa2c:	f7ff bff0 	b.w	800aa10 <__sinit_lock_release>
 800aa30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800aa34:	6523      	str	r3, [r4, #80]	; 0x50
 800aa36:	4b13      	ldr	r3, [pc, #76]	; (800aa84 <__sinit+0x68>)
 800aa38:	4a13      	ldr	r2, [pc, #76]	; (800aa88 <__sinit+0x6c>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	62a2      	str	r2, [r4, #40]	; 0x28
 800aa3e:	42a3      	cmp	r3, r4
 800aa40:	bf04      	itt	eq
 800aa42:	2301      	moveq	r3, #1
 800aa44:	61a3      	streq	r3, [r4, #24]
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 f820 	bl	800aa8c <__sfp>
 800aa4c:	6060      	str	r0, [r4, #4]
 800aa4e:	4620      	mov	r0, r4
 800aa50:	f000 f81c 	bl	800aa8c <__sfp>
 800aa54:	60a0      	str	r0, [r4, #8]
 800aa56:	4620      	mov	r0, r4
 800aa58:	f000 f818 	bl	800aa8c <__sfp>
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	60e0      	str	r0, [r4, #12]
 800aa60:	2104      	movs	r1, #4
 800aa62:	6860      	ldr	r0, [r4, #4]
 800aa64:	f7ff ff82 	bl	800a96c <std>
 800aa68:	68a0      	ldr	r0, [r4, #8]
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	2109      	movs	r1, #9
 800aa6e:	f7ff ff7d 	bl	800a96c <std>
 800aa72:	68e0      	ldr	r0, [r4, #12]
 800aa74:	2202      	movs	r2, #2
 800aa76:	2112      	movs	r1, #18
 800aa78:	f7ff ff78 	bl	800a96c <std>
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	61a3      	str	r3, [r4, #24]
 800aa80:	e7d2      	b.n	800aa28 <__sinit+0xc>
 800aa82:	bf00      	nop
 800aa84:	0800b88c 	.word	0x0800b88c
 800aa88:	0800a9b5 	.word	0x0800a9b5

0800aa8c <__sfp>:
 800aa8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa8e:	4607      	mov	r7, r0
 800aa90:	f7ff ffac 	bl	800a9ec <__sfp_lock_acquire>
 800aa94:	4b1e      	ldr	r3, [pc, #120]	; (800ab10 <__sfp+0x84>)
 800aa96:	681e      	ldr	r6, [r3, #0]
 800aa98:	69b3      	ldr	r3, [r6, #24]
 800aa9a:	b913      	cbnz	r3, 800aaa2 <__sfp+0x16>
 800aa9c:	4630      	mov	r0, r6
 800aa9e:	f7ff ffbd 	bl	800aa1c <__sinit>
 800aaa2:	3648      	adds	r6, #72	; 0x48
 800aaa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800aaa8:	3b01      	subs	r3, #1
 800aaaa:	d503      	bpl.n	800aab4 <__sfp+0x28>
 800aaac:	6833      	ldr	r3, [r6, #0]
 800aaae:	b30b      	cbz	r3, 800aaf4 <__sfp+0x68>
 800aab0:	6836      	ldr	r6, [r6, #0]
 800aab2:	e7f7      	b.n	800aaa4 <__sfp+0x18>
 800aab4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800aab8:	b9d5      	cbnz	r5, 800aaf0 <__sfp+0x64>
 800aaba:	4b16      	ldr	r3, [pc, #88]	; (800ab14 <__sfp+0x88>)
 800aabc:	60e3      	str	r3, [r4, #12]
 800aabe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800aac2:	6665      	str	r5, [r4, #100]	; 0x64
 800aac4:	f000 f847 	bl	800ab56 <__retarget_lock_init_recursive>
 800aac8:	f7ff ff96 	bl	800a9f8 <__sfp_lock_release>
 800aacc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800aad0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800aad4:	6025      	str	r5, [r4, #0]
 800aad6:	61a5      	str	r5, [r4, #24]
 800aad8:	2208      	movs	r2, #8
 800aada:	4629      	mov	r1, r5
 800aadc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800aae0:	f7ff fd2c 	bl	800a53c <memset>
 800aae4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800aae8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800aaec:	4620      	mov	r0, r4
 800aaee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaf0:	3468      	adds	r4, #104	; 0x68
 800aaf2:	e7d9      	b.n	800aaa8 <__sfp+0x1c>
 800aaf4:	2104      	movs	r1, #4
 800aaf6:	4638      	mov	r0, r7
 800aaf8:	f7ff ff62 	bl	800a9c0 <__sfmoreglue>
 800aafc:	4604      	mov	r4, r0
 800aafe:	6030      	str	r0, [r6, #0]
 800ab00:	2800      	cmp	r0, #0
 800ab02:	d1d5      	bne.n	800aab0 <__sfp+0x24>
 800ab04:	f7ff ff78 	bl	800a9f8 <__sfp_lock_release>
 800ab08:	230c      	movs	r3, #12
 800ab0a:	603b      	str	r3, [r7, #0]
 800ab0c:	e7ee      	b.n	800aaec <__sfp+0x60>
 800ab0e:	bf00      	nop
 800ab10:	0800b88c 	.word	0x0800b88c
 800ab14:	ffff0001 	.word	0xffff0001

0800ab18 <_fwalk_reent>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4606      	mov	r6, r0
 800ab1e:	4688      	mov	r8, r1
 800ab20:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ab24:	2700      	movs	r7, #0
 800ab26:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ab2a:	f1b9 0901 	subs.w	r9, r9, #1
 800ab2e:	d505      	bpl.n	800ab3c <_fwalk_reent+0x24>
 800ab30:	6824      	ldr	r4, [r4, #0]
 800ab32:	2c00      	cmp	r4, #0
 800ab34:	d1f7      	bne.n	800ab26 <_fwalk_reent+0xe>
 800ab36:	4638      	mov	r0, r7
 800ab38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab3c:	89ab      	ldrh	r3, [r5, #12]
 800ab3e:	2b01      	cmp	r3, #1
 800ab40:	d907      	bls.n	800ab52 <_fwalk_reent+0x3a>
 800ab42:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ab46:	3301      	adds	r3, #1
 800ab48:	d003      	beq.n	800ab52 <_fwalk_reent+0x3a>
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	4630      	mov	r0, r6
 800ab4e:	47c0      	blx	r8
 800ab50:	4307      	orrs	r7, r0
 800ab52:	3568      	adds	r5, #104	; 0x68
 800ab54:	e7e9      	b.n	800ab2a <_fwalk_reent+0x12>

0800ab56 <__retarget_lock_init_recursive>:
 800ab56:	4770      	bx	lr

0800ab58 <__retarget_lock_acquire_recursive>:
 800ab58:	4770      	bx	lr

0800ab5a <__retarget_lock_release_recursive>:
 800ab5a:	4770      	bx	lr

0800ab5c <__swhatbuf_r>:
 800ab5c:	b570      	push	{r4, r5, r6, lr}
 800ab5e:	460e      	mov	r6, r1
 800ab60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab64:	2900      	cmp	r1, #0
 800ab66:	b096      	sub	sp, #88	; 0x58
 800ab68:	4614      	mov	r4, r2
 800ab6a:	461d      	mov	r5, r3
 800ab6c:	da08      	bge.n	800ab80 <__swhatbuf_r+0x24>
 800ab6e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800ab72:	2200      	movs	r2, #0
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	061a      	lsls	r2, r3, #24
 800ab78:	d410      	bmi.n	800ab9c <__swhatbuf_r+0x40>
 800ab7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ab7e:	e00e      	b.n	800ab9e <__swhatbuf_r+0x42>
 800ab80:	466a      	mov	r2, sp
 800ab82:	f000 fc95 	bl	800b4b0 <_fstat_r>
 800ab86:	2800      	cmp	r0, #0
 800ab88:	dbf1      	blt.n	800ab6e <__swhatbuf_r+0x12>
 800ab8a:	9a01      	ldr	r2, [sp, #4]
 800ab8c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800ab90:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800ab94:	425a      	negs	r2, r3
 800ab96:	415a      	adcs	r2, r3
 800ab98:	602a      	str	r2, [r5, #0]
 800ab9a:	e7ee      	b.n	800ab7a <__swhatbuf_r+0x1e>
 800ab9c:	2340      	movs	r3, #64	; 0x40
 800ab9e:	2000      	movs	r0, #0
 800aba0:	6023      	str	r3, [r4, #0]
 800aba2:	b016      	add	sp, #88	; 0x58
 800aba4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aba8 <__smakebuf_r>:
 800aba8:	898b      	ldrh	r3, [r1, #12]
 800abaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abac:	079d      	lsls	r5, r3, #30
 800abae:	4606      	mov	r6, r0
 800abb0:	460c      	mov	r4, r1
 800abb2:	d507      	bpl.n	800abc4 <__smakebuf_r+0x1c>
 800abb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abb8:	6023      	str	r3, [r4, #0]
 800abba:	6123      	str	r3, [r4, #16]
 800abbc:	2301      	movs	r3, #1
 800abbe:	6163      	str	r3, [r4, #20]
 800abc0:	b002      	add	sp, #8
 800abc2:	bd70      	pop	{r4, r5, r6, pc}
 800abc4:	ab01      	add	r3, sp, #4
 800abc6:	466a      	mov	r2, sp
 800abc8:	f7ff ffc8 	bl	800ab5c <__swhatbuf_r>
 800abcc:	9900      	ldr	r1, [sp, #0]
 800abce:	4605      	mov	r5, r0
 800abd0:	4630      	mov	r0, r6
 800abd2:	f000 f895 	bl	800ad00 <_malloc_r>
 800abd6:	b948      	cbnz	r0, 800abec <__smakebuf_r+0x44>
 800abd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abdc:	059a      	lsls	r2, r3, #22
 800abde:	d4ef      	bmi.n	800abc0 <__smakebuf_r+0x18>
 800abe0:	f023 0303 	bic.w	r3, r3, #3
 800abe4:	f043 0302 	orr.w	r3, r3, #2
 800abe8:	81a3      	strh	r3, [r4, #12]
 800abea:	e7e3      	b.n	800abb4 <__smakebuf_r+0xc>
 800abec:	4b0d      	ldr	r3, [pc, #52]	; (800ac24 <__smakebuf_r+0x7c>)
 800abee:	62b3      	str	r3, [r6, #40]	; 0x28
 800abf0:	89a3      	ldrh	r3, [r4, #12]
 800abf2:	6020      	str	r0, [r4, #0]
 800abf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800abf8:	81a3      	strh	r3, [r4, #12]
 800abfa:	9b00      	ldr	r3, [sp, #0]
 800abfc:	6163      	str	r3, [r4, #20]
 800abfe:	9b01      	ldr	r3, [sp, #4]
 800ac00:	6120      	str	r0, [r4, #16]
 800ac02:	b15b      	cbz	r3, 800ac1c <__smakebuf_r+0x74>
 800ac04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f000 fc63 	bl	800b4d4 <_isatty_r>
 800ac0e:	b128      	cbz	r0, 800ac1c <__smakebuf_r+0x74>
 800ac10:	89a3      	ldrh	r3, [r4, #12]
 800ac12:	f023 0303 	bic.w	r3, r3, #3
 800ac16:	f043 0301 	orr.w	r3, r3, #1
 800ac1a:	81a3      	strh	r3, [r4, #12]
 800ac1c:	89a0      	ldrh	r0, [r4, #12]
 800ac1e:	4305      	orrs	r5, r0
 800ac20:	81a5      	strh	r5, [r4, #12]
 800ac22:	e7cd      	b.n	800abc0 <__smakebuf_r+0x18>
 800ac24:	0800a9b5 	.word	0x0800a9b5

0800ac28 <_free_r>:
 800ac28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	d044      	beq.n	800acb8 <_free_r+0x90>
 800ac2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac32:	9001      	str	r0, [sp, #4]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	f1a1 0404 	sub.w	r4, r1, #4
 800ac3a:	bfb8      	it	lt
 800ac3c:	18e4      	addlt	r4, r4, r3
 800ac3e:	f000 fc6b 	bl	800b518 <__malloc_lock>
 800ac42:	4a1e      	ldr	r2, [pc, #120]	; (800acbc <_free_r+0x94>)
 800ac44:	9801      	ldr	r0, [sp, #4]
 800ac46:	6813      	ldr	r3, [r2, #0]
 800ac48:	b933      	cbnz	r3, 800ac58 <_free_r+0x30>
 800ac4a:	6063      	str	r3, [r4, #4]
 800ac4c:	6014      	str	r4, [r2, #0]
 800ac4e:	b003      	add	sp, #12
 800ac50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac54:	f000 bc66 	b.w	800b524 <__malloc_unlock>
 800ac58:	42a3      	cmp	r3, r4
 800ac5a:	d908      	bls.n	800ac6e <_free_r+0x46>
 800ac5c:	6825      	ldr	r5, [r4, #0]
 800ac5e:	1961      	adds	r1, r4, r5
 800ac60:	428b      	cmp	r3, r1
 800ac62:	bf01      	itttt	eq
 800ac64:	6819      	ldreq	r1, [r3, #0]
 800ac66:	685b      	ldreq	r3, [r3, #4]
 800ac68:	1949      	addeq	r1, r1, r5
 800ac6a:	6021      	streq	r1, [r4, #0]
 800ac6c:	e7ed      	b.n	800ac4a <_free_r+0x22>
 800ac6e:	461a      	mov	r2, r3
 800ac70:	685b      	ldr	r3, [r3, #4]
 800ac72:	b10b      	cbz	r3, 800ac78 <_free_r+0x50>
 800ac74:	42a3      	cmp	r3, r4
 800ac76:	d9fa      	bls.n	800ac6e <_free_r+0x46>
 800ac78:	6811      	ldr	r1, [r2, #0]
 800ac7a:	1855      	adds	r5, r2, r1
 800ac7c:	42a5      	cmp	r5, r4
 800ac7e:	d10b      	bne.n	800ac98 <_free_r+0x70>
 800ac80:	6824      	ldr	r4, [r4, #0]
 800ac82:	4421      	add	r1, r4
 800ac84:	1854      	adds	r4, r2, r1
 800ac86:	42a3      	cmp	r3, r4
 800ac88:	6011      	str	r1, [r2, #0]
 800ac8a:	d1e0      	bne.n	800ac4e <_free_r+0x26>
 800ac8c:	681c      	ldr	r4, [r3, #0]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	6053      	str	r3, [r2, #4]
 800ac92:	4421      	add	r1, r4
 800ac94:	6011      	str	r1, [r2, #0]
 800ac96:	e7da      	b.n	800ac4e <_free_r+0x26>
 800ac98:	d902      	bls.n	800aca0 <_free_r+0x78>
 800ac9a:	230c      	movs	r3, #12
 800ac9c:	6003      	str	r3, [r0, #0]
 800ac9e:	e7d6      	b.n	800ac4e <_free_r+0x26>
 800aca0:	6825      	ldr	r5, [r4, #0]
 800aca2:	1961      	adds	r1, r4, r5
 800aca4:	428b      	cmp	r3, r1
 800aca6:	bf04      	itt	eq
 800aca8:	6819      	ldreq	r1, [r3, #0]
 800acaa:	685b      	ldreq	r3, [r3, #4]
 800acac:	6063      	str	r3, [r4, #4]
 800acae:	bf04      	itt	eq
 800acb0:	1949      	addeq	r1, r1, r5
 800acb2:	6021      	streq	r1, [r4, #0]
 800acb4:	6054      	str	r4, [r2, #4]
 800acb6:	e7ca      	b.n	800ac4e <_free_r+0x26>
 800acb8:	b003      	add	sp, #12
 800acba:	bd30      	pop	{r4, r5, pc}
 800acbc:	20000594 	.word	0x20000594

0800acc0 <sbrk_aligned>:
 800acc0:	b570      	push	{r4, r5, r6, lr}
 800acc2:	4e0e      	ldr	r6, [pc, #56]	; (800acfc <sbrk_aligned+0x3c>)
 800acc4:	460c      	mov	r4, r1
 800acc6:	6831      	ldr	r1, [r6, #0]
 800acc8:	4605      	mov	r5, r0
 800acca:	b911      	cbnz	r1, 800acd2 <sbrk_aligned+0x12>
 800accc:	f000 fb7a 	bl	800b3c4 <_sbrk_r>
 800acd0:	6030      	str	r0, [r6, #0]
 800acd2:	4621      	mov	r1, r4
 800acd4:	4628      	mov	r0, r5
 800acd6:	f000 fb75 	bl	800b3c4 <_sbrk_r>
 800acda:	1c43      	adds	r3, r0, #1
 800acdc:	d00a      	beq.n	800acf4 <sbrk_aligned+0x34>
 800acde:	1cc4      	adds	r4, r0, #3
 800ace0:	f024 0403 	bic.w	r4, r4, #3
 800ace4:	42a0      	cmp	r0, r4
 800ace6:	d007      	beq.n	800acf8 <sbrk_aligned+0x38>
 800ace8:	1a21      	subs	r1, r4, r0
 800acea:	4628      	mov	r0, r5
 800acec:	f000 fb6a 	bl	800b3c4 <_sbrk_r>
 800acf0:	3001      	adds	r0, #1
 800acf2:	d101      	bne.n	800acf8 <sbrk_aligned+0x38>
 800acf4:	f04f 34ff 	mov.w	r4, #4294967295
 800acf8:	4620      	mov	r0, r4
 800acfa:	bd70      	pop	{r4, r5, r6, pc}
 800acfc:	20000598 	.word	0x20000598

0800ad00 <_malloc_r>:
 800ad00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad04:	1ccd      	adds	r5, r1, #3
 800ad06:	f025 0503 	bic.w	r5, r5, #3
 800ad0a:	3508      	adds	r5, #8
 800ad0c:	2d0c      	cmp	r5, #12
 800ad0e:	bf38      	it	cc
 800ad10:	250c      	movcc	r5, #12
 800ad12:	2d00      	cmp	r5, #0
 800ad14:	4607      	mov	r7, r0
 800ad16:	db01      	blt.n	800ad1c <_malloc_r+0x1c>
 800ad18:	42a9      	cmp	r1, r5
 800ad1a:	d905      	bls.n	800ad28 <_malloc_r+0x28>
 800ad1c:	230c      	movs	r3, #12
 800ad1e:	603b      	str	r3, [r7, #0]
 800ad20:	2600      	movs	r6, #0
 800ad22:	4630      	mov	r0, r6
 800ad24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad28:	4e2e      	ldr	r6, [pc, #184]	; (800ade4 <_malloc_r+0xe4>)
 800ad2a:	f000 fbf5 	bl	800b518 <__malloc_lock>
 800ad2e:	6833      	ldr	r3, [r6, #0]
 800ad30:	461c      	mov	r4, r3
 800ad32:	bb34      	cbnz	r4, 800ad82 <_malloc_r+0x82>
 800ad34:	4629      	mov	r1, r5
 800ad36:	4638      	mov	r0, r7
 800ad38:	f7ff ffc2 	bl	800acc0 <sbrk_aligned>
 800ad3c:	1c43      	adds	r3, r0, #1
 800ad3e:	4604      	mov	r4, r0
 800ad40:	d14d      	bne.n	800adde <_malloc_r+0xde>
 800ad42:	6834      	ldr	r4, [r6, #0]
 800ad44:	4626      	mov	r6, r4
 800ad46:	2e00      	cmp	r6, #0
 800ad48:	d140      	bne.n	800adcc <_malloc_r+0xcc>
 800ad4a:	6823      	ldr	r3, [r4, #0]
 800ad4c:	4631      	mov	r1, r6
 800ad4e:	4638      	mov	r0, r7
 800ad50:	eb04 0803 	add.w	r8, r4, r3
 800ad54:	f000 fb36 	bl	800b3c4 <_sbrk_r>
 800ad58:	4580      	cmp	r8, r0
 800ad5a:	d13a      	bne.n	800add2 <_malloc_r+0xd2>
 800ad5c:	6821      	ldr	r1, [r4, #0]
 800ad5e:	3503      	adds	r5, #3
 800ad60:	1a6d      	subs	r5, r5, r1
 800ad62:	f025 0503 	bic.w	r5, r5, #3
 800ad66:	3508      	adds	r5, #8
 800ad68:	2d0c      	cmp	r5, #12
 800ad6a:	bf38      	it	cc
 800ad6c:	250c      	movcc	r5, #12
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4638      	mov	r0, r7
 800ad72:	f7ff ffa5 	bl	800acc0 <sbrk_aligned>
 800ad76:	3001      	adds	r0, #1
 800ad78:	d02b      	beq.n	800add2 <_malloc_r+0xd2>
 800ad7a:	6823      	ldr	r3, [r4, #0]
 800ad7c:	442b      	add	r3, r5
 800ad7e:	6023      	str	r3, [r4, #0]
 800ad80:	e00e      	b.n	800ada0 <_malloc_r+0xa0>
 800ad82:	6822      	ldr	r2, [r4, #0]
 800ad84:	1b52      	subs	r2, r2, r5
 800ad86:	d41e      	bmi.n	800adc6 <_malloc_r+0xc6>
 800ad88:	2a0b      	cmp	r2, #11
 800ad8a:	d916      	bls.n	800adba <_malloc_r+0xba>
 800ad8c:	1961      	adds	r1, r4, r5
 800ad8e:	42a3      	cmp	r3, r4
 800ad90:	6025      	str	r5, [r4, #0]
 800ad92:	bf18      	it	ne
 800ad94:	6059      	strne	r1, [r3, #4]
 800ad96:	6863      	ldr	r3, [r4, #4]
 800ad98:	bf08      	it	eq
 800ad9a:	6031      	streq	r1, [r6, #0]
 800ad9c:	5162      	str	r2, [r4, r5]
 800ad9e:	604b      	str	r3, [r1, #4]
 800ada0:	4638      	mov	r0, r7
 800ada2:	f104 060b 	add.w	r6, r4, #11
 800ada6:	f000 fbbd 	bl	800b524 <__malloc_unlock>
 800adaa:	f026 0607 	bic.w	r6, r6, #7
 800adae:	1d23      	adds	r3, r4, #4
 800adb0:	1af2      	subs	r2, r6, r3
 800adb2:	d0b6      	beq.n	800ad22 <_malloc_r+0x22>
 800adb4:	1b9b      	subs	r3, r3, r6
 800adb6:	50a3      	str	r3, [r4, r2]
 800adb8:	e7b3      	b.n	800ad22 <_malloc_r+0x22>
 800adba:	6862      	ldr	r2, [r4, #4]
 800adbc:	42a3      	cmp	r3, r4
 800adbe:	bf0c      	ite	eq
 800adc0:	6032      	streq	r2, [r6, #0]
 800adc2:	605a      	strne	r2, [r3, #4]
 800adc4:	e7ec      	b.n	800ada0 <_malloc_r+0xa0>
 800adc6:	4623      	mov	r3, r4
 800adc8:	6864      	ldr	r4, [r4, #4]
 800adca:	e7b2      	b.n	800ad32 <_malloc_r+0x32>
 800adcc:	4634      	mov	r4, r6
 800adce:	6876      	ldr	r6, [r6, #4]
 800add0:	e7b9      	b.n	800ad46 <_malloc_r+0x46>
 800add2:	230c      	movs	r3, #12
 800add4:	603b      	str	r3, [r7, #0]
 800add6:	4638      	mov	r0, r7
 800add8:	f000 fba4 	bl	800b524 <__malloc_unlock>
 800addc:	e7a1      	b.n	800ad22 <_malloc_r+0x22>
 800adde:	6025      	str	r5, [r4, #0]
 800ade0:	e7de      	b.n	800ada0 <_malloc_r+0xa0>
 800ade2:	bf00      	nop
 800ade4:	20000594 	.word	0x20000594

0800ade8 <__sfputc_r>:
 800ade8:	6893      	ldr	r3, [r2, #8]
 800adea:	3b01      	subs	r3, #1
 800adec:	2b00      	cmp	r3, #0
 800adee:	b410      	push	{r4}
 800adf0:	6093      	str	r3, [r2, #8]
 800adf2:	da08      	bge.n	800ae06 <__sfputc_r+0x1e>
 800adf4:	6994      	ldr	r4, [r2, #24]
 800adf6:	42a3      	cmp	r3, r4
 800adf8:	db01      	blt.n	800adfe <__sfputc_r+0x16>
 800adfa:	290a      	cmp	r1, #10
 800adfc:	d103      	bne.n	800ae06 <__sfputc_r+0x1e>
 800adfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae02:	f7ff bc31 	b.w	800a668 <__swbuf_r>
 800ae06:	6813      	ldr	r3, [r2, #0]
 800ae08:	1c58      	adds	r0, r3, #1
 800ae0a:	6010      	str	r0, [r2, #0]
 800ae0c:	7019      	strb	r1, [r3, #0]
 800ae0e:	4608      	mov	r0, r1
 800ae10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae14:	4770      	bx	lr

0800ae16 <__sfputs_r>:
 800ae16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae18:	4606      	mov	r6, r0
 800ae1a:	460f      	mov	r7, r1
 800ae1c:	4614      	mov	r4, r2
 800ae1e:	18d5      	adds	r5, r2, r3
 800ae20:	42ac      	cmp	r4, r5
 800ae22:	d101      	bne.n	800ae28 <__sfputs_r+0x12>
 800ae24:	2000      	movs	r0, #0
 800ae26:	e007      	b.n	800ae38 <__sfputs_r+0x22>
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	463a      	mov	r2, r7
 800ae2e:	4630      	mov	r0, r6
 800ae30:	f7ff ffda 	bl	800ade8 <__sfputc_r>
 800ae34:	1c43      	adds	r3, r0, #1
 800ae36:	d1f3      	bne.n	800ae20 <__sfputs_r+0xa>
 800ae38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ae3c <_vfiprintf_r>:
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	460d      	mov	r5, r1
 800ae42:	b09d      	sub	sp, #116	; 0x74
 800ae44:	4614      	mov	r4, r2
 800ae46:	4698      	mov	r8, r3
 800ae48:	4606      	mov	r6, r0
 800ae4a:	b118      	cbz	r0, 800ae54 <_vfiprintf_r+0x18>
 800ae4c:	6983      	ldr	r3, [r0, #24]
 800ae4e:	b90b      	cbnz	r3, 800ae54 <_vfiprintf_r+0x18>
 800ae50:	f7ff fde4 	bl	800aa1c <__sinit>
 800ae54:	4b89      	ldr	r3, [pc, #548]	; (800b07c <_vfiprintf_r+0x240>)
 800ae56:	429d      	cmp	r5, r3
 800ae58:	d11b      	bne.n	800ae92 <_vfiprintf_r+0x56>
 800ae5a:	6875      	ldr	r5, [r6, #4]
 800ae5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae5e:	07d9      	lsls	r1, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_vfiprintf_r+0x32>
 800ae62:	89ab      	ldrh	r3, [r5, #12]
 800ae64:	059a      	lsls	r2, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_vfiprintf_r+0x32>
 800ae68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae6a:	f7ff fe75 	bl	800ab58 <__retarget_lock_acquire_recursive>
 800ae6e:	89ab      	ldrh	r3, [r5, #12]
 800ae70:	071b      	lsls	r3, r3, #28
 800ae72:	d501      	bpl.n	800ae78 <_vfiprintf_r+0x3c>
 800ae74:	692b      	ldr	r3, [r5, #16]
 800ae76:	b9eb      	cbnz	r3, 800aeb4 <_vfiprintf_r+0x78>
 800ae78:	4629      	mov	r1, r5
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	f7ff fc46 	bl	800a70c <__swsetup_r>
 800ae80:	b1c0      	cbz	r0, 800aeb4 <_vfiprintf_r+0x78>
 800ae82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae84:	07dc      	lsls	r4, r3, #31
 800ae86:	d50e      	bpl.n	800aea6 <_vfiprintf_r+0x6a>
 800ae88:	f04f 30ff 	mov.w	r0, #4294967295
 800ae8c:	b01d      	add	sp, #116	; 0x74
 800ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae92:	4b7b      	ldr	r3, [pc, #492]	; (800b080 <_vfiprintf_r+0x244>)
 800ae94:	429d      	cmp	r5, r3
 800ae96:	d101      	bne.n	800ae9c <_vfiprintf_r+0x60>
 800ae98:	68b5      	ldr	r5, [r6, #8]
 800ae9a:	e7df      	b.n	800ae5c <_vfiprintf_r+0x20>
 800ae9c:	4b79      	ldr	r3, [pc, #484]	; (800b084 <_vfiprintf_r+0x248>)
 800ae9e:	429d      	cmp	r5, r3
 800aea0:	bf08      	it	eq
 800aea2:	68f5      	ldreq	r5, [r6, #12]
 800aea4:	e7da      	b.n	800ae5c <_vfiprintf_r+0x20>
 800aea6:	89ab      	ldrh	r3, [r5, #12]
 800aea8:	0598      	lsls	r0, r3, #22
 800aeaa:	d4ed      	bmi.n	800ae88 <_vfiprintf_r+0x4c>
 800aeac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aeae:	f7ff fe54 	bl	800ab5a <__retarget_lock_release_recursive>
 800aeb2:	e7e9      	b.n	800ae88 <_vfiprintf_r+0x4c>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb8:	2320      	movs	r3, #32
 800aeba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aebe:	f8cd 800c 	str.w	r8, [sp, #12]
 800aec2:	2330      	movs	r3, #48	; 0x30
 800aec4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b088 <_vfiprintf_r+0x24c>
 800aec8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aecc:	f04f 0901 	mov.w	r9, #1
 800aed0:	4623      	mov	r3, r4
 800aed2:	469a      	mov	sl, r3
 800aed4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aed8:	b10a      	cbz	r2, 800aede <_vfiprintf_r+0xa2>
 800aeda:	2a25      	cmp	r2, #37	; 0x25
 800aedc:	d1f9      	bne.n	800aed2 <_vfiprintf_r+0x96>
 800aede:	ebba 0b04 	subs.w	fp, sl, r4
 800aee2:	d00b      	beq.n	800aefc <_vfiprintf_r+0xc0>
 800aee4:	465b      	mov	r3, fp
 800aee6:	4622      	mov	r2, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	4630      	mov	r0, r6
 800aeec:	f7ff ff93 	bl	800ae16 <__sfputs_r>
 800aef0:	3001      	adds	r0, #1
 800aef2:	f000 80aa 	beq.w	800b04a <_vfiprintf_r+0x20e>
 800aef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aef8:	445a      	add	r2, fp
 800aefa:	9209      	str	r2, [sp, #36]	; 0x24
 800aefc:	f89a 3000 	ldrb.w	r3, [sl]
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 80a2 	beq.w	800b04a <_vfiprintf_r+0x20e>
 800af06:	2300      	movs	r3, #0
 800af08:	f04f 32ff 	mov.w	r2, #4294967295
 800af0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800af10:	f10a 0a01 	add.w	sl, sl, #1
 800af14:	9304      	str	r3, [sp, #16]
 800af16:	9307      	str	r3, [sp, #28]
 800af18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800af1c:	931a      	str	r3, [sp, #104]	; 0x68
 800af1e:	4654      	mov	r4, sl
 800af20:	2205      	movs	r2, #5
 800af22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af26:	4858      	ldr	r0, [pc, #352]	; (800b088 <_vfiprintf_r+0x24c>)
 800af28:	f7f5 f972 	bl	8000210 <memchr>
 800af2c:	9a04      	ldr	r2, [sp, #16]
 800af2e:	b9d8      	cbnz	r0, 800af68 <_vfiprintf_r+0x12c>
 800af30:	06d1      	lsls	r1, r2, #27
 800af32:	bf44      	itt	mi
 800af34:	2320      	movmi	r3, #32
 800af36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af3a:	0713      	lsls	r3, r2, #28
 800af3c:	bf44      	itt	mi
 800af3e:	232b      	movmi	r3, #43	; 0x2b
 800af40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800af44:	f89a 3000 	ldrb.w	r3, [sl]
 800af48:	2b2a      	cmp	r3, #42	; 0x2a
 800af4a:	d015      	beq.n	800af78 <_vfiprintf_r+0x13c>
 800af4c:	9a07      	ldr	r2, [sp, #28]
 800af4e:	4654      	mov	r4, sl
 800af50:	2000      	movs	r0, #0
 800af52:	f04f 0c0a 	mov.w	ip, #10
 800af56:	4621      	mov	r1, r4
 800af58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800af5c:	3b30      	subs	r3, #48	; 0x30
 800af5e:	2b09      	cmp	r3, #9
 800af60:	d94e      	bls.n	800b000 <_vfiprintf_r+0x1c4>
 800af62:	b1b0      	cbz	r0, 800af92 <_vfiprintf_r+0x156>
 800af64:	9207      	str	r2, [sp, #28]
 800af66:	e014      	b.n	800af92 <_vfiprintf_r+0x156>
 800af68:	eba0 0308 	sub.w	r3, r0, r8
 800af6c:	fa09 f303 	lsl.w	r3, r9, r3
 800af70:	4313      	orrs	r3, r2
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	46a2      	mov	sl, r4
 800af76:	e7d2      	b.n	800af1e <_vfiprintf_r+0xe2>
 800af78:	9b03      	ldr	r3, [sp, #12]
 800af7a:	1d19      	adds	r1, r3, #4
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	9103      	str	r1, [sp, #12]
 800af80:	2b00      	cmp	r3, #0
 800af82:	bfbb      	ittet	lt
 800af84:	425b      	neglt	r3, r3
 800af86:	f042 0202 	orrlt.w	r2, r2, #2
 800af8a:	9307      	strge	r3, [sp, #28]
 800af8c:	9307      	strlt	r3, [sp, #28]
 800af8e:	bfb8      	it	lt
 800af90:	9204      	strlt	r2, [sp, #16]
 800af92:	7823      	ldrb	r3, [r4, #0]
 800af94:	2b2e      	cmp	r3, #46	; 0x2e
 800af96:	d10c      	bne.n	800afb2 <_vfiprintf_r+0x176>
 800af98:	7863      	ldrb	r3, [r4, #1]
 800af9a:	2b2a      	cmp	r3, #42	; 0x2a
 800af9c:	d135      	bne.n	800b00a <_vfiprintf_r+0x1ce>
 800af9e:	9b03      	ldr	r3, [sp, #12]
 800afa0:	1d1a      	adds	r2, r3, #4
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	9203      	str	r2, [sp, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	bfb8      	it	lt
 800afaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800afae:	3402      	adds	r4, #2
 800afb0:	9305      	str	r3, [sp, #20]
 800afb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b098 <_vfiprintf_r+0x25c>
 800afb6:	7821      	ldrb	r1, [r4, #0]
 800afb8:	2203      	movs	r2, #3
 800afba:	4650      	mov	r0, sl
 800afbc:	f7f5 f928 	bl	8000210 <memchr>
 800afc0:	b140      	cbz	r0, 800afd4 <_vfiprintf_r+0x198>
 800afc2:	2340      	movs	r3, #64	; 0x40
 800afc4:	eba0 000a 	sub.w	r0, r0, sl
 800afc8:	fa03 f000 	lsl.w	r0, r3, r0
 800afcc:	9b04      	ldr	r3, [sp, #16]
 800afce:	4303      	orrs	r3, r0
 800afd0:	3401      	adds	r4, #1
 800afd2:	9304      	str	r3, [sp, #16]
 800afd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800afd8:	482c      	ldr	r0, [pc, #176]	; (800b08c <_vfiprintf_r+0x250>)
 800afda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800afde:	2206      	movs	r2, #6
 800afe0:	f7f5 f916 	bl	8000210 <memchr>
 800afe4:	2800      	cmp	r0, #0
 800afe6:	d03f      	beq.n	800b068 <_vfiprintf_r+0x22c>
 800afe8:	4b29      	ldr	r3, [pc, #164]	; (800b090 <_vfiprintf_r+0x254>)
 800afea:	bb1b      	cbnz	r3, 800b034 <_vfiprintf_r+0x1f8>
 800afec:	9b03      	ldr	r3, [sp, #12]
 800afee:	3307      	adds	r3, #7
 800aff0:	f023 0307 	bic.w	r3, r3, #7
 800aff4:	3308      	adds	r3, #8
 800aff6:	9303      	str	r3, [sp, #12]
 800aff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800affa:	443b      	add	r3, r7
 800affc:	9309      	str	r3, [sp, #36]	; 0x24
 800affe:	e767      	b.n	800aed0 <_vfiprintf_r+0x94>
 800b000:	fb0c 3202 	mla	r2, ip, r2, r3
 800b004:	460c      	mov	r4, r1
 800b006:	2001      	movs	r0, #1
 800b008:	e7a5      	b.n	800af56 <_vfiprintf_r+0x11a>
 800b00a:	2300      	movs	r3, #0
 800b00c:	3401      	adds	r4, #1
 800b00e:	9305      	str	r3, [sp, #20]
 800b010:	4619      	mov	r1, r3
 800b012:	f04f 0c0a 	mov.w	ip, #10
 800b016:	4620      	mov	r0, r4
 800b018:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b01c:	3a30      	subs	r2, #48	; 0x30
 800b01e:	2a09      	cmp	r2, #9
 800b020:	d903      	bls.n	800b02a <_vfiprintf_r+0x1ee>
 800b022:	2b00      	cmp	r3, #0
 800b024:	d0c5      	beq.n	800afb2 <_vfiprintf_r+0x176>
 800b026:	9105      	str	r1, [sp, #20]
 800b028:	e7c3      	b.n	800afb2 <_vfiprintf_r+0x176>
 800b02a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b02e:	4604      	mov	r4, r0
 800b030:	2301      	movs	r3, #1
 800b032:	e7f0      	b.n	800b016 <_vfiprintf_r+0x1da>
 800b034:	ab03      	add	r3, sp, #12
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	462a      	mov	r2, r5
 800b03a:	4b16      	ldr	r3, [pc, #88]	; (800b094 <_vfiprintf_r+0x258>)
 800b03c:	a904      	add	r1, sp, #16
 800b03e:	4630      	mov	r0, r6
 800b040:	f3af 8000 	nop.w
 800b044:	4607      	mov	r7, r0
 800b046:	1c78      	adds	r0, r7, #1
 800b048:	d1d6      	bne.n	800aff8 <_vfiprintf_r+0x1bc>
 800b04a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b04c:	07d9      	lsls	r1, r3, #31
 800b04e:	d405      	bmi.n	800b05c <_vfiprintf_r+0x220>
 800b050:	89ab      	ldrh	r3, [r5, #12]
 800b052:	059a      	lsls	r2, r3, #22
 800b054:	d402      	bmi.n	800b05c <_vfiprintf_r+0x220>
 800b056:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b058:	f7ff fd7f 	bl	800ab5a <__retarget_lock_release_recursive>
 800b05c:	89ab      	ldrh	r3, [r5, #12]
 800b05e:	065b      	lsls	r3, r3, #25
 800b060:	f53f af12 	bmi.w	800ae88 <_vfiprintf_r+0x4c>
 800b064:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b066:	e711      	b.n	800ae8c <_vfiprintf_r+0x50>
 800b068:	ab03      	add	r3, sp, #12
 800b06a:	9300      	str	r3, [sp, #0]
 800b06c:	462a      	mov	r2, r5
 800b06e:	4b09      	ldr	r3, [pc, #36]	; (800b094 <_vfiprintf_r+0x258>)
 800b070:	a904      	add	r1, sp, #16
 800b072:	4630      	mov	r0, r6
 800b074:	f000 f880 	bl	800b178 <_printf_i>
 800b078:	e7e4      	b.n	800b044 <_vfiprintf_r+0x208>
 800b07a:	bf00      	nop
 800b07c:	0800b8b0 	.word	0x0800b8b0
 800b080:	0800b8d0 	.word	0x0800b8d0
 800b084:	0800b890 	.word	0x0800b890
 800b088:	0800b8f0 	.word	0x0800b8f0
 800b08c:	0800b8fa 	.word	0x0800b8fa
 800b090:	00000000 	.word	0x00000000
 800b094:	0800ae17 	.word	0x0800ae17
 800b098:	0800b8f6 	.word	0x0800b8f6

0800b09c <_printf_common>:
 800b09c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0a0:	4616      	mov	r6, r2
 800b0a2:	4699      	mov	r9, r3
 800b0a4:	688a      	ldr	r2, [r1, #8]
 800b0a6:	690b      	ldr	r3, [r1, #16]
 800b0a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b0ac:	4293      	cmp	r3, r2
 800b0ae:	bfb8      	it	lt
 800b0b0:	4613      	movlt	r3, r2
 800b0b2:	6033      	str	r3, [r6, #0]
 800b0b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b0b8:	4607      	mov	r7, r0
 800b0ba:	460c      	mov	r4, r1
 800b0bc:	b10a      	cbz	r2, 800b0c2 <_printf_common+0x26>
 800b0be:	3301      	adds	r3, #1
 800b0c0:	6033      	str	r3, [r6, #0]
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	0699      	lsls	r1, r3, #26
 800b0c6:	bf42      	ittt	mi
 800b0c8:	6833      	ldrmi	r3, [r6, #0]
 800b0ca:	3302      	addmi	r3, #2
 800b0cc:	6033      	strmi	r3, [r6, #0]
 800b0ce:	6825      	ldr	r5, [r4, #0]
 800b0d0:	f015 0506 	ands.w	r5, r5, #6
 800b0d4:	d106      	bne.n	800b0e4 <_printf_common+0x48>
 800b0d6:	f104 0a19 	add.w	sl, r4, #25
 800b0da:	68e3      	ldr	r3, [r4, #12]
 800b0dc:	6832      	ldr	r2, [r6, #0]
 800b0de:	1a9b      	subs	r3, r3, r2
 800b0e0:	42ab      	cmp	r3, r5
 800b0e2:	dc26      	bgt.n	800b132 <_printf_common+0x96>
 800b0e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b0e8:	1e13      	subs	r3, r2, #0
 800b0ea:	6822      	ldr	r2, [r4, #0]
 800b0ec:	bf18      	it	ne
 800b0ee:	2301      	movne	r3, #1
 800b0f0:	0692      	lsls	r2, r2, #26
 800b0f2:	d42b      	bmi.n	800b14c <_printf_common+0xb0>
 800b0f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b0f8:	4649      	mov	r1, r9
 800b0fa:	4638      	mov	r0, r7
 800b0fc:	47c0      	blx	r8
 800b0fe:	3001      	adds	r0, #1
 800b100:	d01e      	beq.n	800b140 <_printf_common+0xa4>
 800b102:	6823      	ldr	r3, [r4, #0]
 800b104:	68e5      	ldr	r5, [r4, #12]
 800b106:	6832      	ldr	r2, [r6, #0]
 800b108:	f003 0306 	and.w	r3, r3, #6
 800b10c:	2b04      	cmp	r3, #4
 800b10e:	bf08      	it	eq
 800b110:	1aad      	subeq	r5, r5, r2
 800b112:	68a3      	ldr	r3, [r4, #8]
 800b114:	6922      	ldr	r2, [r4, #16]
 800b116:	bf0c      	ite	eq
 800b118:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b11c:	2500      	movne	r5, #0
 800b11e:	4293      	cmp	r3, r2
 800b120:	bfc4      	itt	gt
 800b122:	1a9b      	subgt	r3, r3, r2
 800b124:	18ed      	addgt	r5, r5, r3
 800b126:	2600      	movs	r6, #0
 800b128:	341a      	adds	r4, #26
 800b12a:	42b5      	cmp	r5, r6
 800b12c:	d11a      	bne.n	800b164 <_printf_common+0xc8>
 800b12e:	2000      	movs	r0, #0
 800b130:	e008      	b.n	800b144 <_printf_common+0xa8>
 800b132:	2301      	movs	r3, #1
 800b134:	4652      	mov	r2, sl
 800b136:	4649      	mov	r1, r9
 800b138:	4638      	mov	r0, r7
 800b13a:	47c0      	blx	r8
 800b13c:	3001      	adds	r0, #1
 800b13e:	d103      	bne.n	800b148 <_printf_common+0xac>
 800b140:	f04f 30ff 	mov.w	r0, #4294967295
 800b144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b148:	3501      	adds	r5, #1
 800b14a:	e7c6      	b.n	800b0da <_printf_common+0x3e>
 800b14c:	18e1      	adds	r1, r4, r3
 800b14e:	1c5a      	adds	r2, r3, #1
 800b150:	2030      	movs	r0, #48	; 0x30
 800b152:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b156:	4422      	add	r2, r4
 800b158:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b15c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b160:	3302      	adds	r3, #2
 800b162:	e7c7      	b.n	800b0f4 <_printf_common+0x58>
 800b164:	2301      	movs	r3, #1
 800b166:	4622      	mov	r2, r4
 800b168:	4649      	mov	r1, r9
 800b16a:	4638      	mov	r0, r7
 800b16c:	47c0      	blx	r8
 800b16e:	3001      	adds	r0, #1
 800b170:	d0e6      	beq.n	800b140 <_printf_common+0xa4>
 800b172:	3601      	adds	r6, #1
 800b174:	e7d9      	b.n	800b12a <_printf_common+0x8e>
	...

0800b178 <_printf_i>:
 800b178:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b17c:	7e0f      	ldrb	r7, [r1, #24]
 800b17e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b180:	2f78      	cmp	r7, #120	; 0x78
 800b182:	4691      	mov	r9, r2
 800b184:	4680      	mov	r8, r0
 800b186:	460c      	mov	r4, r1
 800b188:	469a      	mov	sl, r3
 800b18a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b18e:	d807      	bhi.n	800b1a0 <_printf_i+0x28>
 800b190:	2f62      	cmp	r7, #98	; 0x62
 800b192:	d80a      	bhi.n	800b1aa <_printf_i+0x32>
 800b194:	2f00      	cmp	r7, #0
 800b196:	f000 80d8 	beq.w	800b34a <_printf_i+0x1d2>
 800b19a:	2f58      	cmp	r7, #88	; 0x58
 800b19c:	f000 80a3 	beq.w	800b2e6 <_printf_i+0x16e>
 800b1a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b1a8:	e03a      	b.n	800b220 <_printf_i+0xa8>
 800b1aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b1ae:	2b15      	cmp	r3, #21
 800b1b0:	d8f6      	bhi.n	800b1a0 <_printf_i+0x28>
 800b1b2:	a101      	add	r1, pc, #4	; (adr r1, 800b1b8 <_printf_i+0x40>)
 800b1b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b1b8:	0800b211 	.word	0x0800b211
 800b1bc:	0800b225 	.word	0x0800b225
 800b1c0:	0800b1a1 	.word	0x0800b1a1
 800b1c4:	0800b1a1 	.word	0x0800b1a1
 800b1c8:	0800b1a1 	.word	0x0800b1a1
 800b1cc:	0800b1a1 	.word	0x0800b1a1
 800b1d0:	0800b225 	.word	0x0800b225
 800b1d4:	0800b1a1 	.word	0x0800b1a1
 800b1d8:	0800b1a1 	.word	0x0800b1a1
 800b1dc:	0800b1a1 	.word	0x0800b1a1
 800b1e0:	0800b1a1 	.word	0x0800b1a1
 800b1e4:	0800b331 	.word	0x0800b331
 800b1e8:	0800b255 	.word	0x0800b255
 800b1ec:	0800b313 	.word	0x0800b313
 800b1f0:	0800b1a1 	.word	0x0800b1a1
 800b1f4:	0800b1a1 	.word	0x0800b1a1
 800b1f8:	0800b353 	.word	0x0800b353
 800b1fc:	0800b1a1 	.word	0x0800b1a1
 800b200:	0800b255 	.word	0x0800b255
 800b204:	0800b1a1 	.word	0x0800b1a1
 800b208:	0800b1a1 	.word	0x0800b1a1
 800b20c:	0800b31b 	.word	0x0800b31b
 800b210:	682b      	ldr	r3, [r5, #0]
 800b212:	1d1a      	adds	r2, r3, #4
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	602a      	str	r2, [r5, #0]
 800b218:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b21c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b220:	2301      	movs	r3, #1
 800b222:	e0a3      	b.n	800b36c <_printf_i+0x1f4>
 800b224:	6820      	ldr	r0, [r4, #0]
 800b226:	6829      	ldr	r1, [r5, #0]
 800b228:	0606      	lsls	r6, r0, #24
 800b22a:	f101 0304 	add.w	r3, r1, #4
 800b22e:	d50a      	bpl.n	800b246 <_printf_i+0xce>
 800b230:	680e      	ldr	r6, [r1, #0]
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	2e00      	cmp	r6, #0
 800b236:	da03      	bge.n	800b240 <_printf_i+0xc8>
 800b238:	232d      	movs	r3, #45	; 0x2d
 800b23a:	4276      	negs	r6, r6
 800b23c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b240:	485e      	ldr	r0, [pc, #376]	; (800b3bc <_printf_i+0x244>)
 800b242:	230a      	movs	r3, #10
 800b244:	e019      	b.n	800b27a <_printf_i+0x102>
 800b246:	680e      	ldr	r6, [r1, #0]
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b24e:	bf18      	it	ne
 800b250:	b236      	sxthne	r6, r6
 800b252:	e7ef      	b.n	800b234 <_printf_i+0xbc>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	6820      	ldr	r0, [r4, #0]
 800b258:	1d19      	adds	r1, r3, #4
 800b25a:	6029      	str	r1, [r5, #0]
 800b25c:	0601      	lsls	r1, r0, #24
 800b25e:	d501      	bpl.n	800b264 <_printf_i+0xec>
 800b260:	681e      	ldr	r6, [r3, #0]
 800b262:	e002      	b.n	800b26a <_printf_i+0xf2>
 800b264:	0646      	lsls	r6, r0, #25
 800b266:	d5fb      	bpl.n	800b260 <_printf_i+0xe8>
 800b268:	881e      	ldrh	r6, [r3, #0]
 800b26a:	4854      	ldr	r0, [pc, #336]	; (800b3bc <_printf_i+0x244>)
 800b26c:	2f6f      	cmp	r7, #111	; 0x6f
 800b26e:	bf0c      	ite	eq
 800b270:	2308      	moveq	r3, #8
 800b272:	230a      	movne	r3, #10
 800b274:	2100      	movs	r1, #0
 800b276:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b27a:	6865      	ldr	r5, [r4, #4]
 800b27c:	60a5      	str	r5, [r4, #8]
 800b27e:	2d00      	cmp	r5, #0
 800b280:	bfa2      	ittt	ge
 800b282:	6821      	ldrge	r1, [r4, #0]
 800b284:	f021 0104 	bicge.w	r1, r1, #4
 800b288:	6021      	strge	r1, [r4, #0]
 800b28a:	b90e      	cbnz	r6, 800b290 <_printf_i+0x118>
 800b28c:	2d00      	cmp	r5, #0
 800b28e:	d04d      	beq.n	800b32c <_printf_i+0x1b4>
 800b290:	4615      	mov	r5, r2
 800b292:	fbb6 f1f3 	udiv	r1, r6, r3
 800b296:	fb03 6711 	mls	r7, r3, r1, r6
 800b29a:	5dc7      	ldrb	r7, [r0, r7]
 800b29c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b2a0:	4637      	mov	r7, r6
 800b2a2:	42bb      	cmp	r3, r7
 800b2a4:	460e      	mov	r6, r1
 800b2a6:	d9f4      	bls.n	800b292 <_printf_i+0x11a>
 800b2a8:	2b08      	cmp	r3, #8
 800b2aa:	d10b      	bne.n	800b2c4 <_printf_i+0x14c>
 800b2ac:	6823      	ldr	r3, [r4, #0]
 800b2ae:	07de      	lsls	r6, r3, #31
 800b2b0:	d508      	bpl.n	800b2c4 <_printf_i+0x14c>
 800b2b2:	6923      	ldr	r3, [r4, #16]
 800b2b4:	6861      	ldr	r1, [r4, #4]
 800b2b6:	4299      	cmp	r1, r3
 800b2b8:	bfde      	ittt	le
 800b2ba:	2330      	movle	r3, #48	; 0x30
 800b2bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b2c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b2c4:	1b52      	subs	r2, r2, r5
 800b2c6:	6122      	str	r2, [r4, #16]
 800b2c8:	f8cd a000 	str.w	sl, [sp]
 800b2cc:	464b      	mov	r3, r9
 800b2ce:	aa03      	add	r2, sp, #12
 800b2d0:	4621      	mov	r1, r4
 800b2d2:	4640      	mov	r0, r8
 800b2d4:	f7ff fee2 	bl	800b09c <_printf_common>
 800b2d8:	3001      	adds	r0, #1
 800b2da:	d14c      	bne.n	800b376 <_printf_i+0x1fe>
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	b004      	add	sp, #16
 800b2e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2e6:	4835      	ldr	r0, [pc, #212]	; (800b3bc <_printf_i+0x244>)
 800b2e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b2ec:	6829      	ldr	r1, [r5, #0]
 800b2ee:	6823      	ldr	r3, [r4, #0]
 800b2f0:	f851 6b04 	ldr.w	r6, [r1], #4
 800b2f4:	6029      	str	r1, [r5, #0]
 800b2f6:	061d      	lsls	r5, r3, #24
 800b2f8:	d514      	bpl.n	800b324 <_printf_i+0x1ac>
 800b2fa:	07df      	lsls	r7, r3, #31
 800b2fc:	bf44      	itt	mi
 800b2fe:	f043 0320 	orrmi.w	r3, r3, #32
 800b302:	6023      	strmi	r3, [r4, #0]
 800b304:	b91e      	cbnz	r6, 800b30e <_printf_i+0x196>
 800b306:	6823      	ldr	r3, [r4, #0]
 800b308:	f023 0320 	bic.w	r3, r3, #32
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	2310      	movs	r3, #16
 800b310:	e7b0      	b.n	800b274 <_printf_i+0xfc>
 800b312:	6823      	ldr	r3, [r4, #0]
 800b314:	f043 0320 	orr.w	r3, r3, #32
 800b318:	6023      	str	r3, [r4, #0]
 800b31a:	2378      	movs	r3, #120	; 0x78
 800b31c:	4828      	ldr	r0, [pc, #160]	; (800b3c0 <_printf_i+0x248>)
 800b31e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b322:	e7e3      	b.n	800b2ec <_printf_i+0x174>
 800b324:	0659      	lsls	r1, r3, #25
 800b326:	bf48      	it	mi
 800b328:	b2b6      	uxthmi	r6, r6
 800b32a:	e7e6      	b.n	800b2fa <_printf_i+0x182>
 800b32c:	4615      	mov	r5, r2
 800b32e:	e7bb      	b.n	800b2a8 <_printf_i+0x130>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	6826      	ldr	r6, [r4, #0]
 800b334:	6961      	ldr	r1, [r4, #20]
 800b336:	1d18      	adds	r0, r3, #4
 800b338:	6028      	str	r0, [r5, #0]
 800b33a:	0635      	lsls	r5, r6, #24
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	d501      	bpl.n	800b344 <_printf_i+0x1cc>
 800b340:	6019      	str	r1, [r3, #0]
 800b342:	e002      	b.n	800b34a <_printf_i+0x1d2>
 800b344:	0670      	lsls	r0, r6, #25
 800b346:	d5fb      	bpl.n	800b340 <_printf_i+0x1c8>
 800b348:	8019      	strh	r1, [r3, #0]
 800b34a:	2300      	movs	r3, #0
 800b34c:	6123      	str	r3, [r4, #16]
 800b34e:	4615      	mov	r5, r2
 800b350:	e7ba      	b.n	800b2c8 <_printf_i+0x150>
 800b352:	682b      	ldr	r3, [r5, #0]
 800b354:	1d1a      	adds	r2, r3, #4
 800b356:	602a      	str	r2, [r5, #0]
 800b358:	681d      	ldr	r5, [r3, #0]
 800b35a:	6862      	ldr	r2, [r4, #4]
 800b35c:	2100      	movs	r1, #0
 800b35e:	4628      	mov	r0, r5
 800b360:	f7f4 ff56 	bl	8000210 <memchr>
 800b364:	b108      	cbz	r0, 800b36a <_printf_i+0x1f2>
 800b366:	1b40      	subs	r0, r0, r5
 800b368:	6060      	str	r0, [r4, #4]
 800b36a:	6863      	ldr	r3, [r4, #4]
 800b36c:	6123      	str	r3, [r4, #16]
 800b36e:	2300      	movs	r3, #0
 800b370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b374:	e7a8      	b.n	800b2c8 <_printf_i+0x150>
 800b376:	6923      	ldr	r3, [r4, #16]
 800b378:	462a      	mov	r2, r5
 800b37a:	4649      	mov	r1, r9
 800b37c:	4640      	mov	r0, r8
 800b37e:	47d0      	blx	sl
 800b380:	3001      	adds	r0, #1
 800b382:	d0ab      	beq.n	800b2dc <_printf_i+0x164>
 800b384:	6823      	ldr	r3, [r4, #0]
 800b386:	079b      	lsls	r3, r3, #30
 800b388:	d413      	bmi.n	800b3b2 <_printf_i+0x23a>
 800b38a:	68e0      	ldr	r0, [r4, #12]
 800b38c:	9b03      	ldr	r3, [sp, #12]
 800b38e:	4298      	cmp	r0, r3
 800b390:	bfb8      	it	lt
 800b392:	4618      	movlt	r0, r3
 800b394:	e7a4      	b.n	800b2e0 <_printf_i+0x168>
 800b396:	2301      	movs	r3, #1
 800b398:	4632      	mov	r2, r6
 800b39a:	4649      	mov	r1, r9
 800b39c:	4640      	mov	r0, r8
 800b39e:	47d0      	blx	sl
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d09b      	beq.n	800b2dc <_printf_i+0x164>
 800b3a4:	3501      	adds	r5, #1
 800b3a6:	68e3      	ldr	r3, [r4, #12]
 800b3a8:	9903      	ldr	r1, [sp, #12]
 800b3aa:	1a5b      	subs	r3, r3, r1
 800b3ac:	42ab      	cmp	r3, r5
 800b3ae:	dcf2      	bgt.n	800b396 <_printf_i+0x21e>
 800b3b0:	e7eb      	b.n	800b38a <_printf_i+0x212>
 800b3b2:	2500      	movs	r5, #0
 800b3b4:	f104 0619 	add.w	r6, r4, #25
 800b3b8:	e7f5      	b.n	800b3a6 <_printf_i+0x22e>
 800b3ba:	bf00      	nop
 800b3bc:	0800b901 	.word	0x0800b901
 800b3c0:	0800b912 	.word	0x0800b912

0800b3c4 <_sbrk_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d06      	ldr	r5, [pc, #24]	; (800b3e0 <_sbrk_r+0x1c>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f7f9 ffa6 	bl	8005320 <_sbrk>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_sbrk_r+0x1a>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_sbrk_r+0x1a>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	2000059c 	.word	0x2000059c

0800b3e4 <__sread>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	f000 f8a0 	bl	800b530 <_read_r>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	bfab      	itete	ge
 800b3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3f8:	181b      	addge	r3, r3, r0
 800b3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3fe:	bfac      	ite	ge
 800b400:	6563      	strge	r3, [r4, #84]	; 0x54
 800b402:	81a3      	strhlt	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__swrite>:
 800b406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40a:	461f      	mov	r7, r3
 800b40c:	898b      	ldrh	r3, [r1, #12]
 800b40e:	05db      	lsls	r3, r3, #23
 800b410:	4605      	mov	r5, r0
 800b412:	460c      	mov	r4, r1
 800b414:	4616      	mov	r6, r2
 800b416:	d505      	bpl.n	800b424 <__swrite+0x1e>
 800b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41c:	2302      	movs	r3, #2
 800b41e:	2200      	movs	r2, #0
 800b420:	f000 f868 	bl	800b4f4 <_lseek_r>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	4632      	mov	r2, r6
 800b432:	463b      	mov	r3, r7
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	f000 b817 	b.w	800b46c <_write_r>

0800b43e <__sseek>:
 800b43e:	b510      	push	{r4, lr}
 800b440:	460c      	mov	r4, r1
 800b442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b446:	f000 f855 	bl	800b4f4 <_lseek_r>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	bf15      	itete	ne
 800b450:	6560      	strne	r0, [r4, #84]	; 0x54
 800b452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b45a:	81a3      	strheq	r3, [r4, #12]
 800b45c:	bf18      	it	ne
 800b45e:	81a3      	strhne	r3, [r4, #12]
 800b460:	bd10      	pop	{r4, pc}

0800b462 <__sclose>:
 800b462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b466:	f000 b813 	b.w	800b490 <_close_r>
	...

0800b46c <_write_r>:
 800b46c:	b538      	push	{r3, r4, r5, lr}
 800b46e:	4d07      	ldr	r5, [pc, #28]	; (800b48c <_write_r+0x20>)
 800b470:	4604      	mov	r4, r0
 800b472:	4608      	mov	r0, r1
 800b474:	4611      	mov	r1, r2
 800b476:	2200      	movs	r2, #0
 800b478:	602a      	str	r2, [r5, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	f7f8 f980 	bl	8003780 <_write>
 800b480:	1c43      	adds	r3, r0, #1
 800b482:	d102      	bne.n	800b48a <_write_r+0x1e>
 800b484:	682b      	ldr	r3, [r5, #0]
 800b486:	b103      	cbz	r3, 800b48a <_write_r+0x1e>
 800b488:	6023      	str	r3, [r4, #0]
 800b48a:	bd38      	pop	{r3, r4, r5, pc}
 800b48c:	2000059c 	.word	0x2000059c

0800b490 <_close_r>:
 800b490:	b538      	push	{r3, r4, r5, lr}
 800b492:	4d06      	ldr	r5, [pc, #24]	; (800b4ac <_close_r+0x1c>)
 800b494:	2300      	movs	r3, #0
 800b496:	4604      	mov	r4, r0
 800b498:	4608      	mov	r0, r1
 800b49a:	602b      	str	r3, [r5, #0]
 800b49c:	f7f9 ff0b 	bl	80052b6 <_close>
 800b4a0:	1c43      	adds	r3, r0, #1
 800b4a2:	d102      	bne.n	800b4aa <_close_r+0x1a>
 800b4a4:	682b      	ldr	r3, [r5, #0]
 800b4a6:	b103      	cbz	r3, 800b4aa <_close_r+0x1a>
 800b4a8:	6023      	str	r3, [r4, #0]
 800b4aa:	bd38      	pop	{r3, r4, r5, pc}
 800b4ac:	2000059c 	.word	0x2000059c

0800b4b0 <_fstat_r>:
 800b4b0:	b538      	push	{r3, r4, r5, lr}
 800b4b2:	4d07      	ldr	r5, [pc, #28]	; (800b4d0 <_fstat_r+0x20>)
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	4604      	mov	r4, r0
 800b4b8:	4608      	mov	r0, r1
 800b4ba:	4611      	mov	r1, r2
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	f7f9 ff06 	bl	80052ce <_fstat>
 800b4c2:	1c43      	adds	r3, r0, #1
 800b4c4:	d102      	bne.n	800b4cc <_fstat_r+0x1c>
 800b4c6:	682b      	ldr	r3, [r5, #0]
 800b4c8:	b103      	cbz	r3, 800b4cc <_fstat_r+0x1c>
 800b4ca:	6023      	str	r3, [r4, #0]
 800b4cc:	bd38      	pop	{r3, r4, r5, pc}
 800b4ce:	bf00      	nop
 800b4d0:	2000059c 	.word	0x2000059c

0800b4d4 <_isatty_r>:
 800b4d4:	b538      	push	{r3, r4, r5, lr}
 800b4d6:	4d06      	ldr	r5, [pc, #24]	; (800b4f0 <_isatty_r+0x1c>)
 800b4d8:	2300      	movs	r3, #0
 800b4da:	4604      	mov	r4, r0
 800b4dc:	4608      	mov	r0, r1
 800b4de:	602b      	str	r3, [r5, #0]
 800b4e0:	f7f9 ff05 	bl	80052ee <_isatty>
 800b4e4:	1c43      	adds	r3, r0, #1
 800b4e6:	d102      	bne.n	800b4ee <_isatty_r+0x1a>
 800b4e8:	682b      	ldr	r3, [r5, #0]
 800b4ea:	b103      	cbz	r3, 800b4ee <_isatty_r+0x1a>
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	bd38      	pop	{r3, r4, r5, pc}
 800b4f0:	2000059c 	.word	0x2000059c

0800b4f4 <_lseek_r>:
 800b4f4:	b538      	push	{r3, r4, r5, lr}
 800b4f6:	4d07      	ldr	r5, [pc, #28]	; (800b514 <_lseek_r+0x20>)
 800b4f8:	4604      	mov	r4, r0
 800b4fa:	4608      	mov	r0, r1
 800b4fc:	4611      	mov	r1, r2
 800b4fe:	2200      	movs	r2, #0
 800b500:	602a      	str	r2, [r5, #0]
 800b502:	461a      	mov	r2, r3
 800b504:	f7f9 fefe 	bl	8005304 <_lseek>
 800b508:	1c43      	adds	r3, r0, #1
 800b50a:	d102      	bne.n	800b512 <_lseek_r+0x1e>
 800b50c:	682b      	ldr	r3, [r5, #0]
 800b50e:	b103      	cbz	r3, 800b512 <_lseek_r+0x1e>
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	bd38      	pop	{r3, r4, r5, pc}
 800b514:	2000059c 	.word	0x2000059c

0800b518 <__malloc_lock>:
 800b518:	4801      	ldr	r0, [pc, #4]	; (800b520 <__malloc_lock+0x8>)
 800b51a:	f7ff bb1d 	b.w	800ab58 <__retarget_lock_acquire_recursive>
 800b51e:	bf00      	nop
 800b520:	20000590 	.word	0x20000590

0800b524 <__malloc_unlock>:
 800b524:	4801      	ldr	r0, [pc, #4]	; (800b52c <__malloc_unlock+0x8>)
 800b526:	f7ff bb18 	b.w	800ab5a <__retarget_lock_release_recursive>
 800b52a:	bf00      	nop
 800b52c:	20000590 	.word	0x20000590

0800b530 <_read_r>:
 800b530:	b538      	push	{r3, r4, r5, lr}
 800b532:	4d07      	ldr	r5, [pc, #28]	; (800b550 <_read_r+0x20>)
 800b534:	4604      	mov	r4, r0
 800b536:	4608      	mov	r0, r1
 800b538:	4611      	mov	r1, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	602a      	str	r2, [r5, #0]
 800b53e:	461a      	mov	r2, r3
 800b540:	f7f9 fe9c 	bl	800527c <_read>
 800b544:	1c43      	adds	r3, r0, #1
 800b546:	d102      	bne.n	800b54e <_read_r+0x1e>
 800b548:	682b      	ldr	r3, [r5, #0]
 800b54a:	b103      	cbz	r3, 800b54e <_read_r+0x1e>
 800b54c:	6023      	str	r3, [r4, #0]
 800b54e:	bd38      	pop	{r3, r4, r5, pc}
 800b550:	2000059c 	.word	0x2000059c

0800b554 <_init>:
 800b554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b556:	bf00      	nop
 800b558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b55a:	bc08      	pop	{r3}
 800b55c:	469e      	mov	lr, r3
 800b55e:	4770      	bx	lr

0800b560 <_fini>:
 800b560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b562:	bf00      	nop
 800b564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b566:	bc08      	pop	{r3}
 800b568:	469e      	mov	lr, r3
 800b56a:	4770      	bx	lr
