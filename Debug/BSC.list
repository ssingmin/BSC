
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac40  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  0800ae10  0800ae10  0001ae10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800afd4  0800afd4  000200c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800afd4  0800afd4  0001afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800afdc  0800afdc  000200c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800afdc  0800afdc  0001afdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800afe0  0800afe0  0001afe0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  0800afe4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  200000c8  0800b0ac  000200c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000056c  0800b0ac  0002056c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018625  00000000  00000000  000200f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003539  00000000  00000000  0003871d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012b0  00000000  00000000  0003bc58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001188  00000000  00000000  0003cf08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028f39  00000000  00000000  0003e090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000178b6  00000000  00000000  00066fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000faec9  00000000  00000000  0007e87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00179748  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056e8  00000000  00000000  00179798  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800adf8 	.word	0x0800adf8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0800adf8 	.word	0x0800adf8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		init_state();
 8000ef4:	f000 f802 	bl	8000efc <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <init_state>:

    UNLOCK();
    return nbits;
}

void init_state(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000f02:	4b1b      	ldr	r3, [pc, #108]	; (8000f70 <init_state+0x74>)
 8000f04:	f04f 32ff 	mov.w	r2, #4294967295
 8000f08:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000f0a:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <init_state+0x74>)
 8000f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f10:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000f12:	4b17      	ldr	r3, [pc, #92]	; (8000f70 <init_state+0x74>)
 8000f14:	f04f 32ff 	mov.w	r2, #4294967295
 8000f18:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000f1a:	4b15      	ldr	r3, [pc, #84]	; (8000f70 <init_state+0x74>)
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000f22:	4b13      	ldr	r3, [pc, #76]	; (8000f70 <init_state+0x74>)
 8000f24:	f04f 32ff 	mov.w	r2, #4294967295
 8000f28:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000f2a:	4b11      	ldr	r3, [pc, #68]	; (8000f70 <init_state+0x74>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <init_state+0x78>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000f36:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <init_state+0x78>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);//printf("HAL_TIM_Base_Stop_IT\n");  //timer.stop();
 8000f3c:	480e      	ldr	r0, [pc, #56]	; (8000f78 <init_state+0x7c>)
 8000f3e:	f007 f971 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8000f42:	4b0e      	ldr	r3, [pc, #56]	; (8000f7c <init_state+0x80>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000f48:	2300      	movs	r3, #0
 8000f4a:	607b      	str	r3, [r7, #4]
 8000f4c:	e008      	b.n	8000f60 <init_state+0x64>
        data.buffer[i] = 0;
 8000f4e:	4a09      	ldr	r2, [pc, #36]	; (8000f74 <init_state+0x78>)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	3308      	adds	r3, #8
 8000f56:	2200      	movs	r2, #0
 8000f58:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b3f      	cmp	r3, #63	; 0x3f
 8000f64:	d9f3      	bls.n	8000f4e <init_state+0x52>
    }
}
 8000f66:	bf00      	nop
 8000f68:	bf00      	nop
 8000f6a:	3708      	adds	r7, #8
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	2000012c 	.word	0x2000012c
 8000f74:	200000e4 	.word	0x200000e4
 8000f78:	20000450 	.word	0x20000450
 8000f7c:	20000168 	.word	0x20000168

08000f80 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 8000f86:	4b96      	ldr	r3, [pc, #600]	; (80011e0 <isr_fall+0x260>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	2b02      	cmp	r3, #2
 8000f8c:	f000 83cd 	beq.w	800172a <isr_fall+0x7aa>
 8000f90:	2b02      	cmp	r3, #2
 8000f92:	f300 83cc 	bgt.w	800172e <isr_fall+0x7ae>
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d003      	beq.n	8000fa2 <isr_fall+0x22>
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	f000 8224 	beq.w	80013e8 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8000fa0:	e3c5      	b.n	800172e <isr_fall+0x7ae>
            if (work.c1 < 0) {
 8000fa2:	4b8f      	ldr	r3, [pc, #572]	; (80011e0 <isr_fall+0x260>)
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	da07      	bge.n	8000fba <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT\n");  //timer.start();
 8000faa:	488e      	ldr	r0, [pc, #568]	; (80011e4 <isr_fall+0x264>)
 8000fac:	f007 f8c2 	bl	8008134 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8000fb0:	4b8d      	ldr	r3, [pc, #564]	; (80011e8 <isr_fall+0x268>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a8a      	ldr	r2, [pc, #552]	; (80011e0 <isr_fall+0x260>)
 8000fb6:	6053      	str	r3, [r2, #4]
            break;
 8000fb8:	e3bc      	b.n	8001734 <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 8000fba:	4b8b      	ldr	r3, [pc, #556]	; (80011e8 <isr_fall+0x268>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a88      	ldr	r2, [pc, #544]	; (80011e0 <isr_fall+0x260>)
 8000fc0:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 8000fc2:	4b87      	ldr	r3, [pc, #540]	; (80011e0 <isr_fall+0x260>)
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b86      	ldr	r3, [pc, #536]	; (80011e0 <isr_fall+0x260>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 8000fce:	4b84      	ldr	r3, [pc, #528]	; (80011e0 <isr_fall+0x260>)
 8000fd0:	68da      	ldr	r2, [r3, #12]
 8000fd2:	4b83      	ldr	r3, [pc, #524]	; (80011e0 <isr_fall+0x260>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 8000fda:	f240 2332 	movw	r3, #562	; 0x232
 8000fde:	011b      	lsls	r3, r3, #4
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff fab7 	bl	8000554 <__aeabi_i2d>
 8000fe6:	a37a      	add	r3, pc, #488	; (adr r3, 80011d0 <isr_fall+0x250>)
 8000fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fec:	f7ff fb1c 	bl	8000628 <__aeabi_dmul>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	460b      	mov	r3, r1
 8000ff4:	4614      	mov	r4, r2
 8000ff6:	461d      	mov	r5, r3
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff faab 	bl	8000554 <__aeabi_i2d>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4620      	mov	r0, r4
 8001004:	4629      	mov	r1, r5
 8001006:	f7ff fd81 	bl	8000b0c <__aeabi_dcmplt>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d056      	beq.n	80010be <isr_fall+0x13e>
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fa9f 	bl	8000554 <__aeabi_i2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	f240 2332 	movw	r3, #562	; 0x232
 800101e:	011b      	lsls	r3, r3, #4
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fa97 	bl	8000554 <__aeabi_i2d>
 8001026:	a36c      	add	r3, pc, #432	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	f7ff fafc 	bl	8000628 <__aeabi_dmul>
 8001030:	4602      	mov	r2, r0
 8001032:	460b      	mov	r3, r1
 8001034:	4620      	mov	r0, r4
 8001036:	4629      	mov	r1, r5
 8001038:	f7ff fd68 	bl	8000b0c <__aeabi_dcmplt>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d03d      	beq.n	80010be <isr_fall+0x13e>
 8001042:	f240 2332 	movw	r3, #562	; 0x232
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fa83 	bl	8000554 <__aeabi_i2d>
 800104e:	a360      	add	r3, pc, #384	; (adr r3, 80011d0 <isr_fall+0x250>)
 8001050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001054:	f7ff fae8 	bl	8000628 <__aeabi_dmul>
 8001058:	4602      	mov	r2, r0
 800105a:	460b      	mov	r3, r1
 800105c:	4614      	mov	r4, r2
 800105e:	461d      	mov	r5, r3
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff fa77 	bl	8000554 <__aeabi_i2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4620      	mov	r0, r4
 800106c:	4629      	mov	r1, r5
 800106e:	f7ff fd4d 	bl	8000b0c <__aeabi_dcmplt>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d022      	beq.n	80010be <isr_fall+0x13e>
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f7ff fa6b 	bl	8000554 <__aeabi_i2d>
 800107e:	4604      	mov	r4, r0
 8001080:	460d      	mov	r5, r1
 8001082:	f240 2332 	movw	r3, #562	; 0x232
 8001086:	00db      	lsls	r3, r3, #3
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa63 	bl	8000554 <__aeabi_i2d>
 800108e:	a352      	add	r3, pc, #328	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fac8 	bl	8000628 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4620      	mov	r0, r4
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff fd34 	bl	8000b0c <__aeabi_dcmplt>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d009      	beq.n	80010be <isr_fall+0x13e>
                    data.format = NEC;
 80010aa:	4b50      	ldr	r3, [pc, #320]	; (80011ec <isr_fall+0x26c>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80010b0:	4b4b      	ldr	r3, [pc, #300]	; (80011e0 <isr_fall+0x260>)
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80010b6:	4b4d      	ldr	r3, [pc, #308]	; (80011ec <isr_fall+0x26c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	e193      	b.n	80013e6 <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 80010be:	f240 2332 	movw	r3, #562	; 0x232
 80010c2:	011b      	lsls	r3, r3, #4
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff fa45 	bl	8000554 <__aeabi_i2d>
 80010ca:	a341      	add	r3, pc, #260	; (adr r3, 80011d0 <isr_fall+0x250>)
 80010cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d0:	f7ff faaa 	bl	8000628 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4614      	mov	r4, r2
 80010da:	461d      	mov	r5, r3
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff fa39 	bl	8000554 <__aeabi_i2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	4620      	mov	r0, r4
 80010e8:	4629      	mov	r1, r5
 80010ea:	f7ff fd0f 	bl	8000b0c <__aeabi_dcmplt>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d07d      	beq.n	80011f0 <isr_fall+0x270>
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff fa2d 	bl	8000554 <__aeabi_i2d>
 80010fa:	4604      	mov	r4, r0
 80010fc:	460d      	mov	r5, r1
 80010fe:	f240 2332 	movw	r3, #562	; 0x232
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff fa25 	bl	8000554 <__aeabi_i2d>
 800110a:	a333      	add	r3, pc, #204	; (adr r3, 80011d8 <isr_fall+0x258>)
 800110c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001110:	f7ff fa8a 	bl	8000628 <__aeabi_dmul>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4620      	mov	r0, r4
 800111a:	4629      	mov	r1, r5
 800111c:	f7ff fcf6 	bl	8000b0c <__aeabi_dcmplt>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d064      	beq.n	80011f0 <isr_fall+0x270>
 8001126:	f240 2332 	movw	r3, #562	; 0x232
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff fa11 	bl	8000554 <__aeabi_i2d>
 8001132:	a327      	add	r3, pc, #156	; (adr r3, 80011d0 <isr_fall+0x250>)
 8001134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001138:	f7ff fa76 	bl	8000628 <__aeabi_dmul>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4614      	mov	r4, r2
 8001142:	461d      	mov	r5, r3
 8001144:	6838      	ldr	r0, [r7, #0]
 8001146:	f7ff fa05 	bl	8000554 <__aeabi_i2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4620      	mov	r0, r4
 8001150:	4629      	mov	r1, r5
 8001152:	f7ff fcdb 	bl	8000b0c <__aeabi_dcmplt>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d049      	beq.n	80011f0 <isr_fall+0x270>
 800115c:	6838      	ldr	r0, [r7, #0]
 800115e:	f7ff f9f9 	bl	8000554 <__aeabi_i2d>
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f240 2332 	movw	r3, #562	; 0x232
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f1 	bl	8000554 <__aeabi_i2d>
 8001172:	a319      	add	r3, pc, #100	; (adr r3, 80011d8 <isr_fall+0x258>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa56 	bl	8000628 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4620      	mov	r0, r4
 8001182:	4629      	mov	r1, r5
 8001184:	f7ff fcc2 	bl	8000b0c <__aeabi_dcmplt>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d030      	beq.n	80011f0 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 800118e:	4b17      	ldr	r3, [pc, #92]	; (80011ec <isr_fall+0x26c>)
 8001190:	2202      	movs	r2, #2
 8001192:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <isr_fall+0x260>)
 8001196:	2202      	movs	r2, #2
 8001198:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800119a:	4b14      	ldr	r3, [pc, #80]	; (80011ec <isr_fall+0x26c>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 80011a0:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <isr_fall+0x260>)
 80011a2:	f04f 32ff 	mov.w	r2, #4294967295
 80011a6:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80011a8:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <isr_fall+0x260>)
 80011aa:	f04f 32ff 	mov.w	r2, #4294967295
 80011ae:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80011b0:	4b0b      	ldr	r3, [pc, #44]	; (80011e0 <isr_fall+0x260>)
 80011b2:	f04f 32ff 	mov.w	r2, #4294967295
 80011b6:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80011b8:	4b09      	ldr	r3, [pc, #36]	; (80011e0 <isr_fall+0x260>)
 80011ba:	f04f 32ff 	mov.w	r2, #4294967295
 80011be:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80011c0:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <isr_fall+0x260>)
 80011c2:	f04f 32ff 	mov.w	r2, #4294967295
 80011c6:	615a      	str	r2, [r3, #20]
 80011c8:	e10d      	b.n	80013e6 <isr_fall+0x466>
 80011ca:	bf00      	nop
 80011cc:	f3af 8000 	nop.w
 80011d0:	66666666 	.word	0x66666666
 80011d4:	3fe66666 	.word	0x3fe66666
 80011d8:	cccccccd 	.word	0xcccccccd
 80011dc:	3ff4cccc 	.word	0x3ff4cccc
 80011e0:	2000012c 	.word	0x2000012c
 80011e4:	20000450 	.word	0x20000450
 80011e8:	20000168 	.word	0x20000168
 80011ec:	200000e4 	.word	0x200000e4
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 80011f0:	f240 13a9 	movw	r3, #425	; 0x1a9
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff f9ac 	bl	8000554 <__aeabi_i2d>
 80011fc:	a3de      	add	r3, pc, #888	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80011fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001202:	f7ff fa11 	bl	8000628 <__aeabi_dmul>
 8001206:	4602      	mov	r2, r0
 8001208:	460b      	mov	r3, r1
 800120a:	4614      	mov	r4, r2
 800120c:	461d      	mov	r5, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff f9a0 	bl	8000554 <__aeabi_i2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	4620      	mov	r0, r4
 800121a:	4629      	mov	r1, r5
 800121c:	f7ff fc76 	bl	8000b0c <__aeabi_dcmplt>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d056      	beq.n	80012d4 <isr_fall+0x354>
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff f994 	bl	8000554 <__aeabi_i2d>
 800122c:	4604      	mov	r4, r0
 800122e:	460d      	mov	r5, r1
 8001230:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f98c 	bl	8000554 <__aeabi_i2d>
 800123c:	a3d0      	add	r3, pc, #832	; (adr r3, 8001580 <isr_fall+0x600>)
 800123e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001242:	f7ff f9f1 	bl	8000628 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4620      	mov	r0, r4
 800124c:	4629      	mov	r1, r5
 800124e:	f7ff fc5d 	bl	8000b0c <__aeabi_dcmplt>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d03d      	beq.n	80012d4 <isr_fall+0x354>
 8001258:	f240 13a9 	movw	r3, #425	; 0x1a9
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff f978 	bl	8000554 <__aeabi_i2d>
 8001264:	a3c4      	add	r3, pc, #784	; (adr r3, 8001578 <isr_fall+0x5f8>)
 8001266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126a:	f7ff f9dd 	bl	8000628 <__aeabi_dmul>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	4614      	mov	r4, r2
 8001274:	461d      	mov	r5, r3
 8001276:	6838      	ldr	r0, [r7, #0]
 8001278:	f7ff f96c 	bl	8000554 <__aeabi_i2d>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4620      	mov	r0, r4
 8001282:	4629      	mov	r1, r5
 8001284:	f7ff fc42 	bl	8000b0c <__aeabi_dcmplt>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d022      	beq.n	80012d4 <isr_fall+0x354>
 800128e:	6838      	ldr	r0, [r7, #0]
 8001290:	f7ff f960 	bl	8000554 <__aeabi_i2d>
 8001294:	4604      	mov	r4, r0
 8001296:	460d      	mov	r5, r1
 8001298:	f240 13a9 	movw	r3, #425	; 0x1a9
 800129c:	009b      	lsls	r3, r3, #2
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f958 	bl	8000554 <__aeabi_i2d>
 80012a4:	a3b6      	add	r3, pc, #728	; (adr r3, 8001580 <isr_fall+0x600>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4620      	mov	r0, r4
 80012b4:	4629      	mov	r1, r5
 80012b6:	f7ff fc29 	bl	8000b0c <__aeabi_dcmplt>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d009      	beq.n	80012d4 <isr_fall+0x354>
                    data.format = AEHA;
 80012c0:	4bb1      	ldr	r3, [pc, #708]	; (8001588 <isr_fall+0x608>)
 80012c2:	2203      	movs	r2, #3
 80012c4:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80012c6:	4bb1      	ldr	r3, [pc, #708]	; (800158c <isr_fall+0x60c>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80012cc:	4bae      	ldr	r3, [pc, #696]	; (8001588 <isr_fall+0x608>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	e088      	b.n	80013e6 <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 80012d4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012d8:	00db      	lsls	r3, r3, #3
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f93a 	bl	8000554 <__aeabi_i2d>
 80012e0:	a3a5      	add	r3, pc, #660	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff f99f 	bl	8000628 <__aeabi_dmul>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4614      	mov	r4, r2
 80012f0:	461d      	mov	r5, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff f92e 	bl	8000554 <__aeabi_i2d>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4620      	mov	r0, r4
 80012fe:	4629      	mov	r1, r5
 8001300:	f7ff fc04 	bl	8000b0c <__aeabi_dcmplt>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d06a      	beq.n	80013e0 <isr_fall+0x460>
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff f922 	bl	8000554 <__aeabi_i2d>
 8001310:	4604      	mov	r4, r0
 8001312:	460d      	mov	r5, r1
 8001314:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f91a 	bl	8000554 <__aeabi_i2d>
 8001320:	a397      	add	r3, pc, #604	; (adr r3, 8001580 <isr_fall+0x600>)
 8001322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001326:	f7ff f97f 	bl	8000628 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4620      	mov	r0, r4
 8001330:	4629      	mov	r1, r5
 8001332:	f7ff fbeb 	bl	8000b0c <__aeabi_dcmplt>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d051      	beq.n	80013e0 <isr_fall+0x460>
 800133c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff f906 	bl	8000554 <__aeabi_i2d>
 8001348:	a38b      	add	r3, pc, #556	; (adr r3, 8001578 <isr_fall+0x5f8>)
 800134a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800134e:	f7ff f96b 	bl	8000628 <__aeabi_dmul>
 8001352:	4602      	mov	r2, r0
 8001354:	460b      	mov	r3, r1
 8001356:	4614      	mov	r4, r2
 8001358:	461d      	mov	r5, r3
 800135a:	6838      	ldr	r0, [r7, #0]
 800135c:	f7ff f8fa 	bl	8000554 <__aeabi_i2d>
 8001360:	4602      	mov	r2, r0
 8001362:	460b      	mov	r3, r1
 8001364:	4620      	mov	r0, r4
 8001366:	4629      	mov	r1, r5
 8001368:	f7ff fbd0 	bl	8000b0c <__aeabi_dcmplt>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d036      	beq.n	80013e0 <isr_fall+0x460>
 8001372:	6838      	ldr	r0, [r7, #0]
 8001374:	f7ff f8ee 	bl	8000554 <__aeabi_i2d>
 8001378:	4604      	mov	r4, r0
 800137a:	460d      	mov	r5, r1
 800137c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8e6 	bl	8000554 <__aeabi_i2d>
 8001388:	a37d      	add	r3, pc, #500	; (adr r3, 8001580 <isr_fall+0x600>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f94b 	bl	8000628 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4620      	mov	r0, r4
 8001398:	4629      	mov	r1, r5
 800139a:	f7ff fbb7 	bl	8000b0c <__aeabi_dcmplt>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d01d      	beq.n	80013e0 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 80013a4:	4b78      	ldr	r3, [pc, #480]	; (8001588 <isr_fall+0x608>)
 80013a6:	2204      	movs	r2, #4
 80013a8:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 80013aa:	4b78      	ldr	r3, [pc, #480]	; (800158c <isr_fall+0x60c>)
 80013ac:	2202      	movs	r2, #2
 80013ae:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80013b0:	4b75      	ldr	r3, [pc, #468]	; (8001588 <isr_fall+0x608>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 80013b6:	4b75      	ldr	r3, [pc, #468]	; (800158c <isr_fall+0x60c>)
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 80013be:	4b73      	ldr	r3, [pc, #460]	; (800158c <isr_fall+0x60c>)
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 80013c6:	4b71      	ldr	r3, [pc, #452]	; (800158c <isr_fall+0x60c>)
 80013c8:	f04f 32ff 	mov.w	r2, #4294967295
 80013cc:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 80013ce:	4b6f      	ldr	r3, [pc, #444]	; (800158c <isr_fall+0x60c>)
 80013d0:	f04f 32ff 	mov.w	r2, #4294967295
 80013d4:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 80013d6:	4b6d      	ldr	r3, [pc, #436]	; (800158c <isr_fall+0x60c>)
 80013d8:	f04f 32ff 	mov.w	r2, #4294967295
 80013dc:	615a      	str	r2, [r3, #20]
 80013de:	e002      	b.n	80013e6 <isr_fall+0x466>
                    init_state();
 80013e0:	f7ff fd8c 	bl	8000efc <init_state>
            break;
 80013e4:	e1a6      	b.n	8001734 <isr_fall+0x7b4>
 80013e6:	e1a5      	b.n	8001734 <isr_fall+0x7b4>
            if (NEC == data.format) {
 80013e8:	4b67      	ldr	r3, [pc, #412]	; (8001588 <isr_fall+0x608>)
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	f040 80d3 	bne.w	8001598 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80013f2:	4b67      	ldr	r3, [pc, #412]	; (8001590 <isr_fall+0x610>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a65      	ldr	r2, [pc, #404]	; (800158c <isr_fall+0x60c>)
 80013f8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80013fa:	4b64      	ldr	r3, [pc, #400]	; (800158c <isr_fall+0x60c>)
 80013fc:	695a      	ldr	r2, [r3, #20]
 80013fe:	4b63      	ldr	r3, [pc, #396]	; (800158c <isr_fall+0x60c>)
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 8001406:	f240 2232 	movw	r2, #562	; 0x232
 800140a:	4613      	mov	r3, r2
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	4413      	add	r3, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff f89f 	bl	8000554 <__aeabi_i2d>
 8001416:	a358      	add	r3, pc, #352	; (adr r3, 8001578 <isr_fall+0x5f8>)
 8001418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141c:	f7ff f904 	bl	8000628 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4614      	mov	r4, r2
 8001426:	461d      	mov	r5, r3
 8001428:	68b8      	ldr	r0, [r7, #8]
 800142a:	f7ff f893 	bl	8000554 <__aeabi_i2d>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4620      	mov	r0, r4
 8001434:	4629      	mov	r1, r5
 8001436:	f7ff fb69 	bl	8000b0c <__aeabi_dcmplt>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d03a      	beq.n	80014b6 <isr_fall+0x536>
 8001440:	68b8      	ldr	r0, [r7, #8]
 8001442:	f7ff f887 	bl	8000554 <__aeabi_i2d>
 8001446:	4604      	mov	r4, r0
 8001448:	460d      	mov	r5, r1
 800144a:	f240 2232 	movw	r2, #562	; 0x232
 800144e:	4613      	mov	r3, r2
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	4413      	add	r3, r2
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff f87d 	bl	8000554 <__aeabi_i2d>
 800145a:	a349      	add	r3, pc, #292	; (adr r3, 8001580 <isr_fall+0x600>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7ff f8e2 	bl	8000628 <__aeabi_dmul>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4620      	mov	r0, r4
 800146a:	4629      	mov	r1, r5
 800146c:	f7ff fb4e 	bl	8000b0c <__aeabi_dcmplt>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d01f      	beq.n	80014b6 <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001476:	4b44      	ldr	r3, [pc, #272]	; (8001588 <isr_fall+0x608>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	da00      	bge.n	8001480 <isr_fall+0x500>
 800147e:	3307      	adds	r3, #7
 8001480:	10db      	asrs	r3, r3, #3
 8001482:	461a      	mov	r2, r3
 8001484:	4b40      	ldr	r3, [pc, #256]	; (8001588 <isr_fall+0x608>)
 8001486:	4413      	add	r3, r2
 8001488:	7a1b      	ldrb	r3, [r3, #8]
 800148a:	b259      	sxtb	r1, r3
 800148c:	4b3e      	ldr	r3, [pc, #248]	; (8001588 <isr_fall+0x608>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4258      	negs	r0, r3
 8001492:	f003 0307 	and.w	r3, r3, #7
 8001496:	f000 0007 	and.w	r0, r0, #7
 800149a:	bf58      	it	pl
 800149c:	4243      	negpl	r3, r0
 800149e:	2001      	movs	r0, #1
 80014a0:	fa00 f303 	lsl.w	r3, r0, r3
 80014a4:	b25b      	sxtb	r3, r3
 80014a6:	430b      	orrs	r3, r1
 80014a8:	b25b      	sxtb	r3, r3
 80014aa:	b2d9      	uxtb	r1, r3
 80014ac:	4b36      	ldr	r3, [pc, #216]	; (8001588 <isr_fall+0x608>)
 80014ae:	4413      	add	r3, r2
 80014b0:	460a      	mov	r2, r1
 80014b2:	721a      	strb	r2, [r3, #8]
 80014b4:	e052      	b.n	800155c <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 80014b6:	f240 2332 	movw	r3, #562	; 0x232
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7ff f84a 	bl	8000554 <__aeabi_i2d>
 80014c0:	a32d      	add	r3, pc, #180	; (adr r3, 8001578 <isr_fall+0x5f8>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f8af 	bl	8000628 <__aeabi_dmul>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	4614      	mov	r4, r2
 80014d0:	461d      	mov	r5, r3
 80014d2:	68b8      	ldr	r0, [r7, #8]
 80014d4:	f7ff f83e 	bl	8000554 <__aeabi_i2d>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4620      	mov	r0, r4
 80014de:	4629      	mov	r1, r5
 80014e0:	f7ff fb14 	bl	8000b0c <__aeabi_dcmplt>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d038      	beq.n	800155c <isr_fall+0x5dc>
 80014ea:	68b8      	ldr	r0, [r7, #8]
 80014ec:	f7ff f832 	bl	8000554 <__aeabi_i2d>
 80014f0:	4604      	mov	r4, r0
 80014f2:	460d      	mov	r5, r1
 80014f4:	f240 2332 	movw	r3, #562	; 0x232
 80014f8:	4618      	mov	r0, r3
 80014fa:	f7ff f82b 	bl	8000554 <__aeabi_i2d>
 80014fe:	a320      	add	r3, pc, #128	; (adr r3, 8001580 <isr_fall+0x600>)
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f7ff f890 	bl	8000628 <__aeabi_dmul>
 8001508:	4602      	mov	r2, r0
 800150a:	460b      	mov	r3, r1
 800150c:	4620      	mov	r0, r4
 800150e:	4629      	mov	r1, r5
 8001510:	f7ff fafc 	bl	8000b0c <__aeabi_dcmplt>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d020      	beq.n	800155c <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800151a:	4b1b      	ldr	r3, [pc, #108]	; (8001588 <isr_fall+0x608>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b00      	cmp	r3, #0
 8001520:	da00      	bge.n	8001524 <isr_fall+0x5a4>
 8001522:	3307      	adds	r3, #7
 8001524:	10db      	asrs	r3, r3, #3
 8001526:	461a      	mov	r2, r3
 8001528:	4b17      	ldr	r3, [pc, #92]	; (8001588 <isr_fall+0x608>)
 800152a:	4413      	add	r3, r2
 800152c:	7a1b      	ldrb	r3, [r3, #8]
 800152e:	b259      	sxtb	r1, r3
 8001530:	4b15      	ldr	r3, [pc, #84]	; (8001588 <isr_fall+0x608>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	4258      	negs	r0, r3
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	f000 0007 	and.w	r0, r0, #7
 800153e:	bf58      	it	pl
 8001540:	4243      	negpl	r3, r0
 8001542:	2001      	movs	r0, #1
 8001544:	fa00 f303 	lsl.w	r3, r0, r3
 8001548:	b25b      	sxtb	r3, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	400b      	ands	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	4b0c      	ldr	r3, [pc, #48]	; (8001588 <isr_fall+0x608>)
 8001556:	4413      	add	r3, r2
 8001558:	460a      	mov	r2, r1
 800155a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800155c:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <isr_fall+0x608>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	3301      	adds	r3, #1
 8001562:	4a09      	ldr	r2, [pc, #36]	; (8001588 <isr_fall+0x608>)
 8001564:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <isr_fall+0x608>)
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	2b1e      	cmp	r3, #30
 800156c:	f340 80e1 	ble.w	8001732 <isr_fall+0x7b2>
 8001570:	4b08      	ldr	r3, [pc, #32]	; (8001594 <isr_fall+0x614>)
 8001572:	2201      	movs	r2, #1
 8001574:	701a      	strb	r2, [r3, #0]
            break;
 8001576:	e0dc      	b.n	8001732 <isr_fall+0x7b2>
 8001578:	66666666 	.word	0x66666666
 800157c:	3fe66666 	.word	0x3fe66666
 8001580:	cccccccd 	.word	0xcccccccd
 8001584:	3ff4cccc 	.word	0x3ff4cccc
 8001588:	200000e4 	.word	0x200000e4
 800158c:	2000012c 	.word	0x2000012c
 8001590:	20000168 	.word	0x20000168
 8001594:	2000016d 	.word	0x2000016d
            } else if (AEHA == data.format) {
 8001598:	4b6d      	ldr	r3, [pc, #436]	; (8001750 <isr_fall+0x7d0>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b03      	cmp	r3, #3
 800159e:	f040 80bb 	bne.w	8001718 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 80015a2:	4b6c      	ldr	r3, [pc, #432]	; (8001754 <isr_fall+0x7d4>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	4a6c      	ldr	r2, [pc, #432]	; (8001758 <isr_fall+0x7d8>)
 80015a8:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80015aa:	4b6b      	ldr	r3, [pc, #428]	; (8001758 <isr_fall+0x7d8>)
 80015ac:	695a      	ldr	r2, [r3, #20]
 80015ae:	4b6a      	ldr	r3, [pc, #424]	; (8001758 <isr_fall+0x7d8>)
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 80015b6:	f240 12a9 	movw	r2, #425	; 0x1a9
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7fe ffc7 	bl	8000554 <__aeabi_i2d>
 80015c6:	a35e      	add	r3, pc, #376	; (adr r3, 8001740 <isr_fall+0x7c0>)
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f7ff f82c 	bl	8000628 <__aeabi_dmul>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4614      	mov	r4, r2
 80015d6:	461d      	mov	r5, r3
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7fe ffbb 	bl	8000554 <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4620      	mov	r0, r4
 80015e4:	4629      	mov	r1, r5
 80015e6:	f7ff fa91 	bl	8000b0c <__aeabi_dcmplt>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03a      	beq.n	8001666 <isr_fall+0x6e6>
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f7fe ffaf 	bl	8000554 <__aeabi_i2d>
 80015f6:	4604      	mov	r4, r0
 80015f8:	460d      	mov	r5, r1
 80015fa:	f240 12a9 	movw	r2, #425	; 0x1a9
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7fe ffa5 	bl	8000554 <__aeabi_i2d>
 800160a:	a34f      	add	r3, pc, #316	; (adr r3, 8001748 <isr_fall+0x7c8>)
 800160c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001610:	f7ff f80a 	bl	8000628 <__aeabi_dmul>
 8001614:	4602      	mov	r2, r0
 8001616:	460b      	mov	r3, r1
 8001618:	4620      	mov	r0, r4
 800161a:	4629      	mov	r1, r5
 800161c:	f7ff fa76 	bl	8000b0c <__aeabi_dcmplt>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d01f      	beq.n	8001666 <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001626:	4b4a      	ldr	r3, [pc, #296]	; (8001750 <isr_fall+0x7d0>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	da00      	bge.n	8001630 <isr_fall+0x6b0>
 800162e:	3307      	adds	r3, #7
 8001630:	10db      	asrs	r3, r3, #3
 8001632:	461a      	mov	r2, r3
 8001634:	4b46      	ldr	r3, [pc, #280]	; (8001750 <isr_fall+0x7d0>)
 8001636:	4413      	add	r3, r2
 8001638:	7a1b      	ldrb	r3, [r3, #8]
 800163a:	b259      	sxtb	r1, r3
 800163c:	4b44      	ldr	r3, [pc, #272]	; (8001750 <isr_fall+0x7d0>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	4258      	negs	r0, r3
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	f000 0007 	and.w	r0, r0, #7
 800164a:	bf58      	it	pl
 800164c:	4243      	negpl	r3, r0
 800164e:	2001      	movs	r0, #1
 8001650:	fa00 f303 	lsl.w	r3, r0, r3
 8001654:	b25b      	sxtb	r3, r3
 8001656:	430b      	orrs	r3, r1
 8001658:	b25b      	sxtb	r3, r3
 800165a:	b2d9      	uxtb	r1, r3
 800165c:	4b3c      	ldr	r3, [pc, #240]	; (8001750 <isr_fall+0x7d0>)
 800165e:	4413      	add	r3, r2
 8001660:	460a      	mov	r2, r1
 8001662:	721a      	strb	r2, [r3, #8]
 8001664:	e052      	b.n	800170c <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 8001666:	f240 13a9 	movw	r3, #425	; 0x1a9
 800166a:	4618      	mov	r0, r3
 800166c:	f7fe ff72 	bl	8000554 <__aeabi_i2d>
 8001670:	a333      	add	r3, pc, #204	; (adr r3, 8001740 <isr_fall+0x7c0>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe ffd7 	bl	8000628 <__aeabi_dmul>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4614      	mov	r4, r2
 8001680:	461d      	mov	r5, r3
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7fe ff66 	bl	8000554 <__aeabi_i2d>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7ff fa3c 	bl	8000b0c <__aeabi_dcmplt>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d038      	beq.n	800170c <isr_fall+0x78c>
 800169a:	68f8      	ldr	r0, [r7, #12]
 800169c:	f7fe ff5a 	bl	8000554 <__aeabi_i2d>
 80016a0:	4604      	mov	r4, r0
 80016a2:	460d      	mov	r5, r1
 80016a4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe ff53 	bl	8000554 <__aeabi_i2d>
 80016ae:	a326      	add	r3, pc, #152	; (adr r3, 8001748 <isr_fall+0x7c8>)
 80016b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b4:	f7fe ffb8 	bl	8000628 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4620      	mov	r0, r4
 80016be:	4629      	mov	r1, r5
 80016c0:	f7ff fa24 	bl	8000b0c <__aeabi_dcmplt>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d020      	beq.n	800170c <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <isr_fall+0x7d0>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	da00      	bge.n	80016d4 <isr_fall+0x754>
 80016d2:	3307      	adds	r3, #7
 80016d4:	10db      	asrs	r3, r3, #3
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b1d      	ldr	r3, [pc, #116]	; (8001750 <isr_fall+0x7d0>)
 80016da:	4413      	add	r3, r2
 80016dc:	7a1b      	ldrb	r3, [r3, #8]
 80016de:	b259      	sxtb	r1, r3
 80016e0:	4b1b      	ldr	r3, [pc, #108]	; (8001750 <isr_fall+0x7d0>)
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	4258      	negs	r0, r3
 80016e6:	f003 0307 	and.w	r3, r3, #7
 80016ea:	f000 0007 	and.w	r0, r0, #7
 80016ee:	bf58      	it	pl
 80016f0:	4243      	negpl	r3, r0
 80016f2:	2001      	movs	r0, #1
 80016f4:	fa00 f303 	lsl.w	r3, r0, r3
 80016f8:	b25b      	sxtb	r3, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	400b      	ands	r3, r1
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	4b12      	ldr	r3, [pc, #72]	; (8001750 <isr_fall+0x7d0>)
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 800170c:	4b10      	ldr	r3, [pc, #64]	; (8001750 <isr_fall+0x7d0>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	3301      	adds	r3, #1
 8001712:	4a0f      	ldr	r2, [pc, #60]	; (8001750 <isr_fall+0x7d0>)
 8001714:	6053      	str	r3, [r2, #4]
            break;
 8001716:	e00c      	b.n	8001732 <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 8001718:	4b0d      	ldr	r3, [pc, #52]	; (8001750 <isr_fall+0x7d0>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b05      	cmp	r3, #5
 800171e:	d108      	bne.n	8001732 <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001720:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <isr_fall+0x7d4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a0c      	ldr	r2, [pc, #48]	; (8001758 <isr_fall+0x7d8>)
 8001726:	6113      	str	r3, [r2, #16]
            break;
 8001728:	e003      	b.n	8001732 <isr_fall+0x7b2>
            break;
 800172a:	bf00      	nop
 800172c:	e002      	b.n	8001734 <isr_fall+0x7b4>
            break;
 800172e:	bf00      	nop
 8001730:	e000      	b.n	8001734 <isr_fall+0x7b4>
            break;
 8001732:	bf00      	nop
    }
    UNLOCK();
}
 8001734:	bf00      	nop
 8001736:	3710      	adds	r7, #16
 8001738:	46bd      	mov	sp, r7
 800173a:	bdb0      	pop	{r4, r5, r7, pc}
 800173c:	f3af 8000 	nop.w
 8001740:	66666666 	.word	0x66666666
 8001744:	3fe66666 	.word	0x3fe66666
 8001748:	cccccccd 	.word	0xcccccccd
 800174c:	3ff4cccc 	.word	0x3ff4cccc
 8001750:	200000e4 	.word	0x200000e4
 8001754:	20000168 	.word	0x20000168
 8001758:	2000012c 	.word	0x2000012c
 800175c:	00000000 	.word	0x00000000

08001760 <isr_rise>:

void isr_rise(void) {
 8001760:	b5b0      	push	{r4, r5, r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 8001766:	4ba4      	ldr	r3, [pc, #656]	; (80019f8 <isr_rise+0x298>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b02      	cmp	r3, #2
 800176c:	f000 812e 	beq.w	80019cc <isr_rise+0x26c>
 8001770:	2b02      	cmp	r3, #2
 8001772:	f300 812d 	bgt.w	80019d0 <isr_rise+0x270>
 8001776:	2b00      	cmp	r3, #0
 8001778:	d002      	beq.n	8001780 <isr_rise+0x20>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d058      	beq.n	8001830 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 800177e:	e127      	b.n	80019d0 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001780:	4b9d      	ldr	r3, [pc, #628]	; (80019f8 <isr_rise+0x298>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	db50      	blt.n	800182a <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001788:	4b9c      	ldr	r3, [pc, #624]	; (80019fc <isr_rise+0x29c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a9a      	ldr	r2, [pc, #616]	; (80019f8 <isr_rise+0x298>)
 800178e:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001790:	4b99      	ldr	r3, [pc, #612]	; (80019f8 <isr_rise+0x298>)
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b98      	ldr	r3, [pc, #608]	; (80019f8 <isr_rise+0x298>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 800179c:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fed6 	bl	8000554 <__aeabi_i2d>
 80017a8:	a38f      	add	r3, pc, #572	; (adr r3, 80019e8 <isr_rise+0x288>)
 80017aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ae:	f7fe ff3b 	bl	8000628 <__aeabi_dmul>
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4614      	mov	r4, r2
 80017b8:	461d      	mov	r5, r3
 80017ba:	6838      	ldr	r0, [r7, #0]
 80017bc:	f7fe feca 	bl	8000554 <__aeabi_i2d>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4620      	mov	r0, r4
 80017c6:	4629      	mov	r1, r5
 80017c8:	f7ff f9a0 	bl	8000b0c <__aeabi_dcmplt>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d022      	beq.n	8001818 <isr_rise+0xb8>
 80017d2:	6838      	ldr	r0, [r7, #0]
 80017d4:	f7fe febe 	bl	8000554 <__aeabi_i2d>
 80017d8:	4604      	mov	r4, r0
 80017da:	460d      	mov	r5, r1
 80017dc:	f44f 7316 	mov.w	r3, #600	; 0x258
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe feb6 	bl	8000554 <__aeabi_i2d>
 80017e8:	a381      	add	r3, pc, #516	; (adr r3, 80019f0 <isr_rise+0x290>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	f7fe ff1b 	bl	8000628 <__aeabi_dmul>
 80017f2:	4602      	mov	r2, r0
 80017f4:	460b      	mov	r3, r1
 80017f6:	4620      	mov	r0, r4
 80017f8:	4629      	mov	r1, r5
 80017fa:	f7ff f987 	bl	8000b0c <__aeabi_dcmplt>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d009      	beq.n	8001818 <isr_rise+0xb8>
                    data.format = SONY;
 8001804:	4b7e      	ldr	r3, [pc, #504]	; (8001a00 <isr_rise+0x2a0>)
 8001806:	2205      	movs	r2, #5
 8001808:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 800180a:	4b7b      	ldr	r3, [pc, #492]	; (80019f8 <isr_rise+0x298>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001810:	4b7b      	ldr	r3, [pc, #492]	; (8001a00 <isr_rise+0x2a0>)
 8001812:	2200      	movs	r2, #0
 8001814:	605a      	str	r2, [r3, #4]
            break;
 8001816:	e0dd      	b.n	80019d4 <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 8001818:	4b7a      	ldr	r3, [pc, #488]	; (8001a04 <isr_rise+0x2a4>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	683a      	ldr	r2, [r7, #0]
 800181e:	429a      	cmp	r2, r3
 8001820:	f280 80d8 	bge.w	80019d4 <isr_rise+0x274>
                        init_state();
 8001824:	f7ff fb6a 	bl	8000efc <init_state>
            break;
 8001828:	e0d4      	b.n	80019d4 <isr_rise+0x274>
                init_state();
 800182a:	f7ff fb67 	bl	8000efc <init_state>
            break;
 800182e:	e0d1      	b.n	80019d4 <isr_rise+0x274>
            if (NEC == data.format) {
 8001830:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <isr_rise+0x2a0>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d104      	bne.n	8001842 <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 8001838:	4b70      	ldr	r3, [pc, #448]	; (80019fc <isr_rise+0x29c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <isr_rise+0x298>)
 800183e:	6113      	str	r3, [r2, #16]
            break;
 8001840:	e0ca      	b.n	80019d8 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 8001842:	4b6f      	ldr	r3, [pc, #444]	; (8001a00 <isr_rise+0x2a0>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	2b03      	cmp	r3, #3
 8001848:	d104      	bne.n	8001854 <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 800184a:	4b6c      	ldr	r3, [pc, #432]	; (80019fc <isr_rise+0x29c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a6a      	ldr	r2, [pc, #424]	; (80019f8 <isr_rise+0x298>)
 8001850:	6113      	str	r3, [r2, #16]
            break;
 8001852:	e0c1      	b.n	80019d8 <isr_rise+0x278>
            } else if (SONY == data.format) {
 8001854:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <isr_rise+0x2a0>)
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	2b05      	cmp	r3, #5
 800185a:	f040 80bd 	bne.w	80019d8 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800185e:	4b67      	ldr	r3, [pc, #412]	; (80019fc <isr_rise+0x29c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a65      	ldr	r2, [pc, #404]	; (80019f8 <isr_rise+0x298>)
 8001864:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 8001866:	4b64      	ldr	r3, [pc, #400]	; (80019f8 <isr_rise+0x298>)
 8001868:	695a      	ldr	r2, [r3, #20]
 800186a:	4b63      	ldr	r3, [pc, #396]	; (80019f8 <isr_rise+0x298>)
 800186c:	691b      	ldr	r3, [r3, #16]
 800186e:	1ad3      	subs	r3, r2, r3
 8001870:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 8001872:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe fe6b 	bl	8000554 <__aeabi_i2d>
 800187e:	a35a      	add	r3, pc, #360	; (adr r3, 80019e8 <isr_rise+0x288>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fed0 	bl	8000628 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	f7fe fe5f 	bl	8000554 <__aeabi_i2d>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	f7ff f935 	bl	8000b0c <__aeabi_dcmplt>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d038      	beq.n	800191a <isr_rise+0x1ba>
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7fe fe53 	bl	8000554 <__aeabi_i2d>
 80018ae:	4604      	mov	r4, r0
 80018b0:	460d      	mov	r5, r1
 80018b2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe4b 	bl	8000554 <__aeabi_i2d>
 80018be:	a34c      	add	r3, pc, #304	; (adr r3, 80019f0 <isr_rise+0x290>)
 80018c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c4:	f7fe feb0 	bl	8000628 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4620      	mov	r0, r4
 80018ce:	4629      	mov	r1, r5
 80018d0:	f7ff f91c 	bl	8000b0c <__aeabi_dcmplt>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d01f      	beq.n	800191a <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80018da:	4b49      	ldr	r3, [pc, #292]	; (8001a00 <isr_rise+0x2a0>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	da00      	bge.n	80018e4 <isr_rise+0x184>
 80018e2:	3307      	adds	r3, #7
 80018e4:	10db      	asrs	r3, r3, #3
 80018e6:	461a      	mov	r2, r3
 80018e8:	4b45      	ldr	r3, [pc, #276]	; (8001a00 <isr_rise+0x2a0>)
 80018ea:	4413      	add	r3, r2
 80018ec:	7a1b      	ldrb	r3, [r3, #8]
 80018ee:	b259      	sxtb	r1, r3
 80018f0:	4b43      	ldr	r3, [pc, #268]	; (8001a00 <isr_rise+0x2a0>)
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	4258      	negs	r0, r3
 80018f6:	f003 0307 	and.w	r3, r3, #7
 80018fa:	f000 0007 	and.w	r0, r0, #7
 80018fe:	bf58      	it	pl
 8001900:	4243      	negpl	r3, r0
 8001902:	2001      	movs	r0, #1
 8001904:	fa00 f303 	lsl.w	r3, r0, r3
 8001908:	b25b      	sxtb	r3, r3
 800190a:	430b      	orrs	r3, r1
 800190c:	b25b      	sxtb	r3, r3
 800190e:	b2d9      	uxtb	r1, r3
 8001910:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <isr_rise+0x2a0>)
 8001912:	4413      	add	r3, r2
 8001914:	460a      	mov	r2, r1
 8001916:	721a      	strb	r2, [r3, #8]
 8001918:	e052      	b.n	80019c0 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 800191a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe18 	bl	8000554 <__aeabi_i2d>
 8001924:	a330      	add	r3, pc, #192	; (adr r3, 80019e8 <isr_rise+0x288>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe7d 	bl	8000628 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4614      	mov	r4, r2
 8001934:	461d      	mov	r5, r3
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f7fe fe0c 	bl	8000554 <__aeabi_i2d>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4620      	mov	r0, r4
 8001942:	4629      	mov	r1, r5
 8001944:	f7ff f8e2 	bl	8000b0c <__aeabi_dcmplt>
 8001948:	4603      	mov	r3, r0
 800194a:	2b00      	cmp	r3, #0
 800194c:	d038      	beq.n	80019c0 <isr_rise+0x260>
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fe00 	bl	8000554 <__aeabi_i2d>
 8001954:	4604      	mov	r4, r0
 8001956:	460d      	mov	r5, r1
 8001958:	f44f 7316 	mov.w	r3, #600	; 0x258
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdf9 	bl	8000554 <__aeabi_i2d>
 8001962:	a323      	add	r3, pc, #140	; (adr r3, 80019f0 <isr_rise+0x290>)
 8001964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001968:	f7fe fe5e 	bl	8000628 <__aeabi_dmul>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4620      	mov	r0, r4
 8001972:	4629      	mov	r1, r5
 8001974:	f7ff f8ca 	bl	8000b0c <__aeabi_dcmplt>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d020      	beq.n	80019c0 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 800197e:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <isr_rise+0x2a0>)
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	da00      	bge.n	8001988 <isr_rise+0x228>
 8001986:	3307      	adds	r3, #7
 8001988:	10db      	asrs	r3, r3, #3
 800198a:	461a      	mov	r2, r3
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <isr_rise+0x2a0>)
 800198e:	4413      	add	r3, r2
 8001990:	7a1b      	ldrb	r3, [r3, #8]
 8001992:	b259      	sxtb	r1, r3
 8001994:	4b1a      	ldr	r3, [pc, #104]	; (8001a00 <isr_rise+0x2a0>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	4258      	negs	r0, r3
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	f000 0007 	and.w	r0, r0, #7
 80019a2:	bf58      	it	pl
 80019a4:	4243      	negpl	r3, r0
 80019a6:	2001      	movs	r0, #1
 80019a8:	fa00 f303 	lsl.w	r3, r0, r3
 80019ac:	b25b      	sxtb	r3, r3
 80019ae:	43db      	mvns	r3, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	400b      	ands	r3, r1
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <isr_rise+0x2a0>)
 80019ba:	4413      	add	r3, r2
 80019bc:	460a      	mov	r2, r1
 80019be:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80019c0:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <isr_rise+0x2a0>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	3301      	adds	r3, #1
 80019c6:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <isr_rise+0x2a0>)
 80019c8:	6053      	str	r3, [r2, #4]
            break;
 80019ca:	e005      	b.n	80019d8 <isr_rise+0x278>
            break;
 80019cc:	bf00      	nop
 80019ce:	e004      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d0:	bf00      	nop
 80019d2:	e002      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d4:	bf00      	nop
 80019d6:	e000      	b.n	80019da <isr_rise+0x27a>
            break;
 80019d8:	bf00      	nop
    }
    UNLOCK();
}
 80019da:	bf00      	nop
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bdb0      	pop	{r4, r5, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	f3af 8000 	nop.w
 80019e8:	66666666 	.word	0x66666666
 80019ec:	3fe66666 	.word	0x3fe66666
 80019f0:	cccccccd 	.word	0xcccccccd
 80019f4:	3ff4cccc 	.word	0x3ff4cccc
 80019f8:	2000012c 	.word	0x2000012c
 80019fc:	20000168 	.word	0x20000168
 8001a00:	200000e4 	.word	0x200000e4
 8001a04:	0800aef0 	.word	0x0800aef0

08001a08 <isr_timeout>:

void isr_timeout(void) {
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <isr_timeout+0x50>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d11f      	bne.n	8001a54 <isr_timeout+0x4c>
        work.state = Received;
 8001a14:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <isr_timeout+0x50>)
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
 8001a1a:	2028      	movs	r0, #40	; 0x28
 8001a1c:	f004 fffd 	bl	8006a1a <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <isr_timeout+0x54>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <isr_timeout+0x58>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001a2c:	4b0a      	ldr	r3, [pc, #40]	; (8001a58 <isr_timeout+0x50>)
 8001a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a32:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001a34:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <isr_timeout+0x50>)
 8001a36:	f04f 32ff 	mov.w	r2, #4294967295
 8001a3a:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <isr_timeout+0x50>)
 8001a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a42:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001a44:	4b04      	ldr	r3, [pc, #16]	; (8001a58 <isr_timeout+0x50>)
 8001a46:	f04f 32ff 	mov.w	r2, #4294967295
 8001a4a:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001a4c:	4b02      	ldr	r3, [pc, #8]	; (8001a58 <isr_timeout+0x50>)
 8001a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8001a52:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	2000012c 	.word	0x2000012c
 8001a5c:	2000016d 	.word	0x2000016d
 8001a60:	2000016c 	.word	0x2000016c

08001a64 <HAL_TIM_PeriodElapsedCallback>:

uint8_t inhome=0;
int ir_count_idle = 0;

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)//uss timer, 100khz
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a39      	ldr	r2, [pc, #228]	; (8001b58 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d104      	bne.n	8001a80 <HAL_TIM_PeriodElapsedCallback+0x1c>
  {
	  us_Tick++;
 8001a76:	4b39      	ldr	r3, [pc, #228]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	4a37      	ldr	r2, [pc, #220]	; (8001b5c <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001a7e:	6013      	str	r3, [r2, #0]
//	  if(us_Tick>0xffff0000){us_Tick=0;}

  }

  if(htim->Instance == TIM6)//system timer, 100hz
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a36      	ldr	r2, [pc, #216]	; (8001b60 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d127      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x76>
  {
	  gTick++;
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	4a34      	ldr	r2, [pc, #208]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a92:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001a94:	4b33      	ldr	r3, [pc, #204]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001a96:	6819      	ldr	r1, [r3, #0]
 8001a98:	4b33      	ldr	r3, [pc, #204]	; (8001b68 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	1aca      	subs	r2, r1, r3
 8001aaa:	2a00      	cmp	r2, #0
 8001aac:	d104      	bne.n	8001ab8 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001aae:	4b2f      	ldr	r3, [pc, #188]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	3301      	adds	r3, #1
 8001ab4:	4a2d      	ldr	r2, [pc, #180]	; (8001b6c <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001ab6:	6013      	str	r3, [r2, #0]
	  if((gTick%50) == 0){Tick_500ms++;}
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	4b2c      	ldr	r3, [pc, #176]	; (8001b70 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001abe:	fba3 1302 	umull	r1, r3, r3, r2
 8001ac2:	091b      	lsrs	r3, r3, #4
 8001ac4:	2132      	movs	r1, #50	; 0x32
 8001ac6:	fb01 f303 	mul.w	r3, r1, r3
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d104      	bne.n	8001ada <HAL_TIM_PeriodElapsedCallback+0x76>
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	4a27      	ldr	r2, [pc, #156]	; (8001b74 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001ad8:	6013      	str	r3, [r2, #0]

  }

  if(htim->Instance == TIM7)//uss timer, 1khz
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a26      	ldr	r2, [pc, #152]	; (8001b78 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d10c      	bne.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
	  USS_tick++;
 8001ae4:	4b25      	ldr	r3, [pc, #148]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	4a24      	ldr	r2, [pc, #144]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001aec:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8001aee:	4b23      	ldr	r3, [pc, #140]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001af6:	d902      	bls.n	8001afe <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001af8:	4b20      	ldr	r3, [pc, #128]	; (8001b7c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)//uss timer, 1779hz
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a1f      	ldr	r2, [pc, #124]	; (8001b80 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d118      	bne.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0xd6>
  {
	  if(TIR_setData_flag){tick();}
 8001b08:	4b1e      	ldr	r3, [pc, #120]	; (8001b84 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_TIM_PeriodElapsedCallback+0xb0>
 8001b10:	f000 ffc6 	bl	8002aa0 <tick>
	  if(isr_timeout_flag){isr_timeout_counter++;}
 8001b14:	4b1c      	ldr	r3, [pc, #112]	; (8001b88 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3301      	adds	r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b19      	ldr	r3, [pc, #100]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b26:	701a      	strb	r2, [r3, #0]

	  if(isr_timeout_counter>1)//횟수 수정할 것
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d904      	bls.n	8001b3a <HAL_TIM_PeriodElapsedCallback+0xd6>
	  {
		  isr_timeout_counter = 0;
 8001b30:	4b16      	ldr	r3, [pc, #88]	; (8001b8c <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 8001b36:	f7ff ff67 	bl	8001a08 <isr_timeout>
	  }
  }

  if(htim->Instance == TIM14)//IR NEC timer, 1Mhz
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a14      	ldr	r2, [pc, #80]	; (8001b90 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d104      	bne.n	8001b4e <HAL_TIM_PeriodElapsedCallback+0xea>
  {
	  IR_NEC_Tick+=4;
 8001b44:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001b4c:	6013      	str	r3, [r2, #0]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40000c00 	.word	0x40000c00
 8001b5c:	20000144 	.word	0x20000144
 8001b60:	40001000 	.word	0x40001000
 8001b64:	20000148 	.word	0x20000148
 8001b68:	cccccccd 	.word	0xcccccccd
 8001b6c:	20000150 	.word	0x20000150
 8001b70:	51eb851f 	.word	0x51eb851f
 8001b74:	20000154 	.word	0x20000154
 8001b78:	40001400 	.word	0x40001400
 8001b7c:	20000554 	.word	0x20000554
 8001b80:	40014000 	.word	0x40014000
 8001b84:	20000164 	.word	0x20000164
 8001b88:	2000016d 	.word	0x2000016d
 8001b8c:	2000016c 	.word	0x2000016c
 8001b90:	40002000 	.word	0x40002000
 8001b94:	20000168 	.word	0x20000168

08001b98 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001ba2:	88fb      	ldrh	r3, [r7, #6]
 8001ba4:	2b40      	cmp	r3, #64	; 0x40
 8001ba6:	d107      	bne.n	8001bb8 <HAL_GPIO_EXTI_Callback+0x20>
    	USS_end[0] = us_Tick;
 8001ba8:	4b28      	ldr	r3, [pc, #160]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4b28      	ldr	r3, [pc, #160]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bb0:	601a      	str	r2, [r3, #0]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bb2:	4828      	ldr	r0, [pc, #160]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bb4:	f006 fb36 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data2_Pin) {
 8001bb8:	88fb      	ldrh	r3, [r7, #6]
 8001bba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bbe:	d107      	bne.n	8001bd0 <HAL_GPIO_EXTI_Callback+0x38>
    	USS_end[1] = us_Tick;
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bc8:	605a      	str	r2, [r3, #4]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bca:	4822      	ldr	r0, [pc, #136]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bcc:	f006 fb2a 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data3_Pin) {
 8001bd0:	88fb      	ldrh	r3, [r7, #6]
 8001bd2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bd6:	d102      	bne.n	8001bde <HAL_GPIO_EXTI_Callback+0x46>
    	//USS_end[2] = us_Tick;
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bd8:	481e      	ldr	r0, [pc, #120]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bda:	f006 fb23 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data4_Pin) {
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b04      	cmp	r3, #4
 8001be2:	d107      	bne.n	8001bf4 <HAL_GPIO_EXTI_Callback+0x5c>
    	USS_end[3] = us_Tick;
 8001be4:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	461a      	mov	r2, r3
 8001bea:	4b19      	ldr	r3, [pc, #100]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001bec:	60da      	str	r2, [r3, #12]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001bee:	4819      	ldr	r0, [pc, #100]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001bf0:	f006 fb18 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data5_Pin) {
 8001bf4:	88fb      	ldrh	r3, [r7, #6]
 8001bf6:	2b80      	cmp	r3, #128	; 0x80
 8001bf8:	d107      	bne.n	8001c0a <HAL_GPIO_EXTI_Callback+0x72>
    	USS_end[4] = us_Tick;
 8001bfa:	4b14      	ldr	r3, [pc, #80]	; (8001c4c <HAL_GPIO_EXTI_Callback+0xb4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <HAL_GPIO_EXTI_Callback+0xb8>)
 8001c02:	611a      	str	r2, [r3, #16]
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001c04:	4813      	ldr	r0, [pc, #76]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c06:	f006 fb0d 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }

    if(GPIO_Pin == USS_Data6_Pin) {
 8001c0a:	88fb      	ldrh	r3, [r7, #6]
 8001c0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c10:	d102      	bne.n	8001c18 <HAL_GPIO_EXTI_Callback+0x80>
    	//USS_end[5] = us_Tick;
    	HAL_TIM_Base_Stop_IT (&htim5);//uss timer, 200khz
 8001c12:	4810      	ldr	r0, [pc, #64]	; (8001c54 <HAL_GPIO_EXTI_Callback+0xbc>)
 8001c14:	f006 fb06 	bl	8008224 <HAL_TIM_Base_Stop_IT>
    }



    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d111      	bne.n	8001c42 <HAL_GPIO_EXTI_Callback+0xaa>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){	isr_rise(); }//high edge
 8001c1e:	2101      	movs	r1, #1
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c22:	f005 f8c1 	bl	8006da8 <HAL_GPIO_ReadPin>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <HAL_GPIO_EXTI_Callback+0x98>
 8001c2c:	f7ff fd98 	bl	8001760 <isr_rise>
             if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ isr_fall();}//low edge
 8001c30:	2101      	movs	r1, #1
 8001c32:	4809      	ldr	r0, [pc, #36]	; (8001c58 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001c34:	f005 f8b8 	bl	8006da8 <HAL_GPIO_ReadPin>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_GPIO_EXTI_Callback+0xaa>
 8001c3e:	f7ff f99f 	bl	8000f80 <isr_fall>
        }
}
 8001c42:	bf00      	nop
 8001c44:	3708      	adds	r7, #8
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	20000144 	.word	0x20000144
 8001c50:	2000053c 	.word	0x2000053c
 8001c54:	20000320 	.word	0x20000320
 8001c58:	40021000 	.word	0x40021000

08001c5c <parsePmm>:
//        can->reset();
    sendCan(5001, packit, 8, 1);
}

void parsePmm(uint8_t *msg)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3307      	adds	r3, #7
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <parsePmm+0x5c>)
 8001c6e:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	3306      	adds	r3, #6
 8001c74:	781a      	ldrb	r2, [r3, #0]
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <parsePmm+0x60>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	09d2      	lsrs	r2, r2, #7
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	3306      	adds	r3, #6
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	119b      	asrs	r3, r3, #6
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <parsePmm+0x60>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f002 0201 	and.w	r2, r2, #1
 8001c92:	b2d2      	uxtb	r2, r2
 8001c94:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	3306      	adds	r3, #6
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	115b      	asrs	r3, r3, #5
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <parsePmm+0x60>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f002 0201 	and.w	r2, r2, #1
 8001ca8:	b2d2      	uxtb	r2, r2
 8001caa:	745a      	strb	r2, [r3, #17]
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr
 8001cb8:	2000019c 	.word	0x2000019c
 8001cbc:	20000198 	.word	0x20000198

08001cc0 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e012      	b.n	8001cf4 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	3307      	adds	r3, #7
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	fa42 f303 	asr.w	r3, r2, r3
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	b2d9      	uxtb	r1, r3
 8001ce4:	4a0a      	ldr	r2, [pc, #40]	; (8001d10 <parseTop+0x50>)
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	460a      	mov	r2, r1
 8001cec:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60fb      	str	r3, [r7, #12]
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2b05      	cmp	r3, #5
 8001cf8:	dde9      	ble.n	8001cce <parseTop+0xe>
    touch = msg[6];
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	799a      	ldrb	r2, [r3, #6]
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <parseTop+0x54>)
 8001d00:	701a      	strb	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000190 	.word	0x20000190
 8001d14:	2000018d 	.word	0x2000018d

08001d18 <parseState>:


void parseState(uint8_t *msg)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3307      	adds	r3, #7
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <parseState+0x78>)
 8001d2a:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3305      	adds	r3, #5
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	09db      	lsrs	r3, r3, #7
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <parseState+0x7c>)
 8001d38:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	3305      	adds	r3, #5
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	119b      	asrs	r3, r3, #6
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	f003 0301 	and.w	r3, r3, #1
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4b13      	ldr	r3, [pc, #76]	; (8001d98 <parseState+0x80>)
 8001d4c:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3304      	adds	r3, #4
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	09db      	lsrs	r3, r3, #7
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	4b10      	ldr	r3, [pc, #64]	; (8001d9c <parseState+0x84>)
 8001d5a:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	119b      	asrs	r3, r3, #6
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	f003 0301 	and.w	r3, r3, #1
 8001d6a:	b2da      	uxtb	r2, r3
 8001d6c:	4b0c      	ldr	r3, [pc, #48]	; (8001da0 <parseState+0x88>)
 8001d6e:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3304      	adds	r3, #4
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	115b      	asrs	r3, r3, #5
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	f003 0301 	and.w	r3, r3, #1
 8001d7e:	b2da      	uxtb	r2, r3
 8001d80:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <parseState+0x8c>)
 8001d82:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001d84:	bf00      	nop
 8001d86:	370c      	adds	r7, #12
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr
 8001d90:	20000184 	.word	0x20000184
 8001d94:	20000188 	.word	0x20000188
 8001d98:	20000189 	.word	0x20000189
 8001d9c:	2000018a 	.word	0x2000018a
 8001da0:	2000018b 	.word	0x2000018b
 8001da4:	2000018c 	.word	0x2000018c

08001da8 <controlMotor>:

void controlMotor()
{
 8001da8:	b598      	push	{r3, r4, r7, lr}
 8001daa:	af00      	add	r7, sp, #0
    static int count = 0;
    printf("motor_sw=%d, motor_break=%d\n", motor_sw, motor_break);
 8001dac:	4b41      	ldr	r3, [pc, #260]	; (8001eb4 <controlMotor+0x10c>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	4b41      	ldr	r3, [pc, #260]	; (8001eb8 <controlMotor+0x110>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	461a      	mov	r2, r3
 8001db8:	4840      	ldr	r0, [pc, #256]	; (8001ebc <controlMotor+0x114>)
 8001dba:	f008 f819 	bl	8009df0 <iprintf>
    if(motor_sw)
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <controlMotor+0x10c>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d06c      	beq.n	8001ea0 <controlMotor+0xf8>
    {
        if(motor_disable_flag)
 8001dc6:	4b3e      	ldr	r3, [pc, #248]	; (8001ec0 <controlMotor+0x118>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d007      	beq.n	8001dde <controlMotor+0x36>
        {printf("enable\n");
 8001dce:	483d      	ldr	r0, [pc, #244]	; (8001ec4 <controlMotor+0x11c>)
 8001dd0:	f008 f894 	bl	8009efc <puts>
            enable();
 8001dd4:	f002 f9ea 	bl	80041ac <enable>
            motor_disable_flag = 0;
 8001dd8:	4b39      	ldr	r3, [pc, #228]	; (8001ec0 <controlMotor+0x118>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001dde:	4b36      	ldr	r3, [pc, #216]	; (8001eb8 <controlMotor+0x110>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d121      	bne.n	8001e2a <controlMotor+0x82>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001de6:	4b38      	ldr	r3, [pc, #224]	; (8001ec8 <controlMotor+0x120>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dee:	4610      	mov	r0, r2
 8001df0:	4619      	mov	r1, r3
 8001df2:	f7fe feb3 	bl	8000b5c <__aeabi_d2iz>
 8001df6:	4603      	mov	r3, r0
 8001df8:	b21c      	sxth	r4, r3
 8001dfa:	4b33      	ldr	r3, [pc, #204]	; (8001ec8 <controlMotor+0x120>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e02:	4610      	mov	r0, r2
 8001e04:	4619      	mov	r1, r3
 8001e06:	f7fe fea9 	bl	8000b5c <__aeabi_d2iz>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	b21b      	sxth	r3, r3
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4620      	mov	r0, r4
 8001e12:	f002 fb6b 	bl	80044ec <control>
            motor_break = 2;
 8001e16:	4b28      	ldr	r3, [pc, #160]	; (8001eb8 <controlMotor+0x110>)
 8001e18:	2202      	movs	r2, #2
 8001e1a:	601a      	str	r2, [r3, #0]
            count = 0;
 8001e1c:	4b2b      	ldr	r3, [pc, #172]	; (8001ecc <controlMotor+0x124>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
            printf("motor_break==1\n");
 8001e22:	482b      	ldr	r0, [pc, #172]	; (8001ed0 <controlMotor+0x128>)
 8001e24:	f008 f86a 	bl	8009efc <puts>
    {
        disable();
        motor_disable_flag = 1;
        printf("disable==1\n");
    }
}
 8001e28:	e042      	b.n	8001eb0 <controlMotor+0x108>
        else if(motor_break == 2)
 8001e2a:	4b23      	ldr	r3, [pc, #140]	; (8001eb8 <controlMotor+0x110>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d127      	bne.n	8001e82 <controlMotor+0xda>
            count++;
 8001e32:	4b26      	ldr	r3, [pc, #152]	; (8001ecc <controlMotor+0x124>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a24      	ldr	r2, [pc, #144]	; (8001ecc <controlMotor+0x124>)
 8001e3a:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <controlMotor+0x120>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	4610      	mov	r0, r2
 8001e46:	4619      	mov	r1, r3
 8001e48:	f7fe fe88 	bl	8000b5c <__aeabi_d2iz>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	b21c      	sxth	r4, r3
 8001e50:	4b1d      	ldr	r3, [pc, #116]	; (8001ec8 <controlMotor+0x120>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f7fe fe7e 	bl	8000b5c <__aeabi_d2iz>
 8001e60:	4603      	mov	r3, r0
 8001e62:	b21b      	sxth	r3, r3
 8001e64:	4619      	mov	r1, r3
 8001e66:	4620      	mov	r0, r4
 8001e68:	f002 fb40 	bl	80044ec <control>
            if(count == 20)
 8001e6c:	4b17      	ldr	r3, [pc, #92]	; (8001ecc <controlMotor+0x124>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b14      	cmp	r3, #20
 8001e72:	d102      	bne.n	8001e7a <controlMotor+0xd2>
                motor_break = 3;
 8001e74:	4b10      	ldr	r3, [pc, #64]	; (8001eb8 <controlMotor+0x110>)
 8001e76:	2203      	movs	r2, #3
 8001e78:	601a      	str	r2, [r3, #0]
            printf("motor_break==2\n");
 8001e7a:	4816      	ldr	r0, [pc, #88]	; (8001ed4 <controlMotor+0x12c>)
 8001e7c:	f008 f83e 	bl	8009efc <puts>
}
 8001e80:	e016      	b.n	8001eb0 <controlMotor+0x108>
        else if(motor_break == 3)
 8001e82:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <controlMotor+0x110>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	d112      	bne.n	8001eb0 <controlMotor+0x108>
        	printf("motor_break==3\n");
 8001e8a:	4813      	ldr	r0, [pc, #76]	; (8001ed8 <controlMotor+0x130>)
 8001e8c:	f008 f836 	bl	8009efc <puts>
            control(0,0);
 8001e90:	2100      	movs	r1, #0
 8001e92:	2000      	movs	r0, #0
 8001e94:	f002 fb2a 	bl	80044ec <control>
            count = 0;
 8001e98:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <controlMotor+0x124>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	e007      	b.n	8001eb0 <controlMotor+0x108>
        disable();
 8001ea0:	f002 f9e8 	bl	8004274 <disable>
        motor_disable_flag = 1;
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <controlMotor+0x118>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	601a      	str	r2, [r3, #0]
        printf("disable==1\n");
 8001eaa:	480c      	ldr	r0, [pc, #48]	; (8001edc <controlMotor+0x134>)
 8001eac:	f008 f826 	bl	8009efc <puts>
}
 8001eb0:	bf00      	nop
 8001eb2:	bd98      	pop	{r3, r4, r7, pc}
 8001eb4:	20000000 	.word	0x20000000
 8001eb8:	2000017c 	.word	0x2000017c
 8001ebc:	0800ae10 	.word	0x0800ae10
 8001ec0:	20000180 	.word	0x20000180
 8001ec4:	0800ae30 	.word	0x0800ae30
 8001ec8:	200001a8 	.word	0x200001a8
 8001ecc:	200001b4 	.word	0x200001b4
 8001ed0:	0800ae38 	.word	0x0800ae38
 8001ed4:	0800ae48 	.word	0x0800ae48
 8001ed8:	0800ae58 	.word	0x0800ae58
 8001edc:	0800ae68 	.word	0x0800ae68

08001ee0 <toRPM>:


int toRPM()
{
 8001ee0:	b5b0      	push	{r4, r5, r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001ee4:	4b28      	ldr	r3, [pc, #160]	; (8001f88 <toRPM+0xa8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <toRPM+0xa8>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001ef4:	a320      	add	r3, pc, #128	; (adr r3, 8001f78 <toRPM+0x98>)
 8001ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efa:	f7fe fb95 	bl	8000628 <__aeabi_dmul>
 8001efe:	4602      	mov	r2, r0
 8001f00:	460b      	mov	r3, r1
 8001f02:	4620      	mov	r0, r4
 8001f04:	4629      	mov	r1, r5
 8001f06:	f7fe f9d9 	bl	80002bc <__adddf3>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	4610      	mov	r0, r2
 8001f10:	4619      	mov	r1, r3
 8001f12:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <toRPM+0xa8>)
 8001f14:	681c      	ldr	r4, [r3, #0]
 8001f16:	a31a      	add	r3, pc, #104	; (adr r3, 8001f80 <toRPM+0xa0>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fb84 	bl	8000628 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001f28:	4b17      	ldr	r3, [pc, #92]	; (8001f88 <toRPM+0xa8>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001f30:	4b15      	ldr	r3, [pc, #84]	; (8001f88 <toRPM+0xa8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001f38:	a30f      	add	r3, pc, #60	; (adr r3, 8001f78 <toRPM+0x98>)
 8001f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3e:	f7fe fb73 	bl	8000628 <__aeabi_dmul>
 8001f42:	4602      	mov	r2, r0
 8001f44:	460b      	mov	r3, r1
 8001f46:	4620      	mov	r0, r4
 8001f48:	4629      	mov	r1, r5
 8001f4a:	f7fe f9b5 	bl	80002b8 <__aeabi_dsub>
 8001f4e:	4602      	mov	r2, r0
 8001f50:	460b      	mov	r3, r1
 8001f52:	4610      	mov	r0, r2
 8001f54:	4619      	mov	r1, r3
 8001f56:	4b0c      	ldr	r3, [pc, #48]	; (8001f88 <toRPM+0xa8>)
 8001f58:	681c      	ldr	r4, [r3, #0]
 8001f5a:	a309      	add	r3, pc, #36	; (adr r3, 8001f80 <toRPM+0xa0>)
 8001f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f60:	f7fe fb62 	bl	8000628 <__aeabi_dmul>
 8001f64:	4602      	mov	r2, r0
 8001f66:	460b      	mov	r3, r1
 8001f68:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	bdb0      	pop	{r4, r5, r7, pc}
 8001f72:	bf00      	nop
 8001f74:	f3af 8000 	nop.w
 8001f78:	0e560419 	.word	0x0e560419
 8001f7c:	3fcdb22d 	.word	0x3fcdb22d
 8001f80:	31bcaa49 	.word	0x31bcaa49
 8001f84:	40625d31 	.word	0x40625d31
 8001f88:	200001a8 	.word	0x200001a8

08001f8c <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 8001f8c:	b590      	push	{r4, r7, lr}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	021b      	lsls	r3, r3, #8
 8001fa2:	b21b      	sxth	r3, r3
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 8001fa8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fad1 	bl	8000554 <__aeabi_i2d>
 8001fb2:	4b19      	ldr	r3, [pc, #100]	; (8002018 <parseCmdvel+0x8c>)
 8001fb4:	681c      	ldr	r4, [r3, #0]
 8001fb6:	f04f 0200 	mov.w	r2, #0
 8001fba:	4b18      	ldr	r3, [pc, #96]	; (800201c <parseCmdvel+0x90>)
 8001fbc:	f7fe fc5e 	bl	800087c <__aeabi_ddiv>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	460b      	mov	r3, r1
 8001fc4:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3302      	adds	r3, #2
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	b21a      	sxth	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	3303      	adds	r3, #3
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	021b      	lsls	r3, r3, #8
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 8001fde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fab6 	bl	8000554 <__aeabi_i2d>
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <parseCmdvel+0x8c>)
 8001fea:	681c      	ldr	r4, [r3, #0]
 8001fec:	f04f 0200 	mov.w	r2, #0
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	; (800201c <parseCmdvel+0x90>)
 8001ff2:	f7fe fc43 	bl	800087c <__aeabi_ddiv>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	791a      	ldrb	r2, [r3, #4]
 8002002:	4b07      	ldr	r3, [pc, #28]	; (8002020 <parseCmdvel+0x94>)
 8002004:	701a      	strb	r2, [r3, #0]
    toRPM();
 8002006:	f7ff ff6b 	bl	8001ee0 <toRPM>
    motor_break = 1;
 800200a:	4b06      	ldr	r3, [pc, #24]	; (8002024 <parseCmdvel+0x98>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	3714      	adds	r7, #20
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	200001a8 	.word	0x200001a8
 800201c:	40590000 	.word	0x40590000
 8002020:	20000000 	.word	0x20000000
 8002024:	2000017c 	.word	0x2000017c

08002028 <sendEnc>:



void sendEnc(int id)
{
 8002028:	b590      	push	{r4, r7, lr}
 800202a:	b087      	sub	sp, #28
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 8002034:	4b5f      	ldr	r3, [pc, #380]	; (80021b4 <sendEnc+0x18c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800203c:	f04f 0200 	mov.w	r2, #0
 8002040:	4b5d      	ldr	r3, [pc, #372]	; (80021b8 <sendEnc+0x190>)
 8002042:	f7fe faf1 	bl	8000628 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4610      	mov	r0, r2
 800204c:	4619      	mov	r1, r3
 800204e:	f7fe fd85 	bl	8000b5c <__aeabi_d2iz>
 8002052:	4603      	mov	r3, r0
 8002054:	b219      	sxth	r1, r3
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	1c5a      	adds	r2, r3, #1
 800205a:	617a      	str	r2, [r7, #20]
 800205c:	b2ca      	uxtb	r2, r1
 800205e:	3318      	adds	r3, #24
 8002060:	443b      	add	r3, r7
 8002062:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8002066:	4b53      	ldr	r3, [pc, #332]	; (80021b4 <sendEnc+0x18c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b51      	ldr	r3, [pc, #324]	; (80021b8 <sendEnc+0x190>)
 8002074:	f7fe fad8 	bl	8000628 <__aeabi_dmul>
 8002078:	4602      	mov	r2, r0
 800207a:	460b      	mov	r3, r1
 800207c:	4610      	mov	r0, r2
 800207e:	4619      	mov	r1, r3
 8002080:	f7fe fd6c 	bl	8000b5c <__aeabi_d2iz>
 8002084:	4603      	mov	r3, r0
 8002086:	b21b      	sxth	r3, r3
 8002088:	121b      	asrs	r3, r3, #8
 800208a:	b219      	sxth	r1, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1c5a      	adds	r2, r3, #1
 8002090:	617a      	str	r2, [r7, #20]
 8002092:	b2ca      	uxtb	r2, r1
 8002094:	3318      	adds	r3, #24
 8002096:	443b      	add	r3, r7
 8002098:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 800209c:	4b45      	ldr	r3, [pc, #276]	; (80021b4 <sendEnc+0x18c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	4b43      	ldr	r3, [pc, #268]	; (80021b8 <sendEnc+0x190>)
 80020aa:	f7fe fabd 	bl	8000628 <__aeabi_dmul>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4610      	mov	r0, r2
 80020b4:	4619      	mov	r1, r3
 80020b6:	f7fe fd51 	bl	8000b5c <__aeabi_d2iz>
 80020ba:	4603      	mov	r3, r0
 80020bc:	b219      	sxth	r1, r3
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	1c5a      	adds	r2, r3, #1
 80020c2:	617a      	str	r2, [r7, #20]
 80020c4:	b2ca      	uxtb	r2, r1
 80020c6:	3318      	adds	r3, #24
 80020c8:	443b      	add	r3, r7
 80020ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <sendEnc+0x18c>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80020d6:	f04f 0200 	mov.w	r2, #0
 80020da:	4b37      	ldr	r3, [pc, #220]	; (80021b8 <sendEnc+0x190>)
 80020dc:	f7fe faa4 	bl	8000628 <__aeabi_dmul>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	4610      	mov	r0, r2
 80020e6:	4619      	mov	r1, r3
 80020e8:	f7fe fd38 	bl	8000b5c <__aeabi_d2iz>
 80020ec:	4603      	mov	r3, r0
 80020ee:	b21b      	sxth	r3, r3
 80020f0:	121b      	asrs	r3, r3, #8
 80020f2:	b219      	sxth	r1, r3
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	1c5a      	adds	r2, r3, #1
 80020f8:	617a      	str	r2, [r7, #20]
 80020fa:	b2ca      	uxtb	r2, r1
 80020fc:	3318      	adds	r3, #24
 80020fe:	443b      	add	r3, r7
 8002100:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 8002104:	4b2d      	ldr	r3, [pc, #180]	; (80021bc <sendEnc+0x194>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	7c1b      	ldrb	r3, [r3, #16]
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	b25a      	sxtb	r2, r3
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <sendEnc+0x194>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	7bdb      	ldrb	r3, [r3, #15]
 8002114:	b25b      	sxtb	r3, r3
 8002116:	4313      	orrs	r3, r2
 8002118:	b259      	sxtb	r1, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	1c5a      	adds	r2, r3, #1
 800211e:	617a      	str	r2, [r7, #20]
 8002120:	b2ca      	uxtb	r2, r1
 8002122:	3318      	adds	r3, #24
 8002124:	443b      	add	r3, r7
 8002126:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 800212a:	4b22      	ldr	r3, [pc, #136]	; (80021b4 <sendEnc+0x18c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 8002132:	f04f 0200 	mov.w	r2, #0
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <sendEnc+0x190>)
 8002138:	f7fe fa76 	bl	8000628 <__aeabi_dmul>
 800213c:	4602      	mov	r2, r0
 800213e:	460b      	mov	r3, r1
 8002140:	4610      	mov	r0, r2
 8002142:	4619      	mov	r1, r3
 8002144:	697c      	ldr	r4, [r7, #20]
 8002146:	1c63      	adds	r3, r4, #1
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	f7fe fd2f 	bl	8000bac <__aeabi_d2uiz>
 800214e:	4603      	mov	r3, r0
 8002150:	b2da      	uxtb	r2, r3
 8002152:	f104 0318 	add.w	r3, r4, #24
 8002156:	443b      	add	r3, r7
 8002158:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <sendEnc+0x18c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <sendEnc+0x190>)
 800216a:	f7fe fa5d 	bl	8000628 <__aeabi_dmul>
 800216e:	4602      	mov	r2, r0
 8002170:	460b      	mov	r3, r1
 8002172:	4610      	mov	r0, r2
 8002174:	4619      	mov	r1, r3
 8002176:	697c      	ldr	r4, [r7, #20]
 8002178:	1c63      	adds	r3, r4, #1
 800217a:	617b      	str	r3, [r7, #20]
 800217c:	f7fe fd16 	bl	8000bac <__aeabi_d2uiz>
 8002180:	4603      	mov	r3, r0
 8002182:	b2da      	uxtb	r2, r3
 8002184:	f104 0318 	add.w	r3, r4, #24
 8002188:	443b      	add	r3, r7
 800218a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1c5a      	adds	r2, r3, #1
 8002192:	617a      	str	r2, [r7, #20]
 8002194:	3318      	adds	r3, #24
 8002196:	443b      	add	r3, r7
 8002198:	2200      	movs	r2, #0
 800219a:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f107 010c 	add.w	r1, r7, #12
 80021a4:	2301      	movs	r3, #1
 80021a6:	2208      	movs	r2, #8
 80021a8:	f000 ff1e 	bl	8002fe8 <sendCan>
}
 80021ac:	bf00      	nop
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	200001a8 	.word	0x200001a8
 80021b8:	40590000 	.word	0x40590000
 80021bc:	20000198 	.word	0x20000198

080021c0 <toVW>:


int toVW(void)
{
 80021c0:	b598      	push	{r3, r4, r7, lr}
 80021c2:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 80021c4:	4b2c      	ldr	r3, [pc, #176]	; (8002278 <toVW+0xb8>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80021cc:	4a2a      	ldr	r2, [pc, #168]	; (8002278 <toVW+0xb8>)
 80021ce:	6814      	ldr	r4, [r2, #0]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7fe f9bf 	bl	8000554 <__aeabi_i2d>
 80021d6:	4602      	mov	r2, r0
 80021d8:	460b      	mov	r3, r1
 80021da:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 80021de:	4b26      	ldr	r3, [pc, #152]	; (8002278 <toVW+0xb8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80021e6:	4a24      	ldr	r2, [pc, #144]	; (8002278 <toVW+0xb8>)
 80021e8:	6814      	ldr	r4, [r2, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f9b2 	bl	8000554 <__aeabi_i2d>
 80021f0:	4602      	mov	r2, r0
 80021f2:	460b      	mov	r3, r1
 80021f4:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <toVW+0xb8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <toVW+0xb8>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002208:	f7fe f858 	bl	80002bc <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	4b18      	ldr	r3, [pc, #96]	; (8002278 <toVW+0xb8>)
 8002216:	681c      	ldr	r4, [r3, #0]
 8002218:	a313      	add	r3, pc, #76	; (adr r3, 8002268 <toVW+0xa8>)
 800221a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221e:	f7fe fa03 	bl	8000628 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 800222a:	4b13      	ldr	r3, [pc, #76]	; (8002278 <toVW+0xb8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <toVW+0xb8>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800223a:	f7fe f83d 	bl	80002b8 <__aeabi_dsub>
 800223e:	4602      	mov	r2, r0
 8002240:	460b      	mov	r3, r1
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <toVW+0xb8>)
 8002248:	681c      	ldr	r4, [r3, #0]
 800224a:	a309      	add	r3, pc, #36	; (adr r3, 8002270 <toVW+0xb0>)
 800224c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002250:	f7fe f9ea 	bl	8000628 <__aeabi_dmul>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 800225c:	2300      	movs	r3, #0
}
 800225e:	4618      	mov	r0, r3
 8002260:	bd98      	pop	{r3, r4, r7, pc}
 8002262:	bf00      	nop
 8002264:	f3af 8000 	nop.w
 8002268:	306c65e9 	.word	0x306c65e9
 800226c:	3f6be16e 	.word	0x3f6be16e
 8002270:	5313b470 	.word	0x5313b470
 8002274:	3f8e0b32 	.word	0x3f8e0b32
 8002278:	200001a8 	.word	0x200001a8

0800227c <parseEnc>:


void parseEnc(uint8_t *msg)
{
 800227c:	b590      	push	{r4, r7, lr}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2bd8      	cmp	r3, #216	; 0xd8
 800228a:	d136      	bne.n	80022fa <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	3302      	adds	r3, #2
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b219      	sxth	r1, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3303      	adds	r3, #3
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	021b      	lsls	r3, r3, #8
 800229c:	b21a      	sxth	r2, r3
 800229e:	4b34      	ldr	r3, [pc, #208]	; (8002370 <parseEnc+0xf4>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	430a      	orrs	r2, r1
 80022a4:	b212      	sxth	r2, r2
 80022a6:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3305      	adds	r3, #5
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	b219      	sxth	r1, r3
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	3306      	adds	r3, #6
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	021b      	lsls	r3, r3, #8
 80022ba:	b21a      	sxth	r2, r3
 80022bc:	4b2c      	ldr	r3, [pc, #176]	; (8002370 <parseEnc+0xf4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	b212      	sxth	r2, r2
 80022c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 80022c8:	4b29      	ldr	r3, [pc, #164]	; (8002370 <parseEnc+0xf4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	425b      	negs	r3, r3
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	4b26      	ldr	r3, [pc, #152]	; (8002370 <parseEnc+0xf4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	b212      	sxth	r2, r2
 80022dc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80022e0:	4b24      	ldr	r3, [pc, #144]	; (8002374 <parseEnc+0xf8>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	7852      	ldrb	r2, [r2, #1]
 80022e8:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <parseEnc+0xf8>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	687a      	ldr	r2, [r7, #4]
 80022f0:	7912      	ldrb	r2, [r2, #4]
 80022f2:	741a      	strb	r2, [r3, #16]

        toVW();
 80022f4:	f7ff ff64 	bl	80021c0 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 80022f8:	e036      	b.n	8002368 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	2bc1      	cmp	r3, #193	; 0xc1
 8002300:	d117      	bne.n	8002332 <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3304      	adds	r3, #4
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	461a      	mov	r2, r3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3305      	adds	r3, #5
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4313      	orrs	r3, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f91d 	bl	8000554 <__aeabi_i2d>
 800231a:	4b15      	ldr	r3, [pc, #84]	; (8002370 <parseEnc+0xf4>)
 800231c:	681c      	ldr	r4, [r3, #0]
 800231e:	f04f 0200 	mov.w	r2, #0
 8002322:	4b15      	ldr	r3, [pc, #84]	; (8002378 <parseEnc+0xfc>)
 8002324:	f7fe faaa 	bl	800087c <__aeabi_ddiv>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8002330:	e01a      	b.n	8002368 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	2bc8      	cmp	r3, #200	; 0xc8
 8002338:	d116      	bne.n	8002368 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	3304      	adds	r3, #4
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	461a      	mov	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3305      	adds	r3, #5
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	021b      	lsls	r3, r3, #8
 800234a:	4313      	orrs	r3, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f7fe f901 	bl	8000554 <__aeabi_i2d>
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <parseEnc+0xf4>)
 8002354:	681c      	ldr	r4, [r3, #0]
 8002356:	f04f 0200 	mov.w	r2, #0
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <parseEnc+0xfc>)
 800235c:	f7fe fa8e 	bl	800087c <__aeabi_ddiv>
 8002360:	4602      	mov	r2, r0
 8002362:	460b      	mov	r3, r1
 8002364:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	bd90      	pop	{r4, r7, pc}
 8002370:	200001a8 	.word	0x200001a8
 8002374:	20000198 	.word	0x20000198
 8002378:	40240000 	.word	0x40240000

0800237c <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 800237c:	b590      	push	{r4, r7, lr}
 800237e:	b085      	sub	sp, #20
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3304      	adds	r3, #4
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	b21a      	sxth	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3305      	adds	r3, #5
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	021b      	lsls	r3, r3, #8
 8002394:	b21b      	sxth	r3, r3
 8002396:	4313      	orrs	r3, r2
 8002398:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	3306      	adds	r3, #6
 800239e:	781b      	ldrb	r3, [r3, #0]
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3307      	adds	r3, #7
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	021b      	lsls	r3, r3, #8
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	4313      	orrs	r3, r2
 80023ae:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 80023b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023b4:	425b      	negs	r3, r3
 80023b6:	4618      	mov	r0, r3
 80023b8:	f7fe f8cc 	bl	8000554 <__aeabi_i2d>
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	4b15      	ldr	r3, [pc, #84]	; (8002418 <parseEnc114+0x9c>)
 80023c2:	f7fe fa5b 	bl	800087c <__aeabi_ddiv>
 80023c6:	4602      	mov	r2, r0
 80023c8:	460b      	mov	r3, r1
 80023ca:	4914      	ldr	r1, [pc, #80]	; (800241c <parseEnc114+0xa0>)
 80023cc:	680c      	ldr	r4, [r1, #0]
 80023ce:	4610      	mov	r0, r2
 80023d0:	4619      	mov	r1, r3
 80023d2:	f7fe fbc3 	bl	8000b5c <__aeabi_d2iz>
 80023d6:	4603      	mov	r3, r0
 80023d8:	b21b      	sxth	r3, r3
 80023da:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 80023de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023e2:	4618      	mov	r0, r3
 80023e4:	f7fe f8b6 	bl	8000554 <__aeabi_i2d>
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <parseEnc114+0x9c>)
 80023ee:	f7fe fa45 	bl	800087c <__aeabi_ddiv>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4909      	ldr	r1, [pc, #36]	; (800241c <parseEnc114+0xa0>)
 80023f8:	680c      	ldr	r4, [r1, #0]
 80023fa:	4610      	mov	r0, r2
 80023fc:	4619      	mov	r1, r3
 80023fe:	f7fe fbad 	bl	8000b5c <__aeabi_d2iz>
 8002402:	4603      	mov	r3, r0
 8002404:	b21b      	sxth	r3, r3
 8002406:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 800240a:	f7ff fed9 	bl	80021c0 <toVW>
}
 800240e:	bf00      	nop
 8002410:	3714      	adds	r7, #20
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}
 8002416:	bf00      	nop
 8002418:	40240000 	.word	0x40240000
 800241c:	200001a8 	.word	0x200001a8

08002420 <parseState114>:

void parseState114(uint8_t *msg)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b082      	sub	sp, #8
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	3304      	adds	r3, #4
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	b25a      	sxtb	r2, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3305      	adds	r3, #5
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	b25b      	sxtb	r3, r3
 800243a:	4313      	orrs	r3, r2
 800243c:	b25a      	sxtb	r2, r3
 800243e:	4b12      	ldr	r3, [pc, #72]	; (8002488 <parseState114+0x68>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	b2d2      	uxtb	r2, r2
 8002444:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	3306      	adds	r3, #6
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	b25a      	sxtb	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	3307      	adds	r3, #7
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	021b      	lsls	r3, r3, #8
 8002456:	b25b      	sxtb	r3, r3
 8002458:	4313      	orrs	r3, r2
 800245a:	b25a      	sxtb	r2, r3
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <parseState114+0x68>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	b2d2      	uxtb	r2, r2
 8002462:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 8002464:	4b08      	ldr	r3, [pc, #32]	; (8002488 <parseState114+0x68>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	7bdb      	ldrb	r3, [r3, #15]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d104      	bne.n	8002478 <parseState114+0x58>
 800246e:	4b06      	ldr	r3, [pc, #24]	; (8002488 <parseState114+0x68>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	7c1b      	ldrb	r3, [r3, #16]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d003      	beq.n	8002480 <parseState114+0x60>
    {
        reset();
 8002478:	f001 ff4e 	bl	8004318 <reset>
        startMotor();
 800247c:	f001 fe8c 	bl	8004198 <startMotor>
    }
}
 8002480:	bf00      	nop
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000198 	.word	0x20000198

0800248c <stateThread>:
	NVIC_SystemReset();
    //inhome_check_cnt++;
}

void stateThread()
{
 800248c:	b580      	push	{r7, lr}
 800248e:	af00      	add	r7, sp, #0

	printf("stateThread, robot_state: %d\n", robot_state);
 8002490:	4b48      	ldr	r3, [pc, #288]	; (80025b4 <stateThread+0x128>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4619      	mov	r1, r3
 8002496:	4848      	ldr	r0, [pc, #288]	; (80025b8 <stateThread+0x12c>)
 8002498:	f007 fcaa 	bl	8009df0 <iprintf>
        switch(robot_state)
 800249c:	4b45      	ldr	r3, [pc, #276]	; (80025b4 <stateThread+0x128>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2b0c      	cmp	r3, #12
 80024a2:	f200 8085 	bhi.w	80025b0 <stateThread+0x124>
 80024a6:	a201      	add	r2, pc, #4	; (adr r2, 80024ac <stateThread+0x20>)
 80024a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024ac:	080024e1 	.word	0x080024e1
 80024b0:	080024e7 	.word	0x080024e7
 80024b4:	080024f9 	.word	0x080024f9
 80024b8:	08002519 	.word	0x08002519
 80024bc:	0800252b 	.word	0x0800252b
 80024c0:	0800253d 	.word	0x0800253d
 80024c4:	08002549 	.word	0x08002549
 80024c8:	0800255b 	.word	0x0800255b
 80024cc:	08002581 	.word	0x08002581
 80024d0:	080025b1 	.word	0x080025b1
 80024d4:	0800258d 	.word	0x0800258d
 80024d8:	08002599 	.word	0x08002599
 80024dc:	080025a5 	.word	0x080025a5
        {
            case INIT:
                turnOff();
 80024e0:	f000 fe1c 	bl	800311c <turnOff>
                break;
 80024e4:	e064      	b.n	80025b0 <stateThread+0x124>

            case DOCKING:
                turnOn(white);
 80024e6:	4b35      	ldr	r3, [pc, #212]	; (80025bc <stateThread+0x130>)
 80024e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80024ec:	f000 fdda 	bl	80030a4 <turnOn>
                inhome = 0;
 80024f0:	4b33      	ldr	r3, [pc, #204]	; (80025c0 <stateThread+0x134>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	701a      	strb	r2, [r3, #0]
                break;
 80024f6:	e05b      	b.n	80025b0 <stateThread+0x124>

            case CHARGING:
                if(battery>95)
 80024f8:	4b32      	ldr	r3, [pc, #200]	; (80025c4 <stateThread+0x138>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b5f      	cmp	r3, #95	; 0x5f
 80024fe:	dd05      	ble.n	800250c <stateThread+0x80>
                {
                    turnOn(green);
 8002500:	4b31      	ldr	r3, [pc, #196]	; (80025c8 <stateThread+0x13c>)
 8002502:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002506:	f000 fdcd 	bl	80030a4 <turnOn>
                }
                else
                {
                    turnOn(yellow);
                }
                break;
 800250a:	e051      	b.n	80025b0 <stateThread+0x124>
                    turnOn(yellow);
 800250c:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <stateThread+0x140>)
 800250e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002512:	f000 fdc7 	bl	80030a4 <turnOn>
                break;
 8002516:	e04b      	b.n	80025b0 <stateThread+0x124>

            case WORKING:
                turnOn(white);
 8002518:	4b28      	ldr	r3, [pc, #160]	; (80025bc <stateThread+0x130>)
 800251a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800251e:	f000 fdc1 	bl	80030a4 <turnOn>
                inhome = 0;
 8002522:	4b27      	ldr	r3, [pc, #156]	; (80025c0 <stateThread+0x134>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
                break;
 8002528:	e042      	b.n	80025b0 <stateThread+0x124>

            case STOP:
                turnOn(purple);
 800252a:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <stateThread+0x144>)
 800252c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002530:	f000 fdb8 	bl	80030a4 <turnOn>
                inhome = 0;
 8002534:	4b22      	ldr	r3, [pc, #136]	; (80025c0 <stateThread+0x134>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
                break;
 800253a:	e039      	b.n	80025b0 <stateThread+0x124>

            case W_STOP:
                turnOn(purple);
 800253c:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <stateThread+0x144>)
 800253e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002542:	f000 fdaf 	bl	80030a4 <turnOn>
                break;
 8002546:	e033      	b.n	80025b0 <stateThread+0x124>

            case EMERGENCY:
                turnOn(red);
 8002548:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <stateThread+0x148>)
 800254a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800254e:	f000 fda9 	bl	80030a4 <turnOn>
                inhome = 0;
 8002552:	4b1b      	ldr	r3, [pc, #108]	; (80025c0 <stateThread+0x134>)
 8002554:	2200      	movs	r2, #0
 8002556:	701a      	strb	r2, [r3, #0]
                break;
 8002558:	e02a      	b.n	80025b0 <stateThread+0x124>

            case MANUAL:
                if(touch)
 800255a:	4b1f      	ldr	r3, [pc, #124]	; (80025d8 <stateThread+0x14c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d005      	beq.n	800256e <stateThread+0xe2>
                    turnOn(blue);
 8002562:	4b1e      	ldr	r3, [pc, #120]	; (80025dc <stateThread+0x150>)
 8002564:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002568:	f000 fd9c 	bl	80030a4 <turnOn>
 800256c:	e004      	b.n	8002578 <stateThread+0xec>
                else
                    turnOn(skyblue);
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <stateThread+0x154>)
 8002570:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002574:	f000 fd96 	bl	80030a4 <turnOn>
                inhome = 0;
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <stateThread+0x134>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
                break;
 800257e:	e017      	b.n	80025b0 <stateThread+0x124>

            case WALL_FOLLOWING:
                turnOn(white);
 8002580:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <stateThread+0x130>)
 8002582:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002586:	f000 fd8d 	bl	80030a4 <turnOn>
                break;
 800258a:	e011      	b.n	80025b0 <stateThread+0x124>
            case 10: //debug
                turnOn(blue);
 800258c:	4b13      	ldr	r3, [pc, #76]	; (80025dc <stateThread+0x150>)
 800258e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002592:	f000 fd87 	bl	80030a4 <turnOn>
                break;
 8002596:	e00b      	b.n	80025b0 <stateThread+0x124>

			case 11: //for operation test
				turnOn(red);
 8002598:	4b0e      	ldr	r3, [pc, #56]	; (80025d4 <stateThread+0x148>)
 800259a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800259e:	f000 fd81 	bl	80030a4 <turnOn>
				break;
 80025a2:	e005      	b.n	80025b0 <stateThread+0x124>

			case 12: //for operation test
				turnOn(green);
 80025a4:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <stateThread+0x13c>)
 80025a6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025aa:	f000 fd7b 	bl	80030a4 <turnOn>
				break;
 80025ae:	bf00      	nop
//        mutex.lock();
//        check_msg = charging->checkIRdata();
//        mutex.unlock();
//        ThisThread::sleep_for(131);

}
 80025b0:	bf00      	nop
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20000184 	.word	0x20000184
 80025b8:	0800ae74 	.word	0x0800ae74
 80025bc:	20000040 	.word	0x20000040
 80025c0:	200001ac 	.word	0x200001ac
 80025c4:	2000019c 	.word	0x2000019c
 80025c8:	20000004 	.word	0x20000004
 80025cc:	2000001c 	.word	0x2000001c
 80025d0:	20000034 	.word	0x20000034
 80025d4:	20000028 	.word	0x20000028
 80025d8:	2000018d 	.word	0x2000018d
 80025dc:	2000004c 	.word	0x2000004c
 80025e0:	20000010 	.word	0x20000010

080025e4 <stateIdle>:


void stateIdle()
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
    //int check_msg = 0;
    //check_msg = charging->checkIRdata();

    if(robot_state == CHARGING)
 80025e8:	4b10      	ldr	r3, [pc, #64]	; (800262c <stateIdle+0x48>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d10d      	bne.n	800260c <stateIdle+0x28>
    {
        if(ir_count_idle++ >= 2)
 80025f0:	4b0f      	ldr	r3, [pc, #60]	; (8002630 <stateIdle+0x4c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	1c5a      	adds	r2, r3, #1
 80025f6:	490e      	ldr	r1, [pc, #56]	; (8002630 <stateIdle+0x4c>)
 80025f8:	600a      	str	r2, [r1, #0]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	dd09      	ble.n	8002612 <stateIdle+0x2e>
        {
            if(charger_sw == 1)
 80025fe:	4b0d      	ldr	r3, [pc, #52]	; (8002634 <stateIdle+0x50>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	2b01      	cmp	r3, #1

            if(battery>=95)
            {
                //sendIRdata(battery_full);
            }
            ir_count_idle = 0;
 8002604:	4b0a      	ldr	r3, [pc, #40]	; (8002630 <stateIdle+0x4c>)
 8002606:	2200      	movs	r2, #0
 8002608:	601a      	str	r2, [r3, #0]
 800260a:	e002      	b.n	8002612 <stateIdle+0x2e>
        }
    }
    else
    {
        check_msg = 0;
 800260c:	4b0a      	ldr	r3, [pc, #40]	; (8002638 <stateIdle+0x54>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
    }

    if(check_msg == 2)
 8002612:	4b09      	ldr	r3, [pc, #36]	; (8002638 <stateIdle+0x54>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2b02      	cmp	r3, #2
 8002618:	d102      	bne.n	8002620 <stateIdle+0x3c>
    {
        inhome = 1;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <stateIdle+0x58>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]

    }

}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	20000184 	.word	0x20000184
 8002630:	200001b0 	.word	0x200001b0
 8002634:	2000018b 	.word	0x2000018b
 8002638:	200001a4 	.word	0x200001a4
 800263c:	200001ac 	.word	0x200001ac

08002640 <spinonce>:


void spinonce(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b08e      	sub	sp, #56	; 0x38
 8002644:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 8002646:	4aa1      	ldr	r2, [pc, #644]	; (80028cc <spinonce+0x28c>)
 8002648:	f107 0310 	add.w	r3, r7, #16
 800264c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002650:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	637b      	str	r3, [r7, #52]	; 0x34

    uint32_t CanId = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	633b      	str	r3, [r7, #48]	; 0x30
    uint16_t FDval[4]={0,};
 800265c:	463b      	mov	r3, r7
 800265e:	2200      	movs	r2, #0
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	605a      	str	r2, [r3, #4]
	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 8002664:	2100      	movs	r1, #0
 8002666:	2000      	movs	r0, #0
 8002668:	f000 fc72 	bl	8002f50 <CanInit>


    HAL_Delay(4000);//must set more 4s
 800266c:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8002670:	f002 fdc0 	bl	80051f4 <HAL_Delay>

    //ready_flag = 1;
    start_docking_flag = 0;
 8002674:	4b96      	ldr	r3, [pc, #600]	; (80028d0 <spinonce+0x290>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 800267a:	4b96      	ldr	r3, [pc, #600]	; (80028d4 <spinonce+0x294>)
 800267c:	2200      	movs	r2, #0
 800267e:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 8002680:	2301      	movs	r3, #1
 8002682:	76fb      	strb	r3, [r7, #27]

    settingMotor();
 8002684:	f002 f868 	bl	8004758 <settingMotor>
    startMotor();
 8002688:	f001 fd86 	bl	8004198 <startMotor>

	TransmitterIR_init();
 800268c:	f000 f9e2 	bl	8002a54 <TransmitterIR_init>
    ReceiverIR_init();
 8002690:	f7fe fc2e 	bl	8000ef0 <ReceiverIR_init>

	while(1)
	{


		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 8002694:	4b90      	ldr	r3, [pc, #576]	; (80028d8 <spinonce+0x298>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f103 020a 	add.w	r2, r3, #10
 800269c:	4b8f      	ldr	r3, [pc, #572]	; (80028dc <spinonce+0x29c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d221      	bcs.n	80026e8 <spinonce+0xa8>
			FDsen_seq = Tick_100ms;
 80026a4:	4b8d      	ldr	r3, [pc, #564]	; (80028dc <spinonce+0x29c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a8b      	ldr	r2, [pc, #556]	; (80028d8 <spinonce+0x298>)
 80026aa:	6013      	str	r3, [r2, #0]

		    for(int i=0;i<4;i++){
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026b0:	e014      	b.n	80026dc <spinonce+0x9c>
		    	HAL_ADC_Start(&hadc1);
 80026b2:	488b      	ldr	r0, [pc, #556]	; (80028e0 <spinonce+0x2a0>)
 80026b4:	f002 fe06 	bl	80052c4 <HAL_ADC_Start>
				HAL_ADC_PollForConversion(&hadc1, 100);
 80026b8:	2164      	movs	r1, #100	; 0x64
 80026ba:	4889      	ldr	r0, [pc, #548]	; (80028e0 <spinonce+0x2a0>)
 80026bc:	f002 ff04 	bl	80054c8 <HAL_ADC_PollForConversion>
				FDval[i] = HAL_ADC_GetValue(&hadc1);
 80026c0:	4887      	ldr	r0, [pc, #540]	; (80028e0 <spinonce+0x2a0>)
 80026c2:	f002 ff8c 	bl	80055de <HAL_ADC_GetValue>
 80026c6:	4603      	mov	r3, r0
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	3338      	adds	r3, #56	; 0x38
 80026d0:	443b      	add	r3, r7
 80026d2:	f823 2c38 	strh.w	r2, [r3, #-56]
		    for(int i=0;i<4;i++){
 80026d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d8:	3301      	adds	r3, #1
 80026da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b03      	cmp	r3, #3
 80026e0:	dde7      	ble.n	80026b2 <spinonce+0x72>
		    }
		    HAL_ADC_Stop(&hadc1);
 80026e2:	487f      	ldr	r0, [pc, #508]	; (80028e0 <spinonce+0x2a0>)
 80026e4:	f002 febc 	bl	8005460 <HAL_ADC_Stop>
		  //HAL_Delay(100);


			}

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80026e8:	4b7e      	ldr	r3, [pc, #504]	; (80028e4 <spinonce+0x2a4>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	1d5a      	adds	r2, r3, #5
 80026ee:	4b7b      	ldr	r3, [pc, #492]	; (80028dc <spinonce+0x29c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d20b      	bcs.n	800270e <spinonce+0xce>
    		toggle_seq = Tick_100ms;
 80026f6:	4b79      	ldr	r3, [pc, #484]	; (80028dc <spinonce+0x29c>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a7a      	ldr	r2, [pc, #488]	; (80028e4 <spinonce+0x2a4>)
 80026fc:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 80026fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002702:	4879      	ldr	r0, [pc, #484]	; (80028e8 <spinonce+0x2a8>)
 8002704:	f004 fb81 	bl	8006e0a <HAL_GPIO_TogglePin>

    		printf("redtest\n");
 8002708:	4878      	ldr	r0, [pc, #480]	; (80028ec <spinonce+0x2ac>)
 800270a:	f007 fbf7 	bl	8009efc <puts>
    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 800270e:	4b78      	ldr	r3, [pc, #480]	; (80028f0 <spinonce+0x2b0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	1d1a      	adds	r2, r3, #4
 8002714:	4b77      	ldr	r3, [pc, #476]	; (80028f4 <spinonce+0x2b4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	429a      	cmp	r2, r3
 800271a:	d20f      	bcs.n	800273c <spinonce+0xfc>
    		controlmotor_seq = gTick;
 800271c:	4b75      	ldr	r3, [pc, #468]	; (80028f4 <spinonce+0x2b4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a73      	ldr	r2, [pc, #460]	; (80028f0 <spinonce+0x2b0>)
 8002722:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 8002724:	f7ff fb40 	bl	8001da8 <controlMotor>
            sendEnc(CANID3);
 8002728:	f240 70d1 	movw	r0, #2001	; 0x7d1
 800272c:	f7ff fc7c 	bl	8002028 <sendEnc>
            printf("controlmotor_seq%d\n", gTick);
 8002730:	4b70      	ldr	r3, [pc, #448]	; (80028f4 <spinonce+0x2b4>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4619      	mov	r1, r3
 8002736:	4870      	ldr	r0, [pc, #448]	; (80028f8 <spinonce+0x2b8>)
 8002738:	f007 fb5a 	bl	8009df0 <iprintf>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 800273c:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <spinonce+0x2bc>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	1cda      	adds	r2, r3, #3
 8002742:	4b6c      	ldr	r3, [pc, #432]	; (80028f4 <spinonce+0x2b4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	429a      	cmp	r2, r3
 8002748:	d20e      	bcs.n	8002768 <spinonce+0x128>
    		reqmotor_seq = gTick;
 800274a:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <spinonce+0x2b4>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a6b      	ldr	r2, [pc, #428]	; (80028fc <spinonce+0x2bc>)
 8002750:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <spinonce+0x2bc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 0307 	and.w	r3, r3, #7
 800275a:	2b00      	cmp	r3, #0
 800275c:	d102      	bne.n	8002764 <spinonce+0x124>
 800275e:	f001 fe2b 	bl	80043b8 <reqEnc>
 8002762:	e001      	b.n	8002768 <spinonce+0x128>
    		else{reqState();}
 8002764:	f001 fe75 	bl	8004452 <reqState>
    	}
		if(Tick_100ms>state_seq+9) {
 8002768:	4b65      	ldr	r3, [pc, #404]	; (8002900 <spinonce+0x2c0>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f103 0209 	add.w	r2, r3, #9
 8002770:	4b5a      	ldr	r3, [pc, #360]	; (80028dc <spinonce+0x29c>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d207      	bcs.n	8002788 <spinonce+0x148>
			state_seq = Tick_100ms;
 8002778:	4b58      	ldr	r3, [pc, #352]	; (80028dc <spinonce+0x29c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a60      	ldr	r2, [pc, #384]	; (8002900 <spinonce+0x2c0>)
 800277e:	6013      	str	r3, [r2, #0]
        	stateIdle();
 8002780:	f7ff ff30 	bl	80025e4 <stateIdle>

    		stateThread();
 8002784:	f7ff fe82 	bl	800248c <stateThread>
    	}


		if((Tick_100ms>sendsensor_seq+5)){
 8002788:	4b5e      	ldr	r3, [pc, #376]	; (8002904 <spinonce+0x2c4>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	1d5a      	adds	r2, r3, #5
 800278e:	4b53      	ldr	r3, [pc, #332]	; (80028dc <spinonce+0x29c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d273      	bcs.n	800287e <spinonce+0x23e>
			sendsensor_seq = Tick_100ms;
 8002796:	4b51      	ldr	r3, [pc, #324]	; (80028dc <spinonce+0x29c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a5a      	ldr	r2, [pc, #360]	; (8002904 <spinonce+0x2c4>)
 800279c:	6013      	str	r3, [r2, #0]
//			pre_usTick = us_Tick;
//			while(us_Tick < pre_usTick+30){;}//wait 150us
//			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);

			//////////////////////////////////////////////
			if(sendsensor_seq%2==1){for(int i=1;i<7;i+=2){buf[i] = USSn_DataRead(i);}}
 800279e:	4b59      	ldr	r3, [pc, #356]	; (8002904 <spinonce+0x2c4>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0301 	and.w	r3, r3, #1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d014      	beq.n	80027d4 <spinonce+0x194>
 80027aa:	2301      	movs	r3, #1
 80027ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80027ae:	e00d      	b.n	80027cc <spinonce+0x18c>
 80027b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80027b2:	f002 fbb9 	bl	8004f28 <USSn_DataRead>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b2d9      	uxtb	r1, r3
 80027ba:	f107 0208 	add.w	r2, r7, #8
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	4413      	add	r3, r2
 80027c2:	460a      	mov	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
 80027c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c8:	3302      	adds	r3, #2
 80027ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80027cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ce:	2b06      	cmp	r3, #6
 80027d0:	ddee      	ble.n	80027b0 <spinonce+0x170>
 80027d2:	e013      	b.n	80027fc <spinonce+0x1bc>
			else {for(int i=2;i<7;i+=2){buf[i] = USSn_DataRead(i);}}
 80027d4:	2302      	movs	r3, #2
 80027d6:	627b      	str	r3, [r7, #36]	; 0x24
 80027d8:	e00d      	b.n	80027f6 <spinonce+0x1b6>
 80027da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027dc:	f002 fba4 	bl	8004f28 <USSn_DataRead>
 80027e0:	4603      	mov	r3, r0
 80027e2:	b2d9      	uxtb	r1, r3
 80027e4:	f107 0208 	add.w	r2, r7, #8
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	4413      	add	r3, r2
 80027ec:	460a      	mov	r2, r1
 80027ee:	701a      	strb	r2, [r3, #0]
 80027f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f2:	3302      	adds	r3, #2
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	2b06      	cmp	r3, #6
 80027fa:	ddee      	ble.n	80027da <spinonce+0x19a>
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
//			buf[index++] = 0;
			buf[6] = inhome << 1;
 80027fc:	4b42      	ldr	r3, [pc, #264]	; (8002908 <spinonce+0x2c8>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	b2db      	uxtb	r3, r3
 8002804:	73bb      	strb	r3, [r7, #14]

			for(int i=0; i<4;i++){
 8002806:	2300      	movs	r3, #0
 8002808:	623b      	str	r3, [r7, #32]
 800280a:	e02b      	b.n	8002864 <spinonce+0x224>
				if(FDval[i]>50){buf[index] |= 1<<i+4;}
 800280c:	6a3b      	ldr	r3, [r7, #32]
 800280e:	005b      	lsls	r3, r3, #1
 8002810:	3338      	adds	r3, #56	; 0x38
 8002812:	443b      	add	r3, r7
 8002814:	f833 3c38 	ldrh.w	r3, [r3, #-56]
 8002818:	2b32      	cmp	r3, #50	; 0x32
 800281a:	d915      	bls.n	8002848 <spinonce+0x208>
 800281c:	f107 0208 	add.w	r2, r7, #8
 8002820:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002822:	4413      	add	r3, r2
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	b25a      	sxtb	r2, r3
 8002828:	6a3b      	ldr	r3, [r7, #32]
 800282a:	3304      	adds	r3, #4
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	b25b      	sxtb	r3, r3
 8002834:	4313      	orrs	r3, r2
 8002836:	b25b      	sxtb	r3, r3
 8002838:	b2d9      	uxtb	r1, r3
 800283a:	f107 0208 	add.w	r2, r7, #8
 800283e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002840:	4413      	add	r3, r2
 8002842:	460a      	mov	r2, r1
 8002844:	701a      	strb	r2, [r3, #0]
 8002846:	e00a      	b.n	800285e <spinonce+0x21e>
				else {buf[index] |= 0<<i+4;}
 8002848:	f107 0208 	add.w	r2, r7, #8
 800284c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284e:	4413      	add	r3, r2
 8002850:	7819      	ldrb	r1, [r3, #0]
 8002852:	f107 0208 	add.w	r2, r7, #8
 8002856:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002858:	4413      	add	r3, r2
 800285a:	460a      	mov	r2, r1
 800285c:	701a      	strb	r2, [r3, #0]
			for(int i=0; i<4;i++){
 800285e:	6a3b      	ldr	r3, [r7, #32]
 8002860:	3301      	adds	r3, #1
 8002862:	623b      	str	r3, [r7, #32]
 8002864:	6a3b      	ldr	r3, [r7, #32]
 8002866:	2b03      	cmp	r3, #3
 8002868:	ddd0      	ble.n	800280c <spinonce+0x1cc>
			}
			//buf[index] = 0;
			sendCan(CANID4, buf, 8, 1);//test
 800286a:	f107 0108 	add.w	r1, r7, #8
 800286e:	2301      	movs	r3, #1
 8002870:	2208      	movs	r2, #8
 8002872:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8002876:	f000 fbb7 	bl	8002fe8 <sendCan>
			index = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	637b      	str	r3, [r7, #52]	; 0x34

		}

		if(FLAG_RxCplt>0){
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <spinonce+0x2cc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f43f af06 	beq.w	8002694 <spinonce+0x54>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8002888:	2300      	movs	r3, #0
 800288a:	61fb      	str	r3, [r7, #28]
 800288c:	e00c      	b.n	80028a8 <spinonce+0x268>
 800288e:	4a20      	ldr	r2, [pc, #128]	; (8002910 <spinonce+0x2d0>)
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	4413      	add	r3, r2
 8002894:	7819      	ldrb	r1, [r3, #0]
 8002896:	f107 0210 	add.w	r2, r7, #16
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	4413      	add	r3, r2
 800289e:	460a      	mov	r2, r1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	3301      	adds	r3, #1
 80028a6:	61fb      	str	r3, [r7, #28]
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	2b07      	cmp	r3, #7
 80028ac:	ddef      	ble.n	800288e <spinonce+0x24e>
    		FLAG_RxCplt--;
 80028ae:	4b17      	ldr	r3, [pc, #92]	; (800290c <spinonce+0x2cc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	4a15      	ldr	r2, [pc, #84]	; (800290c <spinonce+0x2cc>)
 80028b6:	6013      	str	r3, [r2, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 80028b8:	4b16      	ldr	r3, [pc, #88]	; (8002914 <spinonce+0x2d4>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b15      	ldr	r3, [pc, #84]	; (8002914 <spinonce+0x2d4>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d929      	bls.n	8002918 <spinonce+0x2d8>
 80028c4:	4b13      	ldr	r3, [pc, #76]	; (8002914 <spinonce+0x2d4>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	633b      	str	r3, [r7, #48]	; 0x30
 80028ca:	e028      	b.n	800291e <spinonce+0x2de>
 80028cc:	0800aed4 	.word	0x0800aed4
 80028d0:	200001a1 	.word	0x200001a1
 80028d4:	200001a4 	.word	0x200001a4
 80028d8:	20000160 	.word	0x20000160
 80028dc:	20000150 	.word	0x20000150
 80028e0:	20000264 	.word	0x20000264
 80028e4:	20000158 	.word	0x20000158
 80028e8:	40020400 	.word	0x40020400
 80028ec:	0800ae94 	.word	0x0800ae94
 80028f0:	20000174 	.word	0x20000174
 80028f4:	20000148 	.word	0x20000148
 80028f8:	0800ae9c 	.word	0x0800ae9c
 80028fc:	20000178 	.word	0x20000178
 8002900:	2000015c 	.word	0x2000015c
 8002904:	20000170 	.word	0x20000170
 8002908:	200001ac 	.word	0x200001ac
 800290c:	20000214 	.word	0x20000214
 8002910:	20000218 	.word	0x20000218
 8002914:	20000220 	.word	0x20000220
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8002918:	4b49      	ldr	r3, [pc, #292]	; (8002a40 <spinonce+0x400>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	633b      	str	r3, [r7, #48]	; 0x30
			if(CanId==1001){printf("canid1001 ready: %d\n", ready_flag);}
 800291e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002920:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8002924:	4293      	cmp	r3, r2
 8002926:	d105      	bne.n	8002934 <spinonce+0x2f4>
 8002928:	4b46      	ldr	r3, [pc, #280]	; (8002a44 <spinonce+0x404>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	4619      	mov	r1, r3
 800292e:	4846      	ldr	r0, [pc, #280]	; (8002a48 <spinonce+0x408>)
 8002930:	f007 fa5e 	bl	8009df0 <iprintf>
			if(ready_flag)
 8002934:	4b43      	ldr	r3, [pc, #268]	; (8002a44 <spinonce+0x404>)
 8002936:	781b      	ldrb	r3, [r3, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d075      	beq.n	8002a28 <spinonce+0x3e8>
			{
				switch(CanId)
 800293c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293e:	4a43      	ldr	r2, [pc, #268]	; (8002a4c <spinonce+0x40c>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d051      	beq.n	80029e8 <spinonce+0x3a8>
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	4a41      	ldr	r2, [pc, #260]	; (8002a4c <spinonce+0x40c>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d870      	bhi.n	8002a2e <spinonce+0x3ee>
 800294c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294e:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002952:	4293      	cmp	r3, r2
 8002954:	d042      	beq.n	80029dc <spinonce+0x39c>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	f640 72a1 	movw	r2, #4001	; 0xfa1
 800295c:	4293      	cmp	r3, r2
 800295e:	d866      	bhi.n	8002a2e <spinonce+0x3ee>
 8002960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002962:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002966:	4293      	cmp	r3, r2
 8002968:	d032      	beq.n	80029d0 <spinonce+0x390>
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	f640 32b9 	movw	r2, #3001	; 0xbb9
 8002970:	4293      	cmp	r3, r2
 8002972:	d85c      	bhi.n	8002a2e <spinonce+0x3ee>
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	f240 7201 	movw	r2, #1793	; 0x701
 800297a:	4293      	cmp	r3, r2
 800297c:	d051      	beq.n	8002a22 <spinonce+0x3e2>
 800297e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002980:	f240 7201 	movw	r2, #1793	; 0x701
 8002984:	4293      	cmp	r3, r2
 8002986:	d852      	bhi.n	8002a2e <spinonce+0x3ee>
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	f240 5281 	movw	r2, #1409	; 0x581
 800298e:	4293      	cmp	r3, r2
 8002990:	d030      	beq.n	80029f4 <spinonce+0x3b4>
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	f240 5281 	movw	r2, #1409	; 0x581
 8002998:	4293      	cmp	r3, r2
 800299a:	d848      	bhi.n	8002a2e <spinonce+0x3ee>
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d005      	beq.n	80029b2 <spinonce+0x372>
 80029a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a8:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d009      	beq.n	80029c4 <spinonce+0x384>
 80029b0:	e03d      	b.n	8002a2e <spinonce+0x3ee>
				{
				case CANID1:
					parseCmdvel(canbuf);
 80029b2:	f107 0310 	add.w	r3, r7, #16
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff fae8 	bl	8001f8c <parseCmdvel>
					printf("parseCmdvel\n");
 80029bc:	4824      	ldr	r0, [pc, #144]	; (8002a50 <spinonce+0x410>)
 80029be:	f007 fa9d 	bl	8009efc <puts>
					break;
 80029c2:	e034      	b.n	8002a2e <spinonce+0x3ee>

				case CANID2:
					parseState(canbuf);
 80029c4:	f107 0310 	add.w	r3, r7, #16
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff f9a5 	bl	8001d18 <parseState>
					break;
 80029ce:	e02e      	b.n	8002a2e <spinonce+0x3ee>

				case CANID5:
					parseTop(canbuf);
 80029d0:	f107 0310 	add.w	r3, r7, #16
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7ff f973 	bl	8001cc0 <parseTop>
					break;
 80029da:	e028      	b.n	8002a2e <spinonce+0x3ee>

				case CANID6:
					parsePmm(canbuf);
 80029dc:	f107 0310 	add.w	r3, r7, #16
 80029e0:	4618      	mov	r0, r3
 80029e2:	f7ff f93b 	bl	8001c5c <parsePmm>
					break;
 80029e6:	e022      	b.n	8002a2e <spinonce+0x3ee>

				case CANID7:
					parseEnc(canbuf);
 80029e8:	f107 0310 	add.w	r3, r7, #16
 80029ec:	4618      	mov	r0, r3
 80029ee:	f7ff fc45 	bl	800227c <parseEnc>
					break;
 80029f2:	e01c      	b.n	8002a2e <spinonce+0x3ee>

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 80029f4:	7c7b      	ldrb	r3, [r7, #17]
 80029f6:	2b6c      	cmp	r3, #108	; 0x6c
 80029f8:	d107      	bne.n	8002a0a <spinonce+0x3ca>
 80029fa:	7cbb      	ldrb	r3, [r7, #18]
 80029fc:	2b60      	cmp	r3, #96	; 0x60
 80029fe:	d104      	bne.n	8002a0a <spinonce+0x3ca>
						parseEnc114(canbuf);
 8002a00:	f107 0310 	add.w	r3, r7, #16
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fcb9 	bl	800237c <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 8002a0a:	7c7b      	ldrb	r3, [r7, #17]
 8002a0c:	2b3f      	cmp	r3, #63	; 0x3f
 8002a0e:	d10d      	bne.n	8002a2c <spinonce+0x3ec>
 8002a10:	7cbb      	ldrb	r3, [r7, #18]
 8002a12:	2b60      	cmp	r3, #96	; 0x60
 8002a14:	d10a      	bne.n	8002a2c <spinonce+0x3ec>
						parseState114(canbuf);
 8002a16:	f107 0310 	add.w	r3, r7, #16
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fd00 	bl	8002420 <parseState114>
					break;
 8002a20:	e004      	b.n	8002a2c <spinonce+0x3ec>

				case MOTOR114_START_ID:
					startMotor();
 8002a22:	f001 fbb9 	bl	8004198 <startMotor>
					break;
 8002a26:	e002      	b.n	8002a2e <spinonce+0x3ee>
				}
			}
 8002a28:	bf00      	nop
 8002a2a:	e000      	b.n	8002a2e <spinonce+0x3ee>
					break;
 8002a2c:	bf00      	nop


			g_tCan_Rx_Header.StdId=0;
 8002a2e:	4b04      	ldr	r3, [pc, #16]	; (8002a40 <spinonce+0x400>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 8002a34:	4b02      	ldr	r3, [pc, #8]	; (8002a40 <spinonce+0x400>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	605a      	str	r2, [r3, #4]
			CanId = 0;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30
		if(Tick_100ms>FDsen_seq+10) {		//for monitor iteration.
 8002a3e:	e629      	b.n	8002694 <spinonce+0x54>
 8002a40:	20000220 	.word	0x20000220
 8002a44:	200001a0 	.word	0x200001a0
 8002a48:	0800aeb0 	.word	0x0800aeb0
 8002a4c:	00b8b701 	.word	0x00b8b701
 8002a50:	0800aec8 	.word	0x0800aec8

08002a54 <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0




	IRDUTY0;
 8002a58:	4b0e      	ldr	r3, [pc, #56]	; (8002a94 <TransmitterIR_init+0x40>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 8002a60:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <TransmitterIR_init+0x44>)
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 8002a66:	4b0c      	ldr	r3, [pc, #48]	; (8002a98 <TransmitterIR_init+0x44>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 8002a6c:	4b0a      	ldr	r3, [pc, #40]	; (8002a98 <TransmitterIR_init+0x44>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <TransmitterIR_init+0x44>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 8002a78:	4b07      	ldr	r3, [pc, #28]	; (8002a98 <TransmitterIR_init+0x44>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 8002a7e:	4b07      	ldr	r3, [pc, #28]	; (8002a9c <TransmitterIR_init+0x48>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 8002a84:	4b05      	ldr	r3, [pc, #20]	; (8002a9c <TransmitterIR_init+0x48>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	605a      	str	r2, [r3, #4]




}
 8002a8a:	bf00      	nop
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	200002d4 	.word	0x200002d4
 8002a98:	20000200 	.word	0x20000200
 8002a9c:	200001b8 	.word	0x200001b8

08002aa0 <tick>:

    UNLOCK();
    return bitlength;
}

void tick(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 8002aa4:	4b80      	ldr	r3, [pc, #512]	; (8002ca8 <tick+0x208>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	f200 8247 	bhi.w	8002f3c <tick+0x49c>
 8002aae:	a201      	add	r2, pc, #4	; (adr r2, 8002ab4 <tick+0x14>)
 8002ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab4:	08002ac5 	.word	0x08002ac5
 8002ab8:	08002adf 	.word	0x08002adf
 8002abc:	08002bc5 	.word	0x08002bc5
 8002ac0:	08002e2b 	.word	0x08002e2b
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8002ac4:	4b78      	ldr	r3, [pc, #480]	; (8002ca8 <tick+0x208>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8002aca:	4b77      	ldr	r3, [pc, #476]	; (8002ca8 <tick+0x208>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8002ad0:	4b75      	ldr	r3, [pc, #468]	; (8002ca8 <tick+0x208>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8002ad6:	4b74      	ldr	r3, [pc, #464]	; (8002ca8 <tick+0x208>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	611a      	str	r2, [r3, #16]
            break;
 8002adc:	e235      	b.n	8002f4a <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8002ade:	4b73      	ldr	r3, [pc, #460]	; (8002cac <tick+0x20c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d121      	bne.n	8002b2a <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002ae6:	4b70      	ldr	r3, [pc, #448]	; (8002ca8 <tick+0x208>)
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	4b71      	ldr	r3, [pc, #452]	; (8002cb0 <tick+0x210>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	da04      	bge.n	8002afc <tick+0x5c>
                    IRDUTY50;
 8002af2:	4b70      	ldr	r3, [pc, #448]	; (8002cb4 <tick+0x214>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2234      	movs	r2, #52	; 0x34
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34
 8002afa:	e003      	b.n	8002b04 <tick+0x64>
                } else {
                    IRDUTY0;
 8002afc:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <tick+0x214>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2200      	movs	r2, #0
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002b04:	4b68      	ldr	r3, [pc, #416]	; (8002ca8 <tick+0x208>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	3301      	adds	r3, #1
 8002b0a:	4a67      	ldr	r2, [pc, #412]	; (8002ca8 <tick+0x208>)
 8002b0c:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002b0e:	4b68      	ldr	r3, [pc, #416]	; (8002cb0 <tick+0x210>)
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b69      	ldr	r3, [pc, #420]	; (8002cb8 <tick+0x218>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	441a      	add	r2, r3
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <tick+0x208>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	f300 820f 	bgt.w	8002f40 <tick+0x4a0>
                    TIR_work.state = Data;
 8002b22:	4b61      	ldr	r3, [pc, #388]	; (8002ca8 <tick+0x208>)
 8002b24:	2202      	movs	r2, #2
 8002b26:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002b28:	e20a      	b.n	8002f40 <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <tick+0x20c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b03      	cmp	r3, #3
 8002b30:	d121      	bne.n	8002b76 <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002b32:	4b5d      	ldr	r3, [pc, #372]	; (8002ca8 <tick+0x208>)
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	4b61      	ldr	r3, [pc, #388]	; (8002cbc <tick+0x21c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	da04      	bge.n	8002b48 <tick+0xa8>
                    IRDUTY50;
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <tick+0x214>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2234      	movs	r2, #52	; 0x34
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
 8002b46:	e003      	b.n	8002b50 <tick+0xb0>
                    IRDUTY0;
 8002b48:	4b5a      	ldr	r3, [pc, #360]	; (8002cb4 <tick+0x214>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002b50:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <tick+0x208>)
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	3301      	adds	r3, #1
 8002b56:	4a54      	ldr	r2, [pc, #336]	; (8002ca8 <tick+0x208>)
 8002b58:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8002b5a:	4b58      	ldr	r3, [pc, #352]	; (8002cbc <tick+0x21c>)
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	4b58      	ldr	r3, [pc, #352]	; (8002cc0 <tick+0x220>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	441a      	add	r2, r3
 8002b64:	4b50      	ldr	r3, [pc, #320]	; (8002ca8 <tick+0x208>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f300 81e9 	bgt.w	8002f40 <tick+0x4a0>
                    TIR_work.state = Data;
 8002b6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ca8 <tick+0x208>)
 8002b70:	2202      	movs	r2, #2
 8002b72:	701a      	strb	r2, [r3, #0]
            break;
 8002b74:	e1e4      	b.n	8002f40 <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 8002b76:	4b4d      	ldr	r3, [pc, #308]	; (8002cac <tick+0x20c>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	2b05      	cmp	r3, #5
 8002b7c:	f040 81e0 	bne.w	8002f40 <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8002b80:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <tick+0x208>)
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <tick+0x224>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	da04      	bge.n	8002b96 <tick+0xf6>
                    IRDUTY50;
 8002b8c:	4b49      	ldr	r3, [pc, #292]	; (8002cb4 <tick+0x214>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2234      	movs	r2, #52	; 0x34
 8002b92:	635a      	str	r2, [r3, #52]	; 0x34
 8002b94:	e003      	b.n	8002b9e <tick+0xfe>
                    IRDUTY0;
 8002b96:	4b47      	ldr	r3, [pc, #284]	; (8002cb4 <tick+0x214>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002b9e:	4b42      	ldr	r3, [pc, #264]	; (8002ca8 <tick+0x208>)
 8002ba0:	689b      	ldr	r3, [r3, #8]
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	4a40      	ldr	r2, [pc, #256]	; (8002ca8 <tick+0x208>)
 8002ba6:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8002ba8:	4b46      	ldr	r3, [pc, #280]	; (8002cc4 <tick+0x224>)
 8002baa:	681a      	ldr	r2, [r3, #0]
 8002bac:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <tick+0x228>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	441a      	add	r2, r3
 8002bb2:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <tick+0x208>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	f300 81c2 	bgt.w	8002f40 <tick+0x4a0>
                    TIR_work.state = Data;
 8002bbc:	4b3a      	ldr	r3, [pc, #232]	; (8002ca8 <tick+0x208>)
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	701a      	strb	r2, [r3, #0]
            break;
 8002bc2:	e1bd      	b.n	8002f40 <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 8002bc4:	4b39      	ldr	r3, [pc, #228]	; (8002cac <tick+0x20c>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b01      	cmp	r3, #1
 8002bca:	d15b      	bne.n	8002c84 <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8002bcc:	4b36      	ldr	r3, [pc, #216]	; (8002ca8 <tick+0x208>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d109      	bne.n	8002be8 <tick+0x148>
                    IRDUTY50;
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <tick+0x214>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	2234      	movs	r2, #52	; 0x34
 8002bda:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002bdc:	4b32      	ldr	r3, [pc, #200]	; (8002ca8 <tick+0x208>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	3301      	adds	r3, #1
 8002be2:	4a31      	ldr	r2, [pc, #196]	; (8002ca8 <tick+0x208>)
 8002be4:	60d3      	str	r3, [r2, #12]
 8002be6:	e042      	b.n	8002c6e <tick+0x1ce>
                } else {
                    IRDUTY0;
 8002be8:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <tick+0x214>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2200      	movs	r2, #0
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002bf0:	4b2d      	ldr	r3, [pc, #180]	; (8002ca8 <tick+0x208>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	da00      	bge.n	8002bfa <tick+0x15a>
 8002bf8:	3307      	adds	r3, #7
 8002bfa:	10db      	asrs	r3, r3, #3
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4b2b      	ldr	r3, [pc, #172]	; (8002cac <tick+0x20c>)
 8002c00:	4413      	add	r3, r2
 8002c02:	7a1b      	ldrb	r3, [r3, #8]
 8002c04:	4619      	mov	r1, r3
 8002c06:	4b28      	ldr	r3, [pc, #160]	; (8002ca8 <tick+0x208>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	425a      	negs	r2, r3
 8002c0c:	f003 0307 	and.w	r3, r3, #7
 8002c10:	f002 0207 	and.w	r2, r2, #7
 8002c14:	bf58      	it	pl
 8002c16:	4253      	negpl	r3, r2
 8002c18:	fa41 f303 	asr.w	r3, r1, r3
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 8002c24:	4b20      	ldr	r3, [pc, #128]	; (8002ca8 <tick+0x208>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	2b02      	cmp	r3, #2
 8002c2a:	dd08      	ble.n	8002c3e <tick+0x19e>
                            TIR_work.bitcount++;
 8002c2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <tick+0x208>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	3301      	adds	r3, #1
 8002c32:	4a1d      	ldr	r2, [pc, #116]	; (8002ca8 <tick+0x208>)
 8002c34:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <tick+0x208>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	60da      	str	r2, [r3, #12]
 8002c3c:	e017      	b.n	8002c6e <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002c3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ca8 <tick+0x208>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	3301      	adds	r3, #1
 8002c44:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <tick+0x208>)
 8002c46:	60d3      	str	r3, [r2, #12]
 8002c48:	e011      	b.n	8002c6e <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8002c4a:	4b17      	ldr	r3, [pc, #92]	; (8002ca8 <tick+0x208>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	dd08      	ble.n	8002c64 <tick+0x1c4>
                            TIR_work.bitcount++;
 8002c52:	4b15      	ldr	r3, [pc, #84]	; (8002ca8 <tick+0x208>)
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	3301      	adds	r3, #1
 8002c58:	4a13      	ldr	r2, [pc, #76]	; (8002ca8 <tick+0x208>)
 8002c5a:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002c5c:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <tick+0x208>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	e004      	b.n	8002c6e <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002c64:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <tick+0x208>)
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	3301      	adds	r3, #1
 8002c6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ca8 <tick+0x208>)
 8002c6c:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002c6e:	4b0f      	ldr	r3, [pc, #60]	; (8002cac <tick+0x20c>)
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <tick+0x208>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	429a      	cmp	r2, r3
 8002c78:	f300 8164 	bgt.w	8002f44 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002c7c:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <tick+0x208>)
 8002c7e:	2203      	movs	r2, #3
 8002c80:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8002c82:	e15f      	b.n	8002f44 <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 8002c84:	4b09      	ldr	r3, [pc, #36]	; (8002cac <tick+0x20c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b03      	cmp	r3, #3
 8002c8a:	d16d      	bne.n	8002d68 <tick+0x2c8>
                if (TIR_work.data == 0) {
 8002c8c:	4b06      	ldr	r3, [pc, #24]	; (8002ca8 <tick+0x208>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d11b      	bne.n	8002ccc <tick+0x22c>
                    IRDUTY50;
 8002c94:	4b07      	ldr	r3, [pc, #28]	; (8002cb4 <tick+0x214>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2234      	movs	r2, #52	; 0x34
 8002c9a:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002c9c:	4b02      	ldr	r3, [pc, #8]	; (8002ca8 <tick+0x208>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a01      	ldr	r2, [pc, #4]	; (8002ca8 <tick+0x208>)
 8002ca4:	60d3      	str	r3, [r2, #12]
 8002ca6:	e054      	b.n	8002d52 <tick+0x2b2>
 8002ca8:	20000200 	.word	0x20000200
 8002cac:	200001b8 	.word	0x200001b8
 8002cb0:	0800aef4 	.word	0x0800aef4
 8002cb4:	200002d4 	.word	0x200002d4
 8002cb8:	0800aef8 	.word	0x0800aef8
 8002cbc:	0800aefc 	.word	0x0800aefc
 8002cc0:	0800af00 	.word	0x0800af00
 8002cc4:	0800af04 	.word	0x0800af04
 8002cc8:	0800af08 	.word	0x0800af08
                    IRDUTY0;
 8002ccc:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <tick+0x474>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002cd4:	4b90      	ldr	r3, [pc, #576]	; (8002f18 <tick+0x478>)
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	da00      	bge.n	8002cde <tick+0x23e>
 8002cdc:	3307      	adds	r3, #7
 8002cde:	10db      	asrs	r3, r3, #3
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b8e      	ldr	r3, [pc, #568]	; (8002f1c <tick+0x47c>)
 8002ce4:	4413      	add	r3, r2
 8002ce6:	7a1b      	ldrb	r3, [r3, #8]
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4b8b      	ldr	r3, [pc, #556]	; (8002f18 <tick+0x478>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	425a      	negs	r2, r3
 8002cf0:	f003 0307 	and.w	r3, r3, #7
 8002cf4:	f002 0207 	and.w	r2, r2, #7
 8002cf8:	bf58      	it	pl
 8002cfa:	4253      	negpl	r3, r2
 8002cfc:	fa41 f303 	asr.w	r3, r1, r3
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d012      	beq.n	8002d2e <tick+0x28e>
                        if (3 <= TIR_work.data) {
 8002d08:	4b83      	ldr	r3, [pc, #524]	; (8002f18 <tick+0x478>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	dd08      	ble.n	8002d22 <tick+0x282>
                            TIR_work.bitcount++;
 8002d10:	4b81      	ldr	r3, [pc, #516]	; (8002f18 <tick+0x478>)
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	3301      	adds	r3, #1
 8002d16:	4a80      	ldr	r2, [pc, #512]	; (8002f18 <tick+0x478>)
 8002d18:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d1a:	4b7f      	ldr	r3, [pc, #508]	; (8002f18 <tick+0x478>)
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	60da      	str	r2, [r3, #12]
 8002d20:	e017      	b.n	8002d52 <tick+0x2b2>
                            TIR_work.data++;
 8002d22:	4b7d      	ldr	r3, [pc, #500]	; (8002f18 <tick+0x478>)
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	3301      	adds	r3, #1
 8002d28:	4a7b      	ldr	r2, [pc, #492]	; (8002f18 <tick+0x478>)
 8002d2a:	60d3      	str	r3, [r2, #12]
 8002d2c:	e011      	b.n	8002d52 <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 8002d2e:	4b7a      	ldr	r3, [pc, #488]	; (8002f18 <tick+0x478>)
 8002d30:	68db      	ldr	r3, [r3, #12]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	dd08      	ble.n	8002d48 <tick+0x2a8>
                            TIR_work.bitcount++;
 8002d36:	4b78      	ldr	r3, [pc, #480]	; (8002f18 <tick+0x478>)
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	4a76      	ldr	r2, [pc, #472]	; (8002f18 <tick+0x478>)
 8002d3e:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d40:	4b75      	ldr	r3, [pc, #468]	; (8002f18 <tick+0x478>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e004      	b.n	8002d52 <tick+0x2b2>
                            TIR_work.data++;
 8002d48:	4b73      	ldr	r3, [pc, #460]	; (8002f18 <tick+0x478>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	4a72      	ldr	r2, [pc, #456]	; (8002f18 <tick+0x478>)
 8002d50:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <tick+0x47c>)
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4b70      	ldr	r3, [pc, #448]	; (8002f18 <tick+0x478>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	f300 80f2 	bgt.w	8002f44 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002d60:	4b6d      	ldr	r3, [pc, #436]	; (8002f18 <tick+0x478>)
 8002d62:	2203      	movs	r2, #3
 8002d64:	701a      	strb	r2, [r3, #0]
            break;
 8002d66:	e0ed      	b.n	8002f44 <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 8002d68:	4b6c      	ldr	r3, [pc, #432]	; (8002f1c <tick+0x47c>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	2b05      	cmp	r3, #5
 8002d6e:	f040 80e9 	bne.w	8002f44 <tick+0x4a4>
                if (TIR_work.data == 0) {
 8002d72:	4b69      	ldr	r3, [pc, #420]	; (8002f18 <tick+0x478>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d109      	bne.n	8002d8e <tick+0x2ee>
                    IRDUTY0;
 8002d7a:	4b66      	ldr	r3, [pc, #408]	; (8002f14 <tick+0x474>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002d82:	4b65      	ldr	r3, [pc, #404]	; (8002f18 <tick+0x478>)
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	3301      	adds	r3, #1
 8002d88:	4a63      	ldr	r2, [pc, #396]	; (8002f18 <tick+0x478>)
 8002d8a:	60d3      	str	r3, [r2, #12]
 8002d8c:	e042      	b.n	8002e14 <tick+0x374>
                    IRDUTY50;
 8002d8e:	4b61      	ldr	r3, [pc, #388]	; (8002f14 <tick+0x474>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2234      	movs	r2, #52	; 0x34
 8002d94:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002d96:	4b60      	ldr	r3, [pc, #384]	; (8002f18 <tick+0x478>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	da00      	bge.n	8002da0 <tick+0x300>
 8002d9e:	3307      	adds	r3, #7
 8002da0:	10db      	asrs	r3, r3, #3
 8002da2:	461a      	mov	r2, r3
 8002da4:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <tick+0x47c>)
 8002da6:	4413      	add	r3, r2
 8002da8:	7a1b      	ldrb	r3, [r3, #8]
 8002daa:	4619      	mov	r1, r3
 8002dac:	4b5a      	ldr	r3, [pc, #360]	; (8002f18 <tick+0x478>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	425a      	negs	r2, r3
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	f002 0207 	and.w	r2, r2, #7
 8002dba:	bf58      	it	pl
 8002dbc:	4253      	negpl	r3, r2
 8002dbe:	fa41 f303 	asr.w	r3, r1, r3
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d012      	beq.n	8002df0 <tick+0x350>
                        if (2 <= TIR_work.data) {
 8002dca:	4b53      	ldr	r3, [pc, #332]	; (8002f18 <tick+0x478>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	dd08      	ble.n	8002de4 <tick+0x344>
                            TIR_work.bitcount++;
 8002dd2:	4b51      	ldr	r3, [pc, #324]	; (8002f18 <tick+0x478>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	4a4f      	ldr	r2, [pc, #316]	; (8002f18 <tick+0x478>)
 8002dda:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002ddc:	4b4e      	ldr	r3, [pc, #312]	; (8002f18 <tick+0x478>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	60da      	str	r2, [r3, #12]
 8002de2:	e017      	b.n	8002e14 <tick+0x374>
                            TIR_work.data++;
 8002de4:	4b4c      	ldr	r3, [pc, #304]	; (8002f18 <tick+0x478>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	3301      	adds	r3, #1
 8002dea:	4a4b      	ldr	r2, [pc, #300]	; (8002f18 <tick+0x478>)
 8002dec:	60d3      	str	r3, [r2, #12]
 8002dee:	e011      	b.n	8002e14 <tick+0x374>
                        if (1 <= TIR_work.data) {
 8002df0:	4b49      	ldr	r3, [pc, #292]	; (8002f18 <tick+0x478>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dd08      	ble.n	8002e0a <tick+0x36a>
                            TIR_work.bitcount++;
 8002df8:	4b47      	ldr	r3, [pc, #284]	; (8002f18 <tick+0x478>)
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	3301      	adds	r3, #1
 8002dfe:	4a46      	ldr	r2, [pc, #280]	; (8002f18 <tick+0x478>)
 8002e00:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002e02:	4b45      	ldr	r3, [pc, #276]	; (8002f18 <tick+0x478>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	60da      	str	r2, [r3, #12]
 8002e08:	e004      	b.n	8002e14 <tick+0x374>
                            TIR_work.data++;
 8002e0a:	4b43      	ldr	r3, [pc, #268]	; (8002f18 <tick+0x478>)
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	4a41      	ldr	r2, [pc, #260]	; (8002f18 <tick+0x478>)
 8002e12:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002e14:	4b41      	ldr	r3, [pc, #260]	; (8002f1c <tick+0x47c>)
 8002e16:	685a      	ldr	r2, [r3, #4]
 8002e18:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <tick+0x478>)
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	f300 8091 	bgt.w	8002f44 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <tick+0x478>)
 8002e24:	2203      	movs	r2, #3
 8002e26:	701a      	strb	r2, [r3, #0]
            break;
 8002e28:	e08c      	b.n	8002f44 <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 8002e2a:	4b3c      	ldr	r3, [pc, #240]	; (8002f1c <tick+0x47c>)
 8002e2c:	781b      	ldrb	r3, [r3, #0]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d126      	bne.n	8002e80 <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8002e32:	4b39      	ldr	r3, [pc, #228]	; (8002f18 <tick+0x478>)
 8002e34:	691a      	ldr	r2, [r3, #16]
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <tick+0x480>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	da04      	bge.n	8002e48 <tick+0x3a8>
                    IRDUTY50;
 8002e3e:	4b35      	ldr	r3, [pc, #212]	; (8002f14 <tick+0x474>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2234      	movs	r2, #52	; 0x34
 8002e44:	635a      	str	r2, [r3, #52]	; 0x34
 8002e46:	e003      	b.n	8002e50 <tick+0x3b0>
                } else {
                    IRDUTY0;
 8002e48:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <tick+0x474>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8002e50:	4b31      	ldr	r3, [pc, #196]	; (8002f18 <tick+0x478>)
 8002e52:	691b      	ldr	r3, [r3, #16]
 8002e54:	3301      	adds	r3, #1
 8002e56:	4a30      	ldr	r2, [pc, #192]	; (8002f18 <tick+0x478>)
 8002e58:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8002e5a:	4b31      	ldr	r3, [pc, #196]	; (8002f20 <tick+0x480>)
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	4b31      	ldr	r3, [pc, #196]	; (8002f24 <tick+0x484>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	441a      	add	r2, r3
 8002e64:	4b2c      	ldr	r3, [pc, #176]	; (8002f18 <tick+0x478>)
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	dc6d      	bgt.n	8002f48 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002e6c:	4b2a      	ldr	r3, [pc, #168]	; (8002f18 <tick+0x478>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8002e72:	482d      	ldr	r0, [pc, #180]	; (8002f28 <tick+0x488>)
 8002e74:	f005 f9d6 	bl	8008224 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
 8002e78:	2028      	movs	r0, #40	; 0x28
 8002e7a:	f003 fdc0 	bl	80069fe <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8002e7e:	e063      	b.n	8002f48 <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 8002e80:	4b26      	ldr	r3, [pc, #152]	; (8002f1c <tick+0x47c>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d120      	bne.n	8002eca <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8002e88:	4b23      	ldr	r3, [pc, #140]	; (8002f18 <tick+0x478>)
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	4b27      	ldr	r3, [pc, #156]	; (8002f2c <tick+0x48c>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	da04      	bge.n	8002e9e <tick+0x3fe>
                    IRDUTY50;
 8002e94:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <tick+0x474>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2234      	movs	r2, #52	; 0x34
 8002e9a:	635a      	str	r2, [r3, #52]	; 0x34
 8002e9c:	e003      	b.n	8002ea6 <tick+0x406>
                    IRDUTY0;
 8002e9e:	4b1d      	ldr	r3, [pc, #116]	; (8002f14 <tick+0x474>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002ea6:	4b1c      	ldr	r3, [pc, #112]	; (8002f18 <tick+0x478>)
 8002ea8:	691b      	ldr	r3, [r3, #16]
 8002eaa:	3301      	adds	r3, #1
 8002eac:	4a1a      	ldr	r2, [pc, #104]	; (8002f18 <tick+0x478>)
 8002eae:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8002eb0:	4b1e      	ldr	r3, [pc, #120]	; (8002f2c <tick+0x48c>)
 8002eb2:	681a      	ldr	r2, [r3, #0]
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <tick+0x490>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	441a      	add	r2, r3
 8002eba:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <tick+0x478>)
 8002ebc:	691b      	ldr	r3, [r3, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	dc42      	bgt.n	8002f48 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002ec2:	4b15      	ldr	r3, [pc, #84]	; (8002f18 <tick+0x478>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
            break;
 8002ec8:	e03e      	b.n	8002f48 <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 8002eca:	4b14      	ldr	r3, [pc, #80]	; (8002f1c <tick+0x47c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b05      	cmp	r3, #5
 8002ed0:	d13a      	bne.n	8002f48 <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <tick+0x478>)
 8002ed4:	691a      	ldr	r2, [r3, #16]
 8002ed6:	4b17      	ldr	r3, [pc, #92]	; (8002f34 <tick+0x494>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	da04      	bge.n	8002ee8 <tick+0x448>
                    IRDUTY50;
 8002ede:	4b0d      	ldr	r3, [pc, #52]	; (8002f14 <tick+0x474>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2234      	movs	r2, #52	; 0x34
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee6:	e003      	b.n	8002ef0 <tick+0x450>
                    IRDUTY0;
 8002ee8:	4b0a      	ldr	r3, [pc, #40]	; (8002f14 <tick+0x474>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2200      	movs	r2, #0
 8002eee:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002ef0:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <tick+0x478>)
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	3301      	adds	r3, #1
 8002ef6:	4a08      	ldr	r2, [pc, #32]	; (8002f18 <tick+0x478>)
 8002ef8:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 8002efa:	4b0e      	ldr	r3, [pc, #56]	; (8002f34 <tick+0x494>)
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	4b0e      	ldr	r3, [pc, #56]	; (8002f38 <tick+0x498>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	441a      	add	r2, r3
 8002f04:	4b04      	ldr	r3, [pc, #16]	; (8002f18 <tick+0x478>)
 8002f06:	691b      	ldr	r3, [r3, #16]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	dc1d      	bgt.n	8002f48 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002f0c:	4b02      	ldr	r3, [pc, #8]	; (8002f18 <tick+0x478>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	701a      	strb	r2, [r3, #0]
            break;
 8002f12:	e019      	b.n	8002f48 <tick+0x4a8>
 8002f14:	200002d4 	.word	0x200002d4
 8002f18:	20000200 	.word	0x20000200
 8002f1c:	200001b8 	.word	0x200001b8
 8002f20:	0800af0c 	.word	0x0800af0c
 8002f24:	0800af10 	.word	0x0800af10
 8002f28:	20000404 	.word	0x20000404
 8002f2c:	0800af14 	.word	0x0800af14
 8002f30:	0800af18 	.word	0x0800af18
 8002f34:	0800af1c 	.word	0x0800af1c
 8002f38:	0800af20 	.word	0x0800af20
        default:
            break;
 8002f3c:	bf00      	nop
 8002f3e:	e004      	b.n	8002f4a <tick+0x4aa>
            break;
 8002f40:	bf00      	nop
 8002f42:	e002      	b.n	8002f4a <tick+0x4aa>
            break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <tick+0x4aa>
            break;
 8002f48:	bf00      	nop
    }
    UNLOCK();
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop

08002f50 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <CanInit+0x90>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002f60:	4b1f      	ldr	r3, [pc, #124]	; (8002fe0 <CanInit+0x90>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <CanInit+0x90>)
 8002f68:	2201      	movs	r2, #1
 8002f6a:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	0c1b      	lsrs	r3, r3, #16
 8002f70:	4a1b      	ldr	r2, [pc, #108]	; (8002fe0 <CanInit+0x90>)
 8002f72:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	4a18      	ldr	r2, [pc, #96]	; (8002fe0 <CanInit+0x90>)
 8002f7e:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	0c1b      	lsrs	r3, r3, #16
 8002f84:	4a16      	ldr	r2, [pc, #88]	; (8002fe0 <CanInit+0x90>)
 8002f86:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002f8e:	4013      	ands	r3, r2
 8002f90:	4a13      	ldr	r2, [pc, #76]	; (8002fe0 <CanInit+0x90>)
 8002f92:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8002f94:	4b12      	ldr	r3, [pc, #72]	; (8002fe0 <CanInit+0x90>)
 8002f96:	2200      	movs	r2, #0
 8002f98:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8002f9a:	4b11      	ldr	r3, [pc, #68]	; (8002fe0 <CanInit+0x90>)
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8002fa0:	4b0f      	ldr	r3, [pc, #60]	; (8002fe0 <CanInit+0x90>)
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8002fa6:	480f      	ldr	r0, [pc, #60]	; (8002fe4 <CanInit+0x94>)
 8002fa8:	f002 ff52 	bl	8005e50 <HAL_CAN_Start>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d001      	beq.n	8002fb6 <CanInit+0x66>
 8002fb2:	f000 fd37 	bl	8003a24 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8002fb6:	2102      	movs	r1, #2
 8002fb8:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <CanInit+0x94>)
 8002fba:	f003 f9af 	bl	800631c <HAL_CAN_ActivateNotification>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d000      	beq.n	8002fc6 <CanInit+0x76>
 8002fc4:	e7fe      	b.n	8002fc4 <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8002fc6:	4906      	ldr	r1, [pc, #24]	; (8002fe0 <CanInit+0x90>)
 8002fc8:	4806      	ldr	r0, [pc, #24]	; (8002fe4 <CanInit+0x94>)
 8002fca:	f002 fe61 	bl	8005c90 <HAL_CAN_ConfigFilter>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d001      	beq.n	8002fd8 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8002fd4:	f000 fd26 	bl	8003a24 <Error_Handler>
    }
}
 8002fd8:	bf00      	nop
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	2000023c 	.word	0x2000023c
 8002fe4:	200002ac 	.word	0x200002ac

08002fe8 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08c      	sub	sp, #48	; 0x30
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	4611      	mov	r1, r2
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	71fb      	strb	r3, [r7, #7]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8003006:	2300      	movs	r3, #0
 8003008:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 800300a:	79bb      	ldrb	r3, [r7, #6]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d001      	beq.n	8003014 <sendCan+0x2c>
 8003010:	2304      	movs	r3, #4
 8003012:	e000      	b.n	8003016 <sendCan+0x2e>
 8003014:	2300      	movs	r3, #0
 8003016:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8003022:	480e      	ldr	r0, [pc, #56]	; (800305c <sendCan+0x74>)
 8003024:	f003 f833 	bl	800608e <HAL_CAN_GetTxMailboxesFreeLevel>
 8003028:	4603      	mov	r3, r0
 800302a:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d010      	beq.n	8003054 <sendCan+0x6c>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8003032:	f107 0310 	add.w	r3, r7, #16
 8003036:	f107 0114 	add.w	r1, r7, #20
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4807      	ldr	r0, [pc, #28]	; (800305c <sendCan+0x74>)
 800303e:	f002 ff4b 	bl	8005ed8 <HAL_CAN_AddTxMessage>
 8003042:	4603      	mov	r3, r0
 8003044:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 8003046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	d000      	beq.n	800304e <sendCan+0x66>
 800304c:	e7fe      	b.n	800304c <sendCan+0x64>
        printf("cansend\n");
 800304e:	4804      	ldr	r0, [pc, #16]	; (8003060 <sendCan+0x78>)
 8003050:	f006 ff54 	bl	8009efc <puts>
    }
}
 8003054:	bf00      	nop
 8003056:	3730      	adds	r7, #48	; 0x30
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	200002ac 	.word	0x200002ac
 8003060:	0800aedc 	.word	0x0800aedc

08003064 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 800306c:	4b09      	ldr	r3, [pc, #36]	; (8003094 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 800306e:	4a0a      	ldr	r2, [pc, #40]	; (8003098 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003070:	2100      	movs	r1, #0
 8003072:	480a      	ldr	r0, [pc, #40]	; (800309c <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8003074:	f003 f840 	bl	80060f8 <HAL_CAN_GetRxMessage>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d000      	beq.n	8003080 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 800307e:	e7fe      	b.n	800307e <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	3301      	adds	r3, #1
 8003086:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8003088:	6013      	str	r3, [r2, #0]

}
 800308a:	bf00      	nop
 800308c:	3708      	adds	r7, #8
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	20000218 	.word	0x20000218
 8003098:	20000220 	.word	0x20000220
 800309c:	200002ac 	.word	0x200002ac
 80030a0:	20000214 	.word	0x20000214

080030a4 <turnOn>:
RGB purple = {1.0,0.0,1.0};    //for DOCKING 1
RGB white = {1.0,1.0,1.0};      //for manual 7
RGB blue = {0.0,0.0,1.0};

void turnOn(RGB rgb)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b084      	sub	sp, #16
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	1d3b      	adds	r3, r7, #4
 80030ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if(rgb.red == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, SET);}
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d106      	bne.n	80030c4 <turnOn+0x20>
 80030b6:	2201      	movs	r2, #1
 80030b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030bc:	4816      	ldr	r0, [pc, #88]	; (8003118 <turnOn+0x74>)
 80030be:	f003 fe8b 	bl	8006dd8 <HAL_GPIO_WritePin>
 80030c2:	e005      	b.n	80030d0 <turnOn+0x2c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);}
 80030c4:	2200      	movs	r2, #0
 80030c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80030ca:	4813      	ldr	r0, [pc, #76]	; (8003118 <turnOn+0x74>)
 80030cc:	f003 fe84 	bl	8006dd8 <HAL_GPIO_WritePin>
    if(rgb.green == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, SET);}
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d106      	bne.n	80030e4 <turnOn+0x40>
 80030d6:	2201      	movs	r2, #1
 80030d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030dc:	480e      	ldr	r0, [pc, #56]	; (8003118 <turnOn+0x74>)
 80030de:	f003 fe7b 	bl	8006dd8 <HAL_GPIO_WritePin>
 80030e2:	e005      	b.n	80030f0 <turnOn+0x4c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, RESET);}
 80030e4:	2200      	movs	r2, #0
 80030e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ea:	480b      	ldr	r0, [pc, #44]	; (8003118 <turnOn+0x74>)
 80030ec:	f003 fe74 	bl	8006dd8 <HAL_GPIO_WritePin>
    if(rgb.blue == 1) {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, SET);}
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d106      	bne.n	8003104 <turnOn+0x60>
 80030f6:	2201      	movs	r2, #1
 80030f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030fc:	4806      	ldr	r0, [pc, #24]	; (8003118 <turnOn+0x74>)
 80030fe:	f003 fe6b 	bl	8006dd8 <HAL_GPIO_WritePin>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);}
}
 8003102:	e005      	b.n	8003110 <turnOn+0x6c>
    else {HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);}
 8003104:	2200      	movs	r2, #0
 8003106:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800310a:	4803      	ldr	r0, [pc, #12]	; (8003118 <turnOn+0x74>)
 800310c:	f003 fe64 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8003110:	bf00      	nop
 8003112:	3710      	adds	r7, #16
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	40020c00 	.word	0x40020c00

0800311c <turnOff>:

void turnOff()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Rsig_Pin, RESET);
 8003120:	2200      	movs	r2, #0
 8003122:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003126:	4808      	ldr	r0, [pc, #32]	; (8003148 <turnOff+0x2c>)
 8003128:	f003 fe56 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Gsig_Pin, RESET);
 800312c:	2200      	movs	r2, #0
 800312e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003132:	4805      	ldr	r0, [pc, #20]	; (8003148 <turnOff+0x2c>)
 8003134:	f003 fe50 	bl	8006dd8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(Rsig_GPIO_Port, Bsig_Pin, RESET);
 8003138:	2200      	movs	r2, #0
 800313a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800313e:	4802      	ldr	r0, [pc, #8]	; (8003148 <turnOff+0x2c>)
 8003140:	f003 fe4a 	bl	8006dd8 <HAL_GPIO_WritePin>
}
 8003144:	bf00      	nop
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40020c00 	.word	0x40020c00

0800314c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003154:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003158:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800315c:	f003 0301 	and.w	r3, r3, #1
 8003160:	2b00      	cmp	r3, #0
 8003162:	d013      	beq.n	800318c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003164:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003168:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800316c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003174:	e000      	b.n	8003178 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003176:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003178:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0f9      	beq.n	8003176 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003182:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	b2d2      	uxtb	r2, r2
 800318a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <_write>:
//	return (len);
//}


int _write(int file, char *ptr, int len)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af00      	add	r7, sp, #0
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
 80031aa:	e009      	b.n	80031c0 <_write+0x26>
	{
		ITM_SendChar(*ptr++);
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	1c5a      	adds	r2, r3, #1
 80031b0:	60ba      	str	r2, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ffc9 	bl	800314c <ITM_SendChar>
	for(int i = 0; i < len; i++)
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	3301      	adds	r3, #1
 80031be:	617b      	str	r3, [r7, #20]
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	429a      	cmp	r2, r3
 80031c6:	dbf1      	blt.n	80031ac <_write+0x12>
	}
	return len;
 80031c8:	687b      	ldr	r3, [r7, #4]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3718      	adds	r7, #24
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031d8:	f001 ffaf 	bl	800513a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031dc:	f000 f83c 	bl	8003258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031e0:	f000 fb18 	bl	8003814 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80031e4:	f000 fae6 	bl	80037b4 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 80031e8:	f000 f922 	bl	8003430 <MX_CAN1_Init>
  MX_TIM2_Init();
 80031ec:	f000 f956 	bl	800349c <MX_TIM2_Init>
  MX_TIM6_Init();
 80031f0:	f000 fa18 	bl	8003624 <MX_TIM6_Init>
  MX_TIM7_Init();
 80031f4:	f000 fa4c 	bl	8003690 <MX_TIM7_Init>
  MX_TIM5_Init();
 80031f8:	f000 f9c6 	bl	8003588 <MX_TIM5_Init>
  MX_TIM14_Init();
 80031fc:	f000 fab8 	bl	8003770 <MX_TIM14_Init>
  MX_TIM9_Init();
 8003200:	f000 fa7c 	bl	80036fc <MX_TIM9_Init>
  MX_ADC1_Init();
 8003204:	f000 f894 	bl	8003330 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);//direct set
 8003208:	2200      	movs	r2, #0
 800320a:	2100      	movs	r1, #0
 800320c:	2008      	movs	r0, #8
 800320e:	f003 fbda 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);//direct set
 8003212:	2008      	movs	r0, #8
 8003214:	f003 fbf3 	bl	80069fe <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);//direct set
 8003218:	2200      	movs	r2, #0
 800321a:	2100      	movs	r1, #0
 800321c:	2006      	movs	r0, #6
 800321e:	f003 fbd2 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);//direct set
 8003222:	2006      	movs	r0, #6
 8003224:	f003 fbeb 	bl	80069fe <HAL_NVIC_EnableIRQ>

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 8003228:	2100      	movs	r1, #0
 800322a:	4808      	ldr	r0, [pc, #32]	; (800324c <main+0x78>)
 800322c:	f005 f88a 	bl	8008344 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 8003230:	4b06      	ldr	r3, [pc, #24]	; (800324c <main+0x78>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	2234      	movs	r2, #52	; 0x34
 8003236:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  //HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 8003238:	4805      	ldr	r0, [pc, #20]	; (8003250 <main+0x7c>)
 800323a:	f004 ff7b 	bl	8008134 <HAL_TIM_Base_Start_IT>
  //HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 800323e:	4805      	ldr	r0, [pc, #20]	; (8003254 <main+0x80>)
 8003240:	f004 ff78 	bl	8008134 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
	  //printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 8003244:	f7ff f9fc 	bl	8002640 <spinonce>
 8003248:	e7fc      	b.n	8003244 <main+0x70>
 800324a:	bf00      	nop
 800324c:	200002d4 	.word	0x200002d4
 8003250:	2000036c 	.word	0x2000036c
 8003254:	20000404 	.word	0x20000404

08003258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b094      	sub	sp, #80	; 0x50
 800325c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800325e:	f107 0320 	add.w	r3, r7, #32
 8003262:	2230      	movs	r2, #48	; 0x30
 8003264:	2100      	movs	r1, #0
 8003266:	4618      	mov	r0, r3
 8003268:	f006 fdba 	bl	8009de0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800326c:	f107 030c 	add.w	r3, r7, #12
 8003270:	2200      	movs	r2, #0
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	605a      	str	r2, [r3, #4]
 8003276:	609a      	str	r2, [r3, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800327c:	4b2a      	ldr	r3, [pc, #168]	; (8003328 <SystemClock_Config+0xd0>)
 800327e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003280:	4a29      	ldr	r2, [pc, #164]	; (8003328 <SystemClock_Config+0xd0>)
 8003282:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003286:	6413      	str	r3, [r2, #64]	; 0x40
 8003288:	4b27      	ldr	r3, [pc, #156]	; (8003328 <SystemClock_Config+0xd0>)
 800328a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003290:	60bb      	str	r3, [r7, #8]
 8003292:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <SystemClock_Config+0xd4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a24      	ldr	r2, [pc, #144]	; (800332c <SystemClock_Config+0xd4>)
 800329a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800329e:	6013      	str	r3, [r2, #0]
 80032a0:	4b22      	ldr	r3, [pc, #136]	; (800332c <SystemClock_Config+0xd4>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80032ac:	2301      	movs	r3, #1
 80032ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80032b0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80032b4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80032b6:	2302      	movs	r3, #2
 80032b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80032ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80032c0:	2304      	movs	r3, #4
 80032c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80032c4:	23d8      	movs	r3, #216	; 0xd8
 80032c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80032c8:	2302      	movs	r3, #2
 80032ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80032cc:	2302      	movs	r3, #2
 80032ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80032d0:	f107 0320 	add.w	r3, r7, #32
 80032d4:	4618      	mov	r0, r3
 80032d6:	f003 fe1b 	bl	8006f10 <HAL_RCC_OscConfig>
 80032da:	4603      	mov	r3, r0
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80032e0:	f000 fba0 	bl	8003a24 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80032e4:	f003 fdc4 	bl	8006e70 <HAL_PWREx_EnableOverDrive>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80032ee:	f000 fb99 	bl	8003a24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80032f2:	230f      	movs	r3, #15
 80032f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80032f6:	2302      	movs	r3, #2
 80032f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80032fe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003302:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003308:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800330a:	f107 030c 	add.w	r3, r7, #12
 800330e:	2107      	movs	r1, #7
 8003310:	4618      	mov	r0, r3
 8003312:	f004 f8a1 	bl	8007458 <HAL_RCC_ClockConfig>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 800331c:	f000 fb82 	bl	8003a24 <Error_Handler>
  }
}
 8003320:	bf00      	nop
 8003322:	3750      	adds	r7, #80	; 0x50
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	40023800 	.word	0x40023800
 800332c:	40007000 	.word	0x40007000

08003330 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b084      	sub	sp, #16
 8003334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8003336:	463b      	mov	r3, r7
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	605a      	str	r2, [r3, #4]
 800333e:	609a      	str	r2, [r3, #8]
 8003340:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8003342:	4b38      	ldr	r3, [pc, #224]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003344:	4a38      	ldr	r2, [pc, #224]	; (8003428 <MX_ADC1_Init+0xf8>)
 8003346:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003348:	4b36      	ldr	r3, [pc, #216]	; (8003424 <MX_ADC1_Init+0xf4>)
 800334a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800334e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 8003350:	4b34      	ldr	r3, [pc, #208]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003352:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003356:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003358:	4b32      	ldr	r3, [pc, #200]	; (8003424 <MX_ADC1_Init+0xf4>)
 800335a:	2201      	movs	r2, #1
 800335c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800335e:	4b31      	ldr	r3, [pc, #196]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003360:	2200      	movs	r2, #0
 8003362:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 8003364:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 800336c:	4b2d      	ldr	r3, [pc, #180]	; (8003424 <MX_ADC1_Init+0xf4>)
 800336e:	2201      	movs	r2, #1
 8003370:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003372:	4b2c      	ldr	r3, [pc, #176]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003374:	2200      	movs	r2, #0
 8003376:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003378:	4b2a      	ldr	r3, [pc, #168]	; (8003424 <MX_ADC1_Init+0xf4>)
 800337a:	4a2c      	ldr	r2, [pc, #176]	; (800342c <MX_ADC1_Init+0xfc>)
 800337c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800337e:	4b29      	ldr	r3, [pc, #164]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003380:	2200      	movs	r2, #0
 8003382:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8003384:	4b27      	ldr	r3, [pc, #156]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003386:	2204      	movs	r2, #4
 8003388:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800338a:	4b26      	ldr	r3, [pc, #152]	; (8003424 <MX_ADC1_Init+0xf4>)
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003392:	4b24      	ldr	r3, [pc, #144]	; (8003424 <MX_ADC1_Init+0xf4>)
 8003394:	2201      	movs	r2, #1
 8003396:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003398:	4822      	ldr	r0, [pc, #136]	; (8003424 <MX_ADC1_Init+0xf4>)
 800339a:	f001 ff4f 	bl	800523c <HAL_ADC_Init>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d001      	beq.n	80033a8 <MX_ADC1_Init+0x78>
  {
    Error_Handler();
 80033a4:	f000 fb3e 	bl	8003a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80033a8:	2301      	movs	r3, #1
 80033aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80033ac:	2301      	movs	r3, #1
 80033ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80033b0:	2301      	movs	r3, #1
 80033b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033b4:	463b      	mov	r3, r7
 80033b6:	4619      	mov	r1, r3
 80033b8:	481a      	ldr	r0, [pc, #104]	; (8003424 <MX_ADC1_Init+0xf4>)
 80033ba:	f002 f91d 	bl	80055f8 <HAL_ADC_ConfigChannel>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80033c4:	f000 fb2e 	bl	8003a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80033c8:	2302      	movs	r3, #2
 80033ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80033cc:	2302      	movs	r3, #2
 80033ce:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033d0:	463b      	mov	r3, r7
 80033d2:	4619      	mov	r1, r3
 80033d4:	4813      	ldr	r0, [pc, #76]	; (8003424 <MX_ADC1_Init+0xf4>)
 80033d6:	f002 f90f 	bl	80055f8 <HAL_ADC_ConfigChannel>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80033e0:	f000 fb20 	bl	8003a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80033e4:	2303      	movs	r3, #3
 80033e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80033e8:	2303      	movs	r3, #3
 80033ea:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80033ec:	463b      	mov	r3, r7
 80033ee:	4619      	mov	r1, r3
 80033f0:	480c      	ldr	r0, [pc, #48]	; (8003424 <MX_ADC1_Init+0xf4>)
 80033f2:	f002 f901 	bl	80055f8 <HAL_ADC_ConfigChannel>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d001      	beq.n	8003400 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 80033fc:	f000 fb12 	bl	8003a24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8003400:	2304      	movs	r3, #4
 8003402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003404:	2304      	movs	r3, #4
 8003406:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003408:	463b      	mov	r3, r7
 800340a:	4619      	mov	r1, r3
 800340c:	4805      	ldr	r0, [pc, #20]	; (8003424 <MX_ADC1_Init+0xf4>)
 800340e:	f002 f8f3 	bl	80055f8 <HAL_ADC_ConfigChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d001      	beq.n	800341c <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8003418:	f000 fb04 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800341c:	bf00      	nop
 800341e:	3710      	adds	r7, #16
 8003420:	46bd      	mov	sp, r7
 8003422:	bd80      	pop	{r7, pc}
 8003424:	20000264 	.word	0x20000264
 8003428:	40012000 	.word	0x40012000
 800342c:	0f000001 	.word	0x0f000001

08003430 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003434:	4b17      	ldr	r3, [pc, #92]	; (8003494 <MX_CAN1_Init+0x64>)
 8003436:	4a18      	ldr	r2, [pc, #96]	; (8003498 <MX_CAN1_Init+0x68>)
 8003438:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 800343a:	4b16      	ldr	r3, [pc, #88]	; (8003494 <MX_CAN1_Init+0x64>)
 800343c:	221b      	movs	r2, #27
 800343e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003440:	4b14      	ldr	r3, [pc, #80]	; (8003494 <MX_CAN1_Init+0x64>)
 8003442:	2200      	movs	r2, #0
 8003444:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003446:	4b13      	ldr	r3, [pc, #76]	; (8003494 <MX_CAN1_Init+0x64>)
 8003448:	2200      	movs	r2, #0
 800344a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 800344c:	4b11      	ldr	r3, [pc, #68]	; (8003494 <MX_CAN1_Init+0x64>)
 800344e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003452:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8003454:	4b0f      	ldr	r3, [pc, #60]	; (8003494 <MX_CAN1_Init+0x64>)
 8003456:	2200      	movs	r2, #0
 8003458:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800345a:	4b0e      	ldr	r3, [pc, #56]	; (8003494 <MX_CAN1_Init+0x64>)
 800345c:	2200      	movs	r2, #0
 800345e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <MX_CAN1_Init+0x64>)
 8003462:	2201      	movs	r2, #1
 8003464:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003466:	4b0b      	ldr	r3, [pc, #44]	; (8003494 <MX_CAN1_Init+0x64>)
 8003468:	2200      	movs	r2, #0
 800346a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800346c:	4b09      	ldr	r3, [pc, #36]	; (8003494 <MX_CAN1_Init+0x64>)
 800346e:	2201      	movs	r2, #1
 8003470:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003472:	4b08      	ldr	r3, [pc, #32]	; (8003494 <MX_CAN1_Init+0x64>)
 8003474:	2200      	movs	r2, #0
 8003476:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003478:	4b06      	ldr	r3, [pc, #24]	; (8003494 <MX_CAN1_Init+0x64>)
 800347a:	2200      	movs	r2, #0
 800347c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800347e:	4805      	ldr	r0, [pc, #20]	; (8003494 <MX_CAN1_Init+0x64>)
 8003480:	f002 fb0a 	bl	8005a98 <HAL_CAN_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800348a:	f000 facb 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800348e:	bf00      	nop
 8003490:	bd80      	pop	{r7, pc}
 8003492:	bf00      	nop
 8003494:	200002ac 	.word	0x200002ac
 8003498:	40006400 	.word	0x40006400

0800349c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b08e      	sub	sp, #56	; 0x38
 80034a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80034a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a6:	2200      	movs	r2, #0
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	605a      	str	r2, [r3, #4]
 80034ac:	609a      	str	r2, [r3, #8]
 80034ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034b0:	f107 031c 	add.w	r3, r7, #28
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80034bc:	463b      	mov	r3, r7
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	605a      	str	r2, [r3, #4]
 80034c4:	609a      	str	r2, [r3, #8]
 80034c6:	60da      	str	r2, [r3, #12]
 80034c8:	611a      	str	r2, [r3, #16]
 80034ca:	615a      	str	r2, [r3, #20]
 80034cc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034ce:	4b2d      	ldr	r3, [pc, #180]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 80034d6:	4b2b      	ldr	r3, [pc, #172]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034d8:	221a      	movs	r2, #26
 80034da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034de:	2200      	movs	r2, #0
 80034e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 80034e2:	4b28      	ldr	r3, [pc, #160]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034e4:	2268      	movs	r2, #104	; 0x68
 80034e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034e8:	4b26      	ldr	r3, [pc, #152]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034ee:	4b25      	ldr	r3, [pc, #148]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034f4:	4823      	ldr	r0, [pc, #140]	; (8003584 <MX_TIM2_Init+0xe8>)
 80034f6:	f004 fdc5 	bl	8008084 <HAL_TIM_Base_Init>
 80034fa:	4603      	mov	r3, r0
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d001      	beq.n	8003504 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003500:	f000 fa90 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800350a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800350e:	4619      	mov	r1, r3
 8003510:	481c      	ldr	r0, [pc, #112]	; (8003584 <MX_TIM2_Init+0xe8>)
 8003512:	f005 fa93 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800351c:	f000 fa82 	bl	8003a24 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8003520:	4818      	ldr	r0, [pc, #96]	; (8003584 <MX_TIM2_Init+0xe8>)
 8003522:	f004 feae 	bl	8008282 <HAL_TIM_PWM_Init>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800352c:	f000 fa7a 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003530:	2300      	movs	r3, #0
 8003532:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003534:	2300      	movs	r3, #0
 8003536:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003538:	f107 031c 	add.w	r3, r7, #28
 800353c:	4619      	mov	r1, r3
 800353e:	4811      	ldr	r0, [pc, #68]	; (8003584 <MX_TIM2_Init+0xe8>)
 8003540:	f005 ff2c 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 8003544:	4603      	mov	r3, r0
 8003546:	2b00      	cmp	r3, #0
 8003548:	d001      	beq.n	800354e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800354a:	f000 fa6b 	bl	8003a24 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800354e:	2360      	movs	r3, #96	; 0x60
 8003550:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 8003552:	2333      	movs	r3, #51	; 0x33
 8003554:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003556:	2300      	movs	r3, #0
 8003558:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800355a:	2300      	movs	r3, #0
 800355c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800355e:	463b      	mov	r3, r7
 8003560:	2200      	movs	r2, #0
 8003562:	4619      	mov	r1, r3
 8003564:	4807      	ldr	r0, [pc, #28]	; (8003584 <MX_TIM2_Init+0xe8>)
 8003566:	f005 f955 	bl	8008814 <HAL_TIM_PWM_ConfigChannel>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d001      	beq.n	8003574 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003570:	f000 fa58 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003574:	4803      	ldr	r0, [pc, #12]	; (8003584 <MX_TIM2_Init+0xe8>)
 8003576:	f001 fa77 	bl	8004a68 <HAL_TIM_MspPostInit>

}
 800357a:	bf00      	nop
 800357c:	3738      	adds	r7, #56	; 0x38
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	200002d4 	.word	0x200002d4

08003588 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b088      	sub	sp, #32
 800358c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800358e:	f107 0310 	add.w	r3, r7, #16
 8003592:	2200      	movs	r2, #0
 8003594:	601a      	str	r2, [r3, #0]
 8003596:	605a      	str	r2, [r3, #4]
 8003598:	609a      	str	r2, [r3, #8]
 800359a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800359c:	1d3b      	adds	r3, r7, #4
 800359e:	2200      	movs	r2, #0
 80035a0:	601a      	str	r2, [r3, #0]
 80035a2:	605a      	str	r2, [r3, #4]
 80035a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80035a6:	4b1d      	ldr	r3, [pc, #116]	; (800361c <MX_TIM5_Init+0x94>)
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <MX_TIM5_Init+0x98>)
 80035aa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9-1;
 80035ac:	4b1b      	ldr	r3, [pc, #108]	; (800361c <MX_TIM5_Init+0x94>)
 80035ae:	2208      	movs	r2, #8
 80035b0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035b2:	4b1a      	ldr	r3, [pc, #104]	; (800361c <MX_TIM5_Init+0x94>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 60-1;
 80035b8:	4b18      	ldr	r3, [pc, #96]	; (800361c <MX_TIM5_Init+0x94>)
 80035ba:	223b      	movs	r2, #59	; 0x3b
 80035bc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035be:	4b17      	ldr	r3, [pc, #92]	; (800361c <MX_TIM5_Init+0x94>)
 80035c0:	2200      	movs	r2, #0
 80035c2:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035c4:	4b15      	ldr	r3, [pc, #84]	; (800361c <MX_TIM5_Init+0x94>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80035ca:	4814      	ldr	r0, [pc, #80]	; (800361c <MX_TIM5_Init+0x94>)
 80035cc:	f004 fd5a 	bl	8008084 <HAL_TIM_Base_Init>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d001      	beq.n	80035da <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80035d6:	f000 fa25 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035de:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80035e0:	f107 0310 	add.w	r3, r7, #16
 80035e4:	4619      	mov	r1, r3
 80035e6:	480d      	ldr	r0, [pc, #52]	; (800361c <MX_TIM5_Init+0x94>)
 80035e8:	f005 fa28 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80035f2:	f000 fa17 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fa:	2300      	movs	r3, #0
 80035fc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80035fe:	1d3b      	adds	r3, r7, #4
 8003600:	4619      	mov	r1, r3
 8003602:	4806      	ldr	r0, [pc, #24]	; (800361c <MX_TIM5_Init+0x94>)
 8003604:	f005 feca 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800360e:	f000 fa09 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8003612:	bf00      	nop
 8003614:	3720      	adds	r7, #32
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	20000320 	.word	0x20000320
 8003620:	40000c00 	.word	0x40000c00

08003624 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <MX_TIM6_Init+0x64>)
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <MX_TIM6_Init+0x68>)
 8003638:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <MX_TIM6_Init+0x64>)
 800363c:	226b      	movs	r2, #107	; 0x6b
 800363e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_TIM6_Init+0x64>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <MX_TIM6_Init+0x64>)
 8003648:	f242 720f 	movw	r2, #9999	; 0x270f
 800364c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_TIM6_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003654:	480c      	ldr	r0, [pc, #48]	; (8003688 <MX_TIM6_Init+0x64>)
 8003656:	f004 fd15 	bl	8008084 <HAL_TIM_Base_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003660:	f000 f9e0 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_TIM6_Init+0x64>)
 8003672:	f005 fe93 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800367c:	f000 f9d2 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	2000036c 	.word	0x2000036c
 800368c:	40001000 	.word	0x40001000

08003690 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003696:	1d3b      	adds	r3, r7, #4
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80036a0:	4b14      	ldr	r3, [pc, #80]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036a2:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <MX_TIM7_Init+0x68>)
 80036a4:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 80036a6:	4b13      	ldr	r3, [pc, #76]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036a8:	226b      	movs	r2, #107	; 0x6b
 80036aa:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ac:	4b11      	ldr	r3, [pc, #68]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 80036b2:	4b10      	ldr	r3, [pc, #64]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80036b8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036ba:	4b0e      	ldr	r3, [pc, #56]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036bc:	2200      	movs	r2, #0
 80036be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80036c0:	480c      	ldr	r0, [pc, #48]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036c2:	f004 fcdf 	bl	8008084 <HAL_TIM_Base_Init>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80036cc:	f000 f9aa 	bl	8003a24 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036d0:	2300      	movs	r3, #0
 80036d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	4619      	mov	r1, r3
 80036dc:	4805      	ldr	r0, [pc, #20]	; (80036f4 <MX_TIM7_Init+0x64>)
 80036de:	f005 fe5d 	bl	800939c <HAL_TIMEx_MasterConfigSynchronization>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80036e8:	f000 f99c 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80036ec:	bf00      	nop
 80036ee:	3710      	adds	r7, #16
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	200003b8 	.word	0x200003b8
 80036f8:	40001400 	.word	0x40001400

080036fc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003702:	463b      	mov	r3, r7
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003710:	4a16      	ldr	r2, [pc, #88]	; (800376c <MX_TIM9_Init+0x70>)
 8003712:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 8003714:	4b14      	ldr	r3, [pc, #80]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003716:	22d7      	movs	r2, #215	; 0xd7
 8003718:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800371a:	4b13      	ldr	r3, [pc, #76]	; (8003768 <MX_TIM9_Init+0x6c>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 8003720:	4b11      	ldr	r3, [pc, #68]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003722:	f240 2231 	movw	r2, #561	; 0x231
 8003726:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003728:	4b0f      	ldr	r3, [pc, #60]	; (8003768 <MX_TIM9_Init+0x6c>)
 800372a:	2200      	movs	r2, #0
 800372c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800372e:	4b0e      	ldr	r3, [pc, #56]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003730:	2200      	movs	r2, #0
 8003732:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8003734:	480c      	ldr	r0, [pc, #48]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003736:	f004 fca5 	bl	8008084 <HAL_TIM_Base_Init>
 800373a:	4603      	mov	r3, r0
 800373c:	2b00      	cmp	r3, #0
 800373e:	d001      	beq.n	8003744 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8003740:	f000 f970 	bl	8003a24 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003744:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003748:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800374a:	463b      	mov	r3, r7
 800374c:	4619      	mov	r1, r3
 800374e:	4806      	ldr	r0, [pc, #24]	; (8003768 <MX_TIM9_Init+0x6c>)
 8003750:	f005 f974 	bl	8008a3c <HAL_TIM_ConfigClockSource>
 8003754:	4603      	mov	r3, r0
 8003756:	2b00      	cmp	r3, #0
 8003758:	d001      	beq.n	800375e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800375a:	f000 f963 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800375e:	bf00      	nop
 8003760:	3710      	adds	r7, #16
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	20000404 	.word	0x20000404
 800376c:	40014000 	.word	0x40014000

08003770 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003774:	4b0d      	ldr	r3, [pc, #52]	; (80037ac <MX_TIM14_Init+0x3c>)
 8003776:	4a0e      	ldr	r2, [pc, #56]	; (80037b0 <MX_TIM14_Init+0x40>)
 8003778:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 800377a:	4b0c      	ldr	r3, [pc, #48]	; (80037ac <MX_TIM14_Init+0x3c>)
 800377c:	226b      	movs	r2, #107	; 0x6b
 800377e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003780:	4b0a      	ldr	r3, [pc, #40]	; (80037ac <MX_TIM14_Init+0x3c>)
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 8003786:	4b09      	ldr	r3, [pc, #36]	; (80037ac <MX_TIM14_Init+0x3c>)
 8003788:	2203      	movs	r2, #3
 800378a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800378c:	4b07      	ldr	r3, [pc, #28]	; (80037ac <MX_TIM14_Init+0x3c>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003792:	4b06      	ldr	r3, [pc, #24]	; (80037ac <MX_TIM14_Init+0x3c>)
 8003794:	2200      	movs	r2, #0
 8003796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003798:	4804      	ldr	r0, [pc, #16]	; (80037ac <MX_TIM14_Init+0x3c>)
 800379a:	f004 fc73 	bl	8008084 <HAL_TIM_Base_Init>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80037a4:	f000 f93e 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80037a8:	bf00      	nop
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	20000450 	.word	0x20000450
 80037b0:	40002000 	.word	0x40002000

080037b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037b8:	4b14      	ldr	r3, [pc, #80]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037ba:	4a15      	ldr	r2, [pc, #84]	; (8003810 <MX_USART1_UART_Init+0x5c>)
 80037bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037be:	4b13      	ldr	r3, [pc, #76]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037c6:	4b11      	ldr	r3, [pc, #68]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037cc:	4b0f      	ldr	r3, [pc, #60]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037d2:	4b0e      	ldr	r3, [pc, #56]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037d8:	4b0c      	ldr	r3, [pc, #48]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037da:	220c      	movs	r2, #12
 80037dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037de:	4b0b      	ldr	r3, [pc, #44]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037e4:	4b09      	ldr	r3, [pc, #36]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037ea:	4b08      	ldr	r3, [pc, #32]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037ec:	2200      	movs	r2, #0
 80037ee:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037f6:	4805      	ldr	r0, [pc, #20]	; (800380c <MX_USART1_UART_Init+0x58>)
 80037f8:	f005 fe7c 	bl	80094f4 <HAL_UART_Init>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003802:	f000 f90f 	bl	8003a24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003806:	bf00      	nop
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	2000049c 	.word	0x2000049c
 8003810:	40011000 	.word	0x40011000

08003814 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b08c      	sub	sp, #48	; 0x30
 8003818:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800381a:	f107 031c 	add.w	r3, r7, #28
 800381e:	2200      	movs	r2, #0
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	609a      	str	r2, [r3, #8]
 8003826:	60da      	str	r2, [r3, #12]
 8003828:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800382a:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	4a77      	ldr	r2, [pc, #476]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003830:	f043 0320 	orr.w	r3, r3, #32
 8003834:	6313      	str	r3, [r2, #48]	; 0x30
 8003836:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	f003 0320 	and.w	r3, r3, #32
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003842:	4b72      	ldr	r3, [pc, #456]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4a71      	ldr	r2, [pc, #452]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003848:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4b6f      	ldr	r3, [pc, #444]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003856:	617b      	str	r3, [r7, #20]
 8003858:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800385a:	4b6c      	ldr	r3, [pc, #432]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	4a6b      	ldr	r2, [pc, #428]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003860:	f043 0301 	orr.w	r3, r3, #1
 8003864:	6313      	str	r3, [r2, #48]	; 0x30
 8003866:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	613b      	str	r3, [r7, #16]
 8003870:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003872:	4b66      	ldr	r3, [pc, #408]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	4a65      	ldr	r2, [pc, #404]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003878:	f043 0302 	orr.w	r3, r3, #2
 800387c:	6313      	str	r3, [r2, #48]	; 0x30
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	f003 0302 	and.w	r3, r3, #2
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800388a:	4b60      	ldr	r3, [pc, #384]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	4a5f      	ldr	r2, [pc, #380]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003890:	f043 0308 	orr.w	r3, r3, #8
 8003894:	6313      	str	r3, [r2, #48]	; 0x30
 8003896:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	f003 0308 	and.w	r3, r3, #8
 800389e:	60bb      	str	r3, [r7, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038a2:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	4a59      	ldr	r2, [pc, #356]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038a8:	f043 0304 	orr.w	r3, r3, #4
 80038ac:	6313      	str	r3, [r2, #48]	; 0x30
 80038ae:	4b57      	ldr	r3, [pc, #348]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	f003 0304 	and.w	r3, r3, #4
 80038b6:	607b      	str	r3, [r7, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80038ba:	4b54      	ldr	r3, [pc, #336]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	4a53      	ldr	r2, [pc, #332]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038c0:	f043 0310 	orr.w	r3, r3, #16
 80038c4:	6313      	str	r3, [r2, #48]	; 0x30
 80038c6:	4b51      	ldr	r3, [pc, #324]	; (8003a0c <MX_GPIO_Init+0x1f8>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USS_Trigger6_GPIO_Port, USS_Trigger6_Pin, GPIO_PIN_RESET);
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	484e      	ldr	r0, [pc, #312]	; (8003a10 <MX_GPIO_Init+0x1fc>)
 80038d8:	f003 fa7e 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80038e2:	484c      	ldr	r0, [pc, #304]	; (8003a14 <MX_GPIO_Init+0x200>)
 80038e4:	f003 fa78 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 80038e8:	2200      	movs	r2, #0
 80038ea:	f247 1120 	movw	r1, #28960	; 0x7120
 80038ee:	484a      	ldr	r0, [pc, #296]	; (8003a18 <MX_GPIO_Init+0x204>)
 80038f0:	f003 fa72 	bl	8006dd8 <HAL_GPIO_WritePin>
                          |USS_Trigger1_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin, GPIO_PIN_RESET);
 80038f4:	2200      	movs	r2, #0
 80038f6:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 80038fa:	4848      	ldr	r0, [pc, #288]	; (8003a1c <MX_GPIO_Init+0x208>)
 80038fc:	f003 fa6c 	bl	8006dd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USS_Trigger6_Pin */
  GPIO_InitStruct.Pin = USS_Trigger6_Pin;
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003904:	2301      	movs	r3, #1
 8003906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003908:	2300      	movs	r3, #0
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800390c:	2300      	movs	r3, #0
 800390e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USS_Trigger6_GPIO_Port, &GPIO_InitStruct);
 8003910:	f107 031c 	add.w	r3, r7, #28
 8003914:	4619      	mov	r1, r3
 8003916:	483e      	ldr	r0, [pc, #248]	; (8003a10 <MX_GPIO_Init+0x1fc>)
 8003918:	f003 f89a 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data6_Pin */
  GPIO_InitStruct.Pin = USS_Data6_Pin;
 800391c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003920:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003922:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003928:	2301      	movs	r3, #1
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data6_GPIO_Port, &GPIO_InitStruct);
 800392c:	f107 031c 	add.w	r3, r7, #28
 8003930:	4619      	mov	r1, r3
 8003932:	4838      	ldr	r0, [pc, #224]	; (8003a14 <MX_GPIO_Init+0x200>)
 8003934:	f003 f88c 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8003938:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800393c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800393e:	2301      	movs	r3, #1
 8003940:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003942:	2300      	movs	r3, #0
 8003944:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003946:	2300      	movs	r3, #0
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800394a:	f107 031c 	add.w	r3, r7, #28
 800394e:	4619      	mov	r1, r3
 8003950:	4830      	ldr	r0, [pc, #192]	; (8003a14 <MX_GPIO_Init+0x200>)
 8003952:	f003 f87d 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger2_Pin Rsig_Pin Gsig_Pin Bsig_Pin
                           USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = USS_Trigger2_Pin|Rsig_Pin|Gsig_Pin|Bsig_Pin
 8003956:	f247 1320 	movw	r3, #28960	; 0x7120
 800395a:	61fb      	str	r3, [r7, #28]
                          |USS_Trigger1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800395c:	2301      	movs	r3, #1
 800395e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003960:	2300      	movs	r3, #0
 8003962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003964:	2300      	movs	r3, #0
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003968:	f107 031c 	add.w	r3, r7, #28
 800396c:	4619      	mov	r1, r3
 800396e:	482a      	ldr	r0, [pc, #168]	; (8003a18 <MX_GPIO_Init+0x204>)
 8003970:	f003 f86e 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data2_Pin USS_Data4_Pin USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data2_Pin|USS_Data4_Pin|USS_Data1_Pin;
 8003974:	f44f 7311 	mov.w	r3, #580	; 0x244
 8003978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800397a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800397e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003980:	2301      	movs	r3, #1
 8003982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003984:	f107 031c 	add.w	r3, r7, #28
 8003988:	4619      	mov	r1, r3
 800398a:	4823      	ldr	r0, [pc, #140]	; (8003a18 <MX_GPIO_Init+0x204>)
 800398c:	f003 f860 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Trigger5_Pin USS_Trigger3_Pin USS_Trigger4_Pin */
  GPIO_InitStruct.Pin = USS_Trigger5_Pin|USS_Trigger3_Pin|USS_Trigger4_Pin;
 8003990:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8003994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003996:	2301      	movs	r3, #1
 8003998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399a:	2300      	movs	r3, #0
 800399c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a2:	f107 031c 	add.w	r3, r7, #28
 80039a6:	4619      	mov	r1, r3
 80039a8:	481c      	ldr	r0, [pc, #112]	; (8003a1c <MX_GPIO_Init+0x208>)
 80039aa:	f003 f851 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pins : USS_Data5_Pin USS_Data3_Pin */
  GPIO_InitStruct.Pin = USS_Data5_Pin|USS_Data3_Pin;
 80039ae:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80039b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ba:	2301      	movs	r3, #1
 80039bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039be:	f107 031c 	add.w	r3, r7, #28
 80039c2:	4619      	mov	r1, r3
 80039c4:	4815      	ldr	r0, [pc, #84]	; (8003a1c <MX_GPIO_Init+0x208>)
 80039c6:	f003 f843 	bl	8006a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 80039ca:	2301      	movs	r3, #1
 80039cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80039ce:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80039d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039d4:	2301      	movs	r3, #1
 80039d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 80039d8:	f107 031c 	add.w	r3, r7, #28
 80039dc:	4619      	mov	r1, r3
 80039de:	4810      	ldr	r0, [pc, #64]	; (8003a20 <MX_GPIO_Init+0x20c>)
 80039e0:	f003 f836 	bl	8006a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80039e4:	2200      	movs	r2, #0
 80039e6:	2100      	movs	r1, #0
 80039e8:	2017      	movs	r0, #23
 80039ea:	f002 ffec 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80039ee:	2017      	movs	r0, #23
 80039f0:	f003 f805 	bl	80069fe <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80039f4:	2200      	movs	r2, #0
 80039f6:	2100      	movs	r1, #0
 80039f8:	2028      	movs	r0, #40	; 0x28
 80039fa:	f002 ffe4 	bl	80069c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80039fe:	2028      	movs	r0, #40	; 0x28
 8003a00:	f002 fffd 	bl	80069fe <HAL_NVIC_EnableIRQ>

}
 8003a04:	bf00      	nop
 8003a06:	3730      	adds	r7, #48	; 0x30
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40021400 	.word	0x40021400
 8003a14:	40020400 	.word	0x40020400
 8003a18:	40020c00 	.word	0x40020c00
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40021000 	.word	0x40021000

08003a24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a24:	b480      	push	{r7}
 8003a26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a28:	b672      	cpsid	i
}
 8003a2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a2c:	e7fe      	b.n	8003a2c <Error_Handler+0x8>

08003a2e <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b084      	sub	sp, #16
 8003a32:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	1c5a      	adds	r2, r3, #1
 8003a3c:	60fa      	str	r2, [r7, #12]
 8003a3e:	3310      	adds	r3, #16
 8003a40:	443b      	add	r3, r7
 8003a42:	222f      	movs	r2, #47	; 0x2f
 8003a44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	1c5a      	adds	r2, r3, #1
 8003a4c:	60fa      	str	r2, [r7, #12]
 8003a4e:	3310      	adds	r3, #16
 8003a50:	443b      	add	r3, r7
 8003a52:	2260      	movs	r2, #96	; 0x60
 8003a54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1c5a      	adds	r2, r3, #1
 8003a5c:	60fa      	str	r2, [r7, #12]
 8003a5e:	3310      	adds	r3, #16
 8003a60:	443b      	add	r3, r7
 8003a62:	2260      	movs	r2, #96	; 0x60
 8003a64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	60fa      	str	r2, [r7, #12]
 8003a6e:	3310      	adds	r3, #16
 8003a70:	443b      	add	r3, r7
 8003a72:	2200      	movs	r2, #0
 8003a74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	60fa      	str	r2, [r7, #12]
 8003a7e:	3310      	adds	r3, #16
 8003a80:	443b      	add	r3, r7
 8003a82:	2203      	movs	r2, #3
 8003a84:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	60fa      	str	r2, [r7, #12]
 8003a8e:	3310      	adds	r3, #16
 8003a90:	443b      	add	r3, r7
 8003a92:	2200      	movs	r2, #0
 8003a94:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	1c5a      	adds	r2, r3, #1
 8003a9c:	60fa      	str	r2, [r7, #12]
 8003a9e:	3310      	adds	r3, #16
 8003aa0:	443b      	add	r3, r7
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003aa8:	1d3a      	adds	r2, r7, #4
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4413      	add	r3, r2
 8003aae:	2200      	movs	r2, #0
 8003ab0:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ab2:	1d39      	adds	r1, r7, #4
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	2208      	movs	r2, #8
 8003ab8:	f240 6001 	movw	r0, #1537	; 0x601
 8003abc:	f7ff fa94 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003ac0:	2064      	movs	r0, #100	; 0x64
 8003ac2:	f001 fb97 	bl	80051f4 <HAL_Delay>
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <synchronousMode>:

void synchronousMode()
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	1c5a      	adds	r2, r3, #1
 8003adc:	60fa      	str	r2, [r7, #12]
 8003ade:	3310      	adds	r3, #16
 8003ae0:	443b      	add	r3, r7
 8003ae2:	222b      	movs	r2, #43	; 0x2b
 8003ae4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	60fa      	str	r2, [r7, #12]
 8003aee:	3310      	adds	r3, #16
 8003af0:	443b      	add	r3, r7
 8003af2:	220f      	movs	r2, #15
 8003af4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	60fa      	str	r2, [r7, #12]
 8003afe:	3310      	adds	r3, #16
 8003b00:	443b      	add	r3, r7
 8003b02:	2220      	movs	r2, #32
 8003b04:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	1c5a      	adds	r2, r3, #1
 8003b0c:	60fa      	str	r2, [r7, #12]
 8003b0e:	3310      	adds	r3, #16
 8003b10:	443b      	add	r3, r7
 8003b12:	2200      	movs	r2, #0
 8003b14:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1c5a      	adds	r2, r3, #1
 8003b1c:	60fa      	str	r2, [r7, #12]
 8003b1e:	3310      	adds	r3, #16
 8003b20:	443b      	add	r3, r7
 8003b22:	2201      	movs	r2, #1
 8003b24:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	60fa      	str	r2, [r7, #12]
 8003b2e:	3310      	adds	r3, #16
 8003b30:	443b      	add	r3, r7
 8003b32:	2200      	movs	r2, #0
 8003b34:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	1c5a      	adds	r2, r3, #1
 8003b3c:	60fa      	str	r2, [r7, #12]
 8003b3e:	3310      	adds	r3, #16
 8003b40:	443b      	add	r3, r7
 8003b42:	2200      	movs	r2, #0
 8003b44:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003b48:	1d3a      	adds	r2, r7, #4
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003b52:	1d39      	adds	r1, r7, #4
 8003b54:	2300      	movs	r3, #0
 8003b56:	2208      	movs	r2, #8
 8003b58:	f240 6001 	movw	r0, #1537	; 0x601
 8003b5c:	f7ff fa44 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003b60:	2064      	movs	r0, #100	; 0x64
 8003b62:	f001 fb47 	bl	80051f4 <HAL_Delay>
}
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <settingEnc>:

void settingEnc(int16_t enc)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b086      	sub	sp, #24
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	4603      	mov	r3, r0
 8003b76:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e055      	b.n	8003c2a <settingEnc+0xbc>
    {
        int index = 0;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	1c5a      	adds	r2, r3, #1
 8003b86:	613a      	str	r2, [r7, #16]
 8003b88:	3318      	adds	r3, #24
 8003b8a:	443b      	add	r3, r7
 8003b8c:	222b      	movs	r2, #43	; 0x2b
 8003b8e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	613a      	str	r2, [r7, #16]
 8003b98:	3318      	adds	r3, #24
 8003b9a:	443b      	add	r3, r7
 8003b9c:	220e      	movs	r2, #14
 8003b9e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	613a      	str	r2, [r7, #16]
 8003ba8:	3318      	adds	r3, #24
 8003baa:	443b      	add	r3, r7
 8003bac:	2220      	movs	r2, #32
 8003bae:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	b2da      	uxtb	r2, r3
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1c59      	adds	r1, r3, #1
 8003bba:	6139      	str	r1, [r7, #16]
 8003bbc:	3201      	adds	r2, #1
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	3318      	adds	r3, #24
 8003bc2:	443b      	add	r3, r7
 8003bc4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	613a      	str	r2, [r7, #16]
 8003bce:	88fa      	ldrh	r2, [r7, #6]
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	3318      	adds	r3, #24
 8003bd4:	443b      	add	r3, r7
 8003bd6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 8003bda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003bde:	121b      	asrs	r3, r3, #8
 8003be0:	b219      	sxth	r1, r3
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	613a      	str	r2, [r7, #16]
 8003be8:	b2ca      	uxtb	r2, r1
 8003bea:	3318      	adds	r3, #24
 8003bec:	443b      	add	r3, r7
 8003bee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	1c5a      	adds	r2, r3, #1
 8003bf6:	613a      	str	r2, [r7, #16]
 8003bf8:	3318      	adds	r3, #24
 8003bfa:	443b      	add	r3, r7
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003c02:	f107 0208 	add.w	r2, r7, #8
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	4413      	add	r3, r2
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003c0e:	f107 0108 	add.w	r1, r7, #8
 8003c12:	2300      	movs	r3, #0
 8003c14:	2208      	movs	r2, #8
 8003c16:	f240 6001 	movw	r0, #1537	; 0x601
 8003c1a:	f7ff f9e5 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003c1e:	2064      	movs	r0, #100	; 0x64
 8003c20:	f001 fae8 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	dda6      	ble.n	8003b7e <settingEnc+0x10>
    }
}
 8003c30:	bf00      	nop
 8003c32:	bf00      	nop
 8003c34:	3718      	adds	r7, #24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bd80      	pop	{r7, pc}

08003c3a <settingPole>:

void settingPole(int16_t pole)
{
 8003c3a:	b580      	push	{r7, lr}
 8003c3c:	b086      	sub	sp, #24
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	4603      	mov	r3, r0
 8003c42:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003c44:	2300      	movs	r3, #0
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e055      	b.n	8003cf6 <settingPole+0xbc>
    {
        int index = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	1c5a      	adds	r2, r3, #1
 8003c52:	613a      	str	r2, [r7, #16]
 8003c54:	3318      	adds	r3, #24
 8003c56:	443b      	add	r3, r7
 8003c58:	222b      	movs	r2, #43	; 0x2b
 8003c5a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	613a      	str	r2, [r7, #16]
 8003c64:	3318      	adds	r3, #24
 8003c66:	443b      	add	r3, r7
 8003c68:	220c      	movs	r2, #12
 8003c6a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	1c5a      	adds	r2, r3, #1
 8003c72:	613a      	str	r2, [r7, #16]
 8003c74:	3318      	adds	r3, #24
 8003c76:	443b      	add	r3, r7
 8003c78:	2220      	movs	r2, #32
 8003c7a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	b2da      	uxtb	r2, r3
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1c59      	adds	r1, r3, #1
 8003c86:	6139      	str	r1, [r7, #16]
 8003c88:	3201      	adds	r2, #1
 8003c8a:	b2d2      	uxtb	r2, r2
 8003c8c:	3318      	adds	r3, #24
 8003c8e:	443b      	add	r3, r7
 8003c90:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1c5a      	adds	r2, r3, #1
 8003c98:	613a      	str	r2, [r7, #16]
 8003c9a:	88fa      	ldrh	r2, [r7, #6]
 8003c9c:	b2d2      	uxtb	r2, r2
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	443b      	add	r3, r7
 8003ca2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 8003ca6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003caa:	121b      	asrs	r3, r3, #8
 8003cac:	b219      	sxth	r1, r3
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	613a      	str	r2, [r7, #16]
 8003cb4:	b2ca      	uxtb	r2, r1
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	443b      	add	r3, r7
 8003cba:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1c5a      	adds	r2, r3, #1
 8003cc2:	613a      	str	r2, [r7, #16]
 8003cc4:	3318      	adds	r3, #24
 8003cc6:	443b      	add	r3, r7
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003cce:	f107 0208 	add.w	r2, r7, #8
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	4413      	add	r3, r2
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003cda:	f107 0108 	add.w	r1, r7, #8
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2208      	movs	r2, #8
 8003ce2:	f240 6001 	movw	r0, #1537	; 0x601
 8003ce6:	f7ff f97f 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003cea:	2064      	movs	r0, #100	; 0x64
 8003cec:	f001 fa82 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003cf0:	697b      	ldr	r3, [r7, #20]
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	dda6      	ble.n	8003c4a <settingPole+0x10>
    }
}
 8003cfc:	bf00      	nop
 8003cfe:	bf00      	nop
 8003d00:	3718      	adds	r7, #24
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}

08003d06 <settingBreak>:

void settingBreak(uint8_t enable)
{
 8003d06:	b580      	push	{r7, lr}
 8003d08:	b086      	sub	sp, #24
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	4603      	mov	r3, r0
 8003d0e:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	617a      	str	r2, [r7, #20]
 8003d1a:	3318      	adds	r3, #24
 8003d1c:	443b      	add	r3, r7
 8003d1e:	222b      	movs	r2, #43	; 0x2b
 8003d20:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	1c5a      	adds	r2, r3, #1
 8003d28:	617a      	str	r2, [r7, #20]
 8003d2a:	3318      	adds	r3, #24
 8003d2c:	443b      	add	r3, r7
 8003d2e:	2207      	movs	r2, #7
 8003d30:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	617a      	str	r2, [r7, #20]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	443b      	add	r3, r7
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	1c5a      	adds	r2, r3, #1
 8003d48:	617a      	str	r2, [r7, #20]
 8003d4a:	3318      	adds	r3, #24
 8003d4c:	443b      	add	r3, r7
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	1c5a      	adds	r2, r3, #1
 8003d58:	617a      	str	r2, [r7, #20]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	443b      	add	r3, r7
 8003d5e:	79fa      	ldrb	r2, [r7, #7]
 8003d60:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	1c5a      	adds	r2, r3, #1
 8003d68:	617a      	str	r2, [r7, #20]
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	443b      	add	r3, r7
 8003d6e:	2200      	movs	r2, #0
 8003d70:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	1c5a      	adds	r2, r3, #1
 8003d78:	617a      	str	r2, [r7, #20]
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	443b      	add	r3, r7
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003d84:	f107 020c 	add.w	r2, r7, #12
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003d90:	f107 010c 	add.w	r1, r7, #12
 8003d94:	2300      	movs	r3, #0
 8003d96:	2208      	movs	r2, #8
 8003d98:	f240 6001 	movw	r0, #1537	; 0x601
 8003d9c:	f7ff f924 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003da0:	2064      	movs	r0, #100	; 0x64
 8003da2:	f001 fa27 	bl	80051f4 <HAL_Delay>
}
 8003da6:	bf00      	nop
 8003da8:	3718      	adds	r7, #24
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}

08003dae <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8003dae:	b580      	push	{r7, lr}
 8003db0:	b086      	sub	sp, #24
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	4603      	mov	r3, r0
 8003db6:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8003db8:	2300      	movs	r3, #0
 8003dba:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	1c5a      	adds	r2, r3, #1
 8003dc0:	617a      	str	r2, [r7, #20]
 8003dc2:	3318      	adds	r3, #24
 8003dc4:	443b      	add	r3, r7
 8003dc6:	222b      	movs	r2, #43	; 0x2b
 8003dc8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	617a      	str	r2, [r7, #20]
 8003dd2:	3318      	adds	r3, #24
 8003dd4:	443b      	add	r3, r7
 8003dd6:	2208      	movs	r2, #8
 8003dd8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	617a      	str	r2, [r7, #20]
 8003de2:	3318      	adds	r3, #24
 8003de4:	443b      	add	r3, r7
 8003de6:	2220      	movs	r2, #32
 8003de8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	617a      	str	r2, [r7, #20]
 8003df2:	3318      	adds	r3, #24
 8003df4:	443b      	add	r3, r7
 8003df6:	2200      	movs	r2, #0
 8003df8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	1c5a      	adds	r2, r3, #1
 8003e00:	617a      	str	r2, [r7, #20]
 8003e02:	88fa      	ldrh	r2, [r7, #6]
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	3318      	adds	r3, #24
 8003e08:	443b      	add	r3, r7
 8003e0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8003e0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e12:	121b      	asrs	r3, r3, #8
 8003e14:	b219      	sxth	r1, r3
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	1c5a      	adds	r2, r3, #1
 8003e1a:	617a      	str	r2, [r7, #20]
 8003e1c:	b2ca      	uxtb	r2, r1
 8003e1e:	3318      	adds	r3, #24
 8003e20:	443b      	add	r3, r7
 8003e22:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	1c5a      	adds	r2, r3, #1
 8003e2a:	617a      	str	r2, [r7, #20]
 8003e2c:	3318      	adds	r3, #24
 8003e2e:	443b      	add	r3, r7
 8003e30:	2200      	movs	r2, #0
 8003e32:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003e36:	f107 020c 	add.w	r2, r7, #12
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	2200      	movs	r2, #0
 8003e40:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003e42:	f107 010c 	add.w	r1, r7, #12
 8003e46:	2300      	movs	r3, #0
 8003e48:	2208      	movs	r2, #8
 8003e4a:	f240 6001 	movw	r0, #1537	; 0x601
 8003e4e:	f7ff f8cb 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003e52:	2064      	movs	r0, #100	; 0x64
 8003e54:	f001 f9ce 	bl	80051f4 <HAL_Delay>
}
 8003e58:	bf00      	nop
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
 8003e6e:	e05e      	b.n	8003f2e <settingRatedCurrent+0xce>
    {
        int index = 0;
 8003e70:	2300      	movs	r3, #0
 8003e72:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	613a      	str	r2, [r7, #16]
 8003e7a:	3318      	adds	r3, #24
 8003e7c:	443b      	add	r3, r7
 8003e7e:	222b      	movs	r2, #43	; 0x2b
 8003e80:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	613a      	str	r2, [r7, #16]
 8003e8a:	3318      	adds	r3, #24
 8003e8c:	443b      	add	r3, r7
 8003e8e:	2214      	movs	r2, #20
 8003e90:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1c5a      	adds	r2, r3, #1
 8003e98:	613a      	str	r2, [r7, #16]
 8003e9a:	3318      	adds	r3, #24
 8003e9c:	443b      	add	r3, r7
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	b2da      	uxtb	r2, r3
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1c59      	adds	r1, r3, #1
 8003eac:	6139      	str	r1, [r7, #16]
 8003eae:	3201      	adds	r2, #1
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	3318      	adds	r3, #24
 8003eb4:	443b      	add	r3, r7
 8003eb6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003eba:	f04f 0200 	mov.w	r2, #0
 8003ebe:	4b20      	ldr	r3, [pc, #128]	; (8003f40 <settingRatedCurrent+0xe0>)
 8003ec0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ec4:	f7fc fbb0 	bl	8000628 <__aeabi_dmul>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	460b      	mov	r3, r1
 8003ecc:	4610      	mov	r0, r2
 8003ece:	4619      	mov	r1, r3
 8003ed0:	f7fc fe44 	bl	8000b5c <__aeabi_d2iz>
 8003ed4:	4601      	mov	r1, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1c5a      	adds	r2, r3, #1
 8003eda:	613a      	str	r2, [r7, #16]
 8003edc:	b2ca      	uxtb	r2, r1
 8003ede:	3318      	adds	r3, #24
 8003ee0:	443b      	add	r3, r7
 8003ee2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	613a      	str	r2, [r7, #16]
 8003eec:	3318      	adds	r3, #24
 8003eee:	443b      	add	r3, r7
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	613a      	str	r2, [r7, #16]
 8003efc:	3318      	adds	r3, #24
 8003efe:	443b      	add	r3, r7
 8003f00:	2200      	movs	r2, #0
 8003f02:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003f06:	f107 0208 	add.w	r2, r7, #8
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	4413      	add	r3, r2
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003f12:	f107 0108 	add.w	r1, r7, #8
 8003f16:	2300      	movs	r3, #0
 8003f18:	2208      	movs	r2, #8
 8003f1a:	f240 6001 	movw	r0, #1537	; 0x601
 8003f1e:	f7ff f863 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003f22:	2064      	movs	r0, #100	; 0x64
 8003f24:	f001 f966 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	3301      	adds	r3, #1
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	dd9d      	ble.n	8003e70 <settingRatedCurrent+0x10>
    }
}
 8003f34:	bf00      	nop
 8003f36:	bf00      	nop
 8003f38:	3718      	adds	r7, #24
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	40240000 	.word	0x40240000

08003f44 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b086      	sub	sp, #24
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	e05e      	b.n	8004012 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1c5a      	adds	r2, r3, #1
 8003f5c:	613a      	str	r2, [r7, #16]
 8003f5e:	3318      	adds	r3, #24
 8003f60:	443b      	add	r3, r7
 8003f62:	222b      	movs	r2, #43	; 0x2b
 8003f64:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	613a      	str	r2, [r7, #16]
 8003f6e:	3318      	adds	r3, #24
 8003f70:	443b      	add	r3, r7
 8003f72:	2215      	movs	r2, #21
 8003f74:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	1c5a      	adds	r2, r3, #1
 8003f7c:	613a      	str	r2, [r7, #16]
 8003f7e:	3318      	adds	r3, #24
 8003f80:	443b      	add	r3, r7
 8003f82:	2220      	movs	r2, #32
 8003f84:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	6139      	str	r1, [r7, #16]
 8003f92:	3201      	adds	r2, #1
 8003f94:	b2d2      	uxtb	r2, r2
 8003f96:	3318      	adds	r3, #24
 8003f98:	443b      	add	r3, r7
 8003f9a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003f9e:	f04f 0200 	mov.w	r2, #0
 8003fa2:	4b20      	ldr	r3, [pc, #128]	; (8004024 <settingMaxCurrent+0xe0>)
 8003fa4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fa8:	f7fc fb3e 	bl	8000628 <__aeabi_dmul>
 8003fac:	4602      	mov	r2, r0
 8003fae:	460b      	mov	r3, r1
 8003fb0:	4610      	mov	r0, r2
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	f7fc fdd2 	bl	8000b5c <__aeabi_d2iz>
 8003fb8:	4601      	mov	r1, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	613a      	str	r2, [r7, #16]
 8003fc0:	b2ca      	uxtb	r2, r1
 8003fc2:	3318      	adds	r3, #24
 8003fc4:	443b      	add	r3, r7
 8003fc6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	1c5a      	adds	r2, r3, #1
 8003fce:	613a      	str	r2, [r7, #16]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	443b      	add	r3, r7
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1c5a      	adds	r2, r3, #1
 8003fde:	613a      	str	r2, [r7, #16]
 8003fe0:	3318      	adds	r3, #24
 8003fe2:	443b      	add	r3, r7
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003fea:	f107 0208 	add.w	r2, r7, #8
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ff6:	f107 0108 	add.w	r1, r7, #8
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	2208      	movs	r2, #8
 8003ffe:	f240 6001 	movw	r0, #1537	; 0x601
 8004002:	f7fe fff1 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004006:	2064      	movs	r0, #100	; 0x64
 8004008:	f001 f8f4 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	3301      	adds	r3, #1
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b01      	cmp	r3, #1
 8004016:	dd9d      	ble.n	8003f54 <settingMaxCurrent+0x10>
    }
}
 8004018:	bf00      	nop
 800401a:	bf00      	nop
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40240000 	.word	0x40240000

08004028 <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004032:	2300      	movs	r3, #0
 8004034:	617b      	str	r3, [r7, #20]
 8004036:	e055      	b.n	80040e4 <settingHallOffset+0xbc>
    {
        int index = 0;
 8004038:	2300      	movs	r3, #0
 800403a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	1c5a      	adds	r2, r3, #1
 8004040:	613a      	str	r2, [r7, #16]
 8004042:	3318      	adds	r3, #24
 8004044:	443b      	add	r3, r7
 8004046:	222b      	movs	r2, #43	; 0x2b
 8004048:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	1c5a      	adds	r2, r3, #1
 8004050:	613a      	str	r2, [r7, #16]
 8004052:	3318      	adds	r3, #24
 8004054:	443b      	add	r3, r7
 8004056:	2211      	movs	r2, #17
 8004058:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1c5a      	adds	r2, r3, #1
 8004060:	613a      	str	r2, [r7, #16]
 8004062:	3318      	adds	r3, #24
 8004064:	443b      	add	r3, r7
 8004066:	2220      	movs	r2, #32
 8004068:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1c59      	adds	r1, r3, #1
 8004074:	6139      	str	r1, [r7, #16]
 8004076:	3201      	adds	r2, #1
 8004078:	b2d2      	uxtb	r2, r2
 800407a:	3318      	adds	r3, #24
 800407c:	443b      	add	r3, r7
 800407e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1c5a      	adds	r2, r3, #1
 8004086:	613a      	str	r2, [r7, #16]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	b2d2      	uxtb	r2, r2
 800408c:	3318      	adds	r3, #24
 800408e:	443b      	add	r3, r7
 8004090:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 8004094:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004098:	121b      	asrs	r3, r3, #8
 800409a:	b219      	sxth	r1, r3
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	613a      	str	r2, [r7, #16]
 80040a2:	b2ca      	uxtb	r2, r1
 80040a4:	3318      	adds	r3, #24
 80040a6:	443b      	add	r3, r7
 80040a8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1c5a      	adds	r2, r3, #1
 80040b0:	613a      	str	r2, [r7, #16]
 80040b2:	3318      	adds	r3, #24
 80040b4:	443b      	add	r3, r7
 80040b6:	2200      	movs	r2, #0
 80040b8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80040bc:	f107 0208 	add.w	r2, r7, #8
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	4413      	add	r3, r2
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80040c8:	f107 0108 	add.w	r1, r7, #8
 80040cc:	2300      	movs	r3, #0
 80040ce:	2208      	movs	r2, #8
 80040d0:	f240 6001 	movw	r0, #1537	; 0x601
 80040d4:	f7fe ff88 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80040d8:	2064      	movs	r0, #100	; 0x64
 80040da:	f001 f88b 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	3301      	adds	r3, #1
 80040e2:	617b      	str	r3, [r7, #20]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	dda6      	ble.n	8004038 <settingHallOffset+0x10>
    }
}
 80040ea:	bf00      	nop
 80040ec:	bf00      	nop
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <save>:

void save()
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	1c5a      	adds	r2, r3, #1
 8004102:	60fa      	str	r2, [r7, #12]
 8004104:	3310      	adds	r3, #16
 8004106:	443b      	add	r3, r7
 8004108:	222b      	movs	r2, #43	; 0x2b
 800410a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	60fa      	str	r2, [r7, #12]
 8004114:	3310      	adds	r3, #16
 8004116:	443b      	add	r3, r7
 8004118:	2210      	movs	r2, #16
 800411a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	60fa      	str	r2, [r7, #12]
 8004124:	3310      	adds	r3, #16
 8004126:	443b      	add	r3, r7
 8004128:	2220      	movs	r2, #32
 800412a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	60fa      	str	r2, [r7, #12]
 8004134:	3310      	adds	r3, #16
 8004136:	443b      	add	r3, r7
 8004138:	2200      	movs	r2, #0
 800413a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	60fa      	str	r2, [r7, #12]
 8004144:	3310      	adds	r3, #16
 8004146:	443b      	add	r3, r7
 8004148:	2201      	movs	r2, #1
 800414a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1c5a      	adds	r2, r3, #1
 8004152:	60fa      	str	r2, [r7, #12]
 8004154:	3310      	adds	r3, #16
 8004156:	443b      	add	r3, r7
 8004158:	2200      	movs	r2, #0
 800415a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	1c5a      	adds	r2, r3, #1
 8004162:	60fa      	str	r2, [r7, #12]
 8004164:	3310      	adds	r3, #16
 8004166:	443b      	add	r3, r7
 8004168:	2200      	movs	r2, #0
 800416a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800416e:	1d3a      	adds	r2, r7, #4
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	2200      	movs	r2, #0
 8004176:	701a      	strb	r2, [r3, #0]
    index = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800417c:	1d39      	adds	r1, r7, #4
 800417e:	2300      	movs	r3, #0
 8004180:	2208      	movs	r2, #8
 8004182:	f240 6001 	movw	r0, #1537	; 0x601
 8004186:	f7fe ff2f 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800418a:	2064      	movs	r0, #100	; 0x64
 800418c:	f001 f832 	bl	80051f4 <HAL_Delay>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <startMotor>:



void startMotor()
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
    enable();
 800419c:	f000 f806 	bl	80041ac <enable>
    velocityMode();
 80041a0:	f7ff fc45 	bl	8003a2e <velocityMode>
    synchronousMode();
 80041a4:	f7ff fc93 	bl	8003ace <synchronousMode>
}
 80041a8:	bf00      	nop
 80041aa:	bd80      	pop	{r7, pc}

080041ac <enable>:

void enable()
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 80041b2:	4b2f      	ldr	r3, [pc, #188]	; (8004270 <enable+0xc4>)
 80041b4:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
 80041ba:	e050      	b.n	800425e <enable+0xb2>
    {
        int index = 0;
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1c5a      	adds	r2, r3, #1
 80041c4:	613a      	str	r2, [r7, #16]
 80041c6:	3318      	adds	r3, #24
 80041c8:	443b      	add	r3, r7
 80041ca:	222b      	movs	r2, #43	; 0x2b
 80041cc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	613a      	str	r2, [r7, #16]
 80041d6:	3318      	adds	r3, #24
 80041d8:	443b      	add	r3, r7
 80041da:	2240      	movs	r2, #64	; 0x40
 80041dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	1c5a      	adds	r2, r3, #1
 80041e4:	613a      	str	r2, [r7, #16]
 80041e6:	3318      	adds	r3, #24
 80041e8:	443b      	add	r3, r7
 80041ea:	2260      	movs	r2, #96	; 0x60
 80041ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	613a      	str	r2, [r7, #16]
 80041f6:	3318      	adds	r3, #24
 80041f8:	443b      	add	r3, r7
 80041fa:	2200      	movs	r2, #0
 80041fc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	1c5a      	adds	r2, r3, #1
 8004204:	613a      	str	r2, [r7, #16]
 8004206:	1d39      	adds	r1, r7, #4
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	440a      	add	r2, r1
 800420c:	7812      	ldrb	r2, [r2, #0]
 800420e:	3318      	adds	r3, #24
 8004210:	443b      	add	r3, r7
 8004212:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1c5a      	adds	r2, r3, #1
 800421a:	613a      	str	r2, [r7, #16]
 800421c:	3318      	adds	r3, #24
 800421e:	443b      	add	r3, r7
 8004220:	2200      	movs	r2, #0
 8004222:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	613a      	str	r2, [r7, #16]
 800422c:	3318      	adds	r3, #24
 800422e:	443b      	add	r3, r7
 8004230:	2200      	movs	r2, #0
 8004232:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004236:	f107 0208 	add.w	r2, r7, #8
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	4413      	add	r3, r2
 800423e:	2200      	movs	r2, #0
 8004240:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004242:	f107 0108 	add.w	r1, r7, #8
 8004246:	2300      	movs	r3, #0
 8004248:	2208      	movs	r2, #8
 800424a:	f240 6001 	movw	r0, #1537	; 0x601
 800424e:	f7fe fecb 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004252:	2064      	movs	r0, #100	; 0x64
 8004254:	f000 ffce 	bl	80051f4 <HAL_Delay>
    for(int i =0;i<4;i++)
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3301      	adds	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b03      	cmp	r3, #3
 8004262:	ddab      	ble.n	80041bc <enable+0x10>
    }
}
 8004264:	bf00      	nop
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	0f070600 	.word	0x0f070600

08004274 <disable>:

void disable()
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	60fa      	str	r2, [r7, #12]
 8004284:	3310      	adds	r3, #16
 8004286:	443b      	add	r3, r7
 8004288:	222b      	movs	r2, #43	; 0x2b
 800428a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	60fa      	str	r2, [r7, #12]
 8004294:	3310      	adds	r3, #16
 8004296:	443b      	add	r3, r7
 8004298:	2240      	movs	r2, #64	; 0x40
 800429a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	60fa      	str	r2, [r7, #12]
 80042a4:	3310      	adds	r3, #16
 80042a6:	443b      	add	r3, r7
 80042a8:	2260      	movs	r2, #96	; 0x60
 80042aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	60fa      	str	r2, [r7, #12]
 80042b4:	3310      	adds	r3, #16
 80042b6:	443b      	add	r3, r7
 80042b8:	2200      	movs	r2, #0
 80042ba:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	1c5a      	adds	r2, r3, #1
 80042c2:	60fa      	str	r2, [r7, #12]
 80042c4:	3310      	adds	r3, #16
 80042c6:	443b      	add	r3, r7
 80042c8:	2200      	movs	r2, #0
 80042ca:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	1c5a      	adds	r2, r3, #1
 80042d2:	60fa      	str	r2, [r7, #12]
 80042d4:	3310      	adds	r3, #16
 80042d6:	443b      	add	r3, r7
 80042d8:	2200      	movs	r2, #0
 80042da:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	3310      	adds	r3, #16
 80042e6:	443b      	add	r3, r7
 80042e8:	2200      	movs	r2, #0
 80042ea:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80042ee:	1d3a      	adds	r2, r7, #4
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
    index = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80042fc:	1d39      	adds	r1, r7, #4
 80042fe:	2300      	movs	r3, #0
 8004300:	2208      	movs	r2, #8
 8004302:	f240 6001 	movw	r0, #1537	; 0x601
 8004306:	f7fe fe6f 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800430a:	2064      	movs	r0, #100	; 0x64
 800430c:	f000 ff72 	bl	80051f4 <HAL_Delay>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <reset>:

void reset()
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b084      	sub	sp, #16
 800431c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800431e:	2300      	movs	r3, #0
 8004320:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	1c5a      	adds	r2, r3, #1
 8004326:	60fa      	str	r2, [r7, #12]
 8004328:	3310      	adds	r3, #16
 800432a:	443b      	add	r3, r7
 800432c:	222b      	movs	r2, #43	; 0x2b
 800432e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	60fa      	str	r2, [r7, #12]
 8004338:	3310      	adds	r3, #16
 800433a:	443b      	add	r3, r7
 800433c:	2240      	movs	r2, #64	; 0x40
 800433e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1c5a      	adds	r2, r3, #1
 8004346:	60fa      	str	r2, [r7, #12]
 8004348:	3310      	adds	r3, #16
 800434a:	443b      	add	r3, r7
 800434c:	2260      	movs	r2, #96	; 0x60
 800434e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	1c5a      	adds	r2, r3, #1
 8004356:	60fa      	str	r2, [r7, #12]
 8004358:	3310      	adds	r3, #16
 800435a:	443b      	add	r3, r7
 800435c:	2200      	movs	r2, #0
 800435e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1c5a      	adds	r2, r3, #1
 8004366:	60fa      	str	r2, [r7, #12]
 8004368:	3310      	adds	r3, #16
 800436a:	443b      	add	r3, r7
 800436c:	2280      	movs	r2, #128	; 0x80
 800436e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	60fa      	str	r2, [r7, #12]
 8004378:	3310      	adds	r3, #16
 800437a:	443b      	add	r3, r7
 800437c:	2200      	movs	r2, #0
 800437e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	1c5a      	adds	r2, r3, #1
 8004386:	60fa      	str	r2, [r7, #12]
 8004388:	3310      	adds	r3, #16
 800438a:	443b      	add	r3, r7
 800438c:	2200      	movs	r2, #0
 800438e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004392:	1d3a      	adds	r2, r7, #4
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	4413      	add	r3, r2
 8004398:	2200      	movs	r2, #0
 800439a:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800439c:	1d39      	adds	r1, r7, #4
 800439e:	2300      	movs	r3, #0
 80043a0:	2208      	movs	r2, #8
 80043a2:	f240 6001 	movw	r0, #1537	; 0x601
 80043a6:	f7fe fe1f 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80043aa:	2064      	movs	r0, #100	; 0x64
 80043ac:	f000 ff22 	bl	80051f4 <HAL_Delay>
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <reqEnc>:

void reqEnc()
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	1c5a      	adds	r2, r3, #1
 80043c6:	60fa      	str	r2, [r7, #12]
 80043c8:	3310      	adds	r3, #16
 80043ca:	443b      	add	r3, r7
 80043cc:	2240      	movs	r2, #64	; 0x40
 80043ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	60fa      	str	r2, [r7, #12]
 80043d8:	3310      	adds	r3, #16
 80043da:	443b      	add	r3, r7
 80043dc:	226c      	movs	r2, #108	; 0x6c
 80043de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	60fa      	str	r2, [r7, #12]
 80043e8:	3310      	adds	r3, #16
 80043ea:	443b      	add	r3, r7
 80043ec:	2260      	movs	r2, #96	; 0x60
 80043ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	1c5a      	adds	r2, r3, #1
 80043f6:	60fa      	str	r2, [r7, #12]
 80043f8:	3310      	adds	r3, #16
 80043fa:	443b      	add	r3, r7
 80043fc:	2203      	movs	r2, #3
 80043fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	1c5a      	adds	r2, r3, #1
 8004406:	60fa      	str	r2, [r7, #12]
 8004408:	3310      	adds	r3, #16
 800440a:	443b      	add	r3, r7
 800440c:	2200      	movs	r2, #0
 800440e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	1c5a      	adds	r2, r3, #1
 8004416:	60fa      	str	r2, [r7, #12]
 8004418:	3310      	adds	r3, #16
 800441a:	443b      	add	r3, r7
 800441c:	2200      	movs	r2, #0
 800441e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1c5a      	adds	r2, r3, #1
 8004426:	60fa      	str	r2, [r7, #12]
 8004428:	3310      	adds	r3, #16
 800442a:	443b      	add	r3, r7
 800442c:	2200      	movs	r2, #0
 800442e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004432:	1d3a      	adds	r2, r7, #4
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	4413      	add	r3, r2
 8004438:	2200      	movs	r2, #0
 800443a:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800443c:	1d39      	adds	r1, r7, #4
 800443e:	2300      	movs	r3, #0
 8004440:	2208      	movs	r2, #8
 8004442:	f240 6001 	movw	r0, #1537	; 0x601
 8004446:	f7fe fdcf 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <reqState>:

void reqState()
{
 8004452:	b580      	push	{r7, lr}
 8004454:	b084      	sub	sp, #16
 8004456:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004458:	2300      	movs	r3, #0
 800445a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	60fa      	str	r2, [r7, #12]
 8004462:	3310      	adds	r3, #16
 8004464:	443b      	add	r3, r7
 8004466:	2240      	movs	r2, #64	; 0x40
 8004468:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	1c5a      	adds	r2, r3, #1
 8004470:	60fa      	str	r2, [r7, #12]
 8004472:	3310      	adds	r3, #16
 8004474:	443b      	add	r3, r7
 8004476:	223f      	movs	r2, #63	; 0x3f
 8004478:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	1c5a      	adds	r2, r3, #1
 8004480:	60fa      	str	r2, [r7, #12]
 8004482:	3310      	adds	r3, #16
 8004484:	443b      	add	r3, r7
 8004486:	2260      	movs	r2, #96	; 0x60
 8004488:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	1c5a      	adds	r2, r3, #1
 8004490:	60fa      	str	r2, [r7, #12]
 8004492:	3310      	adds	r3, #16
 8004494:	443b      	add	r3, r7
 8004496:	2200      	movs	r2, #0
 8004498:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	1c5a      	adds	r2, r3, #1
 80044a0:	60fa      	str	r2, [r7, #12]
 80044a2:	3310      	adds	r3, #16
 80044a4:	443b      	add	r3, r7
 80044a6:	2200      	movs	r2, #0
 80044a8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	1c5a      	adds	r2, r3, #1
 80044b0:	60fa      	str	r2, [r7, #12]
 80044b2:	3310      	adds	r3, #16
 80044b4:	443b      	add	r3, r7
 80044b6:	2200      	movs	r2, #0
 80044b8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	1c5a      	adds	r2, r3, #1
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	3310      	adds	r3, #16
 80044c4:	443b      	add	r3, r7
 80044c6:	2200      	movs	r2, #0
 80044c8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80044cc:	1d3a      	adds	r2, r7, #4
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	4413      	add	r3, r2
 80044d2:	2200      	movs	r2, #0
 80044d4:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80044d6:	1d39      	adds	r1, r7, #4
 80044d8:	2300      	movs	r3, #0
 80044da:	2208      	movs	r2, #8
 80044dc:	f240 6001 	movw	r0, #1537	; 0x601
 80044e0:	f7fe fd82 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	4603      	mov	r3, r0
 80044f4:	460a      	mov	r2, r1
 80044f6:	80fb      	strh	r3, [r7, #6]
 80044f8:	4613      	mov	r3, r2
 80044fa:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 80044fc:	88fb      	ldrh	r3, [r7, #6]
 80044fe:	425b      	negs	r3, r3
 8004500:	b29b      	uxth	r3, r3
 8004502:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	1c5a      	adds	r2, r3, #1
 800450c:	617a      	str	r2, [r7, #20]
 800450e:	3318      	adds	r3, #24
 8004510:	443b      	add	r3, r7
 8004512:	2223      	movs	r2, #35	; 0x23
 8004514:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	1c5a      	adds	r2, r3, #1
 800451c:	617a      	str	r2, [r7, #20]
 800451e:	3318      	adds	r3, #24
 8004520:	443b      	add	r3, r7
 8004522:	22ff      	movs	r2, #255	; 0xff
 8004524:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	617a      	str	r2, [r7, #20]
 800452e:	3318      	adds	r3, #24
 8004530:	443b      	add	r3, r7
 8004532:	2260      	movs	r2, #96	; 0x60
 8004534:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	617a      	str	r2, [r7, #20]
 800453e:	3318      	adds	r3, #24
 8004540:	443b      	add	r3, r7
 8004542:	2203      	movs	r2, #3
 8004544:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	1c5a      	adds	r2, r3, #1
 800454c:	617a      	str	r2, [r7, #20]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	3318      	adds	r3, #24
 8004554:	443b      	add	r3, r7
 8004556:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 800455a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800455e:	121b      	asrs	r3, r3, #8
 8004560:	b219      	sxth	r1, r3
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	1c5a      	adds	r2, r3, #1
 8004566:	617a      	str	r2, [r7, #20]
 8004568:	b2ca      	uxtb	r2, r1
 800456a:	3318      	adds	r3, #24
 800456c:	443b      	add	r3, r7
 800456e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1c5a      	adds	r2, r3, #1
 8004576:	617a      	str	r2, [r7, #20]
 8004578:	88ba      	ldrh	r2, [r7, #4]
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	3318      	adds	r3, #24
 800457e:	443b      	add	r3, r7
 8004580:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 8004584:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8004588:	121b      	asrs	r3, r3, #8
 800458a:	b21b      	sxth	r3, r3
 800458c:	b2d9      	uxtb	r1, r3
 800458e:	f107 020c 	add.w	r2, r7, #12
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	4413      	add	r3, r2
 8004596:	460a      	mov	r2, r1
 8004598:	701a      	strb	r2, [r3, #0]
    printf("hihi swv\n");
 800459a:	4807      	ldr	r0, [pc, #28]	; (80045b8 <control+0xcc>)
 800459c:	f005 fcae 	bl	8009efc <puts>
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80045a0:	f107 010c 	add.w	r1, r7, #12
 80045a4:	2300      	movs	r3, #0
 80045a6:	2208      	movs	r2, #8
 80045a8:	f240 6001 	movw	r0, #1537	; 0x601
 80045ac:	f7fe fd1c 	bl	8002fe8 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80045b0:	bf00      	nop
 80045b2:	3718      	adds	r7, #24
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	0800aee4 	.word	0x0800aee4

080045bc <settingKP>:

void settingKP(int16_t kp)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b086      	sub	sp, #24
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	4603      	mov	r3, r0
 80045c4:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80045c6:	2300      	movs	r3, #0
 80045c8:	617b      	str	r3, [r7, #20]
 80045ca:	e055      	b.n	8004678 <settingKP+0xbc>
    {
        int index = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	613a      	str	r2, [r7, #16]
 80045d6:	3318      	adds	r3, #24
 80045d8:	443b      	add	r3, r7
 80045da:	221d      	movs	r2, #29
 80045dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1c5a      	adds	r2, r3, #1
 80045e4:	613a      	str	r2, [r7, #16]
 80045e6:	3318      	adds	r3, #24
 80045e8:	443b      	add	r3, r7
 80045ea:	2220      	movs	r2, #32
 80045ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	613a      	str	r2, [r7, #16]
 80045f6:	3318      	adds	r3, #24
 80045f8:	443b      	add	r3, r7
 80045fa:	2220      	movs	r2, #32
 80045fc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	b2da      	uxtb	r2, r3
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1c59      	adds	r1, r3, #1
 8004608:	6139      	str	r1, [r7, #16]
 800460a:	3201      	adds	r2, #1
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	3318      	adds	r3, #24
 8004610:	443b      	add	r3, r7
 8004612:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1c5a      	adds	r2, r3, #1
 800461a:	613a      	str	r2, [r7, #16]
 800461c:	88fa      	ldrh	r2, [r7, #6]
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	3318      	adds	r3, #24
 8004622:	443b      	add	r3, r7
 8004624:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 8004628:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800462c:	121b      	asrs	r3, r3, #8
 800462e:	b219      	sxth	r1, r3
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	613a      	str	r2, [r7, #16]
 8004636:	b2ca      	uxtb	r2, r1
 8004638:	3318      	adds	r3, #24
 800463a:	443b      	add	r3, r7
 800463c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	613a      	str	r2, [r7, #16]
 8004646:	3318      	adds	r3, #24
 8004648:	443b      	add	r3, r7
 800464a:	2200      	movs	r2, #0
 800464c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004650:	f107 0208 	add.w	r2, r7, #8
 8004654:	693b      	ldr	r3, [r7, #16]
 8004656:	4413      	add	r3, r2
 8004658:	2200      	movs	r2, #0
 800465a:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800465c:	f107 0108 	add.w	r1, r7, #8
 8004660:	2300      	movs	r3, #0
 8004662:	2208      	movs	r2, #8
 8004664:	f240 6001 	movw	r0, #1537	; 0x601
 8004668:	f7fe fcbe 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 800466c:	2064      	movs	r0, #100	; 0x64
 800466e:	f000 fdc1 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	3301      	adds	r3, #1
 8004676:	617b      	str	r3, [r7, #20]
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	2b01      	cmp	r3, #1
 800467c:	dda6      	ble.n	80045cc <settingKP+0x10>
    }
}
 800467e:	bf00      	nop
 8004680:	bf00      	nop
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <settingKI>:

void settingKI(int16_t ki)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	4603      	mov	r3, r0
 8004690:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004692:	2300      	movs	r3, #0
 8004694:	617b      	str	r3, [r7, #20]
 8004696:	e055      	b.n	8004744 <settingKI+0xbc>
    {
        int index = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	1c5a      	adds	r2, r3, #1
 80046a0:	613a      	str	r2, [r7, #16]
 80046a2:	3318      	adds	r3, #24
 80046a4:	443b      	add	r3, r7
 80046a6:	221e      	movs	r2, #30
 80046a8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1c5a      	adds	r2, r3, #1
 80046b0:	613a      	str	r2, [r7, #16]
 80046b2:	3318      	adds	r3, #24
 80046b4:	443b      	add	r3, r7
 80046b6:	2220      	movs	r2, #32
 80046b8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	613a      	str	r2, [r7, #16]
 80046c2:	3318      	adds	r3, #24
 80046c4:	443b      	add	r3, r7
 80046c6:	2220      	movs	r2, #32
 80046c8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	b2da      	uxtb	r2, r3
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1c59      	adds	r1, r3, #1
 80046d4:	6139      	str	r1, [r7, #16]
 80046d6:	3201      	adds	r2, #1
 80046d8:	b2d2      	uxtb	r2, r2
 80046da:	3318      	adds	r3, #24
 80046dc:	443b      	add	r3, r7
 80046de:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	613a      	str	r2, [r7, #16]
 80046e8:	88fa      	ldrh	r2, [r7, #6]
 80046ea:	b2d2      	uxtb	r2, r2
 80046ec:	3318      	adds	r3, #24
 80046ee:	443b      	add	r3, r7
 80046f0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 80046f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80046f8:	121b      	asrs	r3, r3, #8
 80046fa:	b219      	sxth	r1, r3
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1c5a      	adds	r2, r3, #1
 8004700:	613a      	str	r2, [r7, #16]
 8004702:	b2ca      	uxtb	r2, r1
 8004704:	3318      	adds	r3, #24
 8004706:	443b      	add	r3, r7
 8004708:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	613a      	str	r2, [r7, #16]
 8004712:	3318      	adds	r3, #24
 8004714:	443b      	add	r3, r7
 8004716:	2200      	movs	r2, #0
 8004718:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800471c:	f107 0208 	add.w	r2, r7, #8
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	4413      	add	r3, r2
 8004724:	2200      	movs	r2, #0
 8004726:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004728:	f107 0108 	add.w	r1, r7, #8
 800472c:	2300      	movs	r3, #0
 800472e:	2208      	movs	r2, #8
 8004730:	f240 6001 	movw	r0, #1537	; 0x601
 8004734:	f7fe fc58 	bl	8002fe8 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004738:	2064      	movs	r0, #100	; 0x64
 800473a:	f000 fd5b 	bl	80051f4 <HAL_Delay>
    for(int i=0;i<2;i++)
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	3301      	adds	r3, #1
 8004742:	617b      	str	r3, [r7, #20]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	2b01      	cmp	r3, #1
 8004748:	dda6      	ble.n	8004698 <settingKI+0x10>
    }
}
 800474a:	bf00      	nop
 800474c:	bf00      	nop
 800474e:	3718      	adds	r7, #24
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	0000      	movs	r0, r0
	...

08004758 <settingMotor>:
void settingMotor()
{
 8004758:	b580      	push	{r7, lr}
 800475a:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 800475c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004760:	f7ff fa05 	bl	8003b6e <settingEnc>
    settingPole(POLE_PAIR);
 8004764:	200a      	movs	r0, #10
 8004766:	f7ff fa68 	bl	8003c3a <settingPole>
    settingBreak(BREAK_OPTION);
 800476a:	2001      	movs	r0, #1
 800476c:	f7ff facb 	bl	8003d06 <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004770:	20c8      	movs	r0, #200	; 0xc8
 8004772:	f7ff fb1c 	bl	8003dae <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 8004776:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80047a8 <settingMotor+0x50>
 800477a:	f7ff fb71 	bl	8003e60 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 800477e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80047b0 <settingMotor+0x58>
 8004782:	f7ff fbdf 	bl	8003f44 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 8004786:	20f0      	movs	r0, #240	; 0xf0
 8004788:	f7ff fc4e 	bl	8004028 <settingHallOffset>
    settingKP(KP_GAIN);
 800478c:	f240 2026 	movw	r0, #550	; 0x226
 8004790:	f7ff ff14 	bl	80045bc <settingKP>
    settingKI(KI_GAIN);
 8004794:	206e      	movs	r0, #110	; 0x6e
 8004796:	f7ff ff77 	bl	8004688 <settingKI>
    save();
 800479a:	f7ff fcab 	bl	80040f4 <save>
}
 800479e:	bf00      	nop
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	f3af 8000 	nop.w
 80047a8:	00000000 	.word	0x00000000
 80047ac:	40200000 	.word	0x40200000
 80047b0:	00000000 	.word	0x00000000
 80047b4:	40300000 	.word	0x40300000

080047b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b083      	sub	sp, #12
 80047bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80047be:	4b0f      	ldr	r3, [pc, #60]	; (80047fc <HAL_MspInit+0x44>)
 80047c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c2:	4a0e      	ldr	r2, [pc, #56]	; (80047fc <HAL_MspInit+0x44>)
 80047c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047c8:	6413      	str	r3, [r2, #64]	; 0x40
 80047ca:	4b0c      	ldr	r3, [pc, #48]	; (80047fc <HAL_MspInit+0x44>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047d2:	607b      	str	r3, [r7, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047d6:	4b09      	ldr	r3, [pc, #36]	; (80047fc <HAL_MspInit+0x44>)
 80047d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047da:	4a08      	ldr	r2, [pc, #32]	; (80047fc <HAL_MspInit+0x44>)
 80047dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047e0:	6453      	str	r3, [r2, #68]	; 0x44
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_MspInit+0x44>)
 80047e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ea:	603b      	str	r3, [r7, #0]
 80047ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800

08004800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004808:	f107 0314 	add.w	r3, r7, #20
 800480c:	2200      	movs	r2, #0
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	605a      	str	r2, [r3, #4]
 8004812:	609a      	str	r2, [r3, #8]
 8004814:	60da      	str	r2, [r3, #12]
 8004816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a15      	ldr	r2, [pc, #84]	; (8004874 <HAL_ADC_MspInit+0x74>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d123      	bne.n	800486a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004822:	4b15      	ldr	r3, [pc, #84]	; (8004878 <HAL_ADC_MspInit+0x78>)
 8004824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004826:	4a14      	ldr	r2, [pc, #80]	; (8004878 <HAL_ADC_MspInit+0x78>)
 8004828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800482c:	6453      	str	r3, [r2, #68]	; 0x44
 800482e:	4b12      	ldr	r3, [pc, #72]	; (8004878 <HAL_ADC_MspInit+0x78>)
 8004830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	613b      	str	r3, [r7, #16]
 8004838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800483a:	4b0f      	ldr	r3, [pc, #60]	; (8004878 <HAL_ADC_MspInit+0x78>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	4a0e      	ldr	r2, [pc, #56]	; (8004878 <HAL_ADC_MspInit+0x78>)
 8004840:	f043 0301 	orr.w	r3, r3, #1
 8004844:	6313      	str	r3, [r2, #48]	; 0x30
 8004846:	4b0c      	ldr	r3, [pc, #48]	; (8004878 <HAL_ADC_MspInit+0x78>)
 8004848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800484a:	f003 0301 	and.w	r3, r3, #1
 800484e:	60fb      	str	r3, [r7, #12]
 8004850:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8004852:	231e      	movs	r3, #30
 8004854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004856:	2303      	movs	r3, #3
 8004858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800485e:	f107 0314 	add.w	r3, r7, #20
 8004862:	4619      	mov	r1, r3
 8004864:	4805      	ldr	r0, [pc, #20]	; (800487c <HAL_ADC_MspInit+0x7c>)
 8004866:	f002 f8f3 	bl	8006a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800486a:	bf00      	nop
 800486c:	3728      	adds	r7, #40	; 0x28
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	40012000 	.word	0x40012000
 8004878:	40023800 	.word	0x40023800
 800487c:	40020000 	.word	0x40020000

08004880 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b08a      	sub	sp, #40	; 0x28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004888:	f107 0314 	add.w	r3, r7, #20
 800488c:	2200      	movs	r2, #0
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	605a      	str	r2, [r3, #4]
 8004892:	609a      	str	r2, [r3, #8]
 8004894:	60da      	str	r2, [r3, #12]
 8004896:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1b      	ldr	r2, [pc, #108]	; (800490c <HAL_CAN_MspInit+0x8c>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d12f      	bne.n	8004902 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80048a2:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	4a1a      	ldr	r2, [pc, #104]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048ac:	6413      	str	r3, [r2, #64]	; 0x40
 80048ae:	4b18      	ldr	r3, [pc, #96]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048c0:	f043 0308 	orr.w	r3, r3, #8
 80048c4:	6313      	str	r3, [r2, #48]	; 0x30
 80048c6:	4b12      	ldr	r3, [pc, #72]	; (8004910 <HAL_CAN_MspInit+0x90>)
 80048c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ca:	f003 0308 	and.w	r3, r3, #8
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048d2:	2303      	movs	r3, #3
 80048d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048d6:	2302      	movs	r3, #2
 80048d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80048de:	2303      	movs	r3, #3
 80048e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80048e2:	2309      	movs	r3, #9
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80048e6:	f107 0314 	add.w	r3, r7, #20
 80048ea:	4619      	mov	r1, r3
 80048ec:	4809      	ldr	r0, [pc, #36]	; (8004914 <HAL_CAN_MspInit+0x94>)
 80048ee:	f002 f8af 	bl	8006a50 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80048f2:	2200      	movs	r2, #0
 80048f4:	2100      	movs	r1, #0
 80048f6:	2014      	movs	r0, #20
 80048f8:	f002 f865 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80048fc:	2014      	movs	r0, #20
 80048fe:	f002 f87e 	bl	80069fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004902:	bf00      	nop
 8004904:	3728      	adds	r7, #40	; 0x28
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	40006400 	.word	0x40006400
 8004910:	40023800 	.word	0x40023800
 8004914:	40020c00 	.word	0x40020c00

08004918 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b088      	sub	sp, #32
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004928:	d10c      	bne.n	8004944 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800492a:	4b49      	ldr	r3, [pc, #292]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a48      	ldr	r2, [pc, #288]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004930:	f043 0301 	orr.w	r3, r3, #1
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
 8004936:	4b46      	ldr	r3, [pc, #280]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
 8004940:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8004942:	e080      	b.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a42      	ldr	r2, [pc, #264]	; (8004a54 <HAL_TIM_Base_MspInit+0x13c>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d114      	bne.n	8004978 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800494e:	4b40      	ldr	r3, [pc, #256]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	4a3f      	ldr	r2, [pc, #252]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004954:	f043 0308 	orr.w	r3, r3, #8
 8004958:	6413      	str	r3, [r2, #64]	; 0x40
 800495a:	4b3d      	ldr	r3, [pc, #244]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 800495c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495e:	f003 0308 	and.w	r3, r3, #8
 8004962:	61bb      	str	r3, [r7, #24]
 8004964:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8004966:	2200      	movs	r2, #0
 8004968:	2100      	movs	r1, #0
 800496a:	2032      	movs	r0, #50	; 0x32
 800496c:	f002 f82b 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004970:	2032      	movs	r0, #50	; 0x32
 8004972:	f002 f844 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 8004976:	e066      	b.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a36      	ldr	r2, [pc, #216]	; (8004a58 <HAL_TIM_Base_MspInit+0x140>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d114      	bne.n	80049ac <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004982:	4b33      	ldr	r3, [pc, #204]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	4a32      	ldr	r2, [pc, #200]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004988:	f043 0310 	orr.w	r3, r3, #16
 800498c:	6413      	str	r3, [r2, #64]	; 0x40
 800498e:	4b30      	ldr	r3, [pc, #192]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004992:	f003 0310 	and.w	r3, r3, #16
 8004996:	617b      	str	r3, [r7, #20]
 8004998:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	2100      	movs	r1, #0
 800499e:	2036      	movs	r0, #54	; 0x36
 80049a0:	f002 f811 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80049a4:	2036      	movs	r0, #54	; 0x36
 80049a6:	f002 f82a 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 80049aa:	e04c      	b.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_TIM_Base_MspInit+0x144>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d114      	bne.n	80049e0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	4a25      	ldr	r2, [pc, #148]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049bc:	f043 0320 	orr.w	r3, r3, #32
 80049c0:	6413      	str	r3, [r2, #64]	; 0x40
 80049c2:	4b23      	ldr	r3, [pc, #140]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c6:	f003 0320 	and.w	r3, r3, #32
 80049ca:	613b      	str	r3, [r7, #16]
 80049cc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80049ce:	2200      	movs	r2, #0
 80049d0:	2100      	movs	r1, #0
 80049d2:	2037      	movs	r0, #55	; 0x37
 80049d4:	f001 fff7 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80049d8:	2037      	movs	r0, #55	; 0x37
 80049da:	f002 f810 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 80049de:	e032      	b.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a1e      	ldr	r2, [pc, #120]	; (8004a60 <HAL_TIM_Base_MspInit+0x148>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d114      	bne.n	8004a14 <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80049ea:	4b19      	ldr	r3, [pc, #100]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ee:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049f4:	6453      	str	r3, [r2, #68]	; 0x44
 80049f6:	4b16      	ldr	r3, [pc, #88]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 80049f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049fe:	60fb      	str	r3, [r7, #12]
 8004a00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8004a02:	2200      	movs	r2, #0
 8004a04:	2100      	movs	r1, #0
 8004a06:	2018      	movs	r0, #24
 8004a08:	f001 ffdd 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a0c:	2018      	movs	r0, #24
 8004a0e:	f001 fff6 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 8004a12:	e018      	b.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a12      	ldr	r2, [pc, #72]	; (8004a64 <HAL_TIM_Base_MspInit+0x14c>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d113      	bne.n	8004a46 <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a22:	4a0b      	ldr	r2, [pc, #44]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004a24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a28:	6413      	str	r3, [r2, #64]	; 0x40
 8004a2a:	4b09      	ldr	r3, [pc, #36]	; (8004a50 <HAL_TIM_Base_MspInit+0x138>)
 8004a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a32:	60bb      	str	r3, [r7, #8]
 8004a34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8004a36:	2200      	movs	r2, #0
 8004a38:	2100      	movs	r1, #0
 8004a3a:	202d      	movs	r0, #45	; 0x2d
 8004a3c:	f001 ffc3 	bl	80069c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8004a40:	202d      	movs	r0, #45	; 0x2d
 8004a42:	f001 ffdc 	bl	80069fe <HAL_NVIC_EnableIRQ>
}
 8004a46:	bf00      	nop
 8004a48:	3720      	adds	r7, #32
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}
 8004a4e:	bf00      	nop
 8004a50:	40023800 	.word	0x40023800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40001000 	.word	0x40001000
 8004a5c:	40001400 	.word	0x40001400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40002000 	.word	0x40002000

08004a68 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b088      	sub	sp, #32
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a70:	f107 030c 	add.w	r3, r7, #12
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
 8004a78:	605a      	str	r2, [r3, #4]
 8004a7a:	609a      	str	r2, [r3, #8]
 8004a7c:	60da      	str	r2, [r3, #12]
 8004a7e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d11b      	bne.n	8004ac2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a8a:	4b10      	ldr	r3, [pc, #64]	; (8004acc <HAL_TIM_MspPostInit+0x64>)
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	4a0f      	ldr	r2, [pc, #60]	; (8004acc <HAL_TIM_MspPostInit+0x64>)
 8004a90:	f043 0301 	orr.w	r3, r3, #1
 8004a94:	6313      	str	r3, [r2, #48]	; 0x30
 8004a96:	4b0d      	ldr	r3, [pc, #52]	; (8004acc <HAL_TIM_MspPostInit+0x64>)
 8004a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	60bb      	str	r3, [r7, #8]
 8004aa0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004aa2:	2320      	movs	r3, #32
 8004aa4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004aa6:	2302      	movs	r3, #2
 8004aa8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ab6:	f107 030c 	add.w	r3, r7, #12
 8004aba:	4619      	mov	r1, r3
 8004abc:	4804      	ldr	r0, [pc, #16]	; (8004ad0 <HAL_TIM_MspPostInit+0x68>)
 8004abe:	f001 ffc7 	bl	8006a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004ac2:	bf00      	nop
 8004ac4:	3720      	adds	r7, #32
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}
 8004aca:	bf00      	nop
 8004acc:	40023800 	.word	0x40023800
 8004ad0:	40020000 	.word	0x40020000

08004ad4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b0aa      	sub	sp, #168	; 0xa8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004adc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
 8004ae4:	605a      	str	r2, [r3, #4]
 8004ae6:	609a      	str	r2, [r3, #8]
 8004ae8:	60da      	str	r2, [r3, #12]
 8004aea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004aec:	f107 0310 	add.w	r3, r7, #16
 8004af0:	2284      	movs	r2, #132	; 0x84
 8004af2:	2100      	movs	r1, #0
 8004af4:	4618      	mov	r0, r3
 8004af6:	f005 f973 	bl	8009de0 <memset>
  if(huart->Instance==USART1)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a21      	ldr	r2, [pc, #132]	; (8004b84 <HAL_UART_MspInit+0xb0>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d13a      	bne.n	8004b7a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b04:	2340      	movs	r3, #64	; 0x40
 8004b06:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b0c:	f107 0310 	add.w	r3, r7, #16
 8004b10:	4618      	mov	r0, r3
 8004b12:	f002 fec7 	bl	80078a4 <HAL_RCCEx_PeriphCLKConfig>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d001      	beq.n	8004b20 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004b1c:	f7fe ff82 	bl	8003a24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b20:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b24:	4a18      	ldr	r2, [pc, #96]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b26:	f043 0310 	orr.w	r3, r3, #16
 8004b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8004b2c:	4b16      	ldr	r3, [pc, #88]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	60fb      	str	r3, [r7, #12]
 8004b36:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b38:	4b13      	ldr	r3, [pc, #76]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b3c:	4a12      	ldr	r2, [pc, #72]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b3e:	f043 0302 	orr.w	r3, r3, #2
 8004b42:	6313      	str	r3, [r2, #48]	; 0x30
 8004b44:	4b10      	ldr	r3, [pc, #64]	; (8004b88 <HAL_UART_MspInit+0xb4>)
 8004b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b50:	23c0      	movs	r3, #192	; 0xc0
 8004b52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b56:	2302      	movs	r3, #2
 8004b58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b62:	2303      	movs	r3, #3
 8004b64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b68:	2307      	movs	r3, #7
 8004b6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004b72:	4619      	mov	r1, r3
 8004b74:	4805      	ldr	r0, [pc, #20]	; (8004b8c <HAL_UART_MspInit+0xb8>)
 8004b76:	f001 ff6b 	bl	8006a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b7a:	bf00      	nop
 8004b7c:	37a8      	adds	r7, #168	; 0xa8
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	40011000 	.word	0x40011000
 8004b88:	40023800 	.word	0x40023800
 8004b8c:	40020400 	.word	0x40020400

08004b90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b90:	b480      	push	{r7}
 8004b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b94:	e7fe      	b.n	8004b94 <NMI_Handler+0x4>

08004b96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b96:	b480      	push	{r7}
 8004b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b9a:	e7fe      	b.n	8004b9a <HardFault_Handler+0x4>

08004b9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004ba0:	e7fe      	b.n	8004ba0 <MemManage_Handler+0x4>

08004ba2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ba6:	e7fe      	b.n	8004ba6 <BusFault_Handler+0x4>

08004ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bac:	e7fe      	b.n	8004bac <UsageFault_Handler+0x4>

08004bae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bae:	b480      	push	{r7}
 8004bb0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bb2:	bf00      	nop
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bba:	4770      	bx	lr

08004bbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004bbc:	b480      	push	{r7}
 8004bbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004bc0:	bf00      	nop
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004bce:	bf00      	nop
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004bdc:	f000 faea 	bl	80051b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004be0:	bf00      	nop
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004be8:	4802      	ldr	r0, [pc, #8]	; (8004bf4 <CAN1_RX0_IRQHandler+0x10>)
 8004bea:	f001 fbbd 	bl	8006368 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004bee:	bf00      	nop
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	200002ac 	.word	0x200002ac

08004bf8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8004bfc:	2040      	movs	r0, #64	; 0x40
 8004bfe:	f002 f91f 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data5_Pin);
 8004c02:	2080      	movs	r0, #128	; 0x80
 8004c04:	f002 f91c 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data2_Pin);
 8004c08:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c0c:	f002 f918 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004c10:	bf00      	nop
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004c18:	4802      	ldr	r0, [pc, #8]	; (8004c24 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004c1a:	f003 fcdb 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004c1e:	bf00      	nop
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	bf00      	nop
 8004c24:	20000404 	.word	0x20000404

08004c28 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data3_Pin);
 8004c2c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c30:	f002 f906 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USS_Data6_Pin);
 8004c34:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c38:	f002 f902 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c3c:	bf00      	nop
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004c44:	4802      	ldr	r0, [pc, #8]	; (8004c50 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004c46:	f003 fcc5 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004c4a:	bf00      	nop
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	20000450 	.word	0x20000450

08004c54 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c58:	4802      	ldr	r0, [pc, #8]	; (8004c64 <TIM5_IRQHandler+0x10>)
 8004c5a:	f003 fcbb 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	bd80      	pop	{r7, pc}
 8004c62:	bf00      	nop
 8004c64:	20000320 	.word	0x20000320

08004c68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c6c:	4802      	ldr	r0, [pc, #8]	; (8004c78 <TIM6_DAC_IRQHandler+0x10>)
 8004c6e:	f003 fcb1 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c72:	bf00      	nop
 8004c74:	bd80      	pop	{r7, pc}
 8004c76:	bf00      	nop
 8004c78:	2000036c 	.word	0x2000036c

08004c7c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004c80:	4802      	ldr	r0, [pc, #8]	; (8004c8c <TIM7_IRQHandler+0x10>)
 8004c82:	f003 fca7 	bl	80085d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004c86:	bf00      	nop
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	200003b8 	.word	0x200003b8

08004c90 <EXTI2_IRQHandler>:

/* USER CODE BEGIN 1 */
void EXTI2_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(USS_Data4_Pin);
 8004c94:	2004      	movs	r0, #4
 8004c96:	f002 f8d3 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	af00      	add	r7, sp, #0
    HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8004ca2:	2001      	movs	r0, #1
 8004ca4:	f002 f8cc 	bl	8006e40 <HAL_GPIO_EXTI_IRQHandler>
}
 8004ca8:	bf00      	nop
 8004caa:	bd80      	pop	{r7, pc}

08004cac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b086      	sub	sp, #24
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cb8:	2300      	movs	r3, #0
 8004cba:	617b      	str	r3, [r7, #20]
 8004cbc:	e00a      	b.n	8004cd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cbe:	f3af 8000 	nop.w
 8004cc2:	4601      	mov	r1, r0
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	1c5a      	adds	r2, r3, #1
 8004cc8:	60ba      	str	r2, [r7, #8]
 8004cca:	b2ca      	uxtb	r2, r1
 8004ccc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	429a      	cmp	r2, r3
 8004cda:	dbf0      	blt.n	8004cbe <_read+0x12>
	}

return len;
 8004cdc:	687b      	ldr	r3, [r7, #4]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004ce6:	b480      	push	{r7}
 8004ce8:	b083      	sub	sp, #12
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
	return -1;
 8004cee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr

08004cfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004cfe:	b480      	push	{r7}
 8004d00:	b083      	sub	sp, #12
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
 8004d06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d0e:	605a      	str	r2, [r3, #4]
	return 0;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	370c      	adds	r7, #12
 8004d16:	46bd      	mov	sp, r7
 8004d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1c:	4770      	bx	lr

08004d1e <_isatty>:

int _isatty(int file)
{
 8004d1e:	b480      	push	{r7}
 8004d20:	b083      	sub	sp, #12
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
	return 1;
 8004d26:	2301      	movs	r3, #1
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
	return 0;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
	...

08004d50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <_sbrk+0x5c>)
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <_sbrk+0x60>)
 8004d5c:	1ad3      	subs	r3, r2, r3
 8004d5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004d64:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <_sbrk+0x64>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d102      	bne.n	8004d72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004d6c:	4b11      	ldr	r3, [pc, #68]	; (8004db4 <_sbrk+0x64>)
 8004d6e:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <_sbrk+0x68>)
 8004d70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004d72:	4b10      	ldr	r3, [pc, #64]	; (8004db4 <_sbrk+0x64>)
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4413      	add	r3, r2
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d207      	bcs.n	8004d90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004d80:	f005 f804 	bl	8009d8c <__errno>
 8004d84:	4603      	mov	r3, r0
 8004d86:	220c      	movs	r2, #12
 8004d88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004d8a:	f04f 33ff 	mov.w	r3, #4294967295
 8004d8e:	e009      	b.n	8004da4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004d90:	4b08      	ldr	r3, [pc, #32]	; (8004db4 <_sbrk+0x64>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004d96:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <_sbrk+0x64>)
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	4a05      	ldr	r2, [pc, #20]	; (8004db4 <_sbrk+0x64>)
 8004da0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004da2:	68fb      	ldr	r3, [r7, #12]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	20050000 	.word	0x20050000
 8004db0:	00000400 	.word	0x00000400
 8004db4:	20000520 	.word	0x20000520
 8004db8:	20000570 	.word	0x20000570

08004dbc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dc0:	4b06      	ldr	r3, [pc, #24]	; (8004ddc <SystemInit+0x20>)
 8004dc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc6:	4a05      	ldr	r2, [pc, #20]	; (8004ddc <SystemInit+0x20>)
 8004dc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004dd0:	bf00      	nop
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	e000ed00 	.word	0xe000ed00

08004de0 <USSn_Trigger>:
extern uint32_t pre_usTick;



void USSn_Trigger(int USSn)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start_IT (&htim5);//uss timer, 200khz
 8004de8:	4848      	ldr	r0, [pc, #288]	; (8004f0c <USSn_Trigger+0x12c>)
 8004dea:	f003 f9a3 	bl	8008134 <HAL_TIM_Base_Start_IT>
	switch(USSn){
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d835      	bhi.n	8004e62 <USSn_Trigger+0x82>
 8004df6:	a201      	add	r2, pc, #4	; (adr r2, 8004dfc <USSn_Trigger+0x1c>)
 8004df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dfc:	08004e15 	.word	0x08004e15
 8004e00:	08004e21 	.word	0x08004e21
 8004e04:	08004e2f 	.word	0x08004e2f
 8004e08:	08004e3d 	.word	0x08004e3d
 8004e0c:	08004e4b 	.word	0x08004e4b
 8004e10:	08004e57 	.word	0x08004e57
		case 1: USS1_Trigger_Set; break;
 8004e14:	2201      	movs	r2, #1
 8004e16:	2120      	movs	r1, #32
 8004e18:	483d      	ldr	r0, [pc, #244]	; (8004f10 <USSn_Trigger+0x130>)
 8004e1a:	f001 ffdd 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e1e:	e020      	b.n	8004e62 <USSn_Trigger+0x82>
		case 2: USS2_Trigger_Set; break;
 8004e20:	2201      	movs	r2, #1
 8004e22:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004e26:	483a      	ldr	r0, [pc, #232]	; (8004f10 <USSn_Trigger+0x130>)
 8004e28:	f001 ffd6 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e2c:	e019      	b.n	8004e62 <USSn_Trigger+0x82>
		case 3: USS3_Trigger_Set; break;
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004e34:	4837      	ldr	r0, [pc, #220]	; (8004f14 <USSn_Trigger+0x134>)
 8004e36:	f001 ffcf 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e3a:	e012      	b.n	8004e62 <USSn_Trigger+0x82>
		case 4: USS4_Trigger_Set; break;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004e42:	4834      	ldr	r0, [pc, #208]	; (8004f14 <USSn_Trigger+0x134>)
 8004e44:	f001 ffc8 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e48:	e00b      	b.n	8004e62 <USSn_Trigger+0x82>
		case 5: USS5_Trigger_Set; break;
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	2140      	movs	r1, #64	; 0x40
 8004e4e:	4831      	ldr	r0, [pc, #196]	; (8004f14 <USSn_Trigger+0x134>)
 8004e50:	f001 ffc2 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e54:	e005      	b.n	8004e62 <USSn_Trigger+0x82>
		case 6: USS6_Trigger_Set; break;
 8004e56:	2201      	movs	r2, #1
 8004e58:	2180      	movs	r1, #128	; 0x80
 8004e5a:	482f      	ldr	r0, [pc, #188]	; (8004f18 <USSn_Trigger+0x138>)
 8004e5c:	f001 ffbc 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004e60:	bf00      	nop
	}
	USS_start[USSn-1] = us_Tick;//start uss trigger
 8004e62:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <USSn_Trigger+0x13c>)
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	4611      	mov	r1, r2
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <USSn_Trigger+0x140>)
 8004e6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	pre_usTick = us_Tick;
 8004e72:	4b2a      	ldr	r3, [pc, #168]	; (8004f1c <USSn_Trigger+0x13c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2b      	ldr	r2, [pc, #172]	; (8004f24 <USSn_Trigger+0x144>)
 8004e78:	6013      	str	r3, [r2, #0]

	for(int i=0;i<1000;i++){;}//wait about 200us
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	e002      	b.n	8004e86 <USSn_Trigger+0xa6>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	3301      	adds	r3, #1
 8004e84:	60fb      	str	r3, [r7, #12]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004e8c:	dbf8      	blt.n	8004e80 <USSn_Trigger+0xa0>

	switch(USSn){
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3b01      	subs	r3, #1
 8004e92:	2b05      	cmp	r3, #5
 8004e94:	d835      	bhi.n	8004f02 <USSn_Trigger+0x122>
 8004e96:	a201      	add	r2, pc, #4	; (adr r2, 8004e9c <USSn_Trigger+0xbc>)
 8004e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e9c:	08004eb5 	.word	0x08004eb5
 8004ea0:	08004ec1 	.word	0x08004ec1
 8004ea4:	08004ecf 	.word	0x08004ecf
 8004ea8:	08004edd 	.word	0x08004edd
 8004eac:	08004eeb 	.word	0x08004eeb
 8004eb0:	08004ef7 	.word	0x08004ef7
		case 1: USS1_Trigger_ReSet; break;
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	2120      	movs	r1, #32
 8004eb8:	4815      	ldr	r0, [pc, #84]	; (8004f10 <USSn_Trigger+0x130>)
 8004eba:	f001 ff8d 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004ebe:	e020      	b.n	8004f02 <USSn_Trigger+0x122>
		case 2: USS2_Trigger_ReSet; break;
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004ec6:	4812      	ldr	r0, [pc, #72]	; (8004f10 <USSn_Trigger+0x130>)
 8004ec8:	f001 ff86 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004ecc:	e019      	b.n	8004f02 <USSn_Trigger+0x122>
		case 3: USS3_Trigger_ReSet; break;
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004ed4:	480f      	ldr	r0, [pc, #60]	; (8004f14 <USSn_Trigger+0x134>)
 8004ed6:	f001 ff7f 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004eda:	e012      	b.n	8004f02 <USSn_Trigger+0x122>
		case 4: USS4_Trigger_ReSet; break;
 8004edc:	2200      	movs	r2, #0
 8004ede:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004ee2:	480c      	ldr	r0, [pc, #48]	; (8004f14 <USSn_Trigger+0x134>)
 8004ee4:	f001 ff78 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004ee8:	e00b      	b.n	8004f02 <USSn_Trigger+0x122>
		case 5: USS5_Trigger_ReSet; break;
 8004eea:	2200      	movs	r2, #0
 8004eec:	2140      	movs	r1, #64	; 0x40
 8004eee:	4809      	ldr	r0, [pc, #36]	; (8004f14 <USSn_Trigger+0x134>)
 8004ef0:	f001 ff72 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004ef4:	e005      	b.n	8004f02 <USSn_Trigger+0x122>
		case 6: USS6_Trigger_ReSet; break;
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	4807      	ldr	r0, [pc, #28]	; (8004f18 <USSn_Trigger+0x138>)
 8004efc:	f001 ff6c 	bl	8006dd8 <HAL_GPIO_WritePin>
 8004f00:	bf00      	nop
	}
}
 8004f02:	bf00      	nop
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20000320 	.word	0x20000320
 8004f10:	40020c00 	.word	0x40020c00
 8004f14:	40020800 	.word	0x40020800
 8004f18:	40021400 	.word	0x40021400
 8004f1c:	20000144 	.word	0x20000144
 8004f20:	20000524 	.word	0x20000524
 8004f24:	2000014c 	.word	0x2000014c

08004f28 <USSn_DataRead>:

uint8_t USSn_DataRead(int USSn)
{
 8004f28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004f2c:	b084      	sub	sp, #16
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
	int32_t USS_tmp = 0;
 8004f32:	2300      	movs	r3, #0
 8004f34:	60fb      	str	r3, [r7, #12]
	int32_t USS_calc = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	60bb      	str	r3, [r7, #8]

	USS_tmp = USS_end[USSn-1]-USS_start[USSn-1];
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	3b01      	subs	r3, #1
 8004f3e:	4a68      	ldr	r2, [pc, #416]	; (80050e0 <USSn_DataRead+0x1b8>)
 8004f40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	3b01      	subs	r3, #1
 8004f48:	4966      	ldr	r1, [pc, #408]	; (80050e4 <USSn_DataRead+0x1bc>)
 8004f4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	60fb      	str	r3, [r7, #12]
	USS_calc = (0.0361*(float)USS_tmp)*(0.001*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^3, (0.0361*10^-6)*x^3
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	ee07 3a90 	vmov	s15, r3
 8004f58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f5c:	ee17 0a90 	vmov	r0, s15
 8004f60:	f7fb fb0a 	bl	8000578 <__aeabi_f2d>
 8004f64:	a356      	add	r3, pc, #344	; (adr r3, 80050c0 <USSn_DataRead+0x198>)
 8004f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f6a:	f7fb fb5d 	bl	8000628 <__aeabi_dmul>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4614      	mov	r4, r2
 8004f74:	461d      	mov	r5, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	ee07 3a90 	vmov	s15, r3
 8004f7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f80:	ee17 0a90 	vmov	r0, s15
 8004f84:	f7fb faf8 	bl	8000578 <__aeabi_f2d>
 8004f88:	a34f      	add	r3, pc, #316	; (adr r3, 80050c8 <USSn_DataRead+0x1a0>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	f7fb fb4b 	bl	8000628 <__aeabi_dmul>
 8004f92:	4602      	mov	r2, r0
 8004f94:	460b      	mov	r3, r1
 8004f96:	4620      	mov	r0, r4
 8004f98:	4629      	mov	r1, r5
 8004f9a:	f7fb fb45 	bl	8000628 <__aeabi_dmul>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	460b      	mov	r3, r1
 8004fa2:	4614      	mov	r4, r2
 8004fa4:	461d      	mov	r5, r3
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	ee07 3a90 	vmov	s15, r3
 8004fac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004fb0:	ee17 0a90 	vmov	r0, s15
 8004fb4:	f7fb fae0 	bl	8000578 <__aeabi_f2d>
 8004fb8:	a343      	add	r3, pc, #268	; (adr r3, 80050c8 <USSn_DataRead+0x1a0>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f7fb fb33 	bl	8000628 <__aeabi_dmul>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	4620      	mov	r0, r4
 8004fc8:	4629      	mov	r1, r5
 8004fca:	f7fb fb2d 	bl	8000628 <__aeabi_dmul>
 8004fce:	4602      	mov	r2, r0
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	4619      	mov	r1, r3
 8004fd6:	f7fb fdc1 	bl	8000b5c <__aeabi_d2iz>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	60bb      	str	r3, [r7, #8]
	//printf("x3[0]: %d \n", USS_calc[0]);
	USS_calc -= (0.108*(float)USS_tmp)*(0.001*(float)USS_tmp);//x^2, (0.108*10^-3)*x^2
 8004fde:	68b8      	ldr	r0, [r7, #8]
 8004fe0:	f7fb fab8 	bl	8000554 <__aeabi_i2d>
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	460d      	mov	r5, r1
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	ee07 3a90 	vmov	s15, r3
 8004fee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ff2:	ee17 0a90 	vmov	r0, s15
 8004ff6:	f7fb fabf 	bl	8000578 <__aeabi_f2d>
 8004ffa:	a335      	add	r3, pc, #212	; (adr r3, 80050d0 <USSn_DataRead+0x1a8>)
 8004ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005000:	f7fb fb12 	bl	8000628 <__aeabi_dmul>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4690      	mov	r8, r2
 800500a:	4699      	mov	r9, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	ee07 3a90 	vmov	s15, r3
 8005012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005016:	ee17 0a90 	vmov	r0, s15
 800501a:	f7fb faad 	bl	8000578 <__aeabi_f2d>
 800501e:	a32a      	add	r3, pc, #168	; (adr r3, 80050c8 <USSn_DataRead+0x1a0>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fb00 	bl	8000628 <__aeabi_dmul>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4640      	mov	r0, r8
 800502e:	4649      	mov	r1, r9
 8005030:	f7fb fafa 	bl	8000628 <__aeabi_dmul>
 8005034:	4602      	mov	r2, r0
 8005036:	460b      	mov	r3, r1
 8005038:	4620      	mov	r0, r4
 800503a:	4629      	mov	r1, r5
 800503c:	f7fb f93c 	bl	80002b8 <__aeabi_dsub>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	f7fb fd88 	bl	8000b5c <__aeabi_d2iz>
 800504c:	4603      	mov	r3, r0
 800504e:	60bb      	str	r3, [r7, #8]
	//printf("x2[0]: %d \n", USS_calc[0]);
	USS_calc += (0.933*(float)USS_tmp);//x^1, (0.933)*x^1
 8005050:	68b8      	ldr	r0, [r7, #8]
 8005052:	f7fb fa7f 	bl	8000554 <__aeabi_i2d>
 8005056:	4604      	mov	r4, r0
 8005058:	460d      	mov	r5, r1
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	ee07 3a90 	vmov	s15, r3
 8005060:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005064:	ee17 0a90 	vmov	r0, s15
 8005068:	f7fb fa86 	bl	8000578 <__aeabi_f2d>
 800506c:	a31a      	add	r3, pc, #104	; (adr r3, 80050d8 <USSn_DataRead+0x1b0>)
 800506e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005072:	f7fb fad9 	bl	8000628 <__aeabi_dmul>
 8005076:	4602      	mov	r2, r0
 8005078:	460b      	mov	r3, r1
 800507a:	4620      	mov	r0, r4
 800507c:	4629      	mov	r1, r5
 800507e:	f7fb f91d 	bl	80002bc <__adddf3>
 8005082:	4602      	mov	r2, r0
 8005084:	460b      	mov	r3, r1
 8005086:	4610      	mov	r0, r2
 8005088:	4619      	mov	r1, r3
 800508a:	f7fb fd67 	bl	8000b5c <__aeabi_d2iz>
 800508e:	4603      	mov	r3, r0
 8005090:	60bb      	str	r3, [r7, #8]
	//printf("x1[0]: %d \n", USS_calc[0]);
	USS_calc -= 41;//x^0, constant
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	3b29      	subs	r3, #41	; 0x29
 8005096:	60bb      	str	r3, [r7, #8]
	//USS_calc[0]=(USS_end[0]-USS_start[0]);
	//printf("USS_calc[0]: %d \n", USS_calc);
	//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start[0], USS_end[0], (USS_end[0]-USS_start[0]));
	USSn_Trigger(USSn);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff fea1 	bl	8004de0 <USSn_Trigger>

	if((USS_calc<=19) || (USS_calc>250)) {return 0;}
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2b13      	cmp	r3, #19
 80050a2:	dd02      	ble.n	80050aa <USSn_DataRead+0x182>
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2bfa      	cmp	r3, #250	; 0xfa
 80050a8:	dd01      	ble.n	80050ae <USSn_DataRead+0x186>
 80050aa:	2300      	movs	r3, #0
 80050ac:	e001      	b.n	80050b2 <USSn_DataRead+0x18a>

	return USS_calc;
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	b2db      	uxtb	r3, r3
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80050bc:	f3af 8000 	nop.w
 80050c0:	fec56d5d 	.word	0xfec56d5d
 80050c4:	3fa27bb2 	.word	0x3fa27bb2
 80050c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80050cc:	3f50624d 	.word	0x3f50624d
 80050d0:	53f7ced9 	.word	0x53f7ced9
 80050d4:	3fbba5e3 	.word	0x3fbba5e3
 80050d8:	d0e56042 	.word	0xd0e56042
 80050dc:	3feddb22 	.word	0x3feddb22
 80050e0:	2000053c 	.word	0x2000053c
 80050e4:	20000524 	.word	0x20000524

080050e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80050e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005120 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050ec:	480d      	ldr	r0, [pc, #52]	; (8005124 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050ee:	490e      	ldr	r1, [pc, #56]	; (8005128 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050f0:	4a0e      	ldr	r2, [pc, #56]	; (800512c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050f4:	e002      	b.n	80050fc <LoopCopyDataInit>

080050f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050fa:	3304      	adds	r3, #4

080050fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005100:	d3f9      	bcc.n	80050f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005102:	4a0b      	ldr	r2, [pc, #44]	; (8005130 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005104:	4c0b      	ldr	r4, [pc, #44]	; (8005134 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005108:	e001      	b.n	800510e <LoopFillZerobss>

0800510a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800510a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800510c:	3204      	adds	r2, #4

0800510e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800510e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005110:	d3fb      	bcc.n	800510a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005112:	f7ff fe53 	bl	8004dbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005116:	f004 fe3f 	bl	8009d98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800511a:	f7fe f85b 	bl	80031d4 <main>
  bx  lr    
 800511e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005120:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005124:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005128:	200000c8 	.word	0x200000c8
  ldr r2, =_sidata
 800512c:	0800afe4 	.word	0x0800afe4
  ldr r2, =_sbss
 8005130:	200000c8 	.word	0x200000c8
  ldr r4, =_ebss
 8005134:	2000056c 	.word	0x2000056c

08005138 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005138:	e7fe      	b.n	8005138 <ADC_IRQHandler>

0800513a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800513a:	b580      	push	{r7, lr}
 800513c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800513e:	2003      	movs	r0, #3
 8005140:	f001 fc36 	bl	80069b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005144:	200f      	movs	r0, #15
 8005146:	f000 f805 	bl	8005154 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800514a:	f7ff fb35 	bl	80047b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	bd80      	pop	{r7, pc}

08005154 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800515c:	4b12      	ldr	r3, [pc, #72]	; (80051a8 <HAL_InitTick+0x54>)
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	4b12      	ldr	r3, [pc, #72]	; (80051ac <HAL_InitTick+0x58>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	4619      	mov	r1, r3
 8005166:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800516a:	fbb3 f3f1 	udiv	r3, r3, r1
 800516e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005172:	4618      	mov	r0, r3
 8005174:	f001 fc5f 	bl	8006a36 <HAL_SYSTICK_Config>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e00e      	b.n	80051a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b0f      	cmp	r3, #15
 8005186:	d80a      	bhi.n	800519e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005188:	2200      	movs	r2, #0
 800518a:	6879      	ldr	r1, [r7, #4]
 800518c:	f04f 30ff 	mov.w	r0, #4294967295
 8005190:	f001 fc19 	bl	80069c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005194:	4a06      	ldr	r2, [pc, #24]	; (80051b0 <HAL_InitTick+0x5c>)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	e000      	b.n	80051a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
}
 80051a0:	4618      	mov	r0, r3
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000058 	.word	0x20000058
 80051ac:	20000060 	.word	0x20000060
 80051b0:	2000005c 	.word	0x2000005c

080051b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80051b4:	b480      	push	{r7}
 80051b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80051b8:	4b06      	ldr	r3, [pc, #24]	; (80051d4 <HAL_IncTick+0x20>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	4b06      	ldr	r3, [pc, #24]	; (80051d8 <HAL_IncTick+0x24>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4413      	add	r3, r2
 80051c4:	4a04      	ldr	r2, [pc, #16]	; (80051d8 <HAL_IncTick+0x24>)
 80051c6:	6013      	str	r3, [r2, #0]
}
 80051c8:	bf00      	nop
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr
 80051d2:	bf00      	nop
 80051d4:	20000060 	.word	0x20000060
 80051d8:	20000558 	.word	0x20000558

080051dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051dc:	b480      	push	{r7}
 80051de:	af00      	add	r7, sp, #0
  return uwTick;
 80051e0:	4b03      	ldr	r3, [pc, #12]	; (80051f0 <HAL_GetTick+0x14>)
 80051e2:	681b      	ldr	r3, [r3, #0]
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	46bd      	mov	sp, r7
 80051e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ec:	4770      	bx	lr
 80051ee:	bf00      	nop
 80051f0:	20000558 	.word	0x20000558

080051f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051fc:	f7ff ffee 	bl	80051dc <HAL_GetTick>
 8005200:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f1b3 3fff 	cmp.w	r3, #4294967295
 800520c:	d005      	beq.n	800521a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800520e:	4b0a      	ldr	r3, [pc, #40]	; (8005238 <HAL_Delay+0x44>)
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800521a:	bf00      	nop
 800521c:	f7ff ffde 	bl	80051dc <HAL_GetTick>
 8005220:	4602      	mov	r2, r0
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	1ad3      	subs	r3, r2, r3
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	429a      	cmp	r2, r3
 800522a:	d8f7      	bhi.n	800521c <HAL_Delay+0x28>
  {
  }
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3710      	adds	r7, #16
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000060 	.word	0x20000060

0800523c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b084      	sub	sp, #16
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e031      	b.n	80052b6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005256:	2b00      	cmp	r3, #0
 8005258:	d109      	bne.n	800526e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff fad0 	bl	8004800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2200      	movs	r2, #0
 8005264:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005272:	f003 0310 	and.w	r3, r3, #16
 8005276:	2b00      	cmp	r3, #0
 8005278:	d116      	bne.n	80052a8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_ADC_Init+0x84>)
 8005280:	4013      	ands	r3, r2
 8005282:	f043 0202 	orr.w	r2, r3, #2
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fb0a 	bl	80058a4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	f043 0201 	orr.w	r2, r3, #1
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	641a      	str	r2, [r3, #64]	; 0x40
 80052a6:	e001      	b.n	80052ac <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80052b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3710      	adds	r7, #16
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	ffffeefd 	.word	0xffffeefd

080052c4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80052cc:	2300      	movs	r3, #0
 80052ce:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d6:	2b01      	cmp	r3, #1
 80052d8:	d101      	bne.n	80052de <HAL_ADC_Start+0x1a>
 80052da:	2302      	movs	r3, #2
 80052dc:	e0ad      	b.n	800543a <HAL_ADC_Start+0x176>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	f003 0301 	and.w	r3, r3, #1
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d018      	beq.n	8005326 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	689a      	ldr	r2, [r3, #8]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f042 0201 	orr.w	r2, r2, #1
 8005302:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005304:	4b50      	ldr	r3, [pc, #320]	; (8005448 <HAL_ADC_Start+0x184>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a50      	ldr	r2, [pc, #320]	; (800544c <HAL_ADC_Start+0x188>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0c9a      	lsrs	r2, r3, #18
 8005310:	4613      	mov	r3, r2
 8005312:	005b      	lsls	r3, r3, #1
 8005314:	4413      	add	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005318:	e002      	b.n	8005320 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	3b01      	subs	r3, #1
 800531e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1f9      	bne.n	800531a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d175      	bne.n	8005420 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005338:	4b45      	ldr	r3, [pc, #276]	; (8005450 <HAL_ADC_Start+0x18c>)
 800533a:	4013      	ands	r3, r2
 800533c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800534e:	2b00      	cmp	r3, #0
 8005350:	d007      	beq.n	8005362 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800535a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005366:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800536a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800536e:	d106      	bne.n	800537e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005374:	f023 0206 	bic.w	r2, r3, #6
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	645a      	str	r2, [r3, #68]	; 0x44
 800537c:	e002      	b.n	8005384 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2200      	movs	r2, #0
 8005388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005394:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005396:	4b2f      	ldr	r3, [pc, #188]	; (8005454 <HAL_ADC_Start+0x190>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d10f      	bne.n	80053c2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d143      	bne.n	8005438 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053be:	609a      	str	r2, [r3, #8]
 80053c0:	e03a      	b.n	8005438 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a24      	ldr	r2, [pc, #144]	; (8005458 <HAL_ADC_Start+0x194>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d10e      	bne.n	80053ea <HAL_ADC_Start+0x126>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053e8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80053ea:	4b1a      	ldr	r3, [pc, #104]	; (8005454 <HAL_ADC_Start+0x190>)
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f003 0310 	and.w	r3, r3, #16
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d120      	bne.n	8005438 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a18      	ldr	r2, [pc, #96]	; (800545c <HAL_ADC_Start+0x198>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d11b      	bne.n	8005438 <HAL_ADC_Start+0x174>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d114      	bne.n	8005438 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	e00b      	b.n	8005438 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	f043 0210 	orr.w	r2, r3, #16
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005430:	f043 0201 	orr.w	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000058 	.word	0x20000058
 800544c:	431bde83 	.word	0x431bde83
 8005450:	fffff8fe 	.word	0xfffff8fe
 8005454:	40012300 	.word	0x40012300
 8005458:	40012000 	.word	0x40012000
 800545c:	40012200 	.word	0x40012200

08005460 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546e:	2b01      	cmp	r3, #1
 8005470:	d101      	bne.n	8005476 <HAL_ADC_Stop+0x16>
 8005472:	2302      	movs	r3, #2
 8005474:	e01f      	b.n	80054b6 <HAL_ADC_Stop+0x56>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0201 	bic.w	r2, r2, #1
 800548c:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f003 0301 	and.w	r3, r3, #1
 8005498:	2b00      	cmp	r3, #0
 800549a:	d107      	bne.n	80054ac <HAL_ADC_Stop+0x4c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80054a0:	4b08      	ldr	r3, [pc, #32]	; (80054c4 <HAL_ADC_Stop+0x64>)
 80054a2:	4013      	ands	r3, r2
 80054a4:	f043 0201 	orr.w	r2, r3, #1
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	4618      	mov	r0, r3
 80054b8:	370c      	adds	r7, #12
 80054ba:	46bd      	mov	sp, r7
 80054bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	ffffeefe 	.word	0xffffeefe

080054c8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80054d2:	2300      	movs	r3, #0
 80054d4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054e4:	d113      	bne.n	800550e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80054f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054f4:	d10b      	bne.n	800550e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fa:	f043 0220 	orr.w	r2, r3, #32
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2200      	movs	r2, #0
 8005506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e063      	b.n	80055d6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 800550e:	f7ff fe65 	bl	80051dc <HAL_GetTick>
 8005512:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005514:	e021      	b.n	800555a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d01d      	beq.n	800555a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d007      	beq.n	8005534 <HAL_ADC_PollForConversion+0x6c>
 8005524:	f7ff fe5a 	bl	80051dc <HAL_GetTick>
 8005528:	4602      	mov	r2, r0
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d212      	bcs.n	800555a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b02      	cmp	r3, #2
 8005540:	d00b      	beq.n	800555a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0204 	orr.w	r2, r3, #4
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e03d      	b.n	80055d6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0302 	and.w	r3, r3, #2
 8005564:	2b02      	cmp	r3, #2
 8005566:	d1d6      	bne.n	8005516 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0212 	mvn.w	r2, #18
 8005570:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005576:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005588:	2b00      	cmp	r3, #0
 800558a:	d123      	bne.n	80055d4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005590:	2b00      	cmp	r3, #0
 8005592:	d11f      	bne.n	80055d4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800559a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d006      	beq.n	80055b0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d111      	bne.n	80055d4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d105      	bne.n	80055d4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055cc:	f043 0201 	orr.w	r2, r3, #1
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3710      	adds	r7, #16
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}

080055de <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80055de:	b480      	push	{r7}
 80055e0:	b083      	sub	sp, #12
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr

080055f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_ADC_ConfigChannel+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e136      	b.n	8005882 <HAL_ADC_ConfigChannel+0x28a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2b09      	cmp	r3, #9
 8005622:	d93a      	bls.n	800569a <HAL_ADC_ConfigChannel+0xa2>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800562c:	d035      	beq.n	800569a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68d9      	ldr	r1, [r3, #12]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	b29b      	uxth	r3, r3
 800563a:	461a      	mov	r2, r3
 800563c:	4613      	mov	r3, r2
 800563e:	005b      	lsls	r3, r3, #1
 8005640:	4413      	add	r3, r2
 8005642:	3b1e      	subs	r3, #30
 8005644:	2207      	movs	r2, #7
 8005646:	fa02 f303 	lsl.w	r3, r2, r3
 800564a:	43da      	mvns	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	400a      	ands	r2, r1
 8005652:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a8d      	ldr	r2, [pc, #564]	; (8005890 <HAL_ADC_ConfigChannel+0x298>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d10a      	bne.n	8005674 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68d9      	ldr	r1, [r3, #12]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	689b      	ldr	r3, [r3, #8]
 8005668:	061a      	lsls	r2, r3, #24
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	430a      	orrs	r2, r1
 8005670:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005672:	e035      	b.n	80056e0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68d9      	ldr	r1, [r3, #12]
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	689a      	ldr	r2, [r3, #8]
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	b29b      	uxth	r3, r3
 8005684:	4618      	mov	r0, r3
 8005686:	4603      	mov	r3, r0
 8005688:	005b      	lsls	r3, r3, #1
 800568a:	4403      	add	r3, r0
 800568c:	3b1e      	subs	r3, #30
 800568e:	409a      	lsls	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	430a      	orrs	r2, r1
 8005696:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005698:	e022      	b.n	80056e0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6919      	ldr	r1, [r3, #16]
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	b29b      	uxth	r3, r3
 80056a6:	461a      	mov	r2, r3
 80056a8:	4613      	mov	r3, r2
 80056aa:	005b      	lsls	r3, r3, #1
 80056ac:	4413      	add	r3, r2
 80056ae:	2207      	movs	r2, #7
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	43da      	mvns	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	400a      	ands	r2, r1
 80056bc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6919      	ldr	r1, [r3, #16]
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	689a      	ldr	r2, [r3, #8]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	4618      	mov	r0, r3
 80056d0:	4603      	mov	r3, r0
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	4403      	add	r3, r0
 80056d6:	409a      	lsls	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	430a      	orrs	r2, r1
 80056de:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b06      	cmp	r3, #6
 80056e6:	d824      	bhi.n	8005732 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	685a      	ldr	r2, [r3, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	009b      	lsls	r3, r3, #2
 80056f6:	4413      	add	r3, r2
 80056f8:	3b05      	subs	r3, #5
 80056fa:	221f      	movs	r2, #31
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	43da      	mvns	r2, r3
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	400a      	ands	r2, r1
 8005708:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	b29b      	uxth	r3, r3
 8005716:	4618      	mov	r0, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	3b05      	subs	r3, #5
 8005724:	fa00 f203 	lsl.w	r2, r0, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	635a      	str	r2, [r3, #52]	; 0x34
 8005730:	e04c      	b.n	80057cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b0c      	cmp	r3, #12
 8005738:	d824      	bhi.n	8005784 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	685a      	ldr	r2, [r3, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	3b23      	subs	r3, #35	; 0x23
 800574c:	221f      	movs	r2, #31
 800574e:	fa02 f303 	lsl.w	r3, r2, r3
 8005752:	43da      	mvns	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	400a      	ands	r2, r1
 800575a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	4618      	mov	r0, r3
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4413      	add	r3, r2
 8005774:	3b23      	subs	r3, #35	; 0x23
 8005776:	fa00 f203 	lsl.w	r2, r0, r3
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	430a      	orrs	r2, r1
 8005780:	631a      	str	r2, [r3, #48]	; 0x30
 8005782:	e023      	b.n	80057cc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	685a      	ldr	r2, [r3, #4]
 800578e:	4613      	mov	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	4413      	add	r3, r2
 8005794:	3b41      	subs	r3, #65	; 0x41
 8005796:	221f      	movs	r2, #31
 8005798:	fa02 f303 	lsl.w	r3, r2, r3
 800579c:	43da      	mvns	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	400a      	ands	r2, r1
 80057a4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	b29b      	uxth	r3, r3
 80057b2:	4618      	mov	r0, r3
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685a      	ldr	r2, [r3, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	3b41      	subs	r3, #65	; 0x41
 80057c0:	fa00 f203 	lsl.w	r2, r0, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a30      	ldr	r2, [pc, #192]	; (8005894 <HAL_ADC_ConfigChannel+0x29c>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d10a      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x1f4>
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057de:	d105      	bne.n	80057ec <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80057e0:	4b2d      	ldr	r3, [pc, #180]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	4a2c      	ldr	r2, [pc, #176]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 80057e6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80057ea:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <HAL_ADC_ConfigChannel+0x29c>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d10f      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x21e>
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b12      	cmp	r3, #18
 80057fc:	d10b      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80057fe:	4b26      	ldr	r3, [pc, #152]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	4a25      	ldr	r2, [pc, #148]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005804:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005808:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800580a:	4b23      	ldr	r3, [pc, #140]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	4a22      	ldr	r2, [pc, #136]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005810:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005814:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1e      	ldr	r2, [pc, #120]	; (8005894 <HAL_ADC_ConfigChannel+0x29c>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d12b      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x280>
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1a      	ldr	r2, [pc, #104]	; (8005890 <HAL_ADC_ConfigChannel+0x298>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d003      	beq.n	8005832 <HAL_ADC_ConfigChannel+0x23a>
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2b11      	cmp	r3, #17
 8005830:	d122      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8005832:	4b19      	ldr	r3, [pc, #100]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	4a18      	ldr	r2, [pc, #96]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005838:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800583c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800583e:	4b16      	ldr	r3, [pc, #88]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	4a15      	ldr	r2, [pc, #84]	; (8005898 <HAL_ADC_ConfigChannel+0x2a0>)
 8005844:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005848:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a10      	ldr	r2, [pc, #64]	; (8005890 <HAL_ADC_ConfigChannel+0x298>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d111      	bne.n	8005878 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <HAL_ADC_ConfigChannel+0x2a4>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a11      	ldr	r2, [pc, #68]	; (80058a0 <HAL_ADC_ConfigChannel+0x2a8>)
 800585a:	fba2 2303 	umull	r2, r3, r2, r3
 800585e:	0c9a      	lsrs	r2, r3, #18
 8005860:	4613      	mov	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4413      	add	r3, r2
 8005866:	005b      	lsls	r3, r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800586a:	e002      	b.n	8005872 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3b01      	subs	r3, #1
 8005870:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f9      	bne.n	800586c <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005880:	2300      	movs	r3, #0
}
 8005882:	4618      	mov	r0, r3
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	10000012 	.word	0x10000012
 8005894:	40012000 	.word	0x40012000
 8005898:	40012300 	.word	0x40012300
 800589c:	20000058 	.word	0x20000058
 80058a0:	431bde83 	.word	0x431bde83

080058a4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80058ac:	4b78      	ldr	r3, [pc, #480]	; (8005a90 <ADC_Init+0x1ec>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	4a77      	ldr	r2, [pc, #476]	; (8005a90 <ADC_Init+0x1ec>)
 80058b2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80058b6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80058b8:	4b75      	ldr	r3, [pc, #468]	; (8005a90 <ADC_Init+0x1ec>)
 80058ba:	685a      	ldr	r2, [r3, #4]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	4973      	ldr	r1, [pc, #460]	; (8005a90 <ADC_Init+0x1ec>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	685a      	ldr	r2, [r3, #4]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80058d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	6859      	ldr	r1, [r3, #4]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	691b      	ldr	r3, [r3, #16]
 80058e0:	021a      	lsls	r2, r3, #8
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	430a      	orrs	r2, r1
 80058e8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80058f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	6859      	ldr	r1, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689a      	ldr	r2, [r3, #8]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	430a      	orrs	r2, r1
 800590a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689a      	ldr	r2, [r3, #8]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800591a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	6899      	ldr	r1, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	430a      	orrs	r2, r1
 800592c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005932:	4a58      	ldr	r2, [pc, #352]	; (8005a94 <ADC_Init+0x1f0>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005946:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	6899      	ldr	r1, [r3, #8]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	430a      	orrs	r2, r1
 8005958:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	689a      	ldr	r2, [r3, #8]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6899      	ldr	r1, [r3, #8]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	430a      	orrs	r2, r1
 800597a:	609a      	str	r2, [r3, #8]
 800597c:	e00f      	b.n	800599e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689a      	ldr	r2, [r3, #8]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800598c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	689a      	ldr	r2, [r3, #8]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800599c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f022 0202 	bic.w	r2, r2, #2
 80059ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6899      	ldr	r1, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	005a      	lsls	r2, r3, #1
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	430a      	orrs	r2, r1
 80059c0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01b      	beq.n	8005a04 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	685a      	ldr	r2, [r3, #4]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059da:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80059ea:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6859      	ldr	r1, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f6:	3b01      	subs	r3, #1
 80059f8:	035a      	lsls	r2, r3, #13
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	e007      	b.n	8005a14 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	685a      	ldr	r2, [r3, #4]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a12:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005a22:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	69db      	ldr	r3, [r3, #28]
 8005a2e:	3b01      	subs	r3, #1
 8005a30:	051a      	lsls	r2, r3, #20
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	689a      	ldr	r2, [r3, #8]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005a48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	6899      	ldr	r1, [r3, #8]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a56:	025a      	lsls	r2, r3, #9
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	689a      	ldr	r2, [r3, #8]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a6e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	6899      	ldr	r1, [r3, #8]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	029a      	lsls	r2, r3, #10
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	609a      	str	r2, [r3, #8]
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr
 8005a90:	40012300 	.word	0x40012300
 8005a94:	0f000001 	.word	0x0f000001

08005a98 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d101      	bne.n	8005aaa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8005aa6:	2301      	movs	r3, #1
 8005aa8:	e0ed      	b.n	8005c86 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d102      	bne.n	8005abc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f7fe fee2 	bl	8004880 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f042 0201 	orr.w	r2, r2, #1
 8005aca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005acc:	f7ff fb86 	bl	80051dc <HAL_GetTick>
 8005ad0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005ad2:	e012      	b.n	8005afa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ad4:	f7ff fb82 	bl	80051dc <HAL_GetTick>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	1ad3      	subs	r3, r2, r3
 8005ade:	2b0a      	cmp	r3, #10
 8005ae0:	d90b      	bls.n	8005afa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2205      	movs	r2, #5
 8005af2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005af6:	2301      	movs	r3, #1
 8005af8:	e0c5      	b.n	8005c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	f003 0301 	and.w	r3, r3, #1
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d0e5      	beq.n	8005ad4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f022 0202 	bic.w	r2, r2, #2
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005b18:	f7ff fb60 	bl	80051dc <HAL_GetTick>
 8005b1c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005b1e:	e012      	b.n	8005b46 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005b20:	f7ff fb5c 	bl	80051dc <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b0a      	cmp	r3, #10
 8005b2c:	d90b      	bls.n	8005b46 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b32:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2205      	movs	r2, #5
 8005b3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e09f      	b.n	8005c86 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	f003 0302 	and.w	r3, r3, #2
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1e5      	bne.n	8005b20 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	7e1b      	ldrb	r3, [r3, #24]
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d108      	bne.n	8005b6e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005b6a:	601a      	str	r2, [r3, #0]
 8005b6c:	e007      	b.n	8005b7e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b7c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	7e5b      	ldrb	r3, [r3, #25]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d108      	bne.n	8005b98 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e007      	b.n	8005ba8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ba6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	7e9b      	ldrb	r3, [r3, #26]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d108      	bne.n	8005bc2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f042 0220 	orr.w	r2, r2, #32
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	e007      	b.n	8005bd2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f022 0220 	bic.w	r2, r2, #32
 8005bd0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	7edb      	ldrb	r3, [r3, #27]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d108      	bne.n	8005bec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f022 0210 	bic.w	r2, r2, #16
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e007      	b.n	8005bfc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0210 	orr.w	r2, r2, #16
 8005bfa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	7f1b      	ldrb	r3, [r3, #28]
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d108      	bne.n	8005c16 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f042 0208 	orr.w	r2, r2, #8
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	e007      	b.n	8005c26 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	681a      	ldr	r2, [r3, #0]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0208 	bic.w	r2, r2, #8
 8005c24:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	7f5b      	ldrb	r3, [r3, #29]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d108      	bne.n	8005c40 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f042 0204 	orr.w	r2, r2, #4
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	e007      	b.n	8005c50 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f022 0204 	bic.w	r2, r2, #4
 8005c4e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	689a      	ldr	r2, [r3, #8]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	68db      	ldr	r3, [r3, #12]
 8005c58:	431a      	orrs	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	695b      	ldr	r3, [r3, #20]
 8005c64:	ea42 0103 	orr.w	r1, r2, r3
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	1e5a      	subs	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	430a      	orrs	r2, r1
 8005c74:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005c84:	2300      	movs	r3, #0
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	3710      	adds	r7, #16
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	bd80      	pop	{r7, pc}
	...

08005c90 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ca6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d003      	beq.n	8005cb6 <HAL_CAN_ConfigFilter+0x26>
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	2b02      	cmp	r3, #2
 8005cb2:	f040 80be 	bne.w	8005e32 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005cb6:	4b65      	ldr	r3, [pc, #404]	; (8005e4c <HAL_CAN_ConfigFilter+0x1bc>)
 8005cb8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cc0:	f043 0201 	orr.w	r2, r3, #1
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005cd0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce4:	021b      	lsls	r3, r3, #8
 8005ce6:	431a      	orrs	r2, r3
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	695b      	ldr	r3, [r3, #20]
 8005cf2:	f003 031f 	and.w	r3, r3, #31
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8005cfc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	43db      	mvns	r3, r3
 8005d08:	401a      	ands	r2, r3
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d123      	bne.n	8005d60 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	43db      	mvns	r3, r3
 8005d22:	401a      	ands	r2, r3
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d36:	683a      	ldr	r2, [r7, #0]
 8005d38:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005d3a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	3248      	adds	r2, #72	; 0x48
 8005d40:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d54:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d56:	6979      	ldr	r1, [r7, #20]
 8005d58:	3348      	adds	r3, #72	; 0x48
 8005d5a:	00db      	lsls	r3, r3, #3
 8005d5c:	440b      	add	r3, r1
 8005d5e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	69db      	ldr	r3, [r3, #28]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d122      	bne.n	8005dae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	697b      	ldr	r3, [r7, #20]
 8005d74:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d84:	683a      	ldr	r2, [r7, #0]
 8005d86:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005d88:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	3248      	adds	r2, #72	; 0x48
 8005d8e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	68db      	ldr	r3, [r3, #12]
 8005d9c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005da2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005da4:	6979      	ldr	r1, [r7, #20]
 8005da6:	3348      	adds	r3, #72	; 0x48
 8005da8:	00db      	lsls	r3, r3, #3
 8005daa:	440b      	add	r3, r1
 8005dac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d109      	bne.n	8005dca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	43db      	mvns	r3, r3
 8005dc0:	401a      	ands	r2, r3
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005dc8:	e007      	b.n	8005dda <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d109      	bne.n	8005df6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	43db      	mvns	r3, r3
 8005dec:	401a      	ands	r2, r3
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005df4:	e007      	b.n	8005e06 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	6a1b      	ldr	r3, [r3, #32]
 8005e0a:	2b01      	cmp	r3, #1
 8005e0c:	d107      	bne.n	8005e1e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	431a      	orrs	r2, r3
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005e1e:	697b      	ldr	r3, [r7, #20]
 8005e20:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005e24:	f023 0201 	bic.w	r2, r3, #1
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	e006      	b.n	8005e40 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e36:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
  }
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	40006400 	.word	0x40006400

08005e50 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e5e:	b2db      	uxtb	r3, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d12e      	bne.n	8005ec2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2202      	movs	r2, #2
 8005e68:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681a      	ldr	r2, [r3, #0]
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f022 0201 	bic.w	r2, r2, #1
 8005e7a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e7c:	f7ff f9ae 	bl	80051dc <HAL_GetTick>
 8005e80:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005e82:	e012      	b.n	8005eaa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005e84:	f7ff f9aa 	bl	80051dc <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	2b0a      	cmp	r3, #10
 8005e90:	d90b      	bls.n	8005eaa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e96:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2205      	movs	r2, #5
 8005ea2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e012      	b.n	8005ed0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685b      	ldr	r3, [r3, #4]
 8005eb0:	f003 0301 	and.w	r3, r3, #1
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d1e5      	bne.n	8005e84 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	e006      	b.n	8005ed0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
  }
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b089      	sub	sp, #36	; 0x24
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	60f8      	str	r0, [r7, #12]
 8005ee0:	60b9      	str	r1, [r7, #8]
 8005ee2:	607a      	str	r2, [r7, #4]
 8005ee4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005eec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005ef6:	7ffb      	ldrb	r3, [r7, #31]
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d003      	beq.n	8005f04 <HAL_CAN_AddTxMessage+0x2c>
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	f040 80b8 	bne.w	8006074 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f04:	69bb      	ldr	r3, [r7, #24]
 8005f06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10a      	bne.n	8005f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f0e:	69bb      	ldr	r3, [r7, #24]
 8005f10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d105      	bne.n	8005f24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 80a0 	beq.w	8006064 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	0e1b      	lsrs	r3, r3, #24
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005f2e:	697b      	ldr	r3, [r7, #20]
 8005f30:	2b02      	cmp	r3, #2
 8005f32:	d907      	bls.n	8005f44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005f40:	2301      	movs	r3, #1
 8005f42:	e09e      	b.n	8006082 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005f44:	2201      	movs	r2, #1
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10d      	bne.n	8005f72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005f60:	68f9      	ldr	r1, [r7, #12]
 8005f62:	6809      	ldr	r1, [r1, #0]
 8005f64:	431a      	orrs	r2, r3
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	3318      	adds	r3, #24
 8005f6a:	011b      	lsls	r3, r3, #4
 8005f6c:	440b      	add	r3, r1
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	e00f      	b.n	8005f92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	685b      	ldr	r3, [r3, #4]
 8005f76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f82:	68f9      	ldr	r1, [r7, #12]
 8005f84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005f86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	440b      	add	r3, r1
 8005f90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6819      	ldr	r1, [r3, #0]
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	691a      	ldr	r2, [r3, #16]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	3318      	adds	r3, #24
 8005f9e:	011b      	lsls	r3, r3, #4
 8005fa0:	440b      	add	r3, r1
 8005fa2:	3304      	adds	r3, #4
 8005fa4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	7d1b      	ldrb	r3, [r3, #20]
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d111      	bne.n	8005fd2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	3318      	adds	r3, #24
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	6811      	ldr	r1, [r2, #0]
 8005fc2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	3318      	adds	r3, #24
 8005fca:	011b      	lsls	r3, r3, #4
 8005fcc:	440b      	add	r3, r1
 8005fce:	3304      	adds	r3, #4
 8005fd0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3307      	adds	r3, #7
 8005fd6:	781b      	ldrb	r3, [r3, #0]
 8005fd8:	061a      	lsls	r2, r3, #24
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	3306      	adds	r3, #6
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	041b      	lsls	r3, r3, #16
 8005fe2:	431a      	orrs	r2, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3305      	adds	r3, #5
 8005fe8:	781b      	ldrb	r3, [r3, #0]
 8005fea:	021b      	lsls	r3, r3, #8
 8005fec:	4313      	orrs	r3, r2
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	3204      	adds	r2, #4
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	4610      	mov	r0, r2
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	6811      	ldr	r1, [r2, #0]
 8005ffa:	ea43 0200 	orr.w	r2, r3, r0
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	011b      	lsls	r3, r3, #4
 8006002:	440b      	add	r3, r1
 8006004:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8006008:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	3303      	adds	r3, #3
 800600e:	781b      	ldrb	r3, [r3, #0]
 8006010:	061a      	lsls	r2, r3, #24
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3302      	adds	r3, #2
 8006016:	781b      	ldrb	r3, [r3, #0]
 8006018:	041b      	lsls	r3, r3, #16
 800601a:	431a      	orrs	r2, r3
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	3301      	adds	r3, #1
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	021b      	lsls	r3, r3, #8
 8006024:	4313      	orrs	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	7812      	ldrb	r2, [r2, #0]
 800602a:	4610      	mov	r0, r2
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	6811      	ldr	r1, [r2, #0]
 8006030:	ea43 0200 	orr.w	r2, r3, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	011b      	lsls	r3, r3, #4
 8006038:	440b      	add	r3, r1
 800603a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800603e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	3318      	adds	r3, #24
 8006048:	011b      	lsls	r3, r3, #4
 800604a:	4413      	add	r3, r2
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68fa      	ldr	r2, [r7, #12]
 8006050:	6811      	ldr	r1, [r2, #0]
 8006052:	f043 0201 	orr.w	r2, r3, #1
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	3318      	adds	r3, #24
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	440b      	add	r3, r1
 800605e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e00e      	b.n	8006082 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006068:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	e006      	b.n	8006082 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006078:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
  }
}
 8006082:	4618      	mov	r0, r3
 8006084:	3724      	adds	r7, #36	; 0x24
 8006086:	46bd      	mov	sp, r7
 8006088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608c:	4770      	bx	lr

0800608e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80060a0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	d002      	beq.n	80060ae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80060a8:	7afb      	ldrb	r3, [r7, #11]
 80060aa:	2b02      	cmp	r3, #2
 80060ac:	d11d      	bne.n	80060ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	3301      	adds	r3, #1
 80060c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	3301      	adds	r3, #1
 80060d4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	689b      	ldr	r3, [r3, #8]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d002      	beq.n	80060ea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	3301      	adds	r3, #1
 80060e8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80060ea:	68fb      	ldr	r3, [r7, #12]
}
 80060ec:	4618      	mov	r0, r3
 80060ee:	3714      	adds	r7, #20
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60f8      	str	r0, [r7, #12]
 8006100:	60b9      	str	r1, [r7, #8]
 8006102:	607a      	str	r2, [r7, #4]
 8006104:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800610c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800610e:	7dfb      	ldrb	r3, [r7, #23]
 8006110:	2b01      	cmp	r3, #1
 8006112:	d003      	beq.n	800611c <HAL_CAN_GetRxMessage+0x24>
 8006114:	7dfb      	ldrb	r3, [r7, #23]
 8006116:	2b02      	cmp	r3, #2
 8006118:	f040 80f3 	bne.w	8006302 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10e      	bne.n	8006140 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68db      	ldr	r3, [r3, #12]
 8006128:	f003 0303 	and.w	r3, r3, #3
 800612c:	2b00      	cmp	r3, #0
 800612e:	d116      	bne.n	800615e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006134:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e0e7      	b.n	8006310 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	691b      	ldr	r3, [r3, #16]
 8006146:	f003 0303 	and.w	r3, r3, #3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d107      	bne.n	800615e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006152:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e0d8      	b.n	8006310 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	331b      	adds	r3, #27
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	4413      	add	r3, r2
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 0204 	and.w	r2, r3, #4
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10c      	bne.n	8006196 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681a      	ldr	r2, [r3, #0]
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	331b      	adds	r3, #27
 8006184:	011b      	lsls	r3, r3, #4
 8006186:	4413      	add	r3, r2
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	0d5b      	lsrs	r3, r3, #21
 800618c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
 8006194:	e00b      	b.n	80061ae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	331b      	adds	r3, #27
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	4413      	add	r3, r2
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	08db      	lsrs	r3, r3, #3
 80061a6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	331b      	adds	r3, #27
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f003 0202 	and.w	r2, r3, #2
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68bb      	ldr	r3, [r7, #8]
 80061ca:	331b      	adds	r3, #27
 80061cc:	011b      	lsls	r3, r3, #4
 80061ce:	4413      	add	r3, r2
 80061d0:	3304      	adds	r3, #4
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 020f 	and.w	r2, r3, #15
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	331b      	adds	r3, #27
 80061e4:	011b      	lsls	r3, r3, #4
 80061e6:	4413      	add	r3, r2
 80061e8:	3304      	adds	r3, #4
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0a1b      	lsrs	r3, r3, #8
 80061ee:	b2da      	uxtb	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	331b      	adds	r3, #27
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	4413      	add	r3, r2
 8006200:	3304      	adds	r3, #4
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	b29a      	uxth	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	68bb      	ldr	r3, [r7, #8]
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	4413      	add	r3, r2
 8006216:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	4413      	add	r3, r2
 800622c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	0a1a      	lsrs	r2, r3, #8
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	3301      	adds	r3, #1
 8006238:	b2d2      	uxtb	r2, r2
 800623a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	011b      	lsls	r3, r3, #4
 8006244:	4413      	add	r3, r2
 8006246:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	0c1a      	lsrs	r2, r3, #16
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	3302      	adds	r3, #2
 8006252:	b2d2      	uxtb	r2, r2
 8006254:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	011b      	lsls	r3, r3, #4
 800625e:	4413      	add	r3, r2
 8006260:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	0e1a      	lsrs	r2, r3, #24
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3303      	adds	r3, #3
 800626c:	b2d2      	uxtb	r2, r2
 800626e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	011b      	lsls	r3, r3, #4
 8006278:	4413      	add	r3, r2
 800627a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	3304      	adds	r3, #4
 8006284:	b2d2      	uxtb	r2, r2
 8006286:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	011b      	lsls	r3, r3, #4
 8006290:	4413      	add	r3, r2
 8006292:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	0a1a      	lsrs	r2, r3, #8
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	3305      	adds	r3, #5
 800629e:	b2d2      	uxtb	r2, r2
 80062a0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681a      	ldr	r2, [r3, #0]
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	011b      	lsls	r3, r3, #4
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	0c1a      	lsrs	r2, r3, #16
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	3306      	adds	r3, #6
 80062b8:	b2d2      	uxtb	r2, r2
 80062ba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	0e1a      	lsrs	r2, r3, #24
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	3307      	adds	r3, #7
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	68da      	ldr	r2, [r3, #12]
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f042 0220 	orr.w	r2, r2, #32
 80062ea:	60da      	str	r2, [r3, #12]
 80062ec:	e007      	b.n	80062fe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	691a      	ldr	r2, [r3, #16]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0220 	orr.w	r2, r2, #32
 80062fc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80062fe:	2300      	movs	r3, #0
 8006300:	e006      	b.n	8006310 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006306:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800630e:	2301      	movs	r3, #1
  }
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800631c:	b480      	push	{r7}
 800631e:	b085      	sub	sp, #20
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 3020 	ldrb.w	r3, [r3, #32]
 800632c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800632e:	7bfb      	ldrb	r3, [r7, #15]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d002      	beq.n	800633a <HAL_CAN_ActivateNotification+0x1e>
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b02      	cmp	r3, #2
 8006338:	d109      	bne.n	800634e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	6959      	ldr	r1, [r3, #20]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e006      	b.n	800635c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006352:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
  }
}
 800635c:	4618      	mov	r0, r3
 800635e:	3714      	adds	r7, #20
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b08a      	sub	sp, #40	; 0x28
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006370:	2300      	movs	r3, #0
 8006372:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	685b      	ldr	r3, [r3, #4]
 8006382:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80063a4:	6a3b      	ldr	r3, [r7, #32]
 80063a6:	f003 0301 	and.w	r3, r3, #1
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d07c      	beq.n	80064a8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d023      	beq.n	8006400 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2201      	movs	r2, #1
 80063be:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80063c0:	69bb      	ldr	r3, [r7, #24]
 80063c2:	f003 0302 	and.w	r3, r3, #2
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f000 f983 	bl	80066d6 <HAL_CAN_TxMailbox0CompleteCallback>
 80063d0:	e016      	b.n	8006400 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d004      	beq.n	80063e6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80063e2:	627b      	str	r3, [r7, #36]	; 0x24
 80063e4:	e00c      	b.n	8006400 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80063e6:	69bb      	ldr	r3, [r7, #24]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d004      	beq.n	80063fa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80063f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80063f6:	627b      	str	r3, [r7, #36]	; 0x24
 80063f8:	e002      	b.n	8006400 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 f989 	bl	8006712 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	2b00      	cmp	r3, #0
 8006408:	d024      	beq.n	8006454 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006412:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006414:	69bb      	ldr	r3, [r7, #24]
 8006416:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800641a:	2b00      	cmp	r3, #0
 800641c:	d003      	beq.n	8006426 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f963 	bl	80066ea <HAL_CAN_TxMailbox1CompleteCallback>
 8006424:	e016      	b.n	8006454 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800642c:	2b00      	cmp	r3, #0
 800642e:	d004      	beq.n	800643a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006432:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006436:	627b      	str	r3, [r7, #36]	; 0x24
 8006438:	e00c      	b.n	8006454 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800643a:	69bb      	ldr	r3, [r7, #24]
 800643c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006440:	2b00      	cmp	r3, #0
 8006442:	d004      	beq.n	800644e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800644a:	627b      	str	r3, [r7, #36]	; 0x24
 800644c:	e002      	b.n	8006454 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 f969 	bl	8006726 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d024      	beq.n	80064a8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006466:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f943 	bl	80066fe <HAL_CAN_TxMailbox2CompleteCallback>
 8006478:	e016      	b.n	80064a8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d004      	beq.n	800648e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648a:	627b      	str	r3, [r7, #36]	; 0x24
 800648c:	e00c      	b.n	80064a8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800648e:	69bb      	ldr	r3, [r7, #24]
 8006490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006494:	2b00      	cmp	r3, #0
 8006496:	d004      	beq.n	80064a2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800649e:	627b      	str	r3, [r7, #36]	; 0x24
 80064a0:	e002      	b.n	80064a8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f949 	bl	800673a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00c      	beq.n	80064cc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f003 0310 	and.w	r3, r3, #16
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d007      	beq.n	80064cc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80064c2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2210      	movs	r2, #16
 80064ca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f003 0304 	and.w	r3, r3, #4
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d00b      	beq.n	80064ee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80064d6:	697b      	ldr	r3, [r7, #20]
 80064d8:	f003 0308 	and.w	r3, r3, #8
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d006      	beq.n	80064ee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2208      	movs	r2, #8
 80064e6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	f000 f930 	bl	800674e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80064ee:	6a3b      	ldr	r3, [r7, #32]
 80064f0:	f003 0302 	and.w	r3, r3, #2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d009      	beq.n	800650c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f003 0303 	and.w	r3, r3, #3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fc fdac 	bl	8003064 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00c      	beq.n	8006530 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f003 0310 	and.w	r3, r3, #16
 800651c:	2b00      	cmp	r3, #0
 800651e:	d007      	beq.n	8006530 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006526:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2210      	movs	r2, #16
 800652e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006530:	6a3b      	ldr	r3, [r7, #32]
 8006532:	f003 0320 	and.w	r3, r3, #32
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f003 0308 	and.w	r3, r3, #8
 8006540:	2b00      	cmp	r3, #0
 8006542:	d006      	beq.n	8006552 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2208      	movs	r2, #8
 800654a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800654c:	6878      	ldr	r0, [r7, #4]
 800654e:	f000 f912 	bl	8006776 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006552:	6a3b      	ldr	r3, [r7, #32]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d009      	beq.n	8006570 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	f003 0303 	and.w	r3, r3, #3
 8006566:	2b00      	cmp	r3, #0
 8006568:	d002      	beq.n	8006570 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f8f9 	bl	8006762 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006570:	6a3b      	ldr	r3, [r7, #32]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d00b      	beq.n	8006592 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	d006      	beq.n	8006592 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2210      	movs	r2, #16
 800658a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800658c:	6878      	ldr	r0, [r7, #4]
 800658e:	f000 f8fc 	bl	800678a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006592:	6a3b      	ldr	r3, [r7, #32]
 8006594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006598:	2b00      	cmp	r3, #0
 800659a:	d00b      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800659c:	69fb      	ldr	r3, [r7, #28]
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d006      	beq.n	80065b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2208      	movs	r2, #8
 80065ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f8f5 	bl	800679e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d07b      	beq.n	80066b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80065be:	69fb      	ldr	r3, [r7, #28]
 80065c0:	f003 0304 	and.w	r3, r3, #4
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d072      	beq.n	80066ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d008      	beq.n	80065e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d003      	beq.n	80065e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	f043 0301 	orr.w	r3, r3, #1
 80065e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065e4:	6a3b      	ldr	r3, [r7, #32]
 80065e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d008      	beq.n	8006600 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d003      	beq.n	8006600 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	f043 0302 	orr.w	r3, r3, #2
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006606:	2b00      	cmp	r3, #0
 8006608:	d008      	beq.n	800661c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006616:	f043 0304 	orr.w	r3, r3, #4
 800661a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800661c:	6a3b      	ldr	r3, [r7, #32]
 800661e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006622:	2b00      	cmp	r3, #0
 8006624:	d043      	beq.n	80066ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800662c:	2b00      	cmp	r3, #0
 800662e:	d03e      	beq.n	80066ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006636:	2b60      	cmp	r3, #96	; 0x60
 8006638:	d02b      	beq.n	8006692 <HAL_CAN_IRQHandler+0x32a>
 800663a:	2b60      	cmp	r3, #96	; 0x60
 800663c:	d82e      	bhi.n	800669c <HAL_CAN_IRQHandler+0x334>
 800663e:	2b50      	cmp	r3, #80	; 0x50
 8006640:	d022      	beq.n	8006688 <HAL_CAN_IRQHandler+0x320>
 8006642:	2b50      	cmp	r3, #80	; 0x50
 8006644:	d82a      	bhi.n	800669c <HAL_CAN_IRQHandler+0x334>
 8006646:	2b40      	cmp	r3, #64	; 0x40
 8006648:	d019      	beq.n	800667e <HAL_CAN_IRQHandler+0x316>
 800664a:	2b40      	cmp	r3, #64	; 0x40
 800664c:	d826      	bhi.n	800669c <HAL_CAN_IRQHandler+0x334>
 800664e:	2b30      	cmp	r3, #48	; 0x30
 8006650:	d010      	beq.n	8006674 <HAL_CAN_IRQHandler+0x30c>
 8006652:	2b30      	cmp	r3, #48	; 0x30
 8006654:	d822      	bhi.n	800669c <HAL_CAN_IRQHandler+0x334>
 8006656:	2b10      	cmp	r3, #16
 8006658:	d002      	beq.n	8006660 <HAL_CAN_IRQHandler+0x2f8>
 800665a:	2b20      	cmp	r3, #32
 800665c:	d005      	beq.n	800666a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800665e:	e01d      	b.n	800669c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006662:	f043 0308 	orr.w	r3, r3, #8
 8006666:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006668:	e019      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800666c:	f043 0310 	orr.w	r3, r3, #16
 8006670:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006672:	e014      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006676:	f043 0320 	orr.w	r3, r3, #32
 800667a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800667c:	e00f      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800667e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006680:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006686:	e00a      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006690:	e005      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006698:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800669a:	e000      	b.n	800669e <HAL_CAN_IRQHandler+0x336>
            break;
 800669c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	699a      	ldr	r2, [r3, #24]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80066ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c2:	431a      	orrs	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f872 	bl	80067b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80066ce:	bf00      	nop
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80066de:	bf00      	nop
 80066e0:	370c      	adds	r7, #12
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b083      	sub	sp, #12
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80066f2:	bf00      	nop
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr

080066fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80066fe:	b480      	push	{r7}
 8006700:	b083      	sub	sp, #12
 8006702:	af00      	add	r7, sp, #0
 8006704:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8006706:	bf00      	nop
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800671a:	bf00      	nop
 800671c:	370c      	adds	r7, #12
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr

08006726 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006726:	b480      	push	{r7}
 8006728:	b083      	sub	sp, #12
 800672a:	af00      	add	r7, sp, #0
 800672c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800673a:	b480      	push	{r7}
 800673c:	b083      	sub	sp, #12
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006742:	bf00      	nop
 8006744:	370c      	adds	r7, #12
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr

0800674e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800674e:	b480      	push	{r7}
 8006750:	b083      	sub	sp, #12
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006756:	bf00      	nop
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800676a:	bf00      	nop
 800676c:	370c      	adds	r7, #12
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr

08006776 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006776:	b480      	push	{r7}
 8006778:	b083      	sub	sp, #12
 800677a:	af00      	add	r7, sp, #0
 800677c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr

0800678a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr

0800679e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800679e:	b480      	push	{r7}
 80067a0:	b083      	sub	sp, #12
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80067ba:	bf00      	nop
 80067bc:	370c      	adds	r7, #12
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
	...

080067c8 <__NVIC_SetPriorityGrouping>:
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f003 0307 	and.w	r3, r3, #7
 80067d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80067d8:	4b0b      	ldr	r3, [pc, #44]	; (8006808 <__NVIC_SetPriorityGrouping+0x40>)
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80067e4:	4013      	ands	r3, r2
 80067e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <__NVIC_SetPriorityGrouping+0x44>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80067f6:	4a04      	ldr	r2, [pc, #16]	; (8006808 <__NVIC_SetPriorityGrouping+0x40>)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	60d3      	str	r3, [r2, #12]
}
 80067fc:	bf00      	nop
 80067fe:	3714      	adds	r7, #20
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr
 8006808:	e000ed00 	.word	0xe000ed00
 800680c:	05fa0000 	.word	0x05fa0000

08006810 <__NVIC_GetPriorityGrouping>:
{
 8006810:	b480      	push	{r7}
 8006812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006814:	4b04      	ldr	r3, [pc, #16]	; (8006828 <__NVIC_GetPriorityGrouping+0x18>)
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	0a1b      	lsrs	r3, r3, #8
 800681a:	f003 0307 	and.w	r3, r3, #7
}
 800681e:	4618      	mov	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr
 8006828:	e000ed00 	.word	0xe000ed00

0800682c <__NVIC_EnableIRQ>:
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	4603      	mov	r3, r0
 8006834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800683a:	2b00      	cmp	r3, #0
 800683c:	db0b      	blt.n	8006856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800683e:	79fb      	ldrb	r3, [r7, #7]
 8006840:	f003 021f 	and.w	r2, r3, #31
 8006844:	4907      	ldr	r1, [pc, #28]	; (8006864 <__NVIC_EnableIRQ+0x38>)
 8006846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800684a:	095b      	lsrs	r3, r3, #5
 800684c:	2001      	movs	r0, #1
 800684e:	fa00 f202 	lsl.w	r2, r0, r2
 8006852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	e000e100 	.word	0xe000e100

08006868 <__NVIC_DisableIRQ>:
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
 800686e:	4603      	mov	r3, r0
 8006870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006876:	2b00      	cmp	r3, #0
 8006878:	db12      	blt.n	80068a0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800687a:	79fb      	ldrb	r3, [r7, #7]
 800687c:	f003 021f 	and.w	r2, r3, #31
 8006880:	490a      	ldr	r1, [pc, #40]	; (80068ac <__NVIC_DisableIRQ+0x44>)
 8006882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006886:	095b      	lsrs	r3, r3, #5
 8006888:	2001      	movs	r0, #1
 800688a:	fa00 f202 	lsl.w	r2, r0, r2
 800688e:	3320      	adds	r3, #32
 8006890:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006894:	f3bf 8f4f 	dsb	sy
}
 8006898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800689a:	f3bf 8f6f 	isb	sy
}
 800689e:	bf00      	nop
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	e000e100 	.word	0xe000e100

080068b0 <__NVIC_SetPriority>:
{
 80068b0:	b480      	push	{r7}
 80068b2:	b083      	sub	sp, #12
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	4603      	mov	r3, r0
 80068b8:	6039      	str	r1, [r7, #0]
 80068ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80068bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	db0a      	blt.n	80068da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	b2da      	uxtb	r2, r3
 80068c8:	490c      	ldr	r1, [pc, #48]	; (80068fc <__NVIC_SetPriority+0x4c>)
 80068ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ce:	0112      	lsls	r2, r2, #4
 80068d0:	b2d2      	uxtb	r2, r2
 80068d2:	440b      	add	r3, r1
 80068d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80068d8:	e00a      	b.n	80068f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	b2da      	uxtb	r2, r3
 80068de:	4908      	ldr	r1, [pc, #32]	; (8006900 <__NVIC_SetPriority+0x50>)
 80068e0:	79fb      	ldrb	r3, [r7, #7]
 80068e2:	f003 030f 	and.w	r3, r3, #15
 80068e6:	3b04      	subs	r3, #4
 80068e8:	0112      	lsls	r2, r2, #4
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	440b      	add	r3, r1
 80068ee:	761a      	strb	r2, [r3, #24]
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	e000e100 	.word	0xe000e100
 8006900:	e000ed00 	.word	0xe000ed00

08006904 <NVIC_EncodePriority>:
{
 8006904:	b480      	push	{r7}
 8006906:	b089      	sub	sp, #36	; 0x24
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	f1c3 0307 	rsb	r3, r3, #7
 800691e:	2b04      	cmp	r3, #4
 8006920:	bf28      	it	cs
 8006922:	2304      	movcs	r3, #4
 8006924:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	3304      	adds	r3, #4
 800692a:	2b06      	cmp	r3, #6
 800692c:	d902      	bls.n	8006934 <NVIC_EncodePriority+0x30>
 800692e:	69fb      	ldr	r3, [r7, #28]
 8006930:	3b03      	subs	r3, #3
 8006932:	e000      	b.n	8006936 <NVIC_EncodePriority+0x32>
 8006934:	2300      	movs	r3, #0
 8006936:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006938:	f04f 32ff 	mov.w	r2, #4294967295
 800693c:	69bb      	ldr	r3, [r7, #24]
 800693e:	fa02 f303 	lsl.w	r3, r2, r3
 8006942:	43da      	mvns	r2, r3
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	401a      	ands	r2, r3
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800694c:	f04f 31ff 	mov.w	r1, #4294967295
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	fa01 f303 	lsl.w	r3, r1, r3
 8006956:	43d9      	mvns	r1, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800695c:	4313      	orrs	r3, r2
}
 800695e:	4618      	mov	r0, r3
 8006960:	3724      	adds	r7, #36	; 0x24
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <SysTick_Config>:
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b082      	sub	sp, #8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3b01      	subs	r3, #1
 8006978:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800697c:	d301      	bcc.n	8006982 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800697e:	2301      	movs	r3, #1
 8006980:	e00f      	b.n	80069a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <SysTick_Config+0x40>)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3b01      	subs	r3, #1
 8006988:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800698a:	210f      	movs	r1, #15
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	f7ff ff8e 	bl	80068b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006994:	4b05      	ldr	r3, [pc, #20]	; (80069ac <SysTick_Config+0x40>)
 8006996:	2200      	movs	r2, #0
 8006998:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800699a:	4b04      	ldr	r3, [pc, #16]	; (80069ac <SysTick_Config+0x40>)
 800699c:	2207      	movs	r2, #7
 800699e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	3708      	adds	r7, #8
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bd80      	pop	{r7, pc}
 80069aa:	bf00      	nop
 80069ac:	e000e010 	.word	0xe000e010

080069b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f7ff ff05 	bl	80067c8 <__NVIC_SetPriorityGrouping>
}
 80069be:	bf00      	nop
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b086      	sub	sp, #24
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	4603      	mov	r3, r0
 80069ce:	60b9      	str	r1, [r7, #8]
 80069d0:	607a      	str	r2, [r7, #4]
 80069d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80069d4:	2300      	movs	r3, #0
 80069d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80069d8:	f7ff ff1a 	bl	8006810 <__NVIC_GetPriorityGrouping>
 80069dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80069de:	687a      	ldr	r2, [r7, #4]
 80069e0:	68b9      	ldr	r1, [r7, #8]
 80069e2:	6978      	ldr	r0, [r7, #20]
 80069e4:	f7ff ff8e 	bl	8006904 <NVIC_EncodePriority>
 80069e8:	4602      	mov	r2, r0
 80069ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069ee:	4611      	mov	r1, r2
 80069f0:	4618      	mov	r0, r3
 80069f2:	f7ff ff5d 	bl	80068b0 <__NVIC_SetPriority>
}
 80069f6:	bf00      	nop
 80069f8:	3718      	adds	r7, #24
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	4603      	mov	r3, r0
 8006a06:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7ff ff0d 	bl	800682c <__NVIC_EnableIRQ>
}
 8006a12:	bf00      	nop
 8006a14:	3708      	adds	r7, #8
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8006a1a:	b580      	push	{r7, lr}
 8006a1c:	b082      	sub	sp, #8
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	4603      	mov	r3, r0
 8006a22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8006a24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a28:	4618      	mov	r0, r3
 8006a2a:	f7ff ff1d 	bl	8006868 <__NVIC_DisableIRQ>
}
 8006a2e:	bf00      	nop
 8006a30:	3708      	adds	r7, #8
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f7ff ff94 	bl	800696c <SysTick_Config>
 8006a44:	4603      	mov	r3, r0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3708      	adds	r7, #8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
	...

08006a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b089      	sub	sp, #36	; 0x24
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
 8006a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006a62:	2300      	movs	r3, #0
 8006a64:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006a66:	2300      	movs	r3, #0
 8006a68:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]
 8006a6e:	e175      	b.n	8006d5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006a70:	2201      	movs	r2, #1
 8006a72:	69fb      	ldr	r3, [r7, #28]
 8006a74:	fa02 f303 	lsl.w	r3, r2, r3
 8006a78:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	4013      	ands	r3, r2
 8006a82:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	f040 8164 	bne.w	8006d56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	685b      	ldr	r3, [r3, #4]
 8006a92:	f003 0303 	and.w	r3, r3, #3
 8006a96:	2b01      	cmp	r3, #1
 8006a98:	d005      	beq.n	8006aa6 <HAL_GPIO_Init+0x56>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	f003 0303 	and.w	r3, r3, #3
 8006aa2:	2b02      	cmp	r3, #2
 8006aa4:	d130      	bne.n	8006b08 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	005b      	lsls	r3, r3, #1
 8006ab0:	2203      	movs	r2, #3
 8006ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab6:	43db      	mvns	r3, r3
 8006ab8:	69ba      	ldr	r2, [r7, #24]
 8006aba:	4013      	ands	r3, r2
 8006abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	68da      	ldr	r2, [r3, #12]
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	005b      	lsls	r3, r3, #1
 8006ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8006aca:	69ba      	ldr	r2, [r7, #24]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	685b      	ldr	r3, [r3, #4]
 8006ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006adc:	2201      	movs	r2, #1
 8006ade:	69fb      	ldr	r3, [r7, #28]
 8006ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ae4:	43db      	mvns	r3, r3
 8006ae6:	69ba      	ldr	r2, [r7, #24]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	091b      	lsrs	r3, r3, #4
 8006af2:	f003 0201 	and.w	r2, r3, #1
 8006af6:	69fb      	ldr	r3, [r7, #28]
 8006af8:	fa02 f303 	lsl.w	r3, r2, r3
 8006afc:	69ba      	ldr	r2, [r7, #24]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	f003 0303 	and.w	r3, r3, #3
 8006b10:	2b03      	cmp	r3, #3
 8006b12:	d017      	beq.n	8006b44 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	68db      	ldr	r3, [r3, #12]
 8006b18:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b1a:	69fb      	ldr	r3, [r7, #28]
 8006b1c:	005b      	lsls	r3, r3, #1
 8006b1e:	2203      	movs	r2, #3
 8006b20:	fa02 f303 	lsl.w	r3, r2, r3
 8006b24:	43db      	mvns	r3, r3
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	4013      	ands	r3, r2
 8006b2a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	689a      	ldr	r2, [r3, #8]
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	005b      	lsls	r3, r3, #1
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	f003 0303 	and.w	r3, r3, #3
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d123      	bne.n	8006b98 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	08da      	lsrs	r2, r3, #3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	3208      	adds	r2, #8
 8006b58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f003 0307 	and.w	r3, r3, #7
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	220f      	movs	r2, #15
 8006b68:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4013      	ands	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	691a      	ldr	r2, [r3, #16]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	f003 0307 	and.w	r3, r3, #7
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	69ba      	ldr	r2, [r7, #24]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	08da      	lsrs	r2, r3, #3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	3208      	adds	r2, #8
 8006b92:	69b9      	ldr	r1, [r7, #24]
 8006b94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	005b      	lsls	r3, r3, #1
 8006ba2:	2203      	movs	r2, #3
 8006ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba8:	43db      	mvns	r3, r3
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	4013      	ands	r3, r2
 8006bae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	f003 0203 	and.w	r2, r3, #3
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	005b      	lsls	r3, r3, #1
 8006bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	69ba      	ldr	r2, [r7, #24]
 8006bca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	f000 80be 	beq.w	8006d56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006bda:	4b66      	ldr	r3, [pc, #408]	; (8006d74 <HAL_GPIO_Init+0x324>)
 8006bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bde:	4a65      	ldr	r2, [pc, #404]	; (8006d74 <HAL_GPIO_Init+0x324>)
 8006be0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006be4:	6453      	str	r3, [r2, #68]	; 0x44
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_GPIO_Init+0x324>)
 8006be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bee:	60fb      	str	r3, [r7, #12]
 8006bf0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006bf2:	4a61      	ldr	r2, [pc, #388]	; (8006d78 <HAL_GPIO_Init+0x328>)
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	089b      	lsrs	r3, r3, #2
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	f003 0303 	and.w	r3, r3, #3
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	220f      	movs	r2, #15
 8006c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0e:	43db      	mvns	r3, r3
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	4013      	ands	r3, r2
 8006c14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	4a58      	ldr	r2, [pc, #352]	; (8006d7c <HAL_GPIO_Init+0x32c>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d037      	beq.n	8006c8e <HAL_GPIO_Init+0x23e>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	4a57      	ldr	r2, [pc, #348]	; (8006d80 <HAL_GPIO_Init+0x330>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d031      	beq.n	8006c8a <HAL_GPIO_Init+0x23a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a56      	ldr	r2, [pc, #344]	; (8006d84 <HAL_GPIO_Init+0x334>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d02b      	beq.n	8006c86 <HAL_GPIO_Init+0x236>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a55      	ldr	r2, [pc, #340]	; (8006d88 <HAL_GPIO_Init+0x338>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d025      	beq.n	8006c82 <HAL_GPIO_Init+0x232>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a54      	ldr	r2, [pc, #336]	; (8006d8c <HAL_GPIO_Init+0x33c>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d01f      	beq.n	8006c7e <HAL_GPIO_Init+0x22e>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a53      	ldr	r2, [pc, #332]	; (8006d90 <HAL_GPIO_Init+0x340>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d019      	beq.n	8006c7a <HAL_GPIO_Init+0x22a>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a52      	ldr	r2, [pc, #328]	; (8006d94 <HAL_GPIO_Init+0x344>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d013      	beq.n	8006c76 <HAL_GPIO_Init+0x226>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a51      	ldr	r2, [pc, #324]	; (8006d98 <HAL_GPIO_Init+0x348>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d00d      	beq.n	8006c72 <HAL_GPIO_Init+0x222>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a50      	ldr	r2, [pc, #320]	; (8006d9c <HAL_GPIO_Init+0x34c>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d007      	beq.n	8006c6e <HAL_GPIO_Init+0x21e>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a4f      	ldr	r2, [pc, #316]	; (8006da0 <HAL_GPIO_Init+0x350>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d101      	bne.n	8006c6a <HAL_GPIO_Init+0x21a>
 8006c66:	2309      	movs	r3, #9
 8006c68:	e012      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c6a:	230a      	movs	r3, #10
 8006c6c:	e010      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c6e:	2308      	movs	r3, #8
 8006c70:	e00e      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c72:	2307      	movs	r3, #7
 8006c74:	e00c      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c76:	2306      	movs	r3, #6
 8006c78:	e00a      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c7a:	2305      	movs	r3, #5
 8006c7c:	e008      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c7e:	2304      	movs	r3, #4
 8006c80:	e006      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c82:	2303      	movs	r3, #3
 8006c84:	e004      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c86:	2302      	movs	r3, #2
 8006c88:	e002      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e000      	b.n	8006c90 <HAL_GPIO_Init+0x240>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	69fa      	ldr	r2, [r7, #28]
 8006c92:	f002 0203 	and.w	r2, r2, #3
 8006c96:	0092      	lsls	r2, r2, #2
 8006c98:	4093      	lsls	r3, r2
 8006c9a:	69ba      	ldr	r2, [r7, #24]
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006ca0:	4935      	ldr	r1, [pc, #212]	; (8006d78 <HAL_GPIO_Init+0x328>)
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	089b      	lsrs	r3, r3, #2
 8006ca6:	3302      	adds	r3, #2
 8006ca8:	69ba      	ldr	r2, [r7, #24]
 8006caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006cae:	4b3d      	ldr	r3, [pc, #244]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	43db      	mvns	r3, r3
 8006cb8:	69ba      	ldr	r2, [r7, #24]
 8006cba:	4013      	ands	r3, r2
 8006cbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d003      	beq.n	8006cd2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006cca:	69ba      	ldr	r2, [r7, #24]
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006cd2:	4a34      	ldr	r2, [pc, #208]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006cd8:	4b32      	ldr	r3, [pc, #200]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	43db      	mvns	r3, r3
 8006ce2:	69ba      	ldr	r2, [r7, #24]
 8006ce4:	4013      	ands	r3, r2
 8006ce6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d003      	beq.n	8006cfc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006cfc:	4a29      	ldr	r2, [pc, #164]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006cfe:	69bb      	ldr	r3, [r7, #24]
 8006d00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006d02:	4b28      	ldr	r3, [pc, #160]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006d04:	685b      	ldr	r3, [r3, #4]
 8006d06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	43db      	mvns	r3, r3
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	4013      	ands	r3, r2
 8006d10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d003      	beq.n	8006d26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d1e:	69ba      	ldr	r2, [r7, #24]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d26:	4a1f      	ldr	r2, [pc, #124]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006d28:	69bb      	ldr	r3, [r7, #24]
 8006d2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d2c:	4b1d      	ldr	r3, [pc, #116]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d32:	693b      	ldr	r3, [r7, #16]
 8006d34:	43db      	mvns	r3, r3
 8006d36:	69ba      	ldr	r2, [r7, #24]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d003      	beq.n	8006d50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d50:	4a14      	ldr	r2, [pc, #80]	; (8006da4 <HAL_GPIO_Init+0x354>)
 8006d52:	69bb      	ldr	r3, [r7, #24]
 8006d54:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006d56:	69fb      	ldr	r3, [r7, #28]
 8006d58:	3301      	adds	r3, #1
 8006d5a:	61fb      	str	r3, [r7, #28]
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	2b0f      	cmp	r3, #15
 8006d60:	f67f ae86 	bls.w	8006a70 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3724      	adds	r7, #36	; 0x24
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr
 8006d72:	bf00      	nop
 8006d74:	40023800 	.word	0x40023800
 8006d78:	40013800 	.word	0x40013800
 8006d7c:	40020000 	.word	0x40020000
 8006d80:	40020400 	.word	0x40020400
 8006d84:	40020800 	.word	0x40020800
 8006d88:	40020c00 	.word	0x40020c00
 8006d8c:	40021000 	.word	0x40021000
 8006d90:	40021400 	.word	0x40021400
 8006d94:	40021800 	.word	0x40021800
 8006d98:	40021c00 	.word	0x40021c00
 8006d9c:	40022000 	.word	0x40022000
 8006da0:	40022400 	.word	0x40022400
 8006da4:	40013c00 	.word	0x40013c00

08006da8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
 8006db0:	460b      	mov	r3, r1
 8006db2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	691a      	ldr	r2, [r3, #16]
 8006db8:	887b      	ldrh	r3, [r7, #2]
 8006dba:	4013      	ands	r3, r2
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	73fb      	strb	r3, [r7, #15]
 8006dc4:	e001      	b.n	8006dca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dcc:	4618      	mov	r0, r3
 8006dce:	3714      	adds	r7, #20
 8006dd0:	46bd      	mov	sp, r7
 8006dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b083      	sub	sp, #12
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	460b      	mov	r3, r1
 8006de2:	807b      	strh	r3, [r7, #2]
 8006de4:	4613      	mov	r3, r2
 8006de6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006de8:	787b      	ldrb	r3, [r7, #1]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006dee:	887a      	ldrh	r2, [r7, #2]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006df4:	e003      	b.n	8006dfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006df6:	887b      	ldrh	r3, [r7, #2]
 8006df8:	041a      	lsls	r2, r3, #16
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	619a      	str	r2, [r3, #24]
}
 8006dfe:	bf00      	nop
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr

08006e0a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006e0a:	b480      	push	{r7}
 8006e0c:	b085      	sub	sp, #20
 8006e0e:	af00      	add	r7, sp, #0
 8006e10:	6078      	str	r0, [r7, #4]
 8006e12:	460b      	mov	r3, r1
 8006e14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	695b      	ldr	r3, [r3, #20]
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006e1c:	887a      	ldrh	r2, [r7, #2]
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	4013      	ands	r3, r2
 8006e22:	041a      	lsls	r2, r3, #16
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	43d9      	mvns	r1, r3
 8006e28:	887b      	ldrh	r3, [r7, #2]
 8006e2a:	400b      	ands	r3, r1
 8006e2c:	431a      	orrs	r2, r3
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	619a      	str	r2, [r3, #24]
}
 8006e32:	bf00      	nop
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr
	...

08006e40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	4603      	mov	r3, r0
 8006e48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006e4a:	4b08      	ldr	r3, [pc, #32]	; (8006e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	88fb      	ldrh	r3, [r7, #6]
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d006      	beq.n	8006e64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006e56:	4a05      	ldr	r2, [pc, #20]	; (8006e6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006e58:	88fb      	ldrh	r3, [r7, #6]
 8006e5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006e5c:	88fb      	ldrh	r3, [r7, #6]
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fa fe9a 	bl	8001b98 <HAL_GPIO_EXTI_Callback>
  }
}
 8006e64:	bf00      	nop
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40013c00 	.word	0x40013c00

08006e70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b082      	sub	sp, #8
 8006e74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006e7a:	4b23      	ldr	r3, [pc, #140]	; (8006f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e7e:	4a22      	ldr	r2, [pc, #136]	; (8006f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e84:	6413      	str	r3, [r2, #64]	; 0x40
 8006e86:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <HAL_PWREx_EnableOverDrive+0x98>)
 8006e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e8e:	603b      	str	r3, [r7, #0]
 8006e90:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006e92:	4b1e      	ldr	r3, [pc, #120]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a1d      	ldr	r2, [pc, #116]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006e98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e9c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e9e:	f7fe f99d 	bl	80051dc <HAL_GetTick>
 8006ea2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006ea4:	e009      	b.n	8006eba <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006ea6:	f7fe f999 	bl	80051dc <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eb4:	d901      	bls.n	8006eba <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006eb6:	2303      	movs	r3, #3
 8006eb8:	e022      	b.n	8006f00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006eba:	4b14      	ldr	r3, [pc, #80]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec6:	d1ee      	bne.n	8006ea6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006ec8:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	4a0f      	ldr	r2, [pc, #60]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ed2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ed4:	f7fe f982 	bl	80051dc <HAL_GetTick>
 8006ed8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006eda:	e009      	b.n	8006ef0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006edc:	f7fe f97e 	bl	80051dc <HAL_GetTick>
 8006ee0:	4602      	mov	r2, r0
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	1ad3      	subs	r3, r2, r3
 8006ee6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006eea:	d901      	bls.n	8006ef0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006eec:	2303      	movs	r3, #3
 8006eee:	e007      	b.n	8006f00 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006ef0:	4b06      	ldr	r3, [pc, #24]	; (8006f0c <HAL_PWREx_EnableOverDrive+0x9c>)
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006efc:	d1ee      	bne.n	8006edc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	40023800 	.word	0x40023800
 8006f0c:	40007000 	.word	0x40007000

08006f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d101      	bne.n	8006f26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8006f22:	2301      	movs	r3, #1
 8006f24:	e291      	b.n	800744a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f000 8087 	beq.w	8007042 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f34:	4b96      	ldr	r3, [pc, #600]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	f003 030c 	and.w	r3, r3, #12
 8006f3c:	2b04      	cmp	r3, #4
 8006f3e:	d00c      	beq.n	8006f5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006f40:	4b93      	ldr	r3, [pc, #588]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f42:	689b      	ldr	r3, [r3, #8]
 8006f44:	f003 030c 	and.w	r3, r3, #12
 8006f48:	2b08      	cmp	r3, #8
 8006f4a:	d112      	bne.n	8006f72 <HAL_RCC_OscConfig+0x62>
 8006f4c:	4b90      	ldr	r3, [pc, #576]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f4e:	685b      	ldr	r3, [r3, #4]
 8006f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f58:	d10b      	bne.n	8006f72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f5a:	4b8d      	ldr	r3, [pc, #564]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d06c      	beq.n	8007040 <HAL_RCC_OscConfig+0x130>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d168      	bne.n	8007040 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e26b      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f7a:	d106      	bne.n	8006f8a <HAL_RCC_OscConfig+0x7a>
 8006f7c:	4b84      	ldr	r3, [pc, #528]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4a83      	ldr	r2, [pc, #524]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f86:	6013      	str	r3, [r2, #0]
 8006f88:	e02e      	b.n	8006fe8 <HAL_RCC_OscConfig+0xd8>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d10c      	bne.n	8006fac <HAL_RCC_OscConfig+0x9c>
 8006f92:	4b7f      	ldr	r3, [pc, #508]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a7e      	ldr	r2, [pc, #504]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f9c:	6013      	str	r3, [r2, #0]
 8006f9e:	4b7c      	ldr	r3, [pc, #496]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a7b      	ldr	r2, [pc, #492]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fa8:	6013      	str	r3, [r2, #0]
 8006faa:	e01d      	b.n	8006fe8 <HAL_RCC_OscConfig+0xd8>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006fb4:	d10c      	bne.n	8006fd0 <HAL_RCC_OscConfig+0xc0>
 8006fb6:	4b76      	ldr	r3, [pc, #472]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a75      	ldr	r2, [pc, #468]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006fc0:	6013      	str	r3, [r2, #0]
 8006fc2:	4b73      	ldr	r3, [pc, #460]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a72      	ldr	r2, [pc, #456]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6013      	str	r3, [r2, #0]
 8006fce:	e00b      	b.n	8006fe8 <HAL_RCC_OscConfig+0xd8>
 8006fd0:	4b6f      	ldr	r3, [pc, #444]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a6e      	ldr	r2, [pc, #440]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	4b6c      	ldr	r3, [pc, #432]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a6b      	ldr	r2, [pc, #428]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8006fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d013      	beq.n	8007018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ff0:	f7fe f8f4 	bl	80051dc <HAL_GetTick>
 8006ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ff6:	e008      	b.n	800700a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ff8:	f7fe f8f0 	bl	80051dc <HAL_GetTick>
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	1ad3      	subs	r3, r2, r3
 8007002:	2b64      	cmp	r3, #100	; 0x64
 8007004:	d901      	bls.n	800700a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007006:	2303      	movs	r3, #3
 8007008:	e21f      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700a:	4b61      	ldr	r3, [pc, #388]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0f0      	beq.n	8006ff8 <HAL_RCC_OscConfig+0xe8>
 8007016:	e014      	b.n	8007042 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007018:	f7fe f8e0 	bl	80051dc <HAL_GetTick>
 800701c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800701e:	e008      	b.n	8007032 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007020:	f7fe f8dc 	bl	80051dc <HAL_GetTick>
 8007024:	4602      	mov	r2, r0
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	1ad3      	subs	r3, r2, r3
 800702a:	2b64      	cmp	r3, #100	; 0x64
 800702c:	d901      	bls.n	8007032 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800702e:	2303      	movs	r3, #3
 8007030:	e20b      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007032:	4b57      	ldr	r3, [pc, #348]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800703a:	2b00      	cmp	r3, #0
 800703c:	d1f0      	bne.n	8007020 <HAL_RCC_OscConfig+0x110>
 800703e:	e000      	b.n	8007042 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0302 	and.w	r3, r3, #2
 800704a:	2b00      	cmp	r3, #0
 800704c:	d069      	beq.n	8007122 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800704e:	4b50      	ldr	r3, [pc, #320]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 030c 	and.w	r3, r3, #12
 8007056:	2b00      	cmp	r3, #0
 8007058:	d00b      	beq.n	8007072 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800705a:	4b4d      	ldr	r3, [pc, #308]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800705c:	689b      	ldr	r3, [r3, #8]
 800705e:	f003 030c 	and.w	r3, r3, #12
 8007062:	2b08      	cmp	r3, #8
 8007064:	d11c      	bne.n	80070a0 <HAL_RCC_OscConfig+0x190>
 8007066:	4b4a      	ldr	r3, [pc, #296]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007068:	685b      	ldr	r3, [r3, #4]
 800706a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d116      	bne.n	80070a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007072:	4b47      	ldr	r3, [pc, #284]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d005      	beq.n	800708a <HAL_RCC_OscConfig+0x17a>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	68db      	ldr	r3, [r3, #12]
 8007082:	2b01      	cmp	r3, #1
 8007084:	d001      	beq.n	800708a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e1df      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800708a:	4b41      	ldr	r3, [pc, #260]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	691b      	ldr	r3, [r3, #16]
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	493d      	ldr	r1, [pc, #244]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800709a:	4313      	orrs	r3, r2
 800709c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800709e:	e040      	b.n	8007122 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	68db      	ldr	r3, [r3, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d023      	beq.n	80070f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80070a8:	4b39      	ldr	r3, [pc, #228]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a38      	ldr	r2, [pc, #224]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070b4:	f7fe f892 	bl	80051dc <HAL_GetTick>
 80070b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ba:	e008      	b.n	80070ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80070bc:	f7fe f88e 	bl	80051dc <HAL_GetTick>
 80070c0:	4602      	mov	r2, r0
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d901      	bls.n	80070ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e1bd      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80070ce:	4b30      	ldr	r3, [pc, #192]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0302 	and.w	r3, r3, #2
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0f0      	beq.n	80070bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80070da:	4b2d      	ldr	r3, [pc, #180]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	4929      	ldr	r1, [pc, #164]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070ea:	4313      	orrs	r3, r2
 80070ec:	600b      	str	r3, [r1, #0]
 80070ee:	e018      	b.n	8007122 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80070f0:	4b27      	ldr	r3, [pc, #156]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a26      	ldr	r2, [pc, #152]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 80070f6:	f023 0301 	bic.w	r3, r3, #1
 80070fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80070fc:	f7fe f86e 	bl	80051dc <HAL_GetTick>
 8007100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007102:	e008      	b.n	8007116 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007104:	f7fe f86a 	bl	80051dc <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b02      	cmp	r3, #2
 8007110:	d901      	bls.n	8007116 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007112:	2303      	movs	r3, #3
 8007114:	e199      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007116:	4b1e      	ldr	r3, [pc, #120]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	f003 0302 	and.w	r3, r3, #2
 800711e:	2b00      	cmp	r3, #0
 8007120:	d1f0      	bne.n	8007104 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0308 	and.w	r3, r3, #8
 800712a:	2b00      	cmp	r3, #0
 800712c:	d038      	beq.n	80071a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d019      	beq.n	800716a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007136:	4b16      	ldr	r3, [pc, #88]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800713a:	4a15      	ldr	r2, [pc, #84]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800713c:	f043 0301 	orr.w	r3, r3, #1
 8007140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007142:	f7fe f84b 	bl	80051dc <HAL_GetTick>
 8007146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007148:	e008      	b.n	800715c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800714a:	f7fe f847 	bl	80051dc <HAL_GetTick>
 800714e:	4602      	mov	r2, r0
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	1ad3      	subs	r3, r2, r3
 8007154:	2b02      	cmp	r3, #2
 8007156:	d901      	bls.n	800715c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007158:	2303      	movs	r3, #3
 800715a:	e176      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800715c:	4b0c      	ldr	r3, [pc, #48]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800715e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007160:	f003 0302 	and.w	r3, r3, #2
 8007164:	2b00      	cmp	r3, #0
 8007166:	d0f0      	beq.n	800714a <HAL_RCC_OscConfig+0x23a>
 8007168:	e01a      	b.n	80071a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800716a:	4b09      	ldr	r3, [pc, #36]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 800716c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800716e:	4a08      	ldr	r2, [pc, #32]	; (8007190 <HAL_RCC_OscConfig+0x280>)
 8007170:	f023 0301 	bic.w	r3, r3, #1
 8007174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007176:	f7fe f831 	bl	80051dc <HAL_GetTick>
 800717a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800717c:	e00a      	b.n	8007194 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800717e:	f7fe f82d 	bl	80051dc <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d903      	bls.n	8007194 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e15c      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
 8007190:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007194:	4b91      	ldr	r3, [pc, #580]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007198:	f003 0302 	and.w	r3, r3, #2
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1ee      	bne.n	800717e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	f000 80a4 	beq.w	80072f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80071ae:	4b8b      	ldr	r3, [pc, #556]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d10d      	bne.n	80071d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80071ba:	4b88      	ldr	r3, [pc, #544]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	4a87      	ldr	r2, [pc, #540]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80071c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071c4:	6413      	str	r3, [r2, #64]	; 0x40
 80071c6:	4b85      	ldr	r3, [pc, #532]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80071c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80071d2:	2301      	movs	r3, #1
 80071d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071d6:	4b82      	ldr	r3, [pc, #520]	; (80073e0 <HAL_RCC_OscConfig+0x4d0>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d118      	bne.n	8007214 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80071e2:	4b7f      	ldr	r3, [pc, #508]	; (80073e0 <HAL_RCC_OscConfig+0x4d0>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a7e      	ldr	r2, [pc, #504]	; (80073e0 <HAL_RCC_OscConfig+0x4d0>)
 80071e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80071ee:	f7fd fff5 	bl	80051dc <HAL_GetTick>
 80071f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80071f4:	e008      	b.n	8007208 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071f6:	f7fd fff1 	bl	80051dc <HAL_GetTick>
 80071fa:	4602      	mov	r2, r0
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	1ad3      	subs	r3, r2, r3
 8007200:	2b64      	cmp	r3, #100	; 0x64
 8007202:	d901      	bls.n	8007208 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e120      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007208:	4b75      	ldr	r3, [pc, #468]	; (80073e0 <HAL_RCC_OscConfig+0x4d0>)
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007210:	2b00      	cmp	r3, #0
 8007212:	d0f0      	beq.n	80071f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	689b      	ldr	r3, [r3, #8]
 8007218:	2b01      	cmp	r3, #1
 800721a:	d106      	bne.n	800722a <HAL_RCC_OscConfig+0x31a>
 800721c:	4b6f      	ldr	r3, [pc, #444]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800721e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007220:	4a6e      	ldr	r2, [pc, #440]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007222:	f043 0301 	orr.w	r3, r3, #1
 8007226:	6713      	str	r3, [r2, #112]	; 0x70
 8007228:	e02d      	b.n	8007286 <HAL_RCC_OscConfig+0x376>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	689b      	ldr	r3, [r3, #8]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10c      	bne.n	800724c <HAL_RCC_OscConfig+0x33c>
 8007232:	4b6a      	ldr	r3, [pc, #424]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007236:	4a69      	ldr	r2, [pc, #420]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007238:	f023 0301 	bic.w	r3, r3, #1
 800723c:	6713      	str	r3, [r2, #112]	; 0x70
 800723e:	4b67      	ldr	r3, [pc, #412]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007242:	4a66      	ldr	r2, [pc, #408]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007244:	f023 0304 	bic.w	r3, r3, #4
 8007248:	6713      	str	r3, [r2, #112]	; 0x70
 800724a:	e01c      	b.n	8007286 <HAL_RCC_OscConfig+0x376>
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	2b05      	cmp	r3, #5
 8007252:	d10c      	bne.n	800726e <HAL_RCC_OscConfig+0x35e>
 8007254:	4b61      	ldr	r3, [pc, #388]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007258:	4a60      	ldr	r2, [pc, #384]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800725a:	f043 0304 	orr.w	r3, r3, #4
 800725e:	6713      	str	r3, [r2, #112]	; 0x70
 8007260:	4b5e      	ldr	r3, [pc, #376]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007264:	4a5d      	ldr	r2, [pc, #372]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007266:	f043 0301 	orr.w	r3, r3, #1
 800726a:	6713      	str	r3, [r2, #112]	; 0x70
 800726c:	e00b      	b.n	8007286 <HAL_RCC_OscConfig+0x376>
 800726e:	4b5b      	ldr	r3, [pc, #364]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007272:	4a5a      	ldr	r2, [pc, #360]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007274:	f023 0301 	bic.w	r3, r3, #1
 8007278:	6713      	str	r3, [r2, #112]	; 0x70
 800727a:	4b58      	ldr	r3, [pc, #352]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800727c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727e:	4a57      	ldr	r2, [pc, #348]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007280:	f023 0304 	bic.w	r3, r3, #4
 8007284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d015      	beq.n	80072ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800728e:	f7fd ffa5 	bl	80051dc <HAL_GetTick>
 8007292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007294:	e00a      	b.n	80072ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007296:	f7fd ffa1 	bl	80051dc <HAL_GetTick>
 800729a:	4602      	mov	r2, r0
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	1ad3      	subs	r3, r2, r3
 80072a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d901      	bls.n	80072ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80072a8:	2303      	movs	r3, #3
 80072aa:	e0ce      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80072ac:	4b4b      	ldr	r3, [pc, #300]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80072ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072b0:	f003 0302 	and.w	r3, r3, #2
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d0ee      	beq.n	8007296 <HAL_RCC_OscConfig+0x386>
 80072b8:	e014      	b.n	80072e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072ba:	f7fd ff8f 	bl	80051dc <HAL_GetTick>
 80072be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072c0:	e00a      	b.n	80072d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80072c2:	f7fd ff8b 	bl	80051dc <HAL_GetTick>
 80072c6:	4602      	mov	r2, r0
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	1ad3      	subs	r3, r2, r3
 80072cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d901      	bls.n	80072d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80072d4:	2303      	movs	r3, #3
 80072d6:	e0b8      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80072d8:	4b40      	ldr	r3, [pc, #256]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80072da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072dc:	f003 0302 	and.w	r3, r3, #2
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1ee      	bne.n	80072c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80072e4:	7dfb      	ldrb	r3, [r7, #23]
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d105      	bne.n	80072f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80072ea:	4b3c      	ldr	r3, [pc, #240]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80072ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ee:	4a3b      	ldr	r2, [pc, #236]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80072f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	699b      	ldr	r3, [r3, #24]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	f000 80a4 	beq.w	8007448 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007300:	4b36      	ldr	r3, [pc, #216]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007302:	689b      	ldr	r3, [r3, #8]
 8007304:	f003 030c 	and.w	r3, r3, #12
 8007308:	2b08      	cmp	r3, #8
 800730a:	d06b      	beq.n	80073e4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699b      	ldr	r3, [r3, #24]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d149      	bne.n	80073a8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007314:	4b31      	ldr	r3, [pc, #196]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a30      	ldr	r2, [pc, #192]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800731a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800731e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007320:	f7fd ff5c 	bl	80051dc <HAL_GetTick>
 8007324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007326:	e008      	b.n	800733a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007328:	f7fd ff58 	bl	80051dc <HAL_GetTick>
 800732c:	4602      	mov	r2, r0
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	1ad3      	subs	r3, r2, r3
 8007332:	2b02      	cmp	r3, #2
 8007334:	d901      	bls.n	800733a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007336:	2303      	movs	r3, #3
 8007338:	e087      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800733a:	4b28      	ldr	r3, [pc, #160]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f0      	bne.n	8007328 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	69da      	ldr	r2, [r3, #28]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a1b      	ldr	r3, [r3, #32]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007354:	019b      	lsls	r3, r3, #6
 8007356:	431a      	orrs	r2, r3
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735c:	085b      	lsrs	r3, r3, #1
 800735e:	3b01      	subs	r3, #1
 8007360:	041b      	lsls	r3, r3, #16
 8007362:	431a      	orrs	r2, r3
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007368:	061b      	lsls	r3, r3, #24
 800736a:	4313      	orrs	r3, r2
 800736c:	4a1b      	ldr	r2, [pc, #108]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800736e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007372:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007374:	4b19      	ldr	r3, [pc, #100]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a18      	ldr	r2, [pc, #96]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800737a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800737e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007380:	f7fd ff2c 	bl	80051dc <HAL_GetTick>
 8007384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007386:	e008      	b.n	800739a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007388:	f7fd ff28 	bl	80051dc <HAL_GetTick>
 800738c:	4602      	mov	r2, r0
 800738e:	693b      	ldr	r3, [r7, #16]
 8007390:	1ad3      	subs	r3, r2, r3
 8007392:	2b02      	cmp	r3, #2
 8007394:	d901      	bls.n	800739a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007396:	2303      	movs	r3, #3
 8007398:	e057      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800739a:	4b10      	ldr	r3, [pc, #64]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d0f0      	beq.n	8007388 <HAL_RCC_OscConfig+0x478>
 80073a6:	e04f      	b.n	8007448 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80073a8:	4b0c      	ldr	r3, [pc, #48]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a0b      	ldr	r2, [pc, #44]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80073ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80073b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b4:	f7fd ff12 	bl	80051dc <HAL_GetTick>
 80073b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	e008      	b.n	80073ce <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80073bc:	f7fd ff0e 	bl	80051dc <HAL_GetTick>
 80073c0:	4602      	mov	r2, r0
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	1ad3      	subs	r3, r2, r3
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d901      	bls.n	80073ce <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e03d      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ce:	4b03      	ldr	r3, [pc, #12]	; (80073dc <HAL_RCC_OscConfig+0x4cc>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d1f0      	bne.n	80073bc <HAL_RCC_OscConfig+0x4ac>
 80073da:	e035      	b.n	8007448 <HAL_RCC_OscConfig+0x538>
 80073dc:	40023800 	.word	0x40023800
 80073e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <HAL_RCC_OscConfig+0x544>)
 80073e6:	685b      	ldr	r3, [r3, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d028      	beq.n	8007444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d121      	bne.n	8007444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800740a:	429a      	cmp	r2, r3
 800740c:	d11a      	bne.n	8007444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007414:	4013      	ands	r3, r2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800741a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800741c:	4293      	cmp	r3, r2
 800741e:	d111      	bne.n	8007444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800742a:	085b      	lsrs	r3, r3, #1
 800742c:	3b01      	subs	r3, #1
 800742e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007430:	429a      	cmp	r2, r3
 8007432:	d107      	bne.n	8007444 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007440:	429a      	cmp	r2, r3
 8007442:	d001      	beq.n	8007448 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e000      	b.n	800744a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007448:	2300      	movs	r3, #0
}
 800744a:	4618      	mov	r0, r3
 800744c:	3718      	adds	r7, #24
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
 8007452:	bf00      	nop
 8007454:	40023800 	.word	0x40023800

08007458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b084      	sub	sp, #16
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
 8007460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d101      	bne.n	8007470 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800746c:	2301      	movs	r3, #1
 800746e:	e0d0      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007470:	4b6a      	ldr	r3, [pc, #424]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f003 030f 	and.w	r3, r3, #15
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	429a      	cmp	r2, r3
 800747c:	d910      	bls.n	80074a0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800747e:	4b67      	ldr	r3, [pc, #412]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f023 020f 	bic.w	r2, r3, #15
 8007486:	4965      	ldr	r1, [pc, #404]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	4313      	orrs	r3, r2
 800748c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800748e:	4b63      	ldr	r3, [pc, #396]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 030f 	and.w	r3, r3, #15
 8007496:	683a      	ldr	r2, [r7, #0]
 8007498:	429a      	cmp	r2, r3
 800749a:	d001      	beq.n	80074a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800749c:	2301      	movs	r3, #1
 800749e:	e0b8      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f003 0302 	and.w	r3, r3, #2
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d020      	beq.n	80074ee <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0304 	and.w	r3, r3, #4
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80074b8:	4b59      	ldr	r3, [pc, #356]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	4a58      	ldr	r2, [pc, #352]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80074c2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f003 0308 	and.w	r3, r3, #8
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80074d0:	4b53      	ldr	r3, [pc, #332]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	4a52      	ldr	r2, [pc, #328]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80074da:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80074dc:	4b50      	ldr	r3, [pc, #320]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	689b      	ldr	r3, [r3, #8]
 80074e8:	494d      	ldr	r1, [pc, #308]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80074ea:	4313      	orrs	r3, r2
 80074ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d040      	beq.n	800757c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d107      	bne.n	8007512 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007502:	4b47      	ldr	r3, [pc, #284]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d115      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800750e:	2301      	movs	r3, #1
 8007510:	e07f      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	685b      	ldr	r3, [r3, #4]
 8007516:	2b02      	cmp	r3, #2
 8007518:	d107      	bne.n	800752a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800751a:	4b41      	ldr	r3, [pc, #260]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d109      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	e073      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800752a:	4b3d      	ldr	r3, [pc, #244]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007536:	2301      	movs	r3, #1
 8007538:	e06b      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800753a:	4b39      	ldr	r3, [pc, #228]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f023 0203 	bic.w	r2, r3, #3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	4936      	ldr	r1, [pc, #216]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 8007548:	4313      	orrs	r3, r2
 800754a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800754c:	f7fd fe46 	bl	80051dc <HAL_GetTick>
 8007550:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007552:	e00a      	b.n	800756a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007554:	f7fd fe42 	bl	80051dc <HAL_GetTick>
 8007558:	4602      	mov	r2, r0
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	1ad3      	subs	r3, r2, r3
 800755e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007562:	4293      	cmp	r3, r2
 8007564:	d901      	bls.n	800756a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007566:	2303      	movs	r3, #3
 8007568:	e053      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800756a:	4b2d      	ldr	r3, [pc, #180]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 020c 	and.w	r2, r3, #12
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	429a      	cmp	r2, r3
 800757a:	d1eb      	bne.n	8007554 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800757c:	4b27      	ldr	r3, [pc, #156]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f003 030f 	and.w	r3, r3, #15
 8007584:	683a      	ldr	r2, [r7, #0]
 8007586:	429a      	cmp	r2, r3
 8007588:	d210      	bcs.n	80075ac <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800758a:	4b24      	ldr	r3, [pc, #144]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f023 020f 	bic.w	r2, r3, #15
 8007592:	4922      	ldr	r1, [pc, #136]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	4313      	orrs	r3, r2
 8007598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800759a:	4b20      	ldr	r3, [pc, #128]	; (800761c <HAL_RCC_ClockConfig+0x1c4>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 030f 	and.w	r3, r3, #15
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d001      	beq.n	80075ac <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e032      	b.n	8007612 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0304 	and.w	r3, r3, #4
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d008      	beq.n	80075ca <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80075b8:	4b19      	ldr	r3, [pc, #100]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	68db      	ldr	r3, [r3, #12]
 80075c4:	4916      	ldr	r1, [pc, #88]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075c6:	4313      	orrs	r3, r2
 80075c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	f003 0308 	and.w	r3, r3, #8
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d009      	beq.n	80075ea <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80075d6:	4b12      	ldr	r3, [pc, #72]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	691b      	ldr	r3, [r3, #16]
 80075e2:	00db      	lsls	r3, r3, #3
 80075e4:	490e      	ldr	r1, [pc, #56]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075e6:	4313      	orrs	r3, r2
 80075e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80075ea:	f000 f821 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 80075ee:	4602      	mov	r2, r0
 80075f0:	4b0b      	ldr	r3, [pc, #44]	; (8007620 <HAL_RCC_ClockConfig+0x1c8>)
 80075f2:	689b      	ldr	r3, [r3, #8]
 80075f4:	091b      	lsrs	r3, r3, #4
 80075f6:	f003 030f 	and.w	r3, r3, #15
 80075fa:	490a      	ldr	r1, [pc, #40]	; (8007624 <HAL_RCC_ClockConfig+0x1cc>)
 80075fc:	5ccb      	ldrb	r3, [r1, r3]
 80075fe:	fa22 f303 	lsr.w	r3, r2, r3
 8007602:	4a09      	ldr	r2, [pc, #36]	; (8007628 <HAL_RCC_ClockConfig+0x1d0>)
 8007604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007606:	4b09      	ldr	r3, [pc, #36]	; (800762c <HAL_RCC_ClockConfig+0x1d4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	4618      	mov	r0, r3
 800760c:	f7fd fda2 	bl	8005154 <HAL_InitTick>

  return HAL_OK;
 8007610:	2300      	movs	r3, #0
}
 8007612:	4618      	mov	r0, r3
 8007614:	3710      	adds	r7, #16
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	40023c00 	.word	0x40023c00
 8007620:	40023800 	.word	0x40023800
 8007624:	0800af24 	.word	0x0800af24
 8007628:	20000058 	.word	0x20000058
 800762c:	2000005c 	.word	0x2000005c

08007630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007634:	b094      	sub	sp, #80	; 0x50
 8007636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007638:	2300      	movs	r3, #0
 800763a:	647b      	str	r3, [r7, #68]	; 0x44
 800763c:	2300      	movs	r3, #0
 800763e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007640:	2300      	movs	r3, #0
 8007642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8007644:	2300      	movs	r3, #0
 8007646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007648:	4b79      	ldr	r3, [pc, #484]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 800764a:	689b      	ldr	r3, [r3, #8]
 800764c:	f003 030c 	and.w	r3, r3, #12
 8007650:	2b08      	cmp	r3, #8
 8007652:	d00d      	beq.n	8007670 <HAL_RCC_GetSysClockFreq+0x40>
 8007654:	2b08      	cmp	r3, #8
 8007656:	f200 80e1 	bhi.w	800781c <HAL_RCC_GetSysClockFreq+0x1ec>
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <HAL_RCC_GetSysClockFreq+0x34>
 800765e:	2b04      	cmp	r3, #4
 8007660:	d003      	beq.n	800766a <HAL_RCC_GetSysClockFreq+0x3a>
 8007662:	e0db      	b.n	800781c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007664:	4b73      	ldr	r3, [pc, #460]	; (8007834 <HAL_RCC_GetSysClockFreq+0x204>)
 8007666:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007668:	e0db      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800766a:	4b73      	ldr	r3, [pc, #460]	; (8007838 <HAL_RCC_GetSysClockFreq+0x208>)
 800766c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800766e:	e0d8      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007670:	4b6f      	ldr	r3, [pc, #444]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007678:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800767a:	4b6d      	ldr	r3, [pc, #436]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007682:	2b00      	cmp	r3, #0
 8007684:	d063      	beq.n	800774e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007686:	4b6a      	ldr	r3, [pc, #424]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007688:	685b      	ldr	r3, [r3, #4]
 800768a:	099b      	lsrs	r3, r3, #6
 800768c:	2200      	movs	r2, #0
 800768e:	63bb      	str	r3, [r7, #56]	; 0x38
 8007690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007698:	633b      	str	r3, [r7, #48]	; 0x30
 800769a:	2300      	movs	r3, #0
 800769c:	637b      	str	r3, [r7, #52]	; 0x34
 800769e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80076a2:	4622      	mov	r2, r4
 80076a4:	462b      	mov	r3, r5
 80076a6:	f04f 0000 	mov.w	r0, #0
 80076aa:	f04f 0100 	mov.w	r1, #0
 80076ae:	0159      	lsls	r1, r3, #5
 80076b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80076b4:	0150      	lsls	r0, r2, #5
 80076b6:	4602      	mov	r2, r0
 80076b8:	460b      	mov	r3, r1
 80076ba:	4621      	mov	r1, r4
 80076bc:	1a51      	subs	r1, r2, r1
 80076be:	6139      	str	r1, [r7, #16]
 80076c0:	4629      	mov	r1, r5
 80076c2:	eb63 0301 	sbc.w	r3, r3, r1
 80076c6:	617b      	str	r3, [r7, #20]
 80076c8:	f04f 0200 	mov.w	r2, #0
 80076cc:	f04f 0300 	mov.w	r3, #0
 80076d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076d4:	4659      	mov	r1, fp
 80076d6:	018b      	lsls	r3, r1, #6
 80076d8:	4651      	mov	r1, sl
 80076da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80076de:	4651      	mov	r1, sl
 80076e0:	018a      	lsls	r2, r1, #6
 80076e2:	4651      	mov	r1, sl
 80076e4:	ebb2 0801 	subs.w	r8, r2, r1
 80076e8:	4659      	mov	r1, fp
 80076ea:	eb63 0901 	sbc.w	r9, r3, r1
 80076ee:	f04f 0200 	mov.w	r2, #0
 80076f2:	f04f 0300 	mov.w	r3, #0
 80076f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80076fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80076fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007702:	4690      	mov	r8, r2
 8007704:	4699      	mov	r9, r3
 8007706:	4623      	mov	r3, r4
 8007708:	eb18 0303 	adds.w	r3, r8, r3
 800770c:	60bb      	str	r3, [r7, #8]
 800770e:	462b      	mov	r3, r5
 8007710:	eb49 0303 	adc.w	r3, r9, r3
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	f04f 0200 	mov.w	r2, #0
 800771a:	f04f 0300 	mov.w	r3, #0
 800771e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007722:	4629      	mov	r1, r5
 8007724:	024b      	lsls	r3, r1, #9
 8007726:	4621      	mov	r1, r4
 8007728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800772c:	4621      	mov	r1, r4
 800772e:	024a      	lsls	r2, r1, #9
 8007730:	4610      	mov	r0, r2
 8007732:	4619      	mov	r1, r3
 8007734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007736:	2200      	movs	r2, #0
 8007738:	62bb      	str	r3, [r7, #40]	; 0x28
 800773a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800773c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007740:	f7f9 fa54 	bl	8000bec <__aeabi_uldivmod>
 8007744:	4602      	mov	r2, r0
 8007746:	460b      	mov	r3, r1
 8007748:	4613      	mov	r3, r2
 800774a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800774c:	e058      	b.n	8007800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774e:	4b38      	ldr	r3, [pc, #224]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007750:	685b      	ldr	r3, [r3, #4]
 8007752:	099b      	lsrs	r3, r3, #6
 8007754:	2200      	movs	r2, #0
 8007756:	4618      	mov	r0, r3
 8007758:	4611      	mov	r1, r2
 800775a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800775e:	623b      	str	r3, [r7, #32]
 8007760:	2300      	movs	r3, #0
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
 8007764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007768:	4642      	mov	r2, r8
 800776a:	464b      	mov	r3, r9
 800776c:	f04f 0000 	mov.w	r0, #0
 8007770:	f04f 0100 	mov.w	r1, #0
 8007774:	0159      	lsls	r1, r3, #5
 8007776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800777a:	0150      	lsls	r0, r2, #5
 800777c:	4602      	mov	r2, r0
 800777e:	460b      	mov	r3, r1
 8007780:	4641      	mov	r1, r8
 8007782:	ebb2 0a01 	subs.w	sl, r2, r1
 8007786:	4649      	mov	r1, r9
 8007788:	eb63 0b01 	sbc.w	fp, r3, r1
 800778c:	f04f 0200 	mov.w	r2, #0
 8007790:	f04f 0300 	mov.w	r3, #0
 8007794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800779c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80077a0:	ebb2 040a 	subs.w	r4, r2, sl
 80077a4:	eb63 050b 	sbc.w	r5, r3, fp
 80077a8:	f04f 0200 	mov.w	r2, #0
 80077ac:	f04f 0300 	mov.w	r3, #0
 80077b0:	00eb      	lsls	r3, r5, #3
 80077b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077b6:	00e2      	lsls	r2, r4, #3
 80077b8:	4614      	mov	r4, r2
 80077ba:	461d      	mov	r5, r3
 80077bc:	4643      	mov	r3, r8
 80077be:	18e3      	adds	r3, r4, r3
 80077c0:	603b      	str	r3, [r7, #0]
 80077c2:	464b      	mov	r3, r9
 80077c4:	eb45 0303 	adc.w	r3, r5, r3
 80077c8:	607b      	str	r3, [r7, #4]
 80077ca:	f04f 0200 	mov.w	r2, #0
 80077ce:	f04f 0300 	mov.w	r3, #0
 80077d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077d6:	4629      	mov	r1, r5
 80077d8:	028b      	lsls	r3, r1, #10
 80077da:	4621      	mov	r1, r4
 80077dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077e0:	4621      	mov	r1, r4
 80077e2:	028a      	lsls	r2, r1, #10
 80077e4:	4610      	mov	r0, r2
 80077e6:	4619      	mov	r1, r3
 80077e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80077ea:	2200      	movs	r2, #0
 80077ec:	61bb      	str	r3, [r7, #24]
 80077ee:	61fa      	str	r2, [r7, #28]
 80077f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077f4:	f7f9 f9fa 	bl	8000bec <__aeabi_uldivmod>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4613      	mov	r3, r2
 80077fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007800:	4b0b      	ldr	r3, [pc, #44]	; (8007830 <HAL_RCC_GetSysClockFreq+0x200>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	0c1b      	lsrs	r3, r3, #16
 8007806:	f003 0303 	and.w	r3, r3, #3
 800780a:	3301      	adds	r3, #1
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007814:	fbb2 f3f3 	udiv	r3, r2, r3
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800781a:	e002      	b.n	8007822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800781c:	4b05      	ldr	r3, [pc, #20]	; (8007834 <HAL_RCC_GetSysClockFreq+0x204>)
 800781e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007824:	4618      	mov	r0, r3
 8007826:	3750      	adds	r7, #80	; 0x50
 8007828:	46bd      	mov	sp, r7
 800782a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800782e:	bf00      	nop
 8007830:	40023800 	.word	0x40023800
 8007834:	00f42400 	.word	0x00f42400
 8007838:	007a1200 	.word	0x007a1200

0800783c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800783c:	b480      	push	{r7}
 800783e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007840:	4b03      	ldr	r3, [pc, #12]	; (8007850 <HAL_RCC_GetHCLKFreq+0x14>)
 8007842:	681b      	ldr	r3, [r3, #0]
}
 8007844:	4618      	mov	r0, r3
 8007846:	46bd      	mov	sp, r7
 8007848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784c:	4770      	bx	lr
 800784e:	bf00      	nop
 8007850:	20000058 	.word	0x20000058

08007854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007858:	f7ff fff0 	bl	800783c <HAL_RCC_GetHCLKFreq>
 800785c:	4602      	mov	r2, r0
 800785e:	4b05      	ldr	r3, [pc, #20]	; (8007874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	0a9b      	lsrs	r3, r3, #10
 8007864:	f003 0307 	and.w	r3, r3, #7
 8007868:	4903      	ldr	r1, [pc, #12]	; (8007878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800786a:	5ccb      	ldrb	r3, [r1, r3]
 800786c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007870:	4618      	mov	r0, r3
 8007872:	bd80      	pop	{r7, pc}
 8007874:	40023800 	.word	0x40023800
 8007878:	0800af34 	.word	0x0800af34

0800787c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007880:	f7ff ffdc 	bl	800783c <HAL_RCC_GetHCLKFreq>
 8007884:	4602      	mov	r2, r0
 8007886:	4b05      	ldr	r3, [pc, #20]	; (800789c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007888:	689b      	ldr	r3, [r3, #8]
 800788a:	0b5b      	lsrs	r3, r3, #13
 800788c:	f003 0307 	and.w	r3, r3, #7
 8007890:	4903      	ldr	r1, [pc, #12]	; (80078a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007892:	5ccb      	ldrb	r3, [r1, r3]
 8007894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007898:	4618      	mov	r0, r3
 800789a:	bd80      	pop	{r7, pc}
 800789c:	40023800 	.word	0x40023800
 80078a0:	0800af34 	.word	0x0800af34

080078a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80078ac:	2300      	movs	r3, #0
 80078ae:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80078b0:	2300      	movs	r3, #0
 80078b2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80078b8:	2300      	movs	r3, #0
 80078ba:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80078bc:	2300      	movs	r3, #0
 80078be:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f003 0301 	and.w	r3, r3, #1
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d012      	beq.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80078cc:	4b69      	ldr	r3, [pc, #420]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	4a68      	ldr	r2, [pc, #416]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078d2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80078d6:	6093      	str	r3, [r2, #8]
 80078d8:	4b66      	ldr	r3, [pc, #408]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078da:	689a      	ldr	r2, [r3, #8]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e0:	4964      	ldr	r1, [pc, #400]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80078ee:	2301      	movs	r3, #1
 80078f0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d017      	beq.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80078fe:	4b5d      	ldr	r3, [pc, #372]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007904:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800790c:	4959      	ldr	r1, [pc, #356]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800790e:	4313      	orrs	r3, r2
 8007910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007918:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800791c:	d101      	bne.n	8007922 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800791e:	2301      	movs	r3, #1
 8007920:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800792a:	2301      	movs	r3, #1
 800792c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007936:	2b00      	cmp	r3, #0
 8007938:	d017      	beq.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800793a:	4b4e      	ldr	r3, [pc, #312]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800793c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007940:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007948:	494a      	ldr	r1, [pc, #296]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800794a:	4313      	orrs	r3, r2
 800794c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007954:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007958:	d101      	bne.n	800795e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800795a:	2301      	movs	r3, #1
 800795c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007972:	2b00      	cmp	r3, #0
 8007974:	d001      	beq.n	800797a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007976:	2301      	movs	r3, #1
 8007978:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f003 0320 	and.w	r3, r3, #32
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 808b 	beq.w	8007a9e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007988:	4b3a      	ldr	r3, [pc, #232]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798c:	4a39      	ldr	r2, [pc, #228]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800798e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007992:	6413      	str	r3, [r2, #64]	; 0x40
 8007994:	4b37      	ldr	r3, [pc, #220]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007998:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800799c:	60bb      	str	r3, [r7, #8]
 800799e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80079a0:	4b35      	ldr	r3, [pc, #212]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a34      	ldr	r2, [pc, #208]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079ac:	f7fd fc16 	bl	80051dc <HAL_GetTick>
 80079b0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079b2:	e008      	b.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b4:	f7fd fc12 	bl	80051dc <HAL_GetTick>
 80079b8:	4602      	mov	r2, r0
 80079ba:	697b      	ldr	r3, [r7, #20]
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	2b64      	cmp	r3, #100	; 0x64
 80079c0:	d901      	bls.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e357      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80079c6:	4b2c      	ldr	r3, [pc, #176]	; (8007a78 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d0f0      	beq.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80079d2:	4b28      	ldr	r3, [pc, #160]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079da:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d035      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079ea:	693a      	ldr	r2, [r7, #16]
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d02e      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80079f0:	4b20      	ldr	r3, [pc, #128]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80079f8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80079fa:	4b1e      	ldr	r3, [pc, #120]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079fe:	4a1d      	ldr	r2, [pc, #116]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a04:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007a06:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a10:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007a12:	4a18      	ldr	r2, [pc, #96]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007a18:	4b16      	ldr	r3, [pc, #88]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d114      	bne.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7fd fbda 	bl	80051dc <HAL_GetTick>
 8007a28:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2a:	e00a      	b.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a2c:	f7fd fbd6 	bl	80051dc <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d901      	bls.n	8007a42 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007a3e:	2303      	movs	r3, #3
 8007a40:	e319      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a42:	4b0c      	ldr	r3, [pc, #48]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d0ee      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a5a:	d111      	bne.n	8007a80 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007a5c:	4b05      	ldr	r3, [pc, #20]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a68:	4b04      	ldr	r3, [pc, #16]	; (8007a7c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007a6a:	400b      	ands	r3, r1
 8007a6c:	4901      	ldr	r1, [pc, #4]	; (8007a74 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	608b      	str	r3, [r1, #8]
 8007a72:	e00b      	b.n	8007a8c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007a74:	40023800 	.word	0x40023800
 8007a78:	40007000 	.word	0x40007000
 8007a7c:	0ffffcff 	.word	0x0ffffcff
 8007a80:	4baa      	ldr	r3, [pc, #680]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	4aa9      	ldr	r2, [pc, #676]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a86:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007a8a:	6093      	str	r3, [r2, #8]
 8007a8c:	4ba7      	ldr	r3, [pc, #668]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a8e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007a98:	49a4      	ldr	r1, [pc, #656]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0310 	and.w	r3, r3, #16
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d010      	beq.n	8007acc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007aaa:	4ba0      	ldr	r3, [pc, #640]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007aac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ab0:	4a9e      	ldr	r2, [pc, #632]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ab2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ab6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007aba:	4b9c      	ldr	r3, [pc, #624]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007abc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	4999      	ldr	r1, [pc, #612]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ac6:	4313      	orrs	r3, r2
 8007ac8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00a      	beq.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ad8:	4b94      	ldr	r3, [pc, #592]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ade:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ae6:	4991      	ldr	r1, [pc, #580]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d00a      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007afa:	4b8c      	ldr	r3, [pc, #560]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b00:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b08:	4988      	ldr	r1, [pc, #544]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b0a:	4313      	orrs	r3, r2
 8007b0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007b1c:	4b83      	ldr	r3, [pc, #524]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b22:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b2a:	4980      	ldr	r1, [pc, #512]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007b3e:	4b7b      	ldr	r3, [pc, #492]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b44:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4c:	4977      	ldr	r1, [pc, #476]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b60:	4b72      	ldr	r3, [pc, #456]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b66:	f023 0203 	bic.w	r2, r3, #3
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b6e:	496f      	ldr	r1, [pc, #444]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b70:	4313      	orrs	r3, r2
 8007b72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b82:	4b6a      	ldr	r3, [pc, #424]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b88:	f023 020c 	bic.w	r2, r3, #12
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b90:	4966      	ldr	r1, [pc, #408]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007b92:	4313      	orrs	r3, r2
 8007b94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007ba4:	4b61      	ldr	r3, [pc, #388]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007baa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bb2:	495e      	ldr	r1, [pc, #376]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007bc6:	4b59      	ldr	r3, [pc, #356]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bcc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bd4:	4955      	ldr	r1, [pc, #340]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bd6:	4313      	orrs	r3, r2
 8007bd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007be8:	4b50      	ldr	r3, [pc, #320]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf6:	494d      	ldr	r1, [pc, #308]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007bf8:	4313      	orrs	r3, r2
 8007bfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d00a      	beq.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007c0a:	4b48      	ldr	r3, [pc, #288]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c18:	4944      	ldr	r1, [pc, #272]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d00a      	beq.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007c2c:	4b3f      	ldr	r3, [pc, #252]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c32:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3a:	493c      	ldr	r1, [pc, #240]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00a      	beq.n	8007c64 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007c4e:	4b37      	ldr	r3, [pc, #220]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c54:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	4933      	ldr	r1, [pc, #204]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c5e:	4313      	orrs	r3, r2
 8007c60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00a      	beq.n	8007c86 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007c70:	4b2e      	ldr	r3, [pc, #184]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c76:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007c7e:	492b      	ldr	r1, [pc, #172]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c80:	4313      	orrs	r3, r2
 8007c82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d011      	beq.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007c92:	4b26      	ldr	r3, [pc, #152]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c98:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ca0:	4922      	ldr	r1, [pc, #136]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cb0:	d101      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f003 0308 	and.w	r3, r3, #8
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d001      	beq.n	8007cc6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d00a      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007cd2:	4b16      	ldr	r3, [pc, #88]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cd8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ce0:	4912      	ldr	r1, [pc, #72]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d00b      	beq.n	8007d0c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007cf4:	4b0d      	ldr	r3, [pc, #52]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cfa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007d04:	4909      	ldr	r1, [pc, #36]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d06:	4313      	orrs	r3, r2
 8007d08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	2b01      	cmp	r3, #1
 8007d10:	d006      	beq.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 80d9 	beq.w	8007ed2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007d20:	4b02      	ldr	r3, [pc, #8]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a01      	ldr	r2, [pc, #4]	; (8007d2c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007d26:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d2a:	e001      	b.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007d2c:	40023800 	.word	0x40023800
 8007d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d32:	f7fd fa53 	bl	80051dc <HAL_GetTick>
 8007d36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d38:	e008      	b.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007d3a:	f7fd fa4f 	bl	80051dc <HAL_GetTick>
 8007d3e:	4602      	mov	r2, r0
 8007d40:	697b      	ldr	r3, [r7, #20]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b64      	cmp	r3, #100	; 0x64
 8007d46:	d901      	bls.n	8007d4c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007d48:	2303      	movs	r3, #3
 8007d4a:	e194      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007d4c:	4b6c      	ldr	r3, [pc, #432]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1f0      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d021      	beq.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d11d      	bne.n	8007da8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007d6c:	4b64      	ldr	r3, [pc, #400]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d72:	0c1b      	lsrs	r3, r3, #16
 8007d74:	f003 0303 	and.w	r3, r3, #3
 8007d78:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007d7a:	4b61      	ldr	r3, [pc, #388]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d80:	0e1b      	lsrs	r3, r3, #24
 8007d82:	f003 030f 	and.w	r3, r3, #15
 8007d86:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	019a      	lsls	r2, r3, #6
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	041b      	lsls	r3, r3, #16
 8007d92:	431a      	orrs	r2, r3
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	061b      	lsls	r3, r3, #24
 8007d98:	431a      	orrs	r2, r3
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	071b      	lsls	r3, r3, #28
 8007da0:	4957      	ldr	r1, [pc, #348]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007da2:	4313      	orrs	r3, r2
 8007da4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d004      	beq.n	8007dbe <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007db8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007dbc:	d00a      	beq.n	8007dd4 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d02e      	beq.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007dd2:	d129      	bne.n	8007e28 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007dd4:	4b4a      	ldr	r3, [pc, #296]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007dd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007dda:	0c1b      	lsrs	r3, r3, #16
 8007ddc:	f003 0303 	and.w	r3, r3, #3
 8007de0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007de2:	4b47      	ldr	r3, [pc, #284]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007de4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007de8:	0f1b      	lsrs	r3, r3, #28
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	019a      	lsls	r2, r3, #6
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	041b      	lsls	r3, r3, #16
 8007dfa:	431a      	orrs	r2, r3
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	68db      	ldr	r3, [r3, #12]
 8007e00:	061b      	lsls	r3, r3, #24
 8007e02:	431a      	orrs	r2, r3
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	071b      	lsls	r3, r3, #28
 8007e08:	493d      	ldr	r1, [pc, #244]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007e10:	4b3b      	ldr	r3, [pc, #236]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e16:	f023 021f 	bic.w	r2, r3, #31
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	4937      	ldr	r1, [pc, #220]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d01d      	beq.n	8007e70 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e34:	4b32      	ldr	r3, [pc, #200]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e3a:	0e1b      	lsrs	r3, r3, #24
 8007e3c:	f003 030f 	and.w	r3, r3, #15
 8007e40:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007e42:	4b2f      	ldr	r3, [pc, #188]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e48:	0f1b      	lsrs	r3, r3, #28
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	019a      	lsls	r2, r3, #6
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	041b      	lsls	r3, r3, #16
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	061b      	lsls	r3, r3, #24
 8007e62:	431a      	orrs	r2, r3
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	071b      	lsls	r3, r3, #28
 8007e68:	4925      	ldr	r1, [pc, #148]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e6a:	4313      	orrs	r3, r2
 8007e6c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d011      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	019a      	lsls	r2, r3, #6
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	691b      	ldr	r3, [r3, #16]
 8007e86:	041b      	lsls	r3, r3, #16
 8007e88:	431a      	orrs	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	68db      	ldr	r3, [r3, #12]
 8007e8e:	061b      	lsls	r3, r3, #24
 8007e90:	431a      	orrs	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	071b      	lsls	r3, r3, #28
 8007e98:	4919      	ldr	r1, [pc, #100]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ea0:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	4a16      	ldr	r2, [pc, #88]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ea6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007eaa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007eac:	f7fd f996 	bl	80051dc <HAL_GetTick>
 8007eb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007eb2:	e008      	b.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007eb4:	f7fd f992 	bl	80051dc <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b64      	cmp	r3, #100	; 0x64
 8007ec0:	d901      	bls.n	8007ec6 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ec2:	2303      	movs	r3, #3
 8007ec4:	e0d7      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ec6:	4b0e      	ldr	r3, [pc, #56]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d0f0      	beq.n	8007eb4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	f040 80cd 	bne.w	8008074 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007eda:	4b09      	ldr	r3, [pc, #36]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a08      	ldr	r2, [pc, #32]	; (8007f00 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ee4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ee6:	f7fd f979 	bl	80051dc <HAL_GetTick>
 8007eea:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007eec:	e00a      	b.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007eee:	f7fd f975 	bl	80051dc <HAL_GetTick>
 8007ef2:	4602      	mov	r2, r0
 8007ef4:	697b      	ldr	r3, [r7, #20]
 8007ef6:	1ad3      	subs	r3, r2, r3
 8007ef8:	2b64      	cmp	r3, #100	; 0x64
 8007efa:	d903      	bls.n	8007f04 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e0ba      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8007f00:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007f04:	4b5e      	ldr	r3, [pc, #376]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f10:	d0ed      	beq.n	8007eee <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d003      	beq.n	8007f26 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d009      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d02e      	beq.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d12a      	bne.n	8007f90 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007f3a:	4b51      	ldr	r3, [pc, #324]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f40:	0c1b      	lsrs	r3, r3, #16
 8007f42:	f003 0303 	and.w	r3, r3, #3
 8007f46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007f48:	4b4d      	ldr	r3, [pc, #308]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4e:	0f1b      	lsrs	r3, r3, #28
 8007f50:	f003 0307 	and.w	r3, r3, #7
 8007f54:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	019a      	lsls	r2, r3, #6
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	041b      	lsls	r3, r3, #16
 8007f60:	431a      	orrs	r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	699b      	ldr	r3, [r3, #24]
 8007f66:	061b      	lsls	r3, r3, #24
 8007f68:	431a      	orrs	r2, r3
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	071b      	lsls	r3, r3, #28
 8007f6e:	4944      	ldr	r1, [pc, #272]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f70:	4313      	orrs	r3, r2
 8007f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007f76:	4b42      	ldr	r3, [pc, #264]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f7c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f84:	3b01      	subs	r3, #1
 8007f86:	021b      	lsls	r3, r3, #8
 8007f88:	493d      	ldr	r1, [pc, #244]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d022      	beq.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007fa4:	d11d      	bne.n	8007fe2 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fa6:	4b36      	ldr	r3, [pc, #216]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fac:	0e1b      	lsrs	r3, r3, #24
 8007fae:	f003 030f 	and.w	r3, r3, #15
 8007fb2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007fb4:	4b32      	ldr	r3, [pc, #200]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fba:	0f1b      	lsrs	r3, r3, #28
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	695b      	ldr	r3, [r3, #20]
 8007fc6:	019a      	lsls	r2, r3, #6
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6a1b      	ldr	r3, [r3, #32]
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	061b      	lsls	r3, r3, #24
 8007fd4:	431a      	orrs	r2, r3
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	071b      	lsls	r3, r3, #28
 8007fda:	4929      	ldr	r1, [pc, #164]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	f003 0308 	and.w	r3, r3, #8
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d028      	beq.n	8008040 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007fee:	4b24      	ldr	r3, [pc, #144]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	0e1b      	lsrs	r3, r3, #24
 8007ff6:	f003 030f 	and.w	r3, r3, #15
 8007ffa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007ffc:	4b20      	ldr	r3, [pc, #128]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008002:	0c1b      	lsrs	r3, r3, #16
 8008004:	f003 0303 	and.w	r3, r3, #3
 8008008:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	019a      	lsls	r2, r3, #6
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	041b      	lsls	r3, r3, #16
 8008014:	431a      	orrs	r2, r3
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	061b      	lsls	r3, r3, #24
 800801a:	431a      	orrs	r2, r3
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	69db      	ldr	r3, [r3, #28]
 8008020:	071b      	lsls	r3, r3, #28
 8008022:	4917      	ldr	r1, [pc, #92]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008024:	4313      	orrs	r3, r2
 8008026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800802a:	4b15      	ldr	r3, [pc, #84]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800802c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008030:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	4911      	ldr	r1, [pc, #68]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800803a:	4313      	orrs	r3, r2
 800803c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008040:	4b0f      	ldr	r3, [pc, #60]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a0e      	ldr	r2, [pc, #56]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800804a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800804c:	f7fd f8c6 	bl	80051dc <HAL_GetTick>
 8008050:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008052:	e008      	b.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008054:	f7fd f8c2 	bl	80051dc <HAL_GetTick>
 8008058:	4602      	mov	r2, r0
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	1ad3      	subs	r3, r2, r3
 800805e:	2b64      	cmp	r3, #100	; 0x64
 8008060:	d901      	bls.n	8008066 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008062:	2303      	movs	r3, #3
 8008064:	e007      	b.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008066:	4b06      	ldr	r3, [pc, #24]	; (8008080 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800806e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008072:	d1ef      	bne.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8008074:	2300      	movs	r3, #0
}
 8008076:	4618      	mov	r0, r3
 8008078:	3720      	adds	r7, #32
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	40023800 	.word	0x40023800

08008084 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008084:	b580      	push	{r7, lr}
 8008086:	b082      	sub	sp, #8
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d101      	bne.n	8008096 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008092:	2301      	movs	r3, #1
 8008094:	e049      	b.n	800812a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800809c:	b2db      	uxtb	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d106      	bne.n	80080b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f7fc fc34 	bl	8004918 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681a      	ldr	r2, [r3, #0]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3304      	adds	r3, #4
 80080c0:	4619      	mov	r1, r3
 80080c2:	4610      	mov	r0, r2
 80080c4:	f000 fdac 	bl	8008c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	2201      	movs	r2, #1
 80080cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2201      	movs	r2, #1
 80080d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2201      	movs	r2, #1
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2201      	movs	r2, #1
 800811c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2201      	movs	r2, #1
 8008124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008128:	2300      	movs	r3, #0
}
 800812a:	4618      	mov	r0, r3
 800812c:	3708      	adds	r7, #8
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
	...

08008134 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008142:	b2db      	uxtb	r3, r3
 8008144:	2b01      	cmp	r3, #1
 8008146:	d001      	beq.n	800814c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008148:	2301      	movs	r3, #1
 800814a:	e054      	b.n	80081f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	68da      	ldr	r2, [r3, #12]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f042 0201 	orr.w	r2, r2, #1
 8008162:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a26      	ldr	r2, [pc, #152]	; (8008204 <HAL_TIM_Base_Start_IT+0xd0>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d022      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008176:	d01d      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a22      	ldr	r2, [pc, #136]	; (8008208 <HAL_TIM_Base_Start_IT+0xd4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d018      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a21      	ldr	r2, [pc, #132]	; (800820c <HAL_TIM_Base_Start_IT+0xd8>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d013      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a1f      	ldr	r2, [pc, #124]	; (8008210 <HAL_TIM_Base_Start_IT+0xdc>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d00e      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a1e      	ldr	r2, [pc, #120]	; (8008214 <HAL_TIM_Base_Start_IT+0xe0>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d009      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a1c      	ldr	r2, [pc, #112]	; (8008218 <HAL_TIM_Base_Start_IT+0xe4>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d004      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0x80>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a1b      	ldr	r2, [pc, #108]	; (800821c <HAL_TIM_Base_Start_IT+0xe8>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d115      	bne.n	80081e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689a      	ldr	r2, [r3, #8]
 80081ba:	4b19      	ldr	r3, [pc, #100]	; (8008220 <HAL_TIM_Base_Start_IT+0xec>)
 80081bc:	4013      	ands	r3, r2
 80081be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2b06      	cmp	r3, #6
 80081c4:	d015      	beq.n	80081f2 <HAL_TIM_Base_Start_IT+0xbe>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081cc:	d011      	beq.n	80081f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	681a      	ldr	r2, [r3, #0]
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f042 0201 	orr.w	r2, r2, #1
 80081dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081de:	e008      	b.n	80081f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f042 0201 	orr.w	r2, r2, #1
 80081ee:	601a      	str	r2, [r3, #0]
 80081f0:	e000      	b.n	80081f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081f4:	2300      	movs	r3, #0
}
 80081f6:	4618      	mov	r0, r3
 80081f8:	3714      	adds	r7, #20
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40010000 	.word	0x40010000
 8008208:	40000400 	.word	0x40000400
 800820c:	40000800 	.word	0x40000800
 8008210:	40000c00 	.word	0x40000c00
 8008214:	40010400 	.word	0x40010400
 8008218:	40014000 	.word	0x40014000
 800821c:	40001800 	.word	0x40001800
 8008220:	00010007 	.word	0x00010007

08008224 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	68da      	ldr	r2, [r3, #12]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f022 0201 	bic.w	r2, r2, #1
 800823a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6a1a      	ldr	r2, [r3, #32]
 8008242:	f241 1311 	movw	r3, #4369	; 0x1111
 8008246:	4013      	ands	r3, r2
 8008248:	2b00      	cmp	r3, #0
 800824a:	d10f      	bne.n	800826c <HAL_TIM_Base_Stop_IT+0x48>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	6a1a      	ldr	r2, [r3, #32]
 8008252:	f240 4344 	movw	r3, #1092	; 0x444
 8008256:	4013      	ands	r3, r2
 8008258:	2b00      	cmp	r3, #0
 800825a:	d107      	bne.n	800826c <HAL_TIM_Base_Stop_IT+0x48>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f022 0201 	bic.w	r2, r2, #1
 800826a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	370c      	adds	r7, #12
 800827a:	46bd      	mov	sp, r7
 800827c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008280:	4770      	bx	lr

08008282 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008282:	b580      	push	{r7, lr}
 8008284:	b082      	sub	sp, #8
 8008286:	af00      	add	r7, sp, #0
 8008288:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d101      	bne.n	8008294 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e049      	b.n	8008328 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800829a:	b2db      	uxtb	r3, r3
 800829c:	2b00      	cmp	r3, #0
 800829e:	d106      	bne.n	80082ae <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 f841 	bl	8008330 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2202      	movs	r2, #2
 80082b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	3304      	adds	r3, #4
 80082be:	4619      	mov	r1, r3
 80082c0:	4610      	mov	r0, r2
 80082c2:	f000 fcad 	bl	8008c20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	2201      	movs	r2, #1
 80082ca:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2201      	movs	r2, #1
 80082ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2201      	movs	r2, #1
 80082f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2201      	movs	r2, #1
 8008302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2201      	movs	r2, #1
 800830a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2201      	movs	r2, #1
 8008312:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008326:	2300      	movs	r3, #0
}
 8008328:	4618      	mov	r0, r3
 800832a:	3708      	adds	r7, #8
 800832c:	46bd      	mov	sp, r7
 800832e:	bd80      	pop	{r7, pc}

08008330 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008344:	b580      	push	{r7, lr}
 8008346:	b084      	sub	sp, #16
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800834e:	2300      	movs	r3, #0
 8008350:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d109      	bne.n	800836c <HAL_TIM_PWM_Start_IT+0x28>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800835e:	b2db      	uxtb	r3, r3
 8008360:	2b01      	cmp	r3, #1
 8008362:	bf14      	ite	ne
 8008364:	2301      	movne	r3, #1
 8008366:	2300      	moveq	r3, #0
 8008368:	b2db      	uxtb	r3, r3
 800836a:	e03c      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0xa2>
 800836c:	683b      	ldr	r3, [r7, #0]
 800836e:	2b04      	cmp	r3, #4
 8008370:	d109      	bne.n	8008386 <HAL_TIM_PWM_Start_IT+0x42>
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008378:	b2db      	uxtb	r3, r3
 800837a:	2b01      	cmp	r3, #1
 800837c:	bf14      	ite	ne
 800837e:	2301      	movne	r3, #1
 8008380:	2300      	moveq	r3, #0
 8008382:	b2db      	uxtb	r3, r3
 8008384:	e02f      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0xa2>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	2b08      	cmp	r3, #8
 800838a:	d109      	bne.n	80083a0 <HAL_TIM_PWM_Start_IT+0x5c>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b01      	cmp	r3, #1
 8008396:	bf14      	ite	ne
 8008398:	2301      	movne	r3, #1
 800839a:	2300      	moveq	r3, #0
 800839c:	b2db      	uxtb	r3, r3
 800839e:	e022      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2b0c      	cmp	r3, #12
 80083a4:	d109      	bne.n	80083ba <HAL_TIM_PWM_Start_IT+0x76>
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b01      	cmp	r3, #1
 80083b0:	bf14      	ite	ne
 80083b2:	2301      	movne	r3, #1
 80083b4:	2300      	moveq	r3, #0
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	e015      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80083ba:	683b      	ldr	r3, [r7, #0]
 80083bc:	2b10      	cmp	r3, #16
 80083be:	d109      	bne.n	80083d4 <HAL_TIM_PWM_Start_IT+0x90>
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	bf14      	ite	ne
 80083cc:	2301      	movne	r3, #1
 80083ce:	2300      	moveq	r3, #0
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	e008      	b.n	80083e6 <HAL_TIM_PWM_Start_IT+0xa2>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d001      	beq.n	80083ee <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80083ea:	2301      	movs	r3, #1
 80083ec:	e0dd      	b.n	80085aa <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d104      	bne.n	80083fe <HAL_TIM_PWM_Start_IT+0xba>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2202      	movs	r2, #2
 80083f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083fc:	e023      	b.n	8008446 <HAL_TIM_PWM_Start_IT+0x102>
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	2b04      	cmp	r3, #4
 8008402:	d104      	bne.n	800840e <HAL_TIM_PWM_Start_IT+0xca>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2202      	movs	r2, #2
 8008408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800840c:	e01b      	b.n	8008446 <HAL_TIM_PWM_Start_IT+0x102>
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	2b08      	cmp	r3, #8
 8008412:	d104      	bne.n	800841e <HAL_TIM_PWM_Start_IT+0xda>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2202      	movs	r2, #2
 8008418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800841c:	e013      	b.n	8008446 <HAL_TIM_PWM_Start_IT+0x102>
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	2b0c      	cmp	r3, #12
 8008422:	d104      	bne.n	800842e <HAL_TIM_PWM_Start_IT+0xea>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800842c:	e00b      	b.n	8008446 <HAL_TIM_PWM_Start_IT+0x102>
 800842e:	683b      	ldr	r3, [r7, #0]
 8008430:	2b10      	cmp	r3, #16
 8008432:	d104      	bne.n	800843e <HAL_TIM_PWM_Start_IT+0xfa>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	2202      	movs	r2, #2
 8008438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800843c:	e003      	b.n	8008446 <HAL_TIM_PWM_Start_IT+0x102>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2202      	movs	r2, #2
 8008442:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b0c      	cmp	r3, #12
 800844a:	d841      	bhi.n	80084d0 <HAL_TIM_PWM_Start_IT+0x18c>
 800844c:	a201      	add	r2, pc, #4	; (adr r2, 8008454 <HAL_TIM_PWM_Start_IT+0x110>)
 800844e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008452:	bf00      	nop
 8008454:	08008489 	.word	0x08008489
 8008458:	080084d1 	.word	0x080084d1
 800845c:	080084d1 	.word	0x080084d1
 8008460:	080084d1 	.word	0x080084d1
 8008464:	0800849b 	.word	0x0800849b
 8008468:	080084d1 	.word	0x080084d1
 800846c:	080084d1 	.word	0x080084d1
 8008470:	080084d1 	.word	0x080084d1
 8008474:	080084ad 	.word	0x080084ad
 8008478:	080084d1 	.word	0x080084d1
 800847c:	080084d1 	.word	0x080084d1
 8008480:	080084d1 	.word	0x080084d1
 8008484:	080084bf 	.word	0x080084bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	68da      	ldr	r2, [r3, #12]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	f042 0202 	orr.w	r2, r2, #2
 8008496:	60da      	str	r2, [r3, #12]
      break;
 8008498:	e01d      	b.n	80084d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f042 0204 	orr.w	r2, r2, #4
 80084a8:	60da      	str	r2, [r3, #12]
      break;
 80084aa:	e014      	b.n	80084d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	68da      	ldr	r2, [r3, #12]
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f042 0208 	orr.w	r2, r2, #8
 80084ba:	60da      	str	r2, [r3, #12]
      break;
 80084bc:	e00b      	b.n	80084d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	68da      	ldr	r2, [r3, #12]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f042 0210 	orr.w	r2, r2, #16
 80084cc:	60da      	str	r2, [r3, #12]
      break;
 80084ce:	e002      	b.n	80084d6 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80084d0:	2301      	movs	r3, #1
 80084d2:	73fb      	strb	r3, [r7, #15]
      break;
 80084d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80084d6:	7bfb      	ldrb	r3, [r7, #15]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d165      	bne.n	80085a8 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2201      	movs	r2, #1
 80084e2:	6839      	ldr	r1, [r7, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f000 ff33 	bl	8009350 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	4a31      	ldr	r2, [pc, #196]	; (80085b4 <HAL_TIM_PWM_Start_IT+0x270>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d004      	beq.n	80084fe <HAL_TIM_PWM_Start_IT+0x1ba>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	4a2f      	ldr	r2, [pc, #188]	; (80085b8 <HAL_TIM_PWM_Start_IT+0x274>)
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d101      	bne.n	8008502 <HAL_TIM_PWM_Start_IT+0x1be>
 80084fe:	2301      	movs	r3, #1
 8008500:	e000      	b.n	8008504 <HAL_TIM_PWM_Start_IT+0x1c0>
 8008502:	2300      	movs	r3, #0
 8008504:	2b00      	cmp	r3, #0
 8008506:	d007      	beq.n	8008518 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008516:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a25      	ldr	r2, [pc, #148]	; (80085b4 <HAL_TIM_PWM_Start_IT+0x270>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d022      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800852a:	d01d      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a22      	ldr	r2, [pc, #136]	; (80085bc <HAL_TIM_PWM_Start_IT+0x278>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d018      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a21      	ldr	r2, [pc, #132]	; (80085c0 <HAL_TIM_PWM_Start_IT+0x27c>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a1f      	ldr	r2, [pc, #124]	; (80085c4 <HAL_TIM_PWM_Start_IT+0x280>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00e      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a1a      	ldr	r2, [pc, #104]	; (80085b8 <HAL_TIM_PWM_Start_IT+0x274>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d009      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a1b      	ldr	r2, [pc, #108]	; (80085c8 <HAL_TIM_PWM_Start_IT+0x284>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <HAL_TIM_PWM_Start_IT+0x224>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a1a      	ldr	r2, [pc, #104]	; (80085cc <HAL_TIM_PWM_Start_IT+0x288>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d115      	bne.n	8008594 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	689a      	ldr	r2, [r3, #8]
 800856e:	4b18      	ldr	r3, [pc, #96]	; (80085d0 <HAL_TIM_PWM_Start_IT+0x28c>)
 8008570:	4013      	ands	r3, r2
 8008572:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008574:	68bb      	ldr	r3, [r7, #8]
 8008576:	2b06      	cmp	r3, #6
 8008578:	d015      	beq.n	80085a6 <HAL_TIM_PWM_Start_IT+0x262>
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008580:	d011      	beq.n	80085a6 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681a      	ldr	r2, [r3, #0]
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f042 0201 	orr.w	r2, r2, #1
 8008590:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008592:	e008      	b.n	80085a6 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681a      	ldr	r2, [r3, #0]
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f042 0201 	orr.w	r2, r2, #1
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	e000      	b.n	80085a8 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80085a6:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80085a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80085aa:	4618      	mov	r0, r3
 80085ac:	3710      	adds	r7, #16
 80085ae:	46bd      	mov	sp, r7
 80085b0:	bd80      	pop	{r7, pc}
 80085b2:	bf00      	nop
 80085b4:	40010000 	.word	0x40010000
 80085b8:	40010400 	.word	0x40010400
 80085bc:	40000400 	.word	0x40000400
 80085c0:	40000800 	.word	0x40000800
 80085c4:	40000c00 	.word	0x40000c00
 80085c8:	40014000 	.word	0x40014000
 80085cc:	40001800 	.word	0x40001800
 80085d0:	00010007 	.word	0x00010007

080085d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	f003 0302 	and.w	r3, r3, #2
 80085e6:	2b02      	cmp	r3, #2
 80085e8:	d122      	bne.n	8008630 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	f003 0302 	and.w	r3, r3, #2
 80085f4:	2b02      	cmp	r3, #2
 80085f6:	d11b      	bne.n	8008630 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f06f 0202 	mvn.w	r2, #2
 8008600:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	699b      	ldr	r3, [r3, #24]
 800860e:	f003 0303 	and.w	r3, r3, #3
 8008612:	2b00      	cmp	r3, #0
 8008614:	d003      	beq.n	800861e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fae4 	bl	8008be4 <HAL_TIM_IC_CaptureCallback>
 800861c:	e005      	b.n	800862a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fad6 	bl	8008bd0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f000 fae7 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2200      	movs	r2, #0
 800862e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	691b      	ldr	r3, [r3, #16]
 8008636:	f003 0304 	and.w	r3, r3, #4
 800863a:	2b04      	cmp	r3, #4
 800863c:	d122      	bne.n	8008684 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68db      	ldr	r3, [r3, #12]
 8008644:	f003 0304 	and.w	r3, r3, #4
 8008648:	2b04      	cmp	r3, #4
 800864a:	d11b      	bne.n	8008684 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f06f 0204 	mvn.w	r2, #4
 8008654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2202      	movs	r2, #2
 800865a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008666:	2b00      	cmp	r3, #0
 8008668:	d003      	beq.n	8008672 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 faba 	bl	8008be4 <HAL_TIM_IC_CaptureCallback>
 8008670:	e005      	b.n	800867e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 faac 	bl	8008bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008678:	6878      	ldr	r0, [r7, #4]
 800867a:	f000 fabd 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2200      	movs	r2, #0
 8008682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	f003 0308 	and.w	r3, r3, #8
 800868e:	2b08      	cmp	r3, #8
 8008690:	d122      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	68db      	ldr	r3, [r3, #12]
 8008698:	f003 0308 	and.w	r3, r3, #8
 800869c:	2b08      	cmp	r3, #8
 800869e:	d11b      	bne.n	80086d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f06f 0208 	mvn.w	r2, #8
 80086a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2204      	movs	r2, #4
 80086ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	69db      	ldr	r3, [r3, #28]
 80086b6:	f003 0303 	and.w	r3, r3, #3
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d003      	beq.n	80086c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fa90 	bl	8008be4 <HAL_TIM_IC_CaptureCallback>
 80086c4:	e005      	b.n	80086d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fa82 	bl	8008bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086cc:	6878      	ldr	r0, [r7, #4]
 80086ce:	f000 fa93 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	691b      	ldr	r3, [r3, #16]
 80086de:	f003 0310 	and.w	r3, r3, #16
 80086e2:	2b10      	cmp	r3, #16
 80086e4:	d122      	bne.n	800872c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	68db      	ldr	r3, [r3, #12]
 80086ec:	f003 0310 	and.w	r3, r3, #16
 80086f0:	2b10      	cmp	r3, #16
 80086f2:	d11b      	bne.n	800872c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f06f 0210 	mvn.w	r2, #16
 80086fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2208      	movs	r2, #8
 8008702:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800870e:	2b00      	cmp	r3, #0
 8008710:	d003      	beq.n	800871a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008712:	6878      	ldr	r0, [r7, #4]
 8008714:	f000 fa66 	bl	8008be4 <HAL_TIM_IC_CaptureCallback>
 8008718:	e005      	b.n	8008726 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 fa58 	bl	8008bd0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fa69 	bl	8008bf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	691b      	ldr	r3, [r3, #16]
 8008732:	f003 0301 	and.w	r3, r3, #1
 8008736:	2b01      	cmp	r3, #1
 8008738:	d10e      	bne.n	8008758 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	f003 0301 	and.w	r3, r3, #1
 8008744:	2b01      	cmp	r3, #1
 8008746:	d107      	bne.n	8008758 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f06f 0201 	mvn.w	r2, #1
 8008750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f7f9 f986 	bl	8001a64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	691b      	ldr	r3, [r3, #16]
 800875e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008762:	2b80      	cmp	r3, #128	; 0x80
 8008764:	d10e      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008770:	2b80      	cmp	r3, #128	; 0x80
 8008772:	d107      	bne.n	8008784 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800877c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800877e:	6878      	ldr	r0, [r7, #4]
 8008780:	f000 fea4 	bl	80094cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	691b      	ldr	r3, [r3, #16]
 800878a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800878e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008792:	d10e      	bne.n	80087b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	68db      	ldr	r3, [r3, #12]
 800879a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800879e:	2b80      	cmp	r3, #128	; 0x80
 80087a0:	d107      	bne.n	80087b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80087aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 fe97 	bl	80094e0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	691b      	ldr	r3, [r3, #16]
 80087b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087bc:	2b40      	cmp	r3, #64	; 0x40
 80087be:	d10e      	bne.n	80087de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	68db      	ldr	r3, [r3, #12]
 80087c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087ca:	2b40      	cmp	r3, #64	; 0x40
 80087cc:	d107      	bne.n	80087de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f000 fa17 	bl	8008c0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	691b      	ldr	r3, [r3, #16]
 80087e4:	f003 0320 	and.w	r3, r3, #32
 80087e8:	2b20      	cmp	r3, #32
 80087ea:	d10e      	bne.n	800880a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	f003 0320 	and.w	r3, r3, #32
 80087f6:	2b20      	cmp	r3, #32
 80087f8:	d107      	bne.n	800880a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f06f 0220 	mvn.w	r2, #32
 8008802:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008804:	6878      	ldr	r0, [r7, #4]
 8008806:	f000 fe57 	bl	80094b8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800880a:	bf00      	nop
 800880c:	3708      	adds	r7, #8
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
	...

08008814 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008820:	2300      	movs	r3, #0
 8008822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800882a:	2b01      	cmp	r3, #1
 800882c:	d101      	bne.n	8008832 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800882e:	2302      	movs	r3, #2
 8008830:	e0ff      	b.n	8008a32 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2b14      	cmp	r3, #20
 800883e:	f200 80f0 	bhi.w	8008a22 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008842:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008848:	0800889d 	.word	0x0800889d
 800884c:	08008a23 	.word	0x08008a23
 8008850:	08008a23 	.word	0x08008a23
 8008854:	08008a23 	.word	0x08008a23
 8008858:	080088dd 	.word	0x080088dd
 800885c:	08008a23 	.word	0x08008a23
 8008860:	08008a23 	.word	0x08008a23
 8008864:	08008a23 	.word	0x08008a23
 8008868:	0800891f 	.word	0x0800891f
 800886c:	08008a23 	.word	0x08008a23
 8008870:	08008a23 	.word	0x08008a23
 8008874:	08008a23 	.word	0x08008a23
 8008878:	0800895f 	.word	0x0800895f
 800887c:	08008a23 	.word	0x08008a23
 8008880:	08008a23 	.word	0x08008a23
 8008884:	08008a23 	.word	0x08008a23
 8008888:	080089a1 	.word	0x080089a1
 800888c:	08008a23 	.word	0x08008a23
 8008890:	08008a23 	.word	0x08008a23
 8008894:	08008a23 	.word	0x08008a23
 8008898:	080089e1 	.word	0x080089e1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	68b9      	ldr	r1, [r7, #8]
 80088a2:	4618      	mov	r0, r3
 80088a4:	f000 fa5c 	bl	8008d60 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	699a      	ldr	r2, [r3, #24]
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f042 0208 	orr.w	r2, r2, #8
 80088b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	699a      	ldr	r2, [r3, #24]
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0204 	bic.w	r2, r2, #4
 80088c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	6999      	ldr	r1, [r3, #24]
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	691a      	ldr	r2, [r3, #16]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	430a      	orrs	r2, r1
 80088d8:	619a      	str	r2, [r3, #24]
      break;
 80088da:	e0a5      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68b9      	ldr	r1, [r7, #8]
 80088e2:	4618      	mov	r0, r3
 80088e4:	f000 faae 	bl	8008e44 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	699a      	ldr	r2, [r3, #24]
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699a      	ldr	r2, [r3, #24]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008906:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6999      	ldr	r1, [r3, #24]
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	021a      	lsls	r2, r3, #8
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	430a      	orrs	r2, r1
 800891a:	619a      	str	r2, [r3, #24]
      break;
 800891c:	e084      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	68b9      	ldr	r1, [r7, #8]
 8008924:	4618      	mov	r0, r3
 8008926:	f000 fb05 	bl	8008f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	69da      	ldr	r2, [r3, #28]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	f042 0208 	orr.w	r2, r2, #8
 8008938:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	69da      	ldr	r2, [r3, #28]
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f022 0204 	bic.w	r2, r2, #4
 8008948:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	69d9      	ldr	r1, [r3, #28]
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	691a      	ldr	r2, [r3, #16]
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	430a      	orrs	r2, r1
 800895a:	61da      	str	r2, [r3, #28]
      break;
 800895c:	e064      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68b9      	ldr	r1, [r7, #8]
 8008964:	4618      	mov	r0, r3
 8008966:	f000 fb5b 	bl	8009020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	69da      	ldr	r2, [r3, #28]
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008978:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	69da      	ldr	r2, [r3, #28]
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008988:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	69d9      	ldr	r1, [r3, #28]
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	691b      	ldr	r3, [r3, #16]
 8008994:	021a      	lsls	r2, r3, #8
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	430a      	orrs	r2, r1
 800899c:	61da      	str	r2, [r3, #28]
      break;
 800899e:	e043      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	68b9      	ldr	r1, [r7, #8]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 fb92 	bl	80090d0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f042 0208 	orr.w	r2, r2, #8
 80089ba:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f022 0204 	bic.w	r2, r2, #4
 80089ca:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	691a      	ldr	r2, [r3, #16]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	430a      	orrs	r2, r1
 80089dc:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089de:	e023      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	68b9      	ldr	r1, [r7, #8]
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fbc4 	bl	8009174 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089fa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a0a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	691b      	ldr	r3, [r3, #16]
 8008a16:	021a      	lsls	r2, r3, #8
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	430a      	orrs	r2, r1
 8008a1e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a20:	e002      	b.n	8008a28 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a22:	2301      	movs	r3, #1
 8008a24:	75fb      	strb	r3, [r7, #23]
      break;
 8008a26:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a30:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop

08008a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a3c:	b580      	push	{r7, lr}
 8008a3e:	b084      	sub	sp, #16
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
 8008a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a46:	2300      	movs	r3, #0
 8008a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d101      	bne.n	8008a58 <HAL_TIM_ConfigClockSource+0x1c>
 8008a54:	2302      	movs	r3, #2
 8008a56:	e0b4      	b.n	8008bc2 <HAL_TIM_ConfigClockSource+0x186>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	2202      	movs	r2, #2
 8008a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	689b      	ldr	r3, [r3, #8]
 8008a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a70:	68ba      	ldr	r2, [r7, #8]
 8008a72:	4b56      	ldr	r3, [pc, #344]	; (8008bcc <HAL_TIM_ConfigClockSource+0x190>)
 8008a74:	4013      	ands	r3, r2
 8008a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a90:	d03e      	beq.n	8008b10 <HAL_TIM_ConfigClockSource+0xd4>
 8008a92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008a96:	f200 8087 	bhi.w	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9e:	f000 8086 	beq.w	8008bae <HAL_TIM_ConfigClockSource+0x172>
 8008aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008aa6:	d87f      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008aa8:	2b70      	cmp	r3, #112	; 0x70
 8008aaa:	d01a      	beq.n	8008ae2 <HAL_TIM_ConfigClockSource+0xa6>
 8008aac:	2b70      	cmp	r3, #112	; 0x70
 8008aae:	d87b      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab0:	2b60      	cmp	r3, #96	; 0x60
 8008ab2:	d050      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0x11a>
 8008ab4:	2b60      	cmp	r3, #96	; 0x60
 8008ab6:	d877      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ab8:	2b50      	cmp	r3, #80	; 0x50
 8008aba:	d03c      	beq.n	8008b36 <HAL_TIM_ConfigClockSource+0xfa>
 8008abc:	2b50      	cmp	r3, #80	; 0x50
 8008abe:	d873      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac0:	2b40      	cmp	r3, #64	; 0x40
 8008ac2:	d058      	beq.n	8008b76 <HAL_TIM_ConfigClockSource+0x13a>
 8008ac4:	2b40      	cmp	r3, #64	; 0x40
 8008ac6:	d86f      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ac8:	2b30      	cmp	r3, #48	; 0x30
 8008aca:	d064      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0x15a>
 8008acc:	2b30      	cmp	r3, #48	; 0x30
 8008ace:	d86b      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad0:	2b20      	cmp	r3, #32
 8008ad2:	d060      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ad4:	2b20      	cmp	r3, #32
 8008ad6:	d867      	bhi.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d05c      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0x15a>
 8008adc:	2b10      	cmp	r3, #16
 8008ade:	d05a      	beq.n	8008b96 <HAL_TIM_ConfigClockSource+0x15a>
 8008ae0:	e062      	b.n	8008ba8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6818      	ldr	r0, [r3, #0]
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	6899      	ldr	r1, [r3, #8]
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	68db      	ldr	r3, [r3, #12]
 8008af2:	f000 fc0d 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008afe:	68bb      	ldr	r3, [r7, #8]
 8008b00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	68ba      	ldr	r2, [r7, #8]
 8008b0c:	609a      	str	r2, [r3, #8]
      break;
 8008b0e:	e04f      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6818      	ldr	r0, [r3, #0]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	6899      	ldr	r1, [r3, #8]
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	68db      	ldr	r3, [r3, #12]
 8008b20:	f000 fbf6 	bl	8009310 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	689a      	ldr	r2, [r3, #8]
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b32:	609a      	str	r2, [r3, #8]
      break;
 8008b34:	e03c      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	6859      	ldr	r1, [r3, #4]
 8008b3e:	683b      	ldr	r3, [r7, #0]
 8008b40:	68db      	ldr	r3, [r3, #12]
 8008b42:	461a      	mov	r2, r3
 8008b44:	f000 fb6a 	bl	800921c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	2150      	movs	r1, #80	; 0x50
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f000 fbc3 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008b54:	e02c      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6859      	ldr	r1, [r3, #4]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	461a      	mov	r2, r3
 8008b64:	f000 fb89 	bl	800927a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	2160      	movs	r1, #96	; 0x60
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fbb3 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008b74:	e01c      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6818      	ldr	r0, [r3, #0]
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	6859      	ldr	r1, [r3, #4]
 8008b7e:	683b      	ldr	r3, [r7, #0]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	461a      	mov	r2, r3
 8008b84:	f000 fb4a 	bl	800921c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	2140      	movs	r1, #64	; 0x40
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f000 fba3 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008b94:	e00c      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4619      	mov	r1, r3
 8008ba0:	4610      	mov	r0, r2
 8008ba2:	f000 fb9a 	bl	80092da <TIM_ITRx_SetConfig>
      break;
 8008ba6:	e003      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	73fb      	strb	r3, [r7, #15]
      break;
 8008bac:	e000      	b.n	8008bb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008bae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}
 8008bca:	bf00      	nop
 8008bcc:	fffeff88 	.word	0xfffeff88

08008bd0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bd8:	bf00      	nop
 8008bda:	370c      	adds	r7, #12
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b083      	sub	sp, #12
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bec:	bf00      	nop
 8008bee:	370c      	adds	r7, #12
 8008bf0:	46bd      	mov	sp, r7
 8008bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf6:	4770      	bx	lr

08008bf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008bf8:	b480      	push	{r7}
 8008bfa:	b083      	sub	sp, #12
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c00:	bf00      	nop
 8008c02:	370c      	adds	r7, #12
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr

08008c0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	b083      	sub	sp, #12
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c14:	bf00      	nop
 8008c16:	370c      	adds	r7, #12
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr

08008c20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]
 8008c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a40      	ldr	r2, [pc, #256]	; (8008d34 <TIM_Base_SetConfig+0x114>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d013      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c3e:	d00f      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	4a3d      	ldr	r2, [pc, #244]	; (8008d38 <TIM_Base_SetConfig+0x118>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d00b      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	4a3c      	ldr	r2, [pc, #240]	; (8008d3c <TIM_Base_SetConfig+0x11c>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d007      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	4a3b      	ldr	r2, [pc, #236]	; (8008d40 <TIM_Base_SetConfig+0x120>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d003      	beq.n	8008c60 <TIM_Base_SetConfig+0x40>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	4a3a      	ldr	r2, [pc, #232]	; (8008d44 <TIM_Base_SetConfig+0x124>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d108      	bne.n	8008c72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	685b      	ldr	r3, [r3, #4]
 8008c6c:	68fa      	ldr	r2, [r7, #12]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a2f      	ldr	r2, [pc, #188]	; (8008d34 <TIM_Base_SetConfig+0x114>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d02b      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c80:	d027      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	4a2c      	ldr	r2, [pc, #176]	; (8008d38 <TIM_Base_SetConfig+0x118>)
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d023      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	4a2b      	ldr	r2, [pc, #172]	; (8008d3c <TIM_Base_SetConfig+0x11c>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d01f      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	4a2a      	ldr	r2, [pc, #168]	; (8008d40 <TIM_Base_SetConfig+0x120>)
 8008c96:	4293      	cmp	r3, r2
 8008c98:	d01b      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	4a29      	ldr	r2, [pc, #164]	; (8008d44 <TIM_Base_SetConfig+0x124>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d017      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	4a28      	ldr	r2, [pc, #160]	; (8008d48 <TIM_Base_SetConfig+0x128>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d013      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	4a27      	ldr	r2, [pc, #156]	; (8008d4c <TIM_Base_SetConfig+0x12c>)
 8008cae:	4293      	cmp	r3, r2
 8008cb0:	d00f      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	4a26      	ldr	r2, [pc, #152]	; (8008d50 <TIM_Base_SetConfig+0x130>)
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d00b      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	4a25      	ldr	r2, [pc, #148]	; (8008d54 <TIM_Base_SetConfig+0x134>)
 8008cbe:	4293      	cmp	r3, r2
 8008cc0:	d007      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	4a24      	ldr	r2, [pc, #144]	; (8008d58 <TIM_Base_SetConfig+0x138>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d003      	beq.n	8008cd2 <TIM_Base_SetConfig+0xb2>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	4a23      	ldr	r2, [pc, #140]	; (8008d5c <TIM_Base_SetConfig+0x13c>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d108      	bne.n	8008ce4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cda:	683b      	ldr	r3, [r7, #0]
 8008cdc:	68db      	ldr	r3, [r3, #12]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	4313      	orrs	r3, r2
 8008ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	4313      	orrs	r3, r2
 8008cf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689a      	ldr	r2, [r3, #8]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	681a      	ldr	r2, [r3, #0]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	4a0a      	ldr	r2, [pc, #40]	; (8008d34 <TIM_Base_SetConfig+0x114>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d003      	beq.n	8008d18 <TIM_Base_SetConfig+0xf8>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	4a0c      	ldr	r2, [pc, #48]	; (8008d44 <TIM_Base_SetConfig+0x124>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d103      	bne.n	8008d20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	691a      	ldr	r2, [r3, #16]
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2201      	movs	r2, #1
 8008d24:	615a      	str	r2, [r3, #20]
}
 8008d26:	bf00      	nop
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
 8008d32:	bf00      	nop
 8008d34:	40010000 	.word	0x40010000
 8008d38:	40000400 	.word	0x40000400
 8008d3c:	40000800 	.word	0x40000800
 8008d40:	40000c00 	.word	0x40000c00
 8008d44:	40010400 	.word	0x40010400
 8008d48:	40014000 	.word	0x40014000
 8008d4c:	40014400 	.word	0x40014400
 8008d50:	40014800 	.word	0x40014800
 8008d54:	40001800 	.word	0x40001800
 8008d58:	40001c00 	.word	0x40001c00
 8008d5c:	40002000 	.word	0x40002000

08008d60 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b087      	sub	sp, #28
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	6a1b      	ldr	r3, [r3, #32]
 8008d6e:	f023 0201 	bic.w	r2, r3, #1
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
 8008d7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	685b      	ldr	r3, [r3, #4]
 8008d80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	699b      	ldr	r3, [r3, #24]
 8008d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d88:	68fa      	ldr	r2, [r7, #12]
 8008d8a:	4b2b      	ldr	r3, [pc, #172]	; (8008e38 <TIM_OC1_SetConfig+0xd8>)
 8008d8c:	4013      	ands	r3, r2
 8008d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f023 0303 	bic.w	r3, r3, #3
 8008d96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68fa      	ldr	r2, [r7, #12]
 8008d9e:	4313      	orrs	r3, r2
 8008da0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f023 0302 	bic.w	r3, r3, #2
 8008da8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4a21      	ldr	r2, [pc, #132]	; (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008db8:	4293      	cmp	r3, r2
 8008dba:	d003      	beq.n	8008dc4 <TIM_OC1_SetConfig+0x64>
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <TIM_OC1_SetConfig+0xe0>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d10c      	bne.n	8008dde <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f023 0308 	bic.w	r3, r3, #8
 8008dca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	f023 0304 	bic.w	r3, r3, #4
 8008ddc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a16      	ldr	r2, [pc, #88]	; (8008e3c <TIM_OC1_SetConfig+0xdc>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d003      	beq.n	8008dee <TIM_OC1_SetConfig+0x8e>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	4a15      	ldr	r2, [pc, #84]	; (8008e40 <TIM_OC1_SetConfig+0xe0>)
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d111      	bne.n	8008e12 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008df4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008dfc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	695b      	ldr	r3, [r3, #20]
 8008e02:	693a      	ldr	r2, [r7, #16]
 8008e04:	4313      	orrs	r3, r2
 8008e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	693a      	ldr	r2, [r7, #16]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	693a      	ldr	r2, [r7, #16]
 8008e16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	685a      	ldr	r2, [r3, #4]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	697a      	ldr	r2, [r7, #20]
 8008e2a:	621a      	str	r2, [r3, #32]
}
 8008e2c:	bf00      	nop
 8008e2e:	371c      	adds	r7, #28
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	fffeff8f 	.word	0xfffeff8f
 8008e3c:	40010000 	.word	0x40010000
 8008e40:	40010400 	.word	0x40010400

08008e44 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008e44:	b480      	push	{r7}
 8008e46:	b087      	sub	sp, #28
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
 8008e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6a1b      	ldr	r3, [r3, #32]
 8008e52:	f023 0210 	bic.w	r2, r3, #16
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a1b      	ldr	r3, [r3, #32]
 8008e5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	685b      	ldr	r3, [r3, #4]
 8008e64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	699b      	ldr	r3, [r3, #24]
 8008e6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e6c:	68fa      	ldr	r2, [r7, #12]
 8008e6e:	4b2e      	ldr	r3, [pc, #184]	; (8008f28 <TIM_OC2_SetConfig+0xe4>)
 8008e70:	4013      	ands	r3, r2
 8008e72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	021b      	lsls	r3, r3, #8
 8008e82:	68fa      	ldr	r2, [r7, #12]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	f023 0320 	bic.w	r3, r3, #32
 8008e8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	689b      	ldr	r3, [r3, #8]
 8008e94:	011b      	lsls	r3, r3, #4
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4a23      	ldr	r2, [pc, #140]	; (8008f2c <TIM_OC2_SetConfig+0xe8>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d003      	beq.n	8008eac <TIM_OC2_SetConfig+0x68>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	4a22      	ldr	r2, [pc, #136]	; (8008f30 <TIM_OC2_SetConfig+0xec>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d10d      	bne.n	8008ec8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008eb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	68db      	ldr	r3, [r3, #12]
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a18      	ldr	r2, [pc, #96]	; (8008f2c <TIM_OC2_SetConfig+0xe8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d003      	beq.n	8008ed8 <TIM_OC2_SetConfig+0x94>
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	4a17      	ldr	r2, [pc, #92]	; (8008f30 <TIM_OC2_SetConfig+0xec>)
 8008ed4:	4293      	cmp	r3, r2
 8008ed6:	d113      	bne.n	8008f00 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ede:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ee8:	683b      	ldr	r3, [r7, #0]
 8008eea:	695b      	ldr	r3, [r3, #20]
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	693a      	ldr	r2, [r7, #16]
 8008ef0:	4313      	orrs	r3, r2
 8008ef2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	699b      	ldr	r3, [r3, #24]
 8008ef8:	009b      	lsls	r3, r3, #2
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	685a      	ldr	r2, [r3, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	697a      	ldr	r2, [r7, #20]
 8008f18:	621a      	str	r2, [r3, #32]
}
 8008f1a:	bf00      	nop
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f24:	4770      	bx	lr
 8008f26:	bf00      	nop
 8008f28:	feff8fff 	.word	0xfeff8fff
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40010400 	.word	0x40010400

08008f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	69db      	ldr	r3, [r3, #28]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4b2d      	ldr	r3, [pc, #180]	; (8009014 <TIM_OC3_SetConfig+0xe0>)
 8008f60:	4013      	ands	r3, r2
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	021b      	lsls	r3, r3, #8
 8008f84:	697a      	ldr	r2, [r7, #20]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a22      	ldr	r2, [pc, #136]	; (8009018 <TIM_OC3_SetConfig+0xe4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d003      	beq.n	8008f9a <TIM_OC3_SetConfig+0x66>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a21      	ldr	r2, [pc, #132]	; (800901c <TIM_OC3_SetConfig+0xe8>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d10d      	bne.n	8008fb6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	68db      	ldr	r3, [r3, #12]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fae:	697b      	ldr	r3, [r7, #20]
 8008fb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a17      	ldr	r2, [pc, #92]	; (8009018 <TIM_OC3_SetConfig+0xe4>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d003      	beq.n	8008fc6 <TIM_OC3_SetConfig+0x92>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	4a16      	ldr	r2, [pc, #88]	; (800901c <TIM_OC3_SetConfig+0xe8>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d113      	bne.n	8008fee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fc6:	693b      	ldr	r3, [r7, #16]
 8008fc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008fcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008fd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008fd6:	683b      	ldr	r3, [r7, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	011b      	lsls	r3, r3, #4
 8008fdc:	693a      	ldr	r2, [r7, #16]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	011b      	lsls	r3, r3, #4
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	4313      	orrs	r3, r2
 8008fec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	68fa      	ldr	r2, [r7, #12]
 8008ff8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	697a      	ldr	r2, [r7, #20]
 8009006:	621a      	str	r2, [r3, #32]
}
 8009008:	bf00      	nop
 800900a:	371c      	adds	r7, #28
 800900c:	46bd      	mov	sp, r7
 800900e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009012:	4770      	bx	lr
 8009014:	fffeff8f 	.word	0xfffeff8f
 8009018:	40010000 	.word	0x40010000
 800901c:	40010400 	.word	0x40010400

08009020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009020:	b480      	push	{r7}
 8009022:	b087      	sub	sp, #28
 8009024:	af00      	add	r7, sp, #0
 8009026:	6078      	str	r0, [r7, #4]
 8009028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6a1b      	ldr	r3, [r3, #32]
 800902e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a1b      	ldr	r3, [r3, #32]
 800903a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009048:	68fa      	ldr	r2, [r7, #12]
 800904a:	4b1e      	ldr	r3, [pc, #120]	; (80090c4 <TIM_OC4_SetConfig+0xa4>)
 800904c:	4013      	ands	r3, r2
 800904e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009056:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	021b      	lsls	r3, r3, #8
 800905e:	68fa      	ldr	r2, [r7, #12]
 8009060:	4313      	orrs	r3, r2
 8009062:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800906a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	031b      	lsls	r3, r3, #12
 8009072:	693a      	ldr	r2, [r7, #16]
 8009074:	4313      	orrs	r3, r2
 8009076:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	4a13      	ldr	r2, [pc, #76]	; (80090c8 <TIM_OC4_SetConfig+0xa8>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d003      	beq.n	8009088 <TIM_OC4_SetConfig+0x68>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a12      	ldr	r2, [pc, #72]	; (80090cc <TIM_OC4_SetConfig+0xac>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d109      	bne.n	800909c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800908e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	695b      	ldr	r3, [r3, #20]
 8009094:	019b      	lsls	r3, r3, #6
 8009096:	697a      	ldr	r2, [r7, #20]
 8009098:	4313      	orrs	r3, r2
 800909a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	697a      	ldr	r2, [r7, #20]
 80090a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	68fa      	ldr	r2, [r7, #12]
 80090a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090a8:	683b      	ldr	r3, [r7, #0]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	693a      	ldr	r2, [r7, #16]
 80090b4:	621a      	str	r2, [r3, #32]
}
 80090b6:	bf00      	nop
 80090b8:	371c      	adds	r7, #28
 80090ba:	46bd      	mov	sp, r7
 80090bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c0:	4770      	bx	lr
 80090c2:	bf00      	nop
 80090c4:	feff8fff 	.word	0xfeff8fff
 80090c8:	40010000 	.word	0x40010000
 80090cc:	40010400 	.word	0x40010400

080090d0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b087      	sub	sp, #28
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6a1b      	ldr	r3, [r3, #32]
 80090de:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	685b      	ldr	r3, [r3, #4]
 80090f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80090f8:	68fa      	ldr	r2, [r7, #12]
 80090fa:	4b1b      	ldr	r3, [pc, #108]	; (8009168 <TIM_OC5_SetConfig+0x98>)
 80090fc:	4013      	ands	r3, r2
 80090fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	041b      	lsls	r3, r3, #16
 8009118:	693a      	ldr	r2, [r7, #16]
 800911a:	4313      	orrs	r3, r2
 800911c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	4a12      	ldr	r2, [pc, #72]	; (800916c <TIM_OC5_SetConfig+0x9c>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d003      	beq.n	800912e <TIM_OC5_SetConfig+0x5e>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	4a11      	ldr	r2, [pc, #68]	; (8009170 <TIM_OC5_SetConfig+0xa0>)
 800912a:	4293      	cmp	r3, r2
 800912c:	d109      	bne.n	8009142 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009134:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	695b      	ldr	r3, [r3, #20]
 800913a:	021b      	lsls	r3, r3, #8
 800913c:	697a      	ldr	r2, [r7, #20]
 800913e:	4313      	orrs	r3, r2
 8009140:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	697a      	ldr	r2, [r7, #20]
 8009146:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	685a      	ldr	r2, [r3, #4]
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	693a      	ldr	r2, [r7, #16]
 800915a:	621a      	str	r2, [r3, #32]
}
 800915c:	bf00      	nop
 800915e:	371c      	adds	r7, #28
 8009160:	46bd      	mov	sp, r7
 8009162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009166:	4770      	bx	lr
 8009168:	fffeff8f 	.word	0xfffeff8f
 800916c:	40010000 	.word	0x40010000
 8009170:	40010400 	.word	0x40010400

08009174 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009174:	b480      	push	{r7}
 8009176:	b087      	sub	sp, #28
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6a1b      	ldr	r3, [r3, #32]
 8009182:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6a1b      	ldr	r3, [r3, #32]
 800918e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	685b      	ldr	r3, [r3, #4]
 8009194:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800919a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800919c:	68fa      	ldr	r2, [r7, #12]
 800919e:	4b1c      	ldr	r3, [pc, #112]	; (8009210 <TIM_OC6_SetConfig+0x9c>)
 80091a0:	4013      	ands	r3, r2
 80091a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091a4:	683b      	ldr	r3, [r7, #0]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	021b      	lsls	r3, r3, #8
 80091aa:	68fa      	ldr	r2, [r7, #12]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091b0:	693b      	ldr	r3, [r7, #16]
 80091b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	689b      	ldr	r3, [r3, #8]
 80091bc:	051b      	lsls	r3, r3, #20
 80091be:	693a      	ldr	r2, [r7, #16]
 80091c0:	4313      	orrs	r3, r2
 80091c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	4a13      	ldr	r2, [pc, #76]	; (8009214 <TIM_OC6_SetConfig+0xa0>)
 80091c8:	4293      	cmp	r3, r2
 80091ca:	d003      	beq.n	80091d4 <TIM_OC6_SetConfig+0x60>
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	4a12      	ldr	r2, [pc, #72]	; (8009218 <TIM_OC6_SetConfig+0xa4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d109      	bne.n	80091e8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091d4:	697b      	ldr	r3, [r7, #20]
 80091d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091da:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	695b      	ldr	r3, [r3, #20]
 80091e0:	029b      	lsls	r3, r3, #10
 80091e2:	697a      	ldr	r2, [r7, #20]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	697a      	ldr	r2, [r7, #20]
 80091ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	68fa      	ldr	r2, [r7, #12]
 80091f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	685a      	ldr	r2, [r3, #4]
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	693a      	ldr	r2, [r7, #16]
 8009200:	621a      	str	r2, [r3, #32]
}
 8009202:	bf00      	nop
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	feff8fff 	.word	0xfeff8fff
 8009214:	40010000 	.word	0x40010000
 8009218:	40010400 	.word	0x40010400

0800921c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800921c:	b480      	push	{r7}
 800921e:	b087      	sub	sp, #28
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	6a1b      	ldr	r3, [r3, #32]
 800922c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	6a1b      	ldr	r3, [r3, #32]
 8009232:	f023 0201 	bic.w	r2, r3, #1
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	699b      	ldr	r3, [r3, #24]
 800923e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009246:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	011b      	lsls	r3, r3, #4
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	4313      	orrs	r3, r2
 8009250:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009252:	697b      	ldr	r3, [r7, #20]
 8009254:	f023 030a 	bic.w	r3, r3, #10
 8009258:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800925a:	697a      	ldr	r2, [r7, #20]
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	4313      	orrs	r3, r2
 8009260:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	693a      	ldr	r2, [r7, #16]
 8009266:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	697a      	ldr	r2, [r7, #20]
 800926c:	621a      	str	r2, [r3, #32]
}
 800926e:	bf00      	nop
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr

0800927a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800927a:	b480      	push	{r7}
 800927c:	b087      	sub	sp, #28
 800927e:	af00      	add	r7, sp, #0
 8009280:	60f8      	str	r0, [r7, #12]
 8009282:	60b9      	str	r1, [r7, #8]
 8009284:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	6a1b      	ldr	r3, [r3, #32]
 800928a:	f023 0210 	bic.w	r2, r3, #16
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	699b      	ldr	r3, [r3, #24]
 8009296:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6a1b      	ldr	r3, [r3, #32]
 800929c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800929e:	697b      	ldr	r3, [r7, #20]
 80092a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	031b      	lsls	r3, r3, #12
 80092aa:	697a      	ldr	r2, [r7, #20]
 80092ac:	4313      	orrs	r3, r2
 80092ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092b0:	693b      	ldr	r3, [r7, #16]
 80092b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	011b      	lsls	r3, r3, #4
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	4313      	orrs	r3, r2
 80092c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	697a      	ldr	r2, [r7, #20]
 80092c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	621a      	str	r2, [r3, #32]
}
 80092ce:	bf00      	nop
 80092d0:	371c      	adds	r7, #28
 80092d2:	46bd      	mov	sp, r7
 80092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d8:	4770      	bx	lr

080092da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092da:	b480      	push	{r7}
 80092dc:	b085      	sub	sp, #20
 80092de:	af00      	add	r7, sp, #0
 80092e0:	6078      	str	r0, [r7, #4]
 80092e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	689b      	ldr	r3, [r3, #8]
 80092e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4313      	orrs	r3, r2
 80092f8:	f043 0307 	orr.w	r3, r3, #7
 80092fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	68fa      	ldr	r2, [r7, #12]
 8009302:	609a      	str	r2, [r3, #8]
}
 8009304:	bf00      	nop
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr

08009310 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009310:	b480      	push	{r7}
 8009312:	b087      	sub	sp, #28
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009324:	697b      	ldr	r3, [r7, #20]
 8009326:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800932a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	021a      	lsls	r2, r3, #8
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	431a      	orrs	r2, r3
 8009334:	68bb      	ldr	r3, [r7, #8]
 8009336:	4313      	orrs	r3, r2
 8009338:	697a      	ldr	r2, [r7, #20]
 800933a:	4313      	orrs	r3, r2
 800933c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	609a      	str	r2, [r3, #8]
}
 8009344:	bf00      	nop
 8009346:	371c      	adds	r7, #28
 8009348:	46bd      	mov	sp, r7
 800934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934e:	4770      	bx	lr

08009350 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009350:	b480      	push	{r7}
 8009352:	b087      	sub	sp, #28
 8009354:	af00      	add	r7, sp, #0
 8009356:	60f8      	str	r0, [r7, #12]
 8009358:	60b9      	str	r1, [r7, #8]
 800935a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	f003 031f 	and.w	r3, r3, #31
 8009362:	2201      	movs	r2, #1
 8009364:	fa02 f303 	lsl.w	r3, r2, r3
 8009368:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	6a1a      	ldr	r2, [r3, #32]
 800936e:	697b      	ldr	r3, [r7, #20]
 8009370:	43db      	mvns	r3, r3
 8009372:	401a      	ands	r2, r3
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6a1a      	ldr	r2, [r3, #32]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	f003 031f 	and.w	r3, r3, #31
 8009382:	6879      	ldr	r1, [r7, #4]
 8009384:	fa01 f303 	lsl.w	r3, r1, r3
 8009388:	431a      	orrs	r2, r3
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	621a      	str	r2, [r3, #32]
}
 800938e:	bf00      	nop
 8009390:	371c      	adds	r7, #28
 8009392:	46bd      	mov	sp, r7
 8009394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009398:	4770      	bx	lr
	...

0800939c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800939c:	b480      	push	{r7}
 800939e:	b085      	sub	sp, #20
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e06d      	b.n	8009490 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2202      	movs	r2, #2
 80093c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4a30      	ldr	r2, [pc, #192]	; (800949c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d004      	beq.n	80093e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4a2f      	ldr	r2, [pc, #188]	; (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d108      	bne.n	80093fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685b      	ldr	r3, [r3, #4]
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	4313      	orrs	r3, r2
 80093f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009400:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009402:	683b      	ldr	r3, [r7, #0]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	68fa      	ldr	r2, [r7, #12]
 8009408:	4313      	orrs	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68fa      	ldr	r2, [r7, #12]
 8009412:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a20      	ldr	r2, [pc, #128]	; (800949c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d022      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009426:	d01d      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a1d      	ldr	r2, [pc, #116]	; (80094a4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d018      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a1c      	ldr	r2, [pc, #112]	; (80094a8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d013      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a1a      	ldr	r2, [pc, #104]	; (80094ac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d00e      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a15      	ldr	r2, [pc, #84]	; (80094a0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d009      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a16      	ldr	r2, [pc, #88]	; (80094b0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d004      	beq.n	8009464 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a15      	ldr	r2, [pc, #84]	; (80094b4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d10c      	bne.n	800947e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800946a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	689b      	ldr	r3, [r3, #8]
 8009470:	68ba      	ldr	r2, [r7, #8]
 8009472:	4313      	orrs	r3, r2
 8009474:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	68ba      	ldr	r2, [r7, #8]
 800947c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	40010000 	.word	0x40010000
 80094a0:	40010400 	.word	0x40010400
 80094a4:	40000400 	.word	0x40000400
 80094a8:	40000800 	.word	0x40000800
 80094ac:	40000c00 	.word	0x40000c00
 80094b0:	40014000 	.word	0x40014000
 80094b4:	40001800 	.word	0x40001800

080094b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b083      	sub	sp, #12
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80094c0:	bf00      	nop
 80094c2:	370c      	adds	r7, #12
 80094c4:	46bd      	mov	sp, r7
 80094c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ca:	4770      	bx	lr

080094cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80094cc:	b480      	push	{r7}
 80094ce:	b083      	sub	sp, #12
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80094d4:	bf00      	nop
 80094d6:	370c      	adds	r7, #12
 80094d8:	46bd      	mov	sp, r7
 80094da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094de:	4770      	bx	lr

080094e0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80094e8:	bf00      	nop
 80094ea:	370c      	adds	r7, #12
 80094ec:	46bd      	mov	sp, r7
 80094ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f2:	4770      	bx	lr

080094f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009502:	2301      	movs	r3, #1
 8009504:	e040      	b.n	8009588 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800950a:	2b00      	cmp	r3, #0
 800950c:	d106      	bne.n	800951c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f7fb fadc 	bl	8004ad4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2224      	movs	r2, #36	; 0x24
 8009520:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f022 0201 	bic.w	r2, r2, #1
 8009530:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f82c 	bl	8009590 <UART_SetConfig>
 8009538:	4603      	mov	r3, r0
 800953a:	2b01      	cmp	r3, #1
 800953c:	d101      	bne.n	8009542 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800953e:	2301      	movs	r3, #1
 8009540:	e022      	b.n	8009588 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009546:	2b00      	cmp	r3, #0
 8009548:	d002      	beq.n	8009550 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fa84 	bl	8009a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	685a      	ldr	r2, [r3, #4]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800955e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	689a      	ldr	r2, [r3, #8]
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800956e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f042 0201 	orr.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f000 fb0b 	bl	8009b9c <UART_CheckIdleState>
 8009586:	4603      	mov	r3, r0
}
 8009588:	4618      	mov	r0, r3
 800958a:	3708      	adds	r7, #8
 800958c:	46bd      	mov	sp, r7
 800958e:	bd80      	pop	{r7, pc}

08009590 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b088      	sub	sp, #32
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009598:	2300      	movs	r3, #0
 800959a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	689a      	ldr	r2, [r3, #8]
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	695b      	ldr	r3, [r3, #20]
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	69db      	ldr	r3, [r3, #28]
 80095b0:	4313      	orrs	r3, r2
 80095b2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	681a      	ldr	r2, [r3, #0]
 80095ba:	4ba6      	ldr	r3, [pc, #664]	; (8009854 <UART_SetConfig+0x2c4>)
 80095bc:	4013      	ands	r3, r2
 80095be:	687a      	ldr	r2, [r7, #4]
 80095c0:	6812      	ldr	r2, [r2, #0]
 80095c2:	6979      	ldr	r1, [r7, #20]
 80095c4:	430b      	orrs	r3, r1
 80095c6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	699b      	ldr	r3, [r3, #24]
 80095e2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	6a1b      	ldr	r3, [r3, #32]
 80095e8:	697a      	ldr	r2, [r7, #20]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	697a      	ldr	r2, [r7, #20]
 80095fe:	430a      	orrs	r2, r1
 8009600:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a94      	ldr	r2, [pc, #592]	; (8009858 <UART_SetConfig+0x2c8>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d120      	bne.n	800964e <UART_SetConfig+0xbe>
 800960c:	4b93      	ldr	r3, [pc, #588]	; (800985c <UART_SetConfig+0x2cc>)
 800960e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009612:	f003 0303 	and.w	r3, r3, #3
 8009616:	2b03      	cmp	r3, #3
 8009618:	d816      	bhi.n	8009648 <UART_SetConfig+0xb8>
 800961a:	a201      	add	r2, pc, #4	; (adr r2, 8009620 <UART_SetConfig+0x90>)
 800961c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009620:	08009631 	.word	0x08009631
 8009624:	0800963d 	.word	0x0800963d
 8009628:	08009637 	.word	0x08009637
 800962c:	08009643 	.word	0x08009643
 8009630:	2301      	movs	r3, #1
 8009632:	77fb      	strb	r3, [r7, #31]
 8009634:	e150      	b.n	80098d8 <UART_SetConfig+0x348>
 8009636:	2302      	movs	r3, #2
 8009638:	77fb      	strb	r3, [r7, #31]
 800963a:	e14d      	b.n	80098d8 <UART_SetConfig+0x348>
 800963c:	2304      	movs	r3, #4
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e14a      	b.n	80098d8 <UART_SetConfig+0x348>
 8009642:	2308      	movs	r3, #8
 8009644:	77fb      	strb	r3, [r7, #31]
 8009646:	e147      	b.n	80098d8 <UART_SetConfig+0x348>
 8009648:	2310      	movs	r3, #16
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e144      	b.n	80098d8 <UART_SetConfig+0x348>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a83      	ldr	r2, [pc, #524]	; (8009860 <UART_SetConfig+0x2d0>)
 8009654:	4293      	cmp	r3, r2
 8009656:	d132      	bne.n	80096be <UART_SetConfig+0x12e>
 8009658:	4b80      	ldr	r3, [pc, #512]	; (800985c <UART_SetConfig+0x2cc>)
 800965a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965e:	f003 030c 	and.w	r3, r3, #12
 8009662:	2b0c      	cmp	r3, #12
 8009664:	d828      	bhi.n	80096b8 <UART_SetConfig+0x128>
 8009666:	a201      	add	r2, pc, #4	; (adr r2, 800966c <UART_SetConfig+0xdc>)
 8009668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800966c:	080096a1 	.word	0x080096a1
 8009670:	080096b9 	.word	0x080096b9
 8009674:	080096b9 	.word	0x080096b9
 8009678:	080096b9 	.word	0x080096b9
 800967c:	080096ad 	.word	0x080096ad
 8009680:	080096b9 	.word	0x080096b9
 8009684:	080096b9 	.word	0x080096b9
 8009688:	080096b9 	.word	0x080096b9
 800968c:	080096a7 	.word	0x080096a7
 8009690:	080096b9 	.word	0x080096b9
 8009694:	080096b9 	.word	0x080096b9
 8009698:	080096b9 	.word	0x080096b9
 800969c:	080096b3 	.word	0x080096b3
 80096a0:	2300      	movs	r3, #0
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e118      	b.n	80098d8 <UART_SetConfig+0x348>
 80096a6:	2302      	movs	r3, #2
 80096a8:	77fb      	strb	r3, [r7, #31]
 80096aa:	e115      	b.n	80098d8 <UART_SetConfig+0x348>
 80096ac:	2304      	movs	r3, #4
 80096ae:	77fb      	strb	r3, [r7, #31]
 80096b0:	e112      	b.n	80098d8 <UART_SetConfig+0x348>
 80096b2:	2308      	movs	r3, #8
 80096b4:	77fb      	strb	r3, [r7, #31]
 80096b6:	e10f      	b.n	80098d8 <UART_SetConfig+0x348>
 80096b8:	2310      	movs	r3, #16
 80096ba:	77fb      	strb	r3, [r7, #31]
 80096bc:	e10c      	b.n	80098d8 <UART_SetConfig+0x348>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a68      	ldr	r2, [pc, #416]	; (8009864 <UART_SetConfig+0x2d4>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d120      	bne.n	800970a <UART_SetConfig+0x17a>
 80096c8:	4b64      	ldr	r3, [pc, #400]	; (800985c <UART_SetConfig+0x2cc>)
 80096ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096ce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80096d2:	2b30      	cmp	r3, #48	; 0x30
 80096d4:	d013      	beq.n	80096fe <UART_SetConfig+0x16e>
 80096d6:	2b30      	cmp	r3, #48	; 0x30
 80096d8:	d814      	bhi.n	8009704 <UART_SetConfig+0x174>
 80096da:	2b20      	cmp	r3, #32
 80096dc:	d009      	beq.n	80096f2 <UART_SetConfig+0x162>
 80096de:	2b20      	cmp	r3, #32
 80096e0:	d810      	bhi.n	8009704 <UART_SetConfig+0x174>
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <UART_SetConfig+0x15c>
 80096e6:	2b10      	cmp	r3, #16
 80096e8:	d006      	beq.n	80096f8 <UART_SetConfig+0x168>
 80096ea:	e00b      	b.n	8009704 <UART_SetConfig+0x174>
 80096ec:	2300      	movs	r3, #0
 80096ee:	77fb      	strb	r3, [r7, #31]
 80096f0:	e0f2      	b.n	80098d8 <UART_SetConfig+0x348>
 80096f2:	2302      	movs	r3, #2
 80096f4:	77fb      	strb	r3, [r7, #31]
 80096f6:	e0ef      	b.n	80098d8 <UART_SetConfig+0x348>
 80096f8:	2304      	movs	r3, #4
 80096fa:	77fb      	strb	r3, [r7, #31]
 80096fc:	e0ec      	b.n	80098d8 <UART_SetConfig+0x348>
 80096fe:	2308      	movs	r3, #8
 8009700:	77fb      	strb	r3, [r7, #31]
 8009702:	e0e9      	b.n	80098d8 <UART_SetConfig+0x348>
 8009704:	2310      	movs	r3, #16
 8009706:	77fb      	strb	r3, [r7, #31]
 8009708:	e0e6      	b.n	80098d8 <UART_SetConfig+0x348>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a56      	ldr	r2, [pc, #344]	; (8009868 <UART_SetConfig+0x2d8>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d120      	bne.n	8009756 <UART_SetConfig+0x1c6>
 8009714:	4b51      	ldr	r3, [pc, #324]	; (800985c <UART_SetConfig+0x2cc>)
 8009716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800971a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800971e:	2bc0      	cmp	r3, #192	; 0xc0
 8009720:	d013      	beq.n	800974a <UART_SetConfig+0x1ba>
 8009722:	2bc0      	cmp	r3, #192	; 0xc0
 8009724:	d814      	bhi.n	8009750 <UART_SetConfig+0x1c0>
 8009726:	2b80      	cmp	r3, #128	; 0x80
 8009728:	d009      	beq.n	800973e <UART_SetConfig+0x1ae>
 800972a:	2b80      	cmp	r3, #128	; 0x80
 800972c:	d810      	bhi.n	8009750 <UART_SetConfig+0x1c0>
 800972e:	2b00      	cmp	r3, #0
 8009730:	d002      	beq.n	8009738 <UART_SetConfig+0x1a8>
 8009732:	2b40      	cmp	r3, #64	; 0x40
 8009734:	d006      	beq.n	8009744 <UART_SetConfig+0x1b4>
 8009736:	e00b      	b.n	8009750 <UART_SetConfig+0x1c0>
 8009738:	2300      	movs	r3, #0
 800973a:	77fb      	strb	r3, [r7, #31]
 800973c:	e0cc      	b.n	80098d8 <UART_SetConfig+0x348>
 800973e:	2302      	movs	r3, #2
 8009740:	77fb      	strb	r3, [r7, #31]
 8009742:	e0c9      	b.n	80098d8 <UART_SetConfig+0x348>
 8009744:	2304      	movs	r3, #4
 8009746:	77fb      	strb	r3, [r7, #31]
 8009748:	e0c6      	b.n	80098d8 <UART_SetConfig+0x348>
 800974a:	2308      	movs	r3, #8
 800974c:	77fb      	strb	r3, [r7, #31]
 800974e:	e0c3      	b.n	80098d8 <UART_SetConfig+0x348>
 8009750:	2310      	movs	r3, #16
 8009752:	77fb      	strb	r3, [r7, #31]
 8009754:	e0c0      	b.n	80098d8 <UART_SetConfig+0x348>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	4a44      	ldr	r2, [pc, #272]	; (800986c <UART_SetConfig+0x2dc>)
 800975c:	4293      	cmp	r3, r2
 800975e:	d125      	bne.n	80097ac <UART_SetConfig+0x21c>
 8009760:	4b3e      	ldr	r3, [pc, #248]	; (800985c <UART_SetConfig+0x2cc>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800976a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800976e:	d017      	beq.n	80097a0 <UART_SetConfig+0x210>
 8009770:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009774:	d817      	bhi.n	80097a6 <UART_SetConfig+0x216>
 8009776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800977a:	d00b      	beq.n	8009794 <UART_SetConfig+0x204>
 800977c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009780:	d811      	bhi.n	80097a6 <UART_SetConfig+0x216>
 8009782:	2b00      	cmp	r3, #0
 8009784:	d003      	beq.n	800978e <UART_SetConfig+0x1fe>
 8009786:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978a:	d006      	beq.n	800979a <UART_SetConfig+0x20a>
 800978c:	e00b      	b.n	80097a6 <UART_SetConfig+0x216>
 800978e:	2300      	movs	r3, #0
 8009790:	77fb      	strb	r3, [r7, #31]
 8009792:	e0a1      	b.n	80098d8 <UART_SetConfig+0x348>
 8009794:	2302      	movs	r3, #2
 8009796:	77fb      	strb	r3, [r7, #31]
 8009798:	e09e      	b.n	80098d8 <UART_SetConfig+0x348>
 800979a:	2304      	movs	r3, #4
 800979c:	77fb      	strb	r3, [r7, #31]
 800979e:	e09b      	b.n	80098d8 <UART_SetConfig+0x348>
 80097a0:	2308      	movs	r3, #8
 80097a2:	77fb      	strb	r3, [r7, #31]
 80097a4:	e098      	b.n	80098d8 <UART_SetConfig+0x348>
 80097a6:	2310      	movs	r3, #16
 80097a8:	77fb      	strb	r3, [r7, #31]
 80097aa:	e095      	b.n	80098d8 <UART_SetConfig+0x348>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a2f      	ldr	r2, [pc, #188]	; (8009870 <UART_SetConfig+0x2e0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d125      	bne.n	8009802 <UART_SetConfig+0x272>
 80097b6:	4b29      	ldr	r3, [pc, #164]	; (800985c <UART_SetConfig+0x2cc>)
 80097b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097c4:	d017      	beq.n	80097f6 <UART_SetConfig+0x266>
 80097c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097ca:	d817      	bhi.n	80097fc <UART_SetConfig+0x26c>
 80097cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097d0:	d00b      	beq.n	80097ea <UART_SetConfig+0x25a>
 80097d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097d6:	d811      	bhi.n	80097fc <UART_SetConfig+0x26c>
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d003      	beq.n	80097e4 <UART_SetConfig+0x254>
 80097dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097e0:	d006      	beq.n	80097f0 <UART_SetConfig+0x260>
 80097e2:	e00b      	b.n	80097fc <UART_SetConfig+0x26c>
 80097e4:	2301      	movs	r3, #1
 80097e6:	77fb      	strb	r3, [r7, #31]
 80097e8:	e076      	b.n	80098d8 <UART_SetConfig+0x348>
 80097ea:	2302      	movs	r3, #2
 80097ec:	77fb      	strb	r3, [r7, #31]
 80097ee:	e073      	b.n	80098d8 <UART_SetConfig+0x348>
 80097f0:	2304      	movs	r3, #4
 80097f2:	77fb      	strb	r3, [r7, #31]
 80097f4:	e070      	b.n	80098d8 <UART_SetConfig+0x348>
 80097f6:	2308      	movs	r3, #8
 80097f8:	77fb      	strb	r3, [r7, #31]
 80097fa:	e06d      	b.n	80098d8 <UART_SetConfig+0x348>
 80097fc:	2310      	movs	r3, #16
 80097fe:	77fb      	strb	r3, [r7, #31]
 8009800:	e06a      	b.n	80098d8 <UART_SetConfig+0x348>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a1b      	ldr	r2, [pc, #108]	; (8009874 <UART_SetConfig+0x2e4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d138      	bne.n	800987e <UART_SetConfig+0x2ee>
 800980c:	4b13      	ldr	r3, [pc, #76]	; (800985c <UART_SetConfig+0x2cc>)
 800980e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009812:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009816:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800981a:	d017      	beq.n	800984c <UART_SetConfig+0x2bc>
 800981c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009820:	d82a      	bhi.n	8009878 <UART_SetConfig+0x2e8>
 8009822:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009826:	d00b      	beq.n	8009840 <UART_SetConfig+0x2b0>
 8009828:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800982c:	d824      	bhi.n	8009878 <UART_SetConfig+0x2e8>
 800982e:	2b00      	cmp	r3, #0
 8009830:	d003      	beq.n	800983a <UART_SetConfig+0x2aa>
 8009832:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009836:	d006      	beq.n	8009846 <UART_SetConfig+0x2b6>
 8009838:	e01e      	b.n	8009878 <UART_SetConfig+0x2e8>
 800983a:	2300      	movs	r3, #0
 800983c:	77fb      	strb	r3, [r7, #31]
 800983e:	e04b      	b.n	80098d8 <UART_SetConfig+0x348>
 8009840:	2302      	movs	r3, #2
 8009842:	77fb      	strb	r3, [r7, #31]
 8009844:	e048      	b.n	80098d8 <UART_SetConfig+0x348>
 8009846:	2304      	movs	r3, #4
 8009848:	77fb      	strb	r3, [r7, #31]
 800984a:	e045      	b.n	80098d8 <UART_SetConfig+0x348>
 800984c:	2308      	movs	r3, #8
 800984e:	77fb      	strb	r3, [r7, #31]
 8009850:	e042      	b.n	80098d8 <UART_SetConfig+0x348>
 8009852:	bf00      	nop
 8009854:	efff69f3 	.word	0xefff69f3
 8009858:	40011000 	.word	0x40011000
 800985c:	40023800 	.word	0x40023800
 8009860:	40004400 	.word	0x40004400
 8009864:	40004800 	.word	0x40004800
 8009868:	40004c00 	.word	0x40004c00
 800986c:	40005000 	.word	0x40005000
 8009870:	40011400 	.word	0x40011400
 8009874:	40007800 	.word	0x40007800
 8009878:	2310      	movs	r3, #16
 800987a:	77fb      	strb	r3, [r7, #31]
 800987c:	e02c      	b.n	80098d8 <UART_SetConfig+0x348>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a72      	ldr	r2, [pc, #456]	; (8009a4c <UART_SetConfig+0x4bc>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d125      	bne.n	80098d4 <UART_SetConfig+0x344>
 8009888:	4b71      	ldr	r3, [pc, #452]	; (8009a50 <UART_SetConfig+0x4c0>)
 800988a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800988e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009892:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009896:	d017      	beq.n	80098c8 <UART_SetConfig+0x338>
 8009898:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800989c:	d817      	bhi.n	80098ce <UART_SetConfig+0x33e>
 800989e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a2:	d00b      	beq.n	80098bc <UART_SetConfig+0x32c>
 80098a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098a8:	d811      	bhi.n	80098ce <UART_SetConfig+0x33e>
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d003      	beq.n	80098b6 <UART_SetConfig+0x326>
 80098ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80098b2:	d006      	beq.n	80098c2 <UART_SetConfig+0x332>
 80098b4:	e00b      	b.n	80098ce <UART_SetConfig+0x33e>
 80098b6:	2300      	movs	r3, #0
 80098b8:	77fb      	strb	r3, [r7, #31]
 80098ba:	e00d      	b.n	80098d8 <UART_SetConfig+0x348>
 80098bc:	2302      	movs	r3, #2
 80098be:	77fb      	strb	r3, [r7, #31]
 80098c0:	e00a      	b.n	80098d8 <UART_SetConfig+0x348>
 80098c2:	2304      	movs	r3, #4
 80098c4:	77fb      	strb	r3, [r7, #31]
 80098c6:	e007      	b.n	80098d8 <UART_SetConfig+0x348>
 80098c8:	2308      	movs	r3, #8
 80098ca:	77fb      	strb	r3, [r7, #31]
 80098cc:	e004      	b.n	80098d8 <UART_SetConfig+0x348>
 80098ce:	2310      	movs	r3, #16
 80098d0:	77fb      	strb	r3, [r7, #31]
 80098d2:	e001      	b.n	80098d8 <UART_SetConfig+0x348>
 80098d4:	2310      	movs	r3, #16
 80098d6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	69db      	ldr	r3, [r3, #28]
 80098dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e0:	d15b      	bne.n	800999a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80098e2:	7ffb      	ldrb	r3, [r7, #31]
 80098e4:	2b08      	cmp	r3, #8
 80098e6:	d828      	bhi.n	800993a <UART_SetConfig+0x3aa>
 80098e8:	a201      	add	r2, pc, #4	; (adr r2, 80098f0 <UART_SetConfig+0x360>)
 80098ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ee:	bf00      	nop
 80098f0:	08009915 	.word	0x08009915
 80098f4:	0800991d 	.word	0x0800991d
 80098f8:	08009925 	.word	0x08009925
 80098fc:	0800993b 	.word	0x0800993b
 8009900:	0800992b 	.word	0x0800992b
 8009904:	0800993b 	.word	0x0800993b
 8009908:	0800993b 	.word	0x0800993b
 800990c:	0800993b 	.word	0x0800993b
 8009910:	08009933 	.word	0x08009933
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009914:	f7fd ff9e 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 8009918:	61b8      	str	r0, [r7, #24]
        break;
 800991a:	e013      	b.n	8009944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800991c:	f7fd ffae 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 8009920:	61b8      	str	r0, [r7, #24]
        break;
 8009922:	e00f      	b.n	8009944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009924:	4b4b      	ldr	r3, [pc, #300]	; (8009a54 <UART_SetConfig+0x4c4>)
 8009926:	61bb      	str	r3, [r7, #24]
        break;
 8009928:	e00c      	b.n	8009944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800992a:	f7fd fe81 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 800992e:	61b8      	str	r0, [r7, #24]
        break;
 8009930:	e008      	b.n	8009944 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009932:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009936:	61bb      	str	r3, [r7, #24]
        break;
 8009938:	e004      	b.n	8009944 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800993a:	2300      	movs	r3, #0
 800993c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	77bb      	strb	r3, [r7, #30]
        break;
 8009942:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d074      	beq.n	8009a34 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800994a:	69bb      	ldr	r3, [r7, #24]
 800994c:	005a      	lsls	r2, r3, #1
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	685b      	ldr	r3, [r3, #4]
 8009952:	085b      	lsrs	r3, r3, #1
 8009954:	441a      	add	r2, r3
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	fbb2 f3f3 	udiv	r3, r2, r3
 800995e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	2b0f      	cmp	r3, #15
 8009964:	d916      	bls.n	8009994 <UART_SetConfig+0x404>
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800996c:	d212      	bcs.n	8009994 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	b29b      	uxth	r3, r3
 8009972:	f023 030f 	bic.w	r3, r3, #15
 8009976:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009978:	693b      	ldr	r3, [r7, #16]
 800997a:	085b      	lsrs	r3, r3, #1
 800997c:	b29b      	uxth	r3, r3
 800997e:	f003 0307 	and.w	r3, r3, #7
 8009982:	b29a      	uxth	r2, r3
 8009984:	89fb      	ldrh	r3, [r7, #14]
 8009986:	4313      	orrs	r3, r2
 8009988:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	89fa      	ldrh	r2, [r7, #14]
 8009990:	60da      	str	r2, [r3, #12]
 8009992:	e04f      	b.n	8009a34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009994:	2301      	movs	r3, #1
 8009996:	77bb      	strb	r3, [r7, #30]
 8009998:	e04c      	b.n	8009a34 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800999a:	7ffb      	ldrb	r3, [r7, #31]
 800999c:	2b08      	cmp	r3, #8
 800999e:	d828      	bhi.n	80099f2 <UART_SetConfig+0x462>
 80099a0:	a201      	add	r2, pc, #4	; (adr r2, 80099a8 <UART_SetConfig+0x418>)
 80099a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099a6:	bf00      	nop
 80099a8:	080099cd 	.word	0x080099cd
 80099ac:	080099d5 	.word	0x080099d5
 80099b0:	080099dd 	.word	0x080099dd
 80099b4:	080099f3 	.word	0x080099f3
 80099b8:	080099e3 	.word	0x080099e3
 80099bc:	080099f3 	.word	0x080099f3
 80099c0:	080099f3 	.word	0x080099f3
 80099c4:	080099f3 	.word	0x080099f3
 80099c8:	080099eb 	.word	0x080099eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80099cc:	f7fd ff42 	bl	8007854 <HAL_RCC_GetPCLK1Freq>
 80099d0:	61b8      	str	r0, [r7, #24]
        break;
 80099d2:	e013      	b.n	80099fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80099d4:	f7fd ff52 	bl	800787c <HAL_RCC_GetPCLK2Freq>
 80099d8:	61b8      	str	r0, [r7, #24]
        break;
 80099da:	e00f      	b.n	80099fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80099dc:	4b1d      	ldr	r3, [pc, #116]	; (8009a54 <UART_SetConfig+0x4c4>)
 80099de:	61bb      	str	r3, [r7, #24]
        break;
 80099e0:	e00c      	b.n	80099fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80099e2:	f7fd fe25 	bl	8007630 <HAL_RCC_GetSysClockFreq>
 80099e6:	61b8      	str	r0, [r7, #24]
        break;
 80099e8:	e008      	b.n	80099fc <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80099ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ee:	61bb      	str	r3, [r7, #24]
        break;
 80099f0:	e004      	b.n	80099fc <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80099f2:	2300      	movs	r3, #0
 80099f4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80099f6:	2301      	movs	r3, #1
 80099f8:	77bb      	strb	r3, [r7, #30]
        break;
 80099fa:	bf00      	nop
    }

    if (pclk != 0U)
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d018      	beq.n	8009a34 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	085a      	lsrs	r2, r3, #1
 8009a08:	69bb      	ldr	r3, [r7, #24]
 8009a0a:	441a      	add	r2, r3
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a14:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a16:	693b      	ldr	r3, [r7, #16]
 8009a18:	2b0f      	cmp	r3, #15
 8009a1a:	d909      	bls.n	8009a30 <UART_SetConfig+0x4a0>
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a22:	d205      	bcs.n	8009a30 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a24:	693b      	ldr	r3, [r7, #16]
 8009a26:	b29a      	uxth	r2, r3
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	60da      	str	r2, [r3, #12]
 8009a2e:	e001      	b.n	8009a34 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009a30:	2301      	movs	r3, #1
 8009a32:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2200      	movs	r2, #0
 8009a38:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a40:	7fbb      	ldrb	r3, [r7, #30]
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3720      	adds	r7, #32
 8009a46:	46bd      	mov	sp, r7
 8009a48:	bd80      	pop	{r7, pc}
 8009a4a:	bf00      	nop
 8009a4c:	40007c00 	.word	0x40007c00
 8009a50:	40023800 	.word	0x40023800
 8009a54:	00f42400 	.word	0x00f42400

08009a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a64:	f003 0301 	and.w	r3, r3, #1
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	685b      	ldr	r3, [r3, #4]
 8009a72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	430a      	orrs	r2, r1
 8009a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a86:	f003 0302 	and.w	r3, r3, #2
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685b      	ldr	r3, [r3, #4]
 8009a94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	430a      	orrs	r2, r1
 8009aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa8:	f003 0304 	and.w	r3, r3, #4
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	685b      	ldr	r3, [r3, #4]
 8009ab6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aca:	f003 0308 	and.w	r3, r3, #8
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	685b      	ldr	r3, [r3, #4]
 8009ad8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	430a      	orrs	r2, r1
 8009ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aec:	f003 0310 	and.w	r3, r3, #16
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	689b      	ldr	r3, [r3, #8]
 8009afa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	f003 0320 	and.w	r3, r3, #32
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	689b      	ldr	r3, [r3, #8]
 8009b1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01a      	beq.n	8009b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	685b      	ldr	r3, [r3, #4]
 8009b3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	430a      	orrs	r2, r1
 8009b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b56:	d10a      	bne.n	8009b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	430a      	orrs	r2, r1
 8009b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00a      	beq.n	8009b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	430a      	orrs	r2, r1
 8009b8e:	605a      	str	r2, [r3, #4]
  }
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr

08009b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af02      	add	r7, sp, #8
 8009ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bac:	f7fb fb16 	bl	80051dc <HAL_GetTick>
 8009bb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	f003 0308 	and.w	r3, r3, #8
 8009bbc:	2b08      	cmp	r3, #8
 8009bbe:	d10e      	bne.n	8009bde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bc4:	9300      	str	r3, [sp, #0]
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	2200      	movs	r2, #0
 8009bca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009bce:	6878      	ldr	r0, [r7, #4]
 8009bd0:	f000 f817 	bl	8009c02 <UART_WaitOnFlagUntilTimeout>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d001      	beq.n	8009bde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	e00d      	b.n	8009bfa <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2220      	movs	r2, #32
 8009be2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	2220      	movs	r2, #32
 8009be8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2200      	movs	r2, #0
 8009bee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2200      	movs	r2, #0
 8009bf4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3710      	adds	r7, #16
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b09c      	sub	sp, #112	; 0x70
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c12:	e0a5      	b.n	8009d60 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c1a:	f000 80a1 	beq.w	8009d60 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c1e:	f7fb fadd 	bl	80051dc <HAL_GetTick>
 8009c22:	4602      	mov	r2, r0
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	1ad3      	subs	r3, r2, r3
 8009c28:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d302      	bcc.n	8009c34 <UART_WaitOnFlagUntilTimeout+0x32>
 8009c2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d13e      	bne.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009c42:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c44:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c48:	667b      	str	r3, [r7, #100]	; 0x64
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	461a      	mov	r2, r3
 8009c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c52:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c54:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009c58:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e6      	bne.n	8009c34 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	3308      	adds	r3, #8
 8009c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c70:	e853 3f00 	ldrex	r3, [r3]
 8009c74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c78:	f023 0301 	bic.w	r3, r3, #1
 8009c7c:	663b      	str	r3, [r7, #96]	; 0x60
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	3308      	adds	r3, #8
 8009c84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c86:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c88:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c8e:	e841 2300 	strex	r3, r2, [r1]
 8009c92:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	d1e5      	bne.n	8009c66 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2220      	movs	r2, #32
 8009c9e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	2220      	movs	r2, #32
 8009ca4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009ca6:	68fb      	ldr	r3, [r7, #12]
 8009ca8:	2200      	movs	r2, #0
 8009caa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009cae:	2303      	movs	r3, #3
 8009cb0:	e067      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f003 0304 	and.w	r3, r3, #4
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d04f      	beq.n	8009d60 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009cce:	d147      	bne.n	8009d60 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009cd8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce2:	e853 3f00 	ldrex	r3, [r3]
 8009ce6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	461a      	mov	r2, r3
 8009cf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cf8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cfa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009cfe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d00:	e841 2300 	strex	r3, r2, [r1]
 8009d04:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d1e6      	bne.n	8009cda <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3308      	adds	r3, #8
 8009d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	e853 3f00 	ldrex	r3, [r3]
 8009d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d1c:	693b      	ldr	r3, [r7, #16]
 8009d1e:	f023 0301 	bic.w	r3, r3, #1
 8009d22:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	3308      	adds	r3, #8
 8009d2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009d2c:	623a      	str	r2, [r7, #32]
 8009d2e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d30:	69f9      	ldr	r1, [r7, #28]
 8009d32:	6a3a      	ldr	r2, [r7, #32]
 8009d34:	e841 2300 	strex	r3, r2, [r1]
 8009d38:	61bb      	str	r3, [r7, #24]
   return(result);
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d1e5      	bne.n	8009d0c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2220      	movs	r2, #32
 8009d44:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2220      	movs	r2, #32
 8009d4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009d5c:	2303      	movs	r3, #3
 8009d5e:	e010      	b.n	8009d82 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	69da      	ldr	r2, [r3, #28]
 8009d66:	68bb      	ldr	r3, [r7, #8]
 8009d68:	4013      	ands	r3, r2
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	bf0c      	ite	eq
 8009d70:	2301      	moveq	r3, #1
 8009d72:	2300      	movne	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	461a      	mov	r2, r3
 8009d78:	79fb      	ldrb	r3, [r7, #7]
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	f43f af4a 	beq.w	8009c14 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3770      	adds	r7, #112	; 0x70
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
	...

08009d8c <__errno>:
 8009d8c:	4b01      	ldr	r3, [pc, #4]	; (8009d94 <__errno+0x8>)
 8009d8e:	6818      	ldr	r0, [r3, #0]
 8009d90:	4770      	bx	lr
 8009d92:	bf00      	nop
 8009d94:	20000064 	.word	0x20000064

08009d98 <__libc_init_array>:
 8009d98:	b570      	push	{r4, r5, r6, lr}
 8009d9a:	4d0d      	ldr	r5, [pc, #52]	; (8009dd0 <__libc_init_array+0x38>)
 8009d9c:	4c0d      	ldr	r4, [pc, #52]	; (8009dd4 <__libc_init_array+0x3c>)
 8009d9e:	1b64      	subs	r4, r4, r5
 8009da0:	10a4      	asrs	r4, r4, #2
 8009da2:	2600      	movs	r6, #0
 8009da4:	42a6      	cmp	r6, r4
 8009da6:	d109      	bne.n	8009dbc <__libc_init_array+0x24>
 8009da8:	4d0b      	ldr	r5, [pc, #44]	; (8009dd8 <__libc_init_array+0x40>)
 8009daa:	4c0c      	ldr	r4, [pc, #48]	; (8009ddc <__libc_init_array+0x44>)
 8009dac:	f001 f824 	bl	800adf8 <_init>
 8009db0:	1b64      	subs	r4, r4, r5
 8009db2:	10a4      	asrs	r4, r4, #2
 8009db4:	2600      	movs	r6, #0
 8009db6:	42a6      	cmp	r6, r4
 8009db8:	d105      	bne.n	8009dc6 <__libc_init_array+0x2e>
 8009dba:	bd70      	pop	{r4, r5, r6, pc}
 8009dbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dc0:	4798      	blx	r3
 8009dc2:	3601      	adds	r6, #1
 8009dc4:	e7ee      	b.n	8009da4 <__libc_init_array+0xc>
 8009dc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dca:	4798      	blx	r3
 8009dcc:	3601      	adds	r6, #1
 8009dce:	e7f2      	b.n	8009db6 <__libc_init_array+0x1e>
 8009dd0:	0800afdc 	.word	0x0800afdc
 8009dd4:	0800afdc 	.word	0x0800afdc
 8009dd8:	0800afdc 	.word	0x0800afdc
 8009ddc:	0800afe0 	.word	0x0800afe0

08009de0 <memset>:
 8009de0:	4402      	add	r2, r0
 8009de2:	4603      	mov	r3, r0
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d100      	bne.n	8009dea <memset+0xa>
 8009de8:	4770      	bx	lr
 8009dea:	f803 1b01 	strb.w	r1, [r3], #1
 8009dee:	e7f9      	b.n	8009de4 <memset+0x4>

08009df0 <iprintf>:
 8009df0:	b40f      	push	{r0, r1, r2, r3}
 8009df2:	4b0a      	ldr	r3, [pc, #40]	; (8009e1c <iprintf+0x2c>)
 8009df4:	b513      	push	{r0, r1, r4, lr}
 8009df6:	681c      	ldr	r4, [r3, #0]
 8009df8:	b124      	cbz	r4, 8009e04 <iprintf+0x14>
 8009dfa:	69a3      	ldr	r3, [r4, #24]
 8009dfc:	b913      	cbnz	r3, 8009e04 <iprintf+0x14>
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 fa5e 	bl	800a2c0 <__sinit>
 8009e04:	ab05      	add	r3, sp, #20
 8009e06:	9a04      	ldr	r2, [sp, #16]
 8009e08:	68a1      	ldr	r1, [r4, #8]
 8009e0a:	9301      	str	r3, [sp, #4]
 8009e0c:	4620      	mov	r0, r4
 8009e0e:	f000 fc67 	bl	800a6e0 <_vfiprintf_r>
 8009e12:	b002      	add	sp, #8
 8009e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e18:	b004      	add	sp, #16
 8009e1a:	4770      	bx	lr
 8009e1c:	20000064 	.word	0x20000064

08009e20 <_puts_r>:
 8009e20:	b570      	push	{r4, r5, r6, lr}
 8009e22:	460e      	mov	r6, r1
 8009e24:	4605      	mov	r5, r0
 8009e26:	b118      	cbz	r0, 8009e30 <_puts_r+0x10>
 8009e28:	6983      	ldr	r3, [r0, #24]
 8009e2a:	b90b      	cbnz	r3, 8009e30 <_puts_r+0x10>
 8009e2c:	f000 fa48 	bl	800a2c0 <__sinit>
 8009e30:	69ab      	ldr	r3, [r5, #24]
 8009e32:	68ac      	ldr	r4, [r5, #8]
 8009e34:	b913      	cbnz	r3, 8009e3c <_puts_r+0x1c>
 8009e36:	4628      	mov	r0, r5
 8009e38:	f000 fa42 	bl	800a2c0 <__sinit>
 8009e3c:	4b2c      	ldr	r3, [pc, #176]	; (8009ef0 <_puts_r+0xd0>)
 8009e3e:	429c      	cmp	r4, r3
 8009e40:	d120      	bne.n	8009e84 <_puts_r+0x64>
 8009e42:	686c      	ldr	r4, [r5, #4]
 8009e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e46:	07db      	lsls	r3, r3, #31
 8009e48:	d405      	bmi.n	8009e56 <_puts_r+0x36>
 8009e4a:	89a3      	ldrh	r3, [r4, #12]
 8009e4c:	0598      	lsls	r0, r3, #22
 8009e4e:	d402      	bmi.n	8009e56 <_puts_r+0x36>
 8009e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e52:	f000 fad3 	bl	800a3fc <__retarget_lock_acquire_recursive>
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	0719      	lsls	r1, r3, #28
 8009e5a:	d51d      	bpl.n	8009e98 <_puts_r+0x78>
 8009e5c:	6923      	ldr	r3, [r4, #16]
 8009e5e:	b1db      	cbz	r3, 8009e98 <_puts_r+0x78>
 8009e60:	3e01      	subs	r6, #1
 8009e62:	68a3      	ldr	r3, [r4, #8]
 8009e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	60a3      	str	r3, [r4, #8]
 8009e6c:	bb39      	cbnz	r1, 8009ebe <_puts_r+0x9e>
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	da38      	bge.n	8009ee4 <_puts_r+0xc4>
 8009e72:	4622      	mov	r2, r4
 8009e74:	210a      	movs	r1, #10
 8009e76:	4628      	mov	r0, r5
 8009e78:	f000 f848 	bl	8009f0c <__swbuf_r>
 8009e7c:	3001      	adds	r0, #1
 8009e7e:	d011      	beq.n	8009ea4 <_puts_r+0x84>
 8009e80:	250a      	movs	r5, #10
 8009e82:	e011      	b.n	8009ea8 <_puts_r+0x88>
 8009e84:	4b1b      	ldr	r3, [pc, #108]	; (8009ef4 <_puts_r+0xd4>)
 8009e86:	429c      	cmp	r4, r3
 8009e88:	d101      	bne.n	8009e8e <_puts_r+0x6e>
 8009e8a:	68ac      	ldr	r4, [r5, #8]
 8009e8c:	e7da      	b.n	8009e44 <_puts_r+0x24>
 8009e8e:	4b1a      	ldr	r3, [pc, #104]	; (8009ef8 <_puts_r+0xd8>)
 8009e90:	429c      	cmp	r4, r3
 8009e92:	bf08      	it	eq
 8009e94:	68ec      	ldreq	r4, [r5, #12]
 8009e96:	e7d5      	b.n	8009e44 <_puts_r+0x24>
 8009e98:	4621      	mov	r1, r4
 8009e9a:	4628      	mov	r0, r5
 8009e9c:	f000 f888 	bl	8009fb0 <__swsetup_r>
 8009ea0:	2800      	cmp	r0, #0
 8009ea2:	d0dd      	beq.n	8009e60 <_puts_r+0x40>
 8009ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8009ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009eaa:	07da      	lsls	r2, r3, #31
 8009eac:	d405      	bmi.n	8009eba <_puts_r+0x9a>
 8009eae:	89a3      	ldrh	r3, [r4, #12]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	d402      	bmi.n	8009eba <_puts_r+0x9a>
 8009eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009eb6:	f000 faa2 	bl	800a3fe <__retarget_lock_release_recursive>
 8009eba:	4628      	mov	r0, r5
 8009ebc:	bd70      	pop	{r4, r5, r6, pc}
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	da04      	bge.n	8009ecc <_puts_r+0xac>
 8009ec2:	69a2      	ldr	r2, [r4, #24]
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	dc06      	bgt.n	8009ed6 <_puts_r+0xb6>
 8009ec8:	290a      	cmp	r1, #10
 8009eca:	d004      	beq.n	8009ed6 <_puts_r+0xb6>
 8009ecc:	6823      	ldr	r3, [r4, #0]
 8009ece:	1c5a      	adds	r2, r3, #1
 8009ed0:	6022      	str	r2, [r4, #0]
 8009ed2:	7019      	strb	r1, [r3, #0]
 8009ed4:	e7c5      	b.n	8009e62 <_puts_r+0x42>
 8009ed6:	4622      	mov	r2, r4
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f000 f817 	bl	8009f0c <__swbuf_r>
 8009ede:	3001      	adds	r0, #1
 8009ee0:	d1bf      	bne.n	8009e62 <_puts_r+0x42>
 8009ee2:	e7df      	b.n	8009ea4 <_puts_r+0x84>
 8009ee4:	6823      	ldr	r3, [r4, #0]
 8009ee6:	250a      	movs	r5, #10
 8009ee8:	1c5a      	adds	r2, r3, #1
 8009eea:	6022      	str	r2, [r4, #0]
 8009eec:	701d      	strb	r5, [r3, #0]
 8009eee:	e7db      	b.n	8009ea8 <_puts_r+0x88>
 8009ef0:	0800af60 	.word	0x0800af60
 8009ef4:	0800af80 	.word	0x0800af80
 8009ef8:	0800af40 	.word	0x0800af40

08009efc <puts>:
 8009efc:	4b02      	ldr	r3, [pc, #8]	; (8009f08 <puts+0xc>)
 8009efe:	4601      	mov	r1, r0
 8009f00:	6818      	ldr	r0, [r3, #0]
 8009f02:	f7ff bf8d 	b.w	8009e20 <_puts_r>
 8009f06:	bf00      	nop
 8009f08:	20000064 	.word	0x20000064

08009f0c <__swbuf_r>:
 8009f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f0e:	460e      	mov	r6, r1
 8009f10:	4614      	mov	r4, r2
 8009f12:	4605      	mov	r5, r0
 8009f14:	b118      	cbz	r0, 8009f1e <__swbuf_r+0x12>
 8009f16:	6983      	ldr	r3, [r0, #24]
 8009f18:	b90b      	cbnz	r3, 8009f1e <__swbuf_r+0x12>
 8009f1a:	f000 f9d1 	bl	800a2c0 <__sinit>
 8009f1e:	4b21      	ldr	r3, [pc, #132]	; (8009fa4 <__swbuf_r+0x98>)
 8009f20:	429c      	cmp	r4, r3
 8009f22:	d12b      	bne.n	8009f7c <__swbuf_r+0x70>
 8009f24:	686c      	ldr	r4, [r5, #4]
 8009f26:	69a3      	ldr	r3, [r4, #24]
 8009f28:	60a3      	str	r3, [r4, #8]
 8009f2a:	89a3      	ldrh	r3, [r4, #12]
 8009f2c:	071a      	lsls	r2, r3, #28
 8009f2e:	d52f      	bpl.n	8009f90 <__swbuf_r+0x84>
 8009f30:	6923      	ldr	r3, [r4, #16]
 8009f32:	b36b      	cbz	r3, 8009f90 <__swbuf_r+0x84>
 8009f34:	6923      	ldr	r3, [r4, #16]
 8009f36:	6820      	ldr	r0, [r4, #0]
 8009f38:	1ac0      	subs	r0, r0, r3
 8009f3a:	6963      	ldr	r3, [r4, #20]
 8009f3c:	b2f6      	uxtb	r6, r6
 8009f3e:	4283      	cmp	r3, r0
 8009f40:	4637      	mov	r7, r6
 8009f42:	dc04      	bgt.n	8009f4e <__swbuf_r+0x42>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4628      	mov	r0, r5
 8009f48:	f000 f926 	bl	800a198 <_fflush_r>
 8009f4c:	bb30      	cbnz	r0, 8009f9c <__swbuf_r+0x90>
 8009f4e:	68a3      	ldr	r3, [r4, #8]
 8009f50:	3b01      	subs	r3, #1
 8009f52:	60a3      	str	r3, [r4, #8]
 8009f54:	6823      	ldr	r3, [r4, #0]
 8009f56:	1c5a      	adds	r2, r3, #1
 8009f58:	6022      	str	r2, [r4, #0]
 8009f5a:	701e      	strb	r6, [r3, #0]
 8009f5c:	6963      	ldr	r3, [r4, #20]
 8009f5e:	3001      	adds	r0, #1
 8009f60:	4283      	cmp	r3, r0
 8009f62:	d004      	beq.n	8009f6e <__swbuf_r+0x62>
 8009f64:	89a3      	ldrh	r3, [r4, #12]
 8009f66:	07db      	lsls	r3, r3, #31
 8009f68:	d506      	bpl.n	8009f78 <__swbuf_r+0x6c>
 8009f6a:	2e0a      	cmp	r6, #10
 8009f6c:	d104      	bne.n	8009f78 <__swbuf_r+0x6c>
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4628      	mov	r0, r5
 8009f72:	f000 f911 	bl	800a198 <_fflush_r>
 8009f76:	b988      	cbnz	r0, 8009f9c <__swbuf_r+0x90>
 8009f78:	4638      	mov	r0, r7
 8009f7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009f7c:	4b0a      	ldr	r3, [pc, #40]	; (8009fa8 <__swbuf_r+0x9c>)
 8009f7e:	429c      	cmp	r4, r3
 8009f80:	d101      	bne.n	8009f86 <__swbuf_r+0x7a>
 8009f82:	68ac      	ldr	r4, [r5, #8]
 8009f84:	e7cf      	b.n	8009f26 <__swbuf_r+0x1a>
 8009f86:	4b09      	ldr	r3, [pc, #36]	; (8009fac <__swbuf_r+0xa0>)
 8009f88:	429c      	cmp	r4, r3
 8009f8a:	bf08      	it	eq
 8009f8c:	68ec      	ldreq	r4, [r5, #12]
 8009f8e:	e7ca      	b.n	8009f26 <__swbuf_r+0x1a>
 8009f90:	4621      	mov	r1, r4
 8009f92:	4628      	mov	r0, r5
 8009f94:	f000 f80c 	bl	8009fb0 <__swsetup_r>
 8009f98:	2800      	cmp	r0, #0
 8009f9a:	d0cb      	beq.n	8009f34 <__swbuf_r+0x28>
 8009f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8009fa0:	e7ea      	b.n	8009f78 <__swbuf_r+0x6c>
 8009fa2:	bf00      	nop
 8009fa4:	0800af60 	.word	0x0800af60
 8009fa8:	0800af80 	.word	0x0800af80
 8009fac:	0800af40 	.word	0x0800af40

08009fb0 <__swsetup_r>:
 8009fb0:	4b32      	ldr	r3, [pc, #200]	; (800a07c <__swsetup_r+0xcc>)
 8009fb2:	b570      	push	{r4, r5, r6, lr}
 8009fb4:	681d      	ldr	r5, [r3, #0]
 8009fb6:	4606      	mov	r6, r0
 8009fb8:	460c      	mov	r4, r1
 8009fba:	b125      	cbz	r5, 8009fc6 <__swsetup_r+0x16>
 8009fbc:	69ab      	ldr	r3, [r5, #24]
 8009fbe:	b913      	cbnz	r3, 8009fc6 <__swsetup_r+0x16>
 8009fc0:	4628      	mov	r0, r5
 8009fc2:	f000 f97d 	bl	800a2c0 <__sinit>
 8009fc6:	4b2e      	ldr	r3, [pc, #184]	; (800a080 <__swsetup_r+0xd0>)
 8009fc8:	429c      	cmp	r4, r3
 8009fca:	d10f      	bne.n	8009fec <__swsetup_r+0x3c>
 8009fcc:	686c      	ldr	r4, [r5, #4]
 8009fce:	89a3      	ldrh	r3, [r4, #12]
 8009fd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009fd4:	0719      	lsls	r1, r3, #28
 8009fd6:	d42c      	bmi.n	800a032 <__swsetup_r+0x82>
 8009fd8:	06dd      	lsls	r5, r3, #27
 8009fda:	d411      	bmi.n	800a000 <__swsetup_r+0x50>
 8009fdc:	2309      	movs	r3, #9
 8009fde:	6033      	str	r3, [r6, #0]
 8009fe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009fe4:	81a3      	strh	r3, [r4, #12]
 8009fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8009fea:	e03e      	b.n	800a06a <__swsetup_r+0xba>
 8009fec:	4b25      	ldr	r3, [pc, #148]	; (800a084 <__swsetup_r+0xd4>)
 8009fee:	429c      	cmp	r4, r3
 8009ff0:	d101      	bne.n	8009ff6 <__swsetup_r+0x46>
 8009ff2:	68ac      	ldr	r4, [r5, #8]
 8009ff4:	e7eb      	b.n	8009fce <__swsetup_r+0x1e>
 8009ff6:	4b24      	ldr	r3, [pc, #144]	; (800a088 <__swsetup_r+0xd8>)
 8009ff8:	429c      	cmp	r4, r3
 8009ffa:	bf08      	it	eq
 8009ffc:	68ec      	ldreq	r4, [r5, #12]
 8009ffe:	e7e6      	b.n	8009fce <__swsetup_r+0x1e>
 800a000:	0758      	lsls	r0, r3, #29
 800a002:	d512      	bpl.n	800a02a <__swsetup_r+0x7a>
 800a004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a006:	b141      	cbz	r1, 800a01a <__swsetup_r+0x6a>
 800a008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a00c:	4299      	cmp	r1, r3
 800a00e:	d002      	beq.n	800a016 <__swsetup_r+0x66>
 800a010:	4630      	mov	r0, r6
 800a012:	f000 fa5b 	bl	800a4cc <_free_r>
 800a016:	2300      	movs	r3, #0
 800a018:	6363      	str	r3, [r4, #52]	; 0x34
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	2300      	movs	r3, #0
 800a024:	6063      	str	r3, [r4, #4]
 800a026:	6923      	ldr	r3, [r4, #16]
 800a028:	6023      	str	r3, [r4, #0]
 800a02a:	89a3      	ldrh	r3, [r4, #12]
 800a02c:	f043 0308 	orr.w	r3, r3, #8
 800a030:	81a3      	strh	r3, [r4, #12]
 800a032:	6923      	ldr	r3, [r4, #16]
 800a034:	b94b      	cbnz	r3, 800a04a <__swsetup_r+0x9a>
 800a036:	89a3      	ldrh	r3, [r4, #12]
 800a038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a040:	d003      	beq.n	800a04a <__swsetup_r+0x9a>
 800a042:	4621      	mov	r1, r4
 800a044:	4630      	mov	r0, r6
 800a046:	f000 fa01 	bl	800a44c <__smakebuf_r>
 800a04a:	89a0      	ldrh	r0, [r4, #12]
 800a04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a050:	f010 0301 	ands.w	r3, r0, #1
 800a054:	d00a      	beq.n	800a06c <__swsetup_r+0xbc>
 800a056:	2300      	movs	r3, #0
 800a058:	60a3      	str	r3, [r4, #8]
 800a05a:	6963      	ldr	r3, [r4, #20]
 800a05c:	425b      	negs	r3, r3
 800a05e:	61a3      	str	r3, [r4, #24]
 800a060:	6923      	ldr	r3, [r4, #16]
 800a062:	b943      	cbnz	r3, 800a076 <__swsetup_r+0xc6>
 800a064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a068:	d1ba      	bne.n	8009fe0 <__swsetup_r+0x30>
 800a06a:	bd70      	pop	{r4, r5, r6, pc}
 800a06c:	0781      	lsls	r1, r0, #30
 800a06e:	bf58      	it	pl
 800a070:	6963      	ldrpl	r3, [r4, #20]
 800a072:	60a3      	str	r3, [r4, #8]
 800a074:	e7f4      	b.n	800a060 <__swsetup_r+0xb0>
 800a076:	2000      	movs	r0, #0
 800a078:	e7f7      	b.n	800a06a <__swsetup_r+0xba>
 800a07a:	bf00      	nop
 800a07c:	20000064 	.word	0x20000064
 800a080:	0800af60 	.word	0x0800af60
 800a084:	0800af80 	.word	0x0800af80
 800a088:	0800af40 	.word	0x0800af40

0800a08c <__sflush_r>:
 800a08c:	898a      	ldrh	r2, [r1, #12]
 800a08e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a092:	4605      	mov	r5, r0
 800a094:	0710      	lsls	r0, r2, #28
 800a096:	460c      	mov	r4, r1
 800a098:	d458      	bmi.n	800a14c <__sflush_r+0xc0>
 800a09a:	684b      	ldr	r3, [r1, #4]
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	dc05      	bgt.n	800a0ac <__sflush_r+0x20>
 800a0a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	dc02      	bgt.n	800a0ac <__sflush_r+0x20>
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0ae:	2e00      	cmp	r6, #0
 800a0b0:	d0f9      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a0b8:	682f      	ldr	r7, [r5, #0]
 800a0ba:	602b      	str	r3, [r5, #0]
 800a0bc:	d032      	beq.n	800a124 <__sflush_r+0x98>
 800a0be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a0c0:	89a3      	ldrh	r3, [r4, #12]
 800a0c2:	075a      	lsls	r2, r3, #29
 800a0c4:	d505      	bpl.n	800a0d2 <__sflush_r+0x46>
 800a0c6:	6863      	ldr	r3, [r4, #4]
 800a0c8:	1ac0      	subs	r0, r0, r3
 800a0ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a0cc:	b10b      	cbz	r3, 800a0d2 <__sflush_r+0x46>
 800a0ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a0d0:	1ac0      	subs	r0, r0, r3
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4602      	mov	r2, r0
 800a0d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a0d8:	6a21      	ldr	r1, [r4, #32]
 800a0da:	4628      	mov	r0, r5
 800a0dc:	47b0      	blx	r6
 800a0de:	1c43      	adds	r3, r0, #1
 800a0e0:	89a3      	ldrh	r3, [r4, #12]
 800a0e2:	d106      	bne.n	800a0f2 <__sflush_r+0x66>
 800a0e4:	6829      	ldr	r1, [r5, #0]
 800a0e6:	291d      	cmp	r1, #29
 800a0e8:	d82c      	bhi.n	800a144 <__sflush_r+0xb8>
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <__sflush_r+0x108>)
 800a0ec:	40ca      	lsrs	r2, r1
 800a0ee:	07d6      	lsls	r6, r2, #31
 800a0f0:	d528      	bpl.n	800a144 <__sflush_r+0xb8>
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	6062      	str	r2, [r4, #4]
 800a0f6:	04d9      	lsls	r1, r3, #19
 800a0f8:	6922      	ldr	r2, [r4, #16]
 800a0fa:	6022      	str	r2, [r4, #0]
 800a0fc:	d504      	bpl.n	800a108 <__sflush_r+0x7c>
 800a0fe:	1c42      	adds	r2, r0, #1
 800a100:	d101      	bne.n	800a106 <__sflush_r+0x7a>
 800a102:	682b      	ldr	r3, [r5, #0]
 800a104:	b903      	cbnz	r3, 800a108 <__sflush_r+0x7c>
 800a106:	6560      	str	r0, [r4, #84]	; 0x54
 800a108:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a10a:	602f      	str	r7, [r5, #0]
 800a10c:	2900      	cmp	r1, #0
 800a10e:	d0ca      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a114:	4299      	cmp	r1, r3
 800a116:	d002      	beq.n	800a11e <__sflush_r+0x92>
 800a118:	4628      	mov	r0, r5
 800a11a:	f000 f9d7 	bl	800a4cc <_free_r>
 800a11e:	2000      	movs	r0, #0
 800a120:	6360      	str	r0, [r4, #52]	; 0x34
 800a122:	e7c1      	b.n	800a0a8 <__sflush_r+0x1c>
 800a124:	6a21      	ldr	r1, [r4, #32]
 800a126:	2301      	movs	r3, #1
 800a128:	4628      	mov	r0, r5
 800a12a:	47b0      	blx	r6
 800a12c:	1c41      	adds	r1, r0, #1
 800a12e:	d1c7      	bne.n	800a0c0 <__sflush_r+0x34>
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d0c4      	beq.n	800a0c0 <__sflush_r+0x34>
 800a136:	2b1d      	cmp	r3, #29
 800a138:	d001      	beq.n	800a13e <__sflush_r+0xb2>
 800a13a:	2b16      	cmp	r3, #22
 800a13c:	d101      	bne.n	800a142 <__sflush_r+0xb6>
 800a13e:	602f      	str	r7, [r5, #0]
 800a140:	e7b1      	b.n	800a0a6 <__sflush_r+0x1a>
 800a142:	89a3      	ldrh	r3, [r4, #12]
 800a144:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a148:	81a3      	strh	r3, [r4, #12]
 800a14a:	e7ad      	b.n	800a0a8 <__sflush_r+0x1c>
 800a14c:	690f      	ldr	r7, [r1, #16]
 800a14e:	2f00      	cmp	r7, #0
 800a150:	d0a9      	beq.n	800a0a6 <__sflush_r+0x1a>
 800a152:	0793      	lsls	r3, r2, #30
 800a154:	680e      	ldr	r6, [r1, #0]
 800a156:	bf08      	it	eq
 800a158:	694b      	ldreq	r3, [r1, #20]
 800a15a:	600f      	str	r7, [r1, #0]
 800a15c:	bf18      	it	ne
 800a15e:	2300      	movne	r3, #0
 800a160:	eba6 0807 	sub.w	r8, r6, r7
 800a164:	608b      	str	r3, [r1, #8]
 800a166:	f1b8 0f00 	cmp.w	r8, #0
 800a16a:	dd9c      	ble.n	800a0a6 <__sflush_r+0x1a>
 800a16c:	6a21      	ldr	r1, [r4, #32]
 800a16e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a170:	4643      	mov	r3, r8
 800a172:	463a      	mov	r2, r7
 800a174:	4628      	mov	r0, r5
 800a176:	47b0      	blx	r6
 800a178:	2800      	cmp	r0, #0
 800a17a:	dc06      	bgt.n	800a18a <__sflush_r+0xfe>
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a182:	81a3      	strh	r3, [r4, #12]
 800a184:	f04f 30ff 	mov.w	r0, #4294967295
 800a188:	e78e      	b.n	800a0a8 <__sflush_r+0x1c>
 800a18a:	4407      	add	r7, r0
 800a18c:	eba8 0800 	sub.w	r8, r8, r0
 800a190:	e7e9      	b.n	800a166 <__sflush_r+0xda>
 800a192:	bf00      	nop
 800a194:	20400001 	.word	0x20400001

0800a198 <_fflush_r>:
 800a198:	b538      	push	{r3, r4, r5, lr}
 800a19a:	690b      	ldr	r3, [r1, #16]
 800a19c:	4605      	mov	r5, r0
 800a19e:	460c      	mov	r4, r1
 800a1a0:	b913      	cbnz	r3, 800a1a8 <_fflush_r+0x10>
 800a1a2:	2500      	movs	r5, #0
 800a1a4:	4628      	mov	r0, r5
 800a1a6:	bd38      	pop	{r3, r4, r5, pc}
 800a1a8:	b118      	cbz	r0, 800a1b2 <_fflush_r+0x1a>
 800a1aa:	6983      	ldr	r3, [r0, #24]
 800a1ac:	b90b      	cbnz	r3, 800a1b2 <_fflush_r+0x1a>
 800a1ae:	f000 f887 	bl	800a2c0 <__sinit>
 800a1b2:	4b14      	ldr	r3, [pc, #80]	; (800a204 <_fflush_r+0x6c>)
 800a1b4:	429c      	cmp	r4, r3
 800a1b6:	d11b      	bne.n	800a1f0 <_fflush_r+0x58>
 800a1b8:	686c      	ldr	r4, [r5, #4]
 800a1ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d0ef      	beq.n	800a1a2 <_fflush_r+0xa>
 800a1c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a1c4:	07d0      	lsls	r0, r2, #31
 800a1c6:	d404      	bmi.n	800a1d2 <_fflush_r+0x3a>
 800a1c8:	0599      	lsls	r1, r3, #22
 800a1ca:	d402      	bmi.n	800a1d2 <_fflush_r+0x3a>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ce:	f000 f915 	bl	800a3fc <__retarget_lock_acquire_recursive>
 800a1d2:	4628      	mov	r0, r5
 800a1d4:	4621      	mov	r1, r4
 800a1d6:	f7ff ff59 	bl	800a08c <__sflush_r>
 800a1da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1dc:	07da      	lsls	r2, r3, #31
 800a1de:	4605      	mov	r5, r0
 800a1e0:	d4e0      	bmi.n	800a1a4 <_fflush_r+0xc>
 800a1e2:	89a3      	ldrh	r3, [r4, #12]
 800a1e4:	059b      	lsls	r3, r3, #22
 800a1e6:	d4dd      	bmi.n	800a1a4 <_fflush_r+0xc>
 800a1e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1ea:	f000 f908 	bl	800a3fe <__retarget_lock_release_recursive>
 800a1ee:	e7d9      	b.n	800a1a4 <_fflush_r+0xc>
 800a1f0:	4b05      	ldr	r3, [pc, #20]	; (800a208 <_fflush_r+0x70>)
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d101      	bne.n	800a1fa <_fflush_r+0x62>
 800a1f6:	68ac      	ldr	r4, [r5, #8]
 800a1f8:	e7df      	b.n	800a1ba <_fflush_r+0x22>
 800a1fa:	4b04      	ldr	r3, [pc, #16]	; (800a20c <_fflush_r+0x74>)
 800a1fc:	429c      	cmp	r4, r3
 800a1fe:	bf08      	it	eq
 800a200:	68ec      	ldreq	r4, [r5, #12]
 800a202:	e7da      	b.n	800a1ba <_fflush_r+0x22>
 800a204:	0800af60 	.word	0x0800af60
 800a208:	0800af80 	.word	0x0800af80
 800a20c:	0800af40 	.word	0x0800af40

0800a210 <std>:
 800a210:	2300      	movs	r3, #0
 800a212:	b510      	push	{r4, lr}
 800a214:	4604      	mov	r4, r0
 800a216:	e9c0 3300 	strd	r3, r3, [r0]
 800a21a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a21e:	6083      	str	r3, [r0, #8]
 800a220:	8181      	strh	r1, [r0, #12]
 800a222:	6643      	str	r3, [r0, #100]	; 0x64
 800a224:	81c2      	strh	r2, [r0, #14]
 800a226:	6183      	str	r3, [r0, #24]
 800a228:	4619      	mov	r1, r3
 800a22a:	2208      	movs	r2, #8
 800a22c:	305c      	adds	r0, #92	; 0x5c
 800a22e:	f7ff fdd7 	bl	8009de0 <memset>
 800a232:	4b05      	ldr	r3, [pc, #20]	; (800a248 <std+0x38>)
 800a234:	6263      	str	r3, [r4, #36]	; 0x24
 800a236:	4b05      	ldr	r3, [pc, #20]	; (800a24c <std+0x3c>)
 800a238:	62a3      	str	r3, [r4, #40]	; 0x28
 800a23a:	4b05      	ldr	r3, [pc, #20]	; (800a250 <std+0x40>)
 800a23c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <std+0x44>)
 800a240:	6224      	str	r4, [r4, #32]
 800a242:	6323      	str	r3, [r4, #48]	; 0x30
 800a244:	bd10      	pop	{r4, pc}
 800a246:	bf00      	nop
 800a248:	0800ac89 	.word	0x0800ac89
 800a24c:	0800acab 	.word	0x0800acab
 800a250:	0800ace3 	.word	0x0800ace3
 800a254:	0800ad07 	.word	0x0800ad07

0800a258 <_cleanup_r>:
 800a258:	4901      	ldr	r1, [pc, #4]	; (800a260 <_cleanup_r+0x8>)
 800a25a:	f000 b8af 	b.w	800a3bc <_fwalk_reent>
 800a25e:	bf00      	nop
 800a260:	0800a199 	.word	0x0800a199

0800a264 <__sfmoreglue>:
 800a264:	b570      	push	{r4, r5, r6, lr}
 800a266:	2268      	movs	r2, #104	; 0x68
 800a268:	1e4d      	subs	r5, r1, #1
 800a26a:	4355      	muls	r5, r2
 800a26c:	460e      	mov	r6, r1
 800a26e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a272:	f000 f997 	bl	800a5a4 <_malloc_r>
 800a276:	4604      	mov	r4, r0
 800a278:	b140      	cbz	r0, 800a28c <__sfmoreglue+0x28>
 800a27a:	2100      	movs	r1, #0
 800a27c:	e9c0 1600 	strd	r1, r6, [r0]
 800a280:	300c      	adds	r0, #12
 800a282:	60a0      	str	r0, [r4, #8]
 800a284:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a288:	f7ff fdaa 	bl	8009de0 <memset>
 800a28c:	4620      	mov	r0, r4
 800a28e:	bd70      	pop	{r4, r5, r6, pc}

0800a290 <__sfp_lock_acquire>:
 800a290:	4801      	ldr	r0, [pc, #4]	; (800a298 <__sfp_lock_acquire+0x8>)
 800a292:	f000 b8b3 	b.w	800a3fc <__retarget_lock_acquire_recursive>
 800a296:	bf00      	nop
 800a298:	2000055d 	.word	0x2000055d

0800a29c <__sfp_lock_release>:
 800a29c:	4801      	ldr	r0, [pc, #4]	; (800a2a4 <__sfp_lock_release+0x8>)
 800a29e:	f000 b8ae 	b.w	800a3fe <__retarget_lock_release_recursive>
 800a2a2:	bf00      	nop
 800a2a4:	2000055d 	.word	0x2000055d

0800a2a8 <__sinit_lock_acquire>:
 800a2a8:	4801      	ldr	r0, [pc, #4]	; (800a2b0 <__sinit_lock_acquire+0x8>)
 800a2aa:	f000 b8a7 	b.w	800a3fc <__retarget_lock_acquire_recursive>
 800a2ae:	bf00      	nop
 800a2b0:	2000055e 	.word	0x2000055e

0800a2b4 <__sinit_lock_release>:
 800a2b4:	4801      	ldr	r0, [pc, #4]	; (800a2bc <__sinit_lock_release+0x8>)
 800a2b6:	f000 b8a2 	b.w	800a3fe <__retarget_lock_release_recursive>
 800a2ba:	bf00      	nop
 800a2bc:	2000055e 	.word	0x2000055e

0800a2c0 <__sinit>:
 800a2c0:	b510      	push	{r4, lr}
 800a2c2:	4604      	mov	r4, r0
 800a2c4:	f7ff fff0 	bl	800a2a8 <__sinit_lock_acquire>
 800a2c8:	69a3      	ldr	r3, [r4, #24]
 800a2ca:	b11b      	cbz	r3, 800a2d4 <__sinit+0x14>
 800a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2d0:	f7ff bff0 	b.w	800a2b4 <__sinit_lock_release>
 800a2d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a2d8:	6523      	str	r3, [r4, #80]	; 0x50
 800a2da:	4b13      	ldr	r3, [pc, #76]	; (800a328 <__sinit+0x68>)
 800a2dc:	4a13      	ldr	r2, [pc, #76]	; (800a32c <__sinit+0x6c>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	62a2      	str	r2, [r4, #40]	; 0x28
 800a2e2:	42a3      	cmp	r3, r4
 800a2e4:	bf04      	itt	eq
 800a2e6:	2301      	moveq	r3, #1
 800a2e8:	61a3      	streq	r3, [r4, #24]
 800a2ea:	4620      	mov	r0, r4
 800a2ec:	f000 f820 	bl	800a330 <__sfp>
 800a2f0:	6060      	str	r0, [r4, #4]
 800a2f2:	4620      	mov	r0, r4
 800a2f4:	f000 f81c 	bl	800a330 <__sfp>
 800a2f8:	60a0      	str	r0, [r4, #8]
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	f000 f818 	bl	800a330 <__sfp>
 800a300:	2200      	movs	r2, #0
 800a302:	60e0      	str	r0, [r4, #12]
 800a304:	2104      	movs	r1, #4
 800a306:	6860      	ldr	r0, [r4, #4]
 800a308:	f7ff ff82 	bl	800a210 <std>
 800a30c:	68a0      	ldr	r0, [r4, #8]
 800a30e:	2201      	movs	r2, #1
 800a310:	2109      	movs	r1, #9
 800a312:	f7ff ff7d 	bl	800a210 <std>
 800a316:	68e0      	ldr	r0, [r4, #12]
 800a318:	2202      	movs	r2, #2
 800a31a:	2112      	movs	r1, #18
 800a31c:	f7ff ff78 	bl	800a210 <std>
 800a320:	2301      	movs	r3, #1
 800a322:	61a3      	str	r3, [r4, #24]
 800a324:	e7d2      	b.n	800a2cc <__sinit+0xc>
 800a326:	bf00      	nop
 800a328:	0800af3c 	.word	0x0800af3c
 800a32c:	0800a259 	.word	0x0800a259

0800a330 <__sfp>:
 800a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a332:	4607      	mov	r7, r0
 800a334:	f7ff ffac 	bl	800a290 <__sfp_lock_acquire>
 800a338:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <__sfp+0x84>)
 800a33a:	681e      	ldr	r6, [r3, #0]
 800a33c:	69b3      	ldr	r3, [r6, #24]
 800a33e:	b913      	cbnz	r3, 800a346 <__sfp+0x16>
 800a340:	4630      	mov	r0, r6
 800a342:	f7ff ffbd 	bl	800a2c0 <__sinit>
 800a346:	3648      	adds	r6, #72	; 0x48
 800a348:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a34c:	3b01      	subs	r3, #1
 800a34e:	d503      	bpl.n	800a358 <__sfp+0x28>
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	b30b      	cbz	r3, 800a398 <__sfp+0x68>
 800a354:	6836      	ldr	r6, [r6, #0]
 800a356:	e7f7      	b.n	800a348 <__sfp+0x18>
 800a358:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a35c:	b9d5      	cbnz	r5, 800a394 <__sfp+0x64>
 800a35e:	4b16      	ldr	r3, [pc, #88]	; (800a3b8 <__sfp+0x88>)
 800a360:	60e3      	str	r3, [r4, #12]
 800a362:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a366:	6665      	str	r5, [r4, #100]	; 0x64
 800a368:	f000 f847 	bl	800a3fa <__retarget_lock_init_recursive>
 800a36c:	f7ff ff96 	bl	800a29c <__sfp_lock_release>
 800a370:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a374:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a378:	6025      	str	r5, [r4, #0]
 800a37a:	61a5      	str	r5, [r4, #24]
 800a37c:	2208      	movs	r2, #8
 800a37e:	4629      	mov	r1, r5
 800a380:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a384:	f7ff fd2c 	bl	8009de0 <memset>
 800a388:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a38c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a390:	4620      	mov	r0, r4
 800a392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a394:	3468      	adds	r4, #104	; 0x68
 800a396:	e7d9      	b.n	800a34c <__sfp+0x1c>
 800a398:	2104      	movs	r1, #4
 800a39a:	4638      	mov	r0, r7
 800a39c:	f7ff ff62 	bl	800a264 <__sfmoreglue>
 800a3a0:	4604      	mov	r4, r0
 800a3a2:	6030      	str	r0, [r6, #0]
 800a3a4:	2800      	cmp	r0, #0
 800a3a6:	d1d5      	bne.n	800a354 <__sfp+0x24>
 800a3a8:	f7ff ff78 	bl	800a29c <__sfp_lock_release>
 800a3ac:	230c      	movs	r3, #12
 800a3ae:	603b      	str	r3, [r7, #0]
 800a3b0:	e7ee      	b.n	800a390 <__sfp+0x60>
 800a3b2:	bf00      	nop
 800a3b4:	0800af3c 	.word	0x0800af3c
 800a3b8:	ffff0001 	.word	0xffff0001

0800a3bc <_fwalk_reent>:
 800a3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	4688      	mov	r8, r1
 800a3c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a3c8:	2700      	movs	r7, #0
 800a3ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3ce:	f1b9 0901 	subs.w	r9, r9, #1
 800a3d2:	d505      	bpl.n	800a3e0 <_fwalk_reent+0x24>
 800a3d4:	6824      	ldr	r4, [r4, #0]
 800a3d6:	2c00      	cmp	r4, #0
 800a3d8:	d1f7      	bne.n	800a3ca <_fwalk_reent+0xe>
 800a3da:	4638      	mov	r0, r7
 800a3dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3e0:	89ab      	ldrh	r3, [r5, #12]
 800a3e2:	2b01      	cmp	r3, #1
 800a3e4:	d907      	bls.n	800a3f6 <_fwalk_reent+0x3a>
 800a3e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3ea:	3301      	adds	r3, #1
 800a3ec:	d003      	beq.n	800a3f6 <_fwalk_reent+0x3a>
 800a3ee:	4629      	mov	r1, r5
 800a3f0:	4630      	mov	r0, r6
 800a3f2:	47c0      	blx	r8
 800a3f4:	4307      	orrs	r7, r0
 800a3f6:	3568      	adds	r5, #104	; 0x68
 800a3f8:	e7e9      	b.n	800a3ce <_fwalk_reent+0x12>

0800a3fa <__retarget_lock_init_recursive>:
 800a3fa:	4770      	bx	lr

0800a3fc <__retarget_lock_acquire_recursive>:
 800a3fc:	4770      	bx	lr

0800a3fe <__retarget_lock_release_recursive>:
 800a3fe:	4770      	bx	lr

0800a400 <__swhatbuf_r>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	460e      	mov	r6, r1
 800a404:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a408:	2900      	cmp	r1, #0
 800a40a:	b096      	sub	sp, #88	; 0x58
 800a40c:	4614      	mov	r4, r2
 800a40e:	461d      	mov	r5, r3
 800a410:	da08      	bge.n	800a424 <__swhatbuf_r+0x24>
 800a412:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a416:	2200      	movs	r2, #0
 800a418:	602a      	str	r2, [r5, #0]
 800a41a:	061a      	lsls	r2, r3, #24
 800a41c:	d410      	bmi.n	800a440 <__swhatbuf_r+0x40>
 800a41e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a422:	e00e      	b.n	800a442 <__swhatbuf_r+0x42>
 800a424:	466a      	mov	r2, sp
 800a426:	f000 fc95 	bl	800ad54 <_fstat_r>
 800a42a:	2800      	cmp	r0, #0
 800a42c:	dbf1      	blt.n	800a412 <__swhatbuf_r+0x12>
 800a42e:	9a01      	ldr	r2, [sp, #4]
 800a430:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a434:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a438:	425a      	negs	r2, r3
 800a43a:	415a      	adcs	r2, r3
 800a43c:	602a      	str	r2, [r5, #0]
 800a43e:	e7ee      	b.n	800a41e <__swhatbuf_r+0x1e>
 800a440:	2340      	movs	r3, #64	; 0x40
 800a442:	2000      	movs	r0, #0
 800a444:	6023      	str	r3, [r4, #0]
 800a446:	b016      	add	sp, #88	; 0x58
 800a448:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a44c <__smakebuf_r>:
 800a44c:	898b      	ldrh	r3, [r1, #12]
 800a44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a450:	079d      	lsls	r5, r3, #30
 800a452:	4606      	mov	r6, r0
 800a454:	460c      	mov	r4, r1
 800a456:	d507      	bpl.n	800a468 <__smakebuf_r+0x1c>
 800a458:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a45c:	6023      	str	r3, [r4, #0]
 800a45e:	6123      	str	r3, [r4, #16]
 800a460:	2301      	movs	r3, #1
 800a462:	6163      	str	r3, [r4, #20]
 800a464:	b002      	add	sp, #8
 800a466:	bd70      	pop	{r4, r5, r6, pc}
 800a468:	ab01      	add	r3, sp, #4
 800a46a:	466a      	mov	r2, sp
 800a46c:	f7ff ffc8 	bl	800a400 <__swhatbuf_r>
 800a470:	9900      	ldr	r1, [sp, #0]
 800a472:	4605      	mov	r5, r0
 800a474:	4630      	mov	r0, r6
 800a476:	f000 f895 	bl	800a5a4 <_malloc_r>
 800a47a:	b948      	cbnz	r0, 800a490 <__smakebuf_r+0x44>
 800a47c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a480:	059a      	lsls	r2, r3, #22
 800a482:	d4ef      	bmi.n	800a464 <__smakebuf_r+0x18>
 800a484:	f023 0303 	bic.w	r3, r3, #3
 800a488:	f043 0302 	orr.w	r3, r3, #2
 800a48c:	81a3      	strh	r3, [r4, #12]
 800a48e:	e7e3      	b.n	800a458 <__smakebuf_r+0xc>
 800a490:	4b0d      	ldr	r3, [pc, #52]	; (800a4c8 <__smakebuf_r+0x7c>)
 800a492:	62b3      	str	r3, [r6, #40]	; 0x28
 800a494:	89a3      	ldrh	r3, [r4, #12]
 800a496:	6020      	str	r0, [r4, #0]
 800a498:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a49c:	81a3      	strh	r3, [r4, #12]
 800a49e:	9b00      	ldr	r3, [sp, #0]
 800a4a0:	6163      	str	r3, [r4, #20]
 800a4a2:	9b01      	ldr	r3, [sp, #4]
 800a4a4:	6120      	str	r0, [r4, #16]
 800a4a6:	b15b      	cbz	r3, 800a4c0 <__smakebuf_r+0x74>
 800a4a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4ac:	4630      	mov	r0, r6
 800a4ae:	f000 fc63 	bl	800ad78 <_isatty_r>
 800a4b2:	b128      	cbz	r0, 800a4c0 <__smakebuf_r+0x74>
 800a4b4:	89a3      	ldrh	r3, [r4, #12]
 800a4b6:	f023 0303 	bic.w	r3, r3, #3
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	81a3      	strh	r3, [r4, #12]
 800a4c0:	89a0      	ldrh	r0, [r4, #12]
 800a4c2:	4305      	orrs	r5, r0
 800a4c4:	81a5      	strh	r5, [r4, #12]
 800a4c6:	e7cd      	b.n	800a464 <__smakebuf_r+0x18>
 800a4c8:	0800a259 	.word	0x0800a259

0800a4cc <_free_r>:
 800a4cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a4ce:	2900      	cmp	r1, #0
 800a4d0:	d044      	beq.n	800a55c <_free_r+0x90>
 800a4d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4d6:	9001      	str	r0, [sp, #4]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f1a1 0404 	sub.w	r4, r1, #4
 800a4de:	bfb8      	it	lt
 800a4e0:	18e4      	addlt	r4, r4, r3
 800a4e2:	f000 fc6b 	bl	800adbc <__malloc_lock>
 800a4e6:	4a1e      	ldr	r2, [pc, #120]	; (800a560 <_free_r+0x94>)
 800a4e8:	9801      	ldr	r0, [sp, #4]
 800a4ea:	6813      	ldr	r3, [r2, #0]
 800a4ec:	b933      	cbnz	r3, 800a4fc <_free_r+0x30>
 800a4ee:	6063      	str	r3, [r4, #4]
 800a4f0:	6014      	str	r4, [r2, #0]
 800a4f2:	b003      	add	sp, #12
 800a4f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a4f8:	f000 bc66 	b.w	800adc8 <__malloc_unlock>
 800a4fc:	42a3      	cmp	r3, r4
 800a4fe:	d908      	bls.n	800a512 <_free_r+0x46>
 800a500:	6825      	ldr	r5, [r4, #0]
 800a502:	1961      	adds	r1, r4, r5
 800a504:	428b      	cmp	r3, r1
 800a506:	bf01      	itttt	eq
 800a508:	6819      	ldreq	r1, [r3, #0]
 800a50a:	685b      	ldreq	r3, [r3, #4]
 800a50c:	1949      	addeq	r1, r1, r5
 800a50e:	6021      	streq	r1, [r4, #0]
 800a510:	e7ed      	b.n	800a4ee <_free_r+0x22>
 800a512:	461a      	mov	r2, r3
 800a514:	685b      	ldr	r3, [r3, #4]
 800a516:	b10b      	cbz	r3, 800a51c <_free_r+0x50>
 800a518:	42a3      	cmp	r3, r4
 800a51a:	d9fa      	bls.n	800a512 <_free_r+0x46>
 800a51c:	6811      	ldr	r1, [r2, #0]
 800a51e:	1855      	adds	r5, r2, r1
 800a520:	42a5      	cmp	r5, r4
 800a522:	d10b      	bne.n	800a53c <_free_r+0x70>
 800a524:	6824      	ldr	r4, [r4, #0]
 800a526:	4421      	add	r1, r4
 800a528:	1854      	adds	r4, r2, r1
 800a52a:	42a3      	cmp	r3, r4
 800a52c:	6011      	str	r1, [r2, #0]
 800a52e:	d1e0      	bne.n	800a4f2 <_free_r+0x26>
 800a530:	681c      	ldr	r4, [r3, #0]
 800a532:	685b      	ldr	r3, [r3, #4]
 800a534:	6053      	str	r3, [r2, #4]
 800a536:	4421      	add	r1, r4
 800a538:	6011      	str	r1, [r2, #0]
 800a53a:	e7da      	b.n	800a4f2 <_free_r+0x26>
 800a53c:	d902      	bls.n	800a544 <_free_r+0x78>
 800a53e:	230c      	movs	r3, #12
 800a540:	6003      	str	r3, [r0, #0]
 800a542:	e7d6      	b.n	800a4f2 <_free_r+0x26>
 800a544:	6825      	ldr	r5, [r4, #0]
 800a546:	1961      	adds	r1, r4, r5
 800a548:	428b      	cmp	r3, r1
 800a54a:	bf04      	itt	eq
 800a54c:	6819      	ldreq	r1, [r3, #0]
 800a54e:	685b      	ldreq	r3, [r3, #4]
 800a550:	6063      	str	r3, [r4, #4]
 800a552:	bf04      	itt	eq
 800a554:	1949      	addeq	r1, r1, r5
 800a556:	6021      	streq	r1, [r4, #0]
 800a558:	6054      	str	r4, [r2, #4]
 800a55a:	e7ca      	b.n	800a4f2 <_free_r+0x26>
 800a55c:	b003      	add	sp, #12
 800a55e:	bd30      	pop	{r4, r5, pc}
 800a560:	20000560 	.word	0x20000560

0800a564 <sbrk_aligned>:
 800a564:	b570      	push	{r4, r5, r6, lr}
 800a566:	4e0e      	ldr	r6, [pc, #56]	; (800a5a0 <sbrk_aligned+0x3c>)
 800a568:	460c      	mov	r4, r1
 800a56a:	6831      	ldr	r1, [r6, #0]
 800a56c:	4605      	mov	r5, r0
 800a56e:	b911      	cbnz	r1, 800a576 <sbrk_aligned+0x12>
 800a570:	f000 fb7a 	bl	800ac68 <_sbrk_r>
 800a574:	6030      	str	r0, [r6, #0]
 800a576:	4621      	mov	r1, r4
 800a578:	4628      	mov	r0, r5
 800a57a:	f000 fb75 	bl	800ac68 <_sbrk_r>
 800a57e:	1c43      	adds	r3, r0, #1
 800a580:	d00a      	beq.n	800a598 <sbrk_aligned+0x34>
 800a582:	1cc4      	adds	r4, r0, #3
 800a584:	f024 0403 	bic.w	r4, r4, #3
 800a588:	42a0      	cmp	r0, r4
 800a58a:	d007      	beq.n	800a59c <sbrk_aligned+0x38>
 800a58c:	1a21      	subs	r1, r4, r0
 800a58e:	4628      	mov	r0, r5
 800a590:	f000 fb6a 	bl	800ac68 <_sbrk_r>
 800a594:	3001      	adds	r0, #1
 800a596:	d101      	bne.n	800a59c <sbrk_aligned+0x38>
 800a598:	f04f 34ff 	mov.w	r4, #4294967295
 800a59c:	4620      	mov	r0, r4
 800a59e:	bd70      	pop	{r4, r5, r6, pc}
 800a5a0:	20000564 	.word	0x20000564

0800a5a4 <_malloc_r>:
 800a5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5a8:	1ccd      	adds	r5, r1, #3
 800a5aa:	f025 0503 	bic.w	r5, r5, #3
 800a5ae:	3508      	adds	r5, #8
 800a5b0:	2d0c      	cmp	r5, #12
 800a5b2:	bf38      	it	cc
 800a5b4:	250c      	movcc	r5, #12
 800a5b6:	2d00      	cmp	r5, #0
 800a5b8:	4607      	mov	r7, r0
 800a5ba:	db01      	blt.n	800a5c0 <_malloc_r+0x1c>
 800a5bc:	42a9      	cmp	r1, r5
 800a5be:	d905      	bls.n	800a5cc <_malloc_r+0x28>
 800a5c0:	230c      	movs	r3, #12
 800a5c2:	603b      	str	r3, [r7, #0]
 800a5c4:	2600      	movs	r6, #0
 800a5c6:	4630      	mov	r0, r6
 800a5c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5cc:	4e2e      	ldr	r6, [pc, #184]	; (800a688 <_malloc_r+0xe4>)
 800a5ce:	f000 fbf5 	bl	800adbc <__malloc_lock>
 800a5d2:	6833      	ldr	r3, [r6, #0]
 800a5d4:	461c      	mov	r4, r3
 800a5d6:	bb34      	cbnz	r4, 800a626 <_malloc_r+0x82>
 800a5d8:	4629      	mov	r1, r5
 800a5da:	4638      	mov	r0, r7
 800a5dc:	f7ff ffc2 	bl	800a564 <sbrk_aligned>
 800a5e0:	1c43      	adds	r3, r0, #1
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	d14d      	bne.n	800a682 <_malloc_r+0xde>
 800a5e6:	6834      	ldr	r4, [r6, #0]
 800a5e8:	4626      	mov	r6, r4
 800a5ea:	2e00      	cmp	r6, #0
 800a5ec:	d140      	bne.n	800a670 <_malloc_r+0xcc>
 800a5ee:	6823      	ldr	r3, [r4, #0]
 800a5f0:	4631      	mov	r1, r6
 800a5f2:	4638      	mov	r0, r7
 800a5f4:	eb04 0803 	add.w	r8, r4, r3
 800a5f8:	f000 fb36 	bl	800ac68 <_sbrk_r>
 800a5fc:	4580      	cmp	r8, r0
 800a5fe:	d13a      	bne.n	800a676 <_malloc_r+0xd2>
 800a600:	6821      	ldr	r1, [r4, #0]
 800a602:	3503      	adds	r5, #3
 800a604:	1a6d      	subs	r5, r5, r1
 800a606:	f025 0503 	bic.w	r5, r5, #3
 800a60a:	3508      	adds	r5, #8
 800a60c:	2d0c      	cmp	r5, #12
 800a60e:	bf38      	it	cc
 800a610:	250c      	movcc	r5, #12
 800a612:	4629      	mov	r1, r5
 800a614:	4638      	mov	r0, r7
 800a616:	f7ff ffa5 	bl	800a564 <sbrk_aligned>
 800a61a:	3001      	adds	r0, #1
 800a61c:	d02b      	beq.n	800a676 <_malloc_r+0xd2>
 800a61e:	6823      	ldr	r3, [r4, #0]
 800a620:	442b      	add	r3, r5
 800a622:	6023      	str	r3, [r4, #0]
 800a624:	e00e      	b.n	800a644 <_malloc_r+0xa0>
 800a626:	6822      	ldr	r2, [r4, #0]
 800a628:	1b52      	subs	r2, r2, r5
 800a62a:	d41e      	bmi.n	800a66a <_malloc_r+0xc6>
 800a62c:	2a0b      	cmp	r2, #11
 800a62e:	d916      	bls.n	800a65e <_malloc_r+0xba>
 800a630:	1961      	adds	r1, r4, r5
 800a632:	42a3      	cmp	r3, r4
 800a634:	6025      	str	r5, [r4, #0]
 800a636:	bf18      	it	ne
 800a638:	6059      	strne	r1, [r3, #4]
 800a63a:	6863      	ldr	r3, [r4, #4]
 800a63c:	bf08      	it	eq
 800a63e:	6031      	streq	r1, [r6, #0]
 800a640:	5162      	str	r2, [r4, r5]
 800a642:	604b      	str	r3, [r1, #4]
 800a644:	4638      	mov	r0, r7
 800a646:	f104 060b 	add.w	r6, r4, #11
 800a64a:	f000 fbbd 	bl	800adc8 <__malloc_unlock>
 800a64e:	f026 0607 	bic.w	r6, r6, #7
 800a652:	1d23      	adds	r3, r4, #4
 800a654:	1af2      	subs	r2, r6, r3
 800a656:	d0b6      	beq.n	800a5c6 <_malloc_r+0x22>
 800a658:	1b9b      	subs	r3, r3, r6
 800a65a:	50a3      	str	r3, [r4, r2]
 800a65c:	e7b3      	b.n	800a5c6 <_malloc_r+0x22>
 800a65e:	6862      	ldr	r2, [r4, #4]
 800a660:	42a3      	cmp	r3, r4
 800a662:	bf0c      	ite	eq
 800a664:	6032      	streq	r2, [r6, #0]
 800a666:	605a      	strne	r2, [r3, #4]
 800a668:	e7ec      	b.n	800a644 <_malloc_r+0xa0>
 800a66a:	4623      	mov	r3, r4
 800a66c:	6864      	ldr	r4, [r4, #4]
 800a66e:	e7b2      	b.n	800a5d6 <_malloc_r+0x32>
 800a670:	4634      	mov	r4, r6
 800a672:	6876      	ldr	r6, [r6, #4]
 800a674:	e7b9      	b.n	800a5ea <_malloc_r+0x46>
 800a676:	230c      	movs	r3, #12
 800a678:	603b      	str	r3, [r7, #0]
 800a67a:	4638      	mov	r0, r7
 800a67c:	f000 fba4 	bl	800adc8 <__malloc_unlock>
 800a680:	e7a1      	b.n	800a5c6 <_malloc_r+0x22>
 800a682:	6025      	str	r5, [r4, #0]
 800a684:	e7de      	b.n	800a644 <_malloc_r+0xa0>
 800a686:	bf00      	nop
 800a688:	20000560 	.word	0x20000560

0800a68c <__sfputc_r>:
 800a68c:	6893      	ldr	r3, [r2, #8]
 800a68e:	3b01      	subs	r3, #1
 800a690:	2b00      	cmp	r3, #0
 800a692:	b410      	push	{r4}
 800a694:	6093      	str	r3, [r2, #8]
 800a696:	da08      	bge.n	800a6aa <__sfputc_r+0x1e>
 800a698:	6994      	ldr	r4, [r2, #24]
 800a69a:	42a3      	cmp	r3, r4
 800a69c:	db01      	blt.n	800a6a2 <__sfputc_r+0x16>
 800a69e:	290a      	cmp	r1, #10
 800a6a0:	d103      	bne.n	800a6aa <__sfputc_r+0x1e>
 800a6a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a6:	f7ff bc31 	b.w	8009f0c <__swbuf_r>
 800a6aa:	6813      	ldr	r3, [r2, #0]
 800a6ac:	1c58      	adds	r0, r3, #1
 800a6ae:	6010      	str	r0, [r2, #0]
 800a6b0:	7019      	strb	r1, [r3, #0]
 800a6b2:	4608      	mov	r0, r1
 800a6b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b8:	4770      	bx	lr

0800a6ba <__sfputs_r>:
 800a6ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6bc:	4606      	mov	r6, r0
 800a6be:	460f      	mov	r7, r1
 800a6c0:	4614      	mov	r4, r2
 800a6c2:	18d5      	adds	r5, r2, r3
 800a6c4:	42ac      	cmp	r4, r5
 800a6c6:	d101      	bne.n	800a6cc <__sfputs_r+0x12>
 800a6c8:	2000      	movs	r0, #0
 800a6ca:	e007      	b.n	800a6dc <__sfputs_r+0x22>
 800a6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d0:	463a      	mov	r2, r7
 800a6d2:	4630      	mov	r0, r6
 800a6d4:	f7ff ffda 	bl	800a68c <__sfputc_r>
 800a6d8:	1c43      	adds	r3, r0, #1
 800a6da:	d1f3      	bne.n	800a6c4 <__sfputs_r+0xa>
 800a6dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6e0 <_vfiprintf_r>:
 800a6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6e4:	460d      	mov	r5, r1
 800a6e6:	b09d      	sub	sp, #116	; 0x74
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	4698      	mov	r8, r3
 800a6ec:	4606      	mov	r6, r0
 800a6ee:	b118      	cbz	r0, 800a6f8 <_vfiprintf_r+0x18>
 800a6f0:	6983      	ldr	r3, [r0, #24]
 800a6f2:	b90b      	cbnz	r3, 800a6f8 <_vfiprintf_r+0x18>
 800a6f4:	f7ff fde4 	bl	800a2c0 <__sinit>
 800a6f8:	4b89      	ldr	r3, [pc, #548]	; (800a920 <_vfiprintf_r+0x240>)
 800a6fa:	429d      	cmp	r5, r3
 800a6fc:	d11b      	bne.n	800a736 <_vfiprintf_r+0x56>
 800a6fe:	6875      	ldr	r5, [r6, #4]
 800a700:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a702:	07d9      	lsls	r1, r3, #31
 800a704:	d405      	bmi.n	800a712 <_vfiprintf_r+0x32>
 800a706:	89ab      	ldrh	r3, [r5, #12]
 800a708:	059a      	lsls	r2, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_vfiprintf_r+0x32>
 800a70c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a70e:	f7ff fe75 	bl	800a3fc <__retarget_lock_acquire_recursive>
 800a712:	89ab      	ldrh	r3, [r5, #12]
 800a714:	071b      	lsls	r3, r3, #28
 800a716:	d501      	bpl.n	800a71c <_vfiprintf_r+0x3c>
 800a718:	692b      	ldr	r3, [r5, #16]
 800a71a:	b9eb      	cbnz	r3, 800a758 <_vfiprintf_r+0x78>
 800a71c:	4629      	mov	r1, r5
 800a71e:	4630      	mov	r0, r6
 800a720:	f7ff fc46 	bl	8009fb0 <__swsetup_r>
 800a724:	b1c0      	cbz	r0, 800a758 <_vfiprintf_r+0x78>
 800a726:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a728:	07dc      	lsls	r4, r3, #31
 800a72a:	d50e      	bpl.n	800a74a <_vfiprintf_r+0x6a>
 800a72c:	f04f 30ff 	mov.w	r0, #4294967295
 800a730:	b01d      	add	sp, #116	; 0x74
 800a732:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a736:	4b7b      	ldr	r3, [pc, #492]	; (800a924 <_vfiprintf_r+0x244>)
 800a738:	429d      	cmp	r5, r3
 800a73a:	d101      	bne.n	800a740 <_vfiprintf_r+0x60>
 800a73c:	68b5      	ldr	r5, [r6, #8]
 800a73e:	e7df      	b.n	800a700 <_vfiprintf_r+0x20>
 800a740:	4b79      	ldr	r3, [pc, #484]	; (800a928 <_vfiprintf_r+0x248>)
 800a742:	429d      	cmp	r5, r3
 800a744:	bf08      	it	eq
 800a746:	68f5      	ldreq	r5, [r6, #12]
 800a748:	e7da      	b.n	800a700 <_vfiprintf_r+0x20>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	0598      	lsls	r0, r3, #22
 800a74e:	d4ed      	bmi.n	800a72c <_vfiprintf_r+0x4c>
 800a750:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a752:	f7ff fe54 	bl	800a3fe <__retarget_lock_release_recursive>
 800a756:	e7e9      	b.n	800a72c <_vfiprintf_r+0x4c>
 800a758:	2300      	movs	r3, #0
 800a75a:	9309      	str	r3, [sp, #36]	; 0x24
 800a75c:	2320      	movs	r3, #32
 800a75e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a762:	f8cd 800c 	str.w	r8, [sp, #12]
 800a766:	2330      	movs	r3, #48	; 0x30
 800a768:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a92c <_vfiprintf_r+0x24c>
 800a76c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a770:	f04f 0901 	mov.w	r9, #1
 800a774:	4623      	mov	r3, r4
 800a776:	469a      	mov	sl, r3
 800a778:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a77c:	b10a      	cbz	r2, 800a782 <_vfiprintf_r+0xa2>
 800a77e:	2a25      	cmp	r2, #37	; 0x25
 800a780:	d1f9      	bne.n	800a776 <_vfiprintf_r+0x96>
 800a782:	ebba 0b04 	subs.w	fp, sl, r4
 800a786:	d00b      	beq.n	800a7a0 <_vfiprintf_r+0xc0>
 800a788:	465b      	mov	r3, fp
 800a78a:	4622      	mov	r2, r4
 800a78c:	4629      	mov	r1, r5
 800a78e:	4630      	mov	r0, r6
 800a790:	f7ff ff93 	bl	800a6ba <__sfputs_r>
 800a794:	3001      	adds	r0, #1
 800a796:	f000 80aa 	beq.w	800a8ee <_vfiprintf_r+0x20e>
 800a79a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a79c:	445a      	add	r2, fp
 800a79e:	9209      	str	r2, [sp, #36]	; 0x24
 800a7a0:	f89a 3000 	ldrb.w	r3, [sl]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80a2 	beq.w	800a8ee <_vfiprintf_r+0x20e>
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f04f 32ff 	mov.w	r2, #4294967295
 800a7b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7b4:	f10a 0a01 	add.w	sl, sl, #1
 800a7b8:	9304      	str	r3, [sp, #16]
 800a7ba:	9307      	str	r3, [sp, #28]
 800a7bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7c0:	931a      	str	r3, [sp, #104]	; 0x68
 800a7c2:	4654      	mov	r4, sl
 800a7c4:	2205      	movs	r2, #5
 800a7c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7ca:	4858      	ldr	r0, [pc, #352]	; (800a92c <_vfiprintf_r+0x24c>)
 800a7cc:	f7f5 fd20 	bl	8000210 <memchr>
 800a7d0:	9a04      	ldr	r2, [sp, #16]
 800a7d2:	b9d8      	cbnz	r0, 800a80c <_vfiprintf_r+0x12c>
 800a7d4:	06d1      	lsls	r1, r2, #27
 800a7d6:	bf44      	itt	mi
 800a7d8:	2320      	movmi	r3, #32
 800a7da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7de:	0713      	lsls	r3, r2, #28
 800a7e0:	bf44      	itt	mi
 800a7e2:	232b      	movmi	r3, #43	; 0x2b
 800a7e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a7e8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ec:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ee:	d015      	beq.n	800a81c <_vfiprintf_r+0x13c>
 800a7f0:	9a07      	ldr	r2, [sp, #28]
 800a7f2:	4654      	mov	r4, sl
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	f04f 0c0a 	mov.w	ip, #10
 800a7fa:	4621      	mov	r1, r4
 800a7fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a800:	3b30      	subs	r3, #48	; 0x30
 800a802:	2b09      	cmp	r3, #9
 800a804:	d94e      	bls.n	800a8a4 <_vfiprintf_r+0x1c4>
 800a806:	b1b0      	cbz	r0, 800a836 <_vfiprintf_r+0x156>
 800a808:	9207      	str	r2, [sp, #28]
 800a80a:	e014      	b.n	800a836 <_vfiprintf_r+0x156>
 800a80c:	eba0 0308 	sub.w	r3, r0, r8
 800a810:	fa09 f303 	lsl.w	r3, r9, r3
 800a814:	4313      	orrs	r3, r2
 800a816:	9304      	str	r3, [sp, #16]
 800a818:	46a2      	mov	sl, r4
 800a81a:	e7d2      	b.n	800a7c2 <_vfiprintf_r+0xe2>
 800a81c:	9b03      	ldr	r3, [sp, #12]
 800a81e:	1d19      	adds	r1, r3, #4
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	9103      	str	r1, [sp, #12]
 800a824:	2b00      	cmp	r3, #0
 800a826:	bfbb      	ittet	lt
 800a828:	425b      	neglt	r3, r3
 800a82a:	f042 0202 	orrlt.w	r2, r2, #2
 800a82e:	9307      	strge	r3, [sp, #28]
 800a830:	9307      	strlt	r3, [sp, #28]
 800a832:	bfb8      	it	lt
 800a834:	9204      	strlt	r2, [sp, #16]
 800a836:	7823      	ldrb	r3, [r4, #0]
 800a838:	2b2e      	cmp	r3, #46	; 0x2e
 800a83a:	d10c      	bne.n	800a856 <_vfiprintf_r+0x176>
 800a83c:	7863      	ldrb	r3, [r4, #1]
 800a83e:	2b2a      	cmp	r3, #42	; 0x2a
 800a840:	d135      	bne.n	800a8ae <_vfiprintf_r+0x1ce>
 800a842:	9b03      	ldr	r3, [sp, #12]
 800a844:	1d1a      	adds	r2, r3, #4
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	9203      	str	r2, [sp, #12]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	bfb8      	it	lt
 800a84e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a852:	3402      	adds	r4, #2
 800a854:	9305      	str	r3, [sp, #20]
 800a856:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a93c <_vfiprintf_r+0x25c>
 800a85a:	7821      	ldrb	r1, [r4, #0]
 800a85c:	2203      	movs	r2, #3
 800a85e:	4650      	mov	r0, sl
 800a860:	f7f5 fcd6 	bl	8000210 <memchr>
 800a864:	b140      	cbz	r0, 800a878 <_vfiprintf_r+0x198>
 800a866:	2340      	movs	r3, #64	; 0x40
 800a868:	eba0 000a 	sub.w	r0, r0, sl
 800a86c:	fa03 f000 	lsl.w	r0, r3, r0
 800a870:	9b04      	ldr	r3, [sp, #16]
 800a872:	4303      	orrs	r3, r0
 800a874:	3401      	adds	r4, #1
 800a876:	9304      	str	r3, [sp, #16]
 800a878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87c:	482c      	ldr	r0, [pc, #176]	; (800a930 <_vfiprintf_r+0x250>)
 800a87e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a882:	2206      	movs	r2, #6
 800a884:	f7f5 fcc4 	bl	8000210 <memchr>
 800a888:	2800      	cmp	r0, #0
 800a88a:	d03f      	beq.n	800a90c <_vfiprintf_r+0x22c>
 800a88c:	4b29      	ldr	r3, [pc, #164]	; (800a934 <_vfiprintf_r+0x254>)
 800a88e:	bb1b      	cbnz	r3, 800a8d8 <_vfiprintf_r+0x1f8>
 800a890:	9b03      	ldr	r3, [sp, #12]
 800a892:	3307      	adds	r3, #7
 800a894:	f023 0307 	bic.w	r3, r3, #7
 800a898:	3308      	adds	r3, #8
 800a89a:	9303      	str	r3, [sp, #12]
 800a89c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a89e:	443b      	add	r3, r7
 800a8a0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a2:	e767      	b.n	800a774 <_vfiprintf_r+0x94>
 800a8a4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8a8:	460c      	mov	r4, r1
 800a8aa:	2001      	movs	r0, #1
 800a8ac:	e7a5      	b.n	800a7fa <_vfiprintf_r+0x11a>
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	3401      	adds	r4, #1
 800a8b2:	9305      	str	r3, [sp, #20]
 800a8b4:	4619      	mov	r1, r3
 800a8b6:	f04f 0c0a 	mov.w	ip, #10
 800a8ba:	4620      	mov	r0, r4
 800a8bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8c0:	3a30      	subs	r2, #48	; 0x30
 800a8c2:	2a09      	cmp	r2, #9
 800a8c4:	d903      	bls.n	800a8ce <_vfiprintf_r+0x1ee>
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d0c5      	beq.n	800a856 <_vfiprintf_r+0x176>
 800a8ca:	9105      	str	r1, [sp, #20]
 800a8cc:	e7c3      	b.n	800a856 <_vfiprintf_r+0x176>
 800a8ce:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8d2:	4604      	mov	r4, r0
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e7f0      	b.n	800a8ba <_vfiprintf_r+0x1da>
 800a8d8:	ab03      	add	r3, sp, #12
 800a8da:	9300      	str	r3, [sp, #0]
 800a8dc:	462a      	mov	r2, r5
 800a8de:	4b16      	ldr	r3, [pc, #88]	; (800a938 <_vfiprintf_r+0x258>)
 800a8e0:	a904      	add	r1, sp, #16
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f3af 8000 	nop.w
 800a8e8:	4607      	mov	r7, r0
 800a8ea:	1c78      	adds	r0, r7, #1
 800a8ec:	d1d6      	bne.n	800a89c <_vfiprintf_r+0x1bc>
 800a8ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a8f0:	07d9      	lsls	r1, r3, #31
 800a8f2:	d405      	bmi.n	800a900 <_vfiprintf_r+0x220>
 800a8f4:	89ab      	ldrh	r3, [r5, #12]
 800a8f6:	059a      	lsls	r2, r3, #22
 800a8f8:	d402      	bmi.n	800a900 <_vfiprintf_r+0x220>
 800a8fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8fc:	f7ff fd7f 	bl	800a3fe <__retarget_lock_release_recursive>
 800a900:	89ab      	ldrh	r3, [r5, #12]
 800a902:	065b      	lsls	r3, r3, #25
 800a904:	f53f af12 	bmi.w	800a72c <_vfiprintf_r+0x4c>
 800a908:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a90a:	e711      	b.n	800a730 <_vfiprintf_r+0x50>
 800a90c:	ab03      	add	r3, sp, #12
 800a90e:	9300      	str	r3, [sp, #0]
 800a910:	462a      	mov	r2, r5
 800a912:	4b09      	ldr	r3, [pc, #36]	; (800a938 <_vfiprintf_r+0x258>)
 800a914:	a904      	add	r1, sp, #16
 800a916:	4630      	mov	r0, r6
 800a918:	f000 f880 	bl	800aa1c <_printf_i>
 800a91c:	e7e4      	b.n	800a8e8 <_vfiprintf_r+0x208>
 800a91e:	bf00      	nop
 800a920:	0800af60 	.word	0x0800af60
 800a924:	0800af80 	.word	0x0800af80
 800a928:	0800af40 	.word	0x0800af40
 800a92c:	0800afa0 	.word	0x0800afa0
 800a930:	0800afaa 	.word	0x0800afaa
 800a934:	00000000 	.word	0x00000000
 800a938:	0800a6bb 	.word	0x0800a6bb
 800a93c:	0800afa6 	.word	0x0800afa6

0800a940 <_printf_common>:
 800a940:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a944:	4616      	mov	r6, r2
 800a946:	4699      	mov	r9, r3
 800a948:	688a      	ldr	r2, [r1, #8]
 800a94a:	690b      	ldr	r3, [r1, #16]
 800a94c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a950:	4293      	cmp	r3, r2
 800a952:	bfb8      	it	lt
 800a954:	4613      	movlt	r3, r2
 800a956:	6033      	str	r3, [r6, #0]
 800a958:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a95c:	4607      	mov	r7, r0
 800a95e:	460c      	mov	r4, r1
 800a960:	b10a      	cbz	r2, 800a966 <_printf_common+0x26>
 800a962:	3301      	adds	r3, #1
 800a964:	6033      	str	r3, [r6, #0]
 800a966:	6823      	ldr	r3, [r4, #0]
 800a968:	0699      	lsls	r1, r3, #26
 800a96a:	bf42      	ittt	mi
 800a96c:	6833      	ldrmi	r3, [r6, #0]
 800a96e:	3302      	addmi	r3, #2
 800a970:	6033      	strmi	r3, [r6, #0]
 800a972:	6825      	ldr	r5, [r4, #0]
 800a974:	f015 0506 	ands.w	r5, r5, #6
 800a978:	d106      	bne.n	800a988 <_printf_common+0x48>
 800a97a:	f104 0a19 	add.w	sl, r4, #25
 800a97e:	68e3      	ldr	r3, [r4, #12]
 800a980:	6832      	ldr	r2, [r6, #0]
 800a982:	1a9b      	subs	r3, r3, r2
 800a984:	42ab      	cmp	r3, r5
 800a986:	dc26      	bgt.n	800a9d6 <_printf_common+0x96>
 800a988:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a98c:	1e13      	subs	r3, r2, #0
 800a98e:	6822      	ldr	r2, [r4, #0]
 800a990:	bf18      	it	ne
 800a992:	2301      	movne	r3, #1
 800a994:	0692      	lsls	r2, r2, #26
 800a996:	d42b      	bmi.n	800a9f0 <_printf_common+0xb0>
 800a998:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a99c:	4649      	mov	r1, r9
 800a99e:	4638      	mov	r0, r7
 800a9a0:	47c0      	blx	r8
 800a9a2:	3001      	adds	r0, #1
 800a9a4:	d01e      	beq.n	800a9e4 <_printf_common+0xa4>
 800a9a6:	6823      	ldr	r3, [r4, #0]
 800a9a8:	68e5      	ldr	r5, [r4, #12]
 800a9aa:	6832      	ldr	r2, [r6, #0]
 800a9ac:	f003 0306 	and.w	r3, r3, #6
 800a9b0:	2b04      	cmp	r3, #4
 800a9b2:	bf08      	it	eq
 800a9b4:	1aad      	subeq	r5, r5, r2
 800a9b6:	68a3      	ldr	r3, [r4, #8]
 800a9b8:	6922      	ldr	r2, [r4, #16]
 800a9ba:	bf0c      	ite	eq
 800a9bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9c0:	2500      	movne	r5, #0
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	bfc4      	itt	gt
 800a9c6:	1a9b      	subgt	r3, r3, r2
 800a9c8:	18ed      	addgt	r5, r5, r3
 800a9ca:	2600      	movs	r6, #0
 800a9cc:	341a      	adds	r4, #26
 800a9ce:	42b5      	cmp	r5, r6
 800a9d0:	d11a      	bne.n	800aa08 <_printf_common+0xc8>
 800a9d2:	2000      	movs	r0, #0
 800a9d4:	e008      	b.n	800a9e8 <_printf_common+0xa8>
 800a9d6:	2301      	movs	r3, #1
 800a9d8:	4652      	mov	r2, sl
 800a9da:	4649      	mov	r1, r9
 800a9dc:	4638      	mov	r0, r7
 800a9de:	47c0      	blx	r8
 800a9e0:	3001      	adds	r0, #1
 800a9e2:	d103      	bne.n	800a9ec <_printf_common+0xac>
 800a9e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ec:	3501      	adds	r5, #1
 800a9ee:	e7c6      	b.n	800a97e <_printf_common+0x3e>
 800a9f0:	18e1      	adds	r1, r4, r3
 800a9f2:	1c5a      	adds	r2, r3, #1
 800a9f4:	2030      	movs	r0, #48	; 0x30
 800a9f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9fa:	4422      	add	r2, r4
 800a9fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aa00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aa04:	3302      	adds	r3, #2
 800aa06:	e7c7      	b.n	800a998 <_printf_common+0x58>
 800aa08:	2301      	movs	r3, #1
 800aa0a:	4622      	mov	r2, r4
 800aa0c:	4649      	mov	r1, r9
 800aa0e:	4638      	mov	r0, r7
 800aa10:	47c0      	blx	r8
 800aa12:	3001      	adds	r0, #1
 800aa14:	d0e6      	beq.n	800a9e4 <_printf_common+0xa4>
 800aa16:	3601      	adds	r6, #1
 800aa18:	e7d9      	b.n	800a9ce <_printf_common+0x8e>
	...

0800aa1c <_printf_i>:
 800aa1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa20:	7e0f      	ldrb	r7, [r1, #24]
 800aa22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa24:	2f78      	cmp	r7, #120	; 0x78
 800aa26:	4691      	mov	r9, r2
 800aa28:	4680      	mov	r8, r0
 800aa2a:	460c      	mov	r4, r1
 800aa2c:	469a      	mov	sl, r3
 800aa2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa32:	d807      	bhi.n	800aa44 <_printf_i+0x28>
 800aa34:	2f62      	cmp	r7, #98	; 0x62
 800aa36:	d80a      	bhi.n	800aa4e <_printf_i+0x32>
 800aa38:	2f00      	cmp	r7, #0
 800aa3a:	f000 80d8 	beq.w	800abee <_printf_i+0x1d2>
 800aa3e:	2f58      	cmp	r7, #88	; 0x58
 800aa40:	f000 80a3 	beq.w	800ab8a <_printf_i+0x16e>
 800aa44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa4c:	e03a      	b.n	800aac4 <_printf_i+0xa8>
 800aa4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa52:	2b15      	cmp	r3, #21
 800aa54:	d8f6      	bhi.n	800aa44 <_printf_i+0x28>
 800aa56:	a101      	add	r1, pc, #4	; (adr r1, 800aa5c <_printf_i+0x40>)
 800aa58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa5c:	0800aab5 	.word	0x0800aab5
 800aa60:	0800aac9 	.word	0x0800aac9
 800aa64:	0800aa45 	.word	0x0800aa45
 800aa68:	0800aa45 	.word	0x0800aa45
 800aa6c:	0800aa45 	.word	0x0800aa45
 800aa70:	0800aa45 	.word	0x0800aa45
 800aa74:	0800aac9 	.word	0x0800aac9
 800aa78:	0800aa45 	.word	0x0800aa45
 800aa7c:	0800aa45 	.word	0x0800aa45
 800aa80:	0800aa45 	.word	0x0800aa45
 800aa84:	0800aa45 	.word	0x0800aa45
 800aa88:	0800abd5 	.word	0x0800abd5
 800aa8c:	0800aaf9 	.word	0x0800aaf9
 800aa90:	0800abb7 	.word	0x0800abb7
 800aa94:	0800aa45 	.word	0x0800aa45
 800aa98:	0800aa45 	.word	0x0800aa45
 800aa9c:	0800abf7 	.word	0x0800abf7
 800aaa0:	0800aa45 	.word	0x0800aa45
 800aaa4:	0800aaf9 	.word	0x0800aaf9
 800aaa8:	0800aa45 	.word	0x0800aa45
 800aaac:	0800aa45 	.word	0x0800aa45
 800aab0:	0800abbf 	.word	0x0800abbf
 800aab4:	682b      	ldr	r3, [r5, #0]
 800aab6:	1d1a      	adds	r2, r3, #4
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	602a      	str	r2, [r5, #0]
 800aabc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aac0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aac4:	2301      	movs	r3, #1
 800aac6:	e0a3      	b.n	800ac10 <_printf_i+0x1f4>
 800aac8:	6820      	ldr	r0, [r4, #0]
 800aaca:	6829      	ldr	r1, [r5, #0]
 800aacc:	0606      	lsls	r6, r0, #24
 800aace:	f101 0304 	add.w	r3, r1, #4
 800aad2:	d50a      	bpl.n	800aaea <_printf_i+0xce>
 800aad4:	680e      	ldr	r6, [r1, #0]
 800aad6:	602b      	str	r3, [r5, #0]
 800aad8:	2e00      	cmp	r6, #0
 800aada:	da03      	bge.n	800aae4 <_printf_i+0xc8>
 800aadc:	232d      	movs	r3, #45	; 0x2d
 800aade:	4276      	negs	r6, r6
 800aae0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aae4:	485e      	ldr	r0, [pc, #376]	; (800ac60 <_printf_i+0x244>)
 800aae6:	230a      	movs	r3, #10
 800aae8:	e019      	b.n	800ab1e <_printf_i+0x102>
 800aaea:	680e      	ldr	r6, [r1, #0]
 800aaec:	602b      	str	r3, [r5, #0]
 800aaee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aaf2:	bf18      	it	ne
 800aaf4:	b236      	sxthne	r6, r6
 800aaf6:	e7ef      	b.n	800aad8 <_printf_i+0xbc>
 800aaf8:	682b      	ldr	r3, [r5, #0]
 800aafa:	6820      	ldr	r0, [r4, #0]
 800aafc:	1d19      	adds	r1, r3, #4
 800aafe:	6029      	str	r1, [r5, #0]
 800ab00:	0601      	lsls	r1, r0, #24
 800ab02:	d501      	bpl.n	800ab08 <_printf_i+0xec>
 800ab04:	681e      	ldr	r6, [r3, #0]
 800ab06:	e002      	b.n	800ab0e <_printf_i+0xf2>
 800ab08:	0646      	lsls	r6, r0, #25
 800ab0a:	d5fb      	bpl.n	800ab04 <_printf_i+0xe8>
 800ab0c:	881e      	ldrh	r6, [r3, #0]
 800ab0e:	4854      	ldr	r0, [pc, #336]	; (800ac60 <_printf_i+0x244>)
 800ab10:	2f6f      	cmp	r7, #111	; 0x6f
 800ab12:	bf0c      	ite	eq
 800ab14:	2308      	moveq	r3, #8
 800ab16:	230a      	movne	r3, #10
 800ab18:	2100      	movs	r1, #0
 800ab1a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab1e:	6865      	ldr	r5, [r4, #4]
 800ab20:	60a5      	str	r5, [r4, #8]
 800ab22:	2d00      	cmp	r5, #0
 800ab24:	bfa2      	ittt	ge
 800ab26:	6821      	ldrge	r1, [r4, #0]
 800ab28:	f021 0104 	bicge.w	r1, r1, #4
 800ab2c:	6021      	strge	r1, [r4, #0]
 800ab2e:	b90e      	cbnz	r6, 800ab34 <_printf_i+0x118>
 800ab30:	2d00      	cmp	r5, #0
 800ab32:	d04d      	beq.n	800abd0 <_printf_i+0x1b4>
 800ab34:	4615      	mov	r5, r2
 800ab36:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab3a:	fb03 6711 	mls	r7, r3, r1, r6
 800ab3e:	5dc7      	ldrb	r7, [r0, r7]
 800ab40:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab44:	4637      	mov	r7, r6
 800ab46:	42bb      	cmp	r3, r7
 800ab48:	460e      	mov	r6, r1
 800ab4a:	d9f4      	bls.n	800ab36 <_printf_i+0x11a>
 800ab4c:	2b08      	cmp	r3, #8
 800ab4e:	d10b      	bne.n	800ab68 <_printf_i+0x14c>
 800ab50:	6823      	ldr	r3, [r4, #0]
 800ab52:	07de      	lsls	r6, r3, #31
 800ab54:	d508      	bpl.n	800ab68 <_printf_i+0x14c>
 800ab56:	6923      	ldr	r3, [r4, #16]
 800ab58:	6861      	ldr	r1, [r4, #4]
 800ab5a:	4299      	cmp	r1, r3
 800ab5c:	bfde      	ittt	le
 800ab5e:	2330      	movle	r3, #48	; 0x30
 800ab60:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab64:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab68:	1b52      	subs	r2, r2, r5
 800ab6a:	6122      	str	r2, [r4, #16]
 800ab6c:	f8cd a000 	str.w	sl, [sp]
 800ab70:	464b      	mov	r3, r9
 800ab72:	aa03      	add	r2, sp, #12
 800ab74:	4621      	mov	r1, r4
 800ab76:	4640      	mov	r0, r8
 800ab78:	f7ff fee2 	bl	800a940 <_printf_common>
 800ab7c:	3001      	adds	r0, #1
 800ab7e:	d14c      	bne.n	800ac1a <_printf_i+0x1fe>
 800ab80:	f04f 30ff 	mov.w	r0, #4294967295
 800ab84:	b004      	add	sp, #16
 800ab86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab8a:	4835      	ldr	r0, [pc, #212]	; (800ac60 <_printf_i+0x244>)
 800ab8c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ab90:	6829      	ldr	r1, [r5, #0]
 800ab92:	6823      	ldr	r3, [r4, #0]
 800ab94:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab98:	6029      	str	r1, [r5, #0]
 800ab9a:	061d      	lsls	r5, r3, #24
 800ab9c:	d514      	bpl.n	800abc8 <_printf_i+0x1ac>
 800ab9e:	07df      	lsls	r7, r3, #31
 800aba0:	bf44      	itt	mi
 800aba2:	f043 0320 	orrmi.w	r3, r3, #32
 800aba6:	6023      	strmi	r3, [r4, #0]
 800aba8:	b91e      	cbnz	r6, 800abb2 <_printf_i+0x196>
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f023 0320 	bic.w	r3, r3, #32
 800abb0:	6023      	str	r3, [r4, #0]
 800abb2:	2310      	movs	r3, #16
 800abb4:	e7b0      	b.n	800ab18 <_printf_i+0xfc>
 800abb6:	6823      	ldr	r3, [r4, #0]
 800abb8:	f043 0320 	orr.w	r3, r3, #32
 800abbc:	6023      	str	r3, [r4, #0]
 800abbe:	2378      	movs	r3, #120	; 0x78
 800abc0:	4828      	ldr	r0, [pc, #160]	; (800ac64 <_printf_i+0x248>)
 800abc2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800abc6:	e7e3      	b.n	800ab90 <_printf_i+0x174>
 800abc8:	0659      	lsls	r1, r3, #25
 800abca:	bf48      	it	mi
 800abcc:	b2b6      	uxthmi	r6, r6
 800abce:	e7e6      	b.n	800ab9e <_printf_i+0x182>
 800abd0:	4615      	mov	r5, r2
 800abd2:	e7bb      	b.n	800ab4c <_printf_i+0x130>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	6826      	ldr	r6, [r4, #0]
 800abd8:	6961      	ldr	r1, [r4, #20]
 800abda:	1d18      	adds	r0, r3, #4
 800abdc:	6028      	str	r0, [r5, #0]
 800abde:	0635      	lsls	r5, r6, #24
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	d501      	bpl.n	800abe8 <_printf_i+0x1cc>
 800abe4:	6019      	str	r1, [r3, #0]
 800abe6:	e002      	b.n	800abee <_printf_i+0x1d2>
 800abe8:	0670      	lsls	r0, r6, #25
 800abea:	d5fb      	bpl.n	800abe4 <_printf_i+0x1c8>
 800abec:	8019      	strh	r1, [r3, #0]
 800abee:	2300      	movs	r3, #0
 800abf0:	6123      	str	r3, [r4, #16]
 800abf2:	4615      	mov	r5, r2
 800abf4:	e7ba      	b.n	800ab6c <_printf_i+0x150>
 800abf6:	682b      	ldr	r3, [r5, #0]
 800abf8:	1d1a      	adds	r2, r3, #4
 800abfa:	602a      	str	r2, [r5, #0]
 800abfc:	681d      	ldr	r5, [r3, #0]
 800abfe:	6862      	ldr	r2, [r4, #4]
 800ac00:	2100      	movs	r1, #0
 800ac02:	4628      	mov	r0, r5
 800ac04:	f7f5 fb04 	bl	8000210 <memchr>
 800ac08:	b108      	cbz	r0, 800ac0e <_printf_i+0x1f2>
 800ac0a:	1b40      	subs	r0, r0, r5
 800ac0c:	6060      	str	r0, [r4, #4]
 800ac0e:	6863      	ldr	r3, [r4, #4]
 800ac10:	6123      	str	r3, [r4, #16]
 800ac12:	2300      	movs	r3, #0
 800ac14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac18:	e7a8      	b.n	800ab6c <_printf_i+0x150>
 800ac1a:	6923      	ldr	r3, [r4, #16]
 800ac1c:	462a      	mov	r2, r5
 800ac1e:	4649      	mov	r1, r9
 800ac20:	4640      	mov	r0, r8
 800ac22:	47d0      	blx	sl
 800ac24:	3001      	adds	r0, #1
 800ac26:	d0ab      	beq.n	800ab80 <_printf_i+0x164>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	079b      	lsls	r3, r3, #30
 800ac2c:	d413      	bmi.n	800ac56 <_printf_i+0x23a>
 800ac2e:	68e0      	ldr	r0, [r4, #12]
 800ac30:	9b03      	ldr	r3, [sp, #12]
 800ac32:	4298      	cmp	r0, r3
 800ac34:	bfb8      	it	lt
 800ac36:	4618      	movlt	r0, r3
 800ac38:	e7a4      	b.n	800ab84 <_printf_i+0x168>
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	4632      	mov	r2, r6
 800ac3e:	4649      	mov	r1, r9
 800ac40:	4640      	mov	r0, r8
 800ac42:	47d0      	blx	sl
 800ac44:	3001      	adds	r0, #1
 800ac46:	d09b      	beq.n	800ab80 <_printf_i+0x164>
 800ac48:	3501      	adds	r5, #1
 800ac4a:	68e3      	ldr	r3, [r4, #12]
 800ac4c:	9903      	ldr	r1, [sp, #12]
 800ac4e:	1a5b      	subs	r3, r3, r1
 800ac50:	42ab      	cmp	r3, r5
 800ac52:	dcf2      	bgt.n	800ac3a <_printf_i+0x21e>
 800ac54:	e7eb      	b.n	800ac2e <_printf_i+0x212>
 800ac56:	2500      	movs	r5, #0
 800ac58:	f104 0619 	add.w	r6, r4, #25
 800ac5c:	e7f5      	b.n	800ac4a <_printf_i+0x22e>
 800ac5e:	bf00      	nop
 800ac60:	0800afb1 	.word	0x0800afb1
 800ac64:	0800afc2 	.word	0x0800afc2

0800ac68 <_sbrk_r>:
 800ac68:	b538      	push	{r3, r4, r5, lr}
 800ac6a:	4d06      	ldr	r5, [pc, #24]	; (800ac84 <_sbrk_r+0x1c>)
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	4604      	mov	r4, r0
 800ac70:	4608      	mov	r0, r1
 800ac72:	602b      	str	r3, [r5, #0]
 800ac74:	f7fa f86c 	bl	8004d50 <_sbrk>
 800ac78:	1c43      	adds	r3, r0, #1
 800ac7a:	d102      	bne.n	800ac82 <_sbrk_r+0x1a>
 800ac7c:	682b      	ldr	r3, [r5, #0]
 800ac7e:	b103      	cbz	r3, 800ac82 <_sbrk_r+0x1a>
 800ac80:	6023      	str	r3, [r4, #0]
 800ac82:	bd38      	pop	{r3, r4, r5, pc}
 800ac84:	20000568 	.word	0x20000568

0800ac88 <__sread>:
 800ac88:	b510      	push	{r4, lr}
 800ac8a:	460c      	mov	r4, r1
 800ac8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac90:	f000 f8a0 	bl	800add4 <_read_r>
 800ac94:	2800      	cmp	r0, #0
 800ac96:	bfab      	itete	ge
 800ac98:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ac9a:	89a3      	ldrhlt	r3, [r4, #12]
 800ac9c:	181b      	addge	r3, r3, r0
 800ac9e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aca2:	bfac      	ite	ge
 800aca4:	6563      	strge	r3, [r4, #84]	; 0x54
 800aca6:	81a3      	strhlt	r3, [r4, #12]
 800aca8:	bd10      	pop	{r4, pc}

0800acaa <__swrite>:
 800acaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800acae:	461f      	mov	r7, r3
 800acb0:	898b      	ldrh	r3, [r1, #12]
 800acb2:	05db      	lsls	r3, r3, #23
 800acb4:	4605      	mov	r5, r0
 800acb6:	460c      	mov	r4, r1
 800acb8:	4616      	mov	r6, r2
 800acba:	d505      	bpl.n	800acc8 <__swrite+0x1e>
 800acbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acc0:	2302      	movs	r3, #2
 800acc2:	2200      	movs	r2, #0
 800acc4:	f000 f868 	bl	800ad98 <_lseek_r>
 800acc8:	89a3      	ldrh	r3, [r4, #12]
 800acca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800acd2:	81a3      	strh	r3, [r4, #12]
 800acd4:	4632      	mov	r2, r6
 800acd6:	463b      	mov	r3, r7
 800acd8:	4628      	mov	r0, r5
 800acda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800acde:	f000 b817 	b.w	800ad10 <_write_r>

0800ace2 <__sseek>:
 800ace2:	b510      	push	{r4, lr}
 800ace4:	460c      	mov	r4, r1
 800ace6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800acea:	f000 f855 	bl	800ad98 <_lseek_r>
 800acee:	1c43      	adds	r3, r0, #1
 800acf0:	89a3      	ldrh	r3, [r4, #12]
 800acf2:	bf15      	itete	ne
 800acf4:	6560      	strne	r0, [r4, #84]	; 0x54
 800acf6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800acfa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800acfe:	81a3      	strheq	r3, [r4, #12]
 800ad00:	bf18      	it	ne
 800ad02:	81a3      	strhne	r3, [r4, #12]
 800ad04:	bd10      	pop	{r4, pc}

0800ad06 <__sclose>:
 800ad06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad0a:	f000 b813 	b.w	800ad34 <_close_r>
	...

0800ad10 <_write_r>:
 800ad10:	b538      	push	{r3, r4, r5, lr}
 800ad12:	4d07      	ldr	r5, [pc, #28]	; (800ad30 <_write_r+0x20>)
 800ad14:	4604      	mov	r4, r0
 800ad16:	4608      	mov	r0, r1
 800ad18:	4611      	mov	r1, r2
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	602a      	str	r2, [r5, #0]
 800ad1e:	461a      	mov	r2, r3
 800ad20:	f7f8 fa3b 	bl	800319a <_write>
 800ad24:	1c43      	adds	r3, r0, #1
 800ad26:	d102      	bne.n	800ad2e <_write_r+0x1e>
 800ad28:	682b      	ldr	r3, [r5, #0]
 800ad2a:	b103      	cbz	r3, 800ad2e <_write_r+0x1e>
 800ad2c:	6023      	str	r3, [r4, #0]
 800ad2e:	bd38      	pop	{r3, r4, r5, pc}
 800ad30:	20000568 	.word	0x20000568

0800ad34 <_close_r>:
 800ad34:	b538      	push	{r3, r4, r5, lr}
 800ad36:	4d06      	ldr	r5, [pc, #24]	; (800ad50 <_close_r+0x1c>)
 800ad38:	2300      	movs	r3, #0
 800ad3a:	4604      	mov	r4, r0
 800ad3c:	4608      	mov	r0, r1
 800ad3e:	602b      	str	r3, [r5, #0]
 800ad40:	f7f9 ffd1 	bl	8004ce6 <_close>
 800ad44:	1c43      	adds	r3, r0, #1
 800ad46:	d102      	bne.n	800ad4e <_close_r+0x1a>
 800ad48:	682b      	ldr	r3, [r5, #0]
 800ad4a:	b103      	cbz	r3, 800ad4e <_close_r+0x1a>
 800ad4c:	6023      	str	r3, [r4, #0]
 800ad4e:	bd38      	pop	{r3, r4, r5, pc}
 800ad50:	20000568 	.word	0x20000568

0800ad54 <_fstat_r>:
 800ad54:	b538      	push	{r3, r4, r5, lr}
 800ad56:	4d07      	ldr	r5, [pc, #28]	; (800ad74 <_fstat_r+0x20>)
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4604      	mov	r4, r0
 800ad5c:	4608      	mov	r0, r1
 800ad5e:	4611      	mov	r1, r2
 800ad60:	602b      	str	r3, [r5, #0]
 800ad62:	f7f9 ffcc 	bl	8004cfe <_fstat>
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d102      	bne.n	800ad70 <_fstat_r+0x1c>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	b103      	cbz	r3, 800ad70 <_fstat_r+0x1c>
 800ad6e:	6023      	str	r3, [r4, #0]
 800ad70:	bd38      	pop	{r3, r4, r5, pc}
 800ad72:	bf00      	nop
 800ad74:	20000568 	.word	0x20000568

0800ad78 <_isatty_r>:
 800ad78:	b538      	push	{r3, r4, r5, lr}
 800ad7a:	4d06      	ldr	r5, [pc, #24]	; (800ad94 <_isatty_r+0x1c>)
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4604      	mov	r4, r0
 800ad80:	4608      	mov	r0, r1
 800ad82:	602b      	str	r3, [r5, #0]
 800ad84:	f7f9 ffcb 	bl	8004d1e <_isatty>
 800ad88:	1c43      	adds	r3, r0, #1
 800ad8a:	d102      	bne.n	800ad92 <_isatty_r+0x1a>
 800ad8c:	682b      	ldr	r3, [r5, #0]
 800ad8e:	b103      	cbz	r3, 800ad92 <_isatty_r+0x1a>
 800ad90:	6023      	str	r3, [r4, #0]
 800ad92:	bd38      	pop	{r3, r4, r5, pc}
 800ad94:	20000568 	.word	0x20000568

0800ad98 <_lseek_r>:
 800ad98:	b538      	push	{r3, r4, r5, lr}
 800ad9a:	4d07      	ldr	r5, [pc, #28]	; (800adb8 <_lseek_r+0x20>)
 800ad9c:	4604      	mov	r4, r0
 800ad9e:	4608      	mov	r0, r1
 800ada0:	4611      	mov	r1, r2
 800ada2:	2200      	movs	r2, #0
 800ada4:	602a      	str	r2, [r5, #0]
 800ada6:	461a      	mov	r2, r3
 800ada8:	f7f9 ffc4 	bl	8004d34 <_lseek>
 800adac:	1c43      	adds	r3, r0, #1
 800adae:	d102      	bne.n	800adb6 <_lseek_r+0x1e>
 800adb0:	682b      	ldr	r3, [r5, #0]
 800adb2:	b103      	cbz	r3, 800adb6 <_lseek_r+0x1e>
 800adb4:	6023      	str	r3, [r4, #0]
 800adb6:	bd38      	pop	{r3, r4, r5, pc}
 800adb8:	20000568 	.word	0x20000568

0800adbc <__malloc_lock>:
 800adbc:	4801      	ldr	r0, [pc, #4]	; (800adc4 <__malloc_lock+0x8>)
 800adbe:	f7ff bb1d 	b.w	800a3fc <__retarget_lock_acquire_recursive>
 800adc2:	bf00      	nop
 800adc4:	2000055c 	.word	0x2000055c

0800adc8 <__malloc_unlock>:
 800adc8:	4801      	ldr	r0, [pc, #4]	; (800add0 <__malloc_unlock+0x8>)
 800adca:	f7ff bb18 	b.w	800a3fe <__retarget_lock_release_recursive>
 800adce:	bf00      	nop
 800add0:	2000055c 	.word	0x2000055c

0800add4 <_read_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	; (800adf4 <_read_r+0x20>)
 800add8:	4604      	mov	r4, r0
 800adda:	4608      	mov	r0, r1
 800addc:	4611      	mov	r1, r2
 800adde:	2200      	movs	r2, #0
 800ade0:	602a      	str	r2, [r5, #0]
 800ade2:	461a      	mov	r2, r3
 800ade4:	f7f9 ff62 	bl	8004cac <_read>
 800ade8:	1c43      	adds	r3, r0, #1
 800adea:	d102      	bne.n	800adf2 <_read_r+0x1e>
 800adec:	682b      	ldr	r3, [r5, #0]
 800adee:	b103      	cbz	r3, 800adf2 <_read_r+0x1e>
 800adf0:	6023      	str	r3, [r4, #0]
 800adf2:	bd38      	pop	{r3, r4, r5, pc}
 800adf4:	20000568 	.word	0x20000568

0800adf8 <_init>:
 800adf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adfa:	bf00      	nop
 800adfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800adfe:	bc08      	pop	{r3}
 800ae00:	469e      	mov	lr, r3
 800ae02:	4770      	bx	lr

0800ae04 <_fini>:
 800ae04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae06:	bf00      	nop
 800ae08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ae0a:	bc08      	pop	{r3}
 800ae0c:	469e      	mov	lr, r3
 800ae0e:	4770      	bx	lr
