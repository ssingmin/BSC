
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aa7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000144  0800ac4c  0800ac4c  0001ac4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ad98  0800ad98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad98  0800ad98  0001ad98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad9c  0800ad9c  0001ad9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800ada0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  20000080  0800ae20  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  0800ae20  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000171e2  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000322b  00000000  00000000  00037292  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  0003a4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010d0  00000000  00000000  0003b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000282fc  00000000  00000000  0003c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000167b6  00000000  00000000  00064a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f552e  00000000  00000000  0007b242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00170770  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005418  00000000  00000000  001707c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000080 	.word	0x20000080
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ac34 	.word	0x0800ac34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000084 	.word	0x20000084
 800020c:	0800ac34 	.word	0x0800ac34

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2uiz>:
 8000bac:	004a      	lsls	r2, r1, #1
 8000bae:	d211      	bcs.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb4:	d211      	bcs.n	8000bda <__aeabi_d2uiz+0x2e>
 8000bb6:	d50d      	bpl.n	8000bd4 <__aeabi_d2uiz+0x28>
 8000bb8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bbc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc0:	d40e      	bmi.n	8000be0 <__aeabi_d2uiz+0x34>
 8000bc2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	4770      	bx	lr
 8000bd4:	f04f 0000 	mov.w	r0, #0
 8000bd8:	4770      	bx	lr
 8000bda:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bde:	d102      	bne.n	8000be6 <__aeabi_d2uiz+0x3a>
 8000be0:	f04f 30ff 	mov.w	r0, #4294967295
 8000be4:	4770      	bx	lr
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	4770      	bx	lr

08000bec <__aeabi_uldivmod>:
 8000bec:	b953      	cbnz	r3, 8000c04 <__aeabi_uldivmod+0x18>
 8000bee:	b94a      	cbnz	r2, 8000c04 <__aeabi_uldivmod+0x18>
 8000bf0:	2900      	cmp	r1, #0
 8000bf2:	bf08      	it	eq
 8000bf4:	2800      	cmpeq	r0, #0
 8000bf6:	bf1c      	itt	ne
 8000bf8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bfc:	f04f 30ff 	movne.w	r0, #4294967295
 8000c00:	f000 b974 	b.w	8000eec <__aeabi_idiv0>
 8000c04:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c08:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c0c:	f000 f806 	bl	8000c1c <__udivmoddi4>
 8000c10:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c14:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c18:	b004      	add	sp, #16
 8000c1a:	4770      	bx	lr

08000c1c <__udivmoddi4>:
 8000c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c20:	9d08      	ldr	r5, [sp, #32]
 8000c22:	4604      	mov	r4, r0
 8000c24:	468e      	mov	lr, r1
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d14d      	bne.n	8000cc6 <__udivmoddi4+0xaa>
 8000c2a:	428a      	cmp	r2, r1
 8000c2c:	4694      	mov	ip, r2
 8000c2e:	d969      	bls.n	8000d04 <__udivmoddi4+0xe8>
 8000c30:	fab2 f282 	clz	r2, r2
 8000c34:	b152      	cbz	r2, 8000c4c <__udivmoddi4+0x30>
 8000c36:	fa01 f302 	lsl.w	r3, r1, r2
 8000c3a:	f1c2 0120 	rsb	r1, r2, #32
 8000c3e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c42:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c46:	ea41 0e03 	orr.w	lr, r1, r3
 8000c4a:	4094      	lsls	r4, r2
 8000c4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c50:	0c21      	lsrs	r1, r4, #16
 8000c52:	fbbe f6f8 	udiv	r6, lr, r8
 8000c56:	fa1f f78c 	uxth.w	r7, ip
 8000c5a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c62:	fb06 f107 	mul.w	r1, r6, r7
 8000c66:	4299      	cmp	r1, r3
 8000c68:	d90a      	bls.n	8000c80 <__udivmoddi4+0x64>
 8000c6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c72:	f080 811f 	bcs.w	8000eb4 <__udivmoddi4+0x298>
 8000c76:	4299      	cmp	r1, r3
 8000c78:	f240 811c 	bls.w	8000eb4 <__udivmoddi4+0x298>
 8000c7c:	3e02      	subs	r6, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1a5b      	subs	r3, r3, r1
 8000c82:	b2a4      	uxth	r4, r4
 8000c84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c88:	fb08 3310 	mls	r3, r8, r0, r3
 8000c8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c90:	fb00 f707 	mul.w	r7, r0, r7
 8000c94:	42a7      	cmp	r7, r4
 8000c96:	d90a      	bls.n	8000cae <__udivmoddi4+0x92>
 8000c98:	eb1c 0404 	adds.w	r4, ip, r4
 8000c9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca0:	f080 810a 	bcs.w	8000eb8 <__udivmoddi4+0x29c>
 8000ca4:	42a7      	cmp	r7, r4
 8000ca6:	f240 8107 	bls.w	8000eb8 <__udivmoddi4+0x29c>
 8000caa:	4464      	add	r4, ip
 8000cac:	3802      	subs	r0, #2
 8000cae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cb2:	1be4      	subs	r4, r4, r7
 8000cb4:	2600      	movs	r6, #0
 8000cb6:	b11d      	cbz	r5, 8000cc0 <__udivmoddi4+0xa4>
 8000cb8:	40d4      	lsrs	r4, r2
 8000cba:	2300      	movs	r3, #0
 8000cbc:	e9c5 4300 	strd	r4, r3, [r5]
 8000cc0:	4631      	mov	r1, r6
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d909      	bls.n	8000cde <__udivmoddi4+0xc2>
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	f000 80ef 	beq.w	8000eae <__udivmoddi4+0x292>
 8000cd0:	2600      	movs	r6, #0
 8000cd2:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd6:	4630      	mov	r0, r6
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	fab3 f683 	clz	r6, r3
 8000ce2:	2e00      	cmp	r6, #0
 8000ce4:	d14a      	bne.n	8000d7c <__udivmoddi4+0x160>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xd4>
 8000cea:	4282      	cmp	r2, r0
 8000cec:	f200 80f9 	bhi.w	8000ee2 <__udivmoddi4+0x2c6>
 8000cf0:	1a84      	subs	r4, r0, r2
 8000cf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	d0e0      	beq.n	8000cc0 <__udivmoddi4+0xa4>
 8000cfe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d02:	e7dd      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000d04:	b902      	cbnz	r2, 8000d08 <__udivmoddi4+0xec>
 8000d06:	deff      	udf	#255	; 0xff
 8000d08:	fab2 f282 	clz	r2, r2
 8000d0c:	2a00      	cmp	r2, #0
 8000d0e:	f040 8092 	bne.w	8000e36 <__udivmoddi4+0x21a>
 8000d12:	eba1 010c 	sub.w	r1, r1, ip
 8000d16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1a:	fa1f fe8c 	uxth.w	lr, ip
 8000d1e:	2601      	movs	r6, #1
 8000d20:	0c20      	lsrs	r0, r4, #16
 8000d22:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d26:	fb07 1113 	mls	r1, r7, r3, r1
 8000d2a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2e:	fb0e f003 	mul.w	r0, lr, r3
 8000d32:	4288      	cmp	r0, r1
 8000d34:	d908      	bls.n	8000d48 <__udivmoddi4+0x12c>
 8000d36:	eb1c 0101 	adds.w	r1, ip, r1
 8000d3a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x12a>
 8000d40:	4288      	cmp	r0, r1
 8000d42:	f200 80cb 	bhi.w	8000edc <__udivmoddi4+0x2c0>
 8000d46:	4643      	mov	r3, r8
 8000d48:	1a09      	subs	r1, r1, r0
 8000d4a:	b2a4      	uxth	r4, r4
 8000d4c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d50:	fb07 1110 	mls	r1, r7, r0, r1
 8000d54:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d58:	fb0e fe00 	mul.w	lr, lr, r0
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	d908      	bls.n	8000d72 <__udivmoddi4+0x156>
 8000d60:	eb1c 0404 	adds.w	r4, ip, r4
 8000d64:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d68:	d202      	bcs.n	8000d70 <__udivmoddi4+0x154>
 8000d6a:	45a6      	cmp	lr, r4
 8000d6c:	f200 80bb 	bhi.w	8000ee6 <__udivmoddi4+0x2ca>
 8000d70:	4608      	mov	r0, r1
 8000d72:	eba4 040e 	sub.w	r4, r4, lr
 8000d76:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d7a:	e79c      	b.n	8000cb6 <__udivmoddi4+0x9a>
 8000d7c:	f1c6 0720 	rsb	r7, r6, #32
 8000d80:	40b3      	lsls	r3, r6
 8000d82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d8a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d92:	431c      	orrs	r4, r3
 8000d94:	40f9      	lsrs	r1, r7
 8000d96:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d9a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000da2:	0c20      	lsrs	r0, r4, #16
 8000da4:	fa1f fe8c 	uxth.w	lr, ip
 8000da8:	fb09 1118 	mls	r1, r9, r8, r1
 8000dac:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000db0:	fb08 f00e 	mul.w	r0, r8, lr
 8000db4:	4288      	cmp	r0, r1
 8000db6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dba:	d90b      	bls.n	8000dd4 <__udivmoddi4+0x1b8>
 8000dbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc4:	f080 8088 	bcs.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dc8:	4288      	cmp	r0, r1
 8000dca:	f240 8085 	bls.w	8000ed8 <__udivmoddi4+0x2bc>
 8000dce:	f1a8 0802 	sub.w	r8, r8, #2
 8000dd2:	4461      	add	r1, ip
 8000dd4:	1a09      	subs	r1, r1, r0
 8000dd6:	b2a4      	uxth	r4, r4
 8000dd8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ddc:	fb09 1110 	mls	r1, r9, r0, r1
 8000de0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de8:	458e      	cmp	lr, r1
 8000dea:	d908      	bls.n	8000dfe <__udivmoddi4+0x1e2>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df4:	d26c      	bcs.n	8000ed0 <__udivmoddi4+0x2b4>
 8000df6:	458e      	cmp	lr, r1
 8000df8:	d96a      	bls.n	8000ed0 <__udivmoddi4+0x2b4>
 8000dfa:	3802      	subs	r0, #2
 8000dfc:	4461      	add	r1, ip
 8000dfe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e02:	fba0 9402 	umull	r9, r4, r0, r2
 8000e06:	eba1 010e 	sub.w	r1, r1, lr
 8000e0a:	42a1      	cmp	r1, r4
 8000e0c:	46c8      	mov	r8, r9
 8000e0e:	46a6      	mov	lr, r4
 8000e10:	d356      	bcc.n	8000ec0 <__udivmoddi4+0x2a4>
 8000e12:	d053      	beq.n	8000ebc <__udivmoddi4+0x2a0>
 8000e14:	b15d      	cbz	r5, 8000e2e <__udivmoddi4+0x212>
 8000e16:	ebb3 0208 	subs.w	r2, r3, r8
 8000e1a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e22:	fa22 f306 	lsr.w	r3, r2, r6
 8000e26:	40f1      	lsrs	r1, r6
 8000e28:	431f      	orrs	r7, r3
 8000e2a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2e:	2600      	movs	r6, #0
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	f1c2 0320 	rsb	r3, r2, #32
 8000e3a:	40d8      	lsrs	r0, r3
 8000e3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e40:	fa21 f303 	lsr.w	r3, r1, r3
 8000e44:	4091      	lsls	r1, r2
 8000e46:	4301      	orrs	r1, r0
 8000e48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e4c:	fa1f fe8c 	uxth.w	lr, ip
 8000e50:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e54:	fb07 3610 	mls	r6, r7, r0, r3
 8000e58:	0c0b      	lsrs	r3, r1, #16
 8000e5a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e62:	429e      	cmp	r6, r3
 8000e64:	fa04 f402 	lsl.w	r4, r4, r2
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x260>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e72:	d22f      	bcs.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e74:	429e      	cmp	r6, r3
 8000e76:	d92d      	bls.n	8000ed4 <__udivmoddi4+0x2b8>
 8000e78:	3802      	subs	r0, #2
 8000e7a:	4463      	add	r3, ip
 8000e7c:	1b9b      	subs	r3, r3, r6
 8000e7e:	b289      	uxth	r1, r1
 8000e80:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e84:	fb07 3316 	mls	r3, r7, r6, r3
 8000e88:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e8c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d908      	bls.n	8000ea6 <__udivmoddi4+0x28a>
 8000e94:	eb1c 0101 	adds.w	r1, ip, r1
 8000e98:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e9c:	d216      	bcs.n	8000ecc <__udivmoddi4+0x2b0>
 8000e9e:	428b      	cmp	r3, r1
 8000ea0:	d914      	bls.n	8000ecc <__udivmoddi4+0x2b0>
 8000ea2:	3e02      	subs	r6, #2
 8000ea4:	4461      	add	r1, ip
 8000ea6:	1ac9      	subs	r1, r1, r3
 8000ea8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eac:	e738      	b.n	8000d20 <__udivmoddi4+0x104>
 8000eae:	462e      	mov	r6, r5
 8000eb0:	4628      	mov	r0, r5
 8000eb2:	e705      	b.n	8000cc0 <__udivmoddi4+0xa4>
 8000eb4:	4606      	mov	r6, r0
 8000eb6:	e6e3      	b.n	8000c80 <__udivmoddi4+0x64>
 8000eb8:	4618      	mov	r0, r3
 8000eba:	e6f8      	b.n	8000cae <__udivmoddi4+0x92>
 8000ebc:	454b      	cmp	r3, r9
 8000ebe:	d2a9      	bcs.n	8000e14 <__udivmoddi4+0x1f8>
 8000ec0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec8:	3801      	subs	r0, #1
 8000eca:	e7a3      	b.n	8000e14 <__udivmoddi4+0x1f8>
 8000ecc:	4646      	mov	r6, r8
 8000ece:	e7ea      	b.n	8000ea6 <__udivmoddi4+0x28a>
 8000ed0:	4620      	mov	r0, r4
 8000ed2:	e794      	b.n	8000dfe <__udivmoddi4+0x1e2>
 8000ed4:	4640      	mov	r0, r8
 8000ed6:	e7d1      	b.n	8000e7c <__udivmoddi4+0x260>
 8000ed8:	46d0      	mov	r8, sl
 8000eda:	e77b      	b.n	8000dd4 <__udivmoddi4+0x1b8>
 8000edc:	3b02      	subs	r3, #2
 8000ede:	4461      	add	r1, ip
 8000ee0:	e732      	b.n	8000d48 <__udivmoddi4+0x12c>
 8000ee2:	4630      	mov	r0, r6
 8000ee4:	e709      	b.n	8000cfa <__udivmoddi4+0xde>
 8000ee6:	4464      	add	r4, ip
 8000ee8:	3802      	subs	r0, #2
 8000eea:	e742      	b.n	8000d72 <__udivmoddi4+0x156>

08000eec <__aeabi_idiv0>:
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop

08000ef0 <ReceiverIR_init>:
 * Constructor.
 *
 * @param rxpin Pin for receive IR signal.
 */
	void ReceiverIR_init()
	{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
		init_state();
 8000ef4:	f000 f854 	bl	8000fa0 <init_state>
//		    evt.fall(this, &isr_fall);
//		    evt.rise(this, &isr_rise);
//		    evt.mode(PullUp);
//		    ticker.attach_us(this, &isr_wdt, 10 * 1000);
	}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <getState>:
/**
 * Get state.
 *
 * @return Current state.
 */
State getState() {
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
    LOCK();
    State s = work.state;
 8000f02:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <getState+0x1c>)
 8000f04:	781b      	ldrb	r3, [r3, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8000f08:	79fb      	ldrb	r3, [r7, #7]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	200000e4 	.word	0x200000e4

08000f1c <getData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the buffer.
 *
 * @return Data bit length.
 */
int getData(Format *format, uint8_t *buf, int bitlength) {
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b088      	sub	sp, #32
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
    LOCK();

    if (bitlength < data.bitcount) {
 8000f28:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <getData+0x80>)
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	da02      	bge.n	8000f38 <getData+0x1c>
        UNLOCK();
        return -1;
 8000f32:	f04f 33ff 	mov.w	r3, #4294967295
 8000f36:	e02d      	b.n	8000f94 <getData+0x78>
    }

    const int nbits = data.bitcount;
 8000f38:	4b18      	ldr	r3, [pc, #96]	; (8000f9c <getData+0x80>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	61bb      	str	r3, [r7, #24]
    const int nbytes = data.bitcount / 8 + (((data.bitcount % 8) != 0) ? 1 : 0);
 8000f3e:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <getData+0x80>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	da00      	bge.n	8000f48 <getData+0x2c>
 8000f46:	3307      	adds	r3, #7
 8000f48:	10db      	asrs	r3, r3, #3
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <getData+0x80>)
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	4413      	add	r3, r2
 8000f60:	617b      	str	r3, [r7, #20]

    //*format = data.format;
    *format = NEC;
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2201      	movs	r2, #1
 8000f66:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f68:	2300      	movs	r3, #0
 8000f6a:	61fb      	str	r3, [r7, #28]
 8000f6c:	e00b      	b.n	8000f86 <getData+0x6a>
        buf[i] = data.buffer[i];
 8000f6e:	69fb      	ldr	r3, [r7, #28]
 8000f70:	68ba      	ldr	r2, [r7, #8]
 8000f72:	4413      	add	r3, r2
 8000f74:	4909      	ldr	r1, [pc, #36]	; (8000f9c <getData+0x80>)
 8000f76:	69fa      	ldr	r2, [r7, #28]
 8000f78:	440a      	add	r2, r1
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	7812      	ldrb	r2, [r2, #0]
 8000f7e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < nbytes; i++) {
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	3301      	adds	r3, #1
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	697b      	ldr	r3, [r7, #20]
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	dbef      	blt.n	8000f6e <getData+0x52>
    }

    init_state();
 8000f8e:	f000 f807 	bl	8000fa0 <init_state>

    UNLOCK();
    return nbits;
 8000f92:	69bb      	ldr	r3, [r7, #24]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3720      	adds	r7, #32
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000009c 	.word	0x2000009c

08000fa0 <init_state>:

void init_state(void) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
    work.c1 = -1;
 8000fa6:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <init_state+0x74>)
 8000fa8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fac:	605a      	str	r2, [r3, #4]
    work.c2 = -1;
 8000fae:	4b19      	ldr	r3, [pc, #100]	; (8001014 <init_state+0x74>)
 8000fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb4:	609a      	str	r2, [r3, #8]
    work.c3 = -1;
 8000fb6:	4b17      	ldr	r3, [pc, #92]	; (8001014 <init_state+0x74>)
 8000fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fbc:	60da      	str	r2, [r3, #12]
    work.d1 = -1;
 8000fbe:	4b15      	ldr	r3, [pc, #84]	; (8001014 <init_state+0x74>)
 8000fc0:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc4:	611a      	str	r2, [r3, #16]
    work.d2 = -1;
 8000fc6:	4b13      	ldr	r3, [pc, #76]	; (8001014 <init_state+0x74>)
 8000fc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fcc:	615a      	str	r2, [r3, #20]
    work.state = Idle;
 8000fce:	4b11      	ldr	r3, [pc, #68]	; (8001014 <init_state+0x74>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	701a      	strb	r2, [r3, #0]
    data.format = UNKNOWN;
 8000fd4:	4b10      	ldr	r3, [pc, #64]	; (8001018 <init_state+0x78>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
    data.bitcount = 0;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <init_state+0x78>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Stop_IT(&htim14);//printf("HAL_TIM_Base_Stop_IT\n");  //timer.stop();
 8000fe0:	480e      	ldr	r0, [pc, #56]	; (800101c <init_state+0x7c>)
 8000fe2:	f006 fc1d 	bl	8007820 <HAL_TIM_Base_Stop_IT>
    //HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
    IR_NEC_Tick = 0;  //timer.reset();
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <init_state+0x80>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000fec:	2300      	movs	r3, #0
 8000fee:	607b      	str	r3, [r7, #4]
 8000ff0:	e008      	b.n	8001004 <init_state+0x64>
        data.buffer[i] = 0;
 8000ff2:	4a09      	ldr	r2, [pc, #36]	; (8001018 <init_state+0x78>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	3308      	adds	r3, #8
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < sizeof(data.buffer); i++) {
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b3f      	cmp	r3, #63	; 0x3f
 8001008:	d9f3      	bls.n	8000ff2 <init_state+0x52>
    }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	200000e4 	.word	0x200000e4
 8001018:	2000009c 	.word	0x2000009c
 800101c:	200003e0 	.word	0x200003e0
 8001020:	20000114 	.word	0x20000114
 8001024:	00000000 	.word	0x00000000

08001028 <isr_fall>:
        cnt = 0;
    }
    UNLOCK();
}

void isr_fall(void) {
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
    LOCK();
    //printf("111: %d\n", work.state);
    switch (work.state) {
 800102e:	4b96      	ldr	r3, [pc, #600]	; (8001288 <isr_fall+0x260>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b02      	cmp	r3, #2
 8001034:	f000 83cd 	beq.w	80017d2 <isr_fall+0x7aa>
 8001038:	2b02      	cmp	r3, #2
 800103a:	f300 83cc 	bgt.w	80017d6 <isr_fall+0x7ae>
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <isr_fall+0x22>
 8001042:	2b01      	cmp	r3, #1
 8001044:	f000 8224 	beq.w	8001490 <isr_fall+0x468>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001048:	e3c5      	b.n	80017d6 <isr_fall+0x7ae>
            if (work.c1 < 0) {
 800104a:	4b8f      	ldr	r3, [pc, #572]	; (8001288 <isr_fall+0x260>)
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	da07      	bge.n	8001062 <isr_fall+0x3a>
            	HAL_TIM_Base_Start_IT (&htim14);//printf("HAL_TIM_Base_Start_IT\n");  //timer.start();
 8001052:	488e      	ldr	r0, [pc, #568]	; (800128c <isr_fall+0x264>)
 8001054:	f006 fb6c 	bl	8007730 <HAL_TIM_Base_Start_IT>
                work.c1 = IR_NEC_Tick;  //timer.read_us();
 8001058:	4b8d      	ldr	r3, [pc, #564]	; (8001290 <isr_fall+0x268>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a8a      	ldr	r2, [pc, #552]	; (8001288 <isr_fall+0x260>)
 800105e:	6053      	str	r3, [r2, #4]
            break;
 8001060:	e3bc      	b.n	80017dc <isr_fall+0x7b4>
			work.c3 = IR_NEC_Tick;  //timer.read_us();
 8001062:	4b8b      	ldr	r3, [pc, #556]	; (8001290 <isr_fall+0x268>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a88      	ldr	r2, [pc, #544]	; (8001288 <isr_fall+0x260>)
 8001068:	60d3      	str	r3, [r2, #12]
                int a = work.c2 - work.c1;
 800106a:	4b87      	ldr	r3, [pc, #540]	; (8001288 <isr_fall+0x260>)
 800106c:	689a      	ldr	r2, [r3, #8]
 800106e:	4b86      	ldr	r3, [pc, #536]	; (8001288 <isr_fall+0x260>)
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	1ad3      	subs	r3, r2, r3
 8001074:	607b      	str	r3, [r7, #4]
                int b = work.c3 - work.c2;
 8001076:	4b84      	ldr	r3, [pc, #528]	; (8001288 <isr_fall+0x260>)
 8001078:	68da      	ldr	r2, [r3, #12]
 800107a:	4b83      	ldr	r3, [pc, #524]	; (8001288 <isr_fall+0x260>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 8)) {
 8001082:	f240 2332 	movw	r3, #562	; 0x232
 8001086:	011b      	lsls	r3, r3, #4
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff fa63 	bl	8000554 <__aeabi_i2d>
 800108e:	a37a      	add	r3, pc, #488	; (adr r3, 8001278 <isr_fall+0x250>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fac8 	bl	8000628 <__aeabi_dmul>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
 80010a0:	6878      	ldr	r0, [r7, #4]
 80010a2:	f7ff fa57 	bl	8000554 <__aeabi_i2d>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4620      	mov	r0, r4
 80010ac:	4629      	mov	r1, r5
 80010ae:	f7ff fd2d 	bl	8000b0c <__aeabi_dcmplt>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d056      	beq.n	8001166 <isr_fall+0x13e>
 80010b8:	6878      	ldr	r0, [r7, #4]
 80010ba:	f7ff fa4b 	bl	8000554 <__aeabi_i2d>
 80010be:	4604      	mov	r4, r0
 80010c0:	460d      	mov	r5, r1
 80010c2:	f240 2332 	movw	r3, #562	; 0x232
 80010c6:	011b      	lsls	r3, r3, #4
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fa43 	bl	8000554 <__aeabi_i2d>
 80010ce:	a36c      	add	r3, pc, #432	; (adr r3, 8001280 <isr_fall+0x258>)
 80010d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010d4:	f7ff faa8 	bl	8000628 <__aeabi_dmul>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	4620      	mov	r0, r4
 80010de:	4629      	mov	r1, r5
 80010e0:	f7ff fd14 	bl	8000b0c <__aeabi_dcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d03d      	beq.n	8001166 <isr_fall+0x13e>
 80010ea:	f240 2332 	movw	r3, #562	; 0x232
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff fa2f 	bl	8000554 <__aeabi_i2d>
 80010f6:	a360      	add	r3, pc, #384	; (adr r3, 8001278 <isr_fall+0x250>)
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f7ff fa94 	bl	8000628 <__aeabi_dmul>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4614      	mov	r4, r2
 8001106:	461d      	mov	r5, r3
 8001108:	6838      	ldr	r0, [r7, #0]
 800110a:	f7ff fa23 	bl	8000554 <__aeabi_i2d>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	4620      	mov	r0, r4
 8001114:	4629      	mov	r1, r5
 8001116:	f7ff fcf9 	bl	8000b0c <__aeabi_dcmplt>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d022      	beq.n	8001166 <isr_fall+0x13e>
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff fa17 	bl	8000554 <__aeabi_i2d>
 8001126:	4604      	mov	r4, r0
 8001128:	460d      	mov	r5, r1
 800112a:	f240 2332 	movw	r3, #562	; 0x232
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff fa0f 	bl	8000554 <__aeabi_i2d>
 8001136:	a352      	add	r3, pc, #328	; (adr r3, 8001280 <isr_fall+0x258>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa74 	bl	8000628 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4620      	mov	r0, r4
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff fce0 	bl	8000b0c <__aeabi_dcmplt>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d009      	beq.n	8001166 <isr_fall+0x13e>
                    data.format = NEC;
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <isr_fall+0x26c>)
 8001154:	2201      	movs	r2, #1
 8001156:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 8001158:	4b4b      	ldr	r3, [pc, #300]	; (8001288 <isr_fall+0x260>)
 800115a:	2201      	movs	r2, #1
 800115c:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 800115e:	4b4d      	ldr	r3, [pc, #308]	; (8001294 <isr_fall+0x26c>)
 8001160:	2200      	movs	r2, #0
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	e193      	b.n	800148e <isr_fall+0x466>
                } else if (InRange(a, TUS_NEC * 16) && InRange(b, TUS_NEC * 4)) {
 8001166:	f240 2332 	movw	r3, #562	; 0x232
 800116a:	011b      	lsls	r3, r3, #4
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff f9f1 	bl	8000554 <__aeabi_i2d>
 8001172:	a341      	add	r3, pc, #260	; (adr r3, 8001278 <isr_fall+0x250>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa56 	bl	8000628 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	4614      	mov	r4, r2
 8001182:	461d      	mov	r5, r3
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff f9e5 	bl	8000554 <__aeabi_i2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4620      	mov	r0, r4
 8001190:	4629      	mov	r1, r5
 8001192:	f7ff fcbb 	bl	8000b0c <__aeabi_dcmplt>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d07d      	beq.n	8001298 <isr_fall+0x270>
 800119c:	6878      	ldr	r0, [r7, #4]
 800119e:	f7ff f9d9 	bl	8000554 <__aeabi_i2d>
 80011a2:	4604      	mov	r4, r0
 80011a4:	460d      	mov	r5, r1
 80011a6:	f240 2332 	movw	r3, #562	; 0x232
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff f9d1 	bl	8000554 <__aeabi_i2d>
 80011b2:	a333      	add	r3, pc, #204	; (adr r3, 8001280 <isr_fall+0x258>)
 80011b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b8:	f7ff fa36 	bl	8000628 <__aeabi_dmul>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	4620      	mov	r0, r4
 80011c2:	4629      	mov	r1, r5
 80011c4:	f7ff fca2 	bl	8000b0c <__aeabi_dcmplt>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d064      	beq.n	8001298 <isr_fall+0x270>
 80011ce:	f240 2332 	movw	r3, #562	; 0x232
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7ff f9bd 	bl	8000554 <__aeabi_i2d>
 80011da:	a327      	add	r3, pc, #156	; (adr r3, 8001278 <isr_fall+0x250>)
 80011dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e0:	f7ff fa22 	bl	8000628 <__aeabi_dmul>
 80011e4:	4602      	mov	r2, r0
 80011e6:	460b      	mov	r3, r1
 80011e8:	4614      	mov	r4, r2
 80011ea:	461d      	mov	r5, r3
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff f9b1 	bl	8000554 <__aeabi_i2d>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4620      	mov	r0, r4
 80011f8:	4629      	mov	r1, r5
 80011fa:	f7ff fc87 	bl	8000b0c <__aeabi_dcmplt>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d049      	beq.n	8001298 <isr_fall+0x270>
 8001204:	6838      	ldr	r0, [r7, #0]
 8001206:	f7ff f9a5 	bl	8000554 <__aeabi_i2d>
 800120a:	4604      	mov	r4, r0
 800120c:	460d      	mov	r5, r1
 800120e:	f240 2332 	movw	r3, #562	; 0x232
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff f99d 	bl	8000554 <__aeabi_i2d>
 800121a:	a319      	add	r3, pc, #100	; (adr r3, 8001280 <isr_fall+0x258>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7ff fa02 	bl	8000628 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4620      	mov	r0, r4
 800122a:	4629      	mov	r1, r5
 800122c:	f7ff fc6e 	bl	8000b0c <__aeabi_dcmplt>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d030      	beq.n	8001298 <isr_fall+0x270>
                    data.format = NEC_REPEAT;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <isr_fall+0x26c>)
 8001238:	2202      	movs	r2, #2
 800123a:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 800123c:	4b12      	ldr	r3, [pc, #72]	; (8001288 <isr_fall+0x260>)
 800123e:	2202      	movs	r2, #2
 8001240:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <isr_fall+0x26c>)
 8001244:	2200      	movs	r2, #0
 8001246:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <isr_fall+0x260>)
 800124a:	f04f 32ff 	mov.w	r2, #4294967295
 800124e:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <isr_fall+0x260>)
 8001252:	f04f 32ff 	mov.w	r2, #4294967295
 8001256:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 8001258:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <isr_fall+0x260>)
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <isr_fall+0x260>)
 8001262:	f04f 32ff 	mov.w	r2, #4294967295
 8001266:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <isr_fall+0x260>)
 800126a:	f04f 32ff 	mov.w	r2, #4294967295
 800126e:	615a      	str	r2, [r3, #20]
 8001270:	e10d      	b.n	800148e <isr_fall+0x466>
 8001272:	bf00      	nop
 8001274:	f3af 8000 	nop.w
 8001278:	66666666 	.word	0x66666666
 800127c:	3fe66666 	.word	0x3fe66666
 8001280:	cccccccd 	.word	0xcccccccd
 8001284:	3ff4cccc 	.word	0x3ff4cccc
 8001288:	200000e4 	.word	0x200000e4
 800128c:	200003e0 	.word	0x200003e0
 8001290:	20000114 	.word	0x20000114
 8001294:	2000009c 	.word	0x2000009c
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 4)) {
 8001298:	f240 13a9 	movw	r3, #425	; 0x1a9
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4618      	mov	r0, r3
 80012a0:	f7ff f958 	bl	8000554 <__aeabi_i2d>
 80012a4:	a3de      	add	r3, pc, #888	; (adr r3, 8001620 <isr_fall+0x5f8>)
 80012a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012aa:	f7ff f9bd 	bl	8000628 <__aeabi_dmul>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	4614      	mov	r4, r2
 80012b4:	461d      	mov	r5, r3
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff f94c 	bl	8000554 <__aeabi_i2d>
 80012bc:	4602      	mov	r2, r0
 80012be:	460b      	mov	r3, r1
 80012c0:	4620      	mov	r0, r4
 80012c2:	4629      	mov	r1, r5
 80012c4:	f7ff fc22 	bl	8000b0c <__aeabi_dcmplt>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d056      	beq.n	800137c <isr_fall+0x354>
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff f940 	bl	8000554 <__aeabi_i2d>
 80012d4:	4604      	mov	r4, r0
 80012d6:	460d      	mov	r5, r1
 80012d8:	f240 13a9 	movw	r3, #425	; 0x1a9
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f938 	bl	8000554 <__aeabi_i2d>
 80012e4:	a3d0      	add	r3, pc, #832	; (adr r3, 8001628 <isr_fall+0x600>)
 80012e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ea:	f7ff f99d 	bl	8000628 <__aeabi_dmul>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	4620      	mov	r0, r4
 80012f4:	4629      	mov	r1, r5
 80012f6:	f7ff fc09 	bl	8000b0c <__aeabi_dcmplt>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d03d      	beq.n	800137c <isr_fall+0x354>
 8001300:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	4618      	mov	r0, r3
 8001308:	f7ff f924 	bl	8000554 <__aeabi_i2d>
 800130c:	a3c4      	add	r3, pc, #784	; (adr r3, 8001620 <isr_fall+0x5f8>)
 800130e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001312:	f7ff f989 	bl	8000628 <__aeabi_dmul>
 8001316:	4602      	mov	r2, r0
 8001318:	460b      	mov	r3, r1
 800131a:	4614      	mov	r4, r2
 800131c:	461d      	mov	r5, r3
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f7ff f918 	bl	8000554 <__aeabi_i2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4620      	mov	r0, r4
 800132a:	4629      	mov	r1, r5
 800132c:	f7ff fbee 	bl	8000b0c <__aeabi_dcmplt>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d022      	beq.n	800137c <isr_fall+0x354>
 8001336:	6838      	ldr	r0, [r7, #0]
 8001338:	f7ff f90c 	bl	8000554 <__aeabi_i2d>
 800133c:	4604      	mov	r4, r0
 800133e:	460d      	mov	r5, r1
 8001340:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f904 	bl	8000554 <__aeabi_i2d>
 800134c:	a3b6      	add	r3, pc, #728	; (adr r3, 8001628 <isr_fall+0x600>)
 800134e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001352:	f7ff f969 	bl	8000628 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4620      	mov	r0, r4
 800135c:	4629      	mov	r1, r5
 800135e:	f7ff fbd5 	bl	8000b0c <__aeabi_dcmplt>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d009      	beq.n	800137c <isr_fall+0x354>
                    data.format = AEHA;
 8001368:	4bb1      	ldr	r3, [pc, #708]	; (8001630 <isr_fall+0x608>)
 800136a:	2203      	movs	r2, #3
 800136c:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 800136e:	4bb1      	ldr	r3, [pc, #708]	; (8001634 <isr_fall+0x60c>)
 8001370:	2201      	movs	r2, #1
 8001372:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001374:	4bae      	ldr	r3, [pc, #696]	; (8001630 <isr_fall+0x608>)
 8001376:	2200      	movs	r2, #0
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	e088      	b.n	800148e <isr_fall+0x466>
                } else if (InRange(a, TUS_AEHA * 8) && InRange(b, TUS_AEHA * 8)) {
 800137c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001380:	00db      	lsls	r3, r3, #3
 8001382:	4618      	mov	r0, r3
 8001384:	f7ff f8e6 	bl	8000554 <__aeabi_i2d>
 8001388:	a3a5      	add	r3, pc, #660	; (adr r3, 8001620 <isr_fall+0x5f8>)
 800138a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138e:	f7ff f94b 	bl	8000628 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4614      	mov	r4, r2
 8001398:	461d      	mov	r5, r3
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff f8da 	bl	8000554 <__aeabi_i2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	4620      	mov	r0, r4
 80013a6:	4629      	mov	r1, r5
 80013a8:	f7ff fbb0 	bl	8000b0c <__aeabi_dcmplt>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d06a      	beq.n	8001488 <isr_fall+0x460>
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff f8ce 	bl	8000554 <__aeabi_i2d>
 80013b8:	4604      	mov	r4, r0
 80013ba:	460d      	mov	r5, r1
 80013bc:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff f8c6 	bl	8000554 <__aeabi_i2d>
 80013c8:	a397      	add	r3, pc, #604	; (adr r3, 8001628 <isr_fall+0x600>)
 80013ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ce:	f7ff f92b 	bl	8000628 <__aeabi_dmul>
 80013d2:	4602      	mov	r2, r0
 80013d4:	460b      	mov	r3, r1
 80013d6:	4620      	mov	r0, r4
 80013d8:	4629      	mov	r1, r5
 80013da:	f7ff fb97 	bl	8000b0c <__aeabi_dcmplt>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d051      	beq.n	8001488 <isr_fall+0x460>
 80013e4:	f240 13a9 	movw	r3, #425	; 0x1a9
 80013e8:	00db      	lsls	r3, r3, #3
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8b2 	bl	8000554 <__aeabi_i2d>
 80013f0:	a38b      	add	r3, pc, #556	; (adr r3, 8001620 <isr_fall+0x5f8>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff f917 	bl	8000628 <__aeabi_dmul>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4614      	mov	r4, r2
 8001400:	461d      	mov	r5, r3
 8001402:	6838      	ldr	r0, [r7, #0]
 8001404:	f7ff f8a6 	bl	8000554 <__aeabi_i2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	4620      	mov	r0, r4
 800140e:	4629      	mov	r1, r5
 8001410:	f7ff fb7c 	bl	8000b0c <__aeabi_dcmplt>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d036      	beq.n	8001488 <isr_fall+0x460>
 800141a:	6838      	ldr	r0, [r7, #0]
 800141c:	f7ff f89a 	bl	8000554 <__aeabi_i2d>
 8001420:	4604      	mov	r4, r0
 8001422:	460d      	mov	r5, r1
 8001424:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001428:	00db      	lsls	r3, r3, #3
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff f892 	bl	8000554 <__aeabi_i2d>
 8001430:	a37d      	add	r3, pc, #500	; (adr r3, 8001628 <isr_fall+0x600>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8f7 	bl	8000628 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4620      	mov	r0, r4
 8001440:	4629      	mov	r1, r5
 8001442:	f7ff fb63 	bl	8000b0c <__aeabi_dcmplt>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d01d      	beq.n	8001488 <isr_fall+0x460>
                    data.format = AEHA_REPEAT;
 800144c:	4b78      	ldr	r3, [pc, #480]	; (8001630 <isr_fall+0x608>)
 800144e:	2204      	movs	r2, #4
 8001450:	701a      	strb	r2, [r3, #0]
                    work.state = Received;
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <isr_fall+0x60c>)
 8001454:	2202      	movs	r2, #2
 8001456:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 8001458:	4b75      	ldr	r3, [pc, #468]	; (8001630 <isr_fall+0x608>)
 800145a:	2200      	movs	r2, #0
 800145c:	605a      	str	r2, [r3, #4]
                    work.c1 = -1;
 800145e:	4b75      	ldr	r3, [pc, #468]	; (8001634 <isr_fall+0x60c>)
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	605a      	str	r2, [r3, #4]
                    work.c2 = -1;
 8001466:	4b73      	ldr	r3, [pc, #460]	; (8001634 <isr_fall+0x60c>)
 8001468:	f04f 32ff 	mov.w	r2, #4294967295
 800146c:	609a      	str	r2, [r3, #8]
                    work.c3 = -1;
 800146e:	4b71      	ldr	r3, [pc, #452]	; (8001634 <isr_fall+0x60c>)
 8001470:	f04f 32ff 	mov.w	r2, #4294967295
 8001474:	60da      	str	r2, [r3, #12]
                    work.d1 = -1;
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <isr_fall+0x60c>)
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	611a      	str	r2, [r3, #16]
                    work.d2 = -1;
 800147e:	4b6d      	ldr	r3, [pc, #436]	; (8001634 <isr_fall+0x60c>)
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	615a      	str	r2, [r3, #20]
 8001486:	e002      	b.n	800148e <isr_fall+0x466>
                    init_state();
 8001488:	f7ff fd8a 	bl	8000fa0 <init_state>
            break;
 800148c:	e1a6      	b.n	80017dc <isr_fall+0x7b4>
 800148e:	e1a5      	b.n	80017dc <isr_fall+0x7b4>
            if (NEC == data.format) {
 8001490:	4b67      	ldr	r3, [pc, #412]	; (8001630 <isr_fall+0x608>)
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	2b01      	cmp	r3, #1
 8001496:	f040 80d3 	bne.w	8001640 <isr_fall+0x618>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800149a:	4b67      	ldr	r3, [pc, #412]	; (8001638 <isr_fall+0x610>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a65      	ldr	r2, [pc, #404]	; (8001634 <isr_fall+0x60c>)
 80014a0:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 80014a2:	4b64      	ldr	r3, [pc, #400]	; (8001634 <isr_fall+0x60c>)
 80014a4:	695a      	ldr	r2, [r3, #20]
 80014a6:	4b63      	ldr	r3, [pc, #396]	; (8001634 <isr_fall+0x60c>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	60bb      	str	r3, [r7, #8]
                if (InRange(a, TUS_NEC * 3)) {
 80014ae:	f240 2232 	movw	r2, #562	; 0x232
 80014b2:	4613      	mov	r3, r2
 80014b4:	005b      	lsls	r3, r3, #1
 80014b6:	4413      	add	r3, r2
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff f84b 	bl	8000554 <__aeabi_i2d>
 80014be:	a358      	add	r3, pc, #352	; (adr r3, 8001620 <isr_fall+0x5f8>)
 80014c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c4:	f7ff f8b0 	bl	8000628 <__aeabi_dmul>
 80014c8:	4602      	mov	r2, r0
 80014ca:	460b      	mov	r3, r1
 80014cc:	4614      	mov	r4, r2
 80014ce:	461d      	mov	r5, r3
 80014d0:	68b8      	ldr	r0, [r7, #8]
 80014d2:	f7ff f83f 	bl	8000554 <__aeabi_i2d>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4620      	mov	r0, r4
 80014dc:	4629      	mov	r1, r5
 80014de:	f7ff fb15 	bl	8000b0c <__aeabi_dcmplt>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d03a      	beq.n	800155e <isr_fall+0x536>
 80014e8:	68b8      	ldr	r0, [r7, #8]
 80014ea:	f7ff f833 	bl	8000554 <__aeabi_i2d>
 80014ee:	4604      	mov	r4, r0
 80014f0:	460d      	mov	r5, r1
 80014f2:	f240 2232 	movw	r2, #562	; 0x232
 80014f6:	4613      	mov	r3, r2
 80014f8:	005b      	lsls	r3, r3, #1
 80014fa:	4413      	add	r3, r2
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff f829 	bl	8000554 <__aeabi_i2d>
 8001502:	a349      	add	r3, pc, #292	; (adr r3, 8001628 <isr_fall+0x600>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f88e 	bl	8000628 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4620      	mov	r0, r4
 8001512:	4629      	mov	r1, r5
 8001514:	f7ff fafa 	bl	8000b0c <__aeabi_dcmplt>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d01f      	beq.n	800155e <isr_fall+0x536>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 800151e:	4b44      	ldr	r3, [pc, #272]	; (8001630 <isr_fall+0x608>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	2b00      	cmp	r3, #0
 8001524:	da00      	bge.n	8001528 <isr_fall+0x500>
 8001526:	3307      	adds	r3, #7
 8001528:	10db      	asrs	r3, r3, #3
 800152a:	461a      	mov	r2, r3
 800152c:	4b40      	ldr	r3, [pc, #256]	; (8001630 <isr_fall+0x608>)
 800152e:	4413      	add	r3, r2
 8001530:	7a1b      	ldrb	r3, [r3, #8]
 8001532:	b259      	sxtb	r1, r3
 8001534:	4b3e      	ldr	r3, [pc, #248]	; (8001630 <isr_fall+0x608>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	4258      	negs	r0, r3
 800153a:	f003 0307 	and.w	r3, r3, #7
 800153e:	f000 0007 	and.w	r0, r0, #7
 8001542:	bf58      	it	pl
 8001544:	4243      	negpl	r3, r0
 8001546:	2001      	movs	r0, #1
 8001548:	fa00 f303 	lsl.w	r3, r0, r3
 800154c:	b25b      	sxtb	r3, r3
 800154e:	430b      	orrs	r3, r1
 8001550:	b25b      	sxtb	r3, r3
 8001552:	b2d9      	uxtb	r1, r3
 8001554:	4b36      	ldr	r3, [pc, #216]	; (8001630 <isr_fall+0x608>)
 8001556:	4413      	add	r3, r2
 8001558:	460a      	mov	r2, r1
 800155a:	721a      	strb	r2, [r3, #8]
 800155c:	e052      	b.n	8001604 <isr_fall+0x5dc>
                } else if (InRange(a, TUS_NEC * 1)) {
 800155e:	f240 2332 	movw	r3, #562	; 0x232
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe fff6 	bl	8000554 <__aeabi_i2d>
 8001568:	a32d      	add	r3, pc, #180	; (adr r3, 8001620 <isr_fall+0x5f8>)
 800156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156e:	f7ff f85b 	bl	8000628 <__aeabi_dmul>
 8001572:	4602      	mov	r2, r0
 8001574:	460b      	mov	r3, r1
 8001576:	4614      	mov	r4, r2
 8001578:	461d      	mov	r5, r3
 800157a:	68b8      	ldr	r0, [r7, #8]
 800157c:	f7fe ffea 	bl	8000554 <__aeabi_i2d>
 8001580:	4602      	mov	r2, r0
 8001582:	460b      	mov	r3, r1
 8001584:	4620      	mov	r0, r4
 8001586:	4629      	mov	r1, r5
 8001588:	f7ff fac0 	bl	8000b0c <__aeabi_dcmplt>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d038      	beq.n	8001604 <isr_fall+0x5dc>
 8001592:	68b8      	ldr	r0, [r7, #8]
 8001594:	f7fe ffde 	bl	8000554 <__aeabi_i2d>
 8001598:	4604      	mov	r4, r0
 800159a:	460d      	mov	r5, r1
 800159c:	f240 2332 	movw	r3, #562	; 0x232
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffd7 	bl	8000554 <__aeabi_i2d>
 80015a6:	a320      	add	r3, pc, #128	; (adr r3, 8001628 <isr_fall+0x600>)
 80015a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ac:	f7ff f83c 	bl	8000628 <__aeabi_dmul>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4620      	mov	r0, r4
 80015b6:	4629      	mov	r1, r5
 80015b8:	f7ff faa8 	bl	8000b0c <__aeabi_dcmplt>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d020      	beq.n	8001604 <isr_fall+0x5dc>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 80015c2:	4b1b      	ldr	r3, [pc, #108]	; (8001630 <isr_fall+0x608>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	da00      	bge.n	80015cc <isr_fall+0x5a4>
 80015ca:	3307      	adds	r3, #7
 80015cc:	10db      	asrs	r3, r3, #3
 80015ce:	461a      	mov	r2, r3
 80015d0:	4b17      	ldr	r3, [pc, #92]	; (8001630 <isr_fall+0x608>)
 80015d2:	4413      	add	r3, r2
 80015d4:	7a1b      	ldrb	r3, [r3, #8]
 80015d6:	b259      	sxtb	r1, r3
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <isr_fall+0x608>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4258      	negs	r0, r3
 80015de:	f003 0307 	and.w	r3, r3, #7
 80015e2:	f000 0007 	and.w	r0, r0, #7
 80015e6:	bf58      	it	pl
 80015e8:	4243      	negpl	r3, r0
 80015ea:	2001      	movs	r0, #1
 80015ec:	fa00 f303 	lsl.w	r3, r0, r3
 80015f0:	b25b      	sxtb	r3, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	b25b      	sxtb	r3, r3
 80015f6:	400b      	ands	r3, r1
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	b2d9      	uxtb	r1, r3
 80015fc:	4b0c      	ldr	r3, [pc, #48]	; (8001630 <isr_fall+0x608>)
 80015fe:	4413      	add	r3, r2
 8001600:	460a      	mov	r2, r1
 8001602:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <isr_fall+0x608>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	3301      	adds	r3, #1
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <isr_fall+0x608>)
 800160c:	6053      	str	r3, [r2, #4]
                if(data.bitcount>=31){isr_timeout_flag = 1;}
 800160e:	4b08      	ldr	r3, [pc, #32]	; (8001630 <isr_fall+0x608>)
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b1e      	cmp	r3, #30
 8001614:	f340 80e1 	ble.w	80017da <isr_fall+0x7b2>
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <isr_fall+0x614>)
 800161a:	2201      	movs	r2, #1
 800161c:	701a      	strb	r2, [r3, #0]
            break;
 800161e:	e0dc      	b.n	80017da <isr_fall+0x7b2>
 8001620:	66666666 	.word	0x66666666
 8001624:	3fe66666 	.word	0x3fe66666
 8001628:	cccccccd 	.word	0xcccccccd
 800162c:	3ff4cccc 	.word	0x3ff4cccc
 8001630:	2000009c 	.word	0x2000009c
 8001634:	200000e4 	.word	0x200000e4
 8001638:	20000114 	.word	0x20000114
 800163c:	20000119 	.word	0x20000119
            } else if (AEHA == data.format) {
 8001640:	4b6d      	ldr	r3, [pc, #436]	; (80017f8 <isr_fall+0x7d0>)
 8001642:	781b      	ldrb	r3, [r3, #0]
 8001644:	2b03      	cmp	r3, #3
 8001646:	f040 80bb 	bne.w	80017c0 <isr_fall+0x798>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 800164a:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <isr_fall+0x7d4>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a6c      	ldr	r2, [pc, #432]	; (8001800 <isr_fall+0x7d8>)
 8001650:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 8001652:	4b6b      	ldr	r3, [pc, #428]	; (8001800 <isr_fall+0x7d8>)
 8001654:	695a      	ldr	r2, [r3, #20]
 8001656:	4b6a      	ldr	r3, [pc, #424]	; (8001800 <isr_fall+0x7d8>)
 8001658:	691b      	ldr	r3, [r3, #16]
 800165a:	1ad3      	subs	r3, r2, r3
 800165c:	60fb      	str	r3, [r7, #12]
                if (InRange(a, TUS_AEHA * 3)) {
 800165e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8001662:	4613      	mov	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4413      	add	r3, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7fe ff73 	bl	8000554 <__aeabi_i2d>
 800166e:	a35e      	add	r3, pc, #376	; (adr r3, 80017e8 <isr_fall+0x7c0>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	f7fe ffd8 	bl	8000628 <__aeabi_dmul>
 8001678:	4602      	mov	r2, r0
 800167a:	460b      	mov	r3, r1
 800167c:	4614      	mov	r4, r2
 800167e:	461d      	mov	r5, r3
 8001680:	68f8      	ldr	r0, [r7, #12]
 8001682:	f7fe ff67 	bl	8000554 <__aeabi_i2d>
 8001686:	4602      	mov	r2, r0
 8001688:	460b      	mov	r3, r1
 800168a:	4620      	mov	r0, r4
 800168c:	4629      	mov	r1, r5
 800168e:	f7ff fa3d 	bl	8000b0c <__aeabi_dcmplt>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d03a      	beq.n	800170e <isr_fall+0x6e6>
 8001698:	68f8      	ldr	r0, [r7, #12]
 800169a:	f7fe ff5b 	bl	8000554 <__aeabi_i2d>
 800169e:	4604      	mov	r4, r0
 80016a0:	460d      	mov	r5, r1
 80016a2:	f240 12a9 	movw	r2, #425	; 0x1a9
 80016a6:	4613      	mov	r3, r2
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	4413      	add	r3, r2
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7fe ff51 	bl	8000554 <__aeabi_i2d>
 80016b2:	a34f      	add	r3, pc, #316	; (adr r3, 80017f0 <isr_fall+0x7c8>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	f7fe ffb6 	bl	8000628 <__aeabi_dmul>
 80016bc:	4602      	mov	r2, r0
 80016be:	460b      	mov	r3, r1
 80016c0:	4620      	mov	r0, r4
 80016c2:	4629      	mov	r1, r5
 80016c4:	f7ff fa22 	bl	8000b0c <__aeabi_dcmplt>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d01f      	beq.n	800170e <isr_fall+0x6e6>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 80016ce:	4b4a      	ldr	r3, [pc, #296]	; (80017f8 <isr_fall+0x7d0>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	da00      	bge.n	80016d8 <isr_fall+0x6b0>
 80016d6:	3307      	adds	r3, #7
 80016d8:	10db      	asrs	r3, r3, #3
 80016da:	461a      	mov	r2, r3
 80016dc:	4b46      	ldr	r3, [pc, #280]	; (80017f8 <isr_fall+0x7d0>)
 80016de:	4413      	add	r3, r2
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	b259      	sxtb	r1, r3
 80016e4:	4b44      	ldr	r3, [pc, #272]	; (80017f8 <isr_fall+0x7d0>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	4258      	negs	r0, r3
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	f000 0007 	and.w	r0, r0, #7
 80016f2:	bf58      	it	pl
 80016f4:	4243      	negpl	r3, r0
 80016f6:	2001      	movs	r0, #1
 80016f8:	fa00 f303 	lsl.w	r3, r0, r3
 80016fc:	b25b      	sxtb	r3, r3
 80016fe:	430b      	orrs	r3, r1
 8001700:	b25b      	sxtb	r3, r3
 8001702:	b2d9      	uxtb	r1, r3
 8001704:	4b3c      	ldr	r3, [pc, #240]	; (80017f8 <isr_fall+0x7d0>)
 8001706:	4413      	add	r3, r2
 8001708:	460a      	mov	r2, r1
 800170a:	721a      	strb	r2, [r3, #8]
 800170c:	e052      	b.n	80017b4 <isr_fall+0x78c>
                } else if (InRange(a, TUS_AEHA * 1)) {
 800170e:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001712:	4618      	mov	r0, r3
 8001714:	f7fe ff1e 	bl	8000554 <__aeabi_i2d>
 8001718:	a333      	add	r3, pc, #204	; (adr r3, 80017e8 <isr_fall+0x7c0>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe ff83 	bl	8000628 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7fe ff12 	bl	8000554 <__aeabi_i2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4620      	mov	r0, r4
 8001736:	4629      	mov	r1, r5
 8001738:	f7ff f9e8 	bl	8000b0c <__aeabi_dcmplt>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d038      	beq.n	80017b4 <isr_fall+0x78c>
 8001742:	68f8      	ldr	r0, [r7, #12]
 8001744:	f7fe ff06 	bl	8000554 <__aeabi_i2d>
 8001748:	4604      	mov	r4, r0
 800174a:	460d      	mov	r5, r1
 800174c:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe feff 	bl	8000554 <__aeabi_i2d>
 8001756:	a326      	add	r3, pc, #152	; (adr r3, 80017f0 <isr_fall+0x7c8>)
 8001758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800175c:	f7fe ff64 	bl	8000628 <__aeabi_dmul>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	4620      	mov	r0, r4
 8001766:	4629      	mov	r1, r5
 8001768:	f7ff f9d0 	bl	8000b0c <__aeabi_dcmplt>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d020      	beq.n	80017b4 <isr_fall+0x78c>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001772:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <isr_fall+0x7d0>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b00      	cmp	r3, #0
 8001778:	da00      	bge.n	800177c <isr_fall+0x754>
 800177a:	3307      	adds	r3, #7
 800177c:	10db      	asrs	r3, r3, #3
 800177e:	461a      	mov	r2, r3
 8001780:	4b1d      	ldr	r3, [pc, #116]	; (80017f8 <isr_fall+0x7d0>)
 8001782:	4413      	add	r3, r2
 8001784:	7a1b      	ldrb	r3, [r3, #8]
 8001786:	b259      	sxtb	r1, r3
 8001788:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <isr_fall+0x7d0>)
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	4258      	negs	r0, r3
 800178e:	f003 0307 	and.w	r3, r3, #7
 8001792:	f000 0007 	and.w	r0, r0, #7
 8001796:	bf58      	it	pl
 8001798:	4243      	negpl	r3, r0
 800179a:	2001      	movs	r0, #1
 800179c:	fa00 f303 	lsl.w	r3, r0, r3
 80017a0:	b25b      	sxtb	r3, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	b25b      	sxtb	r3, r3
 80017a6:	400b      	ands	r3, r1
 80017a8:	b25b      	sxtb	r3, r3
 80017aa:	b2d9      	uxtb	r1, r3
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <isr_fall+0x7d0>)
 80017ae:	4413      	add	r3, r2
 80017b0:	460a      	mov	r2, r1
 80017b2:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 80017b4:	4b10      	ldr	r3, [pc, #64]	; (80017f8 <isr_fall+0x7d0>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	3301      	adds	r3, #1
 80017ba:	4a0f      	ldr	r2, [pc, #60]	; (80017f8 <isr_fall+0x7d0>)
 80017bc:	6053      	str	r3, [r2, #4]
            break;
 80017be:	e00c      	b.n	80017da <isr_fall+0x7b2>
            } else if (SONY == data.format) {
 80017c0:	4b0d      	ldr	r3, [pc, #52]	; (80017f8 <isr_fall+0x7d0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b05      	cmp	r3, #5
 80017c6:	d108      	bne.n	80017da <isr_fall+0x7b2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <isr_fall+0x7d4>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0c      	ldr	r2, [pc, #48]	; (8001800 <isr_fall+0x7d8>)
 80017ce:	6113      	str	r3, [r2, #16]
            break;
 80017d0:	e003      	b.n	80017da <isr_fall+0x7b2>
            break;
 80017d2:	bf00      	nop
 80017d4:	e002      	b.n	80017dc <isr_fall+0x7b4>
            break;
 80017d6:	bf00      	nop
 80017d8:	e000      	b.n	80017dc <isr_fall+0x7b4>
            break;
 80017da:	bf00      	nop
    }
    UNLOCK();
}
 80017dc:	bf00      	nop
 80017de:	3710      	adds	r7, #16
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bdb0      	pop	{r4, r5, r7, pc}
 80017e4:	f3af 8000 	nop.w
 80017e8:	66666666 	.word	0x66666666
 80017ec:	3fe66666 	.word	0x3fe66666
 80017f0:	cccccccd 	.word	0xcccccccd
 80017f4:	3ff4cccc 	.word	0x3ff4cccc
 80017f8:	2000009c 	.word	0x2000009c
 80017fc:	20000114 	.word	0x20000114
 8001800:	200000e4 	.word	0x200000e4
 8001804:	00000000 	.word	0x00000000

08001808 <isr_rise>:

void isr_rise(void) {
 8001808:	b5b0      	push	{r4, r5, r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
    LOCK();
    switch (work.state) {
 800180e:	4ba4      	ldr	r3, [pc, #656]	; (8001aa0 <isr_rise+0x298>)
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	2b02      	cmp	r3, #2
 8001814:	f000 812e 	beq.w	8001a74 <isr_rise+0x26c>
 8001818:	2b02      	cmp	r3, #2
 800181a:	f300 812d 	bgt.w	8001a78 <isr_rise+0x270>
 800181e:	2b00      	cmp	r3, #0
 8001820:	d002      	beq.n	8001828 <isr_rise+0x20>
 8001822:	2b01      	cmp	r3, #1
 8001824:	d058      	beq.n	80018d8 <isr_rise+0xd0>
            }
            break;
        case Received:
            break;
        default:
            break;
 8001826:	e127      	b.n	8001a78 <isr_rise+0x270>
            if (0 <= work.c1) {
 8001828:	4b9d      	ldr	r3, [pc, #628]	; (8001aa0 <isr_rise+0x298>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	db50      	blt.n	80018d2 <isr_rise+0xca>
                work.c2 = IR_NEC_Tick;  //timer.read_us();
 8001830:	4b9c      	ldr	r3, [pc, #624]	; (8001aa4 <isr_rise+0x29c>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a9a      	ldr	r2, [pc, #616]	; (8001aa0 <isr_rise+0x298>)
 8001836:	6093      	str	r3, [r2, #8]
                int a = work.c2 - work.c1;
 8001838:	4b99      	ldr	r3, [pc, #612]	; (8001aa0 <isr_rise+0x298>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4b98      	ldr	r3, [pc, #608]	; (8001aa0 <isr_rise+0x298>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	603b      	str	r3, [r7, #0]
                if (InRange(a, TUS_SONY * 4)) {
 8001844:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	4618      	mov	r0, r3
 800184c:	f7fe fe82 	bl	8000554 <__aeabi_i2d>
 8001850:	a38f      	add	r3, pc, #572	; (adr r3, 8001a90 <isr_rise+0x288>)
 8001852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001856:	f7fe fee7 	bl	8000628 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4614      	mov	r4, r2
 8001860:	461d      	mov	r5, r3
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f7fe fe76 	bl	8000554 <__aeabi_i2d>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4620      	mov	r0, r4
 800186e:	4629      	mov	r1, r5
 8001870:	f7ff f94c 	bl	8000b0c <__aeabi_dcmplt>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d022      	beq.n	80018c0 <isr_rise+0xb8>
 800187a:	6838      	ldr	r0, [r7, #0]
 800187c:	f7fe fe6a 	bl	8000554 <__aeabi_i2d>
 8001880:	4604      	mov	r4, r0
 8001882:	460d      	mov	r5, r1
 8001884:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fe62 	bl	8000554 <__aeabi_i2d>
 8001890:	a381      	add	r3, pc, #516	; (adr r3, 8001a98 <isr_rise+0x290>)
 8001892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001896:	f7fe fec7 	bl	8000628 <__aeabi_dmul>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7ff f933 	bl	8000b0c <__aeabi_dcmplt>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d009      	beq.n	80018c0 <isr_rise+0xb8>
                    data.format = SONY;
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <isr_rise+0x2a0>)
 80018ae:	2205      	movs	r2, #5
 80018b0:	701a      	strb	r2, [r3, #0]
                    work.state = Receiving;
 80018b2:	4b7b      	ldr	r3, [pc, #492]	; (8001aa0 <isr_rise+0x298>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
                    data.bitcount = 0;
 80018b8:	4b7b      	ldr	r3, [pc, #492]	; (8001aa8 <isr_rise+0x2a0>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	605a      	str	r2, [r3, #4]
            break;
 80018be:	e0dd      	b.n	8001a7c <isr_rise+0x274>
                    if (a < MINIMUM_LEADER_WIDTH) {
 80018c0:	4b7a      	ldr	r3, [pc, #488]	; (8001aac <isr_rise+0x2a4>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	f280 80d8 	bge.w	8001a7c <isr_rise+0x274>
                        init_state();
 80018cc:	f7ff fb68 	bl	8000fa0 <init_state>
            break;
 80018d0:	e0d4      	b.n	8001a7c <isr_rise+0x274>
                init_state();
 80018d2:	f7ff fb65 	bl	8000fa0 <init_state>
            break;
 80018d6:	e0d1      	b.n	8001a7c <isr_rise+0x274>
            if (NEC == data.format) {
 80018d8:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <isr_rise+0x2a0>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d104      	bne.n	80018ea <isr_rise+0xe2>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80018e0:	4b70      	ldr	r3, [pc, #448]	; (8001aa4 <isr_rise+0x29c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a6e      	ldr	r2, [pc, #440]	; (8001aa0 <isr_rise+0x298>)
 80018e6:	6113      	str	r3, [r2, #16]
            break;
 80018e8:	e0ca      	b.n	8001a80 <isr_rise+0x278>
            } else if (AEHA == data.format) {
 80018ea:	4b6f      	ldr	r3, [pc, #444]	; (8001aa8 <isr_rise+0x2a0>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d104      	bne.n	80018fc <isr_rise+0xf4>
                work.d1 = IR_NEC_Tick;  //timer.read_us();
 80018f2:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <isr_rise+0x29c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a6a      	ldr	r2, [pc, #424]	; (8001aa0 <isr_rise+0x298>)
 80018f8:	6113      	str	r3, [r2, #16]
            break;
 80018fa:	e0c1      	b.n	8001a80 <isr_rise+0x278>
            } else if (SONY == data.format) {
 80018fc:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <isr_rise+0x2a0>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b05      	cmp	r3, #5
 8001902:	f040 80bd 	bne.w	8001a80 <isr_rise+0x278>
                work.d2 = IR_NEC_Tick;  //timer.read_us();
 8001906:	4b67      	ldr	r3, [pc, #412]	; (8001aa4 <isr_rise+0x29c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <isr_rise+0x298>)
 800190c:	6153      	str	r3, [r2, #20]
                int a = work.d2 - work.d1;
 800190e:	4b64      	ldr	r3, [pc, #400]	; (8001aa0 <isr_rise+0x298>)
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	4b63      	ldr	r3, [pc, #396]	; (8001aa0 <isr_rise+0x298>)
 8001914:	691b      	ldr	r3, [r3, #16]
 8001916:	1ad3      	subs	r3, r2, r3
 8001918:	607b      	str	r3, [r7, #4]
                if (InRange(a, TUS_SONY * 2)) {
 800191a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fe17 	bl	8000554 <__aeabi_i2d>
 8001926:	a35a      	add	r3, pc, #360	; (adr r3, 8001a90 <isr_rise+0x288>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fe7c 	bl	8000628 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	461d      	mov	r5, r3
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f7fe fe0b 	bl	8000554 <__aeabi_i2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	4620      	mov	r0, r4
 8001944:	4629      	mov	r1, r5
 8001946:	f7ff f8e1 	bl	8000b0c <__aeabi_dcmplt>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d038      	beq.n	80019c2 <isr_rise+0x1ba>
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f7fe fdff 	bl	8000554 <__aeabi_i2d>
 8001956:	4604      	mov	r4, r0
 8001958:	460d      	mov	r5, r1
 800195a:	f44f 7316 	mov.w	r3, #600	; 0x258
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe fdf7 	bl	8000554 <__aeabi_i2d>
 8001966:	a34c      	add	r3, pc, #304	; (adr r3, 8001a98 <isr_rise+0x290>)
 8001968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196c:	f7fe fe5c 	bl	8000628 <__aeabi_dmul>
 8001970:	4602      	mov	r2, r0
 8001972:	460b      	mov	r3, r1
 8001974:	4620      	mov	r0, r4
 8001976:	4629      	mov	r1, r5
 8001978:	f7ff f8c8 	bl	8000b0c <__aeabi_dcmplt>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d01f      	beq.n	80019c2 <isr_rise+0x1ba>
                    data.buffer[data.bitcount / 8] |= (1 << (data.bitcount % 8));
 8001982:	4b49      	ldr	r3, [pc, #292]	; (8001aa8 <isr_rise+0x2a0>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	da00      	bge.n	800198c <isr_rise+0x184>
 800198a:	3307      	adds	r3, #7
 800198c:	10db      	asrs	r3, r3, #3
 800198e:	461a      	mov	r2, r3
 8001990:	4b45      	ldr	r3, [pc, #276]	; (8001aa8 <isr_rise+0x2a0>)
 8001992:	4413      	add	r3, r2
 8001994:	7a1b      	ldrb	r3, [r3, #8]
 8001996:	b259      	sxtb	r1, r3
 8001998:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <isr_rise+0x2a0>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	4258      	negs	r0, r3
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	f000 0007 	and.w	r0, r0, #7
 80019a6:	bf58      	it	pl
 80019a8:	4243      	negpl	r3, r0
 80019aa:	2001      	movs	r0, #1
 80019ac:	fa00 f303 	lsl.w	r3, r0, r3
 80019b0:	b25b      	sxtb	r3, r3
 80019b2:	430b      	orrs	r3, r1
 80019b4:	b25b      	sxtb	r3, r3
 80019b6:	b2d9      	uxtb	r1, r3
 80019b8:	4b3b      	ldr	r3, [pc, #236]	; (8001aa8 <isr_rise+0x2a0>)
 80019ba:	4413      	add	r3, r2
 80019bc:	460a      	mov	r2, r1
 80019be:	721a      	strb	r2, [r3, #8]
 80019c0:	e052      	b.n	8001a68 <isr_rise+0x260>
                } else if (InRange(a, TUS_SONY * 1)) {
 80019c2:	f44f 7316 	mov.w	r3, #600	; 0x258
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fdc4 	bl	8000554 <__aeabi_i2d>
 80019cc:	a330      	add	r3, pc, #192	; (adr r3, 8001a90 <isr_rise+0x288>)
 80019ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d2:	f7fe fe29 	bl	8000628 <__aeabi_dmul>
 80019d6:	4602      	mov	r2, r0
 80019d8:	460b      	mov	r3, r1
 80019da:	4614      	mov	r4, r2
 80019dc:	461d      	mov	r5, r3
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7fe fdb8 	bl	8000554 <__aeabi_i2d>
 80019e4:	4602      	mov	r2, r0
 80019e6:	460b      	mov	r3, r1
 80019e8:	4620      	mov	r0, r4
 80019ea:	4629      	mov	r1, r5
 80019ec:	f7ff f88e 	bl	8000b0c <__aeabi_dcmplt>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d038      	beq.n	8001a68 <isr_rise+0x260>
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7fe fdac 	bl	8000554 <__aeabi_i2d>
 80019fc:	4604      	mov	r4, r0
 80019fe:	460d      	mov	r5, r1
 8001a00:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fda5 	bl	8000554 <__aeabi_i2d>
 8001a0a:	a323      	add	r3, pc, #140	; (adr r3, 8001a98 <isr_rise+0x290>)
 8001a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a10:	f7fe fe0a 	bl	8000628 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4620      	mov	r0, r4
 8001a1a:	4629      	mov	r1, r5
 8001a1c:	f7ff f876 	bl	8000b0c <__aeabi_dcmplt>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d020      	beq.n	8001a68 <isr_rise+0x260>
                    data.buffer[data.bitcount / 8] &= ~(1 << (data.bitcount % 8));
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <isr_rise+0x2a0>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	da00      	bge.n	8001a30 <isr_rise+0x228>
 8001a2e:	3307      	adds	r3, #7
 8001a30:	10db      	asrs	r3, r3, #3
 8001a32:	461a      	mov	r2, r3
 8001a34:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <isr_rise+0x2a0>)
 8001a36:	4413      	add	r3, r2
 8001a38:	7a1b      	ldrb	r3, [r3, #8]
 8001a3a:	b259      	sxtb	r1, r3
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <isr_rise+0x2a0>)
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	4258      	negs	r0, r3
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	f000 0007 	and.w	r0, r0, #7
 8001a4a:	bf58      	it	pl
 8001a4c:	4243      	negpl	r3, r0
 8001a4e:	2001      	movs	r0, #1
 8001a50:	fa00 f303 	lsl.w	r3, r0, r3
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	43db      	mvns	r3, r3
 8001a58:	b25b      	sxtb	r3, r3
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	b2d9      	uxtb	r1, r3
 8001a60:	4b11      	ldr	r3, [pc, #68]	; (8001aa8 <isr_rise+0x2a0>)
 8001a62:	4413      	add	r3, r2
 8001a64:	460a      	mov	r2, r1
 8001a66:	721a      	strb	r2, [r3, #8]
                data.bitcount++;
 8001a68:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <isr_rise+0x2a0>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	4a0e      	ldr	r2, [pc, #56]	; (8001aa8 <isr_rise+0x2a0>)
 8001a70:	6053      	str	r3, [r2, #4]
            break;
 8001a72:	e005      	b.n	8001a80 <isr_rise+0x278>
            break;
 8001a74:	bf00      	nop
 8001a76:	e004      	b.n	8001a82 <isr_rise+0x27a>
            break;
 8001a78:	bf00      	nop
 8001a7a:	e002      	b.n	8001a82 <isr_rise+0x27a>
            break;
 8001a7c:	bf00      	nop
 8001a7e:	e000      	b.n	8001a82 <isr_rise+0x27a>
            break;
 8001a80:	bf00      	nop
    }
    UNLOCK();
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bdb0      	pop	{r4, r5, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	f3af 8000 	nop.w
 8001a90:	66666666 	.word	0x66666666
 8001a94:	3fe66666 	.word	0x3fe66666
 8001a98:	cccccccd 	.word	0xcccccccd
 8001a9c:	3ff4cccc 	.word	0x3ff4cccc
 8001aa0:	200000e4 	.word	0x200000e4
 8001aa4:	20000114 	.word	0x20000114
 8001aa8:	2000009c 	.word	0x2000009c
 8001aac:	0800acac 	.word	0x0800acac

08001ab0 <isr_timeout>:

void isr_timeout(void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
           work.d2,
           work.state,
           data.format,
           data.bitcount);
#endif
    if (work.state == Receiving) {
 8001ab4:	4b12      	ldr	r3, [pc, #72]	; (8001b00 <isr_timeout+0x50>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d11f      	bne.n	8001afc <isr_timeout+0x4c>
        work.state = Received;
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <isr_timeout+0x50>)
 8001abe:	2202      	movs	r2, #2
 8001ac0:	701a      	strb	r2, [r3, #0]
        HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); //input interrupt stop
 8001ac2:	2028      	movs	r0, #40	; 0x28
 8001ac4:	f004 fa15 	bl	8005ef2 <HAL_NVIC_DisableIRQ>
        isr_timeout_flag = 0;
 8001ac8:	4b0e      	ldr	r3, [pc, #56]	; (8001b04 <isr_timeout+0x54>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  		isr_timeout_counter = 0;
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <isr_timeout+0x58>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
        work.c1 = -1;
 8001ad4:	4b0a      	ldr	r3, [pc, #40]	; (8001b00 <isr_timeout+0x50>)
 8001ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8001ada:	605a      	str	r2, [r3, #4]
        work.c2 = -1;
 8001adc:	4b08      	ldr	r3, [pc, #32]	; (8001b00 <isr_timeout+0x50>)
 8001ade:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae2:	609a      	str	r2, [r3, #8]
        work.c3 = -1;
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <isr_timeout+0x50>)
 8001ae6:	f04f 32ff 	mov.w	r2, #4294967295
 8001aea:	60da      	str	r2, [r3, #12]
        work.d1 = -1;
 8001aec:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <isr_timeout+0x50>)
 8001aee:	f04f 32ff 	mov.w	r2, #4294967295
 8001af2:	611a      	str	r2, [r3, #16]
        work.d2 = -1;
 8001af4:	4b02      	ldr	r3, [pc, #8]	; (8001b00 <isr_timeout+0x50>)
 8001af6:	f04f 32ff 	mov.w	r2, #4294967295
 8001afa:	615a      	str	r2, [r3, #20]
        //printf("what!!!!!");
    }
    UNLOCK();
}
 8001afc:	bf00      	nop
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	200000e4 	.word	0x200000e4
 8001b04:	20000119 	.word	0x20000119
 8001b08:	20000118 	.word	0x20000118

08001b0c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001b10:	f3bf 8f4f 	dsb	sy
}
 8001b14:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001b16:	4b06      	ldr	r3, [pc, #24]	; (8001b30 <__NVIC_SystemReset+0x24>)
 8001b18:	68db      	ldr	r3, [r3, #12]
 8001b1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001b1e:	4904      	ldr	r1, [pc, #16]	; (8001b30 <__NVIC_SystemReset+0x24>)
 8001b20:	4b04      	ldr	r3, [pc, #16]	; (8001b34 <__NVIC_SystemReset+0x28>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001b26:	f3bf 8f4f 	dsb	sy
}
 8001b2a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001b2c:	bf00      	nop
 8001b2e:	e7fd      	b.n	8001b2c <__NVIC_SystemReset+0x20>
 8001b30:	e000ed00 	.word	0xe000ed00
 8001b34:	05fa0004 	.word	0x05fa0004

08001b38 <HAL_TIM_PeriodElapsedCallback>:
int inhome_check_cnt = 0;;
//uint8_t recv_buf[32] = {0,};


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a34      	ldr	r2, [pc, #208]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d10c      	bne.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  us_Tick++;
 8001b4a:	4b34      	ldr	r3, [pc, #208]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b52:	6013      	str	r3, [r2, #0]
	  if(us_Tick>0xffff0000){us_Tick=0;}
 8001b54:	4b31      	ldr	r3, [pc, #196]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001b5c:	d902      	bls.n	8001b64 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8001b5e:	4b2f      	ldr	r3, [pc, #188]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM6)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a2d      	ldr	r2, [pc, #180]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d116      	bne.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x64>
  {
	  gTick++;
 8001b6e:	4b2d      	ldr	r3, [pc, #180]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	3301      	adds	r3, #1
 8001b74:	4a2b      	ldr	r2, [pc, #172]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b76:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8001b7a:	6819      	ldr	r1, [r3, #0]
 8001b7c:	4b2a      	ldr	r3, [pc, #168]	; (8001c28 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8001b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8001b82:	08da      	lsrs	r2, r3, #3
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	005b      	lsls	r3, r3, #1
 8001b8c:	1aca      	subs	r2, r1, r3
 8001b8e:	2a00      	cmp	r2, #0
 8001b90:	d104      	bne.n	8001b9c <HAL_TIM_PeriodElapsedCallback+0x64>
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	3301      	adds	r3, #1
 8001b98:	4a24      	ldr	r2, [pc, #144]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8001b9a:	6013      	str	r3, [r2, #0]
  }

  if(htim->Instance == TIM7)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a23      	ldr	r2, [pc, #140]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x88>
  {
	  USS_tick++;
 8001ba6:	4b23      	ldr	r3, [pc, #140]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3301      	adds	r3, #1
 8001bac:	4a21      	ldr	r2, [pc, #132]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bae:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8001bb0:	4b20      	ldr	r3, [pc, #128]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001bb8:	d902      	bls.n	8001bc0 <HAL_TIM_PeriodElapsedCallback+0x88>
 8001bba:	4b1e      	ldr	r3, [pc, #120]	; (8001c34 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM9)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a1c      	ldr	r2, [pc, #112]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x100>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d118      	bne.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0xc4>
  {
	  if(TIR_setData_flag){tick();}
 8001bca:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <HAL_TIM_PeriodElapsedCallback+0x104>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_TIM_PeriodElapsedCallback+0x9e>
 8001bd2:	f000 ff9d 	bl	8002b10 <tick>
	  if(isr_timeout_flag){
 8001bd6:	4b1a      	ldr	r3, [pc, #104]	; (8001c40 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d005      	beq.n	8001bea <HAL_TIM_PeriodElapsedCallback+0xb2>
		  isr_timeout_counter++;
 8001bde:	4b19      	ldr	r3, [pc, #100]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	3301      	adds	r3, #1
 8001be4:	b2da      	uxtb	r2, r3
 8001be6:	4b17      	ldr	r3, [pc, #92]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001be8:	701a      	strb	r2, [r3, #0]
		  //printf("timeoutflag: %d, isr_timeout_counter: %d\n", isr_timeout_flag,isr_timeout_counter);
	  }

	  if(isr_timeout_counter>1)//횟수 수정할 것
 8001bea:	4b16      	ldr	r3, [pc, #88]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d904      	bls.n	8001bfc <HAL_TIM_PeriodElapsedCallback+0xc4>
	  {
		  isr_timeout_counter = 0;
 8001bf2:	4b14      	ldr	r3, [pc, #80]	; (8001c44 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	701a      	strb	r2, [r3, #0]
		  isr_timeout();
 8001bf8:	f7ff ff5a 	bl	8001ab0 <isr_timeout>
	  }

  }

  if(htim->Instance == TIM14)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a11      	ldr	r2, [pc, #68]	; (8001c48 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d104      	bne.n	8001c10 <HAL_TIM_PeriodElapsedCallback+0xd8>
  {
	  IR_NEC_Tick+=4;
 8001c06:	4b11      	ldr	r3, [pc, #68]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001c0e:	6013      	str	r3, [r2, #0]
	  //printf("%d", IR_NEC_Tick);
	  //if(IR_NEC_Tick>10) {HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);IR_NEC_Tick=0;}
	  //HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
  }
}
 8001c10:	bf00      	nop
 8001c12:	3708      	adds	r7, #8
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40000c00 	.word	0x40000c00
 8001c1c:	200000fc 	.word	0x200000fc
 8001c20:	40001000 	.word	0x40001000
 8001c24:	20000100 	.word	0x20000100
 8001c28:	cccccccd 	.word	0xcccccccd
 8001c2c:	20000108 	.word	0x20000108
 8001c30:	40001400 	.word	0x40001400
 8001c34:	20000138 	.word	0x20000138
 8001c38:	40014000 	.word	0x40014000
 8001c3c:	20000110 	.word	0x20000110
 8001c40:	20000119 	.word	0x20000119
 8001c44:	20000118 	.word	0x20000118
 8001c48:	40002000 	.word	0x40002000
 8001c4c:	20000114 	.word	0x20000114

08001c50 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	4603      	mov	r3, r0
 8001c58:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8001c5a:	88fb      	ldrh	r3, [r7, #6]
 8001c5c:	2b40      	cmp	r3, #64	; 0x40
 8001c5e:	d103      	bne.n	8001c68 <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = us_Tick;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_GPIO_EXTI_Callback+0x50>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0f      	ldr	r2, [pc, #60]	; (8001ca4 <HAL_GPIO_EXTI_Callback+0x54>)
 8001c66:	6013      	str	r3, [r2, #0]
    }

//    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
//    HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);

    if(GPIO_Pin == evt_rxpin_Pin){ //check interrupt for specific pin
 8001c68:	88fb      	ldrh	r3, [r7, #6]
 8001c6a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c6e:	d113      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x48>
            if(HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){ //check pin state
 8001c70:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c76:	f004 fb95 	bl	80063a4 <HAL_GPIO_ReadPin>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d001      	beq.n	8001c84 <HAL_GPIO_EXTI_Callback+0x34>
                /* do something */ //high edge
            	//HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
            	//HAL_GPIO_WritePin(BLUEtest_GPIO_Port, BLUEtest_Pin, SET);
            	isr_rise();
 8001c80:	f7ff fdc2 	bl	8001808 <isr_rise>
            	//printf("high edge\n");
            }

            if(!HAL_GPIO_ReadPin(evt_rxpin_GPIO_Port, evt_rxpin_Pin)){
 8001c84:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c88:	4807      	ldr	r0, [pc, #28]	; (8001ca8 <HAL_GPIO_EXTI_Callback+0x58>)
 8001c8a:	f004 fb8b 	bl	80063a4 <HAL_GPIO_ReadPin>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d101      	bne.n	8001c98 <HAL_GPIO_EXTI_Callback+0x48>
                /* do something */ //low edge
            	//HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
            	//HAL_GPIO_WritePin(BLUEtest_GPIO_Port, BLUEtest_Pin, RESET);
            	isr_fall();
 8001c94:	f7ff f9c8 	bl	8001028 <isr_fall>
            	//printf("low edge\n");
            }
        }
}
 8001c98:	bf00      	nop
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	200000fc 	.word	0x200000fc
 8001ca4:	20000134 	.word	0x20000134
 8001ca8:	40021000 	.word	0x40021000

08001cac <startTTS>:


void startTTS()
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1c5a      	adds	r2, r3, #1
 8001cba:	60fa      	str	r2, [r7, #12]
 8001cbc:	3310      	adds	r3, #16
 8001cbe:	443b      	add	r3, r7
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	60fa      	str	r2, [r7, #12]
 8001ccc:	3310      	adds	r3, #16
 8001cce:	443b      	add	r3, r7
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	1c5a      	adds	r2, r3, #1
 8001cda:	60fa      	str	r2, [r7, #12]
 8001cdc:	3310      	adds	r3, #16
 8001cde:	443b      	add	r3, r7
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1c5a      	adds	r2, r3, #1
 8001cea:	60fa      	str	r2, [r7, #12]
 8001cec:	3310      	adds	r3, #16
 8001cee:	443b      	add	r3, r7
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	443b      	add	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	1c5a      	adds	r2, r3, #1
 8001d0a:	60fa      	str	r2, [r7, #12]
 8001d0c:	3310      	adds	r3, #16
 8001d0e:	443b      	add	r3, r7
 8001d10:	2200      	movs	r2, #0
 8001d12:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	60fa      	str	r2, [r7, #12]
 8001d1c:	3310      	adds	r3, #16
 8001d1e:	443b      	add	r3, r7
 8001d20:	2201      	movs	r2, #1
 8001d22:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	1c5a      	adds	r2, r3, #1
 8001d2a:	60fa      	str	r2, [r7, #12]
 8001d2c:	3310      	adds	r3, #16
 8001d2e:	443b      	add	r3, r7
 8001d30:	2200      	movs	r2, #0
 8001d32:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001d36:	1d39      	adds	r1, r7, #4
 8001d38:	2301      	movs	r3, #1
 8001d3a:	2208      	movs	r2, #8
 8001d3c:	f241 3089 	movw	r0, #5001	; 0x1389
 8001d40:	f001 f98a 	bl	8003058 <sendCan>
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}

08001d4c <endTTS>:

void endTTS()
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	60fa      	str	r2, [r7, #12]
 8001d5c:	3310      	adds	r3, #16
 8001d5e:	443b      	add	r3, r7
 8001d60:	2200      	movs	r2, #0
 8001d62:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	60fa      	str	r2, [r7, #12]
 8001d6c:	3310      	adds	r3, #16
 8001d6e:	443b      	add	r3, r7
 8001d70:	2200      	movs	r2, #0
 8001d72:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	60fa      	str	r2, [r7, #12]
 8001d7c:	3310      	adds	r3, #16
 8001d7e:	443b      	add	r3, r7
 8001d80:	2200      	movs	r2, #0
 8001d82:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	1c5a      	adds	r2, r3, #1
 8001d8a:	60fa      	str	r2, [r7, #12]
 8001d8c:	3310      	adds	r3, #16
 8001d8e:	443b      	add	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	1c5a      	adds	r2, r3, #1
 8001d9a:	60fa      	str	r2, [r7, #12]
 8001d9c:	3310      	adds	r3, #16
 8001d9e:	443b      	add	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	60fa      	str	r2, [r7, #12]
 8001dac:	3310      	adds	r3, #16
 8001dae:	443b      	add	r3, r7
 8001db0:	2200      	movs	r2, #0
 8001db2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 9;
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	1c5a      	adds	r2, r3, #1
 8001dba:	60fa      	str	r2, [r7, #12]
 8001dbc:	3310      	adds	r3, #16
 8001dbe:	443b      	add	r3, r7
 8001dc0:	2209      	movs	r2, #9
 8001dc2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1c5a      	adds	r2, r3, #1
 8001dca:	60fa      	str	r2, [r7, #12]
 8001dcc:	3310      	adds	r3, #16
 8001dce:	443b      	add	r3, r7
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8001dd6:	1d39      	adds	r1, r7, #4
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2208      	movs	r2, #8
 8001ddc:	f241 3089 	movw	r0, #5001	; 0x1389
 8001de0:	f001 f93a 	bl	8003058 <sendCan>
}
 8001de4:	bf00      	nop
 8001de6:	3710      	adds	r7, #16
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <parsePmm>:

void parsePmm(uint8_t *msg)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	3307      	adds	r3, #7
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	4b12      	ldr	r3, [pc, #72]	; (8001e48 <parsePmm+0x5c>)
 8001dfe:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	3306      	adds	r3, #6
 8001e04:	781a      	ldrb	r2, [r3, #0]
 8001e06:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <parsePmm+0x60>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	09d2      	lsrs	r2, r2, #7
 8001e0c:	b2d2      	uxtb	r2, r2
 8001e0e:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3306      	adds	r3, #6
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	119b      	asrs	r3, r3, #6
 8001e18:	b2da      	uxtb	r2, r3
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <parsePmm+0x60>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f002 0201 	and.w	r2, r2, #1
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3306      	adds	r3, #6
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	115b      	asrs	r3, r3, #5
 8001e2e:	b2da      	uxtb	r2, r3
 8001e30:	4b06      	ldr	r3, [pc, #24]	; (8001e4c <parsePmm+0x60>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f002 0201 	and.w	r2, r2, #1
 8001e38:	b2d2      	uxtb	r2, r2
 8001e3a:	745a      	strb	r2, [r3, #17]
}
 8001e3c:	bf00      	nop
 8001e3e:	370c      	adds	r7, #12
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	20000154 	.word	0x20000154
 8001e4c:	20000150 	.word	0x20000150

08001e50 <parseTop>:


void parseTop(uint8_t *msg)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e012      	b.n	8001e84 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	3307      	adds	r3, #7
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	461a      	mov	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	fa42 f303 	asr.w	r3, r2, r3
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	b2d9      	uxtb	r1, r3
 8001e74:	4a0a      	ldr	r2, [pc, #40]	; (8001ea0 <parseTop+0x50>)
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4413      	add	r3, r2
 8001e7a:	460a      	mov	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	3301      	adds	r3, #1
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	2b05      	cmp	r3, #5
 8001e88:	dde9      	ble.n	8001e5e <parseTop+0xe>
    touch = msg[6];
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	799a      	ldrb	r2, [r3, #6]
 8001e8e:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <parseTop+0x54>)
 8001e90:	701a      	strb	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	20000148 	.word	0x20000148
 8001ea4:	20000145 	.word	0x20000145

08001ea8 <parseState>:


void parseState(uint8_t *msg)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	4b19      	ldr	r3, [pc, #100]	; (8001f20 <parseState+0x78>)
 8001eba:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3305      	adds	r3, #5
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	09db      	lsrs	r3, r3, #7
 8001ec4:	b2da      	uxtb	r2, r3
 8001ec6:	4b17      	ldr	r3, [pc, #92]	; (8001f24 <parseState+0x7c>)
 8001ec8:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3305      	adds	r3, #5
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	119b      	asrs	r3, r3, #6
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <parseState+0x80>)
 8001edc:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	3304      	adds	r3, #4
 8001ee2:	781b      	ldrb	r3, [r3, #0]
 8001ee4:	09db      	lsrs	r3, r3, #7
 8001ee6:	b2da      	uxtb	r2, r3
 8001ee8:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <parseState+0x84>)
 8001eea:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	119b      	asrs	r3, r3, #6
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <parseState+0x88>)
 8001efe:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3304      	adds	r3, #4
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	115b      	asrs	r3, r3, #5
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	b2da      	uxtb	r2, r3
 8001f10:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <parseState+0x8c>)
 8001f12:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	2000013c 	.word	0x2000013c
 8001f24:	20000140 	.word	0x20000140
 8001f28:	20000141 	.word	0x20000141
 8001f2c:	20000142 	.word	0x20000142
 8001f30:	20000143 	.word	0x20000143
 8001f34:	20000144 	.word	0x20000144

08001f38 <controlMotor>:

void controlMotor()
{
 8001f38:	b598      	push	{r3, r4, r7, lr}
 8001f3a:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 8001f3c:	4b35      	ldr	r3, [pc, #212]	; (8002014 <controlMotor+0xdc>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d060      	beq.n	8002006 <controlMotor+0xce>
    {
        if(motor_disable_flag)
 8001f44:	4b34      	ldr	r3, [pc, #208]	; (8002018 <controlMotor+0xe0>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <controlMotor+0x1e>
        {
            enable();
 8001f4c:	f002 f948 	bl	80041e0 <enable>
            motor_disable_flag = 0;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <controlMotor+0xe0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001f56:	4b31      	ldr	r3, [pc, #196]	; (800201c <controlMotor+0xe4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d11e      	bne.n	8001f9c <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001f5e:	4b30      	ldr	r3, [pc, #192]	; (8002020 <controlMotor+0xe8>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f66:	4610      	mov	r0, r2
 8001f68:	4619      	mov	r1, r3
 8001f6a:	f7fe fdf7 	bl	8000b5c <__aeabi_d2iz>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	b21c      	sxth	r4, r3
 8001f72:	4b2b      	ldr	r3, [pc, #172]	; (8002020 <controlMotor+0xe8>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fded 	bl	8000b5c <__aeabi_d2iz>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	4619      	mov	r1, r3
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f002 fac9 	bl	8004520 <control>
            motor_break = 2;
 8001f8e:	4b23      	ldr	r3, [pc, #140]	; (800201c <controlMotor+0xe4>)
 8001f90:	2202      	movs	r2, #2
 8001f92:	601a      	str	r2, [r3, #0]
            count = 0;
 8001f94:	4b23      	ldr	r3, [pc, #140]	; (8002024 <controlMotor+0xec>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 8001f9a:	e039      	b.n	8002010 <controlMotor+0xd8>
        else if(motor_break == 2)
 8001f9c:	4b1f      	ldr	r3, [pc, #124]	; (800201c <controlMotor+0xe4>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d124      	bne.n	8001fee <controlMotor+0xb6>
            count ++;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <controlMotor+0xec>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	4a1e      	ldr	r2, [pc, #120]	; (8002024 <controlMotor+0xec>)
 8001fac:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 8001fae:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <controlMotor+0xe8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb6:	4610      	mov	r0, r2
 8001fb8:	4619      	mov	r1, r3
 8001fba:	f7fe fdcf 	bl	8000b5c <__aeabi_d2iz>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	b21c      	sxth	r4, r3
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <controlMotor+0xe8>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f7fe fdc5 	bl	8000b5c <__aeabi_d2iz>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f002 faa1 	bl	8004520 <control>
            if(count == 20)
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <controlMotor+0xec>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b14      	cmp	r3, #20
 8001fe4:	d114      	bne.n	8002010 <controlMotor+0xd8>
                motor_break = 3;
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <controlMotor+0xe4>)
 8001fe8:	2203      	movs	r2, #3
 8001fea:	601a      	str	r2, [r3, #0]
}
 8001fec:	e010      	b.n	8002010 <controlMotor+0xd8>
        else if(motor_break == 3)
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <controlMotor+0xe4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d10c      	bne.n	8002010 <controlMotor+0xd8>
            control(0,0);
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	2000      	movs	r0, #0
 8001ffa:	f002 fa91 	bl	8004520 <control>
            count = 0;
 8001ffe:	4b09      	ldr	r3, [pc, #36]	; (8002024 <controlMotor+0xec>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
}
 8002004:	e004      	b.n	8002010 <controlMotor+0xd8>
        disable();
 8002006:	f002 f94f 	bl	80042a8 <disable>
        motor_disable_flag = 1;
 800200a:	4b03      	ldr	r3, [pc, #12]	; (8002018 <controlMotor+0xe0>)
 800200c:	2201      	movs	r2, #1
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	bd98      	pop	{r3, r4, r7, pc}
 8002014:	20000000 	.word	0x20000000
 8002018:	2000012c 	.word	0x2000012c
 800201c:	20000128 	.word	0x20000128
 8002020:	20000160 	.word	0x20000160
 8002024:	2000016c 	.word	0x2000016c

08002028 <toRPM>:


int toRPM()
{
 8002028:	b5b0      	push	{r4, r5, r7, lr}
 800202a:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 800202c:	4b28      	ldr	r3, [pc, #160]	; (80020d0 <toRPM+0xa8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002034:	4b26      	ldr	r3, [pc, #152]	; (80020d0 <toRPM+0xa8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800203c:	a320      	add	r3, pc, #128	; (adr r3, 80020c0 <toRPM+0x98>)
 800203e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002042:	f7fe faf1 	bl	8000628 <__aeabi_dmul>
 8002046:	4602      	mov	r2, r0
 8002048:	460b      	mov	r3, r1
 800204a:	4620      	mov	r0, r4
 800204c:	4629      	mov	r1, r5
 800204e:	f7fe f935 	bl	80002bc <__adddf3>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4610      	mov	r0, r2
 8002058:	4619      	mov	r1, r3
 800205a:	4b1d      	ldr	r3, [pc, #116]	; (80020d0 <toRPM+0xa8>)
 800205c:	681c      	ldr	r4, [r3, #0]
 800205e:	a31a      	add	r3, pc, #104	; (adr r3, 80020c8 <toRPM+0xa0>)
 8002060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002064:	f7fe fae0 	bl	8000628 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8002070:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <toRPM+0xa8>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002078:	4b15      	ldr	r3, [pc, #84]	; (80020d0 <toRPM+0xa8>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002080:	a30f      	add	r3, pc, #60	; (adr r3, 80020c0 <toRPM+0x98>)
 8002082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002086:	f7fe facf 	bl	8000628 <__aeabi_dmul>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4620      	mov	r0, r4
 8002090:	4629      	mov	r1, r5
 8002092:	f7fe f911 	bl	80002b8 <__aeabi_dsub>
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	4610      	mov	r0, r2
 800209c:	4619      	mov	r1, r3
 800209e:	4b0c      	ldr	r3, [pc, #48]	; (80020d0 <toRPM+0xa8>)
 80020a0:	681c      	ldr	r4, [r3, #0]
 80020a2:	a309      	add	r3, pc, #36	; (adr r3, 80020c8 <toRPM+0xa0>)
 80020a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a8:	f7fe fabe 	bl	8000628 <__aeabi_dmul>
 80020ac:	4602      	mov	r2, r0
 80020ae:	460b      	mov	r3, r1
 80020b0:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	bdb0      	pop	{r4, r5, r7, pc}
 80020ba:	bf00      	nop
 80020bc:	f3af 8000 	nop.w
 80020c0:	0e560419 	.word	0x0e560419
 80020c4:	3fcdb22d 	.word	0x3fcdb22d
 80020c8:	31bcaa49 	.word	0x31bcaa49
 80020cc:	40625d31 	.word	0x40625d31
 80020d0:	20000160 	.word	0x20000160

080020d4 <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 80020d4:	b590      	push	{r4, r7, lr}
 80020d6:	b085      	sub	sp, #20
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	3301      	adds	r3, #1
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 80020f0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe fa2d 	bl	8000554 <__aeabi_i2d>
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <parseCmdvel+0x8c>)
 80020fc:	681c      	ldr	r4, [r3, #0]
 80020fe:	f04f 0200 	mov.w	r2, #0
 8002102:	4b18      	ldr	r3, [pc, #96]	; (8002164 <parseCmdvel+0x90>)
 8002104:	f7fe fbba 	bl	800087c <__aeabi_ddiv>
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3302      	adds	r3, #2
 8002114:	781b      	ldrb	r3, [r3, #0]
 8002116:	b21a      	sxth	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3303      	adds	r3, #3
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	021b      	lsls	r3, r3, #8
 8002120:	b21b      	sxth	r3, r3
 8002122:	4313      	orrs	r3, r2
 8002124:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 8002126:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800212a:	4618      	mov	r0, r3
 800212c:	f7fe fa12 	bl	8000554 <__aeabi_i2d>
 8002130:	4b0b      	ldr	r3, [pc, #44]	; (8002160 <parseCmdvel+0x8c>)
 8002132:	681c      	ldr	r4, [r3, #0]
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <parseCmdvel+0x90>)
 800213a:	f7fe fb9f 	bl	800087c <__aeabi_ddiv>
 800213e:	4602      	mov	r2, r0
 8002140:	460b      	mov	r3, r1
 8002142:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	791a      	ldrb	r2, [r3, #4]
 800214a:	4b07      	ldr	r3, [pc, #28]	; (8002168 <parseCmdvel+0x94>)
 800214c:	701a      	strb	r2, [r3, #0]
    toRPM();
 800214e:	f7ff ff6b 	bl	8002028 <toRPM>
    motor_break = 1;
 8002152:	4b06      	ldr	r3, [pc, #24]	; (800216c <parseCmdvel+0x98>)
 8002154:	2201      	movs	r2, #1
 8002156:	601a      	str	r2, [r3, #0]
}
 8002158:	bf00      	nop
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	bd90      	pop	{r4, r7, pc}
 8002160:	20000160 	.word	0x20000160
 8002164:	40590000 	.word	0x40590000
 8002168:	20000000 	.word	0x20000000
 800216c:	20000128 	.word	0x20000128

08002170 <sendEnc>:



void sendEnc(int id)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b087      	sub	sp, #28
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8002178:	2300      	movs	r3, #0
 800217a:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 800217c:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <sendEnc+0x18c>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8002184:	f04f 0200 	mov.w	r2, #0
 8002188:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <sendEnc+0x190>)
 800218a:	f7fe fa4d 	bl	8000628 <__aeabi_dmul>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f7fe fce1 	bl	8000b5c <__aeabi_d2iz>
 800219a:	4603      	mov	r3, r0
 800219c:	b219      	sxth	r1, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	617a      	str	r2, [r7, #20]
 80021a4:	b2ca      	uxtb	r2, r1
 80021a6:	3318      	adds	r3, #24
 80021a8:	443b      	add	r3, r7
 80021aa:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80021ae:	4b53      	ldr	r3, [pc, #332]	; (80022fc <sendEnc+0x18c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 80021b6:	f04f 0200 	mov.w	r2, #0
 80021ba:	4b51      	ldr	r3, [pc, #324]	; (8002300 <sendEnc+0x190>)
 80021bc:	f7fe fa34 	bl	8000628 <__aeabi_dmul>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4610      	mov	r0, r2
 80021c6:	4619      	mov	r1, r3
 80021c8:	f7fe fcc8 	bl	8000b5c <__aeabi_d2iz>
 80021cc:	4603      	mov	r3, r0
 80021ce:	b21b      	sxth	r3, r3
 80021d0:	121b      	asrs	r3, r3, #8
 80021d2:	b219      	sxth	r1, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	617a      	str	r2, [r7, #20]
 80021da:	b2ca      	uxtb	r2, r1
 80021dc:	3318      	adds	r3, #24
 80021de:	443b      	add	r3, r7
 80021e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 80021e4:	4b45      	ldr	r3, [pc, #276]	; (80022fc <sendEnc+0x18c>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	4b43      	ldr	r3, [pc, #268]	; (8002300 <sendEnc+0x190>)
 80021f2:	f7fe fa19 	bl	8000628 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4610      	mov	r0, r2
 80021fc:	4619      	mov	r1, r3
 80021fe:	f7fe fcad 	bl	8000b5c <__aeabi_d2iz>
 8002202:	4603      	mov	r3, r0
 8002204:	b219      	sxth	r1, r3
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	1c5a      	adds	r2, r3, #1
 800220a:	617a      	str	r2, [r7, #20]
 800220c:	b2ca      	uxtb	r2, r1
 800220e:	3318      	adds	r3, #24
 8002210:	443b      	add	r3, r7
 8002212:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 8002216:	4b39      	ldr	r3, [pc, #228]	; (80022fc <sendEnc+0x18c>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800221e:	f04f 0200 	mov.w	r2, #0
 8002222:	4b37      	ldr	r3, [pc, #220]	; (8002300 <sendEnc+0x190>)
 8002224:	f7fe fa00 	bl	8000628 <__aeabi_dmul>
 8002228:	4602      	mov	r2, r0
 800222a:	460b      	mov	r3, r1
 800222c:	4610      	mov	r0, r2
 800222e:	4619      	mov	r1, r3
 8002230:	f7fe fc94 	bl	8000b5c <__aeabi_d2iz>
 8002234:	4603      	mov	r3, r0
 8002236:	b21b      	sxth	r3, r3
 8002238:	121b      	asrs	r3, r3, #8
 800223a:	b219      	sxth	r1, r3
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	1c5a      	adds	r2, r3, #1
 8002240:	617a      	str	r2, [r7, #20]
 8002242:	b2ca      	uxtb	r2, r1
 8002244:	3318      	adds	r3, #24
 8002246:	443b      	add	r3, r7
 8002248:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <sendEnc+0x194>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	7c1b      	ldrb	r3, [r3, #16]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	b25a      	sxtb	r2, r3
 8002256:	4b2b      	ldr	r3, [pc, #172]	; (8002304 <sendEnc+0x194>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	7bdb      	ldrb	r3, [r3, #15]
 800225c:	b25b      	sxtb	r3, r3
 800225e:	4313      	orrs	r3, r2
 8002260:	b259      	sxtb	r1, r3
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	617a      	str	r2, [r7, #20]
 8002268:	b2ca      	uxtb	r2, r1
 800226a:	3318      	adds	r3, #24
 800226c:	443b      	add	r3, r7
 800226e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 8002272:	4b22      	ldr	r3, [pc, #136]	; (80022fc <sendEnc+0x18c>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b20      	ldr	r3, [pc, #128]	; (8002300 <sendEnc+0x190>)
 8002280:	f7fe f9d2 	bl	8000628 <__aeabi_dmul>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	4610      	mov	r0, r2
 800228a:	4619      	mov	r1, r3
 800228c:	697c      	ldr	r4, [r7, #20]
 800228e:	1c63      	adds	r3, r4, #1
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	f7fe fc8b 	bl	8000bac <__aeabi_d2uiz>
 8002296:	4603      	mov	r3, r0
 8002298:	b2da      	uxtb	r2, r3
 800229a:	f104 0318 	add.w	r3, r4, #24
 800229e:	443b      	add	r3, r7
 80022a0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 80022a4:	4b15      	ldr	r3, [pc, #84]	; (80022fc <sendEnc+0x18c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 80022ac:	f04f 0200 	mov.w	r2, #0
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <sendEnc+0x190>)
 80022b2:	f7fe f9b9 	bl	8000628 <__aeabi_dmul>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4610      	mov	r0, r2
 80022bc:	4619      	mov	r1, r3
 80022be:	697c      	ldr	r4, [r7, #20]
 80022c0:	1c63      	adds	r3, r4, #1
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	f7fe fc72 	bl	8000bac <__aeabi_d2uiz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	f104 0318 	add.w	r3, r4, #24
 80022d0:	443b      	add	r3, r7
 80022d2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	1c5a      	adds	r2, r3, #1
 80022da:	617a      	str	r2, [r7, #20]
 80022dc:	3318      	adds	r3, #24
 80022de:	443b      	add	r3, r7
 80022e0:	2200      	movs	r2, #0
 80022e2:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f107 010c 	add.w	r1, r7, #12
 80022ec:	2301      	movs	r3, #1
 80022ee:	2208      	movs	r2, #8
 80022f0:	f000 feb2 	bl	8003058 <sendCan>
}
 80022f4:	bf00      	nop
 80022f6:	371c      	adds	r7, #28
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd90      	pop	{r4, r7, pc}
 80022fc:	20000160 	.word	0x20000160
 8002300:	40590000 	.word	0x40590000
 8002304:	20000150 	.word	0x20000150

08002308 <toVW>:


int toVW(void)
{
 8002308:	b598      	push	{r3, r4, r7, lr}
 800230a:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 800230c:	4b2c      	ldr	r3, [pc, #176]	; (80023c0 <toVW+0xb8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002314:	4a2a      	ldr	r2, [pc, #168]	; (80023c0 <toVW+0xb8>)
 8002316:	6814      	ldr	r4, [r2, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f91b 	bl	8000554 <__aeabi_i2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 8002326:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <toVW+0xb8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800232e:	4a24      	ldr	r2, [pc, #144]	; (80023c0 <toVW+0xb8>)
 8002330:	6814      	ldr	r4, [r2, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f90e 	bl	8000554 <__aeabi_i2d>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 8002340:	4b1f      	ldr	r3, [pc, #124]	; (80023c0 <toVW+0xb8>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8002348:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <toVW+0xb8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002350:	f7fd ffb4 	bl	80002bc <__adddf3>
 8002354:	4602      	mov	r2, r0
 8002356:	460b      	mov	r3, r1
 8002358:	4610      	mov	r0, r2
 800235a:	4619      	mov	r1, r3
 800235c:	4b18      	ldr	r3, [pc, #96]	; (80023c0 <toVW+0xb8>)
 800235e:	681c      	ldr	r4, [r3, #0]
 8002360:	a313      	add	r3, pc, #76	; (adr r3, 80023b0 <toVW+0xa8>)
 8002362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002366:	f7fe f95f 	bl	8000628 <__aeabi_dmul>
 800236a:	4602      	mov	r2, r0
 800236c:	460b      	mov	r3, r1
 800236e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <toVW+0xb8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800237a:	4b11      	ldr	r3, [pc, #68]	; (80023c0 <toVW+0xb8>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002382:	f7fd ff99 	bl	80002b8 <__aeabi_dsub>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <toVW+0xb8>)
 8002390:	681c      	ldr	r4, [r3, #0]
 8002392:	a309      	add	r3, pc, #36	; (adr r3, 80023b8 <toVW+0xb0>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	f7fe f946 	bl	8000628 <__aeabi_dmul>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	bd98      	pop	{r3, r4, r7, pc}
 80023aa:	bf00      	nop
 80023ac:	f3af 8000 	nop.w
 80023b0:	306c65e9 	.word	0x306c65e9
 80023b4:	3f6be16e 	.word	0x3f6be16e
 80023b8:	5313b470 	.word	0x5313b470
 80023bc:	3f8e0b32 	.word	0x3f8e0b32
 80023c0:	20000160 	.word	0x20000160

080023c4 <parseEnc>:


void parseEnc(uint8_t *msg)
{
 80023c4:	b590      	push	{r4, r7, lr}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	781b      	ldrb	r3, [r3, #0]
 80023d0:	2bd8      	cmp	r3, #216	; 0xd8
 80023d2:	d136      	bne.n	8002442 <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	3302      	adds	r3, #2
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	b219      	sxth	r1, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3303      	adds	r3, #3
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	b21a      	sxth	r2, r3
 80023e6:	4b34      	ldr	r3, [pc, #208]	; (80024b8 <parseEnc+0xf4>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	b212      	sxth	r2, r2
 80023ee:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3305      	adds	r3, #5
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	b219      	sxth	r1, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	3306      	adds	r3, #6
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	021b      	lsls	r3, r3, #8
 8002402:	b21a      	sxth	r2, r3
 8002404:	4b2c      	ldr	r3, [pc, #176]	; (80024b8 <parseEnc+0xf4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	430a      	orrs	r2, r1
 800240a:	b212      	sxth	r2, r2
 800240c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 8002410:	4b29      	ldr	r3, [pc, #164]	; (80024b8 <parseEnc+0xf4>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 8002418:	b29b      	uxth	r3, r3
 800241a:	425b      	negs	r3, r3
 800241c:	b29a      	uxth	r2, r3
 800241e:	4b26      	ldr	r3, [pc, #152]	; (80024b8 <parseEnc+0xf4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	b212      	sxth	r2, r2
 8002424:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 8002428:	4b24      	ldr	r3, [pc, #144]	; (80024bc <parseEnc+0xf8>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	7852      	ldrb	r2, [r2, #1]
 8002430:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 8002432:	4b22      	ldr	r3, [pc, #136]	; (80024bc <parseEnc+0xf8>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	7912      	ldrb	r2, [r2, #4]
 800243a:	741a      	strb	r2, [r3, #16]

        toVW();
 800243c:	f7ff ff64 	bl	8002308 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 8002440:	e036      	b.n	80024b0 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	781b      	ldrb	r3, [r3, #0]
 8002446:	2bc1      	cmp	r3, #193	; 0xc1
 8002448:	d117      	bne.n	800247a <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	3304      	adds	r3, #4
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	461a      	mov	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3305      	adds	r3, #5
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	021b      	lsls	r3, r3, #8
 800245a:	4313      	orrs	r3, r2
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f879 	bl	8000554 <__aeabi_i2d>
 8002462:	4b15      	ldr	r3, [pc, #84]	; (80024b8 <parseEnc+0xf4>)
 8002464:	681c      	ldr	r4, [r3, #0]
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <parseEnc+0xfc>)
 800246c:	f7fe fa06 	bl	800087c <__aeabi_ddiv>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8002478:	e01a      	b.n	80024b0 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2bc8      	cmp	r3, #200	; 0xc8
 8002480:	d116      	bne.n	80024b0 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3304      	adds	r3, #4
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	461a      	mov	r2, r3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3305      	adds	r3, #5
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	4313      	orrs	r3, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f85d 	bl	8000554 <__aeabi_i2d>
 800249a:	4b07      	ldr	r3, [pc, #28]	; (80024b8 <parseEnc+0xf4>)
 800249c:	681c      	ldr	r4, [r3, #0]
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <parseEnc+0xfc>)
 80024a4:	f7fe f9ea 	bl	800087c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	20000160 	.word	0x20000160
 80024bc:	20000150 	.word	0x20000150
 80024c0:	40240000 	.word	0x40240000

080024c4 <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 80024c4:	b590      	push	{r4, r7, lr}
 80024c6:	b085      	sub	sp, #20
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	3304      	adds	r3, #4
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	b21a      	sxth	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3305      	adds	r3, #5
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	021b      	lsls	r3, r3, #8
 80024dc:	b21b      	sxth	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	3306      	adds	r3, #6
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	b21a      	sxth	r2, r3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	3307      	adds	r3, #7
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	021b      	lsls	r3, r3, #8
 80024f2:	b21b      	sxth	r3, r3
 80024f4:	4313      	orrs	r3, r2
 80024f6:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 80024f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80024fc:	425b      	negs	r3, r3
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe f828 	bl	8000554 <__aeabi_i2d>
 8002504:	f04f 0200 	mov.w	r2, #0
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <parseEnc114+0x9c>)
 800250a:	f7fe f9b7 	bl	800087c <__aeabi_ddiv>
 800250e:	4602      	mov	r2, r0
 8002510:	460b      	mov	r3, r1
 8002512:	4914      	ldr	r1, [pc, #80]	; (8002564 <parseEnc114+0xa0>)
 8002514:	680c      	ldr	r4, [r1, #0]
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fb1f 	bl	8000b5c <__aeabi_d2iz>
 800251e:	4603      	mov	r3, r0
 8002520:	b21b      	sxth	r3, r3
 8002522:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 8002526:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800252a:	4618      	mov	r0, r3
 800252c:	f7fe f812 	bl	8000554 <__aeabi_i2d>
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <parseEnc114+0x9c>)
 8002536:	f7fe f9a1 	bl	800087c <__aeabi_ddiv>
 800253a:	4602      	mov	r2, r0
 800253c:	460b      	mov	r3, r1
 800253e:	4909      	ldr	r1, [pc, #36]	; (8002564 <parseEnc114+0xa0>)
 8002540:	680c      	ldr	r4, [r1, #0]
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f7fe fb09 	bl	8000b5c <__aeabi_d2iz>
 800254a:	4603      	mov	r3, r0
 800254c:	b21b      	sxth	r3, r3
 800254e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 8002552:	f7ff fed9 	bl	8002308 <toVW>
}
 8002556:	bf00      	nop
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	bd90      	pop	{r4, r7, pc}
 800255e:	bf00      	nop
 8002560:	40240000 	.word	0x40240000
 8002564:	20000160 	.word	0x20000160

08002568 <parseState114>:

void parseState114(uint8_t *msg)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	3304      	adds	r3, #4
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	b25a      	sxtb	r2, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3305      	adds	r3, #5
 800257c:	781b      	ldrb	r3, [r3, #0]
 800257e:	021b      	lsls	r3, r3, #8
 8002580:	b25b      	sxtb	r3, r3
 8002582:	4313      	orrs	r3, r2
 8002584:	b25a      	sxtb	r2, r3
 8002586:	4b12      	ldr	r3, [pc, #72]	; (80025d0 <parseState114+0x68>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3306      	adds	r3, #6
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b25a      	sxtb	r2, r3
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3307      	adds	r3, #7
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	021b      	lsls	r3, r3, #8
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	4313      	orrs	r3, r2
 80025a2:	b25a      	sxtb	r2, r3
 80025a4:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <parseState114+0x68>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	b2d2      	uxtb	r2, r2
 80025aa:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <parseState114+0x68>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	7bdb      	ldrb	r3, [r3, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d104      	bne.n	80025c0 <parseState114+0x58>
 80025b6:	4b06      	ldr	r3, [pc, #24]	; (80025d0 <parseState114+0x68>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	7c1b      	ldrb	r3, [r3, #16]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <parseState114+0x60>
    {
        reset();
 80025c0:	f001 fec4 	bl	800434c <reset>
        startMotor();
 80025c4:	f001 fe02 	bl	80041cc <startMotor>
    }
}
 80025c8:	bf00      	nop
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	20000150 	.word	0x20000150

080025d4 <stateReady>:


int stateReady()//이거 전에 ir통신을 받아야 겠는데?
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 80025d8:	4b23      	ldr	r3, [pc, #140]	; (8002668 <stateReady+0x94>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	e039      	b.n	8002654 <stateReady+0x80>
	{
		    //check_msg = charging->checkIRdata();
		if(check_msg == 1)
 80025e0:	4b22      	ldr	r3, [pc, #136]	; (800266c <stateReady+0x98>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d102      	bne.n	80025ee <stateReady+0x1a>
		{
			start_docking_flag = 1;
 80025e8:	4b21      	ldr	r3, [pc, #132]	; (8002670 <stateReady+0x9c>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
		}

		if(ir_count++ >= 2)
 80025ee:	4b21      	ldr	r3, [pc, #132]	; (8002674 <stateReady+0xa0>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	491f      	ldr	r1, [pc, #124]	; (8002674 <stateReady+0xa0>)
 80025f6:	600a      	str	r2, [r1, #0]
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	dd08      	ble.n	800260e <stateReady+0x3a>
		{   HAL_NVIC_DisableIRQ(EXTI15_10_IRQn);
 80025fc:	2028      	movs	r0, #40	; 0x28
 80025fe:	f003 fc78 	bl	8005ef2 <HAL_NVIC_DisableIRQ>
			sendIRdata(robot_standby);
 8002602:	481d      	ldr	r0, [pc, #116]	; (8002678 <stateReady+0xa4>)
 8002604:	f000 fd82 	bl	800310c <sendIRdata>
			ir_count = 0;
 8002608:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <stateReady+0xa0>)
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
			//HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
		}

		if(start_docking_flag)
 800260e:	4b18      	ldr	r3, [pc, #96]	; (8002670 <stateReady+0x9c>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00c      	beq.n	8002630 <stateReady+0x5c>
		{
		   startTTS();
 8002616:	f7ff fb49 	bl	8001cac <startTTS>
		   //State_set(IDLE);
		   ready_flag = 1;
 800261a:	4b18      	ldr	r3, [pc, #96]	; (800267c <stateReady+0xa8>)
 800261c:	2201      	movs	r2, #1
 800261e:	701a      	strb	r2, [r3, #0]
		   start_docking_flag = 0;
 8002620:	4b13      	ldr	r3, [pc, #76]	; (8002670 <stateReady+0x9c>)
 8002622:	2200      	movs	r2, #0
 8002624:	701a      	strb	r2, [r3, #0]
		   //mutex.lock();
		   check_msg = 0;
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <stateReady+0x98>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
		   return 1;
 800262c:	2301      	movs	r3, #1
 800262e:	e019      	b.n	8002664 <stateReady+0x90>
//			inhome_check_cnt = 0;
//			endTTS();
//			//ThisThread::sleep_for(50);
//			NVIC_SystemReset();
//		}
		HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);
 8002630:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002634:	4812      	ldr	r0, [pc, #72]	; (8002680 <stateReady+0xac>)
 8002636:	f003 fee6 	bl	8006406 <HAL_GPIO_TogglePin>
		check_msg = checkIRdata();
 800263a:	f000 fd79 	bl	8003130 <checkIRdata>
 800263e:	4603      	mov	r3, r0
 8002640:	4a0a      	ldr	r2, [pc, #40]	; (800266c <stateReady+0x98>)
 8002642:	6013      	str	r3, [r2, #0]
		HAL_Delay(100);
 8002644:	2064      	movs	r0, #100	; 0x64
 8002646:	f002 fc6f 	bl	8004f28 <HAL_Delay>
	for(inhome_check_cnt=0;inhome_check_cnt<73;inhome_check_cnt++)
 800264a:	4b07      	ldr	r3, [pc, #28]	; (8002668 <stateReady+0x94>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3301      	adds	r3, #1
 8002650:	4a05      	ldr	r2, [pc, #20]	; (8002668 <stateReady+0x94>)
 8002652:	6013      	str	r3, [r2, #0]
 8002654:	4b04      	ldr	r3, [pc, #16]	; (8002668 <stateReady+0x94>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b48      	cmp	r3, #72	; 0x48
 800265a:	ddc1      	ble.n	80025e0 <stateReady+0xc>
	}
	endTTS();
 800265c:	f7ff fb76 	bl	8001d4c <endTTS>
	//ThisThread::sleep_for(50);
	NVIC_SystemReset();
 8002660:	f7ff fa54 	bl	8001b0c <__NVIC_SystemReset>
    //inhome_check_cnt++;
}
 8002664:	4618      	mov	r0, r3
 8002666:	bd80      	pop	{r7, pc}
 8002668:	20000168 	.word	0x20000168
 800266c:	2000015c 	.word	0x2000015c
 8002670:	20000159 	.word	0x20000159
 8002674:	20000164 	.word	0x20000164
 8002678:	20000004 	.word	0x20000004
 800267c:	20000158 	.word	0x20000158
 8002680:	40020400 	.word	0x40020400

08002684 <spinonce>:

void spinonce(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08a      	sub	sp, #40	; 0x28
 8002688:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 800268a:	4aab      	ldr	r2, [pc, #684]	; (8002938 <spinonce+0x2b4>)
 800268c:	f107 030c 	add.w	r3, r7, #12
 8002690:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002694:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 8002698:	2300      	movs	r3, #0
 800269a:	627b      	str	r3, [r7, #36]	; 0x24

    uint32_t CanId = 0;
 800269c:	2300      	movs	r3, #0
 800269e:	623b      	str	r3, [r7, #32]

    uint8_t robot_standby[4] = {0xCA, 0x35, 0x9A, 0x65};//RsTb
 80026a0:	4ba6      	ldr	r3, [pc, #664]	; (800293c <spinonce+0x2b8>)
 80026a2:	603b      	str	r3, [r7, #0]


	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 80026a4:	2100      	movs	r1, #0
 80026a6:	2000      	movs	r0, #0
 80026a8:	f000 fc8a 	bl	8002fc0 <CanInit>


   // HAL_Delay(10000);
    HAL_Delay(1000);
 80026ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80026b0:	f002 fc3a 	bl	8004f28 <HAL_Delay>
    startTTS();
 80026b4:	f7ff fafa 	bl	8001cac <startTTS>
    //state->set(IDLE);
    ready_flag = 1;
 80026b8:	4ba1      	ldr	r3, [pc, #644]	; (8002940 <spinonce+0x2bc>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
    start_docking_flag = 0;
 80026be:	4ba1      	ldr	r3, [pc, #644]	; (8002944 <spinonce+0x2c0>)
 80026c0:	2200      	movs	r2, #0
 80026c2:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 80026c4:	4ba0      	ldr	r3, [pc, #640]	; (8002948 <spinonce+0x2c4>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]

    Format format = NEC;
 80026ca:	2301      	movs	r3, #1
 80026cc:	76fb      	strb	r3, [r7, #27]
    int start_docking_count_tmp = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	617b      	str	r3, [r7, #20]

    settingMotor();
 80026d2:	f002 f855 	bl	8004780 <settingMotor>
    startMotor();
 80026d6:	f001 fd79 	bl	80041cc <startMotor>

    TransmitterIR_init();
 80026da:	f000 f97d 	bl	80029d8 <TransmitterIR_init>
    ReceiverIR_init();
 80026de:	f7fe fc07 	bl	8000ef0 <ReceiverIR_init>
//    HAL_UART_Receive_IT(&huart8, rx_data, 2);
    //sendIRdata(robot_standby);
//    initState();


    	stateReady();
 80026e2:	f7ff ff77 	bl	80025d4 <stateReady>

	while(1)
	{

		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80026e6:	4b99      	ldr	r3, [pc, #612]	; (800294c <spinonce+0x2c8>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	1d5a      	adds	r2, r3, #5
 80026ec:	4b98      	ldr	r3, [pc, #608]	; (8002950 <spinonce+0x2cc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d208      	bcs.n	8002706 <spinonce+0x82>
    		toggle_seq = Tick_100ms;
 80026f4:	4b96      	ldr	r3, [pc, #600]	; (8002950 <spinonce+0x2cc>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a94      	ldr	r2, [pc, #592]	; (800294c <spinonce+0x2c8>)
 80026fa:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 80026fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002700:	4894      	ldr	r0, [pc, #592]	; (8002954 <spinonce+0x2d0>)
 8002702:	f003 fe80 	bl	8006406 <HAL_GPIO_TogglePin>
//    			smleetmp = 0;
//    		}

    	}

    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 8002706:	4b94      	ldr	r3, [pc, #592]	; (8002958 <spinonce+0x2d4>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	1d1a      	adds	r2, r3, #4
 800270c:	4b93      	ldr	r3, [pc, #588]	; (800295c <spinonce+0x2d8>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	429a      	cmp	r2, r3
 8002712:	d209      	bcs.n	8002728 <spinonce+0xa4>
    		controlmotor_seq = gTick;
 8002714:	4b91      	ldr	r3, [pc, #580]	; (800295c <spinonce+0x2d8>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a8f      	ldr	r2, [pc, #572]	; (8002958 <spinonce+0x2d4>)
 800271a:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 800271c:	f7ff fc0c 	bl	8001f38 <controlMotor>
            sendEnc(CANID3);
 8002720:	f240 70d1 	movw	r0, #2001	; 0x7d1
 8002724:	f7ff fd24 	bl	8002170 <sendEnc>
    	}
    	if(gTick>reqmotor_seq+3) {		//REQ MOTOR
 8002728:	4b8d      	ldr	r3, [pc, #564]	; (8002960 <spinonce+0x2dc>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	1cda      	adds	r2, r3, #3
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <spinonce+0x2d8>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	429a      	cmp	r2, r3
 8002734:	d20e      	bcs.n	8002754 <spinonce+0xd0>
    		reqmotor_seq = gTick;
 8002736:	4b89      	ldr	r3, [pc, #548]	; (800295c <spinonce+0x2d8>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a89      	ldr	r2, [pc, #548]	; (8002960 <spinonce+0x2dc>)
 800273c:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 800273e:	4b88      	ldr	r3, [pc, #544]	; (8002960 <spinonce+0x2dc>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	2b00      	cmp	r3, #0
 8002748:	d102      	bne.n	8002750 <spinonce+0xcc>
 800274a:	f001 fe4f 	bl	80043ec <reqEnc>
 800274e:	e001      	b.n	8002754 <spinonce+0xd0>
    		else{reqState();}
 8002750:	f001 fe99 	bl	8004486 <reqState>
    	}



		if((Tick_100ms>sendsensor_seq)){
 8002754:	4b7e      	ldr	r3, [pc, #504]	; (8002950 <spinonce+0x2cc>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b82      	ldr	r3, [pc, #520]	; (8002964 <spinonce+0x2e0>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d962      	bls.n	8002826 <spinonce+0x1a2>
			sendsensor_seq = Tick_100ms;
 8002760:	4b7b      	ldr	r3, [pc, #492]	; (8002950 <spinonce+0x2cc>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a7f      	ldr	r2, [pc, #508]	; (8002964 <spinonce+0x2e0>)
 8002766:	6013      	str	r3, [r2, #0]


			//printf("hihi: %d\n", USS_tick);

			/////////must need USS of fine Tuning/////////
			USS_start = us_Tick;
 8002768:	4b7f      	ldr	r3, [pc, #508]	; (8002968 <spinonce+0x2e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7f      	ldr	r2, [pc, #508]	; (800296c <spinonce+0x2e8>)
 800276e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, SET);
 8002770:	2201      	movs	r2, #1
 8002772:	2120      	movs	r1, #32
 8002774:	487e      	ldr	r0, [pc, #504]	; (8002970 <spinonce+0x2ec>)
 8002776:	f003 fe2d 	bl	80063d4 <HAL_GPIO_WritePin>
			pre_usTick = us_Tick;
 800277a:	4b7b      	ldr	r3, [pc, #492]	; (8002968 <spinonce+0x2e4>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a7d      	ldr	r2, [pc, #500]	; (8002974 <spinonce+0x2f0>)
 8002780:	6013      	str	r3, [r2, #0]
			while(us_Tick == pre_usTick){;}//wait 500us
 8002782:	bf00      	nop
 8002784:	4b78      	ldr	r3, [pc, #480]	; (8002968 <spinonce+0x2e4>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	4b7a      	ldr	r3, [pc, #488]	; (8002974 <spinonce+0x2f0>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d0f9      	beq.n	8002784 <spinonce+0x100>
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);
 8002790:	2200      	movs	r2, #0
 8002792:	2120      	movs	r1, #32
 8002794:	4876      	ldr	r0, [pc, #472]	; (8002970 <spinonce+0x2ec>)
 8002796:	f003 fe1d 	bl	80063d4 <HAL_GPIO_WritePin>


			//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start, USS_end, (USS_end-USS_start));
			//////////////////////////////////////////////

			buf[index++] = 0;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	627a      	str	r2, [r7, #36]	; 0x24
 80027a0:	3328      	adds	r3, #40	; 0x28
 80027a2:	443b      	add	r3, r7
 80027a4:	2200      	movs	r2, #0
 80027a6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	1c5a      	adds	r2, r3, #1
 80027ae:	627a      	str	r2, [r7, #36]	; 0x24
 80027b0:	3328      	adds	r3, #40	; 0x28
 80027b2:	443b      	add	r3, r7
 80027b4:	2200      	movs	r2, #0
 80027b6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027bc:	1c5a      	adds	r2, r3, #1
 80027be:	627a      	str	r2, [r7, #36]	; 0x24
 80027c0:	3328      	adds	r3, #40	; 0x28
 80027c2:	443b      	add	r3, r7
 80027c4:	2200      	movs	r2, #0
 80027c6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	1c5a      	adds	r2, r3, #1
 80027ce:	627a      	str	r2, [r7, #36]	; 0x24
 80027d0:	3328      	adds	r3, #40	; 0x28
 80027d2:	443b      	add	r3, r7
 80027d4:	2200      	movs	r2, #0
 80027d6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027dc:	1c5a      	adds	r2, r3, #1
 80027de:	627a      	str	r2, [r7, #36]	; 0x24
 80027e0:	3328      	adds	r3, #40	; 0x28
 80027e2:	443b      	add	r3, r7
 80027e4:	2200      	movs	r2, #0
 80027e6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	627a      	str	r2, [r7, #36]	; 0x24
 80027f0:	3328      	adds	r3, #40	; 0x28
 80027f2:	443b      	add	r3, r7
 80027f4:	2200      	movs	r2, #0
 80027f6:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index++] = 0;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	627a      	str	r2, [r7, #36]	; 0x24
 8002800:	3328      	adds	r3, #40	; 0x28
 8002802:	443b      	add	r3, r7
 8002804:	2200      	movs	r2, #0
 8002806:	f803 2c24 	strb.w	r2, [r3, #-36]
			buf[index] = 0;
 800280a:	1d3a      	adds	r2, r7, #4
 800280c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280e:	4413      	add	r3, r2
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 8002814:	1d39      	adds	r1, r7, #4
 8002816:	2301      	movs	r3, #1
 8002818:	2208      	movs	r2, #8
 800281a:	f240 70d2 	movw	r0, #2002	; 0x7d2
 800281e:	f000 fc1b 	bl	8003058 <sendCan>
			index = 0;
 8002822:	2300      	movs	r3, #0
 8002824:	627b      	str	r3, [r7, #36]	; 0x24


		}
		if(FLAG_RxCplt){
 8002826:	4b54      	ldr	r3, [pc, #336]	; (8002978 <spinonce+0x2f4>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f43f af5b 	beq.w	80026e6 <spinonce+0x62>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8002830:	2300      	movs	r3, #0
 8002832:	61fb      	str	r3, [r7, #28]
 8002834:	e00c      	b.n	8002850 <spinonce+0x1cc>
 8002836:	4a51      	ldr	r2, [pc, #324]	; (800297c <spinonce+0x2f8>)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	4413      	add	r3, r2
 800283c:	7819      	ldrb	r1, [r3, #0]
 800283e:	f107 020c 	add.w	r2, r7, #12
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	4413      	add	r3, r2
 8002846:	460a      	mov	r2, r1
 8002848:	701a      	strb	r2, [r3, #0]
 800284a:	69fb      	ldr	r3, [r7, #28]
 800284c:	3301      	adds	r3, #1
 800284e:	61fb      	str	r3, [r7, #28]
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	2b07      	cmp	r3, #7
 8002854:	ddef      	ble.n	8002836 <spinonce+0x1b2>
    		FLAG_RxCplt=0;
 8002856:	4b48      	ldr	r3, [pc, #288]	; (8002978 <spinonce+0x2f4>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <spinonce+0x2fc>)
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	4b47      	ldr	r3, [pc, #284]	; (8002980 <spinonce+0x2fc>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d903      	bls.n	8002870 <spinonce+0x1ec>
 8002868:	4b45      	ldr	r3, [pc, #276]	; (8002980 <spinonce+0x2fc>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	e002      	b.n	8002876 <spinonce+0x1f2>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8002870:	4b43      	ldr	r3, [pc, #268]	; (8002980 <spinonce+0x2fc>)
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	623b      	str	r3, [r7, #32]

			if(ready_flag)
 8002876:	4b32      	ldr	r3, [pc, #200]	; (8002940 <spinonce+0x2bc>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	2b00      	cmp	r3, #0
 800287c:	f000 809e 	beq.w	80029bc <spinonce+0x338>
			{
				switch(CanId)
 8002880:	6a3b      	ldr	r3, [r7, #32]
 8002882:	4a40      	ldr	r2, [pc, #256]	; (8002984 <spinonce+0x300>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d051      	beq.n	800292c <spinonce+0x2a8>
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	4a3e      	ldr	r2, [pc, #248]	; (8002984 <spinonce+0x300>)
 800288c:	4293      	cmp	r3, r2
 800288e:	f200 8098 	bhi.w	80029c2 <spinonce+0x33e>
 8002892:	6a3b      	ldr	r3, [r7, #32]
 8002894:	f640 72a1 	movw	r2, #4001	; 0xfa1
 8002898:	4293      	cmp	r3, r2
 800289a:	d041      	beq.n	8002920 <spinonce+0x29c>
 800289c:	6a3b      	ldr	r3, [r7, #32]
 800289e:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80028a2:	4293      	cmp	r3, r2
 80028a4:	f200 808d 	bhi.w	80029c2 <spinonce+0x33e>
 80028a8:	6a3b      	ldr	r3, [r7, #32]
 80028aa:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d030      	beq.n	8002914 <spinonce+0x290>
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80028b8:	4293      	cmp	r3, r2
 80028ba:	f200 8082 	bhi.w	80029c2 <spinonce+0x33e>
 80028be:	6a3b      	ldr	r3, [r7, #32]
 80028c0:	f240 7201 	movw	r2, #1793	; 0x701
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d076      	beq.n	80029b6 <spinonce+0x332>
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	f240 7201 	movw	r2, #1793	; 0x701
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d877      	bhi.n	80029c2 <spinonce+0x33e>
 80028d2:	6a3b      	ldr	r3, [r7, #32]
 80028d4:	f240 5281 	movw	r2, #1409	; 0x581
 80028d8:	4293      	cmp	r3, r2
 80028da:	d055      	beq.n	8002988 <spinonce+0x304>
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f240 5281 	movw	r2, #1409	; 0x581
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d86d      	bhi.n	80029c2 <spinonce+0x33e>
 80028e6:	6a3b      	ldr	r3, [r7, #32]
 80028e8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d005      	beq.n	80028fc <spinonce+0x278>
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d006      	beq.n	8002908 <spinonce+0x284>
 80028fa:	e062      	b.n	80029c2 <spinonce+0x33e>
				{
				case CANID1:
					parseCmdvel(canbuf);
 80028fc:	f107 030c 	add.w	r3, r7, #12
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fbe7 	bl	80020d4 <parseCmdvel>
					break;
 8002906:	e05c      	b.n	80029c2 <spinonce+0x33e>

				case CANID2:
					parseState(canbuf);
 8002908:	f107 030c 	add.w	r3, r7, #12
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff facb 	bl	8001ea8 <parseState>
					break;
 8002912:	e056      	b.n	80029c2 <spinonce+0x33e>

				case CANID5:
					parseTop(canbuf);
 8002914:	f107 030c 	add.w	r3, r7, #12
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff fa99 	bl	8001e50 <parseTop>
					break;
 800291e:	e050      	b.n	80029c2 <spinonce+0x33e>

				case CANID6:
					parsePmm(canbuf);
 8002920:	f107 030c 	add.w	r3, r7, #12
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff fa61 	bl	8001dec <parsePmm>
					break;
 800292a:	e04a      	b.n	80029c2 <spinonce+0x33e>

				case CANID7:
					parseEnc(canbuf);
 800292c:	f107 030c 	add.w	r3, r7, #12
 8002930:	4618      	mov	r0, r3
 8002932:	f7ff fd47 	bl	80023c4 <parseEnc>
					break;
 8002936:	e044      	b.n	80029c2 <spinonce+0x33e>
 8002938:	0800ac4c 	.word	0x0800ac4c
 800293c:	659a35ca 	.word	0x659a35ca
 8002940:	20000158 	.word	0x20000158
 8002944:	20000159 	.word	0x20000159
 8002948:	2000015c 	.word	0x2000015c
 800294c:	2000010c 	.word	0x2000010c
 8002950:	20000108 	.word	0x20000108
 8002954:	40020400 	.word	0x40020400
 8002958:	20000120 	.word	0x20000120
 800295c:	20000100 	.word	0x20000100
 8002960:	20000124 	.word	0x20000124
 8002964:	2000011c 	.word	0x2000011c
 8002968:	200000fc 	.word	0x200000fc
 800296c:	20000130 	.word	0x20000130
 8002970:	40020c00 	.word	0x40020c00
 8002974:	20000104 	.word	0x20000104
 8002978:	200001cc 	.word	0x200001cc
 800297c:	200001d0 	.word	0x200001d0
 8002980:	200001d8 	.word	0x200001d8
 8002984:	00b8b701 	.word	0x00b8b701

				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 8002988:	7b7b      	ldrb	r3, [r7, #13]
 800298a:	2b6c      	cmp	r3, #108	; 0x6c
 800298c:	d107      	bne.n	800299e <spinonce+0x31a>
 800298e:	7bbb      	ldrb	r3, [r7, #14]
 8002990:	2b60      	cmp	r3, #96	; 0x60
 8002992:	d104      	bne.n	800299e <spinonce+0x31a>
						parseEnc114(canbuf);
 8002994:	f107 030c 	add.w	r3, r7, #12
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fd93 	bl	80024c4 <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 800299e:	7b7b      	ldrb	r3, [r7, #13]
 80029a0:	2b3f      	cmp	r3, #63	; 0x3f
 80029a2:	d10d      	bne.n	80029c0 <spinonce+0x33c>
 80029a4:	7bbb      	ldrb	r3, [r7, #14]
 80029a6:	2b60      	cmp	r3, #96	; 0x60
 80029a8:	d10a      	bne.n	80029c0 <spinonce+0x33c>
						parseState114(canbuf);
 80029aa:	f107 030c 	add.w	r3, r7, #12
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff fdda 	bl	8002568 <parseState114>
					break;
 80029b4:	e004      	b.n	80029c0 <spinonce+0x33c>

				case MOTOR114_START_ID:
					startMotor();
 80029b6:	f001 fc09 	bl	80041cc <startMotor>
					break;
 80029ba:	e002      	b.n	80029c2 <spinonce+0x33e>
				}
			}
 80029bc:	bf00      	nop
 80029be:	e000      	b.n	80029c2 <spinonce+0x33e>
					break;
 80029c0:	bf00      	nop
//					  state->set(IDLE);
//					  ready_flag = 1;
//					  start_docking_flag = 0;
//				  }
//			  }
			g_tCan_Rx_Header.StdId=0;
 80029c2:	4b04      	ldr	r3, [pc, #16]	; (80029d4 <spinonce+0x350>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 80029c8:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <spinonce+0x350>)
 80029ca:	2200      	movs	r2, #0
 80029cc:	605a      	str	r2, [r3, #4]
			CanId = 0;
 80029ce:	2300      	movs	r3, #0
 80029d0:	623b      	str	r3, [r7, #32]
		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80029d2:	e688      	b.n	80026e6 <spinonce+0x62>
 80029d4:	200001d8 	.word	0x200001d8

080029d8 <TransmitterIR_init>:
 *
 * @return Current state.
 */

void TransmitterIR_init()
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0




	IRDUTY0;
 80029dc:	4b0e      	ldr	r3, [pc, #56]	; (8002a18 <TransmitterIR_init+0x40>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2200      	movs	r2, #0
 80029e2:	635a      	str	r2, [r3, #52]	; 0x34
	//IRDUTY50;

	TIR_work.state = TIR_Idle;
 80029e4:	4b0d      	ldr	r3, [pc, #52]	; (8002a1c <TransmitterIR_init+0x44>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
	TIR_work.bitcount = 0;
 80029ea:	4b0c      	ldr	r3, [pc, #48]	; (8002a1c <TransmitterIR_init+0x44>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	605a      	str	r2, [r3, #4]
	TIR_work.leader = 0;
 80029f0:	4b0a      	ldr	r3, [pc, #40]	; (8002a1c <TransmitterIR_init+0x44>)
 80029f2:	2200      	movs	r2, #0
 80029f4:	609a      	str	r2, [r3, #8]
	TIR_work.data = 0;
 80029f6:	4b09      	ldr	r3, [pc, #36]	; (8002a1c <TransmitterIR_init+0x44>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	60da      	str	r2, [r3, #12]
	TIR_work.trailer = 0;
 80029fc:	4b07      	ldr	r3, [pc, #28]	; (8002a1c <TransmitterIR_init+0x44>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	611a      	str	r2, [r3, #16]

	TIR_data.format = UNKNOWN;
 8002a02:	4b07      	ldr	r3, [pc, #28]	; (8002a20 <TransmitterIR_init+0x48>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	701a      	strb	r2, [r3, #0]
	TIR_data.bitlength = 0;
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <TransmitterIR_init+0x48>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]




}
 8002a0e:	bf00      	nop
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	4770      	bx	lr
 8002a18:	20000264 	.word	0x20000264
 8002a1c:	200001b8 	.word	0x200001b8
 8002a20:	20000170 	.word	0x20000170

08002a24 <TIR_getState>:

TIR_State TIR_getState(void) {
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
    LOCK();
    TIR_State s = TIR_work.state;
 8002a2a:	4b05      	ldr	r3, [pc, #20]	; (8002a40 <TIR_getState+0x1c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	71fb      	strb	r3, [r7, #7]
    UNLOCK();
    return s;
 8002a30:	79fb      	ldrb	r3, [r7, #7]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200001b8 	.word	0x200001b8

08002a44 <setData>:
 * @param buf Buffer of a data.
 * @param bitlength Bit length of the data.
 *
 * @return Data bit length.
 */
int setData(Format format, uint8_t *buf, int bitlength) {
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	60b9      	str	r1, [r7, #8]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	73fb      	strb	r3, [r7, #15]
    LOCK();
    if (TIR_work.state != TIR_Idle) {
 8002a52:	4b2b      	ldr	r3, [pc, #172]	; (8002b00 <setData+0xbc>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d002      	beq.n	8002a60 <setData+0x1c>
        UNLOCK();
        return -1;
 8002a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a5e:	e04a      	b.n	8002af6 <setData+0xb2>
    }

    TIR_work.state = Leader;
 8002a60:	4b27      	ldr	r3, [pc, #156]	; (8002b00 <setData+0xbc>)
 8002a62:	2201      	movs	r2, #1
 8002a64:	701a      	strb	r2, [r3, #0]
    TIR_work.bitcount = 0;
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <setData+0xbc>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	605a      	str	r2, [r3, #4]
    TIR_work.leader = 0;
 8002a6c:	4b24      	ldr	r3, [pc, #144]	; (8002b00 <setData+0xbc>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
    TIR_work.data = 0;
 8002a72:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <setData+0xbc>)
 8002a74:	2200      	movs	r2, #0
 8002a76:	60da      	str	r2, [r3, #12]
    TIR_work.trailer = 0;
 8002a78:	4b21      	ldr	r3, [pc, #132]	; (8002b00 <setData+0xbc>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	611a      	str	r2, [r3, #16]

    TIR_data.format = format;
 8002a7e:	4a21      	ldr	r2, [pc, #132]	; (8002b04 <setData+0xc0>)
 8002a80:	7bfb      	ldrb	r3, [r7, #15]
 8002a82:	7013      	strb	r3, [r2, #0]
    TIR_data.bitlength = bitlength;
 8002a84:	4a1f      	ldr	r2, [pc, #124]	; (8002b04 <setData+0xc0>)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6053      	str	r3, [r2, #4]
    const int n = bitlength / 8 + (((bitlength % 8) != 0) ? 1 : 0);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	da00      	bge.n	8002a92 <setData+0x4e>
 8002a90:	3307      	adds	r3, #7
 8002a92:	10db      	asrs	r3, r3, #3
 8002a94:	461a      	mov	r2, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f003 0307 	and.w	r3, r3, #7
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	bf14      	ite	ne
 8002aa0:	2301      	movne	r3, #1
 8002aa2:	2300      	moveq	r3, #0
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < n; i++) {
 8002aaa:	2300      	movs	r3, #0
 8002aac:	617b      	str	r3, [r7, #20]
 8002aae:	e00c      	b.n	8002aca <setData+0x86>
        TIR_data.buffer[i] = buf[i];
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	68ba      	ldr	r2, [r7, #8]
 8002ab4:	4413      	add	r3, r2
 8002ab6:	7819      	ldrb	r1, [r3, #0]
 8002ab8:	4a12      	ldr	r2, [pc, #72]	; (8002b04 <setData+0xc0>)
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4413      	add	r3, r2
 8002abe:	3308      	adds	r3, #8
 8002ac0:	460a      	mov	r2, r1
 8002ac2:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < n; i++) {
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	617b      	str	r3, [r7, #20]
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dbee      	blt.n	8002ab0 <setData+0x6c>
    }

    switch (format) {
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b05      	cmp	r3, #5
 8002ad6:	d00c      	beq.n	8002af2 <setData+0xae>
 8002ad8:	2b05      	cmp	r3, #5
 8002ada:	dc0b      	bgt.n	8002af4 <setData+0xb0>
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d001      	beq.n	8002ae4 <setData+0xa0>
 8002ae0:	2b03      	cmp	r3, #3

            break;
        case AEHA:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_AEHA);
            break;
 8002ae2:	e007      	b.n	8002af4 <setData+0xb0>
        		HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 8002ae4:	4808      	ldr	r0, [pc, #32]	; (8002b08 <setData+0xc4>)
 8002ae6:	f004 fe23 	bl	8007730 <HAL_TIM_Base_Start_IT>
        		TIR_setData_flag = 1;
 8002aea:	4b08      	ldr	r3, [pc, #32]	; (8002b0c <setData+0xc8>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	701a      	strb	r2, [r3, #0]
            break;
 8002af0:	e000      	b.n	8002af4 <setData+0xb0>
        case SONY:
//            ticker.detach();
//            ticker.attach_us(callback(this, &tick), TUS_SONY);
            break;
 8002af2:	bf00      	nop
    }

    UNLOCK();
    return bitlength;
 8002af4:	687b      	ldr	r3, [r7, #4]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3718      	adds	r7, #24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	200001b8 	.word	0x200001b8
 8002b04:	20000170 	.word	0x20000170
 8002b08:	20000394 	.word	0x20000394
 8002b0c:	20000110 	.word	0x20000110

08002b10 <tick>:

void tick(void) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
    LOCK();
    switch (TIR_work.state) {
 8002b14:	4b80      	ldr	r3, [pc, #512]	; (8002d18 <tick+0x208>)
 8002b16:	781b      	ldrb	r3, [r3, #0]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	f200 8247 	bhi.w	8002fac <tick+0x49c>
 8002b1e:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <tick+0x14>)
 8002b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b4f 	.word	0x08002b4f
 8002b2c:	08002c35 	.word	0x08002c35
 8002b30:	08002e9b 	.word	0x08002e9b
        case TIR_Idle:
            TIR_work.bitcount = 0;
 8002b34:	4b78      	ldr	r3, [pc, #480]	; (8002d18 <tick+0x208>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	605a      	str	r2, [r3, #4]
            TIR_work.leader = 0;
 8002b3a:	4b77      	ldr	r3, [pc, #476]	; (8002d18 <tick+0x208>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	609a      	str	r2, [r3, #8]
            TIR_work.data = 0;
 8002b40:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <tick+0x208>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	60da      	str	r2, [r3, #12]
            TIR_work.trailer = 0;
 8002b46:	4b74      	ldr	r3, [pc, #464]	; (8002d18 <tick+0x208>)
 8002b48:	2200      	movs	r2, #0
 8002b4a:	611a      	str	r2, [r3, #16]
            break;
 8002b4c:	e235      	b.n	8002fba <tick+0x4aa>
        case Leader:
            if (TIR_data.format == NEC) {
 8002b4e:	4b73      	ldr	r3, [pc, #460]	; (8002d1c <tick+0x20c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d121      	bne.n	8002b9a <tick+0x8a>
                /*
                 * NEC.
                 */
                static const int LEADER_NEC_HEAD = 16;
                static const int LEADER_NEC_TAIL = 8;
                if (TIR_work.leader < LEADER_NEC_HEAD) {
 8002b56:	4b70      	ldr	r3, [pc, #448]	; (8002d18 <tick+0x208>)
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b71      	ldr	r3, [pc, #452]	; (8002d20 <tick+0x210>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	da04      	bge.n	8002b6c <tick+0x5c>
                    IRDUTY50;
 8002b62:	4b70      	ldr	r3, [pc, #448]	; (8002d24 <tick+0x214>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2234      	movs	r2, #52	; 0x34
 8002b68:	635a      	str	r2, [r3, #52]	; 0x34
 8002b6a:	e003      	b.n	8002b74 <tick+0x64>
                } else {
                    IRDUTY0;
 8002b6c:	4b6d      	ldr	r3, [pc, #436]	; (8002d24 <tick+0x214>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2200      	movs	r2, #0
 8002b72:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.leader++;
 8002b74:	4b68      	ldr	r3, [pc, #416]	; (8002d18 <tick+0x208>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	3301      	adds	r3, #1
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <tick+0x208>)
 8002b7c:	6093      	str	r3, [r2, #8]
                if ((LEADER_NEC_HEAD + LEADER_NEC_TAIL) <= TIR_work.leader) {
 8002b7e:	4b68      	ldr	r3, [pc, #416]	; (8002d20 <tick+0x210>)
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	4b69      	ldr	r3, [pc, #420]	; (8002d28 <tick+0x218>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	441a      	add	r2, r3
 8002b88:	4b63      	ldr	r3, [pc, #396]	; (8002d18 <tick+0x208>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	f300 820f 	bgt.w	8002fb0 <tick+0x4a0>
                    TIR_work.state = Data;
 8002b92:	4b61      	ldr	r3, [pc, #388]	; (8002d18 <tick+0x208>)
 8002b94:	2202      	movs	r2, #2
 8002b96:	701a      	strb	r2, [r3, #0]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
                    TIR_work.state = Data;
                }
            } else {
            }
            break;
 8002b98:	e20a      	b.n	8002fb0 <tick+0x4a0>
            } else if (TIR_data.format == AEHA) {
 8002b9a:	4b60      	ldr	r3, [pc, #384]	; (8002d1c <tick+0x20c>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b03      	cmp	r3, #3
 8002ba0:	d121      	bne.n	8002be6 <tick+0xd6>
                if (TIR_work.leader < LEADER_AEHA_HEAD) {
 8002ba2:	4b5d      	ldr	r3, [pc, #372]	; (8002d18 <tick+0x208>)
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	4b61      	ldr	r3, [pc, #388]	; (8002d2c <tick+0x21c>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	da04      	bge.n	8002bb8 <tick+0xa8>
                    IRDUTY50;
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <tick+0x214>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2234      	movs	r2, #52	; 0x34
 8002bb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bb6:	e003      	b.n	8002bc0 <tick+0xb0>
                    IRDUTY0;
 8002bb8:	4b5a      	ldr	r3, [pc, #360]	; (8002d24 <tick+0x214>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002bc0:	4b55      	ldr	r3, [pc, #340]	; (8002d18 <tick+0x208>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	4a54      	ldr	r2, [pc, #336]	; (8002d18 <tick+0x208>)
 8002bc8:	6093      	str	r3, [r2, #8]
                if ((LEADER_AEHA_HEAD + LEADER_AEHA_TAIL) <= TIR_work.leader) {
 8002bca:	4b58      	ldr	r3, [pc, #352]	; (8002d2c <tick+0x21c>)
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b58      	ldr	r3, [pc, #352]	; (8002d30 <tick+0x220>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	4b50      	ldr	r3, [pc, #320]	; (8002d18 <tick+0x208>)
 8002bd6:	689b      	ldr	r3, [r3, #8]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	f300 81e9 	bgt.w	8002fb0 <tick+0x4a0>
                    TIR_work.state = Data;
 8002bde:	4b4e      	ldr	r3, [pc, #312]	; (8002d18 <tick+0x208>)
 8002be0:	2202      	movs	r2, #2
 8002be2:	701a      	strb	r2, [r3, #0]
            break;
 8002be4:	e1e4      	b.n	8002fb0 <tick+0x4a0>
            } else if (TIR_data.format == SONY) {
 8002be6:	4b4d      	ldr	r3, [pc, #308]	; (8002d1c <tick+0x20c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b05      	cmp	r3, #5
 8002bec:	f040 81e0 	bne.w	8002fb0 <tick+0x4a0>
                if (TIR_work.leader < LEADER_SONY_HEAD) {
 8002bf0:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <tick+0x208>)
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b4f      	ldr	r3, [pc, #316]	; (8002d34 <tick+0x224>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	da04      	bge.n	8002c06 <tick+0xf6>
                    IRDUTY50;
 8002bfc:	4b49      	ldr	r3, [pc, #292]	; (8002d24 <tick+0x214>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2234      	movs	r2, #52	; 0x34
 8002c02:	635a      	str	r2, [r3, #52]	; 0x34
 8002c04:	e003      	b.n	8002c0e <tick+0xfe>
                    IRDUTY0;
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <tick+0x214>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.leader++;
 8002c0e:	4b42      	ldr	r3, [pc, #264]	; (8002d18 <tick+0x208>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	3301      	adds	r3, #1
 8002c14:	4a40      	ldr	r2, [pc, #256]	; (8002d18 <tick+0x208>)
 8002c16:	6093      	str	r3, [r2, #8]
                if ((LEADER_SONY_HEAD + LEADER_SONY_TAIL) <= TIR_work.leader) {
 8002c18:	4b46      	ldr	r3, [pc, #280]	; (8002d34 <tick+0x224>)
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	4b46      	ldr	r3, [pc, #280]	; (8002d38 <tick+0x228>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	441a      	add	r2, r3
 8002c22:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <tick+0x208>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	f300 81c2 	bgt.w	8002fb0 <tick+0x4a0>
                    TIR_work.state = Data;
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <tick+0x208>)
 8002c2e:	2202      	movs	r2, #2
 8002c30:	701a      	strb	r2, [r3, #0]
            break;
 8002c32:	e1bd      	b.n	8002fb0 <tick+0x4a0>
        case Data:
            if (TIR_data.format == NEC) {
 8002c34:	4b39      	ldr	r3, [pc, #228]	; (8002d1c <tick+0x20c>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	2b01      	cmp	r3, #1
 8002c3a:	d15b      	bne.n	8002cf4 <tick+0x1e4>
                /*
                 * NEC.
                 */
                if (TIR_work.data == 0) {
 8002c3c:	4b36      	ldr	r3, [pc, #216]	; (8002d18 <tick+0x208>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d109      	bne.n	8002c58 <tick+0x148>
                    IRDUTY50;
 8002c44:	4b37      	ldr	r3, [pc, #220]	; (8002d24 <tick+0x214>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2234      	movs	r2, #52	; 0x34
 8002c4a:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002c4c:	4b32      	ldr	r3, [pc, #200]	; (8002d18 <tick+0x208>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	3301      	adds	r3, #1
 8002c52:	4a31      	ldr	r2, [pc, #196]	; (8002d18 <tick+0x208>)
 8002c54:	60d3      	str	r3, [r2, #12]
 8002c56:	e042      	b.n	8002cde <tick+0x1ce>
                } else {
                    IRDUTY0;
 8002c58:	4b32      	ldr	r3, [pc, #200]	; (8002d24 <tick+0x214>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002c60:	4b2d      	ldr	r3, [pc, #180]	; (8002d18 <tick+0x208>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	da00      	bge.n	8002c6a <tick+0x15a>
 8002c68:	3307      	adds	r3, #7
 8002c6a:	10db      	asrs	r3, r3, #3
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4b2b      	ldr	r3, [pc, #172]	; (8002d1c <tick+0x20c>)
 8002c70:	4413      	add	r3, r2
 8002c72:	7a1b      	ldrb	r3, [r3, #8]
 8002c74:	4619      	mov	r1, r3
 8002c76:	4b28      	ldr	r3, [pc, #160]	; (8002d18 <tick+0x208>)
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	425a      	negs	r2, r3
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	f002 0207 	and.w	r2, r2, #7
 8002c84:	bf58      	it	pl
 8002c86:	4253      	negpl	r3, r2
 8002c88:	fa41 f303 	asr.w	r3, r1, r3
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <tick+0x1aa>
                        if (3 <= TIR_work.data) {
 8002c94:	4b20      	ldr	r3, [pc, #128]	; (8002d18 <tick+0x208>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	dd08      	ble.n	8002cae <tick+0x19e>
                            TIR_work.bitcount++;
 8002c9c:	4b1e      	ldr	r3, [pc, #120]	; (8002d18 <tick+0x208>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	4a1d      	ldr	r2, [pc, #116]	; (8002d18 <tick+0x208>)
 8002ca4:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002ca6:	4b1c      	ldr	r3, [pc, #112]	; (8002d18 <tick+0x208>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	60da      	str	r2, [r3, #12]
 8002cac:	e017      	b.n	8002cde <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <tick+0x208>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <tick+0x208>)
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e011      	b.n	8002cde <tick+0x1ce>
                        }
                    } else {
                        if (1 <= TIR_work.data) {
 8002cba:	4b17      	ldr	r3, [pc, #92]	; (8002d18 <tick+0x208>)
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	dd08      	ble.n	8002cd4 <tick+0x1c4>
                            TIR_work.bitcount++;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <tick+0x208>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	4a13      	ldr	r2, [pc, #76]	; (8002d18 <tick+0x208>)
 8002cca:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002ccc:	4b12      	ldr	r3, [pc, #72]	; (8002d18 <tick+0x208>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	e004      	b.n	8002cde <tick+0x1ce>
                        } else {
                            TIR_work.data++;
 8002cd4:	4b10      	ldr	r3, [pc, #64]	; (8002d18 <tick+0x208>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	3301      	adds	r3, #1
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <tick+0x208>)
 8002cdc:	60d3      	str	r3, [r2, #12]
                        }
                    }
                }
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <tick+0x20c>)
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <tick+0x208>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	f300 8164 	bgt.w	8002fb4 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <tick+0x208>)
 8002cee:	2203      	movs	r2, #3
 8002cf0:	701a      	strb	r2, [r3, #0]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
                    TIR_work.state = Trailer;
                }
            } else {
            }
            break;
 8002cf2:	e15f      	b.n	8002fb4 <tick+0x4a4>
            } else if (TIR_data.format == AEHA) {
 8002cf4:	4b09      	ldr	r3, [pc, #36]	; (8002d1c <tick+0x20c>)
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d16d      	bne.n	8002dd8 <tick+0x2c8>
                if (TIR_work.data == 0) {
 8002cfc:	4b06      	ldr	r3, [pc, #24]	; (8002d18 <tick+0x208>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11b      	bne.n	8002d3c <tick+0x22c>
                    IRDUTY50;
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <tick+0x214>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2234      	movs	r2, #52	; 0x34
 8002d0a:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002d0c:	4b02      	ldr	r3, [pc, #8]	; (8002d18 <tick+0x208>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	3301      	adds	r3, #1
 8002d12:	4a01      	ldr	r2, [pc, #4]	; (8002d18 <tick+0x208>)
 8002d14:	60d3      	str	r3, [r2, #12]
 8002d16:	e054      	b.n	8002dc2 <tick+0x2b2>
 8002d18:	200001b8 	.word	0x200001b8
 8002d1c:	20000170 	.word	0x20000170
 8002d20:	0800acb0 	.word	0x0800acb0
 8002d24:	20000264 	.word	0x20000264
 8002d28:	0800acb4 	.word	0x0800acb4
 8002d2c:	0800acb8 	.word	0x0800acb8
 8002d30:	0800acbc 	.word	0x0800acbc
 8002d34:	0800acc0 	.word	0x0800acc0
 8002d38:	0800acc4 	.word	0x0800acc4
                    IRDUTY0;
 8002d3c:	4b91      	ldr	r3, [pc, #580]	; (8002f84 <tick+0x474>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2200      	movs	r2, #0
 8002d42:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002d44:	4b90      	ldr	r3, [pc, #576]	; (8002f88 <tick+0x478>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	da00      	bge.n	8002d4e <tick+0x23e>
 8002d4c:	3307      	adds	r3, #7
 8002d4e:	10db      	asrs	r3, r3, #3
 8002d50:	461a      	mov	r2, r3
 8002d52:	4b8e      	ldr	r3, [pc, #568]	; (8002f8c <tick+0x47c>)
 8002d54:	4413      	add	r3, r2
 8002d56:	7a1b      	ldrb	r3, [r3, #8]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4b8b      	ldr	r3, [pc, #556]	; (8002f88 <tick+0x478>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	425a      	negs	r2, r3
 8002d60:	f003 0307 	and.w	r3, r3, #7
 8002d64:	f002 0207 	and.w	r2, r2, #7
 8002d68:	bf58      	it	pl
 8002d6a:	4253      	negpl	r3, r2
 8002d6c:	fa41 f303 	asr.w	r3, r1, r3
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d012      	beq.n	8002d9e <tick+0x28e>
                        if (3 <= TIR_work.data) {
 8002d78:	4b83      	ldr	r3, [pc, #524]	; (8002f88 <tick+0x478>)
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	dd08      	ble.n	8002d92 <tick+0x282>
                            TIR_work.bitcount++;
 8002d80:	4b81      	ldr	r3, [pc, #516]	; (8002f88 <tick+0x478>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	3301      	adds	r3, #1
 8002d86:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <tick+0x478>)
 8002d88:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002d8a:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <tick+0x478>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e017      	b.n	8002dc2 <tick+0x2b2>
                            TIR_work.data++;
 8002d92:	4b7d      	ldr	r3, [pc, #500]	; (8002f88 <tick+0x478>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	3301      	adds	r3, #1
 8002d98:	4a7b      	ldr	r2, [pc, #492]	; (8002f88 <tick+0x478>)
 8002d9a:	60d3      	str	r3, [r2, #12]
 8002d9c:	e011      	b.n	8002dc2 <tick+0x2b2>
                        if (1 <= TIR_work.data) {
 8002d9e:	4b7a      	ldr	r3, [pc, #488]	; (8002f88 <tick+0x478>)
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	dd08      	ble.n	8002db8 <tick+0x2a8>
                            TIR_work.bitcount++;
 8002da6:	4b78      	ldr	r3, [pc, #480]	; (8002f88 <tick+0x478>)
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	3301      	adds	r3, #1
 8002dac:	4a76      	ldr	r2, [pc, #472]	; (8002f88 <tick+0x478>)
 8002dae:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002db0:	4b75      	ldr	r3, [pc, #468]	; (8002f88 <tick+0x478>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	e004      	b.n	8002dc2 <tick+0x2b2>
                            TIR_work.data++;
 8002db8:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <tick+0x478>)
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	4a72      	ldr	r2, [pc, #456]	; (8002f88 <tick+0x478>)
 8002dc0:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002dc2:	4b72      	ldr	r3, [pc, #456]	; (8002f8c <tick+0x47c>)
 8002dc4:	685a      	ldr	r2, [r3, #4]
 8002dc6:	4b70      	ldr	r3, [pc, #448]	; (8002f88 <tick+0x478>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	f300 80f2 	bgt.w	8002fb4 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002dd0:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <tick+0x478>)
 8002dd2:	2203      	movs	r2, #3
 8002dd4:	701a      	strb	r2, [r3, #0]
            break;
 8002dd6:	e0ed      	b.n	8002fb4 <tick+0x4a4>
            } else if (TIR_data.format == SONY) {
 8002dd8:	4b6c      	ldr	r3, [pc, #432]	; (8002f8c <tick+0x47c>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b05      	cmp	r3, #5
 8002dde:	f040 80e9 	bne.w	8002fb4 <tick+0x4a4>
                if (TIR_work.data == 0) {
 8002de2:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <tick+0x478>)
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d109      	bne.n	8002dfe <tick+0x2ee>
                    IRDUTY0;
 8002dea:	4b66      	ldr	r3, [pc, #408]	; (8002f84 <tick+0x474>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2200      	movs	r2, #0
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
                    TIR_work.data++;
 8002df2:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <tick+0x478>)
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	3301      	adds	r3, #1
 8002df8:	4a63      	ldr	r2, [pc, #396]	; (8002f88 <tick+0x478>)
 8002dfa:	60d3      	str	r3, [r2, #12]
 8002dfc:	e042      	b.n	8002e84 <tick+0x374>
                    IRDUTY50;
 8002dfe:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <tick+0x474>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	2234      	movs	r2, #52	; 0x34
 8002e04:	635a      	str	r2, [r3, #52]	; 0x34
                    if (0 != (TIR_data.buffer[TIR_work.bitcount / 8] & (1 << TIR_work.bitcount % 8))) {
 8002e06:	4b60      	ldr	r3, [pc, #384]	; (8002f88 <tick+0x478>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	da00      	bge.n	8002e10 <tick+0x300>
 8002e0e:	3307      	adds	r3, #7
 8002e10:	10db      	asrs	r3, r3, #3
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b5d      	ldr	r3, [pc, #372]	; (8002f8c <tick+0x47c>)
 8002e16:	4413      	add	r3, r2
 8002e18:	7a1b      	ldrb	r3, [r3, #8]
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	4b5a      	ldr	r3, [pc, #360]	; (8002f88 <tick+0x478>)
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	425a      	negs	r2, r3
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	f002 0207 	and.w	r2, r2, #7
 8002e2a:	bf58      	it	pl
 8002e2c:	4253      	negpl	r3, r2
 8002e2e:	fa41 f303 	asr.w	r3, r1, r3
 8002e32:	f003 0301 	and.w	r3, r3, #1
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d012      	beq.n	8002e60 <tick+0x350>
                        if (2 <= TIR_work.data) {
 8002e3a:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <tick+0x478>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	dd08      	ble.n	8002e54 <tick+0x344>
                            TIR_work.bitcount++;
 8002e42:	4b51      	ldr	r3, [pc, #324]	; (8002f88 <tick+0x478>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	3301      	adds	r3, #1
 8002e48:	4a4f      	ldr	r2, [pc, #316]	; (8002f88 <tick+0x478>)
 8002e4a:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002e4c:	4b4e      	ldr	r3, [pc, #312]	; (8002f88 <tick+0x478>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	60da      	str	r2, [r3, #12]
 8002e52:	e017      	b.n	8002e84 <tick+0x374>
                            TIR_work.data++;
 8002e54:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <tick+0x478>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	4a4b      	ldr	r2, [pc, #300]	; (8002f88 <tick+0x478>)
 8002e5c:	60d3      	str	r3, [r2, #12]
 8002e5e:	e011      	b.n	8002e84 <tick+0x374>
                        if (1 <= TIR_work.data) {
 8002e60:	4b49      	ldr	r3, [pc, #292]	; (8002f88 <tick+0x478>)
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	dd08      	ble.n	8002e7a <tick+0x36a>
                            TIR_work.bitcount++;
 8002e68:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <tick+0x478>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	4a46      	ldr	r2, [pc, #280]	; (8002f88 <tick+0x478>)
 8002e70:	6053      	str	r3, [r2, #4]
                            TIR_work.data = 0;
 8002e72:	4b45      	ldr	r3, [pc, #276]	; (8002f88 <tick+0x478>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
 8002e78:	e004      	b.n	8002e84 <tick+0x374>
                            TIR_work.data++;
 8002e7a:	4b43      	ldr	r3, [pc, #268]	; (8002f88 <tick+0x478>)
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a41      	ldr	r2, [pc, #260]	; (8002f88 <tick+0x478>)
 8002e82:	60d3      	str	r3, [r2, #12]
                if (TIR_data.bitlength <= TIR_work.bitcount) {
 8002e84:	4b41      	ldr	r3, [pc, #260]	; (8002f8c <tick+0x47c>)
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <tick+0x478>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	f300 8091 	bgt.w	8002fb4 <tick+0x4a4>
                    TIR_work.state = Trailer;
 8002e92:	4b3d      	ldr	r3, [pc, #244]	; (8002f88 <tick+0x478>)
 8002e94:	2203      	movs	r2, #3
 8002e96:	701a      	strb	r2, [r3, #0]
            break;
 8002e98:	e08c      	b.n	8002fb4 <tick+0x4a4>
        case Trailer:
            if (TIR_data.format == NEC) {
 8002e9a:	4b3c      	ldr	r3, [pc, #240]	; (8002f8c <tick+0x47c>)
 8002e9c:	781b      	ldrb	r3, [r3, #0]
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d126      	bne.n	8002ef0 <tick+0x3e0>
                /*
                 * NEC.
                 */
                static const int TRAILER_NEC_HEAD = 1;
                static const int TRAILER_NEC_TAIL = 2;
                if (TIR_work.trailer < TRAILER_NEC_HEAD) {
 8002ea2:	4b39      	ldr	r3, [pc, #228]	; (8002f88 <tick+0x478>)
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	4b3a      	ldr	r3, [pc, #232]	; (8002f90 <tick+0x480>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	da04      	bge.n	8002eb8 <tick+0x3a8>
                    IRDUTY50;
 8002eae:	4b35      	ldr	r3, [pc, #212]	; (8002f84 <tick+0x474>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2234      	movs	r2, #52	; 0x34
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
 8002eb6:	e003      	b.n	8002ec0 <tick+0x3b0>
                } else {
                    IRDUTY0;
 8002eb8:	4b32      	ldr	r3, [pc, #200]	; (8002f84 <tick+0x474>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	635a      	str	r2, [r3, #52]	; 0x34
                }
                TIR_work.trailer++;
 8002ec0:	4b31      	ldr	r3, [pc, #196]	; (8002f88 <tick+0x478>)
 8002ec2:	691b      	ldr	r3, [r3, #16]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	4a30      	ldr	r2, [pc, #192]	; (8002f88 <tick+0x478>)
 8002ec8:	6113      	str	r3, [r2, #16]
                if ((TRAILER_NEC_HEAD + TRAILER_NEC_TAIL) <= TIR_work.trailer) {
 8002eca:	4b31      	ldr	r3, [pc, #196]	; (8002f90 <tick+0x480>)
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	4b31      	ldr	r3, [pc, #196]	; (8002f94 <tick+0x484>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	441a      	add	r2, r3
 8002ed4:	4b2c      	ldr	r3, [pc, #176]	; (8002f88 <tick+0x478>)
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	dc6d      	bgt.n	8002fb8 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002edc:	4b2a      	ldr	r3, [pc, #168]	; (8002f88 <tick+0x478>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	701a      	strb	r2, [r3, #0]
                    //ticker.detach();
                    HAL_TIM_Base_Stop_IT (&htim9);//uss timer, 1779hz
 8002ee2:	482d      	ldr	r0, [pc, #180]	; (8002f98 <tick+0x488>)
 8002ee4:	f004 fc9c 	bl	8007820 <HAL_TIM_Base_Stop_IT>
                    HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);//이걸로 수신시작할 것
 8002ee8:	2028      	movs	r0, #40	; 0x28
 8002eea:	f002 fff4 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
                    TIR_work.state = TIR_Idle;
                    //ticker.detach();
                }
            } else {
            }
            break;
 8002eee:	e063      	b.n	8002fb8 <tick+0x4a8>
            } else if (TIR_data.format == AEHA) {
 8002ef0:	4b26      	ldr	r3, [pc, #152]	; (8002f8c <tick+0x47c>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d120      	bne.n	8002f3a <tick+0x42a>
                if (TIR_work.trailer < TRAILER_AEHA_HEAD) {
 8002ef8:	4b23      	ldr	r3, [pc, #140]	; (8002f88 <tick+0x478>)
 8002efa:	691a      	ldr	r2, [r3, #16]
 8002efc:	4b27      	ldr	r3, [pc, #156]	; (8002f9c <tick+0x48c>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	da04      	bge.n	8002f0e <tick+0x3fe>
                    IRDUTY50;
 8002f04:	4b1f      	ldr	r3, [pc, #124]	; (8002f84 <tick+0x474>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2234      	movs	r2, #52	; 0x34
 8002f0a:	635a      	str	r2, [r3, #52]	; 0x34
 8002f0c:	e003      	b.n	8002f16 <tick+0x406>
                    IRDUTY0;
 8002f0e:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <tick+0x474>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2200      	movs	r2, #0
 8002f14:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002f16:	4b1c      	ldr	r3, [pc, #112]	; (8002f88 <tick+0x478>)
 8002f18:	691b      	ldr	r3, [r3, #16]
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	4a1a      	ldr	r2, [pc, #104]	; (8002f88 <tick+0x478>)
 8002f1e:	6113      	str	r3, [r2, #16]
                if ((TRAILER_AEHA_HEAD + TRAILER_AEHA_TAIL) <= TIR_work.trailer) {
 8002f20:	4b1e      	ldr	r3, [pc, #120]	; (8002f9c <tick+0x48c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	4b1e      	ldr	r3, [pc, #120]	; (8002fa0 <tick+0x490>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	441a      	add	r2, r3
 8002f2a:	4b17      	ldr	r3, [pc, #92]	; (8002f88 <tick+0x478>)
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	dc42      	bgt.n	8002fb8 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <tick+0x478>)
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]
            break;
 8002f38:	e03e      	b.n	8002fb8 <tick+0x4a8>
            } else if (TIR_data.format == SONY) {
 8002f3a:	4b14      	ldr	r3, [pc, #80]	; (8002f8c <tick+0x47c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	2b05      	cmp	r3, #5
 8002f40:	d13a      	bne.n	8002fb8 <tick+0x4a8>
                if (TIR_work.trailer < TRAILER_SONY_HEAD) {
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <tick+0x478>)
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	4b17      	ldr	r3, [pc, #92]	; (8002fa4 <tick+0x494>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	da04      	bge.n	8002f58 <tick+0x448>
                    IRDUTY50;
 8002f4e:	4b0d      	ldr	r3, [pc, #52]	; (8002f84 <tick+0x474>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	2234      	movs	r2, #52	; 0x34
 8002f54:	635a      	str	r2, [r3, #52]	; 0x34
 8002f56:	e003      	b.n	8002f60 <tick+0x450>
                    IRDUTY0;
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <tick+0x474>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	635a      	str	r2, [r3, #52]	; 0x34
                TIR_work.trailer++;
 8002f60:	4b09      	ldr	r3, [pc, #36]	; (8002f88 <tick+0x478>)
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	3301      	adds	r3, #1
 8002f66:	4a08      	ldr	r2, [pc, #32]	; (8002f88 <tick+0x478>)
 8002f68:	6113      	str	r3, [r2, #16]
                if ((TRAILER_SONY_HEAD + TRAILER_SONY_TAIL) <= TIR_work.trailer) {
 8002f6a:	4b0e      	ldr	r3, [pc, #56]	; (8002fa4 <tick+0x494>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <tick+0x498>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	441a      	add	r2, r3
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <tick+0x478>)
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	dc1d      	bgt.n	8002fb8 <tick+0x4a8>
                    TIR_work.state = TIR_Idle;
 8002f7c:	4b02      	ldr	r3, [pc, #8]	; (8002f88 <tick+0x478>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
            break;
 8002f82:	e019      	b.n	8002fb8 <tick+0x4a8>
 8002f84:	20000264 	.word	0x20000264
 8002f88:	200001b8 	.word	0x200001b8
 8002f8c:	20000170 	.word	0x20000170
 8002f90:	0800acc8 	.word	0x0800acc8
 8002f94:	0800accc 	.word	0x0800accc
 8002f98:	20000394 	.word	0x20000394
 8002f9c:	0800acd0 	.word	0x0800acd0
 8002fa0:	0800acd4 	.word	0x0800acd4
 8002fa4:	0800acd8 	.word	0x0800acd8
 8002fa8:	0800acdc 	.word	0x0800acdc
        default:
            break;
 8002fac:	bf00      	nop
 8002fae:	e004      	b.n	8002fba <tick+0x4aa>
            break;
 8002fb0:	bf00      	nop
 8002fb2:	e002      	b.n	8002fba <tick+0x4aa>
            break;
 8002fb4:	bf00      	nop
 8002fb6:	e000      	b.n	8002fba <tick+0x4aa>
            break;
 8002fb8:	bf00      	nop
    }
    UNLOCK();
}
 8002fba:	bf00      	nop
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop

08002fc0 <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b082      	sub	sp, #8
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 8002fca:	4b21      	ldr	r3, [pc, #132]	; (8003050 <CanInit+0x90>)
 8002fcc:	2200      	movs	r2, #0
 8002fce:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8002fd0:	4b1f      	ldr	r3, [pc, #124]	; (8003050 <CanInit+0x90>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8002fd6:	4b1e      	ldr	r3, [pc, #120]	; (8003050 <CanInit+0x90>)
 8002fd8:	2201      	movs	r2, #1
 8002fda:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	0c1b      	lsrs	r3, r3, #16
 8002fe0:	4a1b      	ldr	r2, [pc, #108]	; (8003050 <CanInit+0x90>)
 8002fe2:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002fea:	4013      	ands	r3, r2
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <CanInit+0x90>)
 8002fee:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	0c1b      	lsrs	r3, r3, #16
 8002ff4:	4a16      	ldr	r2, [pc, #88]	; (8003050 <CanInit+0x90>)
 8002ff6:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8002ff8:	683a      	ldr	r2, [r7, #0]
 8002ffa:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8002ffe:	4013      	ands	r3, r2
 8003000:	4a13      	ldr	r2, [pc, #76]	; (8003050 <CanInit+0x90>)
 8003002:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <CanInit+0x90>)
 8003006:	2200      	movs	r2, #0
 8003008:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 800300a:	4b11      	ldr	r3, [pc, #68]	; (8003050 <CanInit+0x90>)
 800300c:	2201      	movs	r2, #1
 800300e:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8003010:	4b0f      	ldr	r3, [pc, #60]	; (8003050 <CanInit+0x90>)
 8003012:	2200      	movs	r2, #0
 8003014:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8003016:	480f      	ldr	r0, [pc, #60]	; (8003054 <CanInit+0x94>)
 8003018:	f002 f986 	bl	8005328 <HAL_CAN_Start>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <CanInit+0x66>
 8003022:	f000 fd19 	bl	8003a58 <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8003026:	2102      	movs	r1, #2
 8003028:	480a      	ldr	r0, [pc, #40]	; (8003054 <CanInit+0x94>)
 800302a:	f002 fbe3 	bl	80057f4 <HAL_CAN_ActivateNotification>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d000      	beq.n	8003036 <CanInit+0x76>
 8003034:	e7fe      	b.n	8003034 <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8003036:	4906      	ldr	r1, [pc, #24]	; (8003050 <CanInit+0x90>)
 8003038:	4806      	ldr	r0, [pc, #24]	; (8003054 <CanInit+0x94>)
 800303a:	f002 f895 	bl	8005168 <HAL_CAN_ConfigFilter>
 800303e:	4603      	mov	r3, r0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d001      	beq.n	8003048 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8003044:	f000 fd08 	bl	8003a58 <Error_Handler>
    }
}
 8003048:	bf00      	nop
 800304a:	3708      	adds	r7, #8
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	200001f4 	.word	0x200001f4
 8003054:	2000023c 	.word	0x2000023c

08003058 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b08c      	sub	sp, #48	; 0x30
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	4611      	mov	r1, r2
 8003064:	461a      	mov	r2, r3
 8003066:	460b      	mov	r3, r1
 8003068:	71fb      	strb	r3, [r7, #7]
 800306a:	4613      	mov	r3, r2
 800306c:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8003076:	2300      	movs	r3, #0
 8003078:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 800307a:	79bb      	ldrb	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d001      	beq.n	8003084 <sendCan+0x2c>
 8003080:	2304      	movs	r3, #4
 8003082:	e000      	b.n	8003086 <sendCan+0x2e>
 8003084:	2300      	movs	r3, #0
 8003086:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8003088:	79fb      	ldrb	r3, [r7, #7]
 800308a:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8003092:	480d      	ldr	r0, [pc, #52]	; (80030c8 <sendCan+0x70>)
 8003094:	f002 fa67 	bl	8005566 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003098:	4603      	mov	r3, r0
 800309a:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d00d      	beq.n	80030be <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 80030a2:	f107 0310 	add.w	r3, r7, #16
 80030a6:	f107 0114 	add.w	r1, r7, #20
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	4806      	ldr	r0, [pc, #24]	; (80030c8 <sendCan+0x70>)
 80030ae:	f002 f97f 	bl	80053b0 <HAL_CAN_AddTxMessage>
 80030b2:	4603      	mov	r3, r0
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 80030b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d000      	beq.n	80030be <sendCan+0x66>
 80030bc:	e7fe      	b.n	80030bc <sendCan+0x64>
    }
}
 80030be:	bf00      	nop
 80030c0:	3730      	adds	r7, #48	; 0x30
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	2000023c 	.word	0x2000023c

080030cc <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 80030d4:	4b09      	ldr	r3, [pc, #36]	; (80030fc <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 80030d6:	4a0a      	ldr	r2, [pc, #40]	; (8003100 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 80030d8:	2100      	movs	r1, #0
 80030da:	480a      	ldr	r0, [pc, #40]	; (8003104 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 80030dc:	f002 fa78 	bl	80055d0 <HAL_CAN_GetRxMessage>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d000      	beq.n	80030e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 80030e6:	e7fe      	b.n	80030e6 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 80030e8:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	3301      	adds	r3, #1
 80030ee:	4a06      	ldr	r2, [pc, #24]	; (8003108 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 80030f0:	6013      	str	r3, [r2, #0]

}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	200001d0 	.word	0x200001d0
 8003100:	200001d8 	.word	0x200001d8
 8003104:	2000023c 	.word	0x2000023c
 8003108:	200001cc 	.word	0x200001cc

0800310c <sendIRdata>:
    uint8_t charger_on[4] = {0xCA, 0x35, 0x9E, 0x61};//
    uint8_t charger_off[4] = {0xCA, 0x35, 0x9F, 0x60};//
    uint8_t battery_full[4] = {0xCA, 0x35, 0xAA, 0x55};

void sendIRdata(uint8_t send_data[])
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
    if(TIR_getState() == Idle)
 8003114:	f7ff fc86 	bl	8002a24 <TIR_getState>
 8003118:	4603      	mov	r3, r0
 800311a:	2b00      	cmp	r3, #0
 800311c:	d104      	bne.n	8003128 <sendIRdata+0x1c>
    {
        //ir_rx->evt.disable_irq();
        setData(NEC, send_data, 32);
 800311e:	2220      	movs	r2, #32
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	2001      	movs	r0, #1
 8003124:	f7ff fc8e 	bl	8002a44 <setData>
        //ir_rx->evt.enable_irq();
    }
}
 8003128:	bf00      	nop
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <checkIRdata>:

int checkIRdata()
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
    int bitcount = 0;
 8003136:	2300      	movs	r3, #0
 8003138:	607b      	str	r3, [r7, #4]
    int check_count = 0;
 800313a:	2300      	movs	r3, #0
 800313c:	603b      	str	r3, [r7, #0]
    int start_docking_count = 0;
 800313e:	2300      	movs	r3, #0
 8003140:	617b      	str	r3, [r7, #20]
    int finish_docking_count = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	613b      	str	r3, [r7, #16]

    if(getState() == Received)
 8003146:	f7fd fed9 	bl	8000efc <getState>
 800314a:	4603      	mov	r3, r0
 800314c:	2b02      	cmp	r3, #2
 800314e:	d115      	bne.n	800317c <checkIRdata+0x4c>
    {
        for(int i = 0; i < 32; i++)
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	e007      	b.n	8003166 <checkIRdata+0x36>
        {
            recv_buf[i] = '0';
 8003156:	4a33      	ldr	r2, [pc, #204]	; (8003224 <checkIRdata+0xf4>)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	4413      	add	r3, r2
 800315c:	2230      	movs	r2, #48	; 0x30
 800315e:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < 32; i++)
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	3301      	adds	r3, #1
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2b1f      	cmp	r3, #31
 800316a:	ddf4      	ble.n	8003156 <checkIRdata+0x26>
        }
        bitcount = getData(NEC, recv_buf, sizeof(recv_buf)*8);
 800316c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003170:	492c      	ldr	r1, [pc, #176]	; (8003224 <checkIRdata+0xf4>)
 8003172:	2001      	movs	r0, #1
 8003174:	f7fd fed2 	bl	8000f1c <getData>
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	e009      	b.n	8003190 <checkIRdata+0x60>
    }
    else if(getState() != Received)
 800317c:	f7fd febe 	bl	8000efc <getState>
 8003180:	4603      	mov	r3, r0
 8003182:	2b02      	cmp	r3, #2
 8003184:	d004      	beq.n	8003190 <checkIRdata+0x60>
    {
    	printf("getState() != Received\n");
 8003186:	4828      	ldr	r0, [pc, #160]	; (8003228 <checkIRdata+0xf8>)
 8003188:	f006 fdd6 	bl	8009d38 <puts>
        return 0;
 800318c:	2300      	movs	r3, #0
 800318e:	e044      	b.n	800321a <checkIRdata+0xea>
    }

    for(int i = 0; i<4; i++)
 8003190:	2300      	movs	r3, #0
 8003192:	60bb      	str	r3, [r7, #8]
 8003194:	e030      	b.n	80031f8 <checkIRdata+0xc8>
    {
    	printf("\nhi11: ");
 8003196:	4825      	ldr	r0, [pc, #148]	; (800322c <checkIRdata+0xfc>)
 8003198:	f006 fd48 	bl	8009c2c <iprintf>
        if(recv_buf[i] == start_docking[i]) {start_docking_count++;}
 800319c:	4a21      	ldr	r2, [pc, #132]	; (8003224 <checkIRdata+0xf4>)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	4413      	add	r3, r2
 80031a2:	781a      	ldrb	r2, [r3, #0]
 80031a4:	4922      	ldr	r1, [pc, #136]	; (8003230 <checkIRdata+0x100>)
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	440b      	add	r3, r1
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d102      	bne.n	80031b6 <checkIRdata+0x86>
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	3301      	adds	r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
        if(recv_buf[i] == finish_docking[i]) {finish_docking_count++;}
 80031b6:	4a1b      	ldr	r2, [pc, #108]	; (8003224 <checkIRdata+0xf4>)
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	4413      	add	r3, r2
 80031bc:	781a      	ldrb	r2, [r3, #0]
 80031be:	491d      	ldr	r1, [pc, #116]	; (8003234 <checkIRdata+0x104>)
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	440b      	add	r3, r1
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d102      	bne.n	80031d0 <checkIRdata+0xa0>
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	3301      	adds	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
        printf("%x : %x\n", recv_buf[i], start_docking[i]);
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <checkIRdata+0xf4>)
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	4413      	add	r3, r2
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4619      	mov	r1, r3
 80031da:	4a15      	ldr	r2, [pc, #84]	; (8003230 <checkIRdata+0x100>)
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	4413      	add	r3, r2
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	461a      	mov	r2, r3
 80031e4:	4814      	ldr	r0, [pc, #80]	; (8003238 <checkIRdata+0x108>)
 80031e6:	f006 fd21 	bl	8009c2c <iprintf>
        printf("!!start_docking_count: %d\n", start_docking_count);
 80031ea:	6979      	ldr	r1, [r7, #20]
 80031ec:	4813      	ldr	r0, [pc, #76]	; (800323c <checkIRdata+0x10c>)
 80031ee:	f006 fd1d 	bl	8009c2c <iprintf>
    for(int i = 0; i<4; i++)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	3301      	adds	r3, #1
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	ddcb      	ble.n	8003196 <checkIRdata+0x66>
    }


    if(start_docking_count == 4)
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b04      	cmp	r3, #4
 8003202:	d101      	bne.n	8003208 <checkIRdata+0xd8>
    {
        return 1;
 8003204:	2301      	movs	r3, #1
 8003206:	e008      	b.n	800321a <checkIRdata+0xea>
    }
    else if(finish_docking_count == 4)
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b04      	cmp	r3, #4
 800320c:	d101      	bne.n	8003212 <checkIRdata+0xe2>
    {
        return 2;
 800320e:	2302      	movs	r3, #2
 8003210:	e003      	b.n	800321a <checkIRdata+0xea>
    }

    printf("hihihihi22222\n");
 8003212:	480b      	ldr	r0, [pc, #44]	; (8003240 <checkIRdata+0x110>)
 8003214:	f006 fd90 	bl	8009d38 <puts>
        return 0;
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
 8003222:	bf00      	nop
 8003224:	2000021c 	.word	0x2000021c
 8003228:	0800ac54 	.word	0x0800ac54
 800322c:	0800ac6c 	.word	0x0800ac6c
 8003230:	20000008 	.word	0x20000008
 8003234:	2000000c 	.word	0x2000000c
 8003238:	0800ac74 	.word	0x0800ac74
 800323c:	0800ac80 	.word	0x0800ac80
 8003240:	0800ac9c 	.word	0x0800ac9c

08003244 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/////for printf, must declare in main.c/////
int _write(int file, char *ptr, int len)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)ptr, (uint16_t)len, 100);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	b29a      	uxth	r2, r3
 8003254:	2364      	movs	r3, #100	; 0x64
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	4803      	ldr	r0, [pc, #12]	; (8003268 <_write+0x24>)
 800325a:	f005 fc97 	bl	8008b8c <HAL_UART_Transmit>
	return (len);
 800325e:	687b      	ldr	r3, [r7, #4]
}
 8003260:	4618      	mov	r0, r3
 8003262:	3710      	adds	r7, #16
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	200004b0 	.word	0x200004b0

0800326c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003270:	f001 fdfd 	bl	8004e6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003274:	f000 f83a 	bl	80032ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003278:	f000 fac6 	bl	8003808 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800327c:	f000 fa94 	bl	80037a8 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8003280:	f000 f8a0 	bl	80033c4 <MX_CAN1_Init>
  MX_TIM2_Init();
 8003284:	f000 f8d4 	bl	8003430 <MX_TIM2_Init>
  MX_UART8_Init();
 8003288:	f000 fa5e 	bl	8003748 <MX_UART8_Init>
  MX_TIM6_Init();
 800328c:	f000 f994 	bl	80035b8 <MX_TIM6_Init>
  MX_TIM7_Init();
 8003290:	f000 f9c8 	bl	8003624 <MX_TIM7_Init>
  MX_TIM5_Init();
 8003294:	f000 f942 	bl	800351c <MX_TIM5_Init>
  MX_TIM9_Init();
 8003298:	f000 f9fa 	bl	8003690 <MX_TIM9_Init>
  MX_TIM14_Init();
 800329c:	f000 fa32 	bl	8003704 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start_IT(&htim2, TIM_CHANNEL_1);//38khz ir transmit pwm
 80032a0:	2100      	movs	r1, #0
 80032a2:	480c      	ldr	r0, [pc, #48]	; (80032d4 <main+0x68>)
 80032a4:	f004 fb4c 	bl	8007940 <HAL_TIM_PWM_Start_IT>
  htim2.Instance->CCR1 = 52;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <main+0x68>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2234      	movs	r2, #52	; 0x34
 80032ae:	635a      	str	r2, [r3, #52]	; 0x34

  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//uss timer, 2khz
 80032b0:	4809      	ldr	r0, [pc, #36]	; (80032d8 <main+0x6c>)
 80032b2:	f004 fa3d 	bl	8007730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 80032b6:	4809      	ldr	r0, [pc, #36]	; (80032dc <main+0x70>)
 80032b8:	f004 fa3a 	bl	8007730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
 80032bc:	4808      	ldr	r0, [pc, #32]	; (80032e0 <main+0x74>)
 80032be:	f004 fa37 	bl	8007730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim9);//uss timer, 1779hz
 80032c2:	4808      	ldr	r0, [pc, #32]	; (80032e4 <main+0x78>)
 80032c4:	f004 fa34 	bl	8007730 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim14);//IR NEC timer, 1Mhz
 80032c8:	4807      	ldr	r0, [pc, #28]	; (80032e8 <main+0x7c>)
 80032ca:	f004 fa31 	bl	8007730 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 80032ce:	f7ff f9d9 	bl	8002684 <spinonce>
 80032d2:	e7fc      	b.n	80032ce <main+0x62>
 80032d4:	20000264 	.word	0x20000264
 80032d8:	200002b0 	.word	0x200002b0
 80032dc:	200002fc 	.word	0x200002fc
 80032e0:	20000348 	.word	0x20000348
 80032e4:	20000394 	.word	0x20000394
 80032e8:	200003e0 	.word	0x200003e0

080032ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b094      	sub	sp, #80	; 0x50
 80032f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032f2:	f107 0320 	add.w	r3, r7, #32
 80032f6:	2230      	movs	r2, #48	; 0x30
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f006 fc8e 	bl	8009c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003300:	f107 030c 	add.w	r3, r7, #12
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	605a      	str	r2, [r3, #4]
 800330a:	609a      	str	r2, [r3, #8]
 800330c:	60da      	str	r2, [r3, #12]
 800330e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003310:	4b2a      	ldr	r3, [pc, #168]	; (80033bc <SystemClock_Config+0xd0>)
 8003312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003314:	4a29      	ldr	r2, [pc, #164]	; (80033bc <SystemClock_Config+0xd0>)
 8003316:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800331a:	6413      	str	r3, [r2, #64]	; 0x40
 800331c:	4b27      	ldr	r3, [pc, #156]	; (80033bc <SystemClock_Config+0xd0>)
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003324:	60bb      	str	r3, [r7, #8]
 8003326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003328:	4b25      	ldr	r3, [pc, #148]	; (80033c0 <SystemClock_Config+0xd4>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a24      	ldr	r2, [pc, #144]	; (80033c0 <SystemClock_Config+0xd4>)
 800332e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003332:	6013      	str	r3, [r2, #0]
 8003334:	4b22      	ldr	r3, [pc, #136]	; (80033c0 <SystemClock_Config+0xd4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003340:	2301      	movs	r3, #1
 8003342:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003344:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800334a:	2302      	movs	r3, #2
 800334c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800334e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003354:	2304      	movs	r3, #4
 8003356:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8003358:	23d8      	movs	r3, #216	; 0xd8
 800335a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800335c:	2302      	movs	r3, #2
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003360:	2302      	movs	r3, #2
 8003362:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003364:	f107 0320 	add.w	r3, r7, #32
 8003368:	4618      	mov	r0, r3
 800336a:	f003 f8cf 	bl	800650c <HAL_RCC_OscConfig>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003374:	f000 fb70 	bl	8003a58 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003378:	f003 f878 	bl	800646c <HAL_PWREx_EnableOverDrive>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8003382:	f000 fb69 	bl	8003a58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003386:	230f      	movs	r3, #15
 8003388:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800338a:	2302      	movs	r3, #2
 800338c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003392:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003396:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800339c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800339e:	f107 030c 	add.w	r3, r7, #12
 80033a2:	2107      	movs	r1, #7
 80033a4:	4618      	mov	r0, r3
 80033a6:	f003 fb55 	bl	8006a54 <HAL_RCC_ClockConfig>
 80033aa:	4603      	mov	r3, r0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d001      	beq.n	80033b4 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80033b0:	f000 fb52 	bl	8003a58 <Error_Handler>
  }
}
 80033b4:	bf00      	nop
 80033b6:	3750      	adds	r7, #80	; 0x50
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	40023800 	.word	0x40023800
 80033c0:	40007000 	.word	0x40007000

080033c4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80033c8:	4b17      	ldr	r3, [pc, #92]	; (8003428 <MX_CAN1_Init+0x64>)
 80033ca:	4a18      	ldr	r2, [pc, #96]	; (800342c <MX_CAN1_Init+0x68>)
 80033cc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 80033ce:	4b16      	ldr	r3, [pc, #88]	; (8003428 <MX_CAN1_Init+0x64>)
 80033d0:	221b      	movs	r2, #27
 80033d2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80033d4:	4b14      	ldr	r3, [pc, #80]	; (8003428 <MX_CAN1_Init+0x64>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80033da:	4b13      	ldr	r3, [pc, #76]	; (8003428 <MX_CAN1_Init+0x64>)
 80033dc:	2200      	movs	r2, #0
 80033de:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80033e0:	4b11      	ldr	r3, [pc, #68]	; (8003428 <MX_CAN1_Init+0x64>)
 80033e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033e6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80033e8:	4b0f      	ldr	r3, [pc, #60]	; (8003428 <MX_CAN1_Init+0x64>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80033ee:	4b0e      	ldr	r3, [pc, #56]	; (8003428 <MX_CAN1_Init+0x64>)
 80033f0:	2200      	movs	r2, #0
 80033f2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 80033f4:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <MX_CAN1_Init+0x64>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80033fa:	4b0b      	ldr	r3, [pc, #44]	; (8003428 <MX_CAN1_Init+0x64>)
 80033fc:	2200      	movs	r2, #0
 80033fe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003400:	4b09      	ldr	r3, [pc, #36]	; (8003428 <MX_CAN1_Init+0x64>)
 8003402:	2200      	movs	r2, #0
 8003404:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003406:	4b08      	ldr	r3, [pc, #32]	; (8003428 <MX_CAN1_Init+0x64>)
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800340c:	4b06      	ldr	r3, [pc, #24]	; (8003428 <MX_CAN1_Init+0x64>)
 800340e:	2200      	movs	r2, #0
 8003410:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003412:	4805      	ldr	r0, [pc, #20]	; (8003428 <MX_CAN1_Init+0x64>)
 8003414:	f001 fdac 	bl	8004f70 <HAL_CAN_Init>
 8003418:	4603      	mov	r3, r0
 800341a:	2b00      	cmp	r3, #0
 800341c:	d001      	beq.n	8003422 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 800341e:	f000 fb1b 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003422:	bf00      	nop
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	2000023c 	.word	0x2000023c
 800342c:	40006400 	.word	0x40006400

08003430 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b08e      	sub	sp, #56	; 0x38
 8003434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003436:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800343a:	2200      	movs	r2, #0
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	609a      	str	r2, [r3, #8]
 8003442:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003444:	f107 031c 	add.w	r3, r7, #28
 8003448:	2200      	movs	r2, #0
 800344a:	601a      	str	r2, [r3, #0]
 800344c:	605a      	str	r2, [r3, #4]
 800344e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003450:	463b      	mov	r3, r7
 8003452:	2200      	movs	r2, #0
 8003454:	601a      	str	r2, [r3, #0]
 8003456:	605a      	str	r2, [r3, #4]
 8003458:	609a      	str	r2, [r3, #8]
 800345a:	60da      	str	r2, [r3, #12]
 800345c:	611a      	str	r2, [r3, #16]
 800345e:	615a      	str	r2, [r3, #20]
 8003460:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003462:	4b2d      	ldr	r3, [pc, #180]	; (8003518 <MX_TIM2_Init+0xe8>)
 8003464:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003468:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 27-1;
 800346a:	4b2b      	ldr	r3, [pc, #172]	; (8003518 <MX_TIM2_Init+0xe8>)
 800346c:	221a      	movs	r2, #26
 800346e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003470:	4b29      	ldr	r3, [pc, #164]	; (8003518 <MX_TIM2_Init+0xe8>)
 8003472:	2200      	movs	r2, #0
 8003474:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 105-1;
 8003476:	4b28      	ldr	r3, [pc, #160]	; (8003518 <MX_TIM2_Init+0xe8>)
 8003478:	2268      	movs	r2, #104	; 0x68
 800347a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800347c:	4b26      	ldr	r3, [pc, #152]	; (8003518 <MX_TIM2_Init+0xe8>)
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003482:	4b25      	ldr	r3, [pc, #148]	; (8003518 <MX_TIM2_Init+0xe8>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003488:	4823      	ldr	r0, [pc, #140]	; (8003518 <MX_TIM2_Init+0xe8>)
 800348a:	f004 f8f9 	bl	8007680 <HAL_TIM_Base_Init>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8003494:	f000 fae0 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003498:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800349c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800349e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034a2:	4619      	mov	r1, r3
 80034a4:	481c      	ldr	r0, [pc, #112]	; (8003518 <MX_TIM2_Init+0xe8>)
 80034a6:	f004 fdc7 	bl	8008038 <HAL_TIM_ConfigClockSource>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80034b0:	f000 fad2 	bl	8003a58 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034b4:	4818      	ldr	r0, [pc, #96]	; (8003518 <MX_TIM2_Init+0xe8>)
 80034b6:	f004 f9e2 	bl	800787e <HAL_TIM_PWM_Init>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80034c0:	f000 faca 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034c8:	2300      	movs	r3, #0
 80034ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034cc:	f107 031c 	add.w	r3, r7, #28
 80034d0:	4619      	mov	r1, r3
 80034d2:	4811      	ldr	r0, [pc, #68]	; (8003518 <MX_TIM2_Init+0xe8>)
 80034d4:	f005 fa60 	bl	8008998 <HAL_TIMEx_MasterConfigSynchronization>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80034de:	f000 fabb 	bl	8003a58 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80034e2:	2360      	movs	r3, #96	; 0x60
 80034e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 52-1;
 80034e6:	2333      	movs	r3, #51	; 0x33
 80034e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80034ea:	2300      	movs	r3, #0
 80034ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80034ee:	2300      	movs	r3, #0
 80034f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80034f2:	463b      	mov	r3, r7
 80034f4:	2200      	movs	r2, #0
 80034f6:	4619      	mov	r1, r3
 80034f8:	4807      	ldr	r0, [pc, #28]	; (8003518 <MX_TIM2_Init+0xe8>)
 80034fa:	f004 fc89 	bl	8007e10 <HAL_TIM_PWM_ConfigChannel>
 80034fe:	4603      	mov	r3, r0
 8003500:	2b00      	cmp	r3, #0
 8003502:	d001      	beq.n	8003508 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8003504:	f000 faa8 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003508:	4803      	ldr	r0, [pc, #12]	; (8003518 <MX_TIM2_Init+0xe8>)
 800350a:	f001 fa81 	bl	8004a10 <HAL_TIM_MspPostInit>

}
 800350e:	bf00      	nop
 8003510:	3738      	adds	r7, #56	; 0x38
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000264 	.word	0x20000264

0800351c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b088      	sub	sp, #32
 8003520:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	2200      	movs	r2, #0
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	605a      	str	r2, [r3, #4]
 800352c:	609a      	str	r2, [r3, #8]
 800352e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003530:	1d3b      	adds	r3, r7, #4
 8003532:	2200      	movs	r2, #0
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	605a      	str	r2, [r3, #4]
 8003538:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800353a:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <MX_TIM5_Init+0x94>)
 800353c:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <MX_TIM5_Init+0x98>)
 800353e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <MX_TIM5_Init+0x94>)
 8003542:	226b      	movs	r2, #107	; 0x6b
 8003544:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003546:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <MX_TIM5_Init+0x94>)
 8003548:	2200      	movs	r2, #0
 800354a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 800354c:	4b18      	ldr	r3, [pc, #96]	; (80035b0 <MX_TIM5_Init+0x94>)
 800354e:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003552:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003554:	4b16      	ldr	r3, [pc, #88]	; (80035b0 <MX_TIM5_Init+0x94>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800355a:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <MX_TIM5_Init+0x94>)
 800355c:	2200      	movs	r2, #0
 800355e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8003560:	4813      	ldr	r0, [pc, #76]	; (80035b0 <MX_TIM5_Init+0x94>)
 8003562:	f004 f88d 	bl	8007680 <HAL_TIM_Base_Init>
 8003566:	4603      	mov	r3, r0
 8003568:	2b00      	cmp	r3, #0
 800356a:	d001      	beq.n	8003570 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800356c:	f000 fa74 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003574:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003576:	f107 0310 	add.w	r3, r7, #16
 800357a:	4619      	mov	r1, r3
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <MX_TIM5_Init+0x94>)
 800357e:	f004 fd5b 	bl	8008038 <HAL_TIM_ConfigClockSource>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d001      	beq.n	800358c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003588:	f000 fa66 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800358c:	2300      	movs	r3, #0
 800358e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003594:	1d3b      	adds	r3, r7, #4
 8003596:	4619      	mov	r1, r3
 8003598:	4805      	ldr	r0, [pc, #20]	; (80035b0 <MX_TIM5_Init+0x94>)
 800359a:	f005 f9fd 	bl	8008998 <HAL_TIMEx_MasterConfigSynchronization>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d001      	beq.n	80035a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80035a4:	f000 fa58 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80035a8:	bf00      	nop
 80035aa:	3720      	adds	r7, #32
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	200002b0 	.word	0x200002b0
 80035b4:	40000c00 	.word	0x40000c00

080035b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80035be:	1d3b      	adds	r3, r7, #4
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80035c8:	4b14      	ldr	r3, [pc, #80]	; (800361c <MX_TIM6_Init+0x64>)
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <MX_TIM6_Init+0x68>)
 80035cc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 80035ce:	4b13      	ldr	r3, [pc, #76]	; (800361c <MX_TIM6_Init+0x64>)
 80035d0:	226b      	movs	r2, #107	; 0x6b
 80035d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035d4:	4b11      	ldr	r3, [pc, #68]	; (800361c <MX_TIM6_Init+0x64>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80035da:	4b10      	ldr	r3, [pc, #64]	; (800361c <MX_TIM6_Init+0x64>)
 80035dc:	f242 720f 	movw	r2, #9999	; 0x270f
 80035e0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80035e2:	4b0e      	ldr	r3, [pc, #56]	; (800361c <MX_TIM6_Init+0x64>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80035e8:	480c      	ldr	r0, [pc, #48]	; (800361c <MX_TIM6_Init+0x64>)
 80035ea:	f004 f849 	bl	8007680 <HAL_TIM_Base_Init>
 80035ee:	4603      	mov	r3, r0
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d001      	beq.n	80035f8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80035f4:	f000 fa30 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035f8:	2300      	movs	r3, #0
 80035fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003600:	1d3b      	adds	r3, r7, #4
 8003602:	4619      	mov	r1, r3
 8003604:	4805      	ldr	r0, [pc, #20]	; (800361c <MX_TIM6_Init+0x64>)
 8003606:	f005 f9c7 	bl	8008998 <HAL_TIMEx_MasterConfigSynchronization>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003610:	f000 fa22 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003614:	bf00      	nop
 8003616:	3710      	adds	r7, #16
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}
 800361c:	200002fc 	.word	0x200002fc
 8003620:	40001000 	.word	0x40001000

08003624 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800362a:	1d3b      	adds	r3, r7, #4
 800362c:	2200      	movs	r2, #0
 800362e:	601a      	str	r2, [r3, #0]
 8003630:	605a      	str	r2, [r3, #4]
 8003632:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003634:	4b14      	ldr	r3, [pc, #80]	; (8003688 <MX_TIM7_Init+0x64>)
 8003636:	4a15      	ldr	r2, [pc, #84]	; (800368c <MX_TIM7_Init+0x68>)
 8003638:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <MX_TIM7_Init+0x64>)
 800363c:	226b      	movs	r2, #107	; 0x6b
 800363e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <MX_TIM7_Init+0x64>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <MX_TIM7_Init+0x64>)
 8003648:	f240 32e7 	movw	r2, #999	; 0x3e7
 800364c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <MX_TIM7_Init+0x64>)
 8003650:	2200      	movs	r2, #0
 8003652:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003654:	480c      	ldr	r0, [pc, #48]	; (8003688 <MX_TIM7_Init+0x64>)
 8003656:	f004 f813 	bl	8007680 <HAL_TIM_Base_Init>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8003660:	f000 f9fa 	bl	8003a58 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800366c:	1d3b      	adds	r3, r7, #4
 800366e:	4619      	mov	r1, r3
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_TIM7_Init+0x64>)
 8003672:	f005 f991 	bl	8008998 <HAL_TIMEx_MasterConfigSynchronization>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800367c:	f000 f9ec 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	20000348 	.word	0x20000348
 800368c:	40001400 	.word	0x40001400

08003690 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003696:	463b      	mov	r3, r7
 8003698:	2200      	movs	r2, #0
 800369a:	601a      	str	r2, [r3, #0]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	609a      	str	r2, [r3, #8]
 80036a0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80036a2:	4b16      	ldr	r3, [pc, #88]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036a4:	4a16      	ldr	r2, [pc, #88]	; (8003700 <MX_TIM9_Init+0x70>)
 80036a6:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 216-1;
 80036a8:	4b14      	ldr	r3, [pc, #80]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036aa:	22d7      	movs	r2, #215	; 0xd7
 80036ac:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 562-1;
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036b6:	f240 2231 	movw	r2, #561	; 0x231
 80036ba:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80036bc:	4b0f      	ldr	r3, [pc, #60]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036be:	2200      	movs	r2, #0
 80036c0:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036c2:	4b0e      	ldr	r3, [pc, #56]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036c4:	2200      	movs	r2, #0
 80036c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80036c8:	480c      	ldr	r0, [pc, #48]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036ca:	f003 ffd9 	bl	8007680 <HAL_TIM_Base_Init>
 80036ce:	4603      	mov	r3, r0
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d001      	beq.n	80036d8 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80036d4:	f000 f9c0 	bl	8003a58 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036dc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80036de:	463b      	mov	r3, r7
 80036e0:	4619      	mov	r1, r3
 80036e2:	4806      	ldr	r0, [pc, #24]	; (80036fc <MX_TIM9_Init+0x6c>)
 80036e4:	f004 fca8 	bl	8008038 <HAL_TIM_ConfigClockSource>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d001      	beq.n	80036f2 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80036ee:	f000 f9b3 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80036f2:	bf00      	nop
 80036f4:	3710      	adds	r7, #16
 80036f6:	46bd      	mov	sp, r7
 80036f8:	bd80      	pop	{r7, pc}
 80036fa:	bf00      	nop
 80036fc:	20000394 	.word	0x20000394
 8003700:	40014000 	.word	0x40014000

08003704 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003708:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <MX_TIM14_Init+0x3c>)
 800370a:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <MX_TIM14_Init+0x40>)
 800370c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 108-1;
 800370e:	4b0c      	ldr	r3, [pc, #48]	; (8003740 <MX_TIM14_Init+0x3c>)
 8003710:	226b      	movs	r2, #107	; 0x6b
 8003712:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <MX_TIM14_Init+0x3c>)
 8003716:	2200      	movs	r2, #0
 8003718:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 4-1;
 800371a:	4b09      	ldr	r3, [pc, #36]	; (8003740 <MX_TIM14_Init+0x3c>)
 800371c:	2203      	movs	r2, #3
 800371e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003720:	4b07      	ldr	r3, [pc, #28]	; (8003740 <MX_TIM14_Init+0x3c>)
 8003722:	2200      	movs	r2, #0
 8003724:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <MX_TIM14_Init+0x3c>)
 8003728:	2200      	movs	r2, #0
 800372a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800372c:	4804      	ldr	r0, [pc, #16]	; (8003740 <MX_TIM14_Init+0x3c>)
 800372e:	f003 ffa7 	bl	8007680 <HAL_TIM_Base_Init>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003738:	f000 f98e 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800373c:	bf00      	nop
 800373e:	bd80      	pop	{r7, pc}
 8003740:	200003e0 	.word	0x200003e0
 8003744:	40002000 	.word	0x40002000

08003748 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800374c:	4b14      	ldr	r3, [pc, #80]	; (80037a0 <MX_UART8_Init+0x58>)
 800374e:	4a15      	ldr	r2, [pc, #84]	; (80037a4 <MX_UART8_Init+0x5c>)
 8003750:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 9600;
 8003752:	4b13      	ldr	r3, [pc, #76]	; (80037a0 <MX_UART8_Init+0x58>)
 8003754:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003758:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800375a:	4b11      	ldr	r3, [pc, #68]	; (80037a0 <MX_UART8_Init+0x58>)
 800375c:	2200      	movs	r2, #0
 800375e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003760:	4b0f      	ldr	r3, [pc, #60]	; (80037a0 <MX_UART8_Init+0x58>)
 8003762:	2200      	movs	r2, #0
 8003764:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003766:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <MX_UART8_Init+0x58>)
 8003768:	2200      	movs	r2, #0
 800376a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800376c:	4b0c      	ldr	r3, [pc, #48]	; (80037a0 <MX_UART8_Init+0x58>)
 800376e:	220c      	movs	r2, #12
 8003770:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003772:	4b0b      	ldr	r3, [pc, #44]	; (80037a0 <MX_UART8_Init+0x58>)
 8003774:	2200      	movs	r2, #0
 8003776:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003778:	4b09      	ldr	r3, [pc, #36]	; (80037a0 <MX_UART8_Init+0x58>)
 800377a:	2200      	movs	r2, #0
 800377c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800377e:	4b08      	ldr	r3, [pc, #32]	; (80037a0 <MX_UART8_Init+0x58>)
 8003780:	2200      	movs	r2, #0
 8003782:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003784:	4b06      	ldr	r3, [pc, #24]	; (80037a0 <MX_UART8_Init+0x58>)
 8003786:	2200      	movs	r2, #0
 8003788:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 800378a:	4805      	ldr	r0, [pc, #20]	; (80037a0 <MX_UART8_Init+0x58>)
 800378c:	f005 f9b0 	bl	8008af0 <HAL_UART_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8003796:	f000 f95f 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 800379a:	bf00      	nop
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	2000042c 	.word	0x2000042c
 80037a4:	40007c00 	.word	0x40007c00

080037a8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80037ac:	4b14      	ldr	r3, [pc, #80]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <MX_USART1_UART_Init+0x5c>)
 80037b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80037ba:	4b11      	ldr	r3, [pc, #68]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037bc:	2200      	movs	r2, #0
 80037be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80037c6:	4b0e      	ldr	r3, [pc, #56]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80037cc:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037ce:	220c      	movs	r2, #12
 80037d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037d2:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80037d8:	4b09      	ldr	r3, [pc, #36]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80037de:	4b08      	ldr	r3, [pc, #32]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80037e4:	4b06      	ldr	r3, [pc, #24]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037e6:	2200      	movs	r2, #0
 80037e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80037ea:	4805      	ldr	r0, [pc, #20]	; (8003800 <MX_USART1_UART_Init+0x58>)
 80037ec:	f005 f980 	bl	8008af0 <HAL_UART_Init>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80037f6:	f000 f92f 	bl	8003a58 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80037fa:	bf00      	nop
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	200004b0 	.word	0x200004b0
 8003804:	40011000 	.word	0x40011000

08003808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b08c      	sub	sp, #48	; 0x30
 800380c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380e:	f107 031c 	add.w	r3, r7, #28
 8003812:	2200      	movs	r2, #0
 8003814:	601a      	str	r2, [r3, #0]
 8003816:	605a      	str	r2, [r3, #4]
 8003818:	609a      	str	r2, [r3, #8]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800381e:	4b87      	ldr	r3, [pc, #540]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	4a86      	ldr	r2, [pc, #536]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003824:	f043 0320 	orr.w	r3, r3, #32
 8003828:	6313      	str	r3, [r2, #48]	; 0x30
 800382a:	4b84      	ldr	r3, [pc, #528]	; (8003a3c <MX_GPIO_Init+0x234>)
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	61bb      	str	r3, [r7, #24]
 8003834:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003836:	4b81      	ldr	r3, [pc, #516]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a80      	ldr	r2, [pc, #512]	; (8003a3c <MX_GPIO_Init+0x234>)
 800383c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b7e      	ldr	r3, [pc, #504]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384a:	617b      	str	r3, [r7, #20]
 800384c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800384e:	4b7b      	ldr	r3, [pc, #492]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	4a7a      	ldr	r2, [pc, #488]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003854:	f043 0301 	orr.w	r3, r3, #1
 8003858:	6313      	str	r3, [r2, #48]	; 0x30
 800385a:	4b78      	ldr	r3, [pc, #480]	; (8003a3c <MX_GPIO_Init+0x234>)
 800385c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003866:	4b75      	ldr	r3, [pc, #468]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386a:	4a74      	ldr	r2, [pc, #464]	; (8003a3c <MX_GPIO_Init+0x234>)
 800386c:	f043 0310 	orr.w	r3, r3, #16
 8003870:	6313      	str	r3, [r2, #48]	; 0x30
 8003872:	4b72      	ldr	r3, [pc, #456]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003876:	f003 0310 	and.w	r3, r3, #16
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800387e:	4b6f      	ldr	r3, [pc, #444]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003882:	4a6e      	ldr	r2, [pc, #440]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003884:	f043 0302 	orr.w	r3, r3, #2
 8003888:	6313      	str	r3, [r2, #48]	; 0x30
 800388a:	4b6c      	ldr	r3, [pc, #432]	; (8003a3c <MX_GPIO_Init+0x234>)
 800388c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388e:	f003 0302 	and.w	r3, r3, #2
 8003892:	60bb      	str	r3, [r7, #8]
 8003894:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003896:	4b69      	ldr	r3, [pc, #420]	; (8003a3c <MX_GPIO_Init+0x234>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a68      	ldr	r2, [pc, #416]	; (8003a3c <MX_GPIO_Init+0x234>)
 800389c:	f043 0308 	orr.w	r3, r3, #8
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b66      	ldr	r3, [pc, #408]	; (8003a3c <MX_GPIO_Init+0x234>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	607b      	str	r3, [r7, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ae:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <MX_GPIO_Init+0x234>)
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	4a62      	ldr	r2, [pc, #392]	; (8003a3c <MX_GPIO_Init+0x234>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ba:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <MX_GPIO_Init+0x234>)
 80038bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038be:	f003 0304 	and.w	r3, r3, #4
 80038c2:	603b      	str	r3, [r7, #0]
 80038c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80038c6:	2200      	movs	r2, #0
 80038c8:	2180      	movs	r1, #128	; 0x80
 80038ca:	485d      	ldr	r0, [pc, #372]	; (8003a40 <MX_GPIO_Init+0x238>)
 80038cc:	f002 fd82 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 80038d0:	2200      	movs	r2, #0
 80038d2:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80038d6:	485b      	ldr	r0, [pc, #364]	; (8003a44 <MX_GPIO_Init+0x23c>)
 80038d8:	f002 fd7c 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 80038dc:	2200      	movs	r2, #0
 80038de:	f44f 7190 	mov.w	r1, #288	; 0x120
 80038e2:	4859      	ldr	r0, [pc, #356]	; (8003a48 <MX_GPIO_Init+0x240>)
 80038e4:	f002 fd76 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80038e8:	2200      	movs	r2, #0
 80038ea:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 80038ee:	4857      	ldr	r0, [pc, #348]	; (8003a4c <MX_GPIO_Init+0x244>)
 80038f0:	f002 fd70 	bl	80063d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80038f4:	2380      	movs	r3, #128	; 0x80
 80038f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80038f8:	2301      	movs	r3, #1
 80038fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038fc:	2300      	movs	r3, #0
 80038fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003900:	2300      	movs	r3, #0
 8003902:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003904:	f107 031c 	add.w	r3, r7, #28
 8003908:	4619      	mov	r1, r3
 800390a:	484d      	ldr	r0, [pc, #308]	; (8003a40 <MX_GPIO_Init+0x238>)
 800390c:	f002 fb9e 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8003910:	231e      	movs	r3, #30
 8003912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003914:	2303      	movs	r3, #3
 8003916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800391c:	f107 031c 	add.w	r3, r7, #28
 8003920:	4619      	mov	r1, r3
 8003922:	484b      	ldr	r0, [pc, #300]	; (8003a50 <MX_GPIO_Init+0x248>)
 8003924:	f002 fb92 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : evt_rxpin_Pin */
  GPIO_InitStruct.Pin = evt_rxpin_Pin;
 8003928:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800392c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800392e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8003932:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003934:	2301      	movs	r3, #1
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(evt_rxpin_GPIO_Port, &GPIO_InitStruct);
 8003938:	f107 031c 	add.w	r3, r7, #28
 800393c:	4619      	mov	r1, r3
 800393e:	4845      	ldr	r0, [pc, #276]	; (8003a54 <MX_GPIO_Init+0x24c>)
 8003940:	f002 fb84 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 8003944:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8003948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800394a:	2301      	movs	r3, #1
 800394c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800394e:	2300      	movs	r3, #0
 8003950:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003952:	2300      	movs	r3, #0
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	4619      	mov	r1, r3
 800395c:	4839      	ldr	r0, [pc, #228]	; (8003a44 <MX_GPIO_Init+0x23c>)
 800395e:	f002 fb75 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8003962:	f44f 7390 	mov.w	r3, #288	; 0x120
 8003966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003968:	2301      	movs	r3, #1
 800396a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396c:	2300      	movs	r3, #0
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003970:	2300      	movs	r3, #0
 8003972:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003974:	f107 031c 	add.w	r3, r7, #28
 8003978:	4619      	mov	r1, r3
 800397a:	4833      	ldr	r0, [pc, #204]	; (8003a48 <MX_GPIO_Init+0x240>)
 800397c:	f002 fb66 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8003980:	f44f 7301 	mov.w	r3, #516	; 0x204
 8003984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003986:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800398a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800398c:	2300      	movs	r3, #0
 800398e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003990:	f107 031c 	add.w	r3, r7, #28
 8003994:	4619      	mov	r1, r3
 8003996:	482c      	ldr	r0, [pc, #176]	; (8003a48 <MX_GPIO_Init+0x240>)
 8003998:	f002 fb58 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 800399c:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80039a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a2:	2302      	movs	r3, #2
 80039a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039aa:	2300      	movs	r3, #0
 80039ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80039ae:	2302      	movs	r3, #2
 80039b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039b2:	f107 031c 	add.w	r3, r7, #28
 80039b6:	4619      	mov	r1, r3
 80039b8:	4823      	ldr	r0, [pc, #140]	; (8003a48 <MX_GPIO_Init+0x240>)
 80039ba:	f002 fb47 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 80039be:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 80039c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039c4:	2301      	movs	r3, #1
 80039c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039cc:	2300      	movs	r3, #0
 80039ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039d0:	f107 031c 	add.w	r3, r7, #28
 80039d4:	4619      	mov	r1, r3
 80039d6:	481d      	ldr	r0, [pc, #116]	; (8003a4c <MX_GPIO_Init+0x244>)
 80039d8:	f002 fb38 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80039dc:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80039e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80039e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	4619      	mov	r1, r3
 80039f2:	4816      	ldr	r0, [pc, #88]	; (8003a4c <MX_GPIO_Init+0x244>)
 80039f4:	f002 fb2a 	bl	800604c <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 80039f8:	2340      	movs	r3, #64	; 0x40
 80039fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80039fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a02:	2301      	movs	r3, #1
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 8003a06:	f107 031c 	add.w	r3, r7, #28
 8003a0a:	4619      	mov	r1, r3
 8003a0c:	480e      	ldr	r0, [pc, #56]	; (8003a48 <MX_GPIO_Init+0x240>)
 8003a0e:	f002 fb1d 	bl	800604c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003a12:	2200      	movs	r2, #0
 8003a14:	2100      	movs	r1, #0
 8003a16:	2017      	movs	r0, #23
 8003a18:	f002 fa41 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003a1c:	2017      	movs	r0, #23
 8003a1e:	f002 fa5a 	bl	8005ed6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003a22:	2200      	movs	r2, #0
 8003a24:	2100      	movs	r1, #0
 8003a26:	2028      	movs	r0, #40	; 0x28
 8003a28:	f002 fa39 	bl	8005e9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003a2c:	2028      	movs	r0, #40	; 0x28
 8003a2e:	f002 fa52 	bl	8005ed6 <HAL_NVIC_EnableIRQ>

}
 8003a32:	bf00      	nop
 8003a34:	3730      	adds	r7, #48	; 0x30
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40020400 	.word	0x40020400
 8003a48:	40020c00 	.word	0x40020c00
 8003a4c:	40020800 	.word	0x40020800
 8003a50:	40020000 	.word	0x40020000
 8003a54:	40021000 	.word	0x40021000

08003a58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003a5c:	b672      	cpsid	i
}
 8003a5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <Error_Handler+0x8>

08003a62 <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b084      	sub	sp, #16
 8003a66:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	1c5a      	adds	r2, r3, #1
 8003a70:	60fa      	str	r2, [r7, #12]
 8003a72:	3310      	adds	r3, #16
 8003a74:	443b      	add	r3, r7
 8003a76:	222f      	movs	r2, #47	; 0x2f
 8003a78:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	60fa      	str	r2, [r7, #12]
 8003a82:	3310      	adds	r3, #16
 8003a84:	443b      	add	r3, r7
 8003a86:	2260      	movs	r2, #96	; 0x60
 8003a88:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	1c5a      	adds	r2, r3, #1
 8003a90:	60fa      	str	r2, [r7, #12]
 8003a92:	3310      	adds	r3, #16
 8003a94:	443b      	add	r3, r7
 8003a96:	2260      	movs	r2, #96	; 0x60
 8003a98:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	60fa      	str	r2, [r7, #12]
 8003aa2:	3310      	adds	r3, #16
 8003aa4:	443b      	add	r3, r7
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	60fa      	str	r2, [r7, #12]
 8003ab2:	3310      	adds	r3, #16
 8003ab4:	443b      	add	r3, r7
 8003ab6:	2203      	movs	r2, #3
 8003ab8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1c5a      	adds	r2, r3, #1
 8003ac0:	60fa      	str	r2, [r7, #12]
 8003ac2:	3310      	adds	r3, #16
 8003ac4:	443b      	add	r3, r7
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	60fa      	str	r2, [r7, #12]
 8003ad2:	3310      	adds	r3, #16
 8003ad4:	443b      	add	r3, r7
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003adc:	1d3a      	adds	r2, r7, #4
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003ae6:	1d39      	adds	r1, r7, #4
 8003ae8:	2300      	movs	r3, #0
 8003aea:	2208      	movs	r2, #8
 8003aec:	f240 6001 	movw	r0, #1537	; 0x601
 8003af0:	f7ff fab2 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	f001 fa17 	bl	8004f28 <HAL_Delay>
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <synchronousMode>:

void synchronousMode()
{
 8003b02:	b580      	push	{r7, lr}
 8003b04:	b084      	sub	sp, #16
 8003b06:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	60fa      	str	r2, [r7, #12]
 8003b12:	3310      	adds	r3, #16
 8003b14:	443b      	add	r3, r7
 8003b16:	222b      	movs	r2, #43	; 0x2b
 8003b18:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	1c5a      	adds	r2, r3, #1
 8003b20:	60fa      	str	r2, [r7, #12]
 8003b22:	3310      	adds	r3, #16
 8003b24:	443b      	add	r3, r7
 8003b26:	220f      	movs	r2, #15
 8003b28:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	60fa      	str	r2, [r7, #12]
 8003b32:	3310      	adds	r3, #16
 8003b34:	443b      	add	r3, r7
 8003b36:	2220      	movs	r2, #32
 8003b38:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	1c5a      	adds	r2, r3, #1
 8003b40:	60fa      	str	r2, [r7, #12]
 8003b42:	3310      	adds	r3, #16
 8003b44:	443b      	add	r3, r7
 8003b46:	2200      	movs	r2, #0
 8003b48:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	1c5a      	adds	r2, r3, #1
 8003b50:	60fa      	str	r2, [r7, #12]
 8003b52:	3310      	adds	r3, #16
 8003b54:	443b      	add	r3, r7
 8003b56:	2201      	movs	r2, #1
 8003b58:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	60fa      	str	r2, [r7, #12]
 8003b62:	3310      	adds	r3, #16
 8003b64:	443b      	add	r3, r7
 8003b66:	2200      	movs	r2, #0
 8003b68:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	60fa      	str	r2, [r7, #12]
 8003b72:	3310      	adds	r3, #16
 8003b74:	443b      	add	r3, r7
 8003b76:	2200      	movs	r2, #0
 8003b78:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003b7c:	1d3a      	adds	r2, r7, #4
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	4413      	add	r3, r2
 8003b82:	2200      	movs	r2, #0
 8003b84:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003b86:	1d39      	adds	r1, r7, #4
 8003b88:	2300      	movs	r3, #0
 8003b8a:	2208      	movs	r2, #8
 8003b8c:	f240 6001 	movw	r0, #1537	; 0x601
 8003b90:	f7ff fa62 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003b94:	2064      	movs	r0, #100	; 0x64
 8003b96:	f001 f9c7 	bl	8004f28 <HAL_Delay>
}
 8003b9a:	bf00      	nop
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}

08003ba2 <settingEnc>:

void settingEnc(int16_t enc)
{
 8003ba2:	b580      	push	{r7, lr}
 8003ba4:	b086      	sub	sp, #24
 8003ba6:	af00      	add	r7, sp, #0
 8003ba8:	4603      	mov	r3, r0
 8003baa:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	e055      	b.n	8003c5e <settingEnc+0xbc>
    {
        int index = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1c5a      	adds	r2, r3, #1
 8003bba:	613a      	str	r2, [r7, #16]
 8003bbc:	3318      	adds	r3, #24
 8003bbe:	443b      	add	r3, r7
 8003bc0:	222b      	movs	r2, #43	; 0x2b
 8003bc2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	1c5a      	adds	r2, r3, #1
 8003bca:	613a      	str	r2, [r7, #16]
 8003bcc:	3318      	adds	r3, #24
 8003bce:	443b      	add	r3, r7
 8003bd0:	220e      	movs	r2, #14
 8003bd2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	613a      	str	r2, [r7, #16]
 8003bdc:	3318      	adds	r3, #24
 8003bde:	443b      	add	r3, r7
 8003be0:	2220      	movs	r2, #32
 8003be2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	b2da      	uxtb	r2, r3
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	1c59      	adds	r1, r3, #1
 8003bee:	6139      	str	r1, [r7, #16]
 8003bf0:	3201      	adds	r2, #1
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	3318      	adds	r3, #24
 8003bf6:	443b      	add	r3, r7
 8003bf8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1c5a      	adds	r2, r3, #1
 8003c00:	613a      	str	r2, [r7, #16]
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	b2d2      	uxtb	r2, r2
 8003c06:	3318      	adds	r3, #24
 8003c08:	443b      	add	r3, r7
 8003c0a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 8003c0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c12:	121b      	asrs	r3, r3, #8
 8003c14:	b219      	sxth	r1, r3
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	613a      	str	r2, [r7, #16]
 8003c1c:	b2ca      	uxtb	r2, r1
 8003c1e:	3318      	adds	r3, #24
 8003c20:	443b      	add	r3, r7
 8003c22:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1c5a      	adds	r2, r3, #1
 8003c2a:	613a      	str	r2, [r7, #16]
 8003c2c:	3318      	adds	r3, #24
 8003c2e:	443b      	add	r3, r7
 8003c30:	2200      	movs	r2, #0
 8003c32:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003c36:	f107 0208 	add.w	r2, r7, #8
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003c42:	f107 0108 	add.w	r1, r7, #8
 8003c46:	2300      	movs	r3, #0
 8003c48:	2208      	movs	r2, #8
 8003c4a:	f240 6001 	movw	r0, #1537	; 0x601
 8003c4e:	f7ff fa03 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003c52:	2064      	movs	r0, #100	; 0x64
 8003c54:	f001 f968 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	617b      	str	r3, [r7, #20]
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	dda6      	ble.n	8003bb2 <settingEnc+0x10>
    }
}
 8003c64:	bf00      	nop
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <settingPole>:

void settingPole(int16_t pole)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	4603      	mov	r3, r0
 8003c76:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8003c78:	2300      	movs	r3, #0
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e055      	b.n	8003d2a <settingPole+0xbc>
    {
        int index = 0;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	1c5a      	adds	r2, r3, #1
 8003c86:	613a      	str	r2, [r7, #16]
 8003c88:	3318      	adds	r3, #24
 8003c8a:	443b      	add	r3, r7
 8003c8c:	222b      	movs	r2, #43	; 0x2b
 8003c8e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	1c5a      	adds	r2, r3, #1
 8003c96:	613a      	str	r2, [r7, #16]
 8003c98:	3318      	adds	r3, #24
 8003c9a:	443b      	add	r3, r7
 8003c9c:	220c      	movs	r2, #12
 8003c9e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	613a      	str	r2, [r7, #16]
 8003ca8:	3318      	adds	r3, #24
 8003caa:	443b      	add	r3, r7
 8003cac:	2220      	movs	r2, #32
 8003cae:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003cb2:	697b      	ldr	r3, [r7, #20]
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1c59      	adds	r1, r3, #1
 8003cba:	6139      	str	r1, [r7, #16]
 8003cbc:	3201      	adds	r2, #1
 8003cbe:	b2d2      	uxtb	r2, r2
 8003cc0:	3318      	adds	r3, #24
 8003cc2:	443b      	add	r3, r7
 8003cc4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	1c5a      	adds	r2, r3, #1
 8003ccc:	613a      	str	r2, [r7, #16]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	3318      	adds	r3, #24
 8003cd4:	443b      	add	r3, r7
 8003cd6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 8003cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003cde:	121b      	asrs	r3, r3, #8
 8003ce0:	b219      	sxth	r1, r3
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	1c5a      	adds	r2, r3, #1
 8003ce6:	613a      	str	r2, [r7, #16]
 8003ce8:	b2ca      	uxtb	r2, r1
 8003cea:	3318      	adds	r3, #24
 8003cec:	443b      	add	r3, r7
 8003cee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	613a      	str	r2, [r7, #16]
 8003cf8:	3318      	adds	r3, #24
 8003cfa:	443b      	add	r3, r7
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003d02:	f107 0208 	add.w	r2, r7, #8
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	4413      	add	r3, r2
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003d0e:	f107 0108 	add.w	r1, r7, #8
 8003d12:	2300      	movs	r3, #0
 8003d14:	2208      	movs	r2, #8
 8003d16:	f240 6001 	movw	r0, #1537	; 0x601
 8003d1a:	f7ff f99d 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003d1e:	2064      	movs	r0, #100	; 0x64
 8003d20:	f001 f902 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	3301      	adds	r3, #1
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	2b01      	cmp	r3, #1
 8003d2e:	dda6      	ble.n	8003c7e <settingPole+0x10>
    }
}
 8003d30:	bf00      	nop
 8003d32:	bf00      	nop
 8003d34:	3718      	adds	r7, #24
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <settingBreak>:

void settingBreak(uint8_t enable)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b086      	sub	sp, #24
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	4603      	mov	r3, r0
 8003d42:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8003d44:	2300      	movs	r3, #0
 8003d46:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	1c5a      	adds	r2, r3, #1
 8003d4c:	617a      	str	r2, [r7, #20]
 8003d4e:	3318      	adds	r3, #24
 8003d50:	443b      	add	r3, r7
 8003d52:	222b      	movs	r2, #43	; 0x2b
 8003d54:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1c5a      	adds	r2, r3, #1
 8003d5c:	617a      	str	r2, [r7, #20]
 8003d5e:	3318      	adds	r3, #24
 8003d60:	443b      	add	r3, r7
 8003d62:	2207      	movs	r2, #7
 8003d64:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	617a      	str	r2, [r7, #20]
 8003d6e:	3318      	adds	r3, #24
 8003d70:	443b      	add	r3, r7
 8003d72:	2220      	movs	r2, #32
 8003d74:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	617a      	str	r2, [r7, #20]
 8003d7e:	3318      	adds	r3, #24
 8003d80:	443b      	add	r3, r7
 8003d82:	2200      	movs	r2, #0
 8003d84:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	1c5a      	adds	r2, r3, #1
 8003d8c:	617a      	str	r2, [r7, #20]
 8003d8e:	3318      	adds	r3, #24
 8003d90:	443b      	add	r3, r7
 8003d92:	79fa      	ldrb	r2, [r7, #7]
 8003d94:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	1c5a      	adds	r2, r3, #1
 8003d9c:	617a      	str	r2, [r7, #20]
 8003d9e:	3318      	adds	r3, #24
 8003da0:	443b      	add	r3, r7
 8003da2:	2200      	movs	r2, #0
 8003da4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	1c5a      	adds	r2, r3, #1
 8003dac:	617a      	str	r2, [r7, #20]
 8003dae:	3318      	adds	r3, #24
 8003db0:	443b      	add	r3, r7
 8003db2:	2200      	movs	r2, #0
 8003db4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003db8:	f107 020c 	add.w	r2, r7, #12
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003dc4:	f107 010c 	add.w	r1, r7, #12
 8003dc8:	2300      	movs	r3, #0
 8003dca:	2208      	movs	r2, #8
 8003dcc:	f240 6001 	movw	r0, #1537	; 0x601
 8003dd0:	f7ff f942 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003dd4:	2064      	movs	r0, #100	; 0x64
 8003dd6:	f001 f8a7 	bl	8004f28 <HAL_Delay>
}
 8003dda:	bf00      	nop
 8003ddc:	3718      	adds	r7, #24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}

08003de2 <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af00      	add	r7, sp, #0
 8003de8:	4603      	mov	r3, r0
 8003dea:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8003dec:	2300      	movs	r3, #0
 8003dee:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	1c5a      	adds	r2, r3, #1
 8003df4:	617a      	str	r2, [r7, #20]
 8003df6:	3318      	adds	r3, #24
 8003df8:	443b      	add	r3, r7
 8003dfa:	222b      	movs	r2, #43	; 0x2b
 8003dfc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	1c5a      	adds	r2, r3, #1
 8003e04:	617a      	str	r2, [r7, #20]
 8003e06:	3318      	adds	r3, #24
 8003e08:	443b      	add	r3, r7
 8003e0a:	2208      	movs	r2, #8
 8003e0c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	617a      	str	r2, [r7, #20]
 8003e16:	3318      	adds	r3, #24
 8003e18:	443b      	add	r3, r7
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	617a      	str	r2, [r7, #20]
 8003e26:	3318      	adds	r3, #24
 8003e28:	443b      	add	r3, r7
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	1c5a      	adds	r2, r3, #1
 8003e34:	617a      	str	r2, [r7, #20]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	b2d2      	uxtb	r2, r2
 8003e3a:	3318      	adds	r3, #24
 8003e3c:	443b      	add	r3, r7
 8003e3e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8003e42:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e46:	121b      	asrs	r3, r3, #8
 8003e48:	b219      	sxth	r1, r3
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	617a      	str	r2, [r7, #20]
 8003e50:	b2ca      	uxtb	r2, r1
 8003e52:	3318      	adds	r3, #24
 8003e54:	443b      	add	r3, r7
 8003e56:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	1c5a      	adds	r2, r3, #1
 8003e5e:	617a      	str	r2, [r7, #20]
 8003e60:	3318      	adds	r3, #24
 8003e62:	443b      	add	r3, r7
 8003e64:	2200      	movs	r2, #0
 8003e66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8003e6a:	f107 020c 	add.w	r2, r7, #12
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	4413      	add	r3, r2
 8003e72:	2200      	movs	r2, #0
 8003e74:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003e76:	f107 010c 	add.w	r1, r7, #12
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	f240 6001 	movw	r0, #1537	; 0x601
 8003e82:	f7ff f8e9 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8003e86:	2064      	movs	r0, #100	; 0x64
 8003e88:	f001 f84e 	bl	8004f28 <HAL_Delay>
}
 8003e8c:	bf00      	nop
 8003e8e:	3718      	adds	r7, #24
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b086      	sub	sp, #24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	e05e      	b.n	8003f62 <settingRatedCurrent+0xce>
    {
        int index = 0;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	613a      	str	r2, [r7, #16]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	443b      	add	r3, r7
 8003eb2:	222b      	movs	r2, #43	; 0x2b
 8003eb4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	613a      	str	r2, [r7, #16]
 8003ebe:	3318      	adds	r3, #24
 8003ec0:	443b      	add	r3, r7
 8003ec2:	2214      	movs	r2, #20
 8003ec4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	613a      	str	r2, [r7, #16]
 8003ece:	3318      	adds	r3, #24
 8003ed0:	443b      	add	r3, r7
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	1c59      	adds	r1, r3, #1
 8003ee0:	6139      	str	r1, [r7, #16]
 8003ee2:	3201      	adds	r2, #1
 8003ee4:	b2d2      	uxtb	r2, r2
 8003ee6:	3318      	adds	r3, #24
 8003ee8:	443b      	add	r3, r7
 8003eea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003eee:	f04f 0200 	mov.w	r2, #0
 8003ef2:	4b20      	ldr	r3, [pc, #128]	; (8003f74 <settingRatedCurrent+0xe0>)
 8003ef4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ef8:	f7fc fb96 	bl	8000628 <__aeabi_dmul>
 8003efc:	4602      	mov	r2, r0
 8003efe:	460b      	mov	r3, r1
 8003f00:	4610      	mov	r0, r2
 8003f02:	4619      	mov	r1, r3
 8003f04:	f7fc fe2a 	bl	8000b5c <__aeabi_d2iz>
 8003f08:	4601      	mov	r1, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1c5a      	adds	r2, r3, #1
 8003f0e:	613a      	str	r2, [r7, #16]
 8003f10:	b2ca      	uxtb	r2, r1
 8003f12:	3318      	adds	r3, #24
 8003f14:	443b      	add	r3, r7
 8003f16:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1c5a      	adds	r2, r3, #1
 8003f1e:	613a      	str	r2, [r7, #16]
 8003f20:	3318      	adds	r3, #24
 8003f22:	443b      	add	r3, r7
 8003f24:	2200      	movs	r2, #0
 8003f26:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	613a      	str	r2, [r7, #16]
 8003f30:	3318      	adds	r3, #24
 8003f32:	443b      	add	r3, r7
 8003f34:	2200      	movs	r2, #0
 8003f36:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8003f3a:	f107 0208 	add.w	r2, r7, #8
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4413      	add	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8003f46:	f107 0108 	add.w	r1, r7, #8
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	2208      	movs	r2, #8
 8003f4e:	f240 6001 	movw	r0, #1537	; 0x601
 8003f52:	f7ff f881 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8003f56:	2064      	movs	r0, #100	; 0x64
 8003f58:	f000 ffe6 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	3301      	adds	r3, #1
 8003f60:	617b      	str	r3, [r7, #20]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	dd9d      	ble.n	8003ea4 <settingRatedCurrent+0x10>
    }
}
 8003f68:	bf00      	nop
 8003f6a:	bf00      	nop
 8003f6c:	3718      	adds	r7, #24
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	40240000 	.word	0x40240000

08003f78 <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b086      	sub	sp, #24
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e05e      	b.n	8004046 <settingMaxCurrent+0xce>
    {
        int index = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	613a      	str	r2, [r7, #16]
 8003f92:	3318      	adds	r3, #24
 8003f94:	443b      	add	r3, r7
 8003f96:	222b      	movs	r2, #43	; 0x2b
 8003f98:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	1c5a      	adds	r2, r3, #1
 8003fa0:	613a      	str	r2, [r7, #16]
 8003fa2:	3318      	adds	r3, #24
 8003fa4:	443b      	add	r3, r7
 8003fa6:	2215      	movs	r2, #21
 8003fa8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1c5a      	adds	r2, r3, #1
 8003fb0:	613a      	str	r2, [r7, #16]
 8003fb2:	3318      	adds	r3, #24
 8003fb4:	443b      	add	r3, r7
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1c59      	adds	r1, r3, #1
 8003fc4:	6139      	str	r1, [r7, #16]
 8003fc6:	3201      	adds	r2, #1
 8003fc8:	b2d2      	uxtb	r2, r2
 8003fca:	3318      	adds	r3, #24
 8003fcc:	443b      	add	r3, r7
 8003fce:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 8003fd2:	f04f 0200 	mov.w	r2, #0
 8003fd6:	4b20      	ldr	r3, [pc, #128]	; (8004058 <settingMaxCurrent+0xe0>)
 8003fd8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003fdc:	f7fc fb24 	bl	8000628 <__aeabi_dmul>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	4610      	mov	r0, r2
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f7fc fdb8 	bl	8000b5c <__aeabi_d2iz>
 8003fec:	4601      	mov	r1, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	613a      	str	r2, [r7, #16]
 8003ff4:	b2ca      	uxtb	r2, r1
 8003ff6:	3318      	adds	r3, #24
 8003ff8:	443b      	add	r3, r7
 8003ffa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	613a      	str	r2, [r7, #16]
 8004004:	3318      	adds	r3, #24
 8004006:	443b      	add	r3, r7
 8004008:	2200      	movs	r2, #0
 800400a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1c5a      	adds	r2, r3, #1
 8004012:	613a      	str	r2, [r7, #16]
 8004014:	3318      	adds	r3, #24
 8004016:	443b      	add	r3, r7
 8004018:	2200      	movs	r2, #0
 800401a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800401e:	f107 0208 	add.w	r2, r7, #8
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	4413      	add	r3, r2
 8004026:	2200      	movs	r2, #0
 8004028:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800402a:	f107 0108 	add.w	r1, r7, #8
 800402e:	2300      	movs	r3, #0
 8004030:	2208      	movs	r2, #8
 8004032:	f240 6001 	movw	r0, #1537	; 0x601
 8004036:	f7ff f80f 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800403a:	2064      	movs	r0, #100	; 0x64
 800403c:	f000 ff74 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	3301      	adds	r3, #1
 8004044:	617b      	str	r3, [r7, #20]
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2b01      	cmp	r3, #1
 800404a:	dd9d      	ble.n	8003f88 <settingMaxCurrent+0x10>
    }
}
 800404c:	bf00      	nop
 800404e:	bf00      	nop
 8004050:	3718      	adds	r7, #24
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
 8004056:	bf00      	nop
 8004058:	40240000 	.word	0x40240000

0800405c <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b086      	sub	sp, #24
 8004060:	af00      	add	r7, sp, #0
 8004062:	4603      	mov	r3, r0
 8004064:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8004066:	2300      	movs	r3, #0
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	e055      	b.n	8004118 <settingHallOffset+0xbc>
    {
        int index = 0;
 800406c:	2300      	movs	r3, #0
 800406e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	613a      	str	r2, [r7, #16]
 8004076:	3318      	adds	r3, #24
 8004078:	443b      	add	r3, r7
 800407a:	222b      	movs	r2, #43	; 0x2b
 800407c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	1c5a      	adds	r2, r3, #1
 8004084:	613a      	str	r2, [r7, #16]
 8004086:	3318      	adds	r3, #24
 8004088:	443b      	add	r3, r7
 800408a:	2211      	movs	r2, #17
 800408c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	1c5a      	adds	r2, r3, #1
 8004094:	613a      	str	r2, [r7, #16]
 8004096:	3318      	adds	r3, #24
 8004098:	443b      	add	r3, r7
 800409a:	2220      	movs	r2, #32
 800409c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	b2da      	uxtb	r2, r3
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	1c59      	adds	r1, r3, #1
 80040a8:	6139      	str	r1, [r7, #16]
 80040aa:	3201      	adds	r2, #1
 80040ac:	b2d2      	uxtb	r2, r2
 80040ae:	3318      	adds	r3, #24
 80040b0:	443b      	add	r3, r7
 80040b2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	1c5a      	adds	r2, r3, #1
 80040ba:	613a      	str	r2, [r7, #16]
 80040bc:	88fa      	ldrh	r2, [r7, #6]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	3318      	adds	r3, #24
 80040c2:	443b      	add	r3, r7
 80040c4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 80040c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80040cc:	121b      	asrs	r3, r3, #8
 80040ce:	b219      	sxth	r1, r3
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1c5a      	adds	r2, r3, #1
 80040d4:	613a      	str	r2, [r7, #16]
 80040d6:	b2ca      	uxtb	r2, r1
 80040d8:	3318      	adds	r3, #24
 80040da:	443b      	add	r3, r7
 80040dc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	613a      	str	r2, [r7, #16]
 80040e6:	3318      	adds	r3, #24
 80040e8:	443b      	add	r3, r7
 80040ea:	2200      	movs	r2, #0
 80040ec:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80040f0:	f107 0208 	add.w	r2, r7, #8
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	4413      	add	r3, r2
 80040f8:	2200      	movs	r2, #0
 80040fa:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80040fc:	f107 0108 	add.w	r1, r7, #8
 8004100:	2300      	movs	r3, #0
 8004102:	2208      	movs	r2, #8
 8004104:	f240 6001 	movw	r0, #1537	; 0x601
 8004108:	f7fe ffa6 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800410c:	2064      	movs	r0, #100	; 0x64
 800410e:	f000 ff0b 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	2b01      	cmp	r3, #1
 800411c:	dda6      	ble.n	800406c <settingHallOffset+0x10>
    }
}
 800411e:	bf00      	nop
 8004120:	bf00      	nop
 8004122:	3718      	adds	r7, #24
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <save>:

void save()
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800412e:	2300      	movs	r3, #0
 8004130:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	60fa      	str	r2, [r7, #12]
 8004138:	3310      	adds	r3, #16
 800413a:	443b      	add	r3, r7
 800413c:	222b      	movs	r2, #43	; 0x2b
 800413e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	60fa      	str	r2, [r7, #12]
 8004148:	3310      	adds	r3, #16
 800414a:	443b      	add	r3, r7
 800414c:	2210      	movs	r2, #16
 800414e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	1c5a      	adds	r2, r3, #1
 8004156:	60fa      	str	r2, [r7, #12]
 8004158:	3310      	adds	r3, #16
 800415a:	443b      	add	r3, r7
 800415c:	2220      	movs	r2, #32
 800415e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	1c5a      	adds	r2, r3, #1
 8004166:	60fa      	str	r2, [r7, #12]
 8004168:	3310      	adds	r3, #16
 800416a:	443b      	add	r3, r7
 800416c:	2200      	movs	r2, #0
 800416e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	60fa      	str	r2, [r7, #12]
 8004178:	3310      	adds	r3, #16
 800417a:	443b      	add	r3, r7
 800417c:	2201      	movs	r2, #1
 800417e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	60fa      	str	r2, [r7, #12]
 8004188:	3310      	adds	r3, #16
 800418a:	443b      	add	r3, r7
 800418c:	2200      	movs	r2, #0
 800418e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	1c5a      	adds	r2, r3, #1
 8004196:	60fa      	str	r2, [r7, #12]
 8004198:	3310      	adds	r3, #16
 800419a:	443b      	add	r3, r7
 800419c:	2200      	movs	r2, #0
 800419e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80041a2:	1d3a      	adds	r2, r7, #4
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	4413      	add	r3, r2
 80041a8:	2200      	movs	r2, #0
 80041aa:	701a      	strb	r2, [r3, #0]
    index = 0;
 80041ac:	2300      	movs	r3, #0
 80041ae:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80041b0:	1d39      	adds	r1, r7, #4
 80041b2:	2300      	movs	r3, #0
 80041b4:	2208      	movs	r2, #8
 80041b6:	f240 6001 	movw	r0, #1537	; 0x601
 80041ba:	f7fe ff4d 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80041be:	2064      	movs	r0, #100	; 0x64
 80041c0:	f000 feb2 	bl	8004f28 <HAL_Delay>
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <startMotor>:



void startMotor()
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
    enable();
 80041d0:	f000 f806 	bl	80041e0 <enable>
    velocityMode();
 80041d4:	f7ff fc45 	bl	8003a62 <velocityMode>
    synchronousMode();
 80041d8:	f7ff fc93 	bl	8003b02 <synchronousMode>
}
 80041dc:	bf00      	nop
 80041de:	bd80      	pop	{r7, pc}

080041e0 <enable>:

void enable()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b086      	sub	sp, #24
 80041e4:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 80041e6:	4b2f      	ldr	r3, [pc, #188]	; (80042a4 <enable+0xc4>)
 80041e8:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	e050      	b.n	8004292 <enable+0xb2>
    {
        int index = 0;
 80041f0:	2300      	movs	r3, #0
 80041f2:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	613a      	str	r2, [r7, #16]
 80041fa:	3318      	adds	r3, #24
 80041fc:	443b      	add	r3, r7
 80041fe:	222b      	movs	r2, #43	; 0x2b
 8004200:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	613a      	str	r2, [r7, #16]
 800420a:	3318      	adds	r3, #24
 800420c:	443b      	add	r3, r7
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	1c5a      	adds	r2, r3, #1
 8004218:	613a      	str	r2, [r7, #16]
 800421a:	3318      	adds	r3, #24
 800421c:	443b      	add	r3, r7
 800421e:	2260      	movs	r2, #96	; 0x60
 8004220:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	613a      	str	r2, [r7, #16]
 800422a:	3318      	adds	r3, #24
 800422c:	443b      	add	r3, r7
 800422e:	2200      	movs	r2, #0
 8004230:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8004234:	693b      	ldr	r3, [r7, #16]
 8004236:	1c5a      	adds	r2, r3, #1
 8004238:	613a      	str	r2, [r7, #16]
 800423a:	1d39      	adds	r1, r7, #4
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	440a      	add	r2, r1
 8004240:	7812      	ldrb	r2, [r2, #0]
 8004242:	3318      	adds	r3, #24
 8004244:	443b      	add	r3, r7
 8004246:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	613a      	str	r2, [r7, #16]
 8004250:	3318      	adds	r3, #24
 8004252:	443b      	add	r3, r7
 8004254:	2200      	movs	r2, #0
 8004256:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1c5a      	adds	r2, r3, #1
 800425e:	613a      	str	r2, [r7, #16]
 8004260:	3318      	adds	r3, #24
 8004262:	443b      	add	r3, r7
 8004264:	2200      	movs	r2, #0
 8004266:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800426a:	f107 0208 	add.w	r2, r7, #8
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	4413      	add	r3, r2
 8004272:	2200      	movs	r2, #0
 8004274:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004276:	f107 0108 	add.w	r1, r7, #8
 800427a:	2300      	movs	r3, #0
 800427c:	2208      	movs	r2, #8
 800427e:	f240 6001 	movw	r0, #1537	; 0x601
 8004282:	f7fe fee9 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004286:	2064      	movs	r0, #100	; 0x64
 8004288:	f000 fe4e 	bl	8004f28 <HAL_Delay>
    for(int i =0;i<4;i++)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	2b03      	cmp	r3, #3
 8004296:	ddab      	ble.n	80041f0 <enable+0x10>
    }
}
 8004298:	bf00      	nop
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
 80042a2:	bf00      	nop
 80042a4:	0f070600 	.word	0x0f070600

080042a8 <disable>:

void disable()
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80042ae:	2300      	movs	r3, #0
 80042b0:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	60fa      	str	r2, [r7, #12]
 80042b8:	3310      	adds	r3, #16
 80042ba:	443b      	add	r3, r7
 80042bc:	222b      	movs	r2, #43	; 0x2b
 80042be:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	60fa      	str	r2, [r7, #12]
 80042c8:	3310      	adds	r3, #16
 80042ca:	443b      	add	r3, r7
 80042cc:	2240      	movs	r2, #64	; 0x40
 80042ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	60fa      	str	r2, [r7, #12]
 80042d8:	3310      	adds	r3, #16
 80042da:	443b      	add	r3, r7
 80042dc:	2260      	movs	r2, #96	; 0x60
 80042de:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	1c5a      	adds	r2, r3, #1
 80042e6:	60fa      	str	r2, [r7, #12]
 80042e8:	3310      	adds	r3, #16
 80042ea:	443b      	add	r3, r7
 80042ec:	2200      	movs	r2, #0
 80042ee:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1c5a      	adds	r2, r3, #1
 80042f6:	60fa      	str	r2, [r7, #12]
 80042f8:	3310      	adds	r3, #16
 80042fa:	443b      	add	r3, r7
 80042fc:	2200      	movs	r2, #0
 80042fe:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	1c5a      	adds	r2, r3, #1
 8004306:	60fa      	str	r2, [r7, #12]
 8004308:	3310      	adds	r3, #16
 800430a:	443b      	add	r3, r7
 800430c:	2200      	movs	r2, #0
 800430e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	1c5a      	adds	r2, r3, #1
 8004316:	60fa      	str	r2, [r7, #12]
 8004318:	3310      	adds	r3, #16
 800431a:	443b      	add	r3, r7
 800431c:	2200      	movs	r2, #0
 800431e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004322:	1d3a      	adds	r2, r7, #4
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
    index = 0;
 800432c:	2300      	movs	r3, #0
 800432e:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004330:	1d39      	adds	r1, r7, #4
 8004332:	2300      	movs	r3, #0
 8004334:	2208      	movs	r2, #8
 8004336:	f240 6001 	movw	r0, #1537	; 0x601
 800433a:	f7fe fe8d 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800433e:	2064      	movs	r0, #100	; 0x64
 8004340:	f000 fdf2 	bl	8004f28 <HAL_Delay>
}
 8004344:	bf00      	nop
 8004346:	3710      	adds	r7, #16
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <reset>:

void reset()
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	60fa      	str	r2, [r7, #12]
 800435c:	3310      	adds	r3, #16
 800435e:	443b      	add	r3, r7
 8004360:	222b      	movs	r2, #43	; 0x2b
 8004362:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	60fa      	str	r2, [r7, #12]
 800436c:	3310      	adds	r3, #16
 800436e:	443b      	add	r3, r7
 8004370:	2240      	movs	r2, #64	; 0x40
 8004372:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	1c5a      	adds	r2, r3, #1
 800437a:	60fa      	str	r2, [r7, #12]
 800437c:	3310      	adds	r3, #16
 800437e:	443b      	add	r3, r7
 8004380:	2260      	movs	r2, #96	; 0x60
 8004382:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	1c5a      	adds	r2, r3, #1
 800438a:	60fa      	str	r2, [r7, #12]
 800438c:	3310      	adds	r3, #16
 800438e:	443b      	add	r3, r7
 8004390:	2200      	movs	r2, #0
 8004392:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	1c5a      	adds	r2, r3, #1
 800439a:	60fa      	str	r2, [r7, #12]
 800439c:	3310      	adds	r3, #16
 800439e:	443b      	add	r3, r7
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	60fa      	str	r2, [r7, #12]
 80043ac:	3310      	adds	r3, #16
 80043ae:	443b      	add	r3, r7
 80043b0:	2200      	movs	r2, #0
 80043b2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	1c5a      	adds	r2, r3, #1
 80043ba:	60fa      	str	r2, [r7, #12]
 80043bc:	3310      	adds	r3, #16
 80043be:	443b      	add	r3, r7
 80043c0:	2200      	movs	r2, #0
 80043c2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80043c6:	1d3a      	adds	r2, r7, #4
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80043d0:	1d39      	adds	r1, r7, #4
 80043d2:	2300      	movs	r3, #0
 80043d4:	2208      	movs	r2, #8
 80043d6:	f240 6001 	movw	r0, #1537	; 0x601
 80043da:	f7fe fe3d 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80043de:	2064      	movs	r0, #100	; 0x64
 80043e0:	f000 fda2 	bl	8004f28 <HAL_Delay>
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <reqEnc>:

void reqEnc()
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1c5a      	adds	r2, r3, #1
 80043fa:	60fa      	str	r2, [r7, #12]
 80043fc:	3310      	adds	r3, #16
 80043fe:	443b      	add	r3, r7
 8004400:	2240      	movs	r2, #64	; 0x40
 8004402:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1c5a      	adds	r2, r3, #1
 800440a:	60fa      	str	r2, [r7, #12]
 800440c:	3310      	adds	r3, #16
 800440e:	443b      	add	r3, r7
 8004410:	226c      	movs	r2, #108	; 0x6c
 8004412:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	60fa      	str	r2, [r7, #12]
 800441c:	3310      	adds	r3, #16
 800441e:	443b      	add	r3, r7
 8004420:	2260      	movs	r2, #96	; 0x60
 8004422:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	60fa      	str	r2, [r7, #12]
 800442c:	3310      	adds	r3, #16
 800442e:	443b      	add	r3, r7
 8004430:	2203      	movs	r2, #3
 8004432:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	1c5a      	adds	r2, r3, #1
 800443a:	60fa      	str	r2, [r7, #12]
 800443c:	3310      	adds	r3, #16
 800443e:	443b      	add	r3, r7
 8004440:	2200      	movs	r2, #0
 8004442:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	60fa      	str	r2, [r7, #12]
 800444c:	3310      	adds	r3, #16
 800444e:	443b      	add	r3, r7
 8004450:	2200      	movs	r2, #0
 8004452:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	60fa      	str	r2, [r7, #12]
 800445c:	3310      	adds	r3, #16
 800445e:	443b      	add	r3, r7
 8004460:	2200      	movs	r2, #0
 8004462:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004466:	1d3a      	adds	r2, r7, #4
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	4413      	add	r3, r2
 800446c:	2200      	movs	r2, #0
 800446e:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004470:	1d39      	adds	r1, r7, #4
 8004472:	2300      	movs	r3, #0
 8004474:	2208      	movs	r2, #8
 8004476:	f240 6001 	movw	r0, #1537	; 0x601
 800447a:	f7fe fded 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 800447e:	bf00      	nop
 8004480:	3710      	adds	r7, #16
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <reqState>:

void reqState()
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b084      	sub	sp, #16
 800448a:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	60fa      	str	r2, [r7, #12]
 8004496:	3310      	adds	r3, #16
 8004498:	443b      	add	r3, r7
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	60fa      	str	r2, [r7, #12]
 80044a6:	3310      	adds	r3, #16
 80044a8:	443b      	add	r3, r7
 80044aa:	223f      	movs	r2, #63	; 0x3f
 80044ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	1c5a      	adds	r2, r3, #1
 80044b4:	60fa      	str	r2, [r7, #12]
 80044b6:	3310      	adds	r3, #16
 80044b8:	443b      	add	r3, r7
 80044ba:	2260      	movs	r2, #96	; 0x60
 80044bc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	1c5a      	adds	r2, r3, #1
 80044c4:	60fa      	str	r2, [r7, #12]
 80044c6:	3310      	adds	r3, #16
 80044c8:	443b      	add	r3, r7
 80044ca:	2200      	movs	r2, #0
 80044cc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	60fa      	str	r2, [r7, #12]
 80044d6:	3310      	adds	r3, #16
 80044d8:	443b      	add	r3, r7
 80044da:	2200      	movs	r2, #0
 80044dc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	60fa      	str	r2, [r7, #12]
 80044e6:	3310      	adds	r3, #16
 80044e8:	443b      	add	r3, r7
 80044ea:	2200      	movs	r2, #0
 80044ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	1c5a      	adds	r2, r3, #1
 80044f4:	60fa      	str	r2, [r7, #12]
 80044f6:	3310      	adds	r3, #16
 80044f8:	443b      	add	r3, r7
 80044fa:	2200      	movs	r2, #0
 80044fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8004500:	1d3a      	adds	r2, r7, #4
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	4413      	add	r3, r2
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800450a:	1d39      	adds	r1, r7, #4
 800450c:	2300      	movs	r3, #0
 800450e:	2208      	movs	r2, #8
 8004510:	f240 6001 	movw	r0, #1537	; 0x601
 8004514:	f7fe fda0 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8004518:	bf00      	nop
 800451a:	3710      	adds	r7, #16
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b086      	sub	sp, #24
 8004524:	af00      	add	r7, sp, #0
 8004526:	4603      	mov	r3, r0
 8004528:	460a      	mov	r2, r1
 800452a:	80fb      	strh	r3, [r7, #6]
 800452c:	4613      	mov	r3, r2
 800452e:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 8004530:	88fb      	ldrh	r3, [r7, #6]
 8004532:	425b      	negs	r3, r3
 8004534:	b29b      	uxth	r3, r3
 8004536:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8004538:	2300      	movs	r3, #0
 800453a:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	617a      	str	r2, [r7, #20]
 8004542:	3318      	adds	r3, #24
 8004544:	443b      	add	r3, r7
 8004546:	2223      	movs	r2, #35	; 0x23
 8004548:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1c5a      	adds	r2, r3, #1
 8004550:	617a      	str	r2, [r7, #20]
 8004552:	3318      	adds	r3, #24
 8004554:	443b      	add	r3, r7
 8004556:	22ff      	movs	r2, #255	; 0xff
 8004558:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	1c5a      	adds	r2, r3, #1
 8004560:	617a      	str	r2, [r7, #20]
 8004562:	3318      	adds	r3, #24
 8004564:	443b      	add	r3, r7
 8004566:	2260      	movs	r2, #96	; 0x60
 8004568:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1c5a      	adds	r2, r3, #1
 8004570:	617a      	str	r2, [r7, #20]
 8004572:	3318      	adds	r3, #24
 8004574:	443b      	add	r3, r7
 8004576:	2203      	movs	r2, #3
 8004578:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	1c5a      	adds	r2, r3, #1
 8004580:	617a      	str	r2, [r7, #20]
 8004582:	88fa      	ldrh	r2, [r7, #6]
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	3318      	adds	r3, #24
 8004588:	443b      	add	r3, r7
 800458a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 800458e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004592:	121b      	asrs	r3, r3, #8
 8004594:	b219      	sxth	r1, r3
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	617a      	str	r2, [r7, #20]
 800459c:	b2ca      	uxtb	r2, r1
 800459e:	3318      	adds	r3, #24
 80045a0:	443b      	add	r3, r7
 80045a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	617a      	str	r2, [r7, #20]
 80045ac:	88ba      	ldrh	r2, [r7, #4]
 80045ae:	b2d2      	uxtb	r2, r2
 80045b0:	3318      	adds	r3, #24
 80045b2:	443b      	add	r3, r7
 80045b4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 80045b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80045bc:	121b      	asrs	r3, r3, #8
 80045be:	b21b      	sxth	r3, r3
 80045c0:	b2d9      	uxtb	r1, r3
 80045c2:	f107 020c 	add.w	r2, r7, #12
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	4413      	add	r3, r2
 80045ca:	460a      	mov	r2, r1
 80045cc:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80045ce:	f107 010c 	add.w	r1, r7, #12
 80045d2:	2300      	movs	r3, #0
 80045d4:	2208      	movs	r2, #8
 80045d6:	f240 6001 	movw	r0, #1537	; 0x601
 80045da:	f7fe fd3d 	bl	8003058 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 80045de:	bf00      	nop
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}

080045e6 <settingKP>:

void settingKP(int16_t kp)
{
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b086      	sub	sp, #24
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	4603      	mov	r3, r0
 80045ee:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	e055      	b.n	80046a2 <settingKP+0xbc>
    {
        int index = 0;
 80045f6:	2300      	movs	r3, #0
 80045f8:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	613a      	str	r2, [r7, #16]
 8004600:	3318      	adds	r3, #24
 8004602:	443b      	add	r3, r7
 8004604:	221d      	movs	r2, #29
 8004606:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	1c5a      	adds	r2, r3, #1
 800460e:	613a      	str	r2, [r7, #16]
 8004610:	3318      	adds	r3, #24
 8004612:	443b      	add	r3, r7
 8004614:	2220      	movs	r2, #32
 8004616:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	1c5a      	adds	r2, r3, #1
 800461e:	613a      	str	r2, [r7, #16]
 8004620:	3318      	adds	r3, #24
 8004622:	443b      	add	r3, r7
 8004624:	2220      	movs	r2, #32
 8004626:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	b2da      	uxtb	r2, r3
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1c59      	adds	r1, r3, #1
 8004632:	6139      	str	r1, [r7, #16]
 8004634:	3201      	adds	r2, #1
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	3318      	adds	r3, #24
 800463a:	443b      	add	r3, r7
 800463c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	1c5a      	adds	r2, r3, #1
 8004644:	613a      	str	r2, [r7, #16]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	b2d2      	uxtb	r2, r2
 800464a:	3318      	adds	r3, #24
 800464c:	443b      	add	r3, r7
 800464e:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 8004652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004656:	121b      	asrs	r3, r3, #8
 8004658:	b219      	sxth	r1, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1c5a      	adds	r2, r3, #1
 800465e:	613a      	str	r2, [r7, #16]
 8004660:	b2ca      	uxtb	r2, r1
 8004662:	3318      	adds	r3, #24
 8004664:	443b      	add	r3, r7
 8004666:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	613a      	str	r2, [r7, #16]
 8004670:	3318      	adds	r3, #24
 8004672:	443b      	add	r3, r7
 8004674:	2200      	movs	r2, #0
 8004676:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800467a:	f107 0208 	add.w	r2, r7, #8
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	2200      	movs	r2, #0
 8004684:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004686:	f107 0108 	add.w	r1, r7, #8
 800468a:	2300      	movs	r3, #0
 800468c:	2208      	movs	r2, #8
 800468e:	f240 6001 	movw	r0, #1537	; 0x601
 8004692:	f7fe fce1 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8004696:	2064      	movs	r0, #100	; 0x64
 8004698:	f000 fc46 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	3301      	adds	r3, #1
 80046a0:	617b      	str	r3, [r7, #20]
 80046a2:	697b      	ldr	r3, [r7, #20]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	dda6      	ble.n	80045f6 <settingKP+0x10>
    }
}
 80046a8:	bf00      	nop
 80046aa:	bf00      	nop
 80046ac:	3718      	adds	r7, #24
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <settingKI>:

void settingKI(int16_t ki)
{
 80046b2:	b580      	push	{r7, lr}
 80046b4:	b086      	sub	sp, #24
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	4603      	mov	r3, r0
 80046ba:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e055      	b.n	800476e <settingKI+0xbc>
    {
        int index = 0;
 80046c2:	2300      	movs	r3, #0
 80046c4:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1c5a      	adds	r2, r3, #1
 80046ca:	613a      	str	r2, [r7, #16]
 80046cc:	3318      	adds	r3, #24
 80046ce:	443b      	add	r3, r7
 80046d0:	221e      	movs	r2, #30
 80046d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1c5a      	adds	r2, r3, #1
 80046da:	613a      	str	r2, [r7, #16]
 80046dc:	3318      	adds	r3, #24
 80046de:	443b      	add	r3, r7
 80046e0:	2220      	movs	r2, #32
 80046e2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1c5a      	adds	r2, r3, #1
 80046ea:	613a      	str	r2, [r7, #16]
 80046ec:	3318      	adds	r3, #24
 80046ee:	443b      	add	r3, r7
 80046f0:	2220      	movs	r2, #32
 80046f2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	1c59      	adds	r1, r3, #1
 80046fe:	6139      	str	r1, [r7, #16]
 8004700:	3201      	adds	r2, #1
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	3318      	adds	r3, #24
 8004706:	443b      	add	r3, r7
 8004708:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	613a      	str	r2, [r7, #16]
 8004712:	88fa      	ldrh	r2, [r7, #6]
 8004714:	b2d2      	uxtb	r2, r2
 8004716:	3318      	adds	r3, #24
 8004718:	443b      	add	r3, r7
 800471a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 800471e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004722:	121b      	asrs	r3, r3, #8
 8004724:	b219      	sxth	r1, r3
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	613a      	str	r2, [r7, #16]
 800472c:	b2ca      	uxtb	r2, r1
 800472e:	3318      	adds	r3, #24
 8004730:	443b      	add	r3, r7
 8004732:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	613a      	str	r2, [r7, #16]
 800473c:	3318      	adds	r3, #24
 800473e:	443b      	add	r3, r7
 8004740:	2200      	movs	r2, #0
 8004742:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8004746:	f107 0208 	add.w	r2, r7, #8
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	4413      	add	r3, r2
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8004752:	f107 0108 	add.w	r1, r7, #8
 8004756:	2300      	movs	r3, #0
 8004758:	2208      	movs	r2, #8
 800475a:	f240 6001 	movw	r0, #1537	; 0x601
 800475e:	f7fe fc7b 	bl	8003058 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8004762:	2064      	movs	r0, #100	; 0x64
 8004764:	f000 fbe0 	bl	8004f28 <HAL_Delay>
    for(int i=0;i<2;i++)
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	3301      	adds	r3, #1
 800476c:	617b      	str	r3, [r7, #20]
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	2b01      	cmp	r3, #1
 8004772:	dda6      	ble.n	80046c2 <settingKI+0x10>
    }
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop
 8004778:	3718      	adds	r7, #24
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
	...

08004780 <settingMotor>:
void settingMotor()
{
 8004780:	b580      	push	{r7, lr}
 8004782:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8004784:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004788:	f7ff fa0b 	bl	8003ba2 <settingEnc>
    settingPole(POLE_PAIR);
 800478c:	200a      	movs	r0, #10
 800478e:	f7ff fa6e 	bl	8003c6e <settingPole>
    settingBreak(BREAK_OPTION);
 8004792:	2001      	movs	r0, #1
 8004794:	f7ff fad1 	bl	8003d3a <settingBreak>
    settingMaxRPM(MAX_RPM);
 8004798:	20c8      	movs	r0, #200	; 0xc8
 800479a:	f7ff fb22 	bl	8003de2 <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 800479e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80047d0 <settingMotor+0x50>
 80047a2:	f7ff fb77 	bl	8003e94 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 80047a6:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 80047d8 <settingMotor+0x58>
 80047aa:	f7ff fbe5 	bl	8003f78 <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 80047ae:	20f0      	movs	r0, #240	; 0xf0
 80047b0:	f7ff fc54 	bl	800405c <settingHallOffset>
    settingKP(KP_GAIN);
 80047b4:	f240 2026 	movw	r0, #550	; 0x226
 80047b8:	f7ff ff15 	bl	80045e6 <settingKP>
    settingKI(KI_GAIN);
 80047bc:	206e      	movs	r0, #110	; 0x6e
 80047be:	f7ff ff78 	bl	80046b2 <settingKI>
    save();
 80047c2:	f7ff fcb1 	bl	8004128 <save>
}
 80047c6:	bf00      	nop
 80047c8:	bd80      	pop	{r7, pc}
 80047ca:	bf00      	nop
 80047cc:	f3af 8000 	nop.w
 80047d0:	00000000 	.word	0x00000000
 80047d4:	40200000 	.word	0x40200000
 80047d8:	00000000 	.word	0x00000000
 80047dc:	40300000 	.word	0x40300000

080047e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80047e6:	4b0f      	ldr	r3, [pc, #60]	; (8004824 <HAL_MspInit+0x44>)
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	4a0e      	ldr	r2, [pc, #56]	; (8004824 <HAL_MspInit+0x44>)
 80047ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f0:	6413      	str	r3, [r2, #64]	; 0x40
 80047f2:	4b0c      	ldr	r3, [pc, #48]	; (8004824 <HAL_MspInit+0x44>)
 80047f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047fa:	607b      	str	r3, [r7, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047fe:	4b09      	ldr	r3, [pc, #36]	; (8004824 <HAL_MspInit+0x44>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	4a08      	ldr	r2, [pc, #32]	; (8004824 <HAL_MspInit+0x44>)
 8004804:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004808:	6453      	str	r3, [r2, #68]	; 0x44
 800480a:	4b06      	ldr	r3, [pc, #24]	; (8004824 <HAL_MspInit+0x44>)
 800480c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004812:	603b      	str	r3, [r7, #0]
 8004814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004816:	bf00      	nop
 8004818:	370c      	adds	r7, #12
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40023800 	.word	0x40023800

08004828 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b08a      	sub	sp, #40	; 0x28
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004830:	f107 0314 	add.w	r3, r7, #20
 8004834:	2200      	movs	r2, #0
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	605a      	str	r2, [r3, #4]
 800483a:	609a      	str	r2, [r3, #8]
 800483c:	60da      	str	r2, [r3, #12]
 800483e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1b      	ldr	r2, [pc, #108]	; (80048b4 <HAL_CAN_MspInit+0x8c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d12f      	bne.n	80048aa <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800484a:	4b1b      	ldr	r3, [pc, #108]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 800484c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484e:	4a1a      	ldr	r2, [pc, #104]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 8004850:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004854:	6413      	str	r3, [r2, #64]	; 0x40
 8004856:	4b18      	ldr	r3, [pc, #96]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800485e:	613b      	str	r3, [r7, #16]
 8004860:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004862:	4b15      	ldr	r3, [pc, #84]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004866:	4a14      	ldr	r2, [pc, #80]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 8004868:	f043 0308 	orr.w	r3, r3, #8
 800486c:	6313      	str	r3, [r2, #48]	; 0x30
 800486e:	4b12      	ldr	r3, [pc, #72]	; (80048b8 <HAL_CAN_MspInit+0x90>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800487a:	2303      	movs	r3, #3
 800487c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800487e:	2302      	movs	r3, #2
 8004880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004882:	2300      	movs	r3, #0
 8004884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004886:	2303      	movs	r3, #3
 8004888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800488a:	2309      	movs	r3, #9
 800488c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800488e:	f107 0314 	add.w	r3, r7, #20
 8004892:	4619      	mov	r1, r3
 8004894:	4809      	ldr	r0, [pc, #36]	; (80048bc <HAL_CAN_MspInit+0x94>)
 8004896:	f001 fbd9 	bl	800604c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800489a:	2200      	movs	r2, #0
 800489c:	2100      	movs	r1, #0
 800489e:	2014      	movs	r0, #20
 80048a0:	f001 fafd 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80048a4:	2014      	movs	r0, #20
 80048a6:	f001 fb16 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80048aa:	bf00      	nop
 80048ac:	3728      	adds	r7, #40	; 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40006400 	.word	0x40006400
 80048b8:	40023800 	.word	0x40023800
 80048bc:	40020c00 	.word	0x40020c00

080048c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b088      	sub	sp, #32
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048d0:	d10c      	bne.n	80048ec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80048d2:	4b49      	ldr	r3, [pc, #292]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	4a48      	ldr	r2, [pc, #288]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80048d8:	f043 0301 	orr.w	r3, r3, #1
 80048dc:	6413      	str	r3, [r2, #64]	; 0x40
 80048de:	4b46      	ldr	r3, [pc, #280]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	61fb      	str	r3, [r7, #28]
 80048e8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80048ea:	e080      	b.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM5)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a42      	ldr	r2, [pc, #264]	; (80049fc <HAL_TIM_Base_MspInit+0x13c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d114      	bne.n	8004920 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80048f6:	4b40      	ldr	r3, [pc, #256]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80048f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fa:	4a3f      	ldr	r2, [pc, #252]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80048fc:	f043 0308 	orr.w	r3, r3, #8
 8004900:	6413      	str	r3, [r2, #64]	; 0x40
 8004902:	4b3d      	ldr	r3, [pc, #244]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	f003 0308 	and.w	r3, r3, #8
 800490a:	61bb      	str	r3, [r7, #24]
 800490c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	2032      	movs	r0, #50	; 0x32
 8004914:	f001 fac3 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8004918:	2032      	movs	r0, #50	; 0x32
 800491a:	f001 fadc 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 800491e:	e066      	b.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM6)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a36      	ldr	r2, [pc, #216]	; (8004a00 <HAL_TIM_Base_MspInit+0x140>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d114      	bne.n	8004954 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800492a:	4b33      	ldr	r3, [pc, #204]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a32      	ldr	r2, [pc, #200]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004930:	f043 0310 	orr.w	r3, r3, #16
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
 8004936:	4b30      	ldr	r3, [pc, #192]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 0310 	and.w	r3, r3, #16
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	2036      	movs	r0, #54	; 0x36
 8004948:	f001 faa9 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800494c:	2036      	movs	r0, #54	; 0x36
 800494e:	f001 fac2 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 8004952:	e04c      	b.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM7)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <HAL_TIM_Base_MspInit+0x144>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d114      	bne.n	8004988 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800495e:	4b26      	ldr	r3, [pc, #152]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	4a25      	ldr	r2, [pc, #148]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004964:	f043 0320 	orr.w	r3, r3, #32
 8004968:	6413      	str	r3, [r2, #64]	; 0x40
 800496a:	4b23      	ldr	r3, [pc, #140]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 800496c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800496e:	f003 0320 	and.w	r3, r3, #32
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8004976:	2200      	movs	r2, #0
 8004978:	2100      	movs	r1, #0
 800497a:	2037      	movs	r0, #55	; 0x37
 800497c:	f001 fa8f 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004980:	2037      	movs	r0, #55	; 0x37
 8004982:	f001 faa8 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 8004986:	e032      	b.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM9)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1e      	ldr	r2, [pc, #120]	; (8004a08 <HAL_TIM_Base_MspInit+0x148>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d114      	bne.n	80049bc <HAL_TIM_Base_MspInit+0xfc>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004992:	4b19      	ldr	r3, [pc, #100]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004996:	4a18      	ldr	r2, [pc, #96]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 8004998:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800499c:	6453      	str	r3, [r2, #68]	; 0x44
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049a6:	60fb      	str	r3, [r7, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80049aa:	2200      	movs	r2, #0
 80049ac:	2100      	movs	r1, #0
 80049ae:	2018      	movs	r0, #24
 80049b0:	f001 fa75 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80049b4:	2018      	movs	r0, #24
 80049b6:	f001 fa8e 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 80049ba:	e018      	b.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
  else if(htim_base->Instance==TIM14)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a12      	ldr	r2, [pc, #72]	; (8004a0c <HAL_TIM_Base_MspInit+0x14c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d113      	bne.n	80049ee <HAL_TIM_Base_MspInit+0x12e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80049c6:	4b0c      	ldr	r3, [pc, #48]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4a0b      	ldr	r2, [pc, #44]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80049cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d0:	6413      	str	r3, [r2, #64]	; 0x40
 80049d2:	4b09      	ldr	r3, [pc, #36]	; (80049f8 <HAL_TIM_Base_MspInit+0x138>)
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049da:	60bb      	str	r3, [r7, #8]
 80049dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80049de:	2200      	movs	r2, #0
 80049e0:	2100      	movs	r1, #0
 80049e2:	202d      	movs	r0, #45	; 0x2d
 80049e4:	f001 fa5b 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80049e8:	202d      	movs	r0, #45	; 0x2d
 80049ea:	f001 fa74 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
}
 80049ee:	bf00      	nop
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	40023800 	.word	0x40023800
 80049fc:	40000c00 	.word	0x40000c00
 8004a00:	40001000 	.word	0x40001000
 8004a04:	40001400 	.word	0x40001400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40002000 	.word	0x40002000

08004a10 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b088      	sub	sp, #32
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a18:	f107 030c 	add.w	r3, r7, #12
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	605a      	str	r2, [r3, #4]
 8004a22:	609a      	str	r2, [r3, #8]
 8004a24:	60da      	str	r2, [r3, #12]
 8004a26:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a30:	d11b      	bne.n	8004a6a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a32:	4b10      	ldr	r3, [pc, #64]	; (8004a74 <HAL_TIM_MspPostInit+0x64>)
 8004a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a36:	4a0f      	ldr	r2, [pc, #60]	; (8004a74 <HAL_TIM_MspPostInit+0x64>)
 8004a38:	f043 0301 	orr.w	r3, r3, #1
 8004a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8004a3e:	4b0d      	ldr	r3, [pc, #52]	; (8004a74 <HAL_TIM_MspPostInit+0x64>)
 8004a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a42:	f003 0301 	and.w	r3, r3, #1
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8004a4a:	2320      	movs	r3, #32
 8004a4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a56:	2300      	movs	r3, #0
 8004a58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	4619      	mov	r1, r3
 8004a64:	4804      	ldr	r0, [pc, #16]	; (8004a78 <HAL_TIM_MspPostInit+0x68>)
 8004a66:	f001 faf1 	bl	800604c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004a6a:	bf00      	nop
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}
 8004a72:	bf00      	nop
 8004a74:	40023800 	.word	0x40023800
 8004a78:	40020000 	.word	0x40020000

08004a7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b0ac      	sub	sp, #176	; 0xb0
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
 8004a8c:	605a      	str	r2, [r3, #4]
 8004a8e:	609a      	str	r2, [r3, #8]
 8004a90:	60da      	str	r2, [r3, #12]
 8004a92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a94:	f107 0318 	add.w	r3, r7, #24
 8004a98:	2284      	movs	r2, #132	; 0x84
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f005 f8bd 	bl	8009c1c <memset>
  if(huart->Instance==UART8)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a46      	ldr	r2, [pc, #280]	; (8004bc0 <HAL_UART_MspInit+0x144>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d144      	bne.n	8004b36 <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8004aac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ab0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ab6:	f107 0318 	add.w	r3, r7, #24
 8004aba:	4618      	mov	r0, r3
 8004abc:	f002 f9f0 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d001      	beq.n	8004aca <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004ac6:	f7fe ffc7 	bl	8003a58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004aca:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ace:	4a3d      	ldr	r2, [pc, #244]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004ad0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ad6:	4b3b      	ldr	r3, [pc, #236]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ade:	617b      	str	r3, [r7, #20]
 8004ae0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ae2:	4b38      	ldr	r3, [pc, #224]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae6:	4a37      	ldr	r2, [pc, #220]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004ae8:	f043 0310 	orr.w	r3, r3, #16
 8004aec:	6313      	str	r3, [r2, #48]	; 0x30
 8004aee:	4b35      	ldr	r3, [pc, #212]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af2:	f003 0310 	and.w	r3, r3, #16
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004afa:	2303      	movs	r3, #3
 8004afc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b00:	2302      	movs	r3, #2
 8004b02:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8004b12:	2308      	movs	r3, #8
 8004b14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004b18:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004b1c:	4619      	mov	r1, r3
 8004b1e:	482a      	ldr	r0, [pc, #168]	; (8004bc8 <HAL_UART_MspInit+0x14c>)
 8004b20:	f001 fa94 	bl	800604c <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 8004b24:	2200      	movs	r2, #0
 8004b26:	2100      	movs	r1, #0
 8004b28:	2053      	movs	r0, #83	; 0x53
 8004b2a:	f001 f9b8 	bl	8005e9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8004b2e:	2053      	movs	r0, #83	; 0x53
 8004b30:	f001 f9d1 	bl	8005ed6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8004b34:	e03f      	b.n	8004bb6 <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a24      	ldr	r2, [pc, #144]	; (8004bcc <HAL_UART_MspInit+0x150>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d13a      	bne.n	8004bb6 <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004b40:	2340      	movs	r3, #64	; 0x40
 8004b42:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004b44:	2300      	movs	r3, #0
 8004b46:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004b48:	f107 0318 	add.w	r3, r7, #24
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f002 f9a7 	bl	8006ea0 <HAL_RCCEx_PeriphCLKConfig>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d001      	beq.n	8004b5c <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8004b58:	f7fe ff7e 	bl	8003a58 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004b5c:	4b19      	ldr	r3, [pc, #100]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b62:	f043 0310 	orr.w	r3, r3, #16
 8004b66:	6453      	str	r3, [r2, #68]	; 0x44
 8004b68:	4b16      	ldr	r3, [pc, #88]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6c:	f003 0310 	and.w	r3, r3, #16
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b74:	4b13      	ldr	r3, [pc, #76]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	4a12      	ldr	r2, [pc, #72]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b7a:	f043 0302 	orr.w	r3, r3, #2
 8004b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8004b80:	4b10      	ldr	r3, [pc, #64]	; (8004bc4 <HAL_UART_MspInit+0x148>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	60bb      	str	r3, [r7, #8]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004b8c:	23c0      	movs	r3, #192	; 0xc0
 8004b8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b92:	2302      	movs	r3, #2
 8004b94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ba4:	2307      	movs	r3, #7
 8004ba6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004baa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8004bae:	4619      	mov	r1, r3
 8004bb0:	4807      	ldr	r0, [pc, #28]	; (8004bd0 <HAL_UART_MspInit+0x154>)
 8004bb2:	f001 fa4b 	bl	800604c <HAL_GPIO_Init>
}
 8004bb6:	bf00      	nop
 8004bb8:	37b0      	adds	r7, #176	; 0xb0
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40007c00 	.word	0x40007c00
 8004bc4:	40023800 	.word	0x40023800
 8004bc8:	40021000 	.word	0x40021000
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40020400 	.word	0x40020400

08004bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004bd8:	e7fe      	b.n	8004bd8 <NMI_Handler+0x4>

08004bda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004bde:	e7fe      	b.n	8004bde <HardFault_Handler+0x4>

08004be0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004be0:	b480      	push	{r7}
 8004be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004be4:	e7fe      	b.n	8004be4 <MemManage_Handler+0x4>

08004be6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004be6:	b480      	push	{r7}
 8004be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004bea:	e7fe      	b.n	8004bea <BusFault_Handler+0x4>

08004bec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004bf0:	e7fe      	b.n	8004bf0 <UsageFault_Handler+0x4>

08004bf2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004bf6:	bf00      	nop
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c00:	b480      	push	{r7}
 8004c02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr

08004c0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c12:	bf00      	nop
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c20:	f000 f962 	bl	8004ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c24:	bf00      	nop
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8004c2c:	4802      	ldr	r0, [pc, #8]	; (8004c38 <CAN1_RX0_IRQHandler+0x10>)
 8004c2e:	f000 fe07 	bl	8005840 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004c32:	bf00      	nop
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	2000023c 	.word	0x2000023c

08004c3c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 8004c40:	2040      	movs	r0, #64	; 0x40
 8004c42:	f001 fbfb 	bl	800643c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8004c46:	2080      	movs	r0, #128	; 0x80
 8004c48:	f001 fbf8 	bl	800643c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004c4c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004c50:	f001 fbf4 	bl	800643c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004c54:	bf00      	nop
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8004c5c:	4802      	ldr	r0, [pc, #8]	; (8004c68 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8004c5e:	f002 ffb7 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004c62:	bf00      	nop
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	20000394 	.word	0x20000394

08004c6c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8004c70:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c74:	f001 fbe2 	bl	800643c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(evt_rxpin_Pin);
 8004c78:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004c7c:	f001 fbde 	bl	800643c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004c80:	bf00      	nop
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004c88:	4802      	ldr	r0, [pc, #8]	; (8004c94 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8004c8a:	f002 ffa1 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8004c8e:	bf00      	nop
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200003e0 	.word	0x200003e0

08004c98 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8004c9c:	4802      	ldr	r0, [pc, #8]	; (8004ca8 <TIM5_IRQHandler+0x10>)
 8004c9e:	f002 ff97 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8004ca2:	bf00      	nop
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	200002b0 	.word	0x200002b0

08004cac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004cb0:	4802      	ldr	r0, [pc, #8]	; (8004cbc <TIM6_DAC_IRQHandler+0x10>)
 8004cb2:	f002 ff8d 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004cb6:	bf00      	nop
 8004cb8:	bd80      	pop	{r7, pc}
 8004cba:	bf00      	nop
 8004cbc:	200002fc 	.word	0x200002fc

08004cc0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004cc4:	4802      	ldr	r0, [pc, #8]	; (8004cd0 <TIM7_IRQHandler+0x10>)
 8004cc6:	f002 ff83 	bl	8007bd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004cca:	bf00      	nop
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000348 	.word	0x20000348

08004cd4 <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8004cd8:	4802      	ldr	r0, [pc, #8]	; (8004ce4 <UART8_IRQHandler+0x10>)
 8004cda:	f003 ffeb 	bl	8008cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8004cde:	bf00      	nop
 8004ce0:	bd80      	pop	{r7, pc}
 8004ce2:	bf00      	nop
 8004ce4:	2000042c 	.word	0x2000042c

08004ce8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b086      	sub	sp, #24
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	617b      	str	r3, [r7, #20]
 8004cf8:	e00a      	b.n	8004d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004cfa:	f3af 8000 	nop.w
 8004cfe:	4601      	mov	r1, r0
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	1c5a      	adds	r2, r3, #1
 8004d04:	60ba      	str	r2, [r7, #8]
 8004d06:	b2ca      	uxtb	r2, r1
 8004d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	3301      	adds	r3, #1
 8004d0e:	617b      	str	r3, [r7, #20]
 8004d10:	697a      	ldr	r2, [r7, #20]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	429a      	cmp	r2, r3
 8004d16:	dbf0      	blt.n	8004cfa <_read+0x12>
	}

return len;
 8004d18:	687b      	ldr	r3, [r7, #4]
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}

08004d22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004d22:	b480      	push	{r7}
 8004d24:	b083      	sub	sp, #12
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
	return -1;
 8004d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr

08004d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004d3a:	b480      	push	{r7}
 8004d3c:	b083      	sub	sp, #12
 8004d3e:	af00      	add	r7, sp, #0
 8004d40:	6078      	str	r0, [r7, #4]
 8004d42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d4a:	605a      	str	r2, [r3, #4]
	return 0;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <_isatty>:

int _isatty(int file)
{
 8004d5a:	b480      	push	{r7}
 8004d5c:	b083      	sub	sp, #12
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
	return 1;
 8004d62:	2301      	movs	r3, #1
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	370c      	adds	r7, #12
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
	return 0;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
	...

08004d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b086      	sub	sp, #24
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004d94:	4a14      	ldr	r2, [pc, #80]	; (8004de8 <_sbrk+0x5c>)
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <_sbrk+0x60>)
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004da0:	4b13      	ldr	r3, [pc, #76]	; (8004df0 <_sbrk+0x64>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d102      	bne.n	8004dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004da8:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <_sbrk+0x64>)
 8004daa:	4a12      	ldr	r2, [pc, #72]	; (8004df4 <_sbrk+0x68>)
 8004dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <_sbrk+0x64>)
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4413      	add	r3, r2
 8004db6:	693a      	ldr	r2, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d207      	bcs.n	8004dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004dbc:	f004 ff04 	bl	8009bc8 <__errno>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	220c      	movs	r2, #12
 8004dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dca:	e009      	b.n	8004de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004dcc:	4b08      	ldr	r3, [pc, #32]	; (8004df0 <_sbrk+0x64>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004dd2:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <_sbrk+0x64>)
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4413      	add	r3, r2
 8004dda:	4a05      	ldr	r2, [pc, #20]	; (8004df0 <_sbrk+0x64>)
 8004ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004dde:	68fb      	ldr	r3, [r7, #12]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3718      	adds	r7, #24
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	20050000 	.word	0x20050000
 8004dec:	00000400 	.word	0x00000400
 8004df0:	20000534 	.word	0x20000534
 8004df4:	20000550 	.word	0x20000550

08004df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004dfc:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <SystemInit+0x20>)
 8004dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e02:	4a05      	ldr	r2, [pc, #20]	; (8004e18 <SystemInit+0x20>)
 8004e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004e0c:	bf00      	nop
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop
 8004e18:	e000ed00 	.word	0xe000ed00

08004e1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004e1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004e54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004e20:	480d      	ldr	r0, [pc, #52]	; (8004e58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004e22:	490e      	ldr	r1, [pc, #56]	; (8004e5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004e24:	4a0e      	ldr	r2, [pc, #56]	; (8004e60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004e26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004e28:	e002      	b.n	8004e30 <LoopCopyDataInit>

08004e2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004e2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004e2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004e2e:	3304      	adds	r3, #4

08004e30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004e30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004e32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004e34:	d3f9      	bcc.n	8004e2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004e36:	4a0b      	ldr	r2, [pc, #44]	; (8004e64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004e38:	4c0b      	ldr	r4, [pc, #44]	; (8004e68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004e3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004e3c:	e001      	b.n	8004e42 <LoopFillZerobss>

08004e3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004e3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004e40:	3204      	adds	r2, #4

08004e42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004e42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004e44:	d3fb      	bcc.n	8004e3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004e46:	f7ff ffd7 	bl	8004df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004e4a:	f004 fec3 	bl	8009bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004e4e:	f7fe fa0d 	bl	800326c <main>
  bx  lr    
 8004e52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004e54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8004e58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004e5c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8004e60:	0800ada0 	.word	0x0800ada0
  ldr r2, =_sbss
 8004e64:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8004e68:	2000054c 	.word	0x2000054c

08004e6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004e6c:	e7fe      	b.n	8004e6c <ADC_IRQHandler>

08004e6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004e72:	2003      	movs	r0, #3
 8004e74:	f001 f808 	bl	8005e88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004e78:	200f      	movs	r0, #15
 8004e7a:	f000 f805 	bl	8004e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004e7e:	f7ff fcaf 	bl	80047e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004e90:	4b12      	ldr	r3, [pc, #72]	; (8004edc <HAL_InitTick+0x54>)
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	4b12      	ldr	r3, [pc, #72]	; (8004ee0 <HAL_InitTick+0x58>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	4619      	mov	r1, r3
 8004e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 f831 	bl	8005f0e <HAL_SYSTICK_Config>
 8004eac:	4603      	mov	r3, r0
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d001      	beq.n	8004eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e00e      	b.n	8004ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b0f      	cmp	r3, #15
 8004eba:	d80a      	bhi.n	8004ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	6879      	ldr	r1, [r7, #4]
 8004ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec4:	f000 ffeb 	bl	8005e9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004ec8:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <HAL_InitTick+0x5c>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	e000      	b.n	8004ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	20000010 	.word	0x20000010
 8004ee0:	20000018 	.word	0x20000018
 8004ee4:	20000014 	.word	0x20000014

08004ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004eec:	4b06      	ldr	r3, [pc, #24]	; (8004f08 <HAL_IncTick+0x20>)
 8004eee:	781b      	ldrb	r3, [r3, #0]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_IncTick+0x24>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4413      	add	r3, r2
 8004ef8:	4a04      	ldr	r2, [pc, #16]	; (8004f0c <HAL_IncTick+0x24>)
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	20000018 	.word	0x20000018
 8004f0c:	20000538 	.word	0x20000538

08004f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004f10:	b480      	push	{r7}
 8004f12:	af00      	add	r7, sp, #0
  return uwTick;
 8004f14:	4b03      	ldr	r3, [pc, #12]	; (8004f24 <HAL_GetTick+0x14>)
 8004f16:	681b      	ldr	r3, [r3, #0]
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	20000538 	.word	0x20000538

08004f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004f30:	f7ff ffee 	bl	8004f10 <HAL_GetTick>
 8004f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d005      	beq.n	8004f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004f42:	4b0a      	ldr	r3, [pc, #40]	; (8004f6c <HAL_Delay+0x44>)
 8004f44:	781b      	ldrb	r3, [r3, #0]
 8004f46:	461a      	mov	r2, r3
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004f4e:	bf00      	nop
 8004f50:	f7ff ffde 	bl	8004f10 <HAL_GetTick>
 8004f54:	4602      	mov	r2, r0
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	1ad3      	subs	r3, r2, r3
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d8f7      	bhi.n	8004f50 <HAL_Delay+0x28>
  {
  }
}
 8004f60:	bf00      	nop
 8004f62:	bf00      	nop
 8004f64:	3710      	adds	r7, #16
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}
 8004f6a:	bf00      	nop
 8004f6c:	20000018 	.word	0x20000018

08004f70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d101      	bne.n	8004f82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	e0ed      	b.n	800515e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d102      	bne.n	8004f94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff fc4a 	bl	8004828 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa4:	f7ff ffb4 	bl	8004f10 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004faa:	e012      	b.n	8004fd2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004fac:	f7ff ffb0 	bl	8004f10 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	2b0a      	cmp	r3, #10
 8004fb8:	d90b      	bls.n	8004fd2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fbe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2205      	movs	r2, #5
 8004fca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e0c5      	b.n	800515e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0301 	and.w	r3, r3, #1
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d0e5      	beq.n	8004fac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f022 0202 	bic.w	r2, r2, #2
 8004fee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ff0:	f7ff ff8e 	bl	8004f10 <HAL_GetTick>
 8004ff4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ff6:	e012      	b.n	800501e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ff8:	f7ff ff8a 	bl	8004f10 <HAL_GetTick>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1ad3      	subs	r3, r2, r3
 8005002:	2b0a      	cmp	r3, #10
 8005004:	d90b      	bls.n	800501e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800500a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2205      	movs	r2, #5
 8005016:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800501a:	2301      	movs	r3, #1
 800501c:	e09f      	b.n	800515e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f003 0302 	and.w	r3, r3, #2
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e5      	bne.n	8004ff8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	7e1b      	ldrb	r3, [r3, #24]
 8005030:	2b01      	cmp	r3, #1
 8005032:	d108      	bne.n	8005046 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005042:	601a      	str	r2, [r3, #0]
 8005044:	e007      	b.n	8005056 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	7e5b      	ldrb	r3, [r3, #25]
 800505a:	2b01      	cmp	r3, #1
 800505c:	d108      	bne.n	8005070 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800506c:	601a      	str	r2, [r3, #0]
 800506e:	e007      	b.n	8005080 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800507e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	7e9b      	ldrb	r3, [r3, #26]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d108      	bne.n	800509a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f042 0220 	orr.w	r2, r2, #32
 8005096:	601a      	str	r2, [r3, #0]
 8005098:	e007      	b.n	80050aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	681a      	ldr	r2, [r3, #0]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f022 0220 	bic.w	r2, r2, #32
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	7edb      	ldrb	r3, [r3, #27]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d108      	bne.n	80050c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0210 	bic.w	r2, r2, #16
 80050c0:	601a      	str	r2, [r3, #0]
 80050c2:	e007      	b.n	80050d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f042 0210 	orr.w	r2, r2, #16
 80050d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	7f1b      	ldrb	r3, [r3, #28]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d108      	bne.n	80050ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	681a      	ldr	r2, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f042 0208 	orr.w	r2, r2, #8
 80050ea:	601a      	str	r2, [r3, #0]
 80050ec:	e007      	b.n	80050fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681a      	ldr	r2, [r3, #0]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f022 0208 	bic.w	r2, r2, #8
 80050fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	7f5b      	ldrb	r3, [r3, #29]
 8005102:	2b01      	cmp	r3, #1
 8005104:	d108      	bne.n	8005118 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0204 	orr.w	r2, r2, #4
 8005114:	601a      	str	r2, [r3, #0]
 8005116:	e007      	b.n	8005128 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	681a      	ldr	r2, [r3, #0]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f022 0204 	bic.w	r2, r2, #4
 8005126:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	689a      	ldr	r2, [r3, #8]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	68db      	ldr	r3, [r3, #12]
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	691b      	ldr	r3, [r3, #16]
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	ea42 0103 	orr.w	r1, r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	1e5a      	subs	r2, r3, #1
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	430a      	orrs	r2, r1
 800514c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	3710      	adds	r7, #16
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8005168:	b480      	push	{r7}
 800516a:	b087      	sub	sp, #28
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800517e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8005180:	7cfb      	ldrb	r3, [r7, #19]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d003      	beq.n	800518e <HAL_CAN_ConfigFilter+0x26>
 8005186:	7cfb      	ldrb	r3, [r7, #19]
 8005188:	2b02      	cmp	r3, #2
 800518a:	f040 80be 	bne.w	800530a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_CAN_ConfigFilter+0x1bc>)
 8005190:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005198:	f043 0201 	orr.w	r2, r3, #1
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80051a8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051bc:	021b      	lsls	r3, r3, #8
 80051be:	431a      	orrs	r2, r3
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	fa02 f303 	lsl.w	r3, r2, r3
 80051d4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	43db      	mvns	r3, r3
 80051e0:	401a      	ands	r2, r3
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	69db      	ldr	r3, [r3, #28]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d123      	bne.n	8005238 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	43db      	mvns	r3, r3
 80051fa:	401a      	ands	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800520e:	683a      	ldr	r2, [r7, #0]
 8005210:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005212:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	3248      	adds	r2, #72	; 0x48
 8005218:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800522c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	3348      	adds	r3, #72	; 0x48
 8005232:	00db      	lsls	r3, r3, #3
 8005234:	440b      	add	r3, r1
 8005236:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	69db      	ldr	r3, [r3, #28]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d122      	bne.n	8005286 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	431a      	orrs	r2, r3
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800525c:	683a      	ldr	r2, [r7, #0]
 800525e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005260:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	3248      	adds	r2, #72	; 0x48
 8005266:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800527a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	3348      	adds	r3, #72	; 0x48
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d109      	bne.n	80052a2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	43db      	mvns	r3, r3
 8005298:	401a      	ands	r2, r3
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80052a0:	e007      	b.n	80052b2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	431a      	orrs	r2, r3
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d109      	bne.n	80052ce <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	43db      	mvns	r3, r3
 80052c4:	401a      	ands	r2, r3
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80052cc:	e007      	b.n	80052de <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	431a      	orrs	r2, r3
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d107      	bne.n	80052f6 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	431a      	orrs	r2, r3
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80052fc:	f023 0201 	bic.w	r2, r3, #1
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8005306:	2300      	movs	r3, #0
 8005308:	e006      	b.n	8005318 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800530e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005316:	2301      	movs	r3, #1
  }
}
 8005318:	4618      	mov	r0, r3
 800531a:	371c      	adds	r7, #28
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	40006400 	.word	0x40006400

08005328 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	2b01      	cmp	r3, #1
 800533a:	d12e      	bne.n	800539a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005354:	f7ff fddc 	bl	8004f10 <HAL_GetTick>
 8005358:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800535a:	e012      	b.n	8005382 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800535c:	f7ff fdd8 	bl	8004f10 <HAL_GetTick>
 8005360:	4602      	mov	r2, r0
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	2b0a      	cmp	r3, #10
 8005368:	d90b      	bls.n	8005382 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2205      	movs	r2, #5
 800537a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800537e:	2301      	movs	r3, #1
 8005380:	e012      	b.n	80053a8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	f003 0301 	and.w	r3, r3, #1
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e5      	bne.n	800535c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005396:	2300      	movs	r3, #0
 8005398:	e006      	b.n	80053a8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800539e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
  }
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3710      	adds	r7, #16
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b089      	sub	sp, #36	; 0x24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	60f8      	str	r0, [r7, #12]
 80053b8:	60b9      	str	r1, [r7, #8]
 80053ba:	607a      	str	r2, [r7, #4]
 80053bc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053c4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80053ce:	7ffb      	ldrb	r3, [r7, #31]
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d003      	beq.n	80053dc <HAL_CAN_AddTxMessage+0x2c>
 80053d4:	7ffb      	ldrb	r3, [r7, #31]
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	f040 80b8 	bne.w	800554c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d105      	bne.n	80053fc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80053f0:	69bb      	ldr	r3, [r7, #24]
 80053f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80a0 	beq.w	800553c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	0e1b      	lsrs	r3, r3, #24
 8005400:	f003 0303 	and.w	r3, r3, #3
 8005404:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d907      	bls.n	800541c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e09e      	b.n	800555a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800541c:	2201      	movs	r2, #1
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	409a      	lsls	r2, r3
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d10d      	bne.n	800544a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005434:	68bb      	ldr	r3, [r7, #8]
 8005436:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005438:	68f9      	ldr	r1, [r7, #12]
 800543a:	6809      	ldr	r1, [r1, #0]
 800543c:	431a      	orrs	r2, r3
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	3318      	adds	r3, #24
 8005442:	011b      	lsls	r3, r3, #4
 8005444:	440b      	add	r3, r1
 8005446:	601a      	str	r2, [r3, #0]
 8005448:	e00f      	b.n	800546a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005454:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800545a:	68f9      	ldr	r1, [r7, #12]
 800545c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800545e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	3318      	adds	r3, #24
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	440b      	add	r3, r1
 8005468:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6819      	ldr	r1, [r3, #0]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	691a      	ldr	r2, [r3, #16]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	3318      	adds	r3, #24
 8005476:	011b      	lsls	r3, r3, #4
 8005478:	440b      	add	r3, r1
 800547a:	3304      	adds	r3, #4
 800547c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	7d1b      	ldrb	r3, [r3, #20]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d111      	bne.n	80054aa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3318      	adds	r3, #24
 800548e:	011b      	lsls	r3, r3, #4
 8005490:	4413      	add	r3, r2
 8005492:	3304      	adds	r3, #4
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	6811      	ldr	r1, [r2, #0]
 800549a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	3318      	adds	r3, #24
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	440b      	add	r3, r1
 80054a6:	3304      	adds	r3, #4
 80054a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3307      	adds	r3, #7
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	061a      	lsls	r2, r3, #24
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	3306      	adds	r3, #6
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	041b      	lsls	r3, r3, #16
 80054ba:	431a      	orrs	r2, r3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3305      	adds	r3, #5
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	021b      	lsls	r3, r3, #8
 80054c4:	4313      	orrs	r3, r2
 80054c6:	687a      	ldr	r2, [r7, #4]
 80054c8:	3204      	adds	r2, #4
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	4610      	mov	r0, r2
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6811      	ldr	r1, [r2, #0]
 80054d2:	ea43 0200 	orr.w	r2, r3, r0
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	011b      	lsls	r3, r3, #4
 80054da:	440b      	add	r3, r1
 80054dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80054e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	3303      	adds	r3, #3
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	061a      	lsls	r2, r3, #24
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	3302      	adds	r3, #2
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	041b      	lsls	r3, r3, #16
 80054f2:	431a      	orrs	r2, r3
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	3301      	adds	r3, #1
 80054f8:	781b      	ldrb	r3, [r3, #0]
 80054fa:	021b      	lsls	r3, r3, #8
 80054fc:	4313      	orrs	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	7812      	ldrb	r2, [r2, #0]
 8005502:	4610      	mov	r0, r2
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	6811      	ldr	r1, [r2, #0]
 8005508:	ea43 0200 	orr.w	r2, r3, r0
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	440b      	add	r3, r1
 8005512:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005516:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	3318      	adds	r3, #24
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	4413      	add	r3, r2
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	6811      	ldr	r1, [r2, #0]
 800552a:	f043 0201 	orr.w	r2, r3, #1
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	3318      	adds	r3, #24
 8005532:	011b      	lsls	r3, r3, #4
 8005534:	440b      	add	r3, r1
 8005536:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	e00e      	b.n	800555a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8005548:	2301      	movs	r3, #1
 800554a:	e006      	b.n	800555a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005550:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
  }
}
 800555a:	4618      	mov	r0, r3
 800555c:	3724      	adds	r7, #36	; 0x24
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr

08005566 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800556e:	2300      	movs	r3, #0
 8005570:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005578:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800557a:	7afb      	ldrb	r3, [r7, #11]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d002      	beq.n	8005586 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8005580:	7afb      	ldrb	r3, [r7, #11]
 8005582:	2b02      	cmp	r3, #2
 8005584:	d11d      	bne.n	80055c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3301      	adds	r3, #1
 8005598:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	3301      	adds	r3, #1
 80055ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d002      	beq.n	80055c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	3301      	adds	r3, #1
 80055c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80055c2:	68fb      	ldr	r3, [r7, #12]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ce:	4770      	bx	lr

080055d0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
 80055dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80055e6:	7dfb      	ldrb	r3, [r7, #23]
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d003      	beq.n	80055f4 <HAL_CAN_GetRxMessage+0x24>
 80055ec:	7dfb      	ldrb	r3, [r7, #23]
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	f040 80f3 	bne.w	80057da <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d10e      	bne.n	8005618 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0303 	and.w	r3, r3, #3
 8005604:	2b00      	cmp	r3, #0
 8005606:	d116      	bne.n	8005636 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e0e7      	b.n	80057e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b00      	cmp	r3, #0
 8005624:	d107      	bne.n	8005636 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800562a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e0d8      	b.n	80057e8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681a      	ldr	r2, [r3, #0]
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	331b      	adds	r3, #27
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	4413      	add	r3, r2
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0204 	and.w	r2, r3, #4
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	331b      	adds	r3, #27
 800565c:	011b      	lsls	r3, r3, #4
 800565e:	4413      	add	r3, r2
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	0d5b      	lsrs	r3, r3, #21
 8005664:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	601a      	str	r2, [r3, #0]
 800566c:	e00b      	b.n	8005686 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	331b      	adds	r3, #27
 8005676:	011b      	lsls	r3, r3, #4
 8005678:	4413      	add	r3, r2
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	08db      	lsrs	r3, r3, #3
 800567e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	331b      	adds	r3, #27
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	4413      	add	r3, r2
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0202 	and.w	r2, r3, #2
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	331b      	adds	r3, #27
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	4413      	add	r3, r2
 80056a8:	3304      	adds	r3, #4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 020f 	and.w	r2, r3, #15
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	331b      	adds	r3, #27
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	4413      	add	r3, r2
 80056c0:	3304      	adds	r3, #4
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	0a1b      	lsrs	r3, r3, #8
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681a      	ldr	r2, [r3, #0]
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	331b      	adds	r3, #27
 80056d4:	011b      	lsls	r3, r3, #4
 80056d6:	4413      	add	r3, r2
 80056d8:	3304      	adds	r3, #4
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	0c1b      	lsrs	r3, r3, #16
 80056de:	b29a      	uxth	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	4413      	add	r3, r2
 8005704:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	0a1a      	lsrs	r2, r3, #8
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	3301      	adds	r3, #1
 8005710:	b2d2      	uxtb	r2, r2
 8005712:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	011b      	lsls	r3, r3, #4
 800571c:	4413      	add	r3, r2
 800571e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	0c1a      	lsrs	r2, r3, #16
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	3302      	adds	r3, #2
 800572a:	b2d2      	uxtb	r2, r2
 800572c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681a      	ldr	r2, [r3, #0]
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	4413      	add	r3, r2
 8005738:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	0e1a      	lsrs	r2, r3, #24
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	3303      	adds	r3, #3
 8005744:	b2d2      	uxtb	r2, r2
 8005746:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	4413      	add	r3, r2
 8005752:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	3304      	adds	r3, #4
 800575c:	b2d2      	uxtb	r2, r2
 800575e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	011b      	lsls	r3, r3, #4
 8005768:	4413      	add	r3, r2
 800576a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	0a1a      	lsrs	r2, r3, #8
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	3305      	adds	r3, #5
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	011b      	lsls	r3, r3, #4
 8005782:	4413      	add	r3, r2
 8005784:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	0c1a      	lsrs	r2, r3, #16
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	3306      	adds	r3, #6
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	011b      	lsls	r3, r3, #4
 800579c:	4413      	add	r3, r2
 800579e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	0e1a      	lsrs	r2, r3, #24
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	3307      	adds	r3, #7
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d108      	bne.n	80057c6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68da      	ldr	r2, [r3, #12]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f042 0220 	orr.w	r2, r2, #32
 80057c2:	60da      	str	r2, [r3, #12]
 80057c4:	e007      	b.n	80057d6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f042 0220 	orr.w	r2, r2, #32
 80057d4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80057d6:	2300      	movs	r3, #0
 80057d8:	e006      	b.n	80057e8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057de:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
  }
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	371c      	adds	r7, #28
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005804:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005806:	7bfb      	ldrb	r3, [r7, #15]
 8005808:	2b01      	cmp	r3, #1
 800580a:	d002      	beq.n	8005812 <HAL_CAN_ActivateNotification+0x1e>
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	2b02      	cmp	r3, #2
 8005810:	d109      	bne.n	8005826 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6959      	ldr	r1, [r3, #20]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	683a      	ldr	r2, [r7, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005822:	2300      	movs	r3, #0
 8005824:	e006      	b.n	8005834 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
  }
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b08a      	sub	sp, #40	; 0x28
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005848:	2300      	movs	r3, #0
 800584a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	691b      	ldr	r3, [r3, #16]
 8005872:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f003 0301 	and.w	r3, r3, #1
 8005882:	2b00      	cmp	r3, #0
 8005884:	d07c      	beq.n	8005980 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b00      	cmp	r3, #0
 800588e:	d023      	beq.n	80058d8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2201      	movs	r2, #1
 8005896:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	f003 0302 	and.w	r3, r3, #2
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f983 	bl	8005bae <HAL_CAN_TxMailbox0CompleteCallback>
 80058a8:	e016      	b.n	80058d8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	f003 0304 	and.w	r3, r3, #4
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d004      	beq.n	80058be <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80058b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
 80058bc:	e00c      	b.n	80058d8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d004      	beq.n	80058d2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80058c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058ce:	627b      	str	r3, [r7, #36]	; 0x24
 80058d0:	e002      	b.n	80058d8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f989 	bl	8005bea <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d024      	beq.n	800592c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80058ea:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80058ec:	69bb      	ldr	r3, [r7, #24]
 80058ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d003      	beq.n	80058fe <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f963 	bl	8005bc2 <HAL_CAN_TxMailbox1CompleteCallback>
 80058fc:	e016      	b.n	800592c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005904:	2b00      	cmp	r3, #0
 8005906:	d004      	beq.n	8005912 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
 8005910:	e00c      	b.n	800592c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005912:	69bb      	ldr	r3, [r7, #24]
 8005914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
 8005924:	e002      	b.n	800592c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 f969 	bl	8005bfe <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d024      	beq.n	8005980 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800593e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005946:	2b00      	cmp	r3, #0
 8005948:	d003      	beq.n	8005952 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 f943 	bl	8005bd6 <HAL_CAN_TxMailbox2CompleteCallback>
 8005950:	e016      	b.n	8005980 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005958:	2b00      	cmp	r3, #0
 800595a:	d004      	beq.n	8005966 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800595c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800595e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
 8005964:	e00c      	b.n	8005980 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8005970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005976:	627b      	str	r3, [r7, #36]	; 0x24
 8005978:	e002      	b.n	8005980 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f000 f949 	bl	8005c12 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005980:	6a3b      	ldr	r3, [r7, #32]
 8005982:	f003 0308 	and.w	r3, r3, #8
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 0310 	and.w	r3, r3, #16
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005996:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800599a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	2210      	movs	r2, #16
 80059a2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	f003 0304 	and.w	r3, r3, #4
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00b      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d006      	beq.n	80059c6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2208      	movs	r2, #8
 80059be:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f930 	bl	8005c26 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	f003 0302 	and.w	r3, r3, #2
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d009      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68db      	ldr	r3, [r3, #12]
 80059d6:	f003 0303 	and.w	r3, r3, #3
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d002      	beq.n	80059e4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f7fd fb74 	bl	80030cc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80059e4:	6a3b      	ldr	r3, [r7, #32]
 80059e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d00c      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	f003 0310 	and.w	r3, r3, #16
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d007      	beq.n	8005a08 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80059f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	2210      	movs	r2, #16
 8005a06:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005a08:	6a3b      	ldr	r3, [r7, #32]
 8005a0a:	f003 0320 	and.w	r3, r3, #32
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d00b      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f003 0308 	and.w	r3, r3, #8
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d006      	beq.n	8005a2a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2208      	movs	r2, #8
 8005a22:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 f912 	bl	8005c4e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	f003 0303 	and.w	r3, r3, #3
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d002      	beq.n	8005a48 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f000 f8f9 	bl	8005c3a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005a48:	6a3b      	ldr	r3, [r7, #32]
 8005a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d00b      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005a52:	69fb      	ldr	r3, [r7, #28]
 8005a54:	f003 0310 	and.w	r3, r3, #16
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d006      	beq.n	8005a6a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2210      	movs	r2, #16
 8005a62:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f8fc 	bl	8005c62 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005a6a:	6a3b      	ldr	r3, [r7, #32]
 8005a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00b      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005a74:	69fb      	ldr	r3, [r7, #28]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d006      	beq.n	8005a8c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2208      	movs	r2, #8
 8005a84:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f8f5 	bl	8005c76 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d07b      	beq.n	8005b8e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f003 0304 	and.w	r3, r3, #4
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d072      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d008      	beq.n	8005abc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab6:	f043 0301 	orr.w	r3, r3, #1
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005abc:	6a3b      	ldr	r3, [r7, #32]
 8005abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d008      	beq.n	8005ad8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad2:	f043 0302 	orr.w	r3, r3, #2
 8005ad6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d008      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	f043 0304 	orr.w	r3, r3, #4
 8005af2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d043      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d03e      	beq.n	8005b86 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b0e:	2b60      	cmp	r3, #96	; 0x60
 8005b10:	d02b      	beq.n	8005b6a <HAL_CAN_IRQHandler+0x32a>
 8005b12:	2b60      	cmp	r3, #96	; 0x60
 8005b14:	d82e      	bhi.n	8005b74 <HAL_CAN_IRQHandler+0x334>
 8005b16:	2b50      	cmp	r3, #80	; 0x50
 8005b18:	d022      	beq.n	8005b60 <HAL_CAN_IRQHandler+0x320>
 8005b1a:	2b50      	cmp	r3, #80	; 0x50
 8005b1c:	d82a      	bhi.n	8005b74 <HAL_CAN_IRQHandler+0x334>
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d019      	beq.n	8005b56 <HAL_CAN_IRQHandler+0x316>
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d826      	bhi.n	8005b74 <HAL_CAN_IRQHandler+0x334>
 8005b26:	2b30      	cmp	r3, #48	; 0x30
 8005b28:	d010      	beq.n	8005b4c <HAL_CAN_IRQHandler+0x30c>
 8005b2a:	2b30      	cmp	r3, #48	; 0x30
 8005b2c:	d822      	bhi.n	8005b74 <HAL_CAN_IRQHandler+0x334>
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d002      	beq.n	8005b38 <HAL_CAN_IRQHandler+0x2f8>
 8005b32:	2b20      	cmp	r3, #32
 8005b34:	d005      	beq.n	8005b42 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005b36:	e01d      	b.n	8005b74 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3a:	f043 0308 	orr.w	r3, r3, #8
 8005b3e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b40:	e019      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	f043 0310 	orr.w	r3, r3, #16
 8005b48:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b4a:	e014      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	f043 0320 	orr.w	r3, r3, #32
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b54:	e00f      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b5e:	e00a      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8005b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b68:	e005      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005b72:	e000      	b.n	8005b76 <HAL_CAN_IRQHandler+0x336>
            break;
 8005b74:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	699a      	ldr	r2, [r3, #24]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005b84:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d008      	beq.n	8005ba6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f872 	bl	8005c8a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005ba6:	bf00      	nop
 8005ba8:	3728      	adds	r7, #40	; 0x28
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bae:	b480      	push	{r7}
 8005bb0:	b083      	sub	sp, #12
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005bb6:	bf00      	nop
 8005bb8:	370c      	adds	r7, #12
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b083      	sub	sp, #12
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8005bca:	bf00      	nop
 8005bcc:	370c      	adds	r7, #12
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005bde:	bf00      	nop
 8005be0:	370c      	adds	r7, #12
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr

08005bea <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bea:	b480      	push	{r7}
 8005bec:	b083      	sub	sp, #12
 8005bee:	af00      	add	r7, sp, #0
 8005bf0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005bf2:	bf00      	nop
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr

08005c12 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b083      	sub	sp, #12
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005c1a:	bf00      	nop
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c26:	b480      	push	{r7}
 8005c28:	b083      	sub	sp, #12
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005c2e:	bf00      	nop
 8005c30:	370c      	adds	r7, #12
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr

08005c4e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005c4e:	b480      	push	{r7}
 8005c50:	b083      	sub	sp, #12
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005c56:	bf00      	nop
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005c62:	b480      	push	{r7}
 8005c64:	b083      	sub	sp, #12
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b083      	sub	sp, #12
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005c7e:	bf00      	nop
 8005c80:	370c      	adds	r7, #12
 8005c82:	46bd      	mov	sp, r7
 8005c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c88:	4770      	bx	lr

08005c8a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005c8a:	b480      	push	{r7}
 8005c8c:	b083      	sub	sp, #12
 8005c8e:	af00      	add	r7, sp, #0
 8005c90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005c92:	bf00      	nop
 8005c94:	370c      	adds	r7, #12
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
	...

08005ca0 <__NVIC_SetPriorityGrouping>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b085      	sub	sp, #20
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f003 0307 	and.w	r3, r3, #7
 8005cae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005cb0:	4b0b      	ldr	r3, [pc, #44]	; (8005ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005cb6:	68ba      	ldr	r2, [r7, #8]
 8005cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005cce:	4a04      	ldr	r2, [pc, #16]	; (8005ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	60d3      	str	r3, [r2, #12]
}
 8005cd4:	bf00      	nop
 8005cd6:	3714      	adds	r7, #20
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr
 8005ce0:	e000ed00 	.word	0xe000ed00
 8005ce4:	05fa0000 	.word	0x05fa0000

08005ce8 <__NVIC_GetPriorityGrouping>:
{
 8005ce8:	b480      	push	{r7}
 8005cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005cec:	4b04      	ldr	r3, [pc, #16]	; (8005d00 <__NVIC_GetPriorityGrouping+0x18>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0a1b      	lsrs	r3, r3, #8
 8005cf2:	f003 0307 	and.w	r3, r3, #7
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfe:	4770      	bx	lr
 8005d00:	e000ed00 	.word	0xe000ed00

08005d04 <__NVIC_EnableIRQ>:
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	db0b      	blt.n	8005d2e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	f003 021f 	and.w	r2, r3, #31
 8005d1c:	4907      	ldr	r1, [pc, #28]	; (8005d3c <__NVIC_EnableIRQ+0x38>)
 8005d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2001      	movs	r0, #1
 8005d26:	fa00 f202 	lsl.w	r2, r0, r2
 8005d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005d2e:	bf00      	nop
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	e000e100 	.word	0xe000e100

08005d40 <__NVIC_DisableIRQ>:
{
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	4603      	mov	r3, r0
 8005d48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	db12      	blt.n	8005d78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005d52:	79fb      	ldrb	r3, [r7, #7]
 8005d54:	f003 021f 	and.w	r2, r3, #31
 8005d58:	490a      	ldr	r1, [pc, #40]	; (8005d84 <__NVIC_DisableIRQ+0x44>)
 8005d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2001      	movs	r0, #1
 8005d62:	fa00 f202 	lsl.w	r2, r0, r2
 8005d66:	3320      	adds	r3, #32
 8005d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d6c:	f3bf 8f4f 	dsb	sy
}
 8005d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005d72:	f3bf 8f6f 	isb	sy
}
 8005d76:	bf00      	nop
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000e100 	.word	0xe000e100

08005d88 <__NVIC_SetPriority>:
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b083      	sub	sp, #12
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	4603      	mov	r3, r0
 8005d90:	6039      	str	r1, [r7, #0]
 8005d92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005d94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	db0a      	blt.n	8005db2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	b2da      	uxtb	r2, r3
 8005da0:	490c      	ldr	r1, [pc, #48]	; (8005dd4 <__NVIC_SetPriority+0x4c>)
 8005da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005da6:	0112      	lsls	r2, r2, #4
 8005da8:	b2d2      	uxtb	r2, r2
 8005daa:	440b      	add	r3, r1
 8005dac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005db0:	e00a      	b.n	8005dc8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	b2da      	uxtb	r2, r3
 8005db6:	4908      	ldr	r1, [pc, #32]	; (8005dd8 <__NVIC_SetPriority+0x50>)
 8005db8:	79fb      	ldrb	r3, [r7, #7]
 8005dba:	f003 030f 	and.w	r3, r3, #15
 8005dbe:	3b04      	subs	r3, #4
 8005dc0:	0112      	lsls	r2, r2, #4
 8005dc2:	b2d2      	uxtb	r2, r2
 8005dc4:	440b      	add	r3, r1
 8005dc6:	761a      	strb	r2, [r3, #24]
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr
 8005dd4:	e000e100 	.word	0xe000e100
 8005dd8:	e000ed00 	.word	0xe000ed00

08005ddc <NVIC_EncodePriority>:
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b089      	sub	sp, #36	; 0x24
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005df0:	69fb      	ldr	r3, [r7, #28]
 8005df2:	f1c3 0307 	rsb	r3, r3, #7
 8005df6:	2b04      	cmp	r3, #4
 8005df8:	bf28      	it	cs
 8005dfa:	2304      	movcs	r3, #4
 8005dfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005dfe:	69fb      	ldr	r3, [r7, #28]
 8005e00:	3304      	adds	r3, #4
 8005e02:	2b06      	cmp	r3, #6
 8005e04:	d902      	bls.n	8005e0c <NVIC_EncodePriority+0x30>
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	3b03      	subs	r3, #3
 8005e0a:	e000      	b.n	8005e0e <NVIC_EncodePriority+0x32>
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e10:	f04f 32ff 	mov.w	r2, #4294967295
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	fa02 f303 	lsl.w	r3, r2, r3
 8005e1a:	43da      	mvns	r2, r3
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	401a      	ands	r2, r3
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e24:	f04f 31ff 	mov.w	r1, #4294967295
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e2e:	43d9      	mvns	r1, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e34:	4313      	orrs	r3, r2
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3724      	adds	r7, #36	; 0x24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	3b01      	subs	r3, #1
 8005e50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005e54:	d301      	bcc.n	8005e5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005e56:	2301      	movs	r3, #1
 8005e58:	e00f      	b.n	8005e7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <SysTick_Config+0x40>)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005e62:	210f      	movs	r1, #15
 8005e64:	f04f 30ff 	mov.w	r0, #4294967295
 8005e68:	f7ff ff8e 	bl	8005d88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005e6c:	4b05      	ldr	r3, [pc, #20]	; (8005e84 <SysTick_Config+0x40>)
 8005e6e:	2200      	movs	r2, #0
 8005e70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005e72:	4b04      	ldr	r3, [pc, #16]	; (8005e84 <SysTick_Config+0x40>)
 8005e74:	2207      	movs	r2, #7
 8005e76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3708      	adds	r7, #8
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	e000e010 	.word	0xe000e010

08005e88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f7ff ff05 	bl	8005ca0 <__NVIC_SetPriorityGrouping>
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}

08005e9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b086      	sub	sp, #24
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	60b9      	str	r1, [r7, #8]
 8005ea8:	607a      	str	r2, [r7, #4]
 8005eaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005eac:	2300      	movs	r3, #0
 8005eae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005eb0:	f7ff ff1a 	bl	8005ce8 <__NVIC_GetPriorityGrouping>
 8005eb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005eb6:	687a      	ldr	r2, [r7, #4]
 8005eb8:	68b9      	ldr	r1, [r7, #8]
 8005eba:	6978      	ldr	r0, [r7, #20]
 8005ebc:	f7ff ff8e 	bl	8005ddc <NVIC_EncodePriority>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f7ff ff5d 	bl	8005d88 <__NVIC_SetPriority>
}
 8005ece:	bf00      	nop
 8005ed0:	3718      	adds	r7, #24
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	4603      	mov	r3, r0
 8005ede:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f7ff ff0d 	bl	8005d04 <__NVIC_EnableIRQ>
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}

08005ef2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b082      	sub	sp, #8
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	4603      	mov	r3, r0
 8005efa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8005efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7ff ff1d 	bl	8005d40 <__NVIC_DisableIRQ>
}
 8005f06:	bf00      	nop
 8005f08:	3708      	adds	r7, #8
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b082      	sub	sp, #8
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f7ff ff94 	bl	8005e44 <SysTick_Config>
 8005f1c:	4603      	mov	r3, r0
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3708      	adds	r7, #8
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}

08005f26 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005f26:	b580      	push	{r7, lr}
 8005f28:	b084      	sub	sp, #16
 8005f2a:	af00      	add	r7, sp, #0
 8005f2c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f32:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005f34:	f7fe ffec 	bl	8004f10 <HAL_GetTick>
 8005f38:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f40:	b2db      	uxtb	r3, r3
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d008      	beq.n	8005f58 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2280      	movs	r2, #128	; 0x80
 8005f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	e052      	b.n	8005ffe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f022 0216 	bic.w	r2, r2, #22
 8005f66:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	695a      	ldr	r2, [r3, #20]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f76:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d103      	bne.n	8005f88 <HAL_DMA_Abort+0x62>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d007      	beq.n	8005f98 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f022 0208 	bic.w	r2, r2, #8
 8005f96:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681a      	ldr	r2, [r3, #0]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f022 0201 	bic.w	r2, r2, #1
 8005fa6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fa8:	e013      	b.n	8005fd2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005faa:	f7fe ffb1 	bl	8004f10 <HAL_GetTick>
 8005fae:	4602      	mov	r2, r0
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	2b05      	cmp	r3, #5
 8005fb6:	d90c      	bls.n	8005fd2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2220      	movs	r2, #32
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2203      	movs	r2, #3
 8005fc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8005fce:	2303      	movs	r3, #3
 8005fd0:	e015      	b.n	8005ffe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 0301 	and.w	r3, r3, #1
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1e4      	bne.n	8005faa <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	223f      	movs	r2, #63	; 0x3f
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b02      	cmp	r3, #2
 8006018:	d004      	beq.n	8006024 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2280      	movs	r2, #128	; 0x80
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e00c      	b.n	800603e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2205      	movs	r2, #5
 8006028:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f022 0201 	bic.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800604c:	b480      	push	{r7}
 800604e:	b089      	sub	sp, #36	; 0x24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800605e:	2300      	movs	r3, #0
 8006060:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006062:	2300      	movs	r3, #0
 8006064:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e175      	b.n	8006358 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800606c:	2201      	movs	r2, #1
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	fa02 f303 	lsl.w	r3, r2, r3
 8006074:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4013      	ands	r3, r2
 800607e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	429a      	cmp	r2, r3
 8006086:	f040 8164 	bne.w	8006352 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f003 0303 	and.w	r3, r3, #3
 8006092:	2b01      	cmp	r3, #1
 8006094:	d005      	beq.n	80060a2 <HAL_GPIO_Init+0x56>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	f003 0303 	and.w	r3, r3, #3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d130      	bne.n	8006104 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	005b      	lsls	r3, r3, #1
 80060ac:	2203      	movs	r2, #3
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	43db      	mvns	r3, r3
 80060b4:	69ba      	ldr	r2, [r7, #24]
 80060b6:	4013      	ands	r3, r2
 80060b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	68da      	ldr	r2, [r3, #12]
 80060be:	69fb      	ldr	r3, [r7, #28]
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	fa02 f303 	lsl.w	r3, r2, r3
 80060c6:	69ba      	ldr	r2, [r7, #24]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	69ba      	ldr	r2, [r7, #24]
 80060d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80060d8:	2201      	movs	r2, #1
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	fa02 f303 	lsl.w	r3, r2, r3
 80060e0:	43db      	mvns	r3, r3
 80060e2:	69ba      	ldr	r2, [r7, #24]
 80060e4:	4013      	ands	r3, r2
 80060e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	091b      	lsrs	r3, r3, #4
 80060ee:	f003 0201 	and.w	r2, r3, #1
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	fa02 f303 	lsl.w	r3, r2, r3
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	69ba      	ldr	r2, [r7, #24]
 8006102:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	f003 0303 	and.w	r3, r3, #3
 800610c:	2b03      	cmp	r3, #3
 800610e:	d017      	beq.n	8006140 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	005b      	lsls	r3, r3, #1
 800611a:	2203      	movs	r2, #3
 800611c:	fa02 f303 	lsl.w	r3, r2, r3
 8006120:	43db      	mvns	r3, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4013      	ands	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	689a      	ldr	r2, [r3, #8]
 800612c:	69fb      	ldr	r3, [r7, #28]
 800612e:	005b      	lsls	r3, r3, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	69ba      	ldr	r2, [r7, #24]
 8006136:	4313      	orrs	r3, r2
 8006138:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69ba      	ldr	r2, [r7, #24]
 800613e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	2b02      	cmp	r3, #2
 800614a:	d123      	bne.n	8006194 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800614c:	69fb      	ldr	r3, [r7, #28]
 800614e:	08da      	lsrs	r2, r3, #3
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	3208      	adds	r2, #8
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800615a:	69fb      	ldr	r3, [r7, #28]
 800615c:	f003 0307 	and.w	r3, r3, #7
 8006160:	009b      	lsls	r3, r3, #2
 8006162:	220f      	movs	r2, #15
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	691a      	ldr	r2, [r3, #16]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	fa02 f303 	lsl.w	r3, r2, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4313      	orrs	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006186:	69fb      	ldr	r3, [r7, #28]
 8006188:	08da      	lsrs	r2, r3, #3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	3208      	adds	r2, #8
 800618e:	69b9      	ldr	r1, [r7, #24]
 8006190:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	005b      	lsls	r3, r3, #1
 800619e:	2203      	movs	r2, #3
 80061a0:	fa02 f303 	lsl.w	r3, r2, r3
 80061a4:	43db      	mvns	r3, r3
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4013      	ands	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	f003 0203 	and.w	r2, r3, #3
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	005b      	lsls	r3, r3, #1
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	69ba      	ldr	r2, [r7, #24]
 80061be:	4313      	orrs	r3, r2
 80061c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	f000 80be 	beq.w	8006352 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80061d6:	4b66      	ldr	r3, [pc, #408]	; (8006370 <HAL_GPIO_Init+0x324>)
 80061d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061da:	4a65      	ldr	r2, [pc, #404]	; (8006370 <HAL_GPIO_Init+0x324>)
 80061dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80061e0:	6453      	str	r3, [r2, #68]	; 0x44
 80061e2:	4b63      	ldr	r3, [pc, #396]	; (8006370 <HAL_GPIO_Init+0x324>)
 80061e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80061ee:	4a61      	ldr	r2, [pc, #388]	; (8006374 <HAL_GPIO_Init+0x328>)
 80061f0:	69fb      	ldr	r3, [r7, #28]
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	3302      	adds	r3, #2
 80061f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f003 0303 	and.w	r3, r3, #3
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	220f      	movs	r2, #15
 8006206:	fa02 f303 	lsl.w	r3, r2, r3
 800620a:	43db      	mvns	r3, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4013      	ands	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	4a58      	ldr	r2, [pc, #352]	; (8006378 <HAL_GPIO_Init+0x32c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d037      	beq.n	800628a <HAL_GPIO_Init+0x23e>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	4a57      	ldr	r2, [pc, #348]	; (800637c <HAL_GPIO_Init+0x330>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_GPIO_Init+0x23a>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	4a56      	ldr	r2, [pc, #344]	; (8006380 <HAL_GPIO_Init+0x334>)
 8006226:	4293      	cmp	r3, r2
 8006228:	d02b      	beq.n	8006282 <HAL_GPIO_Init+0x236>
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	4a55      	ldr	r2, [pc, #340]	; (8006384 <HAL_GPIO_Init+0x338>)
 800622e:	4293      	cmp	r3, r2
 8006230:	d025      	beq.n	800627e <HAL_GPIO_Init+0x232>
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	4a54      	ldr	r2, [pc, #336]	; (8006388 <HAL_GPIO_Init+0x33c>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d01f      	beq.n	800627a <HAL_GPIO_Init+0x22e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a53      	ldr	r2, [pc, #332]	; (800638c <HAL_GPIO_Init+0x340>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d019      	beq.n	8006276 <HAL_GPIO_Init+0x22a>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	4a52      	ldr	r2, [pc, #328]	; (8006390 <HAL_GPIO_Init+0x344>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d013      	beq.n	8006272 <HAL_GPIO_Init+0x226>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a51      	ldr	r2, [pc, #324]	; (8006394 <HAL_GPIO_Init+0x348>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d00d      	beq.n	800626e <HAL_GPIO_Init+0x222>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a50      	ldr	r2, [pc, #320]	; (8006398 <HAL_GPIO_Init+0x34c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d007      	beq.n	800626a <HAL_GPIO_Init+0x21e>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a4f      	ldr	r2, [pc, #316]	; (800639c <HAL_GPIO_Init+0x350>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d101      	bne.n	8006266 <HAL_GPIO_Init+0x21a>
 8006262:	2309      	movs	r3, #9
 8006264:	e012      	b.n	800628c <HAL_GPIO_Init+0x240>
 8006266:	230a      	movs	r3, #10
 8006268:	e010      	b.n	800628c <HAL_GPIO_Init+0x240>
 800626a:	2308      	movs	r3, #8
 800626c:	e00e      	b.n	800628c <HAL_GPIO_Init+0x240>
 800626e:	2307      	movs	r3, #7
 8006270:	e00c      	b.n	800628c <HAL_GPIO_Init+0x240>
 8006272:	2306      	movs	r3, #6
 8006274:	e00a      	b.n	800628c <HAL_GPIO_Init+0x240>
 8006276:	2305      	movs	r3, #5
 8006278:	e008      	b.n	800628c <HAL_GPIO_Init+0x240>
 800627a:	2304      	movs	r3, #4
 800627c:	e006      	b.n	800628c <HAL_GPIO_Init+0x240>
 800627e:	2303      	movs	r3, #3
 8006280:	e004      	b.n	800628c <HAL_GPIO_Init+0x240>
 8006282:	2302      	movs	r3, #2
 8006284:	e002      	b.n	800628c <HAL_GPIO_Init+0x240>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_GPIO_Init+0x240>
 800628a:	2300      	movs	r3, #0
 800628c:	69fa      	ldr	r2, [r7, #28]
 800628e:	f002 0203 	and.w	r2, r2, #3
 8006292:	0092      	lsls	r2, r2, #2
 8006294:	4093      	lsls	r3, r2
 8006296:	69ba      	ldr	r2, [r7, #24]
 8006298:	4313      	orrs	r3, r2
 800629a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800629c:	4935      	ldr	r1, [pc, #212]	; (8006374 <HAL_GPIO_Init+0x328>)
 800629e:	69fb      	ldr	r3, [r7, #28]
 80062a0:	089b      	lsrs	r3, r3, #2
 80062a2:	3302      	adds	r3, #2
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062aa:	4b3d      	ldr	r3, [pc, #244]	; (80063a0 <HAL_GPIO_Init+0x354>)
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	43db      	mvns	r3, r3
 80062b4:	69ba      	ldr	r2, [r7, #24]
 80062b6:	4013      	ands	r3, r2
 80062b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80062c6:	69ba      	ldr	r2, [r7, #24]
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062ce:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <HAL_GPIO_Init+0x354>)
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062d4:	4b32      	ldr	r3, [pc, #200]	; (80063a0 <HAL_GPIO_Init+0x354>)
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	43db      	mvns	r3, r3
 80062de:	69ba      	ldr	r2, [r7, #24]
 80062e0:	4013      	ands	r3, r2
 80062e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062f0:	69ba      	ldr	r2, [r7, #24]
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	4313      	orrs	r3, r2
 80062f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80062f8:	4a29      	ldr	r2, [pc, #164]	; (80063a0 <HAL_GPIO_Init+0x354>)
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80062fe:	4b28      	ldr	r3, [pc, #160]	; (80063a0 <HAL_GPIO_Init+0x354>)
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006322:	4a1f      	ldr	r2, [pc, #124]	; (80063a0 <HAL_GPIO_Init+0x354>)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006328:	4b1d      	ldr	r3, [pc, #116]	; (80063a0 <HAL_GPIO_Init+0x354>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800634c:	4a14      	ldr	r2, [pc, #80]	; (80063a0 <HAL_GPIO_Init+0x354>)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006352:	69fb      	ldr	r3, [r7, #28]
 8006354:	3301      	adds	r3, #1
 8006356:	61fb      	str	r3, [r7, #28]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	2b0f      	cmp	r3, #15
 800635c:	f67f ae86 	bls.w	800606c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006360:	bf00      	nop
 8006362:	bf00      	nop
 8006364:	3724      	adds	r7, #36	; 0x24
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40023800 	.word	0x40023800
 8006374:	40013800 	.word	0x40013800
 8006378:	40020000 	.word	0x40020000
 800637c:	40020400 	.word	0x40020400
 8006380:	40020800 	.word	0x40020800
 8006384:	40020c00 	.word	0x40020c00
 8006388:	40021000 	.word	0x40021000
 800638c:	40021400 	.word	0x40021400
 8006390:	40021800 	.word	0x40021800
 8006394:	40021c00 	.word	0x40021c00
 8006398:	40022000 	.word	0x40022000
 800639c:	40022400 	.word	0x40022400
 80063a0:	40013c00 	.word	0x40013c00

080063a4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80063a4:	b480      	push	{r7}
 80063a6:	b085      	sub	sp, #20
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	460b      	mov	r3, r1
 80063ae:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	691a      	ldr	r2, [r3, #16]
 80063b4:	887b      	ldrh	r3, [r7, #2]
 80063b6:	4013      	ands	r3, r2
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d002      	beq.n	80063c2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80063bc:	2301      	movs	r3, #1
 80063be:	73fb      	strb	r3, [r7, #15]
 80063c0:	e001      	b.n	80063c6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80063c2:	2300      	movs	r3, #0
 80063c4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80063c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	460b      	mov	r3, r1
 80063de:	807b      	strh	r3, [r7, #2]
 80063e0:	4613      	mov	r3, r2
 80063e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80063e4:	787b      	ldrb	r3, [r7, #1]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d003      	beq.n	80063f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80063ea:	887a      	ldrh	r2, [r7, #2]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80063f0:	e003      	b.n	80063fa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80063f2:	887b      	ldrh	r3, [r7, #2]
 80063f4:	041a      	lsls	r2, r3, #16
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	619a      	str	r2, [r3, #24]
}
 80063fa:	bf00      	nop
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006406:	b480      	push	{r7}
 8006408:	b085      	sub	sp, #20
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
 800640e:	460b      	mov	r3, r1
 8006410:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006418:	887a      	ldrh	r2, [r7, #2]
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	4013      	ands	r3, r2
 800641e:	041a      	lsls	r2, r3, #16
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	43d9      	mvns	r1, r3
 8006424:	887b      	ldrh	r3, [r7, #2]
 8006426:	400b      	ands	r3, r1
 8006428:	431a      	orrs	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	619a      	str	r2, [r3, #24]
}
 800642e:	bf00      	nop
 8006430:	3714      	adds	r7, #20
 8006432:	46bd      	mov	sp, r7
 8006434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006438:	4770      	bx	lr
	...

0800643c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	4603      	mov	r3, r0
 8006444:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006448:	695a      	ldr	r2, [r3, #20]
 800644a:	88fb      	ldrh	r3, [r7, #6]
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d006      	beq.n	8006460 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006452:	4a05      	ldr	r2, [pc, #20]	; (8006468 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006454:	88fb      	ldrh	r3, [r7, #6]
 8006456:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006458:	88fb      	ldrh	r3, [r7, #6]
 800645a:	4618      	mov	r0, r3
 800645c:	f7fb fbf8 	bl	8001c50 <HAL_GPIO_EXTI_Callback>
  }
}
 8006460:	bf00      	nop
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	40013c00 	.word	0x40013c00

0800646c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8006476:	4b23      	ldr	r3, [pc, #140]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 8006478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647a:	4a22      	ldr	r2, [pc, #136]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 800647c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006480:	6413      	str	r3, [r2, #64]	; 0x40
 8006482:	4b20      	ldr	r3, [pc, #128]	; (8006504 <HAL_PWREx_EnableOverDrive+0x98>)
 8006484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800648a:	603b      	str	r3, [r7, #0]
 800648c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800648e:	4b1e      	ldr	r3, [pc, #120]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4a1d      	ldr	r2, [pc, #116]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800649a:	f7fe fd39 	bl	8004f10 <HAL_GetTick>
 800649e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064a0:	e009      	b.n	80064b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064a2:	f7fe fd35 	bl	8004f10 <HAL_GetTick>
 80064a6:	4602      	mov	r2, r0
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064b0:	d901      	bls.n	80064b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e022      	b.n	80064fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80064b6:	4b14      	ldr	r3, [pc, #80]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c2:	d1ee      	bne.n	80064a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80064c4:	4b10      	ldr	r3, [pc, #64]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a0f      	ldr	r2, [pc, #60]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80064d0:	f7fe fd1e 	bl	8004f10 <HAL_GetTick>
 80064d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064d6:	e009      	b.n	80064ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80064d8:	f7fe fd1a 	bl	8004f10 <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80064e6:	d901      	bls.n	80064ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e007      	b.n	80064fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064f8:	d1ee      	bne.n	80064d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3708      	adds	r7, #8
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}
 8006504:	40023800 	.word	0x40023800
 8006508:	40007000 	.word	0x40007000

0800650c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b086      	sub	sp, #24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006514:	2300      	movs	r3, #0
 8006516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d101      	bne.n	8006522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e291      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f003 0301 	and.w	r3, r3, #1
 800652a:	2b00      	cmp	r3, #0
 800652c:	f000 8087 	beq.w	800663e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006530:	4b96      	ldr	r3, [pc, #600]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006532:	689b      	ldr	r3, [r3, #8]
 8006534:	f003 030c 	and.w	r3, r3, #12
 8006538:	2b04      	cmp	r3, #4
 800653a:	d00c      	beq.n	8006556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800653c:	4b93      	ldr	r3, [pc, #588]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f003 030c 	and.w	r3, r3, #12
 8006544:	2b08      	cmp	r3, #8
 8006546:	d112      	bne.n	800656e <HAL_RCC_OscConfig+0x62>
 8006548:	4b90      	ldr	r3, [pc, #576]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800654a:	685b      	ldr	r3, [r3, #4]
 800654c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006554:	d10b      	bne.n	800656e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006556:	4b8d      	ldr	r3, [pc, #564]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d06c      	beq.n	800663c <HAL_RCC_OscConfig+0x130>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d168      	bne.n	800663c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e26b      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	685b      	ldr	r3, [r3, #4]
 8006572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006576:	d106      	bne.n	8006586 <HAL_RCC_OscConfig+0x7a>
 8006578:	4b84      	ldr	r3, [pc, #528]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a83      	ldr	r2, [pc, #524]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800657e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	e02e      	b.n	80065e4 <HAL_RCC_OscConfig+0xd8>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d10c      	bne.n	80065a8 <HAL_RCC_OscConfig+0x9c>
 800658e:	4b7f      	ldr	r3, [pc, #508]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4a7e      	ldr	r2, [pc, #504]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006598:	6013      	str	r3, [r2, #0]
 800659a:	4b7c      	ldr	r3, [pc, #496]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a7b      	ldr	r2, [pc, #492]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065a4:	6013      	str	r3, [r2, #0]
 80065a6:	e01d      	b.n	80065e4 <HAL_RCC_OscConfig+0xd8>
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80065b0:	d10c      	bne.n	80065cc <HAL_RCC_OscConfig+0xc0>
 80065b2:	4b76      	ldr	r3, [pc, #472]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a75      	ldr	r2, [pc, #468]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80065bc:	6013      	str	r3, [r2, #0]
 80065be:	4b73      	ldr	r3, [pc, #460]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a72      	ldr	r2, [pc, #456]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065c8:	6013      	str	r3, [r2, #0]
 80065ca:	e00b      	b.n	80065e4 <HAL_RCC_OscConfig+0xd8>
 80065cc:	4b6f      	ldr	r3, [pc, #444]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a6e      	ldr	r2, [pc, #440]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065d6:	6013      	str	r3, [r2, #0]
 80065d8:	4b6c      	ldr	r3, [pc, #432]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a6b      	ldr	r2, [pc, #428]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80065de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80065e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d013      	beq.n	8006614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065ec:	f7fe fc90 	bl	8004f10 <HAL_GetTick>
 80065f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80065f2:	e008      	b.n	8006606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80065f4:	f7fe fc8c 	bl	8004f10 <HAL_GetTick>
 80065f8:	4602      	mov	r2, r0
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	1ad3      	subs	r3, r2, r3
 80065fe:	2b64      	cmp	r3, #100	; 0x64
 8006600:	d901      	bls.n	8006606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006602:	2303      	movs	r3, #3
 8006604:	e21f      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	4b61      	ldr	r3, [pc, #388]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d0f0      	beq.n	80065f4 <HAL_RCC_OscConfig+0xe8>
 8006612:	e014      	b.n	800663e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fe fc7c 	bl	8004f10 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800661c:	f7fe fc78 	bl	8004f10 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b64      	cmp	r3, #100	; 0x64
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e20b      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800662e:	4b57      	ldr	r3, [pc, #348]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1f0      	bne.n	800661c <HAL_RCC_OscConfig+0x110>
 800663a:	e000      	b.n	800663e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800663c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f003 0302 	and.w	r3, r3, #2
 8006646:	2b00      	cmp	r3, #0
 8006648:	d069      	beq.n	800671e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800664a:	4b50      	ldr	r3, [pc, #320]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f003 030c 	and.w	r3, r3, #12
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00b      	beq.n	800666e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006656:	4b4d      	ldr	r3, [pc, #308]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f003 030c 	and.w	r3, r3, #12
 800665e:	2b08      	cmp	r3, #8
 8006660:	d11c      	bne.n	800669c <HAL_RCC_OscConfig+0x190>
 8006662:	4b4a      	ldr	r3, [pc, #296]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d116      	bne.n	800669c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800666e:	4b47      	ldr	r3, [pc, #284]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d005      	beq.n	8006686 <HAL_RCC_OscConfig+0x17a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b01      	cmp	r3, #1
 8006680:	d001      	beq.n	8006686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e1df      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006686:	4b41      	ldr	r3, [pc, #260]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	00db      	lsls	r3, r3, #3
 8006694:	493d      	ldr	r1, [pc, #244]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006696:	4313      	orrs	r3, r2
 8006698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800669a:	e040      	b.n	800671e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d023      	beq.n	80066ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80066a4:	4b39      	ldr	r3, [pc, #228]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4a38      	ldr	r2, [pc, #224]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066aa:	f043 0301 	orr.w	r3, r3, #1
 80066ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066b0:	f7fe fc2e 	bl	8004f10 <HAL_GetTick>
 80066b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b6:	e008      	b.n	80066ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80066b8:	f7fe fc2a 	bl	8004f10 <HAL_GetTick>
 80066bc:	4602      	mov	r2, r0
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	2b02      	cmp	r3, #2
 80066c4:	d901      	bls.n	80066ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80066c6:	2303      	movs	r3, #3
 80066c8:	e1bd      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066ca:	4b30      	ldr	r3, [pc, #192]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0302 	and.w	r3, r3, #2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d0f0      	beq.n	80066b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80066d6:	4b2d      	ldr	r3, [pc, #180]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4929      	ldr	r1, [pc, #164]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066e6:	4313      	orrs	r3, r2
 80066e8:	600b      	str	r3, [r1, #0]
 80066ea:	e018      	b.n	800671e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80066ec:	4b27      	ldr	r3, [pc, #156]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a26      	ldr	r2, [pc, #152]	; (800678c <HAL_RCC_OscConfig+0x280>)
 80066f2:	f023 0301 	bic.w	r3, r3, #1
 80066f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066f8:	f7fe fc0a 	bl	8004f10 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006700:	f7fe fc06 	bl	8004f10 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b02      	cmp	r3, #2
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e199      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006712:	4b1e      	ldr	r3, [pc, #120]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f003 0302 	and.w	r3, r3, #2
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0308 	and.w	r3, r3, #8
 8006726:	2b00      	cmp	r3, #0
 8006728:	d038      	beq.n	800679c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d019      	beq.n	8006766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006732:	4b16      	ldr	r3, [pc, #88]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006736:	4a15      	ldr	r2, [pc, #84]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006738:	f043 0301 	orr.w	r3, r3, #1
 800673c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800673e:	f7fe fbe7 	bl	8004f10 <HAL_GetTick>
 8006742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006744:	e008      	b.n	8006758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006746:	f7fe fbe3 	bl	8004f10 <HAL_GetTick>
 800674a:	4602      	mov	r2, r0
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	1ad3      	subs	r3, r2, r3
 8006750:	2b02      	cmp	r3, #2
 8006752:	d901      	bls.n	8006758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006754:	2303      	movs	r3, #3
 8006756:	e176      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006758:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800675a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800675c:	f003 0302 	and.w	r3, r3, #2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d0f0      	beq.n	8006746 <HAL_RCC_OscConfig+0x23a>
 8006764:	e01a      	b.n	800679c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006766:	4b09      	ldr	r3, [pc, #36]	; (800678c <HAL_RCC_OscConfig+0x280>)
 8006768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800676a:	4a08      	ldr	r2, [pc, #32]	; (800678c <HAL_RCC_OscConfig+0x280>)
 800676c:	f023 0301 	bic.w	r3, r3, #1
 8006770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006772:	f7fe fbcd 	bl	8004f10 <HAL_GetTick>
 8006776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006778:	e00a      	b.n	8006790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800677a:	f7fe fbc9 	bl	8004f10 <HAL_GetTick>
 800677e:	4602      	mov	r2, r0
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	1ad3      	subs	r3, r2, r3
 8006784:	2b02      	cmp	r3, #2
 8006786:	d903      	bls.n	8006790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006788:	2303      	movs	r3, #3
 800678a:	e15c      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
 800678c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006790:	4b91      	ldr	r3, [pc, #580]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006794:	f003 0302 	and.w	r3, r3, #2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1ee      	bne.n	800677a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0304 	and.w	r3, r3, #4
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	f000 80a4 	beq.w	80068f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80067aa:	4b8b      	ldr	r3, [pc, #556]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80067ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10d      	bne.n	80067d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80067b6:	4b88      	ldr	r3, [pc, #544]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80067b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067ba:	4a87      	ldr	r2, [pc, #540]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80067bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067c0:	6413      	str	r3, [r2, #64]	; 0x40
 80067c2:	4b85      	ldr	r3, [pc, #532]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80067c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067ca:	60bb      	str	r3, [r7, #8]
 80067cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80067ce:	2301      	movs	r3, #1
 80067d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067d2:	4b82      	ldr	r3, [pc, #520]	; (80069dc <HAL_RCC_OscConfig+0x4d0>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d118      	bne.n	8006810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80067de:	4b7f      	ldr	r3, [pc, #508]	; (80069dc <HAL_RCC_OscConfig+0x4d0>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a7e      	ldr	r2, [pc, #504]	; (80069dc <HAL_RCC_OscConfig+0x4d0>)
 80067e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80067ea:	f7fe fb91 	bl	8004f10 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80067f2:	f7fe fb8d 	bl	8004f10 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b64      	cmp	r3, #100	; 0x64
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e120      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006804:	4b75      	ldr	r3, [pc, #468]	; (80069dc <HAL_RCC_OscConfig+0x4d0>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	689b      	ldr	r3, [r3, #8]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d106      	bne.n	8006826 <HAL_RCC_OscConfig+0x31a>
 8006818:	4b6f      	ldr	r3, [pc, #444]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800681a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800681c:	4a6e      	ldr	r2, [pc, #440]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	6713      	str	r3, [r2, #112]	; 0x70
 8006824:	e02d      	b.n	8006882 <HAL_RCC_OscConfig+0x376>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10c      	bne.n	8006848 <HAL_RCC_OscConfig+0x33c>
 800682e:	4b6a      	ldr	r3, [pc, #424]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	4a69      	ldr	r2, [pc, #420]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006834:	f023 0301 	bic.w	r3, r3, #1
 8006838:	6713      	str	r3, [r2, #112]	; 0x70
 800683a:	4b67      	ldr	r3, [pc, #412]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800683c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800683e:	4a66      	ldr	r2, [pc, #408]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006840:	f023 0304 	bic.w	r3, r3, #4
 8006844:	6713      	str	r3, [r2, #112]	; 0x70
 8006846:	e01c      	b.n	8006882 <HAL_RCC_OscConfig+0x376>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	2b05      	cmp	r3, #5
 800684e:	d10c      	bne.n	800686a <HAL_RCC_OscConfig+0x35e>
 8006850:	4b61      	ldr	r3, [pc, #388]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006854:	4a60      	ldr	r2, [pc, #384]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006856:	f043 0304 	orr.w	r3, r3, #4
 800685a:	6713      	str	r3, [r2, #112]	; 0x70
 800685c:	4b5e      	ldr	r3, [pc, #376]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	4a5d      	ldr	r2, [pc, #372]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006862:	f043 0301 	orr.w	r3, r3, #1
 8006866:	6713      	str	r3, [r2, #112]	; 0x70
 8006868:	e00b      	b.n	8006882 <HAL_RCC_OscConfig+0x376>
 800686a:	4b5b      	ldr	r3, [pc, #364]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800686c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686e:	4a5a      	ldr	r2, [pc, #360]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	6713      	str	r3, [r2, #112]	; 0x70
 8006876:	4b58      	ldr	r3, [pc, #352]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800687a:	4a57      	ldr	r2, [pc, #348]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d015      	beq.n	80068b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800688a:	f7fe fb41 	bl	8004f10 <HAL_GetTick>
 800688e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006890:	e00a      	b.n	80068a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006892:	f7fe fb3d 	bl	8004f10 <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f241 3288 	movw	r2, #5000	; 0x1388
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d901      	bls.n	80068a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e0ce      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068a8:	4b4b      	ldr	r3, [pc, #300]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80068aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d0ee      	beq.n	8006892 <HAL_RCC_OscConfig+0x386>
 80068b4:	e014      	b.n	80068e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b6:	f7fe fb2b 	bl	8004f10 <HAL_GetTick>
 80068ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068bc:	e00a      	b.n	80068d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068be:	f7fe fb27 	bl	8004f10 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d901      	bls.n	80068d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80068d0:	2303      	movs	r3, #3
 80068d2:	e0b8      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80068d4:	4b40      	ldr	r3, [pc, #256]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80068d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ee      	bne.n	80068be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
 80068e2:	2b01      	cmp	r3, #1
 80068e4:	d105      	bne.n	80068f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80068e6:	4b3c      	ldr	r3, [pc, #240]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	4a3b      	ldr	r2, [pc, #236]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80068ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	699b      	ldr	r3, [r3, #24]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 80a4 	beq.w	8006a44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80068fc:	4b36      	ldr	r3, [pc, #216]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	f003 030c 	and.w	r3, r3, #12
 8006904:	2b08      	cmp	r3, #8
 8006906:	d06b      	beq.n	80069e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b02      	cmp	r3, #2
 800690e:	d149      	bne.n	80069a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006910:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a30      	ldr	r2, [pc, #192]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800691c:	f7fe faf8 	bl	8004f10 <HAL_GetTick>
 8006920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006922:	e008      	b.n	8006936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006924:	f7fe faf4 	bl	8004f10 <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d901      	bls.n	8006936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	e087      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006936:	4b28      	ldr	r3, [pc, #160]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800693e:	2b00      	cmp	r3, #0
 8006940:	d1f0      	bne.n	8006924 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	69da      	ldr	r2, [r3, #28]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	431a      	orrs	r2, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	019b      	lsls	r3, r3, #6
 8006952:	431a      	orrs	r2, r3
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006958:	085b      	lsrs	r3, r3, #1
 800695a:	3b01      	subs	r3, #1
 800695c:	041b      	lsls	r3, r3, #16
 800695e:	431a      	orrs	r2, r3
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006964:	061b      	lsls	r3, r3, #24
 8006966:	4313      	orrs	r3, r2
 8006968:	4a1b      	ldr	r2, [pc, #108]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 800696a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800696e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006970:	4b19      	ldr	r3, [pc, #100]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a18      	ldr	r2, [pc, #96]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800697a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800697c:	f7fe fac8 	bl	8004f10 <HAL_GetTick>
 8006980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006982:	e008      	b.n	8006996 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006984:	f7fe fac4 	bl	8004f10 <HAL_GetTick>
 8006988:	4602      	mov	r2, r0
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	1ad3      	subs	r3, r2, r3
 800698e:	2b02      	cmp	r3, #2
 8006990:	d901      	bls.n	8006996 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006992:	2303      	movs	r3, #3
 8006994:	e057      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006996:	4b10      	ldr	r3, [pc, #64]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0f0      	beq.n	8006984 <HAL_RCC_OscConfig+0x478>
 80069a2:	e04f      	b.n	8006a44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069a4:	4b0c      	ldr	r3, [pc, #48]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80069aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80069ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069b0:	f7fe faae 	bl	8004f10 <HAL_GetTick>
 80069b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	e008      	b.n	80069ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069b8:	f7fe faaa 	bl	8004f10 <HAL_GetTick>
 80069bc:	4602      	mov	r2, r0
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	1ad3      	subs	r3, r2, r3
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d901      	bls.n	80069ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e03d      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ca:	4b03      	ldr	r3, [pc, #12]	; (80069d8 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1f0      	bne.n	80069b8 <HAL_RCC_OscConfig+0x4ac>
 80069d6:	e035      	b.n	8006a44 <HAL_RCC_OscConfig+0x538>
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80069e0:	4b1b      	ldr	r3, [pc, #108]	; (8006a50 <HAL_RCC_OscConfig+0x544>)
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d028      	beq.n	8006a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80069f8:	429a      	cmp	r2, r3
 80069fa:	d121      	bne.n	8006a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d11a      	bne.n	8006a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a0a:	68fa      	ldr	r2, [r7, #12]
 8006a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006a10:	4013      	ands	r3, r2
 8006a12:	687a      	ldr	r2, [r7, #4]
 8006a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	d111      	bne.n	8006a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a26:	085b      	lsrs	r3, r3, #1
 8006a28:	3b01      	subs	r3, #1
 8006a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d107      	bne.n	8006a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d001      	beq.n	8006a44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006a44:	2300      	movs	r3, #0
}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	40023800 	.word	0x40023800

08006a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006a54:	b580      	push	{r7, lr}
 8006a56:	b084      	sub	sp, #16
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d101      	bne.n	8006a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0d0      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006a6c:	4b6a      	ldr	r3, [pc, #424]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	683a      	ldr	r2, [r7, #0]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d910      	bls.n	8006a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006a7a:	4b67      	ldr	r3, [pc, #412]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f023 020f 	bic.w	r2, r3, #15
 8006a82:	4965      	ldr	r1, [pc, #404]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006a8a:	4b63      	ldr	r3, [pc, #396]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f003 030f 	and.w	r3, r3, #15
 8006a92:	683a      	ldr	r2, [r7, #0]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d001      	beq.n	8006a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	e0b8      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 0302 	and.w	r3, r3, #2
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d020      	beq.n	8006aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f003 0304 	and.w	r3, r3, #4
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d005      	beq.n	8006ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006ab4:	4b59      	ldr	r3, [pc, #356]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	4a58      	ldr	r2, [pc, #352]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0308 	and.w	r3, r3, #8
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d005      	beq.n	8006ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006acc:	4b53      	ldr	r3, [pc, #332]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	4a52      	ldr	r2, [pc, #328]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006ad8:	4b50      	ldr	r3, [pc, #320]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	494d      	ldr	r1, [pc, #308]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006ae6:	4313      	orrs	r3, r2
 8006ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 0301 	and.w	r3, r3, #1
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d040      	beq.n	8006b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	685b      	ldr	r3, [r3, #4]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d107      	bne.n	8006b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006afe:	4b47      	ldr	r3, [pc, #284]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d115      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	e07f      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d107      	bne.n	8006b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b16:	4b41      	ldr	r3, [pc, #260]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d109      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b22:	2301      	movs	r3, #1
 8006b24:	e073      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b26:	4b3d      	ldr	r3, [pc, #244]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 0302 	and.w	r3, r3, #2
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d101      	bne.n	8006b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e06b      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b36:	4b39      	ldr	r3, [pc, #228]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b38:	689b      	ldr	r3, [r3, #8]
 8006b3a:	f023 0203 	bic.w	r2, r3, #3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	685b      	ldr	r3, [r3, #4]
 8006b42:	4936      	ldr	r1, [pc, #216]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b44:	4313      	orrs	r3, r2
 8006b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b48:	f7fe f9e2 	bl	8004f10 <HAL_GetTick>
 8006b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b4e:	e00a      	b.n	8006b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b50:	f7fe f9de 	bl	8004f10 <HAL_GetTick>
 8006b54:	4602      	mov	r2, r0
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d901      	bls.n	8006b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e053      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b66:	4b2d      	ldr	r3, [pc, #180]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006b68:	689b      	ldr	r3, [r3, #8]
 8006b6a:	f003 020c 	and.w	r2, r3, #12
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	009b      	lsls	r3, r3, #2
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d1eb      	bne.n	8006b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006b78:	4b27      	ldr	r3, [pc, #156]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 030f 	and.w	r3, r3, #15
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d210      	bcs.n	8006ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b86:	4b24      	ldr	r3, [pc, #144]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f023 020f 	bic.w	r2, r3, #15
 8006b8e:	4922      	ldr	r1, [pc, #136]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b96:	4b20      	ldr	r3, [pc, #128]	; (8006c18 <HAL_RCC_ClockConfig+0x1c4>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f003 030f 	and.w	r3, r3, #15
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	429a      	cmp	r2, r3
 8006ba2:	d001      	beq.n	8006ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	e032      	b.n	8006c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f003 0304 	and.w	r3, r3, #4
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d008      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bb4:	4b19      	ldr	r3, [pc, #100]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006bb6:	689b      	ldr	r3, [r3, #8]
 8006bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	68db      	ldr	r3, [r3, #12]
 8006bc0:	4916      	ldr	r1, [pc, #88]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 0308 	and.w	r3, r3, #8
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d009      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006bd2:	4b12      	ldr	r3, [pc, #72]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006bd4:	689b      	ldr	r3, [r3, #8]
 8006bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	490e      	ldr	r1, [pc, #56]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006be6:	f000 f821 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b0b      	ldr	r3, [pc, #44]	; (8006c1c <HAL_RCC_ClockConfig+0x1c8>)
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	091b      	lsrs	r3, r3, #4
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	490a      	ldr	r1, [pc, #40]	; (8006c20 <HAL_RCC_ClockConfig+0x1cc>)
 8006bf8:	5ccb      	ldrb	r3, [r1, r3]
 8006bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8006bfe:	4a09      	ldr	r2, [pc, #36]	; (8006c24 <HAL_RCC_ClockConfig+0x1d0>)
 8006c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006c02:	4b09      	ldr	r3, [pc, #36]	; (8006c28 <HAL_RCC_ClockConfig+0x1d4>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe f93e 	bl	8004e88 <HAL_InitTick>

  return HAL_OK;
 8006c0c:	2300      	movs	r3, #0
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3710      	adds	r7, #16
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}
 8006c16:	bf00      	nop
 8006c18:	40023c00 	.word	0x40023c00
 8006c1c:	40023800 	.word	0x40023800
 8006c20:	0800ace0 	.word	0x0800ace0
 8006c24:	20000010 	.word	0x20000010
 8006c28:	20000014 	.word	0x20000014

08006c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c30:	b094      	sub	sp, #80	; 0x50
 8006c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006c34:	2300      	movs	r3, #0
 8006c36:	647b      	str	r3, [r7, #68]	; 0x44
 8006c38:	2300      	movs	r3, #0
 8006c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006c40:	2300      	movs	r3, #0
 8006c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c44:	4b79      	ldr	r3, [pc, #484]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c46:	689b      	ldr	r3, [r3, #8]
 8006c48:	f003 030c 	and.w	r3, r3, #12
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d00d      	beq.n	8006c6c <HAL_RCC_GetSysClockFreq+0x40>
 8006c50:	2b08      	cmp	r3, #8
 8006c52:	f200 80e1 	bhi.w	8006e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d002      	beq.n	8006c60 <HAL_RCC_GetSysClockFreq+0x34>
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	d003      	beq.n	8006c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c5e:	e0db      	b.n	8006e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006c60:	4b73      	ldr	r3, [pc, #460]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8006c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c64:	e0db      	b.n	8006e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006c66:	4b73      	ldr	r3, [pc, #460]	; (8006e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8006c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006c6a:	e0d8      	b.n	8006e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006c6c:	4b6f      	ldr	r3, [pc, #444]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c6e:	685b      	ldr	r3, [r3, #4]
 8006c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006c76:	4b6d      	ldr	r3, [pc, #436]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d063      	beq.n	8006d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006c82:	4b6a      	ldr	r3, [pc, #424]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	099b      	lsrs	r3, r3, #6
 8006c88:	2200      	movs	r2, #0
 8006c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c94:	633b      	str	r3, [r7, #48]	; 0x30
 8006c96:	2300      	movs	r3, #0
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
 8006c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006c9e:	4622      	mov	r2, r4
 8006ca0:	462b      	mov	r3, r5
 8006ca2:	f04f 0000 	mov.w	r0, #0
 8006ca6:	f04f 0100 	mov.w	r1, #0
 8006caa:	0159      	lsls	r1, r3, #5
 8006cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006cb0:	0150      	lsls	r0, r2, #5
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4621      	mov	r1, r4
 8006cb8:	1a51      	subs	r1, r2, r1
 8006cba:	6139      	str	r1, [r7, #16]
 8006cbc:	4629      	mov	r1, r5
 8006cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8006cc2:	617b      	str	r3, [r7, #20]
 8006cc4:	f04f 0200 	mov.w	r2, #0
 8006cc8:	f04f 0300 	mov.w	r3, #0
 8006ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006cd0:	4659      	mov	r1, fp
 8006cd2:	018b      	lsls	r3, r1, #6
 8006cd4:	4651      	mov	r1, sl
 8006cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006cda:	4651      	mov	r1, sl
 8006cdc:	018a      	lsls	r2, r1, #6
 8006cde:	4651      	mov	r1, sl
 8006ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8006ce4:	4659      	mov	r1, fp
 8006ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cfe:	4690      	mov	r8, r2
 8006d00:	4699      	mov	r9, r3
 8006d02:	4623      	mov	r3, r4
 8006d04:	eb18 0303 	adds.w	r3, r8, r3
 8006d08:	60bb      	str	r3, [r7, #8]
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	eb49 0303 	adc.w	r3, r9, r3
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	f04f 0200 	mov.w	r2, #0
 8006d16:	f04f 0300 	mov.w	r3, #0
 8006d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d1e:	4629      	mov	r1, r5
 8006d20:	024b      	lsls	r3, r1, #9
 8006d22:	4621      	mov	r1, r4
 8006d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d28:	4621      	mov	r1, r4
 8006d2a:	024a      	lsls	r2, r1, #9
 8006d2c:	4610      	mov	r0, r2
 8006d2e:	4619      	mov	r1, r3
 8006d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d32:	2200      	movs	r2, #0
 8006d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006d3c:	f7f9 ff56 	bl	8000bec <__aeabi_uldivmod>
 8006d40:	4602      	mov	r2, r0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4613      	mov	r3, r2
 8006d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d48:	e058      	b.n	8006dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d4a:	4b38      	ldr	r3, [pc, #224]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	099b      	lsrs	r3, r3, #6
 8006d50:	2200      	movs	r2, #0
 8006d52:	4618      	mov	r0, r3
 8006d54:	4611      	mov	r1, r2
 8006d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006d5a:	623b      	str	r3, [r7, #32]
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006d64:	4642      	mov	r2, r8
 8006d66:	464b      	mov	r3, r9
 8006d68:	f04f 0000 	mov.w	r0, #0
 8006d6c:	f04f 0100 	mov.w	r1, #0
 8006d70:	0159      	lsls	r1, r3, #5
 8006d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d76:	0150      	lsls	r0, r2, #5
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4641      	mov	r1, r8
 8006d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006d82:	4649      	mov	r1, r9
 8006d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8006da0:	eb63 050b 	sbc.w	r5, r3, fp
 8006da4:	f04f 0200 	mov.w	r2, #0
 8006da8:	f04f 0300 	mov.w	r3, #0
 8006dac:	00eb      	lsls	r3, r5, #3
 8006dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006db2:	00e2      	lsls	r2, r4, #3
 8006db4:	4614      	mov	r4, r2
 8006db6:	461d      	mov	r5, r3
 8006db8:	4643      	mov	r3, r8
 8006dba:	18e3      	adds	r3, r4, r3
 8006dbc:	603b      	str	r3, [r7, #0]
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	eb45 0303 	adc.w	r3, r5, r3
 8006dc4:	607b      	str	r3, [r7, #4]
 8006dc6:	f04f 0200 	mov.w	r2, #0
 8006dca:	f04f 0300 	mov.w	r3, #0
 8006dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dd2:	4629      	mov	r1, r5
 8006dd4:	028b      	lsls	r3, r1, #10
 8006dd6:	4621      	mov	r1, r4
 8006dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ddc:	4621      	mov	r1, r4
 8006dde:	028a      	lsls	r2, r1, #10
 8006de0:	4610      	mov	r0, r2
 8006de2:	4619      	mov	r1, r3
 8006de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006de6:	2200      	movs	r2, #0
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	61fa      	str	r2, [r7, #28]
 8006dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006df0:	f7f9 fefc 	bl	8000bec <__aeabi_uldivmod>
 8006df4:	4602      	mov	r2, r0
 8006df6:	460b      	mov	r3, r1
 8006df8:	4613      	mov	r3, r2
 8006dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006dfc:	4b0b      	ldr	r3, [pc, #44]	; (8006e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8006dfe:	685b      	ldr	r3, [r3, #4]
 8006e00:	0c1b      	lsrs	r3, r3, #16
 8006e02:	f003 0303 	and.w	r3, r3, #3
 8006e06:	3301      	adds	r3, #1
 8006e08:	005b      	lsls	r3, r3, #1
 8006e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e16:	e002      	b.n	8006e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3750      	adds	r7, #80	; 0x50
 8006e24:	46bd      	mov	sp, r7
 8006e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e2a:	bf00      	nop
 8006e2c:	40023800 	.word	0x40023800
 8006e30:	00f42400 	.word	0x00f42400
 8006e34:	007a1200 	.word	0x007a1200

08006e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e38:	b480      	push	{r7}
 8006e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e3c:	4b03      	ldr	r3, [pc, #12]	; (8006e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8006e3e:	681b      	ldr	r3, [r3, #0]
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000010 	.word	0x20000010

08006e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006e54:	f7ff fff0 	bl	8006e38 <HAL_RCC_GetHCLKFreq>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	0a9b      	lsrs	r3, r3, #10
 8006e60:	f003 0307 	and.w	r3, r3, #7
 8006e64:	4903      	ldr	r1, [pc, #12]	; (8006e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e66:	5ccb      	ldrb	r3, [r1, r3]
 8006e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	bd80      	pop	{r7, pc}
 8006e70:	40023800 	.word	0x40023800
 8006e74:	0800acf0 	.word	0x0800acf0

08006e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e7c:	f7ff ffdc 	bl	8006e38 <HAL_RCC_GetHCLKFreq>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	0b5b      	lsrs	r3, r3, #13
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	4903      	ldr	r1, [pc, #12]	; (8006e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006e8e:	5ccb      	ldrb	r3, [r1, r3]
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	0800acf0 	.word	0x0800acf0

08006ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b088      	sub	sp, #32
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006eac:	2300      	movs	r3, #0
 8006eae:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006eb8:	2300      	movs	r3, #0
 8006eba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d012      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006ec8:	4b69      	ldr	r3, [pc, #420]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006eca:	689b      	ldr	r3, [r3, #8]
 8006ecc:	4a68      	ldr	r2, [pc, #416]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ece:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006ed2:	6093      	str	r3, [r2, #8]
 8006ed4:	4b66      	ldr	r3, [pc, #408]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ed6:	689a      	ldr	r2, [r3, #8]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006edc:	4964      	ldr	r1, [pc, #400]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ede:	4313      	orrs	r3, r2
 8006ee0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d101      	bne.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006eea:	2301      	movs	r3, #1
 8006eec:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d017      	beq.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006efa:	4b5d      	ldr	r3, [pc, #372]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f08:	4959      	ldr	r1, [pc, #356]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f18:	d101      	bne.n	8006f1e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d101      	bne.n	8006f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006f26:	2301      	movs	r3, #1
 8006f28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d017      	beq.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006f36:	4b4e      	ldr	r3, [pc, #312]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f44:	494a      	ldr	r1, [pc, #296]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f54:	d101      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006f56:	2301      	movs	r3, #1
 8006f58:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d101      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006f62:	2301      	movs	r3, #1
 8006f64:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006f72:	2301      	movs	r3, #1
 8006f74:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f003 0320 	and.w	r3, r3, #32
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	f000 808b 	beq.w	800709a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006f84:	4b3a      	ldr	r3, [pc, #232]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	4a39      	ldr	r2, [pc, #228]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8006f90:	4b37      	ldr	r3, [pc, #220]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f98:	60bb      	str	r3, [r7, #8]
 8006f9a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006f9c:	4b35      	ldr	r3, [pc, #212]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a34      	ldr	r2, [pc, #208]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fa6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fa8:	f7fd ffb2 	bl	8004f10 <HAL_GetTick>
 8006fac:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fae:	e008      	b.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fb0:	f7fd ffae 	bl	8004f10 <HAL_GetTick>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	1ad3      	subs	r3, r2, r3
 8006fba:	2b64      	cmp	r3, #100	; 0x64
 8006fbc:	d901      	bls.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006fbe:	2303      	movs	r3, #3
 8006fc0:	e357      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006fc2:	4b2c      	ldr	r3, [pc, #176]	; (8007074 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d0f0      	beq.n	8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006fce:	4b28      	ldr	r3, [pc, #160]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fd6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006fd8:	693b      	ldr	r3, [r7, #16]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d035      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fe2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	429a      	cmp	r2, r3
 8006fea:	d02e      	beq.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fec:	4b20      	ldr	r3, [pc, #128]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ff6:	4b1e      	ldr	r3, [pc, #120]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007000:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007002:	4b1b      	ldr	r3, [pc, #108]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007006:	4a1a      	ldr	r2, [pc, #104]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800700c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800700e:	4a18      	ldr	r2, [pc, #96]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007014:	4b16      	ldr	r3, [pc, #88]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b01      	cmp	r3, #1
 800701e:	d114      	bne.n	800704a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007020:	f7fd ff76 	bl	8004f10 <HAL_GetTick>
 8007024:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007026:	e00a      	b.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007028:	f7fd ff72 	bl	8004f10 <HAL_GetTick>
 800702c:	4602      	mov	r2, r0
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	1ad3      	subs	r3, r2, r3
 8007032:	f241 3288 	movw	r2, #5000	; 0x1388
 8007036:	4293      	cmp	r3, r2
 8007038:	d901      	bls.n	800703e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800703a:	2303      	movs	r3, #3
 800703c:	e319      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800703e:	4b0c      	ldr	r3, [pc, #48]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007040:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0ee      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800704e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007056:	d111      	bne.n	800707c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007064:	4b04      	ldr	r3, [pc, #16]	; (8007078 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007066:	400b      	ands	r3, r1
 8007068:	4901      	ldr	r1, [pc, #4]	; (8007070 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800706a:	4313      	orrs	r3, r2
 800706c:	608b      	str	r3, [r1, #8]
 800706e:	e00b      	b.n	8007088 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007070:	40023800 	.word	0x40023800
 8007074:	40007000 	.word	0x40007000
 8007078:	0ffffcff 	.word	0x0ffffcff
 800707c:	4baa      	ldr	r3, [pc, #680]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800707e:	689b      	ldr	r3, [r3, #8]
 8007080:	4aa9      	ldr	r2, [pc, #676]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007082:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007086:	6093      	str	r3, [r2, #8]
 8007088:	4ba7      	ldr	r3, [pc, #668]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800708a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007094:	49a4      	ldr	r1, [pc, #656]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007096:	4313      	orrs	r3, r2
 8007098:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	f003 0310 	and.w	r3, r3, #16
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d010      	beq.n	80070c8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80070a6:	4ba0      	ldr	r3, [pc, #640]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070ac:	4a9e      	ldr	r2, [pc, #632]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80070b6:	4b9c      	ldr	r3, [pc, #624]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070c0:	4999      	ldr	r1, [pc, #612]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d00a      	beq.n	80070ea <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80070d4:	4b94      	ldr	r3, [pc, #592]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070da:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80070e2:	4991      	ldr	r1, [pc, #580]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070e4:	4313      	orrs	r3, r2
 80070e6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00a      	beq.n	800710c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80070f6:	4b8c      	ldr	r3, [pc, #560]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80070f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070fc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007104:	4988      	ldr	r1, [pc, #544]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007106:	4313      	orrs	r3, r2
 8007108:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00a      	beq.n	800712e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007118:	4b83      	ldr	r3, [pc, #524]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800711a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800711e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007126:	4980      	ldr	r1, [pc, #512]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007128:	4313      	orrs	r3, r2
 800712a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800713a:	4b7b      	ldr	r3, [pc, #492]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800713c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007140:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	4977      	ldr	r1, [pc, #476]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800714a:	4313      	orrs	r3, r2
 800714c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00a      	beq.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800715c:	4b72      	ldr	r3, [pc, #456]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800715e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007162:	f023 0203 	bic.w	r2, r3, #3
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	496f      	ldr	r1, [pc, #444]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800716c:	4313      	orrs	r3, r2
 800716e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800717a:	2b00      	cmp	r3, #0
 800717c:	d00a      	beq.n	8007194 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800717e:	4b6a      	ldr	r3, [pc, #424]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007184:	f023 020c 	bic.w	r2, r3, #12
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800718c:	4966      	ldr	r1, [pc, #408]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800718e:	4313      	orrs	r3, r2
 8007190:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800719c:	2b00      	cmp	r3, #0
 800719e:	d00a      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80071a0:	4b61      	ldr	r3, [pc, #388]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	495e      	ldr	r1, [pc, #376]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071b0:	4313      	orrs	r3, r2
 80071b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d00a      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80071c2:	4b59      	ldr	r3, [pc, #356]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071c8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071d0:	4955      	ldr	r1, [pc, #340]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071d2:	4313      	orrs	r3, r2
 80071d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00a      	beq.n	80071fa <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80071e4:	4b50      	ldr	r3, [pc, #320]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071f2:	494d      	ldr	r1, [pc, #308]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80071f4:	4313      	orrs	r3, r2
 80071f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00a      	beq.n	800721c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007206:	4b48      	ldr	r3, [pc, #288]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800720c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007214:	4944      	ldr	r1, [pc, #272]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007216:	4313      	orrs	r3, r2
 8007218:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007224:	2b00      	cmp	r3, #0
 8007226:	d00a      	beq.n	800723e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007228:	4b3f      	ldr	r3, [pc, #252]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800722a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800722e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007236:	493c      	ldr	r1, [pc, #240]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007238:	4313      	orrs	r3, r2
 800723a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007246:	2b00      	cmp	r3, #0
 8007248:	d00a      	beq.n	8007260 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800724a:	4b37      	ldr	r3, [pc, #220]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800724c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007250:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007258:	4933      	ldr	r1, [pc, #204]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800725a:	4313      	orrs	r3, r2
 800725c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800726c:	4b2e      	ldr	r3, [pc, #184]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800726e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007272:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800727a:	492b      	ldr	r1, [pc, #172]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800727c:	4313      	orrs	r3, r2
 800727e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800728a:	2b00      	cmp	r3, #0
 800728c:	d011      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800728e:	4b26      	ldr	r3, [pc, #152]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007294:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800729c:	4922      	ldr	r1, [pc, #136]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80072ac:	d101      	bne.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80072ae:	2301      	movs	r3, #1
 80072b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d001      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80072be:	2301      	movs	r3, #1
 80072c0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00a      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072ce:	4b16      	ldr	r3, [pc, #88]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072d4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072dc:	4912      	ldr	r1, [pc, #72]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072de:	4313      	orrs	r3, r2
 80072e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d00b      	beq.n	8007308 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80072f0:	4b0d      	ldr	r3, [pc, #52]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80072f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072f6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007300:	4909      	ldr	r1, [pc, #36]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007302:	4313      	orrs	r3, r2
 8007304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	2b01      	cmp	r3, #1
 800730c:	d006      	beq.n	800731c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007316:	2b00      	cmp	r3, #0
 8007318:	f000 80d9 	beq.w	80074ce <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800731c:	4b02      	ldr	r3, [pc, #8]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a01      	ldr	r2, [pc, #4]	; (8007328 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8007322:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007326:	e001      	b.n	800732c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8007328:	40023800 	.word	0x40023800
 800732c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800732e:	f7fd fdef 	bl	8004f10 <HAL_GetTick>
 8007332:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007334:	e008      	b.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007336:	f7fd fdeb 	bl	8004f10 <HAL_GetTick>
 800733a:	4602      	mov	r2, r0
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	1ad3      	subs	r3, r2, r3
 8007340:	2b64      	cmp	r3, #100	; 0x64
 8007342:	d901      	bls.n	8007348 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007344:	2303      	movs	r3, #3
 8007346:	e194      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007348:	4b6c      	ldr	r3, [pc, #432]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1f0      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f003 0301 	and.w	r3, r3, #1
 800735c:	2b00      	cmp	r3, #0
 800735e:	d021      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007364:	2b00      	cmp	r3, #0
 8007366:	d11d      	bne.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007368:	4b64      	ldr	r3, [pc, #400]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	f003 0303 	and.w	r3, r3, #3
 8007374:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007376:	4b61      	ldr	r3, [pc, #388]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800737c:	0e1b      	lsrs	r3, r3, #24
 800737e:	f003 030f 	and.w	r3, r3, #15
 8007382:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	019a      	lsls	r2, r3, #6
 800738a:	693b      	ldr	r3, [r7, #16]
 800738c:	041b      	lsls	r3, r3, #16
 800738e:	431a      	orrs	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	061b      	lsls	r3, r3, #24
 8007394:	431a      	orrs	r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	689b      	ldr	r3, [r3, #8]
 800739a:	071b      	lsls	r3, r3, #28
 800739c:	4957      	ldr	r1, [pc, #348]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800739e:	4313      	orrs	r3, r2
 80073a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d004      	beq.n	80073ba <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80073b8:	d00a      	beq.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d02e      	beq.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80073ce:	d129      	bne.n	8007424 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80073d0:	4b4a      	ldr	r3, [pc, #296]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073d6:	0c1b      	lsrs	r3, r3, #16
 80073d8:	f003 0303 	and.w	r3, r3, #3
 80073dc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80073de:	4b47      	ldr	r3, [pc, #284]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80073e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073e4:	0f1b      	lsrs	r3, r3, #28
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	685b      	ldr	r3, [r3, #4]
 80073f0:	019a      	lsls	r2, r3, #6
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	041b      	lsls	r3, r3, #16
 80073f6:	431a      	orrs	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	061b      	lsls	r3, r3, #24
 80073fe:	431a      	orrs	r2, r3
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	071b      	lsls	r3, r3, #28
 8007404:	493d      	ldr	r1, [pc, #244]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007406:	4313      	orrs	r3, r2
 8007408:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800740c:	4b3b      	ldr	r3, [pc, #236]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800740e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007412:	f023 021f 	bic.w	r2, r3, #31
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800741a:	3b01      	subs	r3, #1
 800741c:	4937      	ldr	r1, [pc, #220]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800741e:	4313      	orrs	r3, r2
 8007420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01d      	beq.n	800746c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007430:	4b32      	ldr	r3, [pc, #200]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007432:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007436:	0e1b      	lsrs	r3, r3, #24
 8007438:	f003 030f 	and.w	r3, r3, #15
 800743c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800743e:	4b2f      	ldr	r3, [pc, #188]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007444:	0f1b      	lsrs	r3, r3, #28
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	019a      	lsls	r2, r3, #6
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	041b      	lsls	r3, r3, #16
 8007458:	431a      	orrs	r2, r3
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	061b      	lsls	r3, r3, #24
 800745e:	431a      	orrs	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	071b      	lsls	r3, r3, #28
 8007464:	4925      	ldr	r1, [pc, #148]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007466:	4313      	orrs	r3, r2
 8007468:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007474:	2b00      	cmp	r3, #0
 8007476:	d011      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	019a      	lsls	r2, r3, #6
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	691b      	ldr	r3, [r3, #16]
 8007482:	041b      	lsls	r3, r3, #16
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	68db      	ldr	r3, [r3, #12]
 800748a:	061b      	lsls	r3, r3, #24
 800748c:	431a      	orrs	r2, r3
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	071b      	lsls	r3, r3, #28
 8007494:	4919      	ldr	r1, [pc, #100]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8007496:	4313      	orrs	r3, r2
 8007498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800749c:	4b17      	ldr	r3, [pc, #92]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	4a16      	ldr	r2, [pc, #88]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074a8:	f7fd fd32 	bl	8004f10 <HAL_GetTick>
 80074ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074ae:	e008      	b.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80074b0:	f7fd fd2e 	bl	8004f10 <HAL_GetTick>
 80074b4:	4602      	mov	r2, r0
 80074b6:	697b      	ldr	r3, [r7, #20]
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	2b64      	cmp	r3, #100	; 0x64
 80074bc:	d901      	bls.n	80074c2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074be:	2303      	movs	r3, #3
 80074c0:	e0d7      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80074c2:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d0f0      	beq.n	80074b0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	f040 80cd 	bne.w	8007670 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80074d6:	4b09      	ldr	r3, [pc, #36]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a08      	ldr	r2, [pc, #32]	; (80074fc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80074dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80074e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80074e2:	f7fd fd15 	bl	8004f10 <HAL_GetTick>
 80074e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80074e8:	e00a      	b.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80074ea:	f7fd fd11 	bl	8004f10 <HAL_GetTick>
 80074ee:	4602      	mov	r2, r0
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	1ad3      	subs	r3, r2, r3
 80074f4:	2b64      	cmp	r3, #100	; 0x64
 80074f6:	d903      	bls.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80074f8:	2303      	movs	r3, #3
 80074fa:	e0ba      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80074fc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007500:	4b5e      	ldr	r3, [pc, #376]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007508:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800750c:	d0ed      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d003      	beq.n	8007522 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800751e:	2b00      	cmp	r3, #0
 8007520:	d009      	beq.n	8007536 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800752a:	2b00      	cmp	r3, #0
 800752c:	d02e      	beq.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007532:	2b00      	cmp	r3, #0
 8007534:	d12a      	bne.n	800758c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007536:	4b51      	ldr	r3, [pc, #324]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007538:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800753c:	0c1b      	lsrs	r3, r3, #16
 800753e:	f003 0303 	and.w	r3, r3, #3
 8007542:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007544:	4b4d      	ldr	r3, [pc, #308]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800754a:	0f1b      	lsrs	r3, r3, #28
 800754c:	f003 0307 	and.w	r3, r3, #7
 8007550:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	695b      	ldr	r3, [r3, #20]
 8007556:	019a      	lsls	r2, r3, #6
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	041b      	lsls	r3, r3, #16
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	699b      	ldr	r3, [r3, #24]
 8007562:	061b      	lsls	r3, r3, #24
 8007564:	431a      	orrs	r2, r3
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	071b      	lsls	r3, r3, #28
 800756a:	4944      	ldr	r1, [pc, #272]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800756c:	4313      	orrs	r3, r2
 800756e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007572:	4b42      	ldr	r3, [pc, #264]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007578:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	3b01      	subs	r3, #1
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	493d      	ldr	r1, [pc, #244]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007586:	4313      	orrs	r3, r2
 8007588:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007594:	2b00      	cmp	r3, #0
 8007596:	d022      	beq.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800759c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80075a0:	d11d      	bne.n	80075de <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075a2:	4b36      	ldr	r3, [pc, #216]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075a8:	0e1b      	lsrs	r3, r3, #24
 80075aa:	f003 030f 	and.w	r3, r3, #15
 80075ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075b6:	0f1b      	lsrs	r3, r3, #28
 80075b8:	f003 0307 	and.w	r3, r3, #7
 80075bc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	019a      	lsls	r2, r3, #6
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a1b      	ldr	r3, [r3, #32]
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	431a      	orrs	r2, r3
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	061b      	lsls	r3, r3, #24
 80075d0:	431a      	orrs	r2, r3
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	071b      	lsls	r3, r3, #28
 80075d6:	4929      	ldr	r1, [pc, #164]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075d8:	4313      	orrs	r3, r2
 80075da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0308 	and.w	r3, r3, #8
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d028      	beq.n	800763c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80075ea:	4b24      	ldr	r3, [pc, #144]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075f0:	0e1b      	lsrs	r3, r3, #24
 80075f2:	f003 030f 	and.w	r3, r3, #15
 80075f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80075f8:	4b20      	ldr	r3, [pc, #128]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80075fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80075fe:	0c1b      	lsrs	r3, r3, #16
 8007600:	f003 0303 	and.w	r3, r3, #3
 8007604:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	019a      	lsls	r2, r3, #6
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	041b      	lsls	r3, r3, #16
 8007610:	431a      	orrs	r2, r3
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	061b      	lsls	r3, r3, #24
 8007616:	431a      	orrs	r2, r3
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	69db      	ldr	r3, [r3, #28]
 800761c:	071b      	lsls	r3, r3, #28
 800761e:	4917      	ldr	r1, [pc, #92]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007620:	4313      	orrs	r3, r2
 8007622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007628:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800762c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007634:	4911      	ldr	r1, [pc, #68]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007636:	4313      	orrs	r3, r2
 8007638:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800763c:	4b0f      	ldr	r3, [pc, #60]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a0e      	ldr	r2, [pc, #56]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007642:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007646:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007648:	f7fd fc62 	bl	8004f10 <HAL_GetTick>
 800764c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800764e:	e008      	b.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007650:	f7fd fc5e 	bl	8004f10 <HAL_GetTick>
 8007654:	4602      	mov	r2, r0
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	1ad3      	subs	r3, r2, r3
 800765a:	2b64      	cmp	r3, #100	; 0x64
 800765c:	d901      	bls.n	8007662 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e007      	b.n	8007672 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800766a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800766e:	d1ef      	bne.n	8007650 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}
 800767a:	bf00      	nop
 800767c:	40023800 	.word	0x40023800

08007680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d101      	bne.n	8007692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	e049      	b.n	8007726 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	2200      	movs	r2, #0
 80076a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fd f90a 	bl	80048c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681a      	ldr	r2, [r3, #0]
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	3304      	adds	r3, #4
 80076bc:	4619      	mov	r1, r3
 80076be:	4610      	mov	r0, r2
 80076c0:	f000 fdac 	bl	800821c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2201      	movs	r2, #1
 80076c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2201      	movs	r2, #1
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2201      	movs	r2, #1
 80076f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2201      	movs	r2, #1
 80076f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2201      	movs	r2, #1
 8007708:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2201      	movs	r2, #1
 8007718:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2201      	movs	r2, #1
 8007720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007724:	2300      	movs	r3, #0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007730:	b480      	push	{r7}
 8007732:	b085      	sub	sp, #20
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800773e:	b2db      	uxtb	r3, r3
 8007740:	2b01      	cmp	r3, #1
 8007742:	d001      	beq.n	8007748 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e054      	b.n	80077f2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	68da      	ldr	r2, [r3, #12]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a26      	ldr	r2, [pc, #152]	; (8007800 <HAL_TIM_Base_Start_IT+0xd0>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d022      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007772:	d01d      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a22      	ldr	r2, [pc, #136]	; (8007804 <HAL_TIM_Base_Start_IT+0xd4>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d018      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a21      	ldr	r2, [pc, #132]	; (8007808 <HAL_TIM_Base_Start_IT+0xd8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d013      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a1f      	ldr	r2, [pc, #124]	; (800780c <HAL_TIM_Base_Start_IT+0xdc>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d00e      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a1e      	ldr	r2, [pc, #120]	; (8007810 <HAL_TIM_Base_Start_IT+0xe0>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d009      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1c      	ldr	r2, [pc, #112]	; (8007814 <HAL_TIM_Base_Start_IT+0xe4>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d004      	beq.n	80077b0 <HAL_TIM_Base_Start_IT+0x80>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <HAL_TIM_Base_Start_IT+0xe8>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d115      	bne.n	80077dc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	689a      	ldr	r2, [r3, #8]
 80077b6:	4b19      	ldr	r3, [pc, #100]	; (800781c <HAL_TIM_Base_Start_IT+0xec>)
 80077b8:	4013      	ands	r3, r2
 80077ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b06      	cmp	r3, #6
 80077c0:	d015      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0xbe>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077c8:	d011      	beq.n	80077ee <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f042 0201 	orr.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077da:	e008      	b.n	80077ee <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	681a      	ldr	r2, [r3, #0]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f042 0201 	orr.w	r2, r2, #1
 80077ea:	601a      	str	r2, [r3, #0]
 80077ec:	e000      	b.n	80077f0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80077ee:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3714      	adds	r7, #20
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	40010000 	.word	0x40010000
 8007804:	40000400 	.word	0x40000400
 8007808:	40000800 	.word	0x40000800
 800780c:	40000c00 	.word	0x40000c00
 8007810:	40010400 	.word	0x40010400
 8007814:	40014000 	.word	0x40014000
 8007818:	40001800 	.word	0x40001800
 800781c:	00010007 	.word	0x00010007

08007820 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	68da      	ldr	r2, [r3, #12]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f022 0201 	bic.w	r2, r2, #1
 8007836:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	6a1a      	ldr	r2, [r3, #32]
 800783e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007842:	4013      	ands	r3, r2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d10f      	bne.n	8007868 <HAL_TIM_Base_Stop_IT+0x48>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	6a1a      	ldr	r2, [r3, #32]
 800784e:	f240 4344 	movw	r3, #1092	; 0x444
 8007852:	4013      	ands	r3, r2
 8007854:	2b00      	cmp	r3, #0
 8007856:	d107      	bne.n	8007868 <HAL_TIM_Base_Stop_IT+0x48>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	681a      	ldr	r2, [r3, #0]
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f022 0201 	bic.w	r2, r2, #1
 8007866:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007870:	2300      	movs	r3, #0
}
 8007872:	4618      	mov	r0, r3
 8007874:	370c      	adds	r7, #12
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr

0800787e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d101      	bne.n	8007890 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800788c:	2301      	movs	r3, #1
 800788e:	e049      	b.n	8007924 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d106      	bne.n	80078aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2200      	movs	r2, #0
 80078a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 f841 	bl	800792c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2202      	movs	r2, #2
 80078ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681a      	ldr	r2, [r3, #0]
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	3304      	adds	r3, #4
 80078ba:	4619      	mov	r1, r3
 80078bc:	4610      	mov	r0, r2
 80078be:	f000 fcad 	bl	800821c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2201      	movs	r2, #1
 80078c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2201      	movs	r2, #1
 80078ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2201      	movs	r2, #1
 80078de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2201      	movs	r2, #1
 80078ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2201      	movs	r2, #1
 80078f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2201      	movs	r2, #1
 8007906:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2201      	movs	r2, #1
 800790e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2201      	movs	r2, #1
 8007916:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800792c:	b480      	push	{r7}
 800792e:	b083      	sub	sp, #12
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007934:	bf00      	nop
 8007936:	370c      	adds	r7, #12
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d109      	bne.n	8007968 <HAL_TIM_PWM_Start_IT+0x28>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800795a:	b2db      	uxtb	r3, r3
 800795c:	2b01      	cmp	r3, #1
 800795e:	bf14      	ite	ne
 8007960:	2301      	movne	r3, #1
 8007962:	2300      	moveq	r3, #0
 8007964:	b2db      	uxtb	r3, r3
 8007966:	e03c      	b.n	80079e2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007968:	683b      	ldr	r3, [r7, #0]
 800796a:	2b04      	cmp	r3, #4
 800796c:	d109      	bne.n	8007982 <HAL_TIM_PWM_Start_IT+0x42>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007974:	b2db      	uxtb	r3, r3
 8007976:	2b01      	cmp	r3, #1
 8007978:	bf14      	ite	ne
 800797a:	2301      	movne	r3, #1
 800797c:	2300      	moveq	r3, #0
 800797e:	b2db      	uxtb	r3, r3
 8007980:	e02f      	b.n	80079e2 <HAL_TIM_PWM_Start_IT+0xa2>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	2b08      	cmp	r3, #8
 8007986:	d109      	bne.n	800799c <HAL_TIM_PWM_Start_IT+0x5c>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b01      	cmp	r3, #1
 8007992:	bf14      	ite	ne
 8007994:	2301      	movne	r3, #1
 8007996:	2300      	moveq	r3, #0
 8007998:	b2db      	uxtb	r3, r3
 800799a:	e022      	b.n	80079e2 <HAL_TIM_PWM_Start_IT+0xa2>
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	2b0c      	cmp	r3, #12
 80079a0:	d109      	bne.n	80079b6 <HAL_TIM_PWM_Start_IT+0x76>
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	e015      	b.n	80079e2 <HAL_TIM_PWM_Start_IT+0xa2>
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	2b10      	cmp	r3, #16
 80079ba:	d109      	bne.n	80079d0 <HAL_TIM_PWM_Start_IT+0x90>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	bf14      	ite	ne
 80079c8:	2301      	movne	r3, #1
 80079ca:	2300      	moveq	r3, #0
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	e008      	b.n	80079e2 <HAL_TIM_PWM_Start_IT+0xa2>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b01      	cmp	r3, #1
 80079da:	bf14      	ite	ne
 80079dc:	2301      	movne	r3, #1
 80079de:	2300      	moveq	r3, #0
 80079e0:	b2db      	uxtb	r3, r3
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d001      	beq.n	80079ea <HAL_TIM_PWM_Start_IT+0xaa>
  {
    return HAL_ERROR;
 80079e6:	2301      	movs	r3, #1
 80079e8:	e0dd      	b.n	8007ba6 <HAL_TIM_PWM_Start_IT+0x266>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80079ea:	683b      	ldr	r3, [r7, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <HAL_TIM_PWM_Start_IT+0xba>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2202      	movs	r2, #2
 80079f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079f8:	e023      	b.n	8007a42 <HAL_TIM_PWM_Start_IT+0x102>
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	2b04      	cmp	r3, #4
 80079fe:	d104      	bne.n	8007a0a <HAL_TIM_PWM_Start_IT+0xca>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2202      	movs	r2, #2
 8007a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a08:	e01b      	b.n	8007a42 <HAL_TIM_PWM_Start_IT+0x102>
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b08      	cmp	r3, #8
 8007a0e:	d104      	bne.n	8007a1a <HAL_TIM_PWM_Start_IT+0xda>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a18:	e013      	b.n	8007a42 <HAL_TIM_PWM_Start_IT+0x102>
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	2b0c      	cmp	r3, #12
 8007a1e:	d104      	bne.n	8007a2a <HAL_TIM_PWM_Start_IT+0xea>
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007a28:	e00b      	b.n	8007a42 <HAL_TIM_PWM_Start_IT+0x102>
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	2b10      	cmp	r3, #16
 8007a2e:	d104      	bne.n	8007a3a <HAL_TIM_PWM_Start_IT+0xfa>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007a38:	e003      	b.n	8007a42 <HAL_TIM_PWM_Start_IT+0x102>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2202      	movs	r2, #2
 8007a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	2b0c      	cmp	r3, #12
 8007a46:	d841      	bhi.n	8007acc <HAL_TIM_PWM_Start_IT+0x18c>
 8007a48:	a201      	add	r2, pc, #4	; (adr r2, 8007a50 <HAL_TIM_PWM_Start_IT+0x110>)
 8007a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a4e:	bf00      	nop
 8007a50:	08007a85 	.word	0x08007a85
 8007a54:	08007acd 	.word	0x08007acd
 8007a58:	08007acd 	.word	0x08007acd
 8007a5c:	08007acd 	.word	0x08007acd
 8007a60:	08007a97 	.word	0x08007a97
 8007a64:	08007acd 	.word	0x08007acd
 8007a68:	08007acd 	.word	0x08007acd
 8007a6c:	08007acd 	.word	0x08007acd
 8007a70:	08007aa9 	.word	0x08007aa9
 8007a74:	08007acd 	.word	0x08007acd
 8007a78:	08007acd 	.word	0x08007acd
 8007a7c:	08007acd 	.word	0x08007acd
 8007a80:	08007abb 	.word	0x08007abb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68da      	ldr	r2, [r3, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	f042 0202 	orr.w	r2, r2, #2
 8007a92:	60da      	str	r2, [r3, #12]
      break;
 8007a94:	e01d      	b.n	8007ad2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	68da      	ldr	r2, [r3, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f042 0204 	orr.w	r2, r2, #4
 8007aa4:	60da      	str	r2, [r3, #12]
      break;
 8007aa6:	e014      	b.n	8007ad2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	68da      	ldr	r2, [r3, #12]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f042 0208 	orr.w	r2, r2, #8
 8007ab6:	60da      	str	r2, [r3, #12]
      break;
 8007ab8:	e00b      	b.n	8007ad2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	68da      	ldr	r2, [r3, #12]
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f042 0210 	orr.w	r2, r2, #16
 8007ac8:	60da      	str	r2, [r3, #12]
      break;
 8007aca:	e002      	b.n	8007ad2 <HAL_TIM_PWM_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	73fb      	strb	r3, [r7, #15]
      break;
 8007ad0:	bf00      	nop
  }

  if (status == HAL_OK)
 8007ad2:	7bfb      	ldrb	r3, [r7, #15]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d165      	bne.n	8007ba4 <HAL_TIM_PWM_Start_IT+0x264>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	2201      	movs	r2, #1
 8007ade:	6839      	ldr	r1, [r7, #0]
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f000 ff33 	bl	800894c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a31      	ldr	r2, [pc, #196]	; (8007bb0 <HAL_TIM_PWM_Start_IT+0x270>)
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d004      	beq.n	8007afa <HAL_TIM_PWM_Start_IT+0x1ba>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a2f      	ldr	r2, [pc, #188]	; (8007bb4 <HAL_TIM_PWM_Start_IT+0x274>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d101      	bne.n	8007afe <HAL_TIM_PWM_Start_IT+0x1be>
 8007afa:	2301      	movs	r3, #1
 8007afc:	e000      	b.n	8007b00 <HAL_TIM_PWM_Start_IT+0x1c0>
 8007afe:	2300      	movs	r3, #0
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d007      	beq.n	8007b14 <HAL_TIM_PWM_Start_IT+0x1d4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a25      	ldr	r2, [pc, #148]	; (8007bb0 <HAL_TIM_PWM_Start_IT+0x270>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d022      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b26:	d01d      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a22      	ldr	r2, [pc, #136]	; (8007bb8 <HAL_TIM_PWM_Start_IT+0x278>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d018      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a21      	ldr	r2, [pc, #132]	; (8007bbc <HAL_TIM_PWM_Start_IT+0x27c>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d013      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a1f      	ldr	r2, [pc, #124]	; (8007bc0 <HAL_TIM_PWM_Start_IT+0x280>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d00e      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a1a      	ldr	r2, [pc, #104]	; (8007bb4 <HAL_TIM_PWM_Start_IT+0x274>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d009      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a1b      	ldr	r2, [pc, #108]	; (8007bc4 <HAL_TIM_PWM_Start_IT+0x284>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d004      	beq.n	8007b64 <HAL_TIM_PWM_Start_IT+0x224>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a1a      	ldr	r2, [pc, #104]	; (8007bc8 <HAL_TIM_PWM_Start_IT+0x288>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d115      	bne.n	8007b90 <HAL_TIM_PWM_Start_IT+0x250>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	689a      	ldr	r2, [r3, #8]
 8007b6a:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <HAL_TIM_PWM_Start_IT+0x28c>)
 8007b6c:	4013      	ands	r3, r2
 8007b6e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b06      	cmp	r3, #6
 8007b74:	d015      	beq.n	8007ba2 <HAL_TIM_PWM_Start_IT+0x262>
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b7c:	d011      	beq.n	8007ba2 <HAL_TIM_PWM_Start_IT+0x262>
      {
        __HAL_TIM_ENABLE(htim);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	681a      	ldr	r2, [r3, #0]
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f042 0201 	orr.w	r2, r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b8e:	e008      	b.n	8007ba2 <HAL_TIM_PWM_Start_IT+0x262>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0201 	orr.w	r2, r2, #1
 8007b9e:	601a      	str	r2, [r3, #0]
 8007ba0:	e000      	b.n	8007ba4 <HAL_TIM_PWM_Start_IT+0x264>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba2:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007ba4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3710      	adds	r7, #16
 8007baa:	46bd      	mov	sp, r7
 8007bac:	bd80      	pop	{r7, pc}
 8007bae:	bf00      	nop
 8007bb0:	40010000 	.word	0x40010000
 8007bb4:	40010400 	.word	0x40010400
 8007bb8:	40000400 	.word	0x40000400
 8007bbc:	40000800 	.word	0x40000800
 8007bc0:	40000c00 	.word	0x40000c00
 8007bc4:	40014000 	.word	0x40014000
 8007bc8:	40001800 	.word	0x40001800
 8007bcc:	00010007 	.word	0x00010007

08007bd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b082      	sub	sp, #8
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d122      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0302 	and.w	r3, r3, #2
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d11b      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0202 	mvn.w	r2, #2
 8007bfc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2201      	movs	r2, #1
 8007c02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 fae4 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007c18:	e005      	b.n	8007c26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fad6 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fae7 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0304 	and.w	r3, r3, #4
 8007c36:	2b04      	cmp	r3, #4
 8007c38:	d122      	bne.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0304 	and.w	r3, r3, #4
 8007c44:	2b04      	cmp	r3, #4
 8007c46:	d11b      	bne.n	8007c80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0204 	mvn.w	r2, #4
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	699b      	ldr	r3, [r3, #24]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 faba 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 faac 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 fabd 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0308 	and.w	r3, r3, #8
 8007c8a:	2b08      	cmp	r3, #8
 8007c8c:	d122      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0308 	and.w	r3, r3, #8
 8007c98:	2b08      	cmp	r3, #8
 8007c9a:	d11b      	bne.n	8007cd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0208 	mvn.w	r2, #8
 8007ca4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2204      	movs	r2, #4
 8007caa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	69db      	ldr	r3, [r3, #28]
 8007cb2:	f003 0303 	and.w	r3, r3, #3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d003      	beq.n	8007cc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 fa90 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007cc0:	e005      	b.n	8007cce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 fa82 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cc8:	6878      	ldr	r0, [r7, #4]
 8007cca:	f000 fa93 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	f003 0310 	and.w	r3, r3, #16
 8007cde:	2b10      	cmp	r3, #16
 8007ce0:	d122      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	f003 0310 	and.w	r3, r3, #16
 8007cec:	2b10      	cmp	r3, #16
 8007cee:	d11b      	bne.n	8007d28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	f06f 0210 	mvn.w	r2, #16
 8007cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	69db      	ldr	r3, [r3, #28]
 8007d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d003      	beq.n	8007d16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f000 fa66 	bl	80081e0 <HAL_TIM_IC_CaptureCallback>
 8007d14:	e005      	b.n	8007d22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f000 fa58 	bl	80081cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	f000 fa69 	bl	80081f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	691b      	ldr	r3, [r3, #16]
 8007d2e:	f003 0301 	and.w	r3, r3, #1
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d10e      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	f003 0301 	and.w	r3, r3, #1
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d107      	bne.n	8007d54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f06f 0201 	mvn.w	r2, #1
 8007d4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f7f9 fef2 	bl	8001b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	691b      	ldr	r3, [r3, #16]
 8007d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d5e:	2b80      	cmp	r3, #128	; 0x80
 8007d60:	d10e      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d6c:	2b80      	cmp	r3, #128	; 0x80
 8007d6e:	d107      	bne.n	8007d80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fea4 	bl	8008ac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	691b      	ldr	r3, [r3, #16]
 8007d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d8e:	d10e      	bne.n	8007dae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	68db      	ldr	r3, [r3, #12]
 8007d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9a:	2b80      	cmp	r3, #128	; 0x80
 8007d9c:	d107      	bne.n	8007dae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fe97 	bl	8008adc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b40      	cmp	r3, #64	; 0x40
 8007dba:	d10e      	bne.n	8007dda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dc6:	2b40      	cmp	r3, #64	; 0x40
 8007dc8:	d107      	bne.n	8007dda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dd4:	6878      	ldr	r0, [r7, #4]
 8007dd6:	f000 fa17 	bl	8008208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	691b      	ldr	r3, [r3, #16]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d10e      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	68db      	ldr	r3, [r3, #12]
 8007dee:	f003 0320 	and.w	r3, r3, #32
 8007df2:	2b20      	cmp	r3, #32
 8007df4:	d107      	bne.n	8007e06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f06f 0220 	mvn.w	r2, #32
 8007dfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 fe57 	bl	8008ab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007e06:	bf00      	nop
 8007e08:	3708      	adds	r7, #8
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d101      	bne.n	8007e2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e2a:	2302      	movs	r3, #2
 8007e2c:	e0ff      	b.n	800802e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2b14      	cmp	r3, #20
 8007e3a:	f200 80f0 	bhi.w	800801e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e99 	.word	0x08007e99
 8007e48:	0800801f 	.word	0x0800801f
 8007e4c:	0800801f 	.word	0x0800801f
 8007e50:	0800801f 	.word	0x0800801f
 8007e54:	08007ed9 	.word	0x08007ed9
 8007e58:	0800801f 	.word	0x0800801f
 8007e5c:	0800801f 	.word	0x0800801f
 8007e60:	0800801f 	.word	0x0800801f
 8007e64:	08007f1b 	.word	0x08007f1b
 8007e68:	0800801f 	.word	0x0800801f
 8007e6c:	0800801f 	.word	0x0800801f
 8007e70:	0800801f 	.word	0x0800801f
 8007e74:	08007f5b 	.word	0x08007f5b
 8007e78:	0800801f 	.word	0x0800801f
 8007e7c:	0800801f 	.word	0x0800801f
 8007e80:	0800801f 	.word	0x0800801f
 8007e84:	08007f9d 	.word	0x08007f9d
 8007e88:	0800801f 	.word	0x0800801f
 8007e8c:	0800801f 	.word	0x0800801f
 8007e90:	0800801f 	.word	0x0800801f
 8007e94:	08007fdd 	.word	0x08007fdd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68b9      	ldr	r1, [r7, #8]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f000 fa5c 	bl	800835c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	699a      	ldr	r2, [r3, #24]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f042 0208 	orr.w	r2, r2, #8
 8007eb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f022 0204 	bic.w	r2, r2, #4
 8007ec2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	6999      	ldr	r1, [r3, #24]
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	691a      	ldr	r2, [r3, #16]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	430a      	orrs	r2, r1
 8007ed4:	619a      	str	r2, [r3, #24]
      break;
 8007ed6:	e0a5      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 faae 	bl	8008440 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	699a      	ldr	r2, [r3, #24]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ef2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	699a      	ldr	r2, [r3, #24]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	6999      	ldr	r1, [r3, #24]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	021a      	lsls	r2, r3, #8
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	619a      	str	r2, [r3, #24]
      break;
 8007f18:	e084      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	68b9      	ldr	r1, [r7, #8]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fb05 	bl	8008530 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	69da      	ldr	r2, [r3, #28]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0208 	orr.w	r2, r2, #8
 8007f34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f022 0204 	bic.w	r2, r2, #4
 8007f44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69d9      	ldr	r1, [r3, #28]
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	691a      	ldr	r2, [r3, #16]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	430a      	orrs	r2, r1
 8007f56:	61da      	str	r2, [r3, #28]
      break;
 8007f58:	e064      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68b9      	ldr	r1, [r7, #8]
 8007f60:	4618      	mov	r0, r3
 8007f62:	f000 fb5b 	bl	800861c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	69da      	ldr	r2, [r3, #28]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	69da      	ldr	r2, [r3, #28]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	021a      	lsls	r2, r3, #8
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	430a      	orrs	r2, r1
 8007f98:	61da      	str	r2, [r3, #28]
      break;
 8007f9a:	e043      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68b9      	ldr	r1, [r7, #8]
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fb92 	bl	80086cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f042 0208 	orr.w	r2, r2, #8
 8007fb6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	f022 0204 	bic.w	r2, r2, #4
 8007fc6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	691a      	ldr	r2, [r3, #16]
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007fda:	e023      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	68b9      	ldr	r1, [r7, #8]
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fbc4 	bl	8008770 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ff6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008006:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	691b      	ldr	r3, [r3, #16]
 8008012:	021a      	lsls	r2, r3, #8
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800801c:	e002      	b.n	8008024 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800801e:	2301      	movs	r3, #1
 8008020:	75fb      	strb	r3, [r7, #23]
      break;
 8008022:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	2200      	movs	r2, #0
 8008028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800802c:	7dfb      	ldrb	r3, [r7, #23]
}
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}
 8008036:	bf00      	nop

08008038 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b084      	sub	sp, #16
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008042:	2300      	movs	r3, #0
 8008044:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_TIM_ConfigClockSource+0x1c>
 8008050:	2302      	movs	r3, #2
 8008052:	e0b4      	b.n	80081be <HAL_TIM_ConfigClockSource+0x186>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2202      	movs	r2, #2
 8008060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	4b56      	ldr	r3, [pc, #344]	; (80081c8 <HAL_TIM_ConfigClockSource+0x190>)
 8008070:	4013      	ands	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800807a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68ba      	ldr	r2, [r7, #8]
 8008082:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800808c:	d03e      	beq.n	800810c <HAL_TIM_ConfigClockSource+0xd4>
 800808e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008092:	f200 8087 	bhi.w	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 8008096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800809a:	f000 8086 	beq.w	80081aa <HAL_TIM_ConfigClockSource+0x172>
 800809e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080a2:	d87f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080a4:	2b70      	cmp	r3, #112	; 0x70
 80080a6:	d01a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0xa6>
 80080a8:	2b70      	cmp	r3, #112	; 0x70
 80080aa:	d87b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080ac:	2b60      	cmp	r3, #96	; 0x60
 80080ae:	d050      	beq.n	8008152 <HAL_TIM_ConfigClockSource+0x11a>
 80080b0:	2b60      	cmp	r3, #96	; 0x60
 80080b2:	d877      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080b4:	2b50      	cmp	r3, #80	; 0x50
 80080b6:	d03c      	beq.n	8008132 <HAL_TIM_ConfigClockSource+0xfa>
 80080b8:	2b50      	cmp	r3, #80	; 0x50
 80080ba:	d873      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080bc:	2b40      	cmp	r3, #64	; 0x40
 80080be:	d058      	beq.n	8008172 <HAL_TIM_ConfigClockSource+0x13a>
 80080c0:	2b40      	cmp	r3, #64	; 0x40
 80080c2:	d86f      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080c4:	2b30      	cmp	r3, #48	; 0x30
 80080c6:	d064      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080c8:	2b30      	cmp	r3, #48	; 0x30
 80080ca:	d86b      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080cc:	2b20      	cmp	r3, #32
 80080ce:	d060      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080d0:	2b20      	cmp	r3, #32
 80080d2:	d867      	bhi.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d05c      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080d8:	2b10      	cmp	r3, #16
 80080da:	d05a      	beq.n	8008192 <HAL_TIM_ConfigClockSource+0x15a>
 80080dc:	e062      	b.n	80081a4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6818      	ldr	r0, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	6899      	ldr	r1, [r3, #8]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	685a      	ldr	r2, [r3, #4]
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	68db      	ldr	r3, [r3, #12]
 80080ee:	f000 fc0d 	bl	800890c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	689b      	ldr	r3, [r3, #8]
 80080f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008100:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	609a      	str	r2, [r3, #8]
      break;
 800810a:	e04f      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6818      	ldr	r0, [r3, #0]
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	6899      	ldr	r1, [r3, #8]
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	685a      	ldr	r2, [r3, #4]
 8008118:	683b      	ldr	r3, [r7, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f000 fbf6 	bl	800890c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	689a      	ldr	r2, [r3, #8]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800812e:	609a      	str	r2, [r3, #8]
      break;
 8008130:	e03c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6818      	ldr	r0, [r3, #0]
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	6859      	ldr	r1, [r3, #4]
 800813a:	683b      	ldr	r3, [r7, #0]
 800813c:	68db      	ldr	r3, [r3, #12]
 800813e:	461a      	mov	r2, r3
 8008140:	f000 fb6a 	bl	8008818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	2150      	movs	r1, #80	; 0x50
 800814a:	4618      	mov	r0, r3
 800814c:	f000 fbc3 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008150:	e02c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6818      	ldr	r0, [r3, #0]
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	6859      	ldr	r1, [r3, #4]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68db      	ldr	r3, [r3, #12]
 800815e:	461a      	mov	r2, r3
 8008160:	f000 fb89 	bl	8008876 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	2160      	movs	r1, #96	; 0x60
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fbb3 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008170:	e01c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	6859      	ldr	r1, [r3, #4]
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	461a      	mov	r2, r3
 8008180:	f000 fb4a 	bl	8008818 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	2140      	movs	r1, #64	; 0x40
 800818a:	4618      	mov	r0, r3
 800818c:	f000 fba3 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 8008190:	e00c      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4619      	mov	r1, r3
 800819c:	4610      	mov	r0, r2
 800819e:	f000 fb9a 	bl	80088d6 <TIM_ITRx_SetConfig>
      break;
 80081a2:	e003      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80081a4:	2301      	movs	r3, #1
 80081a6:	73fb      	strb	r3, [r7, #15]
      break;
 80081a8:	e000      	b.n	80081ac <HAL_TIM_ConfigClockSource+0x174>
      break;
 80081aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80081bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	fffeff88 	.word	0xfffeff88

080081cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b083      	sub	sp, #12
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr

080081e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80081e8:	bf00      	nop
 80081ea:	370c      	adds	r7, #12
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
 8008224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4a40      	ldr	r2, [pc, #256]	; (8008330 <TIM_Base_SetConfig+0x114>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d013      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d00f      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	4a3d      	ldr	r2, [pc, #244]	; (8008334 <TIM_Base_SetConfig+0x118>)
 8008240:	4293      	cmp	r3, r2
 8008242:	d00b      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	4a3c      	ldr	r2, [pc, #240]	; (8008338 <TIM_Base_SetConfig+0x11c>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d007      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	4a3b      	ldr	r2, [pc, #236]	; (800833c <TIM_Base_SetConfig+0x120>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d003      	beq.n	800825c <TIM_Base_SetConfig+0x40>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	4a3a      	ldr	r2, [pc, #232]	; (8008340 <TIM_Base_SetConfig+0x124>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d108      	bne.n	800826e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	4a2f      	ldr	r2, [pc, #188]	; (8008330 <TIM_Base_SetConfig+0x114>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d02b      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800827c:	d027      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <TIM_Base_SetConfig+0x118>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d023      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <TIM_Base_SetConfig+0x11c>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d01f      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	4a2a      	ldr	r2, [pc, #168]	; (800833c <TIM_Base_SetConfig+0x120>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d01b      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	4a29      	ldr	r2, [pc, #164]	; (8008340 <TIM_Base_SetConfig+0x124>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d017      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a28      	ldr	r2, [pc, #160]	; (8008344 <TIM_Base_SetConfig+0x128>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d013      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	4a27      	ldr	r2, [pc, #156]	; (8008348 <TIM_Base_SetConfig+0x12c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d00f      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a26      	ldr	r2, [pc, #152]	; (800834c <TIM_Base_SetConfig+0x130>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00b      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a25      	ldr	r2, [pc, #148]	; (8008350 <TIM_Base_SetConfig+0x134>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d007      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	4a24      	ldr	r2, [pc, #144]	; (8008354 <TIM_Base_SetConfig+0x138>)
 80082c2:	4293      	cmp	r3, r2
 80082c4:	d003      	beq.n	80082ce <TIM_Base_SetConfig+0xb2>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	4a23      	ldr	r2, [pc, #140]	; (8008358 <TIM_Base_SetConfig+0x13c>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d108      	bne.n	80082e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	68db      	ldr	r3, [r3, #12]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	4313      	orrs	r3, r2
 80082de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	695b      	ldr	r3, [r3, #20]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	689a      	ldr	r2, [r3, #8]
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <TIM_Base_SetConfig+0x114>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d003      	beq.n	8008314 <TIM_Base_SetConfig+0xf8>
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4a0c      	ldr	r2, [pc, #48]	; (8008340 <TIM_Base_SetConfig+0x124>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d103      	bne.n	800831c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	691a      	ldr	r2, [r3, #16]
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2201      	movs	r2, #1
 8008320:	615a      	str	r2, [r3, #20]
}
 8008322:	bf00      	nop
 8008324:	3714      	adds	r7, #20
 8008326:	46bd      	mov	sp, r7
 8008328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40010000 	.word	0x40010000
 8008334:	40000400 	.word	0x40000400
 8008338:	40000800 	.word	0x40000800
 800833c:	40000c00 	.word	0x40000c00
 8008340:	40010400 	.word	0x40010400
 8008344:	40014000 	.word	0x40014000
 8008348:	40014400 	.word	0x40014400
 800834c:	40014800 	.word	0x40014800
 8008350:	40001800 	.word	0x40001800
 8008354:	40001c00 	.word	0x40001c00
 8008358:	40002000 	.word	0x40002000

0800835c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800835c:	b480      	push	{r7}
 800835e:	b087      	sub	sp, #28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	f023 0201 	bic.w	r2, r3, #1
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a1b      	ldr	r3, [r3, #32]
 8008376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	685b      	ldr	r3, [r3, #4]
 800837c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	699b      	ldr	r3, [r3, #24]
 8008382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008384:	68fa      	ldr	r2, [r7, #12]
 8008386:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <TIM_OC1_SetConfig+0xd8>)
 8008388:	4013      	ands	r3, r2
 800838a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f023 0303 	bic.w	r3, r3, #3
 8008392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	4313      	orrs	r3, r2
 800839c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800839e:	697b      	ldr	r3, [r7, #20]
 80083a0:	f023 0302 	bic.w	r3, r3, #2
 80083a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	689b      	ldr	r3, [r3, #8]
 80083aa:	697a      	ldr	r2, [r7, #20]
 80083ac:	4313      	orrs	r3, r2
 80083ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a21      	ldr	r2, [pc, #132]	; (8008438 <TIM_OC1_SetConfig+0xdc>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d003      	beq.n	80083c0 <TIM_OC1_SetConfig+0x64>
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	4a20      	ldr	r2, [pc, #128]	; (800843c <TIM_OC1_SetConfig+0xe0>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10c      	bne.n	80083da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	f023 0308 	bic.w	r3, r3, #8
 80083c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f023 0304 	bic.w	r3, r3, #4
 80083d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a16      	ldr	r2, [pc, #88]	; (8008438 <TIM_OC1_SetConfig+0xdc>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d003      	beq.n	80083ea <TIM_OC1_SetConfig+0x8e>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a15      	ldr	r2, [pc, #84]	; (800843c <TIM_OC1_SetConfig+0xe0>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d111      	bne.n	800840e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80083f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80083f2:	693b      	ldr	r3, [r7, #16]
 80083f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	695b      	ldr	r3, [r3, #20]
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008404:	683b      	ldr	r3, [r7, #0]
 8008406:	699b      	ldr	r3, [r3, #24]
 8008408:	693a      	ldr	r2, [r7, #16]
 800840a:	4313      	orrs	r3, r2
 800840c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	693a      	ldr	r2, [r7, #16]
 8008412:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685a      	ldr	r2, [r3, #4]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	697a      	ldr	r2, [r7, #20]
 8008426:	621a      	str	r2, [r3, #32]
}
 8008428:	bf00      	nop
 800842a:	371c      	adds	r7, #28
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr
 8008434:	fffeff8f 	.word	0xfffeff8f
 8008438:	40010000 	.word	0x40010000
 800843c:	40010400 	.word	0x40010400

08008440 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008440:	b480      	push	{r7}
 8008442:	b087      	sub	sp, #28
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
 8008448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a1b      	ldr	r3, [r3, #32]
 800844e:	f023 0210 	bic.w	r2, r3, #16
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	6a1b      	ldr	r3, [r3, #32]
 800845a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	685b      	ldr	r3, [r3, #4]
 8008460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <TIM_OC2_SetConfig+0xe4>)
 800846c:	4013      	ands	r3, r2
 800846e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008476:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008478:	683b      	ldr	r3, [r7, #0]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	021b      	lsls	r3, r3, #8
 800847e:	68fa      	ldr	r2, [r7, #12]
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008484:	697b      	ldr	r3, [r7, #20]
 8008486:	f023 0320 	bic.w	r3, r3, #32
 800848a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800848c:	683b      	ldr	r3, [r7, #0]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	011b      	lsls	r3, r3, #4
 8008492:	697a      	ldr	r2, [r7, #20]
 8008494:	4313      	orrs	r3, r2
 8008496:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	4a23      	ldr	r2, [pc, #140]	; (8008528 <TIM_OC2_SetConfig+0xe8>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d003      	beq.n	80084a8 <TIM_OC2_SetConfig+0x68>
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4a22      	ldr	r2, [pc, #136]	; (800852c <TIM_OC2_SetConfig+0xec>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d10d      	bne.n	80084c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	68db      	ldr	r3, [r3, #12]
 80084b4:	011b      	lsls	r3, r3, #4
 80084b6:	697a      	ldr	r2, [r7, #20]
 80084b8:	4313      	orrs	r3, r2
 80084ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80084bc:	697b      	ldr	r3, [r7, #20]
 80084be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	4a18      	ldr	r2, [pc, #96]	; (8008528 <TIM_OC2_SetConfig+0xe8>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d003      	beq.n	80084d4 <TIM_OC2_SetConfig+0x94>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	4a17      	ldr	r2, [pc, #92]	; (800852c <TIM_OC2_SetConfig+0xec>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d113      	bne.n	80084fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80084da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80084e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	009b      	lsls	r3, r3, #2
 80084ea:	693a      	ldr	r2, [r7, #16]
 80084ec:	4313      	orrs	r3, r2
 80084ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	699b      	ldr	r3, [r3, #24]
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	693a      	ldr	r2, [r7, #16]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	693a      	ldr	r2, [r7, #16]
 8008500:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	685a      	ldr	r2, [r3, #4]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	621a      	str	r2, [r3, #32]
}
 8008516:	bf00      	nop
 8008518:	371c      	adds	r7, #28
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	feff8fff 	.word	0xfeff8fff
 8008528:	40010000 	.word	0x40010000
 800852c:	40010400 	.word	0x40010400

08008530 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008530:	b480      	push	{r7}
 8008532:	b087      	sub	sp, #28
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6a1b      	ldr	r3, [r3, #32]
 800853e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a1b      	ldr	r3, [r3, #32]
 800854a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685b      	ldr	r3, [r3, #4]
 8008550:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	69db      	ldr	r3, [r3, #28]
 8008556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008558:	68fa      	ldr	r2, [r7, #12]
 800855a:	4b2d      	ldr	r3, [pc, #180]	; (8008610 <TIM_OC3_SetConfig+0xe0>)
 800855c:	4013      	ands	r3, r2
 800855e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f023 0303 	bic.w	r3, r3, #3
 8008566:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	4313      	orrs	r3, r2
 8008570:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008578:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	689b      	ldr	r3, [r3, #8]
 800857e:	021b      	lsls	r3, r3, #8
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	4313      	orrs	r3, r2
 8008584:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	4a22      	ldr	r2, [pc, #136]	; (8008614 <TIM_OC3_SetConfig+0xe4>)
 800858a:	4293      	cmp	r3, r2
 800858c:	d003      	beq.n	8008596 <TIM_OC3_SetConfig+0x66>
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	4a21      	ldr	r2, [pc, #132]	; (8008618 <TIM_OC3_SetConfig+0xe8>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d10d      	bne.n	80085b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800859c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	68db      	ldr	r3, [r3, #12]
 80085a2:	021b      	lsls	r3, r3, #8
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80085aa:	697b      	ldr	r3, [r7, #20]
 80085ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80085b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	4a17      	ldr	r2, [pc, #92]	; (8008614 <TIM_OC3_SetConfig+0xe4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d003      	beq.n	80085c2 <TIM_OC3_SetConfig+0x92>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a16      	ldr	r2, [pc, #88]	; (8008618 <TIM_OC3_SetConfig+0xe8>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d113      	bne.n	80085ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80085c2:	693b      	ldr	r3, [r7, #16]
 80085c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80085ca:	693b      	ldr	r3, [r7, #16]
 80085cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80085d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	695b      	ldr	r3, [r3, #20]
 80085d6:	011b      	lsls	r3, r3, #4
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	4313      	orrs	r3, r2
 80085dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	699b      	ldr	r3, [r3, #24]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	693a      	ldr	r2, [r7, #16]
 80085ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	697a      	ldr	r2, [r7, #20]
 8008602:	621a      	str	r2, [r3, #32]
}
 8008604:	bf00      	nop
 8008606:	371c      	adds	r7, #28
 8008608:	46bd      	mov	sp, r7
 800860a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860e:	4770      	bx	lr
 8008610:	fffeff8f 	.word	0xfffeff8f
 8008614:	40010000 	.word	0x40010000
 8008618:	40010400 	.word	0x40010400

0800861c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800861c:	b480      	push	{r7}
 800861e:	b087      	sub	sp, #28
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	685b      	ldr	r3, [r3, #4]
 800863c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	4b1e      	ldr	r3, [pc, #120]	; (80086c0 <TIM_OC4_SetConfig+0xa4>)
 8008648:	4013      	ands	r3, r2
 800864a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008654:	683b      	ldr	r3, [r7, #0]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	021b      	lsls	r3, r3, #8
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	4313      	orrs	r3, r2
 800865e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	031b      	lsls	r3, r3, #12
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	4a13      	ldr	r2, [pc, #76]	; (80086c4 <TIM_OC4_SetConfig+0xa8>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d003      	beq.n	8008684 <TIM_OC4_SetConfig+0x68>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	4a12      	ldr	r2, [pc, #72]	; (80086c8 <TIM_OC4_SetConfig+0xac>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d109      	bne.n	8008698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800868a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	695b      	ldr	r3, [r3, #20]
 8008690:	019b      	lsls	r3, r3, #6
 8008692:	697a      	ldr	r2, [r7, #20]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	697a      	ldr	r2, [r7, #20]
 800869c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	693a      	ldr	r2, [r7, #16]
 80086b0:	621a      	str	r2, [r3, #32]
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	feff8fff 	.word	0xfeff8fff
 80086c4:	40010000 	.word	0x40010000
 80086c8:	40010400 	.word	0x40010400

080086cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b087      	sub	sp, #28
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6a1b      	ldr	r3, [r3, #32]
 80086e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80086f4:	68fa      	ldr	r2, [r7, #12]
 80086f6:	4b1b      	ldr	r3, [pc, #108]	; (8008764 <TIM_OC5_SetConfig+0x98>)
 80086f8:	4013      	ands	r3, r2
 80086fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	68fa      	ldr	r2, [r7, #12]
 8008702:	4313      	orrs	r3, r2
 8008704:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800870c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	689b      	ldr	r3, [r3, #8]
 8008712:	041b      	lsls	r3, r3, #16
 8008714:	693a      	ldr	r2, [r7, #16]
 8008716:	4313      	orrs	r3, r2
 8008718:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	4a12      	ldr	r2, [pc, #72]	; (8008768 <TIM_OC5_SetConfig+0x9c>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d003      	beq.n	800872a <TIM_OC5_SetConfig+0x5e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	4a11      	ldr	r2, [pc, #68]	; (800876c <TIM_OC5_SetConfig+0xa0>)
 8008726:	4293      	cmp	r3, r2
 8008728:	d109      	bne.n	800873e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008730:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008732:	683b      	ldr	r3, [r7, #0]
 8008734:	695b      	ldr	r3, [r3, #20]
 8008736:	021b      	lsls	r3, r3, #8
 8008738:	697a      	ldr	r2, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	697a      	ldr	r2, [r7, #20]
 8008742:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	68fa      	ldr	r2, [r7, #12]
 8008748:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	685a      	ldr	r2, [r3, #4]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	621a      	str	r2, [r3, #32]
}
 8008758:	bf00      	nop
 800875a:	371c      	adds	r7, #28
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr
 8008764:	fffeff8f 	.word	0xfffeff8f
 8008768:	40010000 	.word	0x40010000
 800876c:	40010400 	.word	0x40010400

08008770 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8008770:	b480      	push	{r7}
 8008772:	b087      	sub	sp, #28
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a1b      	ldr	r3, [r3, #32]
 800877e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a1b      	ldr	r3, [r3, #32]
 800878a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	685b      	ldr	r3, [r3, #4]
 8008790:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008798:	68fa      	ldr	r2, [r7, #12]
 800879a:	4b1c      	ldr	r3, [pc, #112]	; (800880c <TIM_OC6_SetConfig+0x9c>)
 800879c:	4013      	ands	r3, r2
 800879e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	021b      	lsls	r3, r3, #8
 80087a6:	68fa      	ldr	r2, [r7, #12]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80087ac:	693b      	ldr	r3, [r7, #16]
 80087ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80087b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80087b4:	683b      	ldr	r3, [r7, #0]
 80087b6:	689b      	ldr	r3, [r3, #8]
 80087b8:	051b      	lsls	r3, r3, #20
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a13      	ldr	r2, [pc, #76]	; (8008810 <TIM_OC6_SetConfig+0xa0>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d003      	beq.n	80087d0 <TIM_OC6_SetConfig+0x60>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	4a12      	ldr	r2, [pc, #72]	; (8008814 <TIM_OC6_SetConfig+0xa4>)
 80087cc:	4293      	cmp	r3, r2
 80087ce:	d109      	bne.n	80087e4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	695b      	ldr	r3, [r3, #20]
 80087dc:	029b      	lsls	r3, r3, #10
 80087de:	697a      	ldr	r2, [r7, #20]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	697a      	ldr	r2, [r7, #20]
 80087e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	68fa      	ldr	r2, [r7, #12]
 80087ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	685a      	ldr	r2, [r3, #4]
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	693a      	ldr	r2, [r7, #16]
 80087fc:	621a      	str	r2, [r3, #32]
}
 80087fe:	bf00      	nop
 8008800:	371c      	adds	r7, #28
 8008802:	46bd      	mov	sp, r7
 8008804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008808:	4770      	bx	lr
 800880a:	bf00      	nop
 800880c:	feff8fff 	.word	0xfeff8fff
 8008810:	40010000 	.word	0x40010000
 8008814:	40010400 	.word	0x40010400

08008818 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008818:	b480      	push	{r7}
 800881a:	b087      	sub	sp, #28
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	6a1b      	ldr	r3, [r3, #32]
 8008828:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6a1b      	ldr	r3, [r3, #32]
 800882e:	f023 0201 	bic.w	r2, r3, #1
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	699b      	ldr	r3, [r3, #24]
 800883a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008842:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	011b      	lsls	r3, r3, #4
 8008848:	693a      	ldr	r2, [r7, #16]
 800884a:	4313      	orrs	r3, r2
 800884c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f023 030a 	bic.w	r3, r3, #10
 8008854:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008856:	697a      	ldr	r2, [r7, #20]
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	4313      	orrs	r3, r2
 800885c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	693a      	ldr	r2, [r7, #16]
 8008862:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	621a      	str	r2, [r3, #32]
}
 800886a:	bf00      	nop
 800886c:	371c      	adds	r7, #28
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008876:	b480      	push	{r7}
 8008878:	b087      	sub	sp, #28
 800887a:	af00      	add	r7, sp, #0
 800887c:	60f8      	str	r0, [r7, #12]
 800887e:	60b9      	str	r1, [r7, #8]
 8008880:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	6a1b      	ldr	r3, [r3, #32]
 8008886:	f023 0210 	bic.w	r2, r3, #16
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	699b      	ldr	r3, [r3, #24]
 8008892:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	6a1b      	ldr	r3, [r3, #32]
 8008898:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800889a:	697b      	ldr	r3, [r7, #20]
 800889c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	031b      	lsls	r3, r3, #12
 80088a6:	697a      	ldr	r2, [r7, #20]
 80088a8:	4313      	orrs	r3, r2
 80088aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088ac:	693b      	ldr	r3, [r7, #16]
 80088ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80088b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	4313      	orrs	r3, r2
 80088bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	697a      	ldr	r2, [r7, #20]
 80088c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	693a      	ldr	r2, [r7, #16]
 80088c8:	621a      	str	r2, [r3, #32]
}
 80088ca:	bf00      	nop
 80088cc:	371c      	adds	r7, #28
 80088ce:	46bd      	mov	sp, r7
 80088d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d4:	4770      	bx	lr

080088d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80088d6:	b480      	push	{r7}
 80088d8:	b085      	sub	sp, #20
 80088da:	af00      	add	r7, sp, #0
 80088dc:	6078      	str	r0, [r7, #4]
 80088de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	689b      	ldr	r3, [r3, #8]
 80088e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80088ee:	683a      	ldr	r2, [r7, #0]
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	f043 0307 	orr.w	r3, r3, #7
 80088f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	609a      	str	r2, [r3, #8]
}
 8008900:	bf00      	nop
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800890c:	b480      	push	{r7}
 800890e:	b087      	sub	sp, #28
 8008910:	af00      	add	r7, sp, #0
 8008912:	60f8      	str	r0, [r7, #12]
 8008914:	60b9      	str	r1, [r7, #8]
 8008916:	607a      	str	r2, [r7, #4]
 8008918:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008926:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	021a      	lsls	r2, r3, #8
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	431a      	orrs	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	4313      	orrs	r3, r2
 8008934:	697a      	ldr	r2, [r7, #20]
 8008936:	4313      	orrs	r3, r2
 8008938:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	697a      	ldr	r2, [r7, #20]
 800893e:	609a      	str	r2, [r3, #8]
}
 8008940:	bf00      	nop
 8008942:	371c      	adds	r7, #28
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	2201      	movs	r2, #1
 8008960:	fa02 f303 	lsl.w	r3, r2, r3
 8008964:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6a1a      	ldr	r2, [r3, #32]
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	43db      	mvns	r3, r3
 800896e:	401a      	ands	r2, r3
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	6a1a      	ldr	r2, [r3, #32]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	f003 031f 	and.w	r3, r3, #31
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	fa01 f303 	lsl.w	r3, r1, r3
 8008984:	431a      	orrs	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	621a      	str	r2, [r3, #32]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr
	...

08008998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008998:	b480      	push	{r7}
 800899a:	b085      	sub	sp, #20
 800899c:	af00      	add	r7, sp, #0
 800899e:	6078      	str	r0, [r7, #4]
 80089a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d101      	bne.n	80089b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089ac:	2302      	movs	r3, #2
 80089ae:	e06d      	b.n	8008a8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2201      	movs	r2, #1
 80089b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2202      	movs	r2, #2
 80089bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a30      	ldr	r2, [pc, #192]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d004      	beq.n	80089e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a2f      	ldr	r2, [pc, #188]	; (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d108      	bne.n	80089f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80089ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	68fa      	ldr	r2, [r7, #12]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	68fa      	ldr	r2, [r7, #12]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	68fa      	ldr	r2, [r7, #12]
 8008a0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	4a20      	ldr	r2, [pc, #128]	; (8008a98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008a16:	4293      	cmp	r3, r2
 8008a18:	d022      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a22:	d01d      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a1d      	ldr	r2, [pc, #116]	; (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d018      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	4a1c      	ldr	r2, [pc, #112]	; (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d013      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	4a1a      	ldr	r2, [pc, #104]	; (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008a3e:	4293      	cmp	r3, r2
 8008a40:	d00e      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	4a15      	ldr	r2, [pc, #84]	; (8008a9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008a48:	4293      	cmp	r3, r2
 8008a4a:	d009      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a16      	ldr	r2, [pc, #88]	; (8008aac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d004      	beq.n	8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a15      	ldr	r2, [pc, #84]	; (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d10c      	bne.n	8008a7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a68:	683b      	ldr	r3, [r7, #0]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	68ba      	ldr	r2, [r7, #8]
 8008a6e:	4313      	orrs	r3, r2
 8008a70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2201      	movs	r2, #1
 8008a7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	2200      	movs	r2, #0
 8008a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a8a:	2300      	movs	r3, #0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3714      	adds	r7, #20
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr
 8008a98:	40010000 	.word	0x40010000
 8008a9c:	40010400 	.word	0x40010400
 8008aa0:	40000400 	.word	0x40000400
 8008aa4:	40000800 	.word	0x40000800
 8008aa8:	40000c00 	.word	0x40000c00
 8008aac:	40014000 	.word	0x40014000
 8008ab0:	40001800 	.word	0x40001800

08008ab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008ab4:	b480      	push	{r7}
 8008ab6:	b083      	sub	sp, #12
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008abc:	bf00      	nop
 8008abe:	370c      	adds	r7, #12
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac6:	4770      	bx	lr

08008ac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b083      	sub	sp, #12
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008ad0:	bf00      	nop
 8008ad2:	370c      	adds	r7, #12
 8008ad4:	46bd      	mov	sp, r7
 8008ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ada:	4770      	bx	lr

08008adc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008ae4:	bf00      	nop
 8008ae6:	370c      	adds	r7, #12
 8008ae8:	46bd      	mov	sp, r7
 8008aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aee:	4770      	bx	lr

08008af0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b082      	sub	sp, #8
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d101      	bne.n	8008b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008afe:	2301      	movs	r3, #1
 8008b00:	e040      	b.n	8008b84 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b12:	6878      	ldr	r0, [r7, #4]
 8008b14:	f7fb ffb2 	bl	8004a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2224      	movs	r2, #36	; 0x24
 8008b1c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f022 0201 	bic.w	r2, r2, #1
 8008b2c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fbaa 	bl	8009288 <UART_SetConfig>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b01      	cmp	r3, #1
 8008b38:	d101      	bne.n	8008b3e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e022      	b.n	8008b84 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d002      	beq.n	8008b4c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f000 fe02 	bl	8009750 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	685a      	ldr	r2, [r3, #4]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b5a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	689a      	ldr	r2, [r3, #8]
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b6a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f042 0201 	orr.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008b7c:	6878      	ldr	r0, [r7, #4]
 8008b7e:	f000 fe89 	bl	8009894 <UART_CheckIdleState>
 8008b82:	4603      	mov	r3, r0
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b08a      	sub	sp, #40	; 0x28
 8008b90:	af02      	add	r7, sp, #8
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	603b      	str	r3, [r7, #0]
 8008b98:	4613      	mov	r3, r2
 8008b9a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	f040 8081 	bne.w	8008ca8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ba6:	68bb      	ldr	r3, [r7, #8]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d002      	beq.n	8008bb2 <HAL_UART_Transmit+0x26>
 8008bac:	88fb      	ldrh	r3, [r7, #6]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	e079      	b.n	8008caa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008bbc:	2b01      	cmp	r3, #1
 8008bbe:	d101      	bne.n	8008bc4 <HAL_UART_Transmit+0x38>
 8008bc0:	2302      	movs	r3, #2
 8008bc2:	e072      	b.n	8008caa <HAL_UART_Transmit+0x11e>
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2200      	movs	r2, #0
 8008bd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2221      	movs	r2, #33	; 0x21
 8008bd8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008bda:	f7fc f999 	bl	8004f10 <HAL_GetTick>
 8008bde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	88fa      	ldrh	r2, [r7, #6]
 8008be4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	88fa      	ldrh	r2, [r7, #6]
 8008bec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008bf8:	d108      	bne.n	8008c0c <HAL_UART_Transmit+0x80>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d104      	bne.n	8008c0c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008c02:	2300      	movs	r3, #0
 8008c04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	61bb      	str	r3, [r7, #24]
 8008c0a:	e003      	b.n	8008c14 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008c10:	2300      	movs	r3, #0
 8008c12:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	2200      	movs	r2, #0
 8008c18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008c1c:	e02c      	b.n	8008c78 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c1e:	683b      	ldr	r3, [r7, #0]
 8008c20:	9300      	str	r3, [sp, #0]
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	2200      	movs	r2, #0
 8008c26:	2180      	movs	r1, #128	; 0x80
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f000 fe66 	bl	80098fa <UART_WaitOnFlagUntilTimeout>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008c34:	2303      	movs	r3, #3
 8008c36:	e038      	b.n	8008caa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d10b      	bne.n	8008c56 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008c3e:	69bb      	ldr	r3, [r7, #24]
 8008c40:	881b      	ldrh	r3, [r3, #0]
 8008c42:	461a      	mov	r2, r3
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c4c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	3302      	adds	r3, #2
 8008c52:	61bb      	str	r3, [r7, #24]
 8008c54:	e007      	b.n	8008c66 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	781a      	ldrb	r2, [r3, #0]
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	3301      	adds	r3, #1
 8008c64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	3b01      	subs	r3, #1
 8008c70:	b29a      	uxth	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008c7e:	b29b      	uxth	r3, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d1cc      	bne.n	8008c1e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	9300      	str	r3, [sp, #0]
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2140      	movs	r1, #64	; 0x40
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	f000 fe33 	bl	80098fa <UART_WaitOnFlagUntilTimeout>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d001      	beq.n	8008c9e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8008c9a:	2303      	movs	r3, #3
 8008c9c:	e005      	b.n	8008caa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2220      	movs	r2, #32
 8008ca2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	e000      	b.n	8008caa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8008ca8:	2302      	movs	r3, #2
  }
}
 8008caa:	4618      	mov	r0, r3
 8008cac:	3720      	adds	r7, #32
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	b0ba      	sub	sp, #232	; 0xe8
 8008cb8:	af00      	add	r7, sp, #0
 8008cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	69db      	ldr	r3, [r3, #28]
 8008cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008cda:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008cde:	f640 030f 	movw	r3, #2063	; 0x80f
 8008ce2:	4013      	ands	r3, r2
 8008ce4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008ce8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d115      	bne.n	8008d1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf4:	f003 0320 	and.w	r3, r3, #32
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00f      	beq.n	8008d1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d00:	f003 0320 	and.w	r3, r3, #32
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d009      	beq.n	8008d1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 828f 	beq.w	8009230 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	4798      	blx	r3
      }
      return;
 8008d1a:	e289      	b.n	8009230 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008d1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	f000 8117 	beq.w	8008f54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008d26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d2a:	f003 0301 	and.w	r3, r3, #1
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d106      	bne.n	8008d40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008d32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008d36:	4b85      	ldr	r3, [pc, #532]	; (8008f4c <HAL_UART_IRQHandler+0x298>)
 8008d38:	4013      	ands	r3, r2
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	f000 810a 	beq.w	8008f54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d44:	f003 0301 	and.w	r3, r3, #1
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d011      	beq.n	8008d70 <HAL_UART_IRQHandler+0xbc>
 8008d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d00b      	beq.n	8008d70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d66:	f043 0201 	orr.w	r2, r3, #1
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008d70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d74:	f003 0302 	and.w	r3, r3, #2
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d011      	beq.n	8008da0 <HAL_UART_IRQHandler+0xec>
 8008d7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00b      	beq.n	8008da0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2202      	movs	r2, #2
 8008d8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d96:	f043 0204 	orr.w	r2, r3, #4
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008da0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008da4:	f003 0304 	and.w	r3, r3, #4
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d011      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x11c>
 8008dac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008db0:	f003 0301 	and.w	r3, r3, #1
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d00b      	beq.n	8008dd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dc6:	f043 0202 	orr.w	r2, r3, #2
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dd4:	f003 0308 	and.w	r3, r3, #8
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d017      	beq.n	8008e0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008de0:	f003 0320 	and.w	r3, r3, #32
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d105      	bne.n	8008df4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8008de8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008dec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d00b      	beq.n	8008e0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	2208      	movs	r2, #8
 8008dfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e02:	f043 0208 	orr.w	r2, r3, #8
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008e0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d012      	beq.n	8008e3e <HAL_UART_IRQHandler+0x18a>
 8008e18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e1c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d00c      	beq.n	8008e3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e34:	f043 0220 	orr.w	r2, r3, #32
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 81f5 	beq.w	8009234 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8008e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e4e:	f003 0320 	and.w	r3, r3, #32
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00d      	beq.n	8008e72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d007      	beq.n	8008e72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e86:	2b40      	cmp	r3, #64	; 0x40
 8008e88:	d005      	beq.n	8008e96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008e8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008e8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d04f      	beq.n	8008f36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f000 fdf3 	bl	8009a82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d141      	bne.n	8008f2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	3308      	adds	r3, #8
 8008eb0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008ec0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ec4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ec8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	3308      	adds	r3, #8
 8008ed2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ed6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008eda:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ede:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ee2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ee6:	e841 2300 	strex	r3, r2, [r1]
 8008eea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008eee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d1d9      	bne.n	8008eaa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d013      	beq.n	8008f26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	4a13      	ldr	r2, [pc, #76]	; (8008f50 <HAL_UART_IRQHandler+0x29c>)
 8008f04:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f7fd f87b 	bl	8006006 <HAL_DMA_Abort_IT>
 8008f10:	4603      	mov	r3, r0
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d017      	beq.n	8008f46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f1c:	687a      	ldr	r2, [r7, #4]
 8008f1e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8008f20:	4610      	mov	r0, r2
 8008f22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f24:	e00f      	b.n	8008f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 f998 	bl	800925c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	e00b      	b.n	8008f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 f994 	bl	800925c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f34:	e007      	b.n	8008f46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008f36:	6878      	ldr	r0, [r7, #4]
 8008f38:	f000 f990 	bl	800925c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8008f44:	e176      	b.n	8009234 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f46:	bf00      	nop
    return;
 8008f48:	e174      	b.n	8009234 <HAL_UART_IRQHandler+0x580>
 8008f4a:	bf00      	nop
 8008f4c:	04000120 	.word	0x04000120
 8008f50:	08009b49 	.word	0x08009b49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f58:	2b01      	cmp	r3, #1
 8008f5a:	f040 8144 	bne.w	80091e6 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 813d 	beq.w	80091e6 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008f70:	f003 0310 	and.w	r3, r3, #16
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	f000 8136 	beq.w	80091e6 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	2210      	movs	r2, #16
 8008f80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	689b      	ldr	r3, [r3, #8]
 8008f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f8c:	2b40      	cmp	r3, #64	; 0x40
 8008f8e:	f040 80b2 	bne.w	80090f6 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	685b      	ldr	r3, [r3, #4]
 8008f9a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	f000 8148 	beq.w	8009238 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008fae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	f080 8140 	bcs.w	8009238 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008fbe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008fc6:	69db      	ldr	r3, [r3, #28]
 8008fc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fcc:	f000 8085 	beq.w	80090da <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008fdc:	e853 3f00 	ldrex	r3, [r3]
 8008fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008ffe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009002:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800900a:	e841 2300 	strex	r3, r2, [r1]
 800900e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009012:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1da      	bne.n	8008fd0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	3308      	adds	r3, #8
 8009020:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009022:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009024:	e853 3f00 	ldrex	r3, [r3]
 8009028:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800902a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800902c:	f023 0301 	bic.w	r3, r3, #1
 8009030:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	3308      	adds	r3, #8
 800903a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800903e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009042:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009044:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009046:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800904a:	e841 2300 	strex	r3, r2, [r1]
 800904e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009050:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009052:	2b00      	cmp	r3, #0
 8009054:	d1e1      	bne.n	800901a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	3308      	adds	r3, #8
 800905c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800905e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009060:	e853 3f00 	ldrex	r3, [r3]
 8009064:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009066:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009068:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800906c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	3308      	adds	r3, #8
 8009076:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800907a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800907c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800907e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009080:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009082:	e841 2300 	strex	r3, r2, [r1]
 8009086:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800908a:	2b00      	cmp	r3, #0
 800908c:	d1e3      	bne.n	8009056 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2220      	movs	r2, #32
 8009092:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	2200      	movs	r2, #0
 8009098:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090a2:	e853 3f00 	ldrex	r3, [r3]
 80090a6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80090a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80090aa:	f023 0310 	bic.w	r3, r3, #16
 80090ae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	461a      	mov	r2, r3
 80090b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80090bc:	65bb      	str	r3, [r7, #88]	; 0x58
 80090be:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80090c2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80090c4:	e841 2300 	strex	r3, r2, [r1]
 80090c8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80090ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d1e4      	bne.n	800909a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090d4:	4618      	mov	r0, r3
 80090d6:	f7fc ff26 	bl	8005f26 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	1ad3      	subs	r3, r2, r3
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	4619      	mov	r1, r3
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 f8be 	bl	8009270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80090f4:	e0a0      	b.n	8009238 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009102:	b29b      	uxth	r3, r3
 8009104:	1ad3      	subs	r3, r2, r3
 8009106:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009110:	b29b      	uxth	r3, r3
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 8092 	beq.w	800923c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8009118:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800911c:	2b00      	cmp	r3, #0
 800911e:	f000 808d 	beq.w	800923c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800912a:	e853 3f00 	ldrex	r3, [r3]
 800912e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009136:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	461a      	mov	r2, r3
 8009140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009144:	647b      	str	r3, [r7, #68]	; 0x44
 8009146:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009148:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800914a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800914c:	e841 2300 	strex	r3, r2, [r1]
 8009150:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009154:	2b00      	cmp	r3, #0
 8009156:	d1e4      	bne.n	8009122 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	3308      	adds	r3, #8
 800915e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009162:	e853 3f00 	ldrex	r3, [r3]
 8009166:	623b      	str	r3, [r7, #32]
   return(result);
 8009168:	6a3b      	ldr	r3, [r7, #32]
 800916a:	f023 0301 	bic.w	r3, r3, #1
 800916e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	3308      	adds	r3, #8
 8009178:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800917c:	633a      	str	r2, [r7, #48]	; 0x30
 800917e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009182:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800918a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e3      	bne.n	8009158 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2220      	movs	r2, #32
 8009194:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	2200      	movs	r2, #0
 800919a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2200      	movs	r2, #0
 80091a0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	e853 3f00 	ldrex	r3, [r3]
 80091ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	f023 0310 	bic.w	r3, r3, #16
 80091b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	461a      	mov	r2, r3
 80091c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80091c4:	61fb      	str	r3, [r7, #28]
 80091c6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091c8:	69b9      	ldr	r1, [r7, #24]
 80091ca:	69fa      	ldr	r2, [r7, #28]
 80091cc:	e841 2300 	strex	r3, r2, [r1]
 80091d0:	617b      	str	r3, [r7, #20]
   return(result);
 80091d2:	697b      	ldr	r3, [r7, #20]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1e4      	bne.n	80091a2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80091d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80091dc:	4619      	mov	r1, r3
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 f846 	bl	8009270 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80091e4:	e02a      	b.n	800923c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80091e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00e      	beq.n	8009210 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80091f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d008      	beq.n	8009210 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009202:	2b00      	cmp	r3, #0
 8009204:	d01c      	beq.n	8009240 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	4798      	blx	r3
    }
    return;
 800920e:	e017      	b.n	8009240 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009218:	2b00      	cmp	r3, #0
 800921a:	d012      	beq.n	8009242 <HAL_UART_IRQHandler+0x58e>
 800921c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009224:	2b00      	cmp	r3, #0
 8009226:	d00c      	beq.n	8009242 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fca3 	bl	8009b74 <UART_EndTransmit_IT>
    return;
 800922e:	e008      	b.n	8009242 <HAL_UART_IRQHandler+0x58e>
      return;
 8009230:	bf00      	nop
 8009232:	e006      	b.n	8009242 <HAL_UART_IRQHandler+0x58e>
    return;
 8009234:	bf00      	nop
 8009236:	e004      	b.n	8009242 <HAL_UART_IRQHandler+0x58e>
      return;
 8009238:	bf00      	nop
 800923a:	e002      	b.n	8009242 <HAL_UART_IRQHandler+0x58e>
      return;
 800923c:	bf00      	nop
 800923e:	e000      	b.n	8009242 <HAL_UART_IRQHandler+0x58e>
    return;
 8009240:	bf00      	nop
  }

}
 8009242:	37e8      	adds	r7, #232	; 0xe8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	460b      	mov	r3, r1
 800927a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b088      	sub	sp, #32
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009290:	2300      	movs	r3, #0
 8009292:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	689a      	ldr	r2, [r3, #8]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	691b      	ldr	r3, [r3, #16]
 800929c:	431a      	orrs	r2, r3
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	695b      	ldr	r3, [r3, #20]
 80092a2:	431a      	orrs	r2, r3
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	681a      	ldr	r2, [r3, #0]
 80092b2:	4ba6      	ldr	r3, [pc, #664]	; (800954c <UART_SetConfig+0x2c4>)
 80092b4:	4013      	ands	r3, r2
 80092b6:	687a      	ldr	r2, [r7, #4]
 80092b8:	6812      	ldr	r2, [r2, #0]
 80092ba:	6979      	ldr	r1, [r7, #20]
 80092bc:	430b      	orrs	r3, r1
 80092be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	685b      	ldr	r3, [r3, #4]
 80092c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	68da      	ldr	r2, [r3, #12]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	430a      	orrs	r2, r1
 80092d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	699b      	ldr	r3, [r3, #24]
 80092da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a1b      	ldr	r3, [r3, #32]
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	697a      	ldr	r2, [r7, #20]
 80092f6:	430a      	orrs	r2, r1
 80092f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	4a94      	ldr	r2, [pc, #592]	; (8009550 <UART_SetConfig+0x2c8>)
 8009300:	4293      	cmp	r3, r2
 8009302:	d120      	bne.n	8009346 <UART_SetConfig+0xbe>
 8009304:	4b93      	ldr	r3, [pc, #588]	; (8009554 <UART_SetConfig+0x2cc>)
 8009306:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800930a:	f003 0303 	and.w	r3, r3, #3
 800930e:	2b03      	cmp	r3, #3
 8009310:	d816      	bhi.n	8009340 <UART_SetConfig+0xb8>
 8009312:	a201      	add	r2, pc, #4	; (adr r2, 8009318 <UART_SetConfig+0x90>)
 8009314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009318:	08009329 	.word	0x08009329
 800931c:	08009335 	.word	0x08009335
 8009320:	0800932f 	.word	0x0800932f
 8009324:	0800933b 	.word	0x0800933b
 8009328:	2301      	movs	r3, #1
 800932a:	77fb      	strb	r3, [r7, #31]
 800932c:	e150      	b.n	80095d0 <UART_SetConfig+0x348>
 800932e:	2302      	movs	r3, #2
 8009330:	77fb      	strb	r3, [r7, #31]
 8009332:	e14d      	b.n	80095d0 <UART_SetConfig+0x348>
 8009334:	2304      	movs	r3, #4
 8009336:	77fb      	strb	r3, [r7, #31]
 8009338:	e14a      	b.n	80095d0 <UART_SetConfig+0x348>
 800933a:	2308      	movs	r3, #8
 800933c:	77fb      	strb	r3, [r7, #31]
 800933e:	e147      	b.n	80095d0 <UART_SetConfig+0x348>
 8009340:	2310      	movs	r3, #16
 8009342:	77fb      	strb	r3, [r7, #31]
 8009344:	e144      	b.n	80095d0 <UART_SetConfig+0x348>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a83      	ldr	r2, [pc, #524]	; (8009558 <UART_SetConfig+0x2d0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d132      	bne.n	80093b6 <UART_SetConfig+0x12e>
 8009350:	4b80      	ldr	r3, [pc, #512]	; (8009554 <UART_SetConfig+0x2cc>)
 8009352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009356:	f003 030c 	and.w	r3, r3, #12
 800935a:	2b0c      	cmp	r3, #12
 800935c:	d828      	bhi.n	80093b0 <UART_SetConfig+0x128>
 800935e:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <UART_SetConfig+0xdc>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	08009399 	.word	0x08009399
 8009368:	080093b1 	.word	0x080093b1
 800936c:	080093b1 	.word	0x080093b1
 8009370:	080093b1 	.word	0x080093b1
 8009374:	080093a5 	.word	0x080093a5
 8009378:	080093b1 	.word	0x080093b1
 800937c:	080093b1 	.word	0x080093b1
 8009380:	080093b1 	.word	0x080093b1
 8009384:	0800939f 	.word	0x0800939f
 8009388:	080093b1 	.word	0x080093b1
 800938c:	080093b1 	.word	0x080093b1
 8009390:	080093b1 	.word	0x080093b1
 8009394:	080093ab 	.word	0x080093ab
 8009398:	2300      	movs	r3, #0
 800939a:	77fb      	strb	r3, [r7, #31]
 800939c:	e118      	b.n	80095d0 <UART_SetConfig+0x348>
 800939e:	2302      	movs	r3, #2
 80093a0:	77fb      	strb	r3, [r7, #31]
 80093a2:	e115      	b.n	80095d0 <UART_SetConfig+0x348>
 80093a4:	2304      	movs	r3, #4
 80093a6:	77fb      	strb	r3, [r7, #31]
 80093a8:	e112      	b.n	80095d0 <UART_SetConfig+0x348>
 80093aa:	2308      	movs	r3, #8
 80093ac:	77fb      	strb	r3, [r7, #31]
 80093ae:	e10f      	b.n	80095d0 <UART_SetConfig+0x348>
 80093b0:	2310      	movs	r3, #16
 80093b2:	77fb      	strb	r3, [r7, #31]
 80093b4:	e10c      	b.n	80095d0 <UART_SetConfig+0x348>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a68      	ldr	r2, [pc, #416]	; (800955c <UART_SetConfig+0x2d4>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d120      	bne.n	8009402 <UART_SetConfig+0x17a>
 80093c0:	4b64      	ldr	r3, [pc, #400]	; (8009554 <UART_SetConfig+0x2cc>)
 80093c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80093ca:	2b30      	cmp	r3, #48	; 0x30
 80093cc:	d013      	beq.n	80093f6 <UART_SetConfig+0x16e>
 80093ce:	2b30      	cmp	r3, #48	; 0x30
 80093d0:	d814      	bhi.n	80093fc <UART_SetConfig+0x174>
 80093d2:	2b20      	cmp	r3, #32
 80093d4:	d009      	beq.n	80093ea <UART_SetConfig+0x162>
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d810      	bhi.n	80093fc <UART_SetConfig+0x174>
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d002      	beq.n	80093e4 <UART_SetConfig+0x15c>
 80093de:	2b10      	cmp	r3, #16
 80093e0:	d006      	beq.n	80093f0 <UART_SetConfig+0x168>
 80093e2:	e00b      	b.n	80093fc <UART_SetConfig+0x174>
 80093e4:	2300      	movs	r3, #0
 80093e6:	77fb      	strb	r3, [r7, #31]
 80093e8:	e0f2      	b.n	80095d0 <UART_SetConfig+0x348>
 80093ea:	2302      	movs	r3, #2
 80093ec:	77fb      	strb	r3, [r7, #31]
 80093ee:	e0ef      	b.n	80095d0 <UART_SetConfig+0x348>
 80093f0:	2304      	movs	r3, #4
 80093f2:	77fb      	strb	r3, [r7, #31]
 80093f4:	e0ec      	b.n	80095d0 <UART_SetConfig+0x348>
 80093f6:	2308      	movs	r3, #8
 80093f8:	77fb      	strb	r3, [r7, #31]
 80093fa:	e0e9      	b.n	80095d0 <UART_SetConfig+0x348>
 80093fc:	2310      	movs	r3, #16
 80093fe:	77fb      	strb	r3, [r7, #31]
 8009400:	e0e6      	b.n	80095d0 <UART_SetConfig+0x348>
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	4a56      	ldr	r2, [pc, #344]	; (8009560 <UART_SetConfig+0x2d8>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d120      	bne.n	800944e <UART_SetConfig+0x1c6>
 800940c:	4b51      	ldr	r3, [pc, #324]	; (8009554 <UART_SetConfig+0x2cc>)
 800940e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009412:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009416:	2bc0      	cmp	r3, #192	; 0xc0
 8009418:	d013      	beq.n	8009442 <UART_SetConfig+0x1ba>
 800941a:	2bc0      	cmp	r3, #192	; 0xc0
 800941c:	d814      	bhi.n	8009448 <UART_SetConfig+0x1c0>
 800941e:	2b80      	cmp	r3, #128	; 0x80
 8009420:	d009      	beq.n	8009436 <UART_SetConfig+0x1ae>
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d810      	bhi.n	8009448 <UART_SetConfig+0x1c0>
 8009426:	2b00      	cmp	r3, #0
 8009428:	d002      	beq.n	8009430 <UART_SetConfig+0x1a8>
 800942a:	2b40      	cmp	r3, #64	; 0x40
 800942c:	d006      	beq.n	800943c <UART_SetConfig+0x1b4>
 800942e:	e00b      	b.n	8009448 <UART_SetConfig+0x1c0>
 8009430:	2300      	movs	r3, #0
 8009432:	77fb      	strb	r3, [r7, #31]
 8009434:	e0cc      	b.n	80095d0 <UART_SetConfig+0x348>
 8009436:	2302      	movs	r3, #2
 8009438:	77fb      	strb	r3, [r7, #31]
 800943a:	e0c9      	b.n	80095d0 <UART_SetConfig+0x348>
 800943c:	2304      	movs	r3, #4
 800943e:	77fb      	strb	r3, [r7, #31]
 8009440:	e0c6      	b.n	80095d0 <UART_SetConfig+0x348>
 8009442:	2308      	movs	r3, #8
 8009444:	77fb      	strb	r3, [r7, #31]
 8009446:	e0c3      	b.n	80095d0 <UART_SetConfig+0x348>
 8009448:	2310      	movs	r3, #16
 800944a:	77fb      	strb	r3, [r7, #31]
 800944c:	e0c0      	b.n	80095d0 <UART_SetConfig+0x348>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a44      	ldr	r2, [pc, #272]	; (8009564 <UART_SetConfig+0x2dc>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d125      	bne.n	80094a4 <UART_SetConfig+0x21c>
 8009458:	4b3e      	ldr	r3, [pc, #248]	; (8009554 <UART_SetConfig+0x2cc>)
 800945a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800945e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009466:	d017      	beq.n	8009498 <UART_SetConfig+0x210>
 8009468:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800946c:	d817      	bhi.n	800949e <UART_SetConfig+0x216>
 800946e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009472:	d00b      	beq.n	800948c <UART_SetConfig+0x204>
 8009474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009478:	d811      	bhi.n	800949e <UART_SetConfig+0x216>
 800947a:	2b00      	cmp	r3, #0
 800947c:	d003      	beq.n	8009486 <UART_SetConfig+0x1fe>
 800947e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009482:	d006      	beq.n	8009492 <UART_SetConfig+0x20a>
 8009484:	e00b      	b.n	800949e <UART_SetConfig+0x216>
 8009486:	2300      	movs	r3, #0
 8009488:	77fb      	strb	r3, [r7, #31]
 800948a:	e0a1      	b.n	80095d0 <UART_SetConfig+0x348>
 800948c:	2302      	movs	r3, #2
 800948e:	77fb      	strb	r3, [r7, #31]
 8009490:	e09e      	b.n	80095d0 <UART_SetConfig+0x348>
 8009492:	2304      	movs	r3, #4
 8009494:	77fb      	strb	r3, [r7, #31]
 8009496:	e09b      	b.n	80095d0 <UART_SetConfig+0x348>
 8009498:	2308      	movs	r3, #8
 800949a:	77fb      	strb	r3, [r7, #31]
 800949c:	e098      	b.n	80095d0 <UART_SetConfig+0x348>
 800949e:	2310      	movs	r3, #16
 80094a0:	77fb      	strb	r3, [r7, #31]
 80094a2:	e095      	b.n	80095d0 <UART_SetConfig+0x348>
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a2f      	ldr	r2, [pc, #188]	; (8009568 <UART_SetConfig+0x2e0>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d125      	bne.n	80094fa <UART_SetConfig+0x272>
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <UART_SetConfig+0x2cc>)
 80094b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80094b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094bc:	d017      	beq.n	80094ee <UART_SetConfig+0x266>
 80094be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80094c2:	d817      	bhi.n	80094f4 <UART_SetConfig+0x26c>
 80094c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094c8:	d00b      	beq.n	80094e2 <UART_SetConfig+0x25a>
 80094ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80094ce:	d811      	bhi.n	80094f4 <UART_SetConfig+0x26c>
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d003      	beq.n	80094dc <UART_SetConfig+0x254>
 80094d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d8:	d006      	beq.n	80094e8 <UART_SetConfig+0x260>
 80094da:	e00b      	b.n	80094f4 <UART_SetConfig+0x26c>
 80094dc:	2301      	movs	r3, #1
 80094de:	77fb      	strb	r3, [r7, #31]
 80094e0:	e076      	b.n	80095d0 <UART_SetConfig+0x348>
 80094e2:	2302      	movs	r3, #2
 80094e4:	77fb      	strb	r3, [r7, #31]
 80094e6:	e073      	b.n	80095d0 <UART_SetConfig+0x348>
 80094e8:	2304      	movs	r3, #4
 80094ea:	77fb      	strb	r3, [r7, #31]
 80094ec:	e070      	b.n	80095d0 <UART_SetConfig+0x348>
 80094ee:	2308      	movs	r3, #8
 80094f0:	77fb      	strb	r3, [r7, #31]
 80094f2:	e06d      	b.n	80095d0 <UART_SetConfig+0x348>
 80094f4:	2310      	movs	r3, #16
 80094f6:	77fb      	strb	r3, [r7, #31]
 80094f8:	e06a      	b.n	80095d0 <UART_SetConfig+0x348>
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a1b      	ldr	r2, [pc, #108]	; (800956c <UART_SetConfig+0x2e4>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d138      	bne.n	8009576 <UART_SetConfig+0x2ee>
 8009504:	4b13      	ldr	r3, [pc, #76]	; (8009554 <UART_SetConfig+0x2cc>)
 8009506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800950e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009512:	d017      	beq.n	8009544 <UART_SetConfig+0x2bc>
 8009514:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009518:	d82a      	bhi.n	8009570 <UART_SetConfig+0x2e8>
 800951a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800951e:	d00b      	beq.n	8009538 <UART_SetConfig+0x2b0>
 8009520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009524:	d824      	bhi.n	8009570 <UART_SetConfig+0x2e8>
 8009526:	2b00      	cmp	r3, #0
 8009528:	d003      	beq.n	8009532 <UART_SetConfig+0x2aa>
 800952a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800952e:	d006      	beq.n	800953e <UART_SetConfig+0x2b6>
 8009530:	e01e      	b.n	8009570 <UART_SetConfig+0x2e8>
 8009532:	2300      	movs	r3, #0
 8009534:	77fb      	strb	r3, [r7, #31]
 8009536:	e04b      	b.n	80095d0 <UART_SetConfig+0x348>
 8009538:	2302      	movs	r3, #2
 800953a:	77fb      	strb	r3, [r7, #31]
 800953c:	e048      	b.n	80095d0 <UART_SetConfig+0x348>
 800953e:	2304      	movs	r3, #4
 8009540:	77fb      	strb	r3, [r7, #31]
 8009542:	e045      	b.n	80095d0 <UART_SetConfig+0x348>
 8009544:	2308      	movs	r3, #8
 8009546:	77fb      	strb	r3, [r7, #31]
 8009548:	e042      	b.n	80095d0 <UART_SetConfig+0x348>
 800954a:	bf00      	nop
 800954c:	efff69f3 	.word	0xefff69f3
 8009550:	40011000 	.word	0x40011000
 8009554:	40023800 	.word	0x40023800
 8009558:	40004400 	.word	0x40004400
 800955c:	40004800 	.word	0x40004800
 8009560:	40004c00 	.word	0x40004c00
 8009564:	40005000 	.word	0x40005000
 8009568:	40011400 	.word	0x40011400
 800956c:	40007800 	.word	0x40007800
 8009570:	2310      	movs	r3, #16
 8009572:	77fb      	strb	r3, [r7, #31]
 8009574:	e02c      	b.n	80095d0 <UART_SetConfig+0x348>
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	4a72      	ldr	r2, [pc, #456]	; (8009744 <UART_SetConfig+0x4bc>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d125      	bne.n	80095cc <UART_SetConfig+0x344>
 8009580:	4b71      	ldr	r3, [pc, #452]	; (8009748 <UART_SetConfig+0x4c0>)
 8009582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009586:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800958a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800958e:	d017      	beq.n	80095c0 <UART_SetConfig+0x338>
 8009590:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009594:	d817      	bhi.n	80095c6 <UART_SetConfig+0x33e>
 8009596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800959a:	d00b      	beq.n	80095b4 <UART_SetConfig+0x32c>
 800959c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095a0:	d811      	bhi.n	80095c6 <UART_SetConfig+0x33e>
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d003      	beq.n	80095ae <UART_SetConfig+0x326>
 80095a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095aa:	d006      	beq.n	80095ba <UART_SetConfig+0x332>
 80095ac:	e00b      	b.n	80095c6 <UART_SetConfig+0x33e>
 80095ae:	2300      	movs	r3, #0
 80095b0:	77fb      	strb	r3, [r7, #31]
 80095b2:	e00d      	b.n	80095d0 <UART_SetConfig+0x348>
 80095b4:	2302      	movs	r3, #2
 80095b6:	77fb      	strb	r3, [r7, #31]
 80095b8:	e00a      	b.n	80095d0 <UART_SetConfig+0x348>
 80095ba:	2304      	movs	r3, #4
 80095bc:	77fb      	strb	r3, [r7, #31]
 80095be:	e007      	b.n	80095d0 <UART_SetConfig+0x348>
 80095c0:	2308      	movs	r3, #8
 80095c2:	77fb      	strb	r3, [r7, #31]
 80095c4:	e004      	b.n	80095d0 <UART_SetConfig+0x348>
 80095c6:	2310      	movs	r3, #16
 80095c8:	77fb      	strb	r3, [r7, #31]
 80095ca:	e001      	b.n	80095d0 <UART_SetConfig+0x348>
 80095cc:	2310      	movs	r3, #16
 80095ce:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	69db      	ldr	r3, [r3, #28]
 80095d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095d8:	d15b      	bne.n	8009692 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80095da:	7ffb      	ldrb	r3, [r7, #31]
 80095dc:	2b08      	cmp	r3, #8
 80095de:	d828      	bhi.n	8009632 <UART_SetConfig+0x3aa>
 80095e0:	a201      	add	r2, pc, #4	; (adr r2, 80095e8 <UART_SetConfig+0x360>)
 80095e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095e6:	bf00      	nop
 80095e8:	0800960d 	.word	0x0800960d
 80095ec:	08009615 	.word	0x08009615
 80095f0:	0800961d 	.word	0x0800961d
 80095f4:	08009633 	.word	0x08009633
 80095f8:	08009623 	.word	0x08009623
 80095fc:	08009633 	.word	0x08009633
 8009600:	08009633 	.word	0x08009633
 8009604:	08009633 	.word	0x08009633
 8009608:	0800962b 	.word	0x0800962b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800960c:	f7fd fc20 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 8009610:	61b8      	str	r0, [r7, #24]
        break;
 8009612:	e013      	b.n	800963c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009614:	f7fd fc30 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 8009618:	61b8      	str	r0, [r7, #24]
        break;
 800961a:	e00f      	b.n	800963c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800961c:	4b4b      	ldr	r3, [pc, #300]	; (800974c <UART_SetConfig+0x4c4>)
 800961e:	61bb      	str	r3, [r7, #24]
        break;
 8009620:	e00c      	b.n	800963c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009622:	f7fd fb03 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 8009626:	61b8      	str	r0, [r7, #24]
        break;
 8009628:	e008      	b.n	800963c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800962a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800962e:	61bb      	str	r3, [r7, #24]
        break;
 8009630:	e004      	b.n	800963c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009632:	2300      	movs	r3, #0
 8009634:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009636:	2301      	movs	r3, #1
 8009638:	77bb      	strb	r3, [r7, #30]
        break;
 800963a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800963c:	69bb      	ldr	r3, [r7, #24]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d074      	beq.n	800972c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009642:	69bb      	ldr	r3, [r7, #24]
 8009644:	005a      	lsls	r2, r3, #1
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	441a      	add	r2, r3
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009658:	693b      	ldr	r3, [r7, #16]
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d916      	bls.n	800968c <UART_SetConfig+0x404>
 800965e:	693b      	ldr	r3, [r7, #16]
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009664:	d212      	bcs.n	800968c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009666:	693b      	ldr	r3, [r7, #16]
 8009668:	b29b      	uxth	r3, r3
 800966a:	f023 030f 	bic.w	r3, r3, #15
 800966e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	b29b      	uxth	r3, r3
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	b29a      	uxth	r2, r3
 800967c:	89fb      	ldrh	r3, [r7, #14]
 800967e:	4313      	orrs	r3, r2
 8009680:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	89fa      	ldrh	r2, [r7, #14]
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	e04f      	b.n	800972c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	77bb      	strb	r3, [r7, #30]
 8009690:	e04c      	b.n	800972c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009692:	7ffb      	ldrb	r3, [r7, #31]
 8009694:	2b08      	cmp	r3, #8
 8009696:	d828      	bhi.n	80096ea <UART_SetConfig+0x462>
 8009698:	a201      	add	r2, pc, #4	; (adr r2, 80096a0 <UART_SetConfig+0x418>)
 800969a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800969e:	bf00      	nop
 80096a0:	080096c5 	.word	0x080096c5
 80096a4:	080096cd 	.word	0x080096cd
 80096a8:	080096d5 	.word	0x080096d5
 80096ac:	080096eb 	.word	0x080096eb
 80096b0:	080096db 	.word	0x080096db
 80096b4:	080096eb 	.word	0x080096eb
 80096b8:	080096eb 	.word	0x080096eb
 80096bc:	080096eb 	.word	0x080096eb
 80096c0:	080096e3 	.word	0x080096e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096c4:	f7fd fbc4 	bl	8006e50 <HAL_RCC_GetPCLK1Freq>
 80096c8:	61b8      	str	r0, [r7, #24]
        break;
 80096ca:	e013      	b.n	80096f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096cc:	f7fd fbd4 	bl	8006e78 <HAL_RCC_GetPCLK2Freq>
 80096d0:	61b8      	str	r0, [r7, #24]
        break;
 80096d2:	e00f      	b.n	80096f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096d4:	4b1d      	ldr	r3, [pc, #116]	; (800974c <UART_SetConfig+0x4c4>)
 80096d6:	61bb      	str	r3, [r7, #24]
        break;
 80096d8:	e00c      	b.n	80096f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096da:	f7fd faa7 	bl	8006c2c <HAL_RCC_GetSysClockFreq>
 80096de:	61b8      	str	r0, [r7, #24]
        break;
 80096e0:	e008      	b.n	80096f4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096e6:	61bb      	str	r3, [r7, #24]
        break;
 80096e8:	e004      	b.n	80096f4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80096ea:	2300      	movs	r3, #0
 80096ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	77bb      	strb	r3, [r7, #30]
        break;
 80096f2:	bf00      	nop
    }

    if (pclk != 0U)
 80096f4:	69bb      	ldr	r3, [r7, #24]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d018      	beq.n	800972c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	085a      	lsrs	r2, r3, #1
 8009700:	69bb      	ldr	r3, [r7, #24]
 8009702:	441a      	add	r2, r3
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	685b      	ldr	r3, [r3, #4]
 8009708:	fbb2 f3f3 	udiv	r3, r2, r3
 800970c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800970e:	693b      	ldr	r3, [r7, #16]
 8009710:	2b0f      	cmp	r3, #15
 8009712:	d909      	bls.n	8009728 <UART_SetConfig+0x4a0>
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800971a:	d205      	bcs.n	8009728 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	b29a      	uxth	r2, r3
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	60da      	str	r2, [r3, #12]
 8009726:	e001      	b.n	800972c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2200      	movs	r2, #0
 8009736:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009738:	7fbb      	ldrb	r3, [r7, #30]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}
 8009742:	bf00      	nop
 8009744:	40007c00 	.word	0x40007c00
 8009748:	40023800 	.word	0x40023800
 800974c:	00f42400 	.word	0x00f42400

08009750 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009750:	b480      	push	{r7}
 8009752:	b083      	sub	sp, #12
 8009754:	af00      	add	r7, sp, #0
 8009756:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800975c:	f003 0301 	and.w	r3, r3, #1
 8009760:	2b00      	cmp	r3, #0
 8009762:	d00a      	beq.n	800977a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	685b      	ldr	r3, [r3, #4]
 800976a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	430a      	orrs	r2, r1
 8009778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800977e:	f003 0302 	and.w	r3, r3, #2
 8009782:	2b00      	cmp	r3, #0
 8009784:	d00a      	beq.n	800979c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	430a      	orrs	r2, r1
 800979a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097a0:	f003 0304 	and.w	r3, r3, #4
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d00a      	beq.n	80097be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	430a      	orrs	r2, r1
 80097bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c2:	f003 0308 	and.w	r3, r3, #8
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00a      	beq.n	80097e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	430a      	orrs	r2, r1
 80097de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e4:	f003 0310 	and.w	r3, r3, #16
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d00a      	beq.n	8009802 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009806:	f003 0320 	and.w	r3, r3, #32
 800980a:	2b00      	cmp	r3, #0
 800980c:	d00a      	beq.n	8009824 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	689b      	ldr	r3, [r3, #8]
 8009814:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	430a      	orrs	r2, r1
 8009822:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800982c:	2b00      	cmp	r3, #0
 800982e:	d01a      	beq.n	8009866 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	685b      	ldr	r3, [r3, #4]
 8009836:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	430a      	orrs	r2, r1
 8009844:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800984a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800984e:	d10a      	bne.n	8009866 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800986a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }
}
 8009888:	bf00      	nop
 800988a:	370c      	adds	r7, #12
 800988c:	46bd      	mov	sp, r7
 800988e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009892:	4770      	bx	lr

08009894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b086      	sub	sp, #24
 8009898:	af02      	add	r7, sp, #8
 800989a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2200      	movs	r2, #0
 80098a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80098a4:	f7fb fb34 	bl	8004f10 <HAL_GetTick>
 80098a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f003 0308 	and.w	r3, r3, #8
 80098b4:	2b08      	cmp	r3, #8
 80098b6:	d10e      	bne.n	80098d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80098b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80098bc:	9300      	str	r3, [sp, #0]
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80098c6:	6878      	ldr	r0, [r7, #4]
 80098c8:	f000 f817 	bl	80098fa <UART_WaitOnFlagUntilTimeout>
 80098cc:	4603      	mov	r3, r0
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d001      	beq.n	80098d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e00d      	b.n	80098f2 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2220      	movs	r2, #32
 80098da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2220      	movs	r2, #32
 80098e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2200      	movs	r2, #0
 80098ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b09c      	sub	sp, #112	; 0x70
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	603b      	str	r3, [r7, #0]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800990a:	e0a5      	b.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	f000 80a1 	beq.w	8009a58 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009916:	f7fb fafb 	bl	8004f10 <HAL_GetTick>
 800991a:	4602      	mov	r2, r0
 800991c:	683b      	ldr	r3, [r7, #0]
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009922:	429a      	cmp	r2, r3
 8009924:	d302      	bcc.n	800992c <UART_WaitOnFlagUntilTimeout+0x32>
 8009926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009928:	2b00      	cmp	r3, #0
 800992a:	d13e      	bne.n	80099aa <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800993a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009940:	667b      	str	r3, [r7, #100]	; 0x64
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	461a      	mov	r2, r3
 8009948:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800994a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800994c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009950:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e6      	bne.n	800992c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800996e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009970:	f023 0301 	bic.w	r3, r3, #1
 8009974:	663b      	str	r3, [r7, #96]	; 0x60
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800997e:	64ba      	str	r2, [r7, #72]	; 0x48
 8009980:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009984:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800998c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e5      	bne.n	800995e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	2220      	movs	r2, #32
 8009996:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	2220      	movs	r2, #32
 800999c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	2200      	movs	r2, #0
 80099a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80099a6:	2303      	movs	r3, #3
 80099a8:	e067      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d04f      	beq.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	69db      	ldr	r3, [r3, #28]
 80099be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80099c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099c6:	d147      	bne.n	8009a58 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099d0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099da:	e853 3f00 	ldrex	r3, [r3]
 80099de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80099e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80099e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	461a      	mov	r2, r3
 80099ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80099f0:	637b      	str	r3, [r7, #52]	; 0x34
 80099f2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80099f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80099f8:	e841 2300 	strex	r3, r2, [r1]
 80099fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80099fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d1e6      	bne.n	80099d2 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	3308      	adds	r3, #8
 8009a0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a0c:	697b      	ldr	r3, [r7, #20]
 8009a0e:	e853 3f00 	ldrex	r3, [r3]
 8009a12:	613b      	str	r3, [r7, #16]
   return(result);
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	f023 0301 	bic.w	r3, r3, #1
 8009a1a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	3308      	adds	r3, #8
 8009a22:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009a24:	623a      	str	r2, [r7, #32]
 8009a26:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a28:	69f9      	ldr	r1, [r7, #28]
 8009a2a:	6a3a      	ldr	r2, [r7, #32]
 8009a2c:	e841 2300 	strex	r3, r2, [r1]
 8009a30:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a32:	69bb      	ldr	r3, [r7, #24]
 8009a34:	2b00      	cmp	r3, #0
 8009a36:	d1e5      	bne.n	8009a04 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2220      	movs	r2, #32
 8009a3c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009a44:	68fb      	ldr	r3, [r7, #12]
 8009a46:	2220      	movs	r2, #32
 8009a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009a54:	2303      	movs	r3, #3
 8009a56:	e010      	b.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69da      	ldr	r2, [r3, #28]
 8009a5e:	68bb      	ldr	r3, [r7, #8]
 8009a60:	4013      	ands	r3, r2
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	bf0c      	ite	eq
 8009a68:	2301      	moveq	r3, #1
 8009a6a:	2300      	movne	r3, #0
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	461a      	mov	r2, r3
 8009a70:	79fb      	ldrb	r3, [r7, #7]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	f43f af4a 	beq.w	800990c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a78:	2300      	movs	r3, #0
}
 8009a7a:	4618      	mov	r0, r3
 8009a7c:	3770      	adds	r7, #112	; 0x70
 8009a7e:	46bd      	mov	sp, r7
 8009a80:	bd80      	pop	{r7, pc}

08009a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a82:	b480      	push	{r7}
 8009a84:	b095      	sub	sp, #84	; 0x54
 8009a86:	af00      	add	r7, sp, #0
 8009a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a92:	e853 3f00 	ldrex	r3, [r3]
 8009a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	461a      	mov	r2, r3
 8009aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8009aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009ab0:	e841 2300 	strex	r3, r2, [r1]
 8009ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d1e6      	bne.n	8009a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	3308      	adds	r3, #8
 8009ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ac4:	6a3b      	ldr	r3, [r7, #32]
 8009ac6:	e853 3f00 	ldrex	r3, [r3]
 8009aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	f023 0301 	bic.w	r3, r3, #1
 8009ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	3308      	adds	r3, #8
 8009ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ae4:	e841 2300 	strex	r3, r2, [r1]
 8009ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d1e5      	bne.n	8009abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009af4:	2b01      	cmp	r3, #1
 8009af6:	d118      	bne.n	8009b2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	e853 3f00 	ldrex	r3, [r3]
 8009b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	f023 0310 	bic.w	r3, r3, #16
 8009b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	461a      	mov	r2, r3
 8009b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009b16:	61bb      	str	r3, [r7, #24]
 8009b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b1a:	6979      	ldr	r1, [r7, #20]
 8009b1c:	69ba      	ldr	r2, [r7, #24]
 8009b1e:	e841 2300 	strex	r3, r2, [r1]
 8009b22:	613b      	str	r3, [r7, #16]
   return(result);
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d1e6      	bne.n	8009af8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2220      	movs	r2, #32
 8009b2e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2200      	movs	r2, #0
 8009b34:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8009b3c:	bf00      	nop
 8009b3e:	3754      	adds	r7, #84	; 0x54
 8009b40:	46bd      	mov	sp, r7
 8009b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b46:	4770      	bx	lr

08009b48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b66:	68f8      	ldr	r0, [r7, #12]
 8009b68:	f7ff fb78 	bl	800925c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b6c:	bf00      	nop
 8009b6e:	3710      	adds	r7, #16
 8009b70:	46bd      	mov	sp, r7
 8009b72:	bd80      	pop	{r7, pc}

08009b74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b74:	b580      	push	{r7, lr}
 8009b76:	b088      	sub	sp, #32
 8009b78:	af00      	add	r7, sp, #0
 8009b7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	e853 3f00 	ldrex	r3, [r3]
 8009b88:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b8a:	68bb      	ldr	r3, [r7, #8]
 8009b8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b90:	61fb      	str	r3, [r7, #28]
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	461a      	mov	r2, r3
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	61bb      	str	r3, [r7, #24]
 8009b9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b9e:	6979      	ldr	r1, [r7, #20]
 8009ba0:	69ba      	ldr	r2, [r7, #24]
 8009ba2:	e841 2300 	strex	r3, r2, [r1]
 8009ba6:	613b      	str	r3, [r7, #16]
   return(result);
 8009ba8:	693b      	ldr	r3, [r7, #16]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1e6      	bne.n	8009b7c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7ff fb44 	bl	8009248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009bc0:	bf00      	nop
 8009bc2:	3720      	adds	r7, #32
 8009bc4:	46bd      	mov	sp, r7
 8009bc6:	bd80      	pop	{r7, pc}

08009bc8 <__errno>:
 8009bc8:	4b01      	ldr	r3, [pc, #4]	; (8009bd0 <__errno+0x8>)
 8009bca:	6818      	ldr	r0, [r3, #0]
 8009bcc:	4770      	bx	lr
 8009bce:	bf00      	nop
 8009bd0:	2000001c 	.word	0x2000001c

08009bd4 <__libc_init_array>:
 8009bd4:	b570      	push	{r4, r5, r6, lr}
 8009bd6:	4d0d      	ldr	r5, [pc, #52]	; (8009c0c <__libc_init_array+0x38>)
 8009bd8:	4c0d      	ldr	r4, [pc, #52]	; (8009c10 <__libc_init_array+0x3c>)
 8009bda:	1b64      	subs	r4, r4, r5
 8009bdc:	10a4      	asrs	r4, r4, #2
 8009bde:	2600      	movs	r6, #0
 8009be0:	42a6      	cmp	r6, r4
 8009be2:	d109      	bne.n	8009bf8 <__libc_init_array+0x24>
 8009be4:	4d0b      	ldr	r5, [pc, #44]	; (8009c14 <__libc_init_array+0x40>)
 8009be6:	4c0c      	ldr	r4, [pc, #48]	; (8009c18 <__libc_init_array+0x44>)
 8009be8:	f001 f824 	bl	800ac34 <_init>
 8009bec:	1b64      	subs	r4, r4, r5
 8009bee:	10a4      	asrs	r4, r4, #2
 8009bf0:	2600      	movs	r6, #0
 8009bf2:	42a6      	cmp	r6, r4
 8009bf4:	d105      	bne.n	8009c02 <__libc_init_array+0x2e>
 8009bf6:	bd70      	pop	{r4, r5, r6, pc}
 8009bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bfc:	4798      	blx	r3
 8009bfe:	3601      	adds	r6, #1
 8009c00:	e7ee      	b.n	8009be0 <__libc_init_array+0xc>
 8009c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c06:	4798      	blx	r3
 8009c08:	3601      	adds	r6, #1
 8009c0a:	e7f2      	b.n	8009bf2 <__libc_init_array+0x1e>
 8009c0c:	0800ad98 	.word	0x0800ad98
 8009c10:	0800ad98 	.word	0x0800ad98
 8009c14:	0800ad98 	.word	0x0800ad98
 8009c18:	0800ad9c 	.word	0x0800ad9c

08009c1c <memset>:
 8009c1c:	4402      	add	r2, r0
 8009c1e:	4603      	mov	r3, r0
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d100      	bne.n	8009c26 <memset+0xa>
 8009c24:	4770      	bx	lr
 8009c26:	f803 1b01 	strb.w	r1, [r3], #1
 8009c2a:	e7f9      	b.n	8009c20 <memset+0x4>

08009c2c <iprintf>:
 8009c2c:	b40f      	push	{r0, r1, r2, r3}
 8009c2e:	4b0a      	ldr	r3, [pc, #40]	; (8009c58 <iprintf+0x2c>)
 8009c30:	b513      	push	{r0, r1, r4, lr}
 8009c32:	681c      	ldr	r4, [r3, #0]
 8009c34:	b124      	cbz	r4, 8009c40 <iprintf+0x14>
 8009c36:	69a3      	ldr	r3, [r4, #24]
 8009c38:	b913      	cbnz	r3, 8009c40 <iprintf+0x14>
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 fa5e 	bl	800a0fc <__sinit>
 8009c40:	ab05      	add	r3, sp, #20
 8009c42:	9a04      	ldr	r2, [sp, #16]
 8009c44:	68a1      	ldr	r1, [r4, #8]
 8009c46:	9301      	str	r3, [sp, #4]
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f000 fc67 	bl	800a51c <_vfiprintf_r>
 8009c4e:	b002      	add	sp, #8
 8009c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c54:	b004      	add	sp, #16
 8009c56:	4770      	bx	lr
 8009c58:	2000001c 	.word	0x2000001c

08009c5c <_puts_r>:
 8009c5c:	b570      	push	{r4, r5, r6, lr}
 8009c5e:	460e      	mov	r6, r1
 8009c60:	4605      	mov	r5, r0
 8009c62:	b118      	cbz	r0, 8009c6c <_puts_r+0x10>
 8009c64:	6983      	ldr	r3, [r0, #24]
 8009c66:	b90b      	cbnz	r3, 8009c6c <_puts_r+0x10>
 8009c68:	f000 fa48 	bl	800a0fc <__sinit>
 8009c6c:	69ab      	ldr	r3, [r5, #24]
 8009c6e:	68ac      	ldr	r4, [r5, #8]
 8009c70:	b913      	cbnz	r3, 8009c78 <_puts_r+0x1c>
 8009c72:	4628      	mov	r0, r5
 8009c74:	f000 fa42 	bl	800a0fc <__sinit>
 8009c78:	4b2c      	ldr	r3, [pc, #176]	; (8009d2c <_puts_r+0xd0>)
 8009c7a:	429c      	cmp	r4, r3
 8009c7c:	d120      	bne.n	8009cc0 <_puts_r+0x64>
 8009c7e:	686c      	ldr	r4, [r5, #4]
 8009c80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c82:	07db      	lsls	r3, r3, #31
 8009c84:	d405      	bmi.n	8009c92 <_puts_r+0x36>
 8009c86:	89a3      	ldrh	r3, [r4, #12]
 8009c88:	0598      	lsls	r0, r3, #22
 8009c8a:	d402      	bmi.n	8009c92 <_puts_r+0x36>
 8009c8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c8e:	f000 fad3 	bl	800a238 <__retarget_lock_acquire_recursive>
 8009c92:	89a3      	ldrh	r3, [r4, #12]
 8009c94:	0719      	lsls	r1, r3, #28
 8009c96:	d51d      	bpl.n	8009cd4 <_puts_r+0x78>
 8009c98:	6923      	ldr	r3, [r4, #16]
 8009c9a:	b1db      	cbz	r3, 8009cd4 <_puts_r+0x78>
 8009c9c:	3e01      	subs	r6, #1
 8009c9e:	68a3      	ldr	r3, [r4, #8]
 8009ca0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009ca4:	3b01      	subs	r3, #1
 8009ca6:	60a3      	str	r3, [r4, #8]
 8009ca8:	bb39      	cbnz	r1, 8009cfa <_puts_r+0x9e>
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	da38      	bge.n	8009d20 <_puts_r+0xc4>
 8009cae:	4622      	mov	r2, r4
 8009cb0:	210a      	movs	r1, #10
 8009cb2:	4628      	mov	r0, r5
 8009cb4:	f000 f848 	bl	8009d48 <__swbuf_r>
 8009cb8:	3001      	adds	r0, #1
 8009cba:	d011      	beq.n	8009ce0 <_puts_r+0x84>
 8009cbc:	250a      	movs	r5, #10
 8009cbe:	e011      	b.n	8009ce4 <_puts_r+0x88>
 8009cc0:	4b1b      	ldr	r3, [pc, #108]	; (8009d30 <_puts_r+0xd4>)
 8009cc2:	429c      	cmp	r4, r3
 8009cc4:	d101      	bne.n	8009cca <_puts_r+0x6e>
 8009cc6:	68ac      	ldr	r4, [r5, #8]
 8009cc8:	e7da      	b.n	8009c80 <_puts_r+0x24>
 8009cca:	4b1a      	ldr	r3, [pc, #104]	; (8009d34 <_puts_r+0xd8>)
 8009ccc:	429c      	cmp	r4, r3
 8009cce:	bf08      	it	eq
 8009cd0:	68ec      	ldreq	r4, [r5, #12]
 8009cd2:	e7d5      	b.n	8009c80 <_puts_r+0x24>
 8009cd4:	4621      	mov	r1, r4
 8009cd6:	4628      	mov	r0, r5
 8009cd8:	f000 f888 	bl	8009dec <__swsetup_r>
 8009cdc:	2800      	cmp	r0, #0
 8009cde:	d0dd      	beq.n	8009c9c <_puts_r+0x40>
 8009ce0:	f04f 35ff 	mov.w	r5, #4294967295
 8009ce4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ce6:	07da      	lsls	r2, r3, #31
 8009ce8:	d405      	bmi.n	8009cf6 <_puts_r+0x9a>
 8009cea:	89a3      	ldrh	r3, [r4, #12]
 8009cec:	059b      	lsls	r3, r3, #22
 8009cee:	d402      	bmi.n	8009cf6 <_puts_r+0x9a>
 8009cf0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cf2:	f000 faa2 	bl	800a23a <__retarget_lock_release_recursive>
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	bd70      	pop	{r4, r5, r6, pc}
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	da04      	bge.n	8009d08 <_puts_r+0xac>
 8009cfe:	69a2      	ldr	r2, [r4, #24]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	dc06      	bgt.n	8009d12 <_puts_r+0xb6>
 8009d04:	290a      	cmp	r1, #10
 8009d06:	d004      	beq.n	8009d12 <_puts_r+0xb6>
 8009d08:	6823      	ldr	r3, [r4, #0]
 8009d0a:	1c5a      	adds	r2, r3, #1
 8009d0c:	6022      	str	r2, [r4, #0]
 8009d0e:	7019      	strb	r1, [r3, #0]
 8009d10:	e7c5      	b.n	8009c9e <_puts_r+0x42>
 8009d12:	4622      	mov	r2, r4
 8009d14:	4628      	mov	r0, r5
 8009d16:	f000 f817 	bl	8009d48 <__swbuf_r>
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	d1bf      	bne.n	8009c9e <_puts_r+0x42>
 8009d1e:	e7df      	b.n	8009ce0 <_puts_r+0x84>
 8009d20:	6823      	ldr	r3, [r4, #0]
 8009d22:	250a      	movs	r5, #10
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	6022      	str	r2, [r4, #0]
 8009d28:	701d      	strb	r5, [r3, #0]
 8009d2a:	e7db      	b.n	8009ce4 <_puts_r+0x88>
 8009d2c:	0800ad1c 	.word	0x0800ad1c
 8009d30:	0800ad3c 	.word	0x0800ad3c
 8009d34:	0800acfc 	.word	0x0800acfc

08009d38 <puts>:
 8009d38:	4b02      	ldr	r3, [pc, #8]	; (8009d44 <puts+0xc>)
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	6818      	ldr	r0, [r3, #0]
 8009d3e:	f7ff bf8d 	b.w	8009c5c <_puts_r>
 8009d42:	bf00      	nop
 8009d44:	2000001c 	.word	0x2000001c

08009d48 <__swbuf_r>:
 8009d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d4a:	460e      	mov	r6, r1
 8009d4c:	4614      	mov	r4, r2
 8009d4e:	4605      	mov	r5, r0
 8009d50:	b118      	cbz	r0, 8009d5a <__swbuf_r+0x12>
 8009d52:	6983      	ldr	r3, [r0, #24]
 8009d54:	b90b      	cbnz	r3, 8009d5a <__swbuf_r+0x12>
 8009d56:	f000 f9d1 	bl	800a0fc <__sinit>
 8009d5a:	4b21      	ldr	r3, [pc, #132]	; (8009de0 <__swbuf_r+0x98>)
 8009d5c:	429c      	cmp	r4, r3
 8009d5e:	d12b      	bne.n	8009db8 <__swbuf_r+0x70>
 8009d60:	686c      	ldr	r4, [r5, #4]
 8009d62:	69a3      	ldr	r3, [r4, #24]
 8009d64:	60a3      	str	r3, [r4, #8]
 8009d66:	89a3      	ldrh	r3, [r4, #12]
 8009d68:	071a      	lsls	r2, r3, #28
 8009d6a:	d52f      	bpl.n	8009dcc <__swbuf_r+0x84>
 8009d6c:	6923      	ldr	r3, [r4, #16]
 8009d6e:	b36b      	cbz	r3, 8009dcc <__swbuf_r+0x84>
 8009d70:	6923      	ldr	r3, [r4, #16]
 8009d72:	6820      	ldr	r0, [r4, #0]
 8009d74:	1ac0      	subs	r0, r0, r3
 8009d76:	6963      	ldr	r3, [r4, #20]
 8009d78:	b2f6      	uxtb	r6, r6
 8009d7a:	4283      	cmp	r3, r0
 8009d7c:	4637      	mov	r7, r6
 8009d7e:	dc04      	bgt.n	8009d8a <__swbuf_r+0x42>
 8009d80:	4621      	mov	r1, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	f000 f926 	bl	8009fd4 <_fflush_r>
 8009d88:	bb30      	cbnz	r0, 8009dd8 <__swbuf_r+0x90>
 8009d8a:	68a3      	ldr	r3, [r4, #8]
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	60a3      	str	r3, [r4, #8]
 8009d90:	6823      	ldr	r3, [r4, #0]
 8009d92:	1c5a      	adds	r2, r3, #1
 8009d94:	6022      	str	r2, [r4, #0]
 8009d96:	701e      	strb	r6, [r3, #0]
 8009d98:	6963      	ldr	r3, [r4, #20]
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	4283      	cmp	r3, r0
 8009d9e:	d004      	beq.n	8009daa <__swbuf_r+0x62>
 8009da0:	89a3      	ldrh	r3, [r4, #12]
 8009da2:	07db      	lsls	r3, r3, #31
 8009da4:	d506      	bpl.n	8009db4 <__swbuf_r+0x6c>
 8009da6:	2e0a      	cmp	r6, #10
 8009da8:	d104      	bne.n	8009db4 <__swbuf_r+0x6c>
 8009daa:	4621      	mov	r1, r4
 8009dac:	4628      	mov	r0, r5
 8009dae:	f000 f911 	bl	8009fd4 <_fflush_r>
 8009db2:	b988      	cbnz	r0, 8009dd8 <__swbuf_r+0x90>
 8009db4:	4638      	mov	r0, r7
 8009db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009db8:	4b0a      	ldr	r3, [pc, #40]	; (8009de4 <__swbuf_r+0x9c>)
 8009dba:	429c      	cmp	r4, r3
 8009dbc:	d101      	bne.n	8009dc2 <__swbuf_r+0x7a>
 8009dbe:	68ac      	ldr	r4, [r5, #8]
 8009dc0:	e7cf      	b.n	8009d62 <__swbuf_r+0x1a>
 8009dc2:	4b09      	ldr	r3, [pc, #36]	; (8009de8 <__swbuf_r+0xa0>)
 8009dc4:	429c      	cmp	r4, r3
 8009dc6:	bf08      	it	eq
 8009dc8:	68ec      	ldreq	r4, [r5, #12]
 8009dca:	e7ca      	b.n	8009d62 <__swbuf_r+0x1a>
 8009dcc:	4621      	mov	r1, r4
 8009dce:	4628      	mov	r0, r5
 8009dd0:	f000 f80c 	bl	8009dec <__swsetup_r>
 8009dd4:	2800      	cmp	r0, #0
 8009dd6:	d0cb      	beq.n	8009d70 <__swbuf_r+0x28>
 8009dd8:	f04f 37ff 	mov.w	r7, #4294967295
 8009ddc:	e7ea      	b.n	8009db4 <__swbuf_r+0x6c>
 8009dde:	bf00      	nop
 8009de0:	0800ad1c 	.word	0x0800ad1c
 8009de4:	0800ad3c 	.word	0x0800ad3c
 8009de8:	0800acfc 	.word	0x0800acfc

08009dec <__swsetup_r>:
 8009dec:	4b32      	ldr	r3, [pc, #200]	; (8009eb8 <__swsetup_r+0xcc>)
 8009dee:	b570      	push	{r4, r5, r6, lr}
 8009df0:	681d      	ldr	r5, [r3, #0]
 8009df2:	4606      	mov	r6, r0
 8009df4:	460c      	mov	r4, r1
 8009df6:	b125      	cbz	r5, 8009e02 <__swsetup_r+0x16>
 8009df8:	69ab      	ldr	r3, [r5, #24]
 8009dfa:	b913      	cbnz	r3, 8009e02 <__swsetup_r+0x16>
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	f000 f97d 	bl	800a0fc <__sinit>
 8009e02:	4b2e      	ldr	r3, [pc, #184]	; (8009ebc <__swsetup_r+0xd0>)
 8009e04:	429c      	cmp	r4, r3
 8009e06:	d10f      	bne.n	8009e28 <__swsetup_r+0x3c>
 8009e08:	686c      	ldr	r4, [r5, #4]
 8009e0a:	89a3      	ldrh	r3, [r4, #12]
 8009e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e10:	0719      	lsls	r1, r3, #28
 8009e12:	d42c      	bmi.n	8009e6e <__swsetup_r+0x82>
 8009e14:	06dd      	lsls	r5, r3, #27
 8009e16:	d411      	bmi.n	8009e3c <__swsetup_r+0x50>
 8009e18:	2309      	movs	r3, #9
 8009e1a:	6033      	str	r3, [r6, #0]
 8009e1c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009e20:	81a3      	strh	r3, [r4, #12]
 8009e22:	f04f 30ff 	mov.w	r0, #4294967295
 8009e26:	e03e      	b.n	8009ea6 <__swsetup_r+0xba>
 8009e28:	4b25      	ldr	r3, [pc, #148]	; (8009ec0 <__swsetup_r+0xd4>)
 8009e2a:	429c      	cmp	r4, r3
 8009e2c:	d101      	bne.n	8009e32 <__swsetup_r+0x46>
 8009e2e:	68ac      	ldr	r4, [r5, #8]
 8009e30:	e7eb      	b.n	8009e0a <__swsetup_r+0x1e>
 8009e32:	4b24      	ldr	r3, [pc, #144]	; (8009ec4 <__swsetup_r+0xd8>)
 8009e34:	429c      	cmp	r4, r3
 8009e36:	bf08      	it	eq
 8009e38:	68ec      	ldreq	r4, [r5, #12]
 8009e3a:	e7e6      	b.n	8009e0a <__swsetup_r+0x1e>
 8009e3c:	0758      	lsls	r0, r3, #29
 8009e3e:	d512      	bpl.n	8009e66 <__swsetup_r+0x7a>
 8009e40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009e42:	b141      	cbz	r1, 8009e56 <__swsetup_r+0x6a>
 8009e44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009e48:	4299      	cmp	r1, r3
 8009e4a:	d002      	beq.n	8009e52 <__swsetup_r+0x66>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	f000 fa5b 	bl	800a308 <_free_r>
 8009e52:	2300      	movs	r3, #0
 8009e54:	6363      	str	r3, [r4, #52]	; 0x34
 8009e56:	89a3      	ldrh	r3, [r4, #12]
 8009e58:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009e5c:	81a3      	strh	r3, [r4, #12]
 8009e5e:	2300      	movs	r3, #0
 8009e60:	6063      	str	r3, [r4, #4]
 8009e62:	6923      	ldr	r3, [r4, #16]
 8009e64:	6023      	str	r3, [r4, #0]
 8009e66:	89a3      	ldrh	r3, [r4, #12]
 8009e68:	f043 0308 	orr.w	r3, r3, #8
 8009e6c:	81a3      	strh	r3, [r4, #12]
 8009e6e:	6923      	ldr	r3, [r4, #16]
 8009e70:	b94b      	cbnz	r3, 8009e86 <__swsetup_r+0x9a>
 8009e72:	89a3      	ldrh	r3, [r4, #12]
 8009e74:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009e7c:	d003      	beq.n	8009e86 <__swsetup_r+0x9a>
 8009e7e:	4621      	mov	r1, r4
 8009e80:	4630      	mov	r0, r6
 8009e82:	f000 fa01 	bl	800a288 <__smakebuf_r>
 8009e86:	89a0      	ldrh	r0, [r4, #12]
 8009e88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009e8c:	f010 0301 	ands.w	r3, r0, #1
 8009e90:	d00a      	beq.n	8009ea8 <__swsetup_r+0xbc>
 8009e92:	2300      	movs	r3, #0
 8009e94:	60a3      	str	r3, [r4, #8]
 8009e96:	6963      	ldr	r3, [r4, #20]
 8009e98:	425b      	negs	r3, r3
 8009e9a:	61a3      	str	r3, [r4, #24]
 8009e9c:	6923      	ldr	r3, [r4, #16]
 8009e9e:	b943      	cbnz	r3, 8009eb2 <__swsetup_r+0xc6>
 8009ea0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009ea4:	d1ba      	bne.n	8009e1c <__swsetup_r+0x30>
 8009ea6:	bd70      	pop	{r4, r5, r6, pc}
 8009ea8:	0781      	lsls	r1, r0, #30
 8009eaa:	bf58      	it	pl
 8009eac:	6963      	ldrpl	r3, [r4, #20]
 8009eae:	60a3      	str	r3, [r4, #8]
 8009eb0:	e7f4      	b.n	8009e9c <__swsetup_r+0xb0>
 8009eb2:	2000      	movs	r0, #0
 8009eb4:	e7f7      	b.n	8009ea6 <__swsetup_r+0xba>
 8009eb6:	bf00      	nop
 8009eb8:	2000001c 	.word	0x2000001c
 8009ebc:	0800ad1c 	.word	0x0800ad1c
 8009ec0:	0800ad3c 	.word	0x0800ad3c
 8009ec4:	0800acfc 	.word	0x0800acfc

08009ec8 <__sflush_r>:
 8009ec8:	898a      	ldrh	r2, [r1, #12]
 8009eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ece:	4605      	mov	r5, r0
 8009ed0:	0710      	lsls	r0, r2, #28
 8009ed2:	460c      	mov	r4, r1
 8009ed4:	d458      	bmi.n	8009f88 <__sflush_r+0xc0>
 8009ed6:	684b      	ldr	r3, [r1, #4]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	dc05      	bgt.n	8009ee8 <__sflush_r+0x20>
 8009edc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	dc02      	bgt.n	8009ee8 <__sflush_r+0x20>
 8009ee2:	2000      	movs	r0, #0
 8009ee4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009eea:	2e00      	cmp	r6, #0
 8009eec:	d0f9      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009eee:	2300      	movs	r3, #0
 8009ef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009ef4:	682f      	ldr	r7, [r5, #0]
 8009ef6:	602b      	str	r3, [r5, #0]
 8009ef8:	d032      	beq.n	8009f60 <__sflush_r+0x98>
 8009efa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009efc:	89a3      	ldrh	r3, [r4, #12]
 8009efe:	075a      	lsls	r2, r3, #29
 8009f00:	d505      	bpl.n	8009f0e <__sflush_r+0x46>
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	1ac0      	subs	r0, r0, r3
 8009f06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009f08:	b10b      	cbz	r3, 8009f0e <__sflush_r+0x46>
 8009f0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009f0c:	1ac0      	subs	r0, r0, r3
 8009f0e:	2300      	movs	r3, #0
 8009f10:	4602      	mov	r2, r0
 8009f12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009f14:	6a21      	ldr	r1, [r4, #32]
 8009f16:	4628      	mov	r0, r5
 8009f18:	47b0      	blx	r6
 8009f1a:	1c43      	adds	r3, r0, #1
 8009f1c:	89a3      	ldrh	r3, [r4, #12]
 8009f1e:	d106      	bne.n	8009f2e <__sflush_r+0x66>
 8009f20:	6829      	ldr	r1, [r5, #0]
 8009f22:	291d      	cmp	r1, #29
 8009f24:	d82c      	bhi.n	8009f80 <__sflush_r+0xb8>
 8009f26:	4a2a      	ldr	r2, [pc, #168]	; (8009fd0 <__sflush_r+0x108>)
 8009f28:	40ca      	lsrs	r2, r1
 8009f2a:	07d6      	lsls	r6, r2, #31
 8009f2c:	d528      	bpl.n	8009f80 <__sflush_r+0xb8>
 8009f2e:	2200      	movs	r2, #0
 8009f30:	6062      	str	r2, [r4, #4]
 8009f32:	04d9      	lsls	r1, r3, #19
 8009f34:	6922      	ldr	r2, [r4, #16]
 8009f36:	6022      	str	r2, [r4, #0]
 8009f38:	d504      	bpl.n	8009f44 <__sflush_r+0x7c>
 8009f3a:	1c42      	adds	r2, r0, #1
 8009f3c:	d101      	bne.n	8009f42 <__sflush_r+0x7a>
 8009f3e:	682b      	ldr	r3, [r5, #0]
 8009f40:	b903      	cbnz	r3, 8009f44 <__sflush_r+0x7c>
 8009f42:	6560      	str	r0, [r4, #84]	; 0x54
 8009f44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009f46:	602f      	str	r7, [r5, #0]
 8009f48:	2900      	cmp	r1, #0
 8009f4a:	d0ca      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009f4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009f50:	4299      	cmp	r1, r3
 8009f52:	d002      	beq.n	8009f5a <__sflush_r+0x92>
 8009f54:	4628      	mov	r0, r5
 8009f56:	f000 f9d7 	bl	800a308 <_free_r>
 8009f5a:	2000      	movs	r0, #0
 8009f5c:	6360      	str	r0, [r4, #52]	; 0x34
 8009f5e:	e7c1      	b.n	8009ee4 <__sflush_r+0x1c>
 8009f60:	6a21      	ldr	r1, [r4, #32]
 8009f62:	2301      	movs	r3, #1
 8009f64:	4628      	mov	r0, r5
 8009f66:	47b0      	blx	r6
 8009f68:	1c41      	adds	r1, r0, #1
 8009f6a:	d1c7      	bne.n	8009efc <__sflush_r+0x34>
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d0c4      	beq.n	8009efc <__sflush_r+0x34>
 8009f72:	2b1d      	cmp	r3, #29
 8009f74:	d001      	beq.n	8009f7a <__sflush_r+0xb2>
 8009f76:	2b16      	cmp	r3, #22
 8009f78:	d101      	bne.n	8009f7e <__sflush_r+0xb6>
 8009f7a:	602f      	str	r7, [r5, #0]
 8009f7c:	e7b1      	b.n	8009ee2 <__sflush_r+0x1a>
 8009f7e:	89a3      	ldrh	r3, [r4, #12]
 8009f80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f84:	81a3      	strh	r3, [r4, #12]
 8009f86:	e7ad      	b.n	8009ee4 <__sflush_r+0x1c>
 8009f88:	690f      	ldr	r7, [r1, #16]
 8009f8a:	2f00      	cmp	r7, #0
 8009f8c:	d0a9      	beq.n	8009ee2 <__sflush_r+0x1a>
 8009f8e:	0793      	lsls	r3, r2, #30
 8009f90:	680e      	ldr	r6, [r1, #0]
 8009f92:	bf08      	it	eq
 8009f94:	694b      	ldreq	r3, [r1, #20]
 8009f96:	600f      	str	r7, [r1, #0]
 8009f98:	bf18      	it	ne
 8009f9a:	2300      	movne	r3, #0
 8009f9c:	eba6 0807 	sub.w	r8, r6, r7
 8009fa0:	608b      	str	r3, [r1, #8]
 8009fa2:	f1b8 0f00 	cmp.w	r8, #0
 8009fa6:	dd9c      	ble.n	8009ee2 <__sflush_r+0x1a>
 8009fa8:	6a21      	ldr	r1, [r4, #32]
 8009faa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009fac:	4643      	mov	r3, r8
 8009fae:	463a      	mov	r2, r7
 8009fb0:	4628      	mov	r0, r5
 8009fb2:	47b0      	blx	r6
 8009fb4:	2800      	cmp	r0, #0
 8009fb6:	dc06      	bgt.n	8009fc6 <__sflush_r+0xfe>
 8009fb8:	89a3      	ldrh	r3, [r4, #12]
 8009fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009fbe:	81a3      	strh	r3, [r4, #12]
 8009fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fc4:	e78e      	b.n	8009ee4 <__sflush_r+0x1c>
 8009fc6:	4407      	add	r7, r0
 8009fc8:	eba8 0800 	sub.w	r8, r8, r0
 8009fcc:	e7e9      	b.n	8009fa2 <__sflush_r+0xda>
 8009fce:	bf00      	nop
 8009fd0:	20400001 	.word	0x20400001

08009fd4 <_fflush_r>:
 8009fd4:	b538      	push	{r3, r4, r5, lr}
 8009fd6:	690b      	ldr	r3, [r1, #16]
 8009fd8:	4605      	mov	r5, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	b913      	cbnz	r3, 8009fe4 <_fflush_r+0x10>
 8009fde:	2500      	movs	r5, #0
 8009fe0:	4628      	mov	r0, r5
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
 8009fe4:	b118      	cbz	r0, 8009fee <_fflush_r+0x1a>
 8009fe6:	6983      	ldr	r3, [r0, #24]
 8009fe8:	b90b      	cbnz	r3, 8009fee <_fflush_r+0x1a>
 8009fea:	f000 f887 	bl	800a0fc <__sinit>
 8009fee:	4b14      	ldr	r3, [pc, #80]	; (800a040 <_fflush_r+0x6c>)
 8009ff0:	429c      	cmp	r4, r3
 8009ff2:	d11b      	bne.n	800a02c <_fflush_r+0x58>
 8009ff4:	686c      	ldr	r4, [r5, #4]
 8009ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0ef      	beq.n	8009fde <_fflush_r+0xa>
 8009ffe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a000:	07d0      	lsls	r0, r2, #31
 800a002:	d404      	bmi.n	800a00e <_fflush_r+0x3a>
 800a004:	0599      	lsls	r1, r3, #22
 800a006:	d402      	bmi.n	800a00e <_fflush_r+0x3a>
 800a008:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a00a:	f000 f915 	bl	800a238 <__retarget_lock_acquire_recursive>
 800a00e:	4628      	mov	r0, r5
 800a010:	4621      	mov	r1, r4
 800a012:	f7ff ff59 	bl	8009ec8 <__sflush_r>
 800a016:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a018:	07da      	lsls	r2, r3, #31
 800a01a:	4605      	mov	r5, r0
 800a01c:	d4e0      	bmi.n	8009fe0 <_fflush_r+0xc>
 800a01e:	89a3      	ldrh	r3, [r4, #12]
 800a020:	059b      	lsls	r3, r3, #22
 800a022:	d4dd      	bmi.n	8009fe0 <_fflush_r+0xc>
 800a024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a026:	f000 f908 	bl	800a23a <__retarget_lock_release_recursive>
 800a02a:	e7d9      	b.n	8009fe0 <_fflush_r+0xc>
 800a02c:	4b05      	ldr	r3, [pc, #20]	; (800a044 <_fflush_r+0x70>)
 800a02e:	429c      	cmp	r4, r3
 800a030:	d101      	bne.n	800a036 <_fflush_r+0x62>
 800a032:	68ac      	ldr	r4, [r5, #8]
 800a034:	e7df      	b.n	8009ff6 <_fflush_r+0x22>
 800a036:	4b04      	ldr	r3, [pc, #16]	; (800a048 <_fflush_r+0x74>)
 800a038:	429c      	cmp	r4, r3
 800a03a:	bf08      	it	eq
 800a03c:	68ec      	ldreq	r4, [r5, #12]
 800a03e:	e7da      	b.n	8009ff6 <_fflush_r+0x22>
 800a040:	0800ad1c 	.word	0x0800ad1c
 800a044:	0800ad3c 	.word	0x0800ad3c
 800a048:	0800acfc 	.word	0x0800acfc

0800a04c <std>:
 800a04c:	2300      	movs	r3, #0
 800a04e:	b510      	push	{r4, lr}
 800a050:	4604      	mov	r4, r0
 800a052:	e9c0 3300 	strd	r3, r3, [r0]
 800a056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a05a:	6083      	str	r3, [r0, #8]
 800a05c:	8181      	strh	r1, [r0, #12]
 800a05e:	6643      	str	r3, [r0, #100]	; 0x64
 800a060:	81c2      	strh	r2, [r0, #14]
 800a062:	6183      	str	r3, [r0, #24]
 800a064:	4619      	mov	r1, r3
 800a066:	2208      	movs	r2, #8
 800a068:	305c      	adds	r0, #92	; 0x5c
 800a06a:	f7ff fdd7 	bl	8009c1c <memset>
 800a06e:	4b05      	ldr	r3, [pc, #20]	; (800a084 <std+0x38>)
 800a070:	6263      	str	r3, [r4, #36]	; 0x24
 800a072:	4b05      	ldr	r3, [pc, #20]	; (800a088 <std+0x3c>)
 800a074:	62a3      	str	r3, [r4, #40]	; 0x28
 800a076:	4b05      	ldr	r3, [pc, #20]	; (800a08c <std+0x40>)
 800a078:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <std+0x44>)
 800a07c:	6224      	str	r4, [r4, #32]
 800a07e:	6323      	str	r3, [r4, #48]	; 0x30
 800a080:	bd10      	pop	{r4, pc}
 800a082:	bf00      	nop
 800a084:	0800aac5 	.word	0x0800aac5
 800a088:	0800aae7 	.word	0x0800aae7
 800a08c:	0800ab1f 	.word	0x0800ab1f
 800a090:	0800ab43 	.word	0x0800ab43

0800a094 <_cleanup_r>:
 800a094:	4901      	ldr	r1, [pc, #4]	; (800a09c <_cleanup_r+0x8>)
 800a096:	f000 b8af 	b.w	800a1f8 <_fwalk_reent>
 800a09a:	bf00      	nop
 800a09c:	08009fd5 	.word	0x08009fd5

0800a0a0 <__sfmoreglue>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	2268      	movs	r2, #104	; 0x68
 800a0a4:	1e4d      	subs	r5, r1, #1
 800a0a6:	4355      	muls	r5, r2
 800a0a8:	460e      	mov	r6, r1
 800a0aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a0ae:	f000 f997 	bl	800a3e0 <_malloc_r>
 800a0b2:	4604      	mov	r4, r0
 800a0b4:	b140      	cbz	r0, 800a0c8 <__sfmoreglue+0x28>
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	e9c0 1600 	strd	r1, r6, [r0]
 800a0bc:	300c      	adds	r0, #12
 800a0be:	60a0      	str	r0, [r4, #8]
 800a0c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a0c4:	f7ff fdaa 	bl	8009c1c <memset>
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	bd70      	pop	{r4, r5, r6, pc}

0800a0cc <__sfp_lock_acquire>:
 800a0cc:	4801      	ldr	r0, [pc, #4]	; (800a0d4 <__sfp_lock_acquire+0x8>)
 800a0ce:	f000 b8b3 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a0d2:	bf00      	nop
 800a0d4:	2000053d 	.word	0x2000053d

0800a0d8 <__sfp_lock_release>:
 800a0d8:	4801      	ldr	r0, [pc, #4]	; (800a0e0 <__sfp_lock_release+0x8>)
 800a0da:	f000 b8ae 	b.w	800a23a <__retarget_lock_release_recursive>
 800a0de:	bf00      	nop
 800a0e0:	2000053d 	.word	0x2000053d

0800a0e4 <__sinit_lock_acquire>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	; (800a0ec <__sinit_lock_acquire+0x8>)
 800a0e6:	f000 b8a7 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	2000053e 	.word	0x2000053e

0800a0f0 <__sinit_lock_release>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	; (800a0f8 <__sinit_lock_release+0x8>)
 800a0f2:	f000 b8a2 	b.w	800a23a <__retarget_lock_release_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	2000053e 	.word	0x2000053e

0800a0fc <__sinit>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	4604      	mov	r4, r0
 800a100:	f7ff fff0 	bl	800a0e4 <__sinit_lock_acquire>
 800a104:	69a3      	ldr	r3, [r4, #24]
 800a106:	b11b      	cbz	r3, 800a110 <__sinit+0x14>
 800a108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a10c:	f7ff bff0 	b.w	800a0f0 <__sinit_lock_release>
 800a110:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a114:	6523      	str	r3, [r4, #80]	; 0x50
 800a116:	4b13      	ldr	r3, [pc, #76]	; (800a164 <__sinit+0x68>)
 800a118:	4a13      	ldr	r2, [pc, #76]	; (800a168 <__sinit+0x6c>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	62a2      	str	r2, [r4, #40]	; 0x28
 800a11e:	42a3      	cmp	r3, r4
 800a120:	bf04      	itt	eq
 800a122:	2301      	moveq	r3, #1
 800a124:	61a3      	streq	r3, [r4, #24]
 800a126:	4620      	mov	r0, r4
 800a128:	f000 f820 	bl	800a16c <__sfp>
 800a12c:	6060      	str	r0, [r4, #4]
 800a12e:	4620      	mov	r0, r4
 800a130:	f000 f81c 	bl	800a16c <__sfp>
 800a134:	60a0      	str	r0, [r4, #8]
 800a136:	4620      	mov	r0, r4
 800a138:	f000 f818 	bl	800a16c <__sfp>
 800a13c:	2200      	movs	r2, #0
 800a13e:	60e0      	str	r0, [r4, #12]
 800a140:	2104      	movs	r1, #4
 800a142:	6860      	ldr	r0, [r4, #4]
 800a144:	f7ff ff82 	bl	800a04c <std>
 800a148:	68a0      	ldr	r0, [r4, #8]
 800a14a:	2201      	movs	r2, #1
 800a14c:	2109      	movs	r1, #9
 800a14e:	f7ff ff7d 	bl	800a04c <std>
 800a152:	68e0      	ldr	r0, [r4, #12]
 800a154:	2202      	movs	r2, #2
 800a156:	2112      	movs	r1, #18
 800a158:	f7ff ff78 	bl	800a04c <std>
 800a15c:	2301      	movs	r3, #1
 800a15e:	61a3      	str	r3, [r4, #24]
 800a160:	e7d2      	b.n	800a108 <__sinit+0xc>
 800a162:	bf00      	nop
 800a164:	0800acf8 	.word	0x0800acf8
 800a168:	0800a095 	.word	0x0800a095

0800a16c <__sfp>:
 800a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a16e:	4607      	mov	r7, r0
 800a170:	f7ff ffac 	bl	800a0cc <__sfp_lock_acquire>
 800a174:	4b1e      	ldr	r3, [pc, #120]	; (800a1f0 <__sfp+0x84>)
 800a176:	681e      	ldr	r6, [r3, #0]
 800a178:	69b3      	ldr	r3, [r6, #24]
 800a17a:	b913      	cbnz	r3, 800a182 <__sfp+0x16>
 800a17c:	4630      	mov	r0, r6
 800a17e:	f7ff ffbd 	bl	800a0fc <__sinit>
 800a182:	3648      	adds	r6, #72	; 0x48
 800a184:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a188:	3b01      	subs	r3, #1
 800a18a:	d503      	bpl.n	800a194 <__sfp+0x28>
 800a18c:	6833      	ldr	r3, [r6, #0]
 800a18e:	b30b      	cbz	r3, 800a1d4 <__sfp+0x68>
 800a190:	6836      	ldr	r6, [r6, #0]
 800a192:	e7f7      	b.n	800a184 <__sfp+0x18>
 800a194:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a198:	b9d5      	cbnz	r5, 800a1d0 <__sfp+0x64>
 800a19a:	4b16      	ldr	r3, [pc, #88]	; (800a1f4 <__sfp+0x88>)
 800a19c:	60e3      	str	r3, [r4, #12]
 800a19e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1a2:	6665      	str	r5, [r4, #100]	; 0x64
 800a1a4:	f000 f847 	bl	800a236 <__retarget_lock_init_recursive>
 800a1a8:	f7ff ff96 	bl	800a0d8 <__sfp_lock_release>
 800a1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a1b4:	6025      	str	r5, [r4, #0]
 800a1b6:	61a5      	str	r5, [r4, #24]
 800a1b8:	2208      	movs	r2, #8
 800a1ba:	4629      	mov	r1, r5
 800a1bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a1c0:	f7ff fd2c 	bl	8009c1c <memset>
 800a1c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a1c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a1cc:	4620      	mov	r0, r4
 800a1ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1d0:	3468      	adds	r4, #104	; 0x68
 800a1d2:	e7d9      	b.n	800a188 <__sfp+0x1c>
 800a1d4:	2104      	movs	r1, #4
 800a1d6:	4638      	mov	r0, r7
 800a1d8:	f7ff ff62 	bl	800a0a0 <__sfmoreglue>
 800a1dc:	4604      	mov	r4, r0
 800a1de:	6030      	str	r0, [r6, #0]
 800a1e0:	2800      	cmp	r0, #0
 800a1e2:	d1d5      	bne.n	800a190 <__sfp+0x24>
 800a1e4:	f7ff ff78 	bl	800a0d8 <__sfp_lock_release>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	e7ee      	b.n	800a1cc <__sfp+0x60>
 800a1ee:	bf00      	nop
 800a1f0:	0800acf8 	.word	0x0800acf8
 800a1f4:	ffff0001 	.word	0xffff0001

0800a1f8 <_fwalk_reent>:
 800a1f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1fc:	4606      	mov	r6, r0
 800a1fe:	4688      	mov	r8, r1
 800a200:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a204:	2700      	movs	r7, #0
 800a206:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a20a:	f1b9 0901 	subs.w	r9, r9, #1
 800a20e:	d505      	bpl.n	800a21c <_fwalk_reent+0x24>
 800a210:	6824      	ldr	r4, [r4, #0]
 800a212:	2c00      	cmp	r4, #0
 800a214:	d1f7      	bne.n	800a206 <_fwalk_reent+0xe>
 800a216:	4638      	mov	r0, r7
 800a218:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a21c:	89ab      	ldrh	r3, [r5, #12]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d907      	bls.n	800a232 <_fwalk_reent+0x3a>
 800a222:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a226:	3301      	adds	r3, #1
 800a228:	d003      	beq.n	800a232 <_fwalk_reent+0x3a>
 800a22a:	4629      	mov	r1, r5
 800a22c:	4630      	mov	r0, r6
 800a22e:	47c0      	blx	r8
 800a230:	4307      	orrs	r7, r0
 800a232:	3568      	adds	r5, #104	; 0x68
 800a234:	e7e9      	b.n	800a20a <_fwalk_reent+0x12>

0800a236 <__retarget_lock_init_recursive>:
 800a236:	4770      	bx	lr

0800a238 <__retarget_lock_acquire_recursive>:
 800a238:	4770      	bx	lr

0800a23a <__retarget_lock_release_recursive>:
 800a23a:	4770      	bx	lr

0800a23c <__swhatbuf_r>:
 800a23c:	b570      	push	{r4, r5, r6, lr}
 800a23e:	460e      	mov	r6, r1
 800a240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a244:	2900      	cmp	r1, #0
 800a246:	b096      	sub	sp, #88	; 0x58
 800a248:	4614      	mov	r4, r2
 800a24a:	461d      	mov	r5, r3
 800a24c:	da08      	bge.n	800a260 <__swhatbuf_r+0x24>
 800a24e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a252:	2200      	movs	r2, #0
 800a254:	602a      	str	r2, [r5, #0]
 800a256:	061a      	lsls	r2, r3, #24
 800a258:	d410      	bmi.n	800a27c <__swhatbuf_r+0x40>
 800a25a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a25e:	e00e      	b.n	800a27e <__swhatbuf_r+0x42>
 800a260:	466a      	mov	r2, sp
 800a262:	f000 fc95 	bl	800ab90 <_fstat_r>
 800a266:	2800      	cmp	r0, #0
 800a268:	dbf1      	blt.n	800a24e <__swhatbuf_r+0x12>
 800a26a:	9a01      	ldr	r2, [sp, #4]
 800a26c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a270:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a274:	425a      	negs	r2, r3
 800a276:	415a      	adcs	r2, r3
 800a278:	602a      	str	r2, [r5, #0]
 800a27a:	e7ee      	b.n	800a25a <__swhatbuf_r+0x1e>
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	2000      	movs	r0, #0
 800a280:	6023      	str	r3, [r4, #0]
 800a282:	b016      	add	sp, #88	; 0x58
 800a284:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a288 <__smakebuf_r>:
 800a288:	898b      	ldrh	r3, [r1, #12]
 800a28a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a28c:	079d      	lsls	r5, r3, #30
 800a28e:	4606      	mov	r6, r0
 800a290:	460c      	mov	r4, r1
 800a292:	d507      	bpl.n	800a2a4 <__smakebuf_r+0x1c>
 800a294:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	6123      	str	r3, [r4, #16]
 800a29c:	2301      	movs	r3, #1
 800a29e:	6163      	str	r3, [r4, #20]
 800a2a0:	b002      	add	sp, #8
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	ab01      	add	r3, sp, #4
 800a2a6:	466a      	mov	r2, sp
 800a2a8:	f7ff ffc8 	bl	800a23c <__swhatbuf_r>
 800a2ac:	9900      	ldr	r1, [sp, #0]
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	4630      	mov	r0, r6
 800a2b2:	f000 f895 	bl	800a3e0 <_malloc_r>
 800a2b6:	b948      	cbnz	r0, 800a2cc <__smakebuf_r+0x44>
 800a2b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2bc:	059a      	lsls	r2, r3, #22
 800a2be:	d4ef      	bmi.n	800a2a0 <__smakebuf_r+0x18>
 800a2c0:	f023 0303 	bic.w	r3, r3, #3
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	81a3      	strh	r3, [r4, #12]
 800a2ca:	e7e3      	b.n	800a294 <__smakebuf_r+0xc>
 800a2cc:	4b0d      	ldr	r3, [pc, #52]	; (800a304 <__smakebuf_r+0x7c>)
 800a2ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800a2d0:	89a3      	ldrh	r3, [r4, #12]
 800a2d2:	6020      	str	r0, [r4, #0]
 800a2d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d8:	81a3      	strh	r3, [r4, #12]
 800a2da:	9b00      	ldr	r3, [sp, #0]
 800a2dc:	6163      	str	r3, [r4, #20]
 800a2de:	9b01      	ldr	r3, [sp, #4]
 800a2e0:	6120      	str	r0, [r4, #16]
 800a2e2:	b15b      	cbz	r3, 800a2fc <__smakebuf_r+0x74>
 800a2e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e8:	4630      	mov	r0, r6
 800a2ea:	f000 fc63 	bl	800abb4 <_isatty_r>
 800a2ee:	b128      	cbz	r0, 800a2fc <__smakebuf_r+0x74>
 800a2f0:	89a3      	ldrh	r3, [r4, #12]
 800a2f2:	f023 0303 	bic.w	r3, r3, #3
 800a2f6:	f043 0301 	orr.w	r3, r3, #1
 800a2fa:	81a3      	strh	r3, [r4, #12]
 800a2fc:	89a0      	ldrh	r0, [r4, #12]
 800a2fe:	4305      	orrs	r5, r0
 800a300:	81a5      	strh	r5, [r4, #12]
 800a302:	e7cd      	b.n	800a2a0 <__smakebuf_r+0x18>
 800a304:	0800a095 	.word	0x0800a095

0800a308 <_free_r>:
 800a308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a30a:	2900      	cmp	r1, #0
 800a30c:	d044      	beq.n	800a398 <_free_r+0x90>
 800a30e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a312:	9001      	str	r0, [sp, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	f1a1 0404 	sub.w	r4, r1, #4
 800a31a:	bfb8      	it	lt
 800a31c:	18e4      	addlt	r4, r4, r3
 800a31e:	f000 fc6b 	bl	800abf8 <__malloc_lock>
 800a322:	4a1e      	ldr	r2, [pc, #120]	; (800a39c <_free_r+0x94>)
 800a324:	9801      	ldr	r0, [sp, #4]
 800a326:	6813      	ldr	r3, [r2, #0]
 800a328:	b933      	cbnz	r3, 800a338 <_free_r+0x30>
 800a32a:	6063      	str	r3, [r4, #4]
 800a32c:	6014      	str	r4, [r2, #0]
 800a32e:	b003      	add	sp, #12
 800a330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a334:	f000 bc66 	b.w	800ac04 <__malloc_unlock>
 800a338:	42a3      	cmp	r3, r4
 800a33a:	d908      	bls.n	800a34e <_free_r+0x46>
 800a33c:	6825      	ldr	r5, [r4, #0]
 800a33e:	1961      	adds	r1, r4, r5
 800a340:	428b      	cmp	r3, r1
 800a342:	bf01      	itttt	eq
 800a344:	6819      	ldreq	r1, [r3, #0]
 800a346:	685b      	ldreq	r3, [r3, #4]
 800a348:	1949      	addeq	r1, r1, r5
 800a34a:	6021      	streq	r1, [r4, #0]
 800a34c:	e7ed      	b.n	800a32a <_free_r+0x22>
 800a34e:	461a      	mov	r2, r3
 800a350:	685b      	ldr	r3, [r3, #4]
 800a352:	b10b      	cbz	r3, 800a358 <_free_r+0x50>
 800a354:	42a3      	cmp	r3, r4
 800a356:	d9fa      	bls.n	800a34e <_free_r+0x46>
 800a358:	6811      	ldr	r1, [r2, #0]
 800a35a:	1855      	adds	r5, r2, r1
 800a35c:	42a5      	cmp	r5, r4
 800a35e:	d10b      	bne.n	800a378 <_free_r+0x70>
 800a360:	6824      	ldr	r4, [r4, #0]
 800a362:	4421      	add	r1, r4
 800a364:	1854      	adds	r4, r2, r1
 800a366:	42a3      	cmp	r3, r4
 800a368:	6011      	str	r1, [r2, #0]
 800a36a:	d1e0      	bne.n	800a32e <_free_r+0x26>
 800a36c:	681c      	ldr	r4, [r3, #0]
 800a36e:	685b      	ldr	r3, [r3, #4]
 800a370:	6053      	str	r3, [r2, #4]
 800a372:	4421      	add	r1, r4
 800a374:	6011      	str	r1, [r2, #0]
 800a376:	e7da      	b.n	800a32e <_free_r+0x26>
 800a378:	d902      	bls.n	800a380 <_free_r+0x78>
 800a37a:	230c      	movs	r3, #12
 800a37c:	6003      	str	r3, [r0, #0]
 800a37e:	e7d6      	b.n	800a32e <_free_r+0x26>
 800a380:	6825      	ldr	r5, [r4, #0]
 800a382:	1961      	adds	r1, r4, r5
 800a384:	428b      	cmp	r3, r1
 800a386:	bf04      	itt	eq
 800a388:	6819      	ldreq	r1, [r3, #0]
 800a38a:	685b      	ldreq	r3, [r3, #4]
 800a38c:	6063      	str	r3, [r4, #4]
 800a38e:	bf04      	itt	eq
 800a390:	1949      	addeq	r1, r1, r5
 800a392:	6021      	streq	r1, [r4, #0]
 800a394:	6054      	str	r4, [r2, #4]
 800a396:	e7ca      	b.n	800a32e <_free_r+0x26>
 800a398:	b003      	add	sp, #12
 800a39a:	bd30      	pop	{r4, r5, pc}
 800a39c:	20000540 	.word	0x20000540

0800a3a0 <sbrk_aligned>:
 800a3a0:	b570      	push	{r4, r5, r6, lr}
 800a3a2:	4e0e      	ldr	r6, [pc, #56]	; (800a3dc <sbrk_aligned+0x3c>)
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	6831      	ldr	r1, [r6, #0]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	b911      	cbnz	r1, 800a3b2 <sbrk_aligned+0x12>
 800a3ac:	f000 fb7a 	bl	800aaa4 <_sbrk_r>
 800a3b0:	6030      	str	r0, [r6, #0]
 800a3b2:	4621      	mov	r1, r4
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	f000 fb75 	bl	800aaa4 <_sbrk_r>
 800a3ba:	1c43      	adds	r3, r0, #1
 800a3bc:	d00a      	beq.n	800a3d4 <sbrk_aligned+0x34>
 800a3be:	1cc4      	adds	r4, r0, #3
 800a3c0:	f024 0403 	bic.w	r4, r4, #3
 800a3c4:	42a0      	cmp	r0, r4
 800a3c6:	d007      	beq.n	800a3d8 <sbrk_aligned+0x38>
 800a3c8:	1a21      	subs	r1, r4, r0
 800a3ca:	4628      	mov	r0, r5
 800a3cc:	f000 fb6a 	bl	800aaa4 <_sbrk_r>
 800a3d0:	3001      	adds	r0, #1
 800a3d2:	d101      	bne.n	800a3d8 <sbrk_aligned+0x38>
 800a3d4:	f04f 34ff 	mov.w	r4, #4294967295
 800a3d8:	4620      	mov	r0, r4
 800a3da:	bd70      	pop	{r4, r5, r6, pc}
 800a3dc:	20000544 	.word	0x20000544

0800a3e0 <_malloc_r>:
 800a3e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3e4:	1ccd      	adds	r5, r1, #3
 800a3e6:	f025 0503 	bic.w	r5, r5, #3
 800a3ea:	3508      	adds	r5, #8
 800a3ec:	2d0c      	cmp	r5, #12
 800a3ee:	bf38      	it	cc
 800a3f0:	250c      	movcc	r5, #12
 800a3f2:	2d00      	cmp	r5, #0
 800a3f4:	4607      	mov	r7, r0
 800a3f6:	db01      	blt.n	800a3fc <_malloc_r+0x1c>
 800a3f8:	42a9      	cmp	r1, r5
 800a3fa:	d905      	bls.n	800a408 <_malloc_r+0x28>
 800a3fc:	230c      	movs	r3, #12
 800a3fe:	603b      	str	r3, [r7, #0]
 800a400:	2600      	movs	r6, #0
 800a402:	4630      	mov	r0, r6
 800a404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a408:	4e2e      	ldr	r6, [pc, #184]	; (800a4c4 <_malloc_r+0xe4>)
 800a40a:	f000 fbf5 	bl	800abf8 <__malloc_lock>
 800a40e:	6833      	ldr	r3, [r6, #0]
 800a410:	461c      	mov	r4, r3
 800a412:	bb34      	cbnz	r4, 800a462 <_malloc_r+0x82>
 800a414:	4629      	mov	r1, r5
 800a416:	4638      	mov	r0, r7
 800a418:	f7ff ffc2 	bl	800a3a0 <sbrk_aligned>
 800a41c:	1c43      	adds	r3, r0, #1
 800a41e:	4604      	mov	r4, r0
 800a420:	d14d      	bne.n	800a4be <_malloc_r+0xde>
 800a422:	6834      	ldr	r4, [r6, #0]
 800a424:	4626      	mov	r6, r4
 800a426:	2e00      	cmp	r6, #0
 800a428:	d140      	bne.n	800a4ac <_malloc_r+0xcc>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	4631      	mov	r1, r6
 800a42e:	4638      	mov	r0, r7
 800a430:	eb04 0803 	add.w	r8, r4, r3
 800a434:	f000 fb36 	bl	800aaa4 <_sbrk_r>
 800a438:	4580      	cmp	r8, r0
 800a43a:	d13a      	bne.n	800a4b2 <_malloc_r+0xd2>
 800a43c:	6821      	ldr	r1, [r4, #0]
 800a43e:	3503      	adds	r5, #3
 800a440:	1a6d      	subs	r5, r5, r1
 800a442:	f025 0503 	bic.w	r5, r5, #3
 800a446:	3508      	adds	r5, #8
 800a448:	2d0c      	cmp	r5, #12
 800a44a:	bf38      	it	cc
 800a44c:	250c      	movcc	r5, #12
 800a44e:	4629      	mov	r1, r5
 800a450:	4638      	mov	r0, r7
 800a452:	f7ff ffa5 	bl	800a3a0 <sbrk_aligned>
 800a456:	3001      	adds	r0, #1
 800a458:	d02b      	beq.n	800a4b2 <_malloc_r+0xd2>
 800a45a:	6823      	ldr	r3, [r4, #0]
 800a45c:	442b      	add	r3, r5
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	e00e      	b.n	800a480 <_malloc_r+0xa0>
 800a462:	6822      	ldr	r2, [r4, #0]
 800a464:	1b52      	subs	r2, r2, r5
 800a466:	d41e      	bmi.n	800a4a6 <_malloc_r+0xc6>
 800a468:	2a0b      	cmp	r2, #11
 800a46a:	d916      	bls.n	800a49a <_malloc_r+0xba>
 800a46c:	1961      	adds	r1, r4, r5
 800a46e:	42a3      	cmp	r3, r4
 800a470:	6025      	str	r5, [r4, #0]
 800a472:	bf18      	it	ne
 800a474:	6059      	strne	r1, [r3, #4]
 800a476:	6863      	ldr	r3, [r4, #4]
 800a478:	bf08      	it	eq
 800a47a:	6031      	streq	r1, [r6, #0]
 800a47c:	5162      	str	r2, [r4, r5]
 800a47e:	604b      	str	r3, [r1, #4]
 800a480:	4638      	mov	r0, r7
 800a482:	f104 060b 	add.w	r6, r4, #11
 800a486:	f000 fbbd 	bl	800ac04 <__malloc_unlock>
 800a48a:	f026 0607 	bic.w	r6, r6, #7
 800a48e:	1d23      	adds	r3, r4, #4
 800a490:	1af2      	subs	r2, r6, r3
 800a492:	d0b6      	beq.n	800a402 <_malloc_r+0x22>
 800a494:	1b9b      	subs	r3, r3, r6
 800a496:	50a3      	str	r3, [r4, r2]
 800a498:	e7b3      	b.n	800a402 <_malloc_r+0x22>
 800a49a:	6862      	ldr	r2, [r4, #4]
 800a49c:	42a3      	cmp	r3, r4
 800a49e:	bf0c      	ite	eq
 800a4a0:	6032      	streq	r2, [r6, #0]
 800a4a2:	605a      	strne	r2, [r3, #4]
 800a4a4:	e7ec      	b.n	800a480 <_malloc_r+0xa0>
 800a4a6:	4623      	mov	r3, r4
 800a4a8:	6864      	ldr	r4, [r4, #4]
 800a4aa:	e7b2      	b.n	800a412 <_malloc_r+0x32>
 800a4ac:	4634      	mov	r4, r6
 800a4ae:	6876      	ldr	r6, [r6, #4]
 800a4b0:	e7b9      	b.n	800a426 <_malloc_r+0x46>
 800a4b2:	230c      	movs	r3, #12
 800a4b4:	603b      	str	r3, [r7, #0]
 800a4b6:	4638      	mov	r0, r7
 800a4b8:	f000 fba4 	bl	800ac04 <__malloc_unlock>
 800a4bc:	e7a1      	b.n	800a402 <_malloc_r+0x22>
 800a4be:	6025      	str	r5, [r4, #0]
 800a4c0:	e7de      	b.n	800a480 <_malloc_r+0xa0>
 800a4c2:	bf00      	nop
 800a4c4:	20000540 	.word	0x20000540

0800a4c8 <__sfputc_r>:
 800a4c8:	6893      	ldr	r3, [r2, #8]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	b410      	push	{r4}
 800a4d0:	6093      	str	r3, [r2, #8]
 800a4d2:	da08      	bge.n	800a4e6 <__sfputc_r+0x1e>
 800a4d4:	6994      	ldr	r4, [r2, #24]
 800a4d6:	42a3      	cmp	r3, r4
 800a4d8:	db01      	blt.n	800a4de <__sfputc_r+0x16>
 800a4da:	290a      	cmp	r1, #10
 800a4dc:	d103      	bne.n	800a4e6 <__sfputc_r+0x1e>
 800a4de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4e2:	f7ff bc31 	b.w	8009d48 <__swbuf_r>
 800a4e6:	6813      	ldr	r3, [r2, #0]
 800a4e8:	1c58      	adds	r0, r3, #1
 800a4ea:	6010      	str	r0, [r2, #0]
 800a4ec:	7019      	strb	r1, [r3, #0]
 800a4ee:	4608      	mov	r0, r1
 800a4f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4f4:	4770      	bx	lr

0800a4f6 <__sfputs_r>:
 800a4f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4f8:	4606      	mov	r6, r0
 800a4fa:	460f      	mov	r7, r1
 800a4fc:	4614      	mov	r4, r2
 800a4fe:	18d5      	adds	r5, r2, r3
 800a500:	42ac      	cmp	r4, r5
 800a502:	d101      	bne.n	800a508 <__sfputs_r+0x12>
 800a504:	2000      	movs	r0, #0
 800a506:	e007      	b.n	800a518 <__sfputs_r+0x22>
 800a508:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a50c:	463a      	mov	r2, r7
 800a50e:	4630      	mov	r0, r6
 800a510:	f7ff ffda 	bl	800a4c8 <__sfputc_r>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d1f3      	bne.n	800a500 <__sfputs_r+0xa>
 800a518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a51c <_vfiprintf_r>:
 800a51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a520:	460d      	mov	r5, r1
 800a522:	b09d      	sub	sp, #116	; 0x74
 800a524:	4614      	mov	r4, r2
 800a526:	4698      	mov	r8, r3
 800a528:	4606      	mov	r6, r0
 800a52a:	b118      	cbz	r0, 800a534 <_vfiprintf_r+0x18>
 800a52c:	6983      	ldr	r3, [r0, #24]
 800a52e:	b90b      	cbnz	r3, 800a534 <_vfiprintf_r+0x18>
 800a530:	f7ff fde4 	bl	800a0fc <__sinit>
 800a534:	4b89      	ldr	r3, [pc, #548]	; (800a75c <_vfiprintf_r+0x240>)
 800a536:	429d      	cmp	r5, r3
 800a538:	d11b      	bne.n	800a572 <_vfiprintf_r+0x56>
 800a53a:	6875      	ldr	r5, [r6, #4]
 800a53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a53e:	07d9      	lsls	r1, r3, #31
 800a540:	d405      	bmi.n	800a54e <_vfiprintf_r+0x32>
 800a542:	89ab      	ldrh	r3, [r5, #12]
 800a544:	059a      	lsls	r2, r3, #22
 800a546:	d402      	bmi.n	800a54e <_vfiprintf_r+0x32>
 800a548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a54a:	f7ff fe75 	bl	800a238 <__retarget_lock_acquire_recursive>
 800a54e:	89ab      	ldrh	r3, [r5, #12]
 800a550:	071b      	lsls	r3, r3, #28
 800a552:	d501      	bpl.n	800a558 <_vfiprintf_r+0x3c>
 800a554:	692b      	ldr	r3, [r5, #16]
 800a556:	b9eb      	cbnz	r3, 800a594 <_vfiprintf_r+0x78>
 800a558:	4629      	mov	r1, r5
 800a55a:	4630      	mov	r0, r6
 800a55c:	f7ff fc46 	bl	8009dec <__swsetup_r>
 800a560:	b1c0      	cbz	r0, 800a594 <_vfiprintf_r+0x78>
 800a562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a564:	07dc      	lsls	r4, r3, #31
 800a566:	d50e      	bpl.n	800a586 <_vfiprintf_r+0x6a>
 800a568:	f04f 30ff 	mov.w	r0, #4294967295
 800a56c:	b01d      	add	sp, #116	; 0x74
 800a56e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a572:	4b7b      	ldr	r3, [pc, #492]	; (800a760 <_vfiprintf_r+0x244>)
 800a574:	429d      	cmp	r5, r3
 800a576:	d101      	bne.n	800a57c <_vfiprintf_r+0x60>
 800a578:	68b5      	ldr	r5, [r6, #8]
 800a57a:	e7df      	b.n	800a53c <_vfiprintf_r+0x20>
 800a57c:	4b79      	ldr	r3, [pc, #484]	; (800a764 <_vfiprintf_r+0x248>)
 800a57e:	429d      	cmp	r5, r3
 800a580:	bf08      	it	eq
 800a582:	68f5      	ldreq	r5, [r6, #12]
 800a584:	e7da      	b.n	800a53c <_vfiprintf_r+0x20>
 800a586:	89ab      	ldrh	r3, [r5, #12]
 800a588:	0598      	lsls	r0, r3, #22
 800a58a:	d4ed      	bmi.n	800a568 <_vfiprintf_r+0x4c>
 800a58c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a58e:	f7ff fe54 	bl	800a23a <__retarget_lock_release_recursive>
 800a592:	e7e9      	b.n	800a568 <_vfiprintf_r+0x4c>
 800a594:	2300      	movs	r3, #0
 800a596:	9309      	str	r3, [sp, #36]	; 0x24
 800a598:	2320      	movs	r3, #32
 800a59a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a59e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5a2:	2330      	movs	r3, #48	; 0x30
 800a5a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a768 <_vfiprintf_r+0x24c>
 800a5a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ac:	f04f 0901 	mov.w	r9, #1
 800a5b0:	4623      	mov	r3, r4
 800a5b2:	469a      	mov	sl, r3
 800a5b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5b8:	b10a      	cbz	r2, 800a5be <_vfiprintf_r+0xa2>
 800a5ba:	2a25      	cmp	r2, #37	; 0x25
 800a5bc:	d1f9      	bne.n	800a5b2 <_vfiprintf_r+0x96>
 800a5be:	ebba 0b04 	subs.w	fp, sl, r4
 800a5c2:	d00b      	beq.n	800a5dc <_vfiprintf_r+0xc0>
 800a5c4:	465b      	mov	r3, fp
 800a5c6:	4622      	mov	r2, r4
 800a5c8:	4629      	mov	r1, r5
 800a5ca:	4630      	mov	r0, r6
 800a5cc:	f7ff ff93 	bl	800a4f6 <__sfputs_r>
 800a5d0:	3001      	adds	r0, #1
 800a5d2:	f000 80aa 	beq.w	800a72a <_vfiprintf_r+0x20e>
 800a5d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5d8:	445a      	add	r2, fp
 800a5da:	9209      	str	r2, [sp, #36]	; 0x24
 800a5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	f000 80a2 	beq.w	800a72a <_vfiprintf_r+0x20e>
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a5f0:	f10a 0a01 	add.w	sl, sl, #1
 800a5f4:	9304      	str	r3, [sp, #16]
 800a5f6:	9307      	str	r3, [sp, #28]
 800a5f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a5fc:	931a      	str	r3, [sp, #104]	; 0x68
 800a5fe:	4654      	mov	r4, sl
 800a600:	2205      	movs	r2, #5
 800a602:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a606:	4858      	ldr	r0, [pc, #352]	; (800a768 <_vfiprintf_r+0x24c>)
 800a608:	f7f5 fe02 	bl	8000210 <memchr>
 800a60c:	9a04      	ldr	r2, [sp, #16]
 800a60e:	b9d8      	cbnz	r0, 800a648 <_vfiprintf_r+0x12c>
 800a610:	06d1      	lsls	r1, r2, #27
 800a612:	bf44      	itt	mi
 800a614:	2320      	movmi	r3, #32
 800a616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a61a:	0713      	lsls	r3, r2, #28
 800a61c:	bf44      	itt	mi
 800a61e:	232b      	movmi	r3, #43	; 0x2b
 800a620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a624:	f89a 3000 	ldrb.w	r3, [sl]
 800a628:	2b2a      	cmp	r3, #42	; 0x2a
 800a62a:	d015      	beq.n	800a658 <_vfiprintf_r+0x13c>
 800a62c:	9a07      	ldr	r2, [sp, #28]
 800a62e:	4654      	mov	r4, sl
 800a630:	2000      	movs	r0, #0
 800a632:	f04f 0c0a 	mov.w	ip, #10
 800a636:	4621      	mov	r1, r4
 800a638:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a63c:	3b30      	subs	r3, #48	; 0x30
 800a63e:	2b09      	cmp	r3, #9
 800a640:	d94e      	bls.n	800a6e0 <_vfiprintf_r+0x1c4>
 800a642:	b1b0      	cbz	r0, 800a672 <_vfiprintf_r+0x156>
 800a644:	9207      	str	r2, [sp, #28]
 800a646:	e014      	b.n	800a672 <_vfiprintf_r+0x156>
 800a648:	eba0 0308 	sub.w	r3, r0, r8
 800a64c:	fa09 f303 	lsl.w	r3, r9, r3
 800a650:	4313      	orrs	r3, r2
 800a652:	9304      	str	r3, [sp, #16]
 800a654:	46a2      	mov	sl, r4
 800a656:	e7d2      	b.n	800a5fe <_vfiprintf_r+0xe2>
 800a658:	9b03      	ldr	r3, [sp, #12]
 800a65a:	1d19      	adds	r1, r3, #4
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	9103      	str	r1, [sp, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	bfbb      	ittet	lt
 800a664:	425b      	neglt	r3, r3
 800a666:	f042 0202 	orrlt.w	r2, r2, #2
 800a66a:	9307      	strge	r3, [sp, #28]
 800a66c:	9307      	strlt	r3, [sp, #28]
 800a66e:	bfb8      	it	lt
 800a670:	9204      	strlt	r2, [sp, #16]
 800a672:	7823      	ldrb	r3, [r4, #0]
 800a674:	2b2e      	cmp	r3, #46	; 0x2e
 800a676:	d10c      	bne.n	800a692 <_vfiprintf_r+0x176>
 800a678:	7863      	ldrb	r3, [r4, #1]
 800a67a:	2b2a      	cmp	r3, #42	; 0x2a
 800a67c:	d135      	bne.n	800a6ea <_vfiprintf_r+0x1ce>
 800a67e:	9b03      	ldr	r3, [sp, #12]
 800a680:	1d1a      	adds	r2, r3, #4
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	9203      	str	r2, [sp, #12]
 800a686:	2b00      	cmp	r3, #0
 800a688:	bfb8      	it	lt
 800a68a:	f04f 33ff 	movlt.w	r3, #4294967295
 800a68e:	3402      	adds	r4, #2
 800a690:	9305      	str	r3, [sp, #20]
 800a692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a778 <_vfiprintf_r+0x25c>
 800a696:	7821      	ldrb	r1, [r4, #0]
 800a698:	2203      	movs	r2, #3
 800a69a:	4650      	mov	r0, sl
 800a69c:	f7f5 fdb8 	bl	8000210 <memchr>
 800a6a0:	b140      	cbz	r0, 800a6b4 <_vfiprintf_r+0x198>
 800a6a2:	2340      	movs	r3, #64	; 0x40
 800a6a4:	eba0 000a 	sub.w	r0, r0, sl
 800a6a8:	fa03 f000 	lsl.w	r0, r3, r0
 800a6ac:	9b04      	ldr	r3, [sp, #16]
 800a6ae:	4303      	orrs	r3, r0
 800a6b0:	3401      	adds	r4, #1
 800a6b2:	9304      	str	r3, [sp, #16]
 800a6b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6b8:	482c      	ldr	r0, [pc, #176]	; (800a76c <_vfiprintf_r+0x250>)
 800a6ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6be:	2206      	movs	r2, #6
 800a6c0:	f7f5 fda6 	bl	8000210 <memchr>
 800a6c4:	2800      	cmp	r0, #0
 800a6c6:	d03f      	beq.n	800a748 <_vfiprintf_r+0x22c>
 800a6c8:	4b29      	ldr	r3, [pc, #164]	; (800a770 <_vfiprintf_r+0x254>)
 800a6ca:	bb1b      	cbnz	r3, 800a714 <_vfiprintf_r+0x1f8>
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	3307      	adds	r3, #7
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	3308      	adds	r3, #8
 800a6d6:	9303      	str	r3, [sp, #12]
 800a6d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6da:	443b      	add	r3, r7
 800a6dc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6de:	e767      	b.n	800a5b0 <_vfiprintf_r+0x94>
 800a6e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6e4:	460c      	mov	r4, r1
 800a6e6:	2001      	movs	r0, #1
 800a6e8:	e7a5      	b.n	800a636 <_vfiprintf_r+0x11a>
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	3401      	adds	r4, #1
 800a6ee:	9305      	str	r3, [sp, #20]
 800a6f0:	4619      	mov	r1, r3
 800a6f2:	f04f 0c0a 	mov.w	ip, #10
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a6fc:	3a30      	subs	r2, #48	; 0x30
 800a6fe:	2a09      	cmp	r2, #9
 800a700:	d903      	bls.n	800a70a <_vfiprintf_r+0x1ee>
 800a702:	2b00      	cmp	r3, #0
 800a704:	d0c5      	beq.n	800a692 <_vfiprintf_r+0x176>
 800a706:	9105      	str	r1, [sp, #20]
 800a708:	e7c3      	b.n	800a692 <_vfiprintf_r+0x176>
 800a70a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a70e:	4604      	mov	r4, r0
 800a710:	2301      	movs	r3, #1
 800a712:	e7f0      	b.n	800a6f6 <_vfiprintf_r+0x1da>
 800a714:	ab03      	add	r3, sp, #12
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	462a      	mov	r2, r5
 800a71a:	4b16      	ldr	r3, [pc, #88]	; (800a774 <_vfiprintf_r+0x258>)
 800a71c:	a904      	add	r1, sp, #16
 800a71e:	4630      	mov	r0, r6
 800a720:	f3af 8000 	nop.w
 800a724:	4607      	mov	r7, r0
 800a726:	1c78      	adds	r0, r7, #1
 800a728:	d1d6      	bne.n	800a6d8 <_vfiprintf_r+0x1bc>
 800a72a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a72c:	07d9      	lsls	r1, r3, #31
 800a72e:	d405      	bmi.n	800a73c <_vfiprintf_r+0x220>
 800a730:	89ab      	ldrh	r3, [r5, #12]
 800a732:	059a      	lsls	r2, r3, #22
 800a734:	d402      	bmi.n	800a73c <_vfiprintf_r+0x220>
 800a736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a738:	f7ff fd7f 	bl	800a23a <__retarget_lock_release_recursive>
 800a73c:	89ab      	ldrh	r3, [r5, #12]
 800a73e:	065b      	lsls	r3, r3, #25
 800a740:	f53f af12 	bmi.w	800a568 <_vfiprintf_r+0x4c>
 800a744:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a746:	e711      	b.n	800a56c <_vfiprintf_r+0x50>
 800a748:	ab03      	add	r3, sp, #12
 800a74a:	9300      	str	r3, [sp, #0]
 800a74c:	462a      	mov	r2, r5
 800a74e:	4b09      	ldr	r3, [pc, #36]	; (800a774 <_vfiprintf_r+0x258>)
 800a750:	a904      	add	r1, sp, #16
 800a752:	4630      	mov	r0, r6
 800a754:	f000 f880 	bl	800a858 <_printf_i>
 800a758:	e7e4      	b.n	800a724 <_vfiprintf_r+0x208>
 800a75a:	bf00      	nop
 800a75c:	0800ad1c 	.word	0x0800ad1c
 800a760:	0800ad3c 	.word	0x0800ad3c
 800a764:	0800acfc 	.word	0x0800acfc
 800a768:	0800ad5c 	.word	0x0800ad5c
 800a76c:	0800ad66 	.word	0x0800ad66
 800a770:	00000000 	.word	0x00000000
 800a774:	0800a4f7 	.word	0x0800a4f7
 800a778:	0800ad62 	.word	0x0800ad62

0800a77c <_printf_common>:
 800a77c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a780:	4616      	mov	r6, r2
 800a782:	4699      	mov	r9, r3
 800a784:	688a      	ldr	r2, [r1, #8]
 800a786:	690b      	ldr	r3, [r1, #16]
 800a788:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a78c:	4293      	cmp	r3, r2
 800a78e:	bfb8      	it	lt
 800a790:	4613      	movlt	r3, r2
 800a792:	6033      	str	r3, [r6, #0]
 800a794:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a798:	4607      	mov	r7, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b10a      	cbz	r2, 800a7a2 <_printf_common+0x26>
 800a79e:	3301      	adds	r3, #1
 800a7a0:	6033      	str	r3, [r6, #0]
 800a7a2:	6823      	ldr	r3, [r4, #0]
 800a7a4:	0699      	lsls	r1, r3, #26
 800a7a6:	bf42      	ittt	mi
 800a7a8:	6833      	ldrmi	r3, [r6, #0]
 800a7aa:	3302      	addmi	r3, #2
 800a7ac:	6033      	strmi	r3, [r6, #0]
 800a7ae:	6825      	ldr	r5, [r4, #0]
 800a7b0:	f015 0506 	ands.w	r5, r5, #6
 800a7b4:	d106      	bne.n	800a7c4 <_printf_common+0x48>
 800a7b6:	f104 0a19 	add.w	sl, r4, #25
 800a7ba:	68e3      	ldr	r3, [r4, #12]
 800a7bc:	6832      	ldr	r2, [r6, #0]
 800a7be:	1a9b      	subs	r3, r3, r2
 800a7c0:	42ab      	cmp	r3, r5
 800a7c2:	dc26      	bgt.n	800a812 <_printf_common+0x96>
 800a7c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a7c8:	1e13      	subs	r3, r2, #0
 800a7ca:	6822      	ldr	r2, [r4, #0]
 800a7cc:	bf18      	it	ne
 800a7ce:	2301      	movne	r3, #1
 800a7d0:	0692      	lsls	r2, r2, #26
 800a7d2:	d42b      	bmi.n	800a82c <_printf_common+0xb0>
 800a7d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a7d8:	4649      	mov	r1, r9
 800a7da:	4638      	mov	r0, r7
 800a7dc:	47c0      	blx	r8
 800a7de:	3001      	adds	r0, #1
 800a7e0:	d01e      	beq.n	800a820 <_printf_common+0xa4>
 800a7e2:	6823      	ldr	r3, [r4, #0]
 800a7e4:	68e5      	ldr	r5, [r4, #12]
 800a7e6:	6832      	ldr	r2, [r6, #0]
 800a7e8:	f003 0306 	and.w	r3, r3, #6
 800a7ec:	2b04      	cmp	r3, #4
 800a7ee:	bf08      	it	eq
 800a7f0:	1aad      	subeq	r5, r5, r2
 800a7f2:	68a3      	ldr	r3, [r4, #8]
 800a7f4:	6922      	ldr	r2, [r4, #16]
 800a7f6:	bf0c      	ite	eq
 800a7f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a7fc:	2500      	movne	r5, #0
 800a7fe:	4293      	cmp	r3, r2
 800a800:	bfc4      	itt	gt
 800a802:	1a9b      	subgt	r3, r3, r2
 800a804:	18ed      	addgt	r5, r5, r3
 800a806:	2600      	movs	r6, #0
 800a808:	341a      	adds	r4, #26
 800a80a:	42b5      	cmp	r5, r6
 800a80c:	d11a      	bne.n	800a844 <_printf_common+0xc8>
 800a80e:	2000      	movs	r0, #0
 800a810:	e008      	b.n	800a824 <_printf_common+0xa8>
 800a812:	2301      	movs	r3, #1
 800a814:	4652      	mov	r2, sl
 800a816:	4649      	mov	r1, r9
 800a818:	4638      	mov	r0, r7
 800a81a:	47c0      	blx	r8
 800a81c:	3001      	adds	r0, #1
 800a81e:	d103      	bne.n	800a828 <_printf_common+0xac>
 800a820:	f04f 30ff 	mov.w	r0, #4294967295
 800a824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a828:	3501      	adds	r5, #1
 800a82a:	e7c6      	b.n	800a7ba <_printf_common+0x3e>
 800a82c:	18e1      	adds	r1, r4, r3
 800a82e:	1c5a      	adds	r2, r3, #1
 800a830:	2030      	movs	r0, #48	; 0x30
 800a832:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a836:	4422      	add	r2, r4
 800a838:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a83c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a840:	3302      	adds	r3, #2
 800a842:	e7c7      	b.n	800a7d4 <_printf_common+0x58>
 800a844:	2301      	movs	r3, #1
 800a846:	4622      	mov	r2, r4
 800a848:	4649      	mov	r1, r9
 800a84a:	4638      	mov	r0, r7
 800a84c:	47c0      	blx	r8
 800a84e:	3001      	adds	r0, #1
 800a850:	d0e6      	beq.n	800a820 <_printf_common+0xa4>
 800a852:	3601      	adds	r6, #1
 800a854:	e7d9      	b.n	800a80a <_printf_common+0x8e>
	...

0800a858 <_printf_i>:
 800a858:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a85c:	7e0f      	ldrb	r7, [r1, #24]
 800a85e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a860:	2f78      	cmp	r7, #120	; 0x78
 800a862:	4691      	mov	r9, r2
 800a864:	4680      	mov	r8, r0
 800a866:	460c      	mov	r4, r1
 800a868:	469a      	mov	sl, r3
 800a86a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a86e:	d807      	bhi.n	800a880 <_printf_i+0x28>
 800a870:	2f62      	cmp	r7, #98	; 0x62
 800a872:	d80a      	bhi.n	800a88a <_printf_i+0x32>
 800a874:	2f00      	cmp	r7, #0
 800a876:	f000 80d8 	beq.w	800aa2a <_printf_i+0x1d2>
 800a87a:	2f58      	cmp	r7, #88	; 0x58
 800a87c:	f000 80a3 	beq.w	800a9c6 <_printf_i+0x16e>
 800a880:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a884:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a888:	e03a      	b.n	800a900 <_printf_i+0xa8>
 800a88a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a88e:	2b15      	cmp	r3, #21
 800a890:	d8f6      	bhi.n	800a880 <_printf_i+0x28>
 800a892:	a101      	add	r1, pc, #4	; (adr r1, 800a898 <_printf_i+0x40>)
 800a894:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a898:	0800a8f1 	.word	0x0800a8f1
 800a89c:	0800a905 	.word	0x0800a905
 800a8a0:	0800a881 	.word	0x0800a881
 800a8a4:	0800a881 	.word	0x0800a881
 800a8a8:	0800a881 	.word	0x0800a881
 800a8ac:	0800a881 	.word	0x0800a881
 800a8b0:	0800a905 	.word	0x0800a905
 800a8b4:	0800a881 	.word	0x0800a881
 800a8b8:	0800a881 	.word	0x0800a881
 800a8bc:	0800a881 	.word	0x0800a881
 800a8c0:	0800a881 	.word	0x0800a881
 800a8c4:	0800aa11 	.word	0x0800aa11
 800a8c8:	0800a935 	.word	0x0800a935
 800a8cc:	0800a9f3 	.word	0x0800a9f3
 800a8d0:	0800a881 	.word	0x0800a881
 800a8d4:	0800a881 	.word	0x0800a881
 800a8d8:	0800aa33 	.word	0x0800aa33
 800a8dc:	0800a881 	.word	0x0800a881
 800a8e0:	0800a935 	.word	0x0800a935
 800a8e4:	0800a881 	.word	0x0800a881
 800a8e8:	0800a881 	.word	0x0800a881
 800a8ec:	0800a9fb 	.word	0x0800a9fb
 800a8f0:	682b      	ldr	r3, [r5, #0]
 800a8f2:	1d1a      	adds	r2, r3, #4
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	602a      	str	r2, [r5, #0]
 800a8f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a8fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a900:	2301      	movs	r3, #1
 800a902:	e0a3      	b.n	800aa4c <_printf_i+0x1f4>
 800a904:	6820      	ldr	r0, [r4, #0]
 800a906:	6829      	ldr	r1, [r5, #0]
 800a908:	0606      	lsls	r6, r0, #24
 800a90a:	f101 0304 	add.w	r3, r1, #4
 800a90e:	d50a      	bpl.n	800a926 <_printf_i+0xce>
 800a910:	680e      	ldr	r6, [r1, #0]
 800a912:	602b      	str	r3, [r5, #0]
 800a914:	2e00      	cmp	r6, #0
 800a916:	da03      	bge.n	800a920 <_printf_i+0xc8>
 800a918:	232d      	movs	r3, #45	; 0x2d
 800a91a:	4276      	negs	r6, r6
 800a91c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a920:	485e      	ldr	r0, [pc, #376]	; (800aa9c <_printf_i+0x244>)
 800a922:	230a      	movs	r3, #10
 800a924:	e019      	b.n	800a95a <_printf_i+0x102>
 800a926:	680e      	ldr	r6, [r1, #0]
 800a928:	602b      	str	r3, [r5, #0]
 800a92a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a92e:	bf18      	it	ne
 800a930:	b236      	sxthne	r6, r6
 800a932:	e7ef      	b.n	800a914 <_printf_i+0xbc>
 800a934:	682b      	ldr	r3, [r5, #0]
 800a936:	6820      	ldr	r0, [r4, #0]
 800a938:	1d19      	adds	r1, r3, #4
 800a93a:	6029      	str	r1, [r5, #0]
 800a93c:	0601      	lsls	r1, r0, #24
 800a93e:	d501      	bpl.n	800a944 <_printf_i+0xec>
 800a940:	681e      	ldr	r6, [r3, #0]
 800a942:	e002      	b.n	800a94a <_printf_i+0xf2>
 800a944:	0646      	lsls	r6, r0, #25
 800a946:	d5fb      	bpl.n	800a940 <_printf_i+0xe8>
 800a948:	881e      	ldrh	r6, [r3, #0]
 800a94a:	4854      	ldr	r0, [pc, #336]	; (800aa9c <_printf_i+0x244>)
 800a94c:	2f6f      	cmp	r7, #111	; 0x6f
 800a94e:	bf0c      	ite	eq
 800a950:	2308      	moveq	r3, #8
 800a952:	230a      	movne	r3, #10
 800a954:	2100      	movs	r1, #0
 800a956:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a95a:	6865      	ldr	r5, [r4, #4]
 800a95c:	60a5      	str	r5, [r4, #8]
 800a95e:	2d00      	cmp	r5, #0
 800a960:	bfa2      	ittt	ge
 800a962:	6821      	ldrge	r1, [r4, #0]
 800a964:	f021 0104 	bicge.w	r1, r1, #4
 800a968:	6021      	strge	r1, [r4, #0]
 800a96a:	b90e      	cbnz	r6, 800a970 <_printf_i+0x118>
 800a96c:	2d00      	cmp	r5, #0
 800a96e:	d04d      	beq.n	800aa0c <_printf_i+0x1b4>
 800a970:	4615      	mov	r5, r2
 800a972:	fbb6 f1f3 	udiv	r1, r6, r3
 800a976:	fb03 6711 	mls	r7, r3, r1, r6
 800a97a:	5dc7      	ldrb	r7, [r0, r7]
 800a97c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a980:	4637      	mov	r7, r6
 800a982:	42bb      	cmp	r3, r7
 800a984:	460e      	mov	r6, r1
 800a986:	d9f4      	bls.n	800a972 <_printf_i+0x11a>
 800a988:	2b08      	cmp	r3, #8
 800a98a:	d10b      	bne.n	800a9a4 <_printf_i+0x14c>
 800a98c:	6823      	ldr	r3, [r4, #0]
 800a98e:	07de      	lsls	r6, r3, #31
 800a990:	d508      	bpl.n	800a9a4 <_printf_i+0x14c>
 800a992:	6923      	ldr	r3, [r4, #16]
 800a994:	6861      	ldr	r1, [r4, #4]
 800a996:	4299      	cmp	r1, r3
 800a998:	bfde      	ittt	le
 800a99a:	2330      	movle	r3, #48	; 0x30
 800a99c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a9a0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a9a4:	1b52      	subs	r2, r2, r5
 800a9a6:	6122      	str	r2, [r4, #16]
 800a9a8:	f8cd a000 	str.w	sl, [sp]
 800a9ac:	464b      	mov	r3, r9
 800a9ae:	aa03      	add	r2, sp, #12
 800a9b0:	4621      	mov	r1, r4
 800a9b2:	4640      	mov	r0, r8
 800a9b4:	f7ff fee2 	bl	800a77c <_printf_common>
 800a9b8:	3001      	adds	r0, #1
 800a9ba:	d14c      	bne.n	800aa56 <_printf_i+0x1fe>
 800a9bc:	f04f 30ff 	mov.w	r0, #4294967295
 800a9c0:	b004      	add	sp, #16
 800a9c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9c6:	4835      	ldr	r0, [pc, #212]	; (800aa9c <_printf_i+0x244>)
 800a9c8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a9cc:	6829      	ldr	r1, [r5, #0]
 800a9ce:	6823      	ldr	r3, [r4, #0]
 800a9d0:	f851 6b04 	ldr.w	r6, [r1], #4
 800a9d4:	6029      	str	r1, [r5, #0]
 800a9d6:	061d      	lsls	r5, r3, #24
 800a9d8:	d514      	bpl.n	800aa04 <_printf_i+0x1ac>
 800a9da:	07df      	lsls	r7, r3, #31
 800a9dc:	bf44      	itt	mi
 800a9de:	f043 0320 	orrmi.w	r3, r3, #32
 800a9e2:	6023      	strmi	r3, [r4, #0]
 800a9e4:	b91e      	cbnz	r6, 800a9ee <_printf_i+0x196>
 800a9e6:	6823      	ldr	r3, [r4, #0]
 800a9e8:	f023 0320 	bic.w	r3, r3, #32
 800a9ec:	6023      	str	r3, [r4, #0]
 800a9ee:	2310      	movs	r3, #16
 800a9f0:	e7b0      	b.n	800a954 <_printf_i+0xfc>
 800a9f2:	6823      	ldr	r3, [r4, #0]
 800a9f4:	f043 0320 	orr.w	r3, r3, #32
 800a9f8:	6023      	str	r3, [r4, #0]
 800a9fa:	2378      	movs	r3, #120	; 0x78
 800a9fc:	4828      	ldr	r0, [pc, #160]	; (800aaa0 <_printf_i+0x248>)
 800a9fe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800aa02:	e7e3      	b.n	800a9cc <_printf_i+0x174>
 800aa04:	0659      	lsls	r1, r3, #25
 800aa06:	bf48      	it	mi
 800aa08:	b2b6      	uxthmi	r6, r6
 800aa0a:	e7e6      	b.n	800a9da <_printf_i+0x182>
 800aa0c:	4615      	mov	r5, r2
 800aa0e:	e7bb      	b.n	800a988 <_printf_i+0x130>
 800aa10:	682b      	ldr	r3, [r5, #0]
 800aa12:	6826      	ldr	r6, [r4, #0]
 800aa14:	6961      	ldr	r1, [r4, #20]
 800aa16:	1d18      	adds	r0, r3, #4
 800aa18:	6028      	str	r0, [r5, #0]
 800aa1a:	0635      	lsls	r5, r6, #24
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	d501      	bpl.n	800aa24 <_printf_i+0x1cc>
 800aa20:	6019      	str	r1, [r3, #0]
 800aa22:	e002      	b.n	800aa2a <_printf_i+0x1d2>
 800aa24:	0670      	lsls	r0, r6, #25
 800aa26:	d5fb      	bpl.n	800aa20 <_printf_i+0x1c8>
 800aa28:	8019      	strh	r1, [r3, #0]
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	6123      	str	r3, [r4, #16]
 800aa2e:	4615      	mov	r5, r2
 800aa30:	e7ba      	b.n	800a9a8 <_printf_i+0x150>
 800aa32:	682b      	ldr	r3, [r5, #0]
 800aa34:	1d1a      	adds	r2, r3, #4
 800aa36:	602a      	str	r2, [r5, #0]
 800aa38:	681d      	ldr	r5, [r3, #0]
 800aa3a:	6862      	ldr	r2, [r4, #4]
 800aa3c:	2100      	movs	r1, #0
 800aa3e:	4628      	mov	r0, r5
 800aa40:	f7f5 fbe6 	bl	8000210 <memchr>
 800aa44:	b108      	cbz	r0, 800aa4a <_printf_i+0x1f2>
 800aa46:	1b40      	subs	r0, r0, r5
 800aa48:	6060      	str	r0, [r4, #4]
 800aa4a:	6863      	ldr	r3, [r4, #4]
 800aa4c:	6123      	str	r3, [r4, #16]
 800aa4e:	2300      	movs	r3, #0
 800aa50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa54:	e7a8      	b.n	800a9a8 <_printf_i+0x150>
 800aa56:	6923      	ldr	r3, [r4, #16]
 800aa58:	462a      	mov	r2, r5
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	4640      	mov	r0, r8
 800aa5e:	47d0      	blx	sl
 800aa60:	3001      	adds	r0, #1
 800aa62:	d0ab      	beq.n	800a9bc <_printf_i+0x164>
 800aa64:	6823      	ldr	r3, [r4, #0]
 800aa66:	079b      	lsls	r3, r3, #30
 800aa68:	d413      	bmi.n	800aa92 <_printf_i+0x23a>
 800aa6a:	68e0      	ldr	r0, [r4, #12]
 800aa6c:	9b03      	ldr	r3, [sp, #12]
 800aa6e:	4298      	cmp	r0, r3
 800aa70:	bfb8      	it	lt
 800aa72:	4618      	movlt	r0, r3
 800aa74:	e7a4      	b.n	800a9c0 <_printf_i+0x168>
 800aa76:	2301      	movs	r3, #1
 800aa78:	4632      	mov	r2, r6
 800aa7a:	4649      	mov	r1, r9
 800aa7c:	4640      	mov	r0, r8
 800aa7e:	47d0      	blx	sl
 800aa80:	3001      	adds	r0, #1
 800aa82:	d09b      	beq.n	800a9bc <_printf_i+0x164>
 800aa84:	3501      	adds	r5, #1
 800aa86:	68e3      	ldr	r3, [r4, #12]
 800aa88:	9903      	ldr	r1, [sp, #12]
 800aa8a:	1a5b      	subs	r3, r3, r1
 800aa8c:	42ab      	cmp	r3, r5
 800aa8e:	dcf2      	bgt.n	800aa76 <_printf_i+0x21e>
 800aa90:	e7eb      	b.n	800aa6a <_printf_i+0x212>
 800aa92:	2500      	movs	r5, #0
 800aa94:	f104 0619 	add.w	r6, r4, #25
 800aa98:	e7f5      	b.n	800aa86 <_printf_i+0x22e>
 800aa9a:	bf00      	nop
 800aa9c:	0800ad6d 	.word	0x0800ad6d
 800aaa0:	0800ad7e 	.word	0x0800ad7e

0800aaa4 <_sbrk_r>:
 800aaa4:	b538      	push	{r3, r4, r5, lr}
 800aaa6:	4d06      	ldr	r5, [pc, #24]	; (800aac0 <_sbrk_r+0x1c>)
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	4604      	mov	r4, r0
 800aaac:	4608      	mov	r0, r1
 800aaae:	602b      	str	r3, [r5, #0]
 800aab0:	f7fa f96c 	bl	8004d8c <_sbrk>
 800aab4:	1c43      	adds	r3, r0, #1
 800aab6:	d102      	bne.n	800aabe <_sbrk_r+0x1a>
 800aab8:	682b      	ldr	r3, [r5, #0]
 800aaba:	b103      	cbz	r3, 800aabe <_sbrk_r+0x1a>
 800aabc:	6023      	str	r3, [r4, #0]
 800aabe:	bd38      	pop	{r3, r4, r5, pc}
 800aac0:	20000548 	.word	0x20000548

0800aac4 <__sread>:
 800aac4:	b510      	push	{r4, lr}
 800aac6:	460c      	mov	r4, r1
 800aac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aacc:	f000 f8a0 	bl	800ac10 <_read_r>
 800aad0:	2800      	cmp	r0, #0
 800aad2:	bfab      	itete	ge
 800aad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aad6:	89a3      	ldrhlt	r3, [r4, #12]
 800aad8:	181b      	addge	r3, r3, r0
 800aada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aade:	bfac      	ite	ge
 800aae0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aae2:	81a3      	strhlt	r3, [r4, #12]
 800aae4:	bd10      	pop	{r4, pc}

0800aae6 <__swrite>:
 800aae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aaea:	461f      	mov	r7, r3
 800aaec:	898b      	ldrh	r3, [r1, #12]
 800aaee:	05db      	lsls	r3, r3, #23
 800aaf0:	4605      	mov	r5, r0
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	4616      	mov	r6, r2
 800aaf6:	d505      	bpl.n	800ab04 <__swrite+0x1e>
 800aaf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aafc:	2302      	movs	r3, #2
 800aafe:	2200      	movs	r2, #0
 800ab00:	f000 f868 	bl	800abd4 <_lseek_r>
 800ab04:	89a3      	ldrh	r3, [r4, #12]
 800ab06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab0e:	81a3      	strh	r3, [r4, #12]
 800ab10:	4632      	mov	r2, r6
 800ab12:	463b      	mov	r3, r7
 800ab14:	4628      	mov	r0, r5
 800ab16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ab1a:	f000 b817 	b.w	800ab4c <_write_r>

0800ab1e <__sseek>:
 800ab1e:	b510      	push	{r4, lr}
 800ab20:	460c      	mov	r4, r1
 800ab22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab26:	f000 f855 	bl	800abd4 <_lseek_r>
 800ab2a:	1c43      	adds	r3, r0, #1
 800ab2c:	89a3      	ldrh	r3, [r4, #12]
 800ab2e:	bf15      	itete	ne
 800ab30:	6560      	strne	r0, [r4, #84]	; 0x54
 800ab32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ab36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ab3a:	81a3      	strheq	r3, [r4, #12]
 800ab3c:	bf18      	it	ne
 800ab3e:	81a3      	strhne	r3, [r4, #12]
 800ab40:	bd10      	pop	{r4, pc}

0800ab42 <__sclose>:
 800ab42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab46:	f000 b813 	b.w	800ab70 <_close_r>
	...

0800ab4c <_write_r>:
 800ab4c:	b538      	push	{r3, r4, r5, lr}
 800ab4e:	4d07      	ldr	r5, [pc, #28]	; (800ab6c <_write_r+0x20>)
 800ab50:	4604      	mov	r4, r0
 800ab52:	4608      	mov	r0, r1
 800ab54:	4611      	mov	r1, r2
 800ab56:	2200      	movs	r2, #0
 800ab58:	602a      	str	r2, [r5, #0]
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f7f8 fb72 	bl	8003244 <_write>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_write_r+0x1e>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_write_r+0x1e>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20000548 	.word	0x20000548

0800ab70 <_close_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d06      	ldr	r5, [pc, #24]	; (800ab8c <_close_r+0x1c>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	602b      	str	r3, [r5, #0]
 800ab7c:	f7fa f8d1 	bl	8004d22 <_close>
 800ab80:	1c43      	adds	r3, r0, #1
 800ab82:	d102      	bne.n	800ab8a <_close_r+0x1a>
 800ab84:	682b      	ldr	r3, [r5, #0]
 800ab86:	b103      	cbz	r3, 800ab8a <_close_r+0x1a>
 800ab88:	6023      	str	r3, [r4, #0]
 800ab8a:	bd38      	pop	{r3, r4, r5, pc}
 800ab8c:	20000548 	.word	0x20000548

0800ab90 <_fstat_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4d07      	ldr	r5, [pc, #28]	; (800abb0 <_fstat_r+0x20>)
 800ab94:	2300      	movs	r3, #0
 800ab96:	4604      	mov	r4, r0
 800ab98:	4608      	mov	r0, r1
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	602b      	str	r3, [r5, #0]
 800ab9e:	f7fa f8cc 	bl	8004d3a <_fstat>
 800aba2:	1c43      	adds	r3, r0, #1
 800aba4:	d102      	bne.n	800abac <_fstat_r+0x1c>
 800aba6:	682b      	ldr	r3, [r5, #0]
 800aba8:	b103      	cbz	r3, 800abac <_fstat_r+0x1c>
 800abaa:	6023      	str	r3, [r4, #0]
 800abac:	bd38      	pop	{r3, r4, r5, pc}
 800abae:	bf00      	nop
 800abb0:	20000548 	.word	0x20000548

0800abb4 <_isatty_r>:
 800abb4:	b538      	push	{r3, r4, r5, lr}
 800abb6:	4d06      	ldr	r5, [pc, #24]	; (800abd0 <_isatty_r+0x1c>)
 800abb8:	2300      	movs	r3, #0
 800abba:	4604      	mov	r4, r0
 800abbc:	4608      	mov	r0, r1
 800abbe:	602b      	str	r3, [r5, #0]
 800abc0:	f7fa f8cb 	bl	8004d5a <_isatty>
 800abc4:	1c43      	adds	r3, r0, #1
 800abc6:	d102      	bne.n	800abce <_isatty_r+0x1a>
 800abc8:	682b      	ldr	r3, [r5, #0]
 800abca:	b103      	cbz	r3, 800abce <_isatty_r+0x1a>
 800abcc:	6023      	str	r3, [r4, #0]
 800abce:	bd38      	pop	{r3, r4, r5, pc}
 800abd0:	20000548 	.word	0x20000548

0800abd4 <_lseek_r>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	4d07      	ldr	r5, [pc, #28]	; (800abf4 <_lseek_r+0x20>)
 800abd8:	4604      	mov	r4, r0
 800abda:	4608      	mov	r0, r1
 800abdc:	4611      	mov	r1, r2
 800abde:	2200      	movs	r2, #0
 800abe0:	602a      	str	r2, [r5, #0]
 800abe2:	461a      	mov	r2, r3
 800abe4:	f7fa f8c4 	bl	8004d70 <_lseek>
 800abe8:	1c43      	adds	r3, r0, #1
 800abea:	d102      	bne.n	800abf2 <_lseek_r+0x1e>
 800abec:	682b      	ldr	r3, [r5, #0]
 800abee:	b103      	cbz	r3, 800abf2 <_lseek_r+0x1e>
 800abf0:	6023      	str	r3, [r4, #0]
 800abf2:	bd38      	pop	{r3, r4, r5, pc}
 800abf4:	20000548 	.word	0x20000548

0800abf8 <__malloc_lock>:
 800abf8:	4801      	ldr	r0, [pc, #4]	; (800ac00 <__malloc_lock+0x8>)
 800abfa:	f7ff bb1d 	b.w	800a238 <__retarget_lock_acquire_recursive>
 800abfe:	bf00      	nop
 800ac00:	2000053c 	.word	0x2000053c

0800ac04 <__malloc_unlock>:
 800ac04:	4801      	ldr	r0, [pc, #4]	; (800ac0c <__malloc_unlock+0x8>)
 800ac06:	f7ff bb18 	b.w	800a23a <__retarget_lock_release_recursive>
 800ac0a:	bf00      	nop
 800ac0c:	2000053c 	.word	0x2000053c

0800ac10 <_read_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4d07      	ldr	r5, [pc, #28]	; (800ac30 <_read_r+0x20>)
 800ac14:	4604      	mov	r4, r0
 800ac16:	4608      	mov	r0, r1
 800ac18:	4611      	mov	r1, r2
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	602a      	str	r2, [r5, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	f7fa f862 	bl	8004ce8 <_read>
 800ac24:	1c43      	adds	r3, r0, #1
 800ac26:	d102      	bne.n	800ac2e <_read_r+0x1e>
 800ac28:	682b      	ldr	r3, [r5, #0]
 800ac2a:	b103      	cbz	r3, 800ac2e <_read_r+0x1e>
 800ac2c:	6023      	str	r3, [r4, #0]
 800ac2e:	bd38      	pop	{r3, r4, r5, pc}
 800ac30:	20000548 	.word	0x20000548

0800ac34 <_init>:
 800ac34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac36:	bf00      	nop
 800ac38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac3a:	bc08      	pop	{r3}
 800ac3c:	469e      	mov	lr, r3
 800ac3e:	4770      	bx	lr

0800ac40 <_fini>:
 800ac40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac42:	bf00      	nop
 800ac44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac46:	bc08      	pop	{r3}
 800ac48:	469e      	mov	lr, r3
 800ac4a:	4770      	bx	lr
